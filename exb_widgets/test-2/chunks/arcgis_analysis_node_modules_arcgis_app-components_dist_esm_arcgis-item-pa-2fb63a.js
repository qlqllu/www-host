"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-item-pa-2fb63a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-palette.entry.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-palette.entry.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_item_palette: () => (/* binding */ ArcgisItemPalette)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const arcgisItemPaletteCss = ".sc-arcgis-item-palette-h{display:flex;flex-wrap:wrap;width:100%}.palette.sc-arcgis-item-palette{display:grid;justify-content:space-between;-moz-column-gap:4px;column-gap:4px;row-gap:4px;width:100%}.palette.sc-arcgis-item-palette:focus-within .item--active.sc-arcgis-item-palette:not(.item--selected){border-color:#ccc}.item.sc-arcgis-item-palette{display:flex;align-items:center;justify-content:center;cursor:pointer;border:2px solid transparent;outline:none}.item--selected.sc-arcgis-item-palette{border-color:#0079c1;font-weight:bolder}.marker-item.sc-arcgis-item-palette>div.sc-arcgis-item-palette>img.sc-arcgis-item-palette{width:100%}";

const ItemPaletteCSS = {
  palette: "palette",
  item: "item",
  itemActive: "item--active",
  itemSelected: "item--selected"
};
const indexToXY = (index, width) => {
  const x = index % width;
  const y = Math.floor(index / width);
  return { x, y };
};
const xyToIndex = (x, y, width) => x + width * y;
function ensureItemIsInView(scrollerContainer, blockOrSection) {
  if (!scrollerContainer) {
    return;
  }
  const scrollerRect = scrollerContainer.getBoundingClientRect();
  const blockOrSectionRect = blockOrSection.getBoundingClientRect();
  const blockOrSectionHeight = blockOrSectionRect.top + blockOrSectionRect.height;
  const scrollerHeight = scrollerRect.top + scrollerRect.height;
  const needToScrollDown = blockOrSectionHeight > scrollerHeight;
  if (needToScrollDown) {
    const scrollAmount = Math.abs(scrollerHeight - blockOrSectionHeight);
    scrollerContainer.scrollTop += scrollAmount;
    return;
  }
  const needToScrollUp = blockOrSectionRect.top < scrollerRect.top;
  if (needToScrollUp) {
    const scrollAmount = Math.abs(blockOrSectionRect.top - scrollerRect.top);
    scrollerContainer.scrollTop -= scrollAmount;
  }
}
const ArcgisItemPalette = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisItemSelect = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemSelect", 7);
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.handleFocus = () => {
      const { items, selected } = this;
      const selectedItemIndex = items.findIndex((item) => typeof selected === "function"
        ? selected(item)
        : item === selected);
      this.selectedItemIndex = selectedItemIndex;
      this.activeItemIndex = selectedItemIndex < 0 ? 0 : selectedItemIndex;
    };
    this.handleKeyDown = (event) => {
      const { key } = event;
      const { el, itemsPerRow, items } = this;
      const NAVIGATION_KEYS = [" ", "Enter", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp"];
      if (NAVIGATION_KEYS.indexOf(key) === -1) {
        return;
      }
      if (key === "ArrowLeft") {
        this.activeItemIndex = this.moveItemIndex("left", itemsPerRow);
      }
      else if (key === "ArrowRight") {
        this.activeItemIndex = this.moveItemIndex("right", itemsPerRow);
      }
      else if (key === "ArrowUp") {
        this.activeItemIndex = this.moveItemIndex("up", itemsPerRow);
      }
      else if (key === "ArrowDown") {
        this.activeItemIndex = this.moveItemIndex("down", itemsPerRow);
      }
      else if (key === "Enter" || key === " ") {
        this.selectItem(items[this.activeItemIndex]);
      }
      const activeItem = el.querySelectorAll(`.${ItemPaletteCSS.item}`)[this.activeItemIndex];
      ensureItemIsInView(el.parentElement, activeItem);
      event.preventDefault();
      event.stopPropagation();
    };
    this.moveItemIndex = (direction, itemsPerRow) => {
      const currentIndex = this.activeItemIndex;
      const totalItems = this.items.length;
      let { x, y } = indexToXY(currentIndex, itemsPerRow);
      const origX = x;
      const origY = y;
      if (direction === "left") {
        x -= 1;
      }
      else if (direction === "right") {
        x += 1;
      }
      if (x < 0) {
        x = 0;
      }
      else if (x > itemsPerRow - 1) {
        x = itemsPerRow - 1;
      }
      else if (direction === "up") {
        y -= 1;
      }
      else if (direction === "down") {
        y += 1;
      }
      const rows = Math.ceil(totalItems / itemsPerRow);
      if (y < 0) {
        y = 0;
      }
      else if (y > rows - 1) {
        y = rows - 1;
      }
      const futureIndex = x + itemsPerRow * y;
      if (futureIndex > totalItems - 1) {
        return xyToIndex(origX, origY, itemsPerRow);
      }
      return xyToIndex(x, y, itemsPerRow);
    };
    this.handleClick = (event) => {
      const node = event.currentTarget;
      const itemIndex = Number(node.getAttribute("data-index"));
      this.selectItem(this.items[itemIndex]);
    };
    this.selectItem = (item) => {
      const { items, arcgisItemSelect } = this;
      const itemIndex = items.indexOf(item);
      this.selectedItemIndex = itemIndex;
      this.activeItemIndex = itemIndex;
      arcgisItemSelect.emit(item);
    };
    this.extraItemProps = undefined;
    this.ItemRenderer = undefined;
    this.items = undefined;
    this.itemsPerRow = 5;
    this.itemProperty = undefined;
    this.selected = undefined;
    this.activeItemIndex = 0;
    this.selectedItemIndex = 0;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Set focus on selected item, e.g. when item gets selected without a mouse click
   */
  async setFocus() {
    var _a;
    this.handleFocus();
    (_a = this.el.querySelector(`.${ItemPaletteCSS.itemSelected}`)) === null || _a === void 0 ? void 0 : _a.focus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  render() {
    var _a;
    const { items, ItemRenderer, extraItemProps, itemProperty, selected, itemsPerRow } = this;
    const itemWrappers = [];
    const totalRows = Math.ceil(items.length / itemsPerRow);
    const gridTemplateColumns = Array(itemsPerRow).fill("auto").join(" ");
    for (let y = 0; y < totalRows; y++) {
      for (let x = 0, index = xyToIndex(x, y, itemsPerRow); x < itemsPerRow; x++, index = xyToIndex(x, y, itemsPerRow)) {
        const item = items[index];
        if (index >= items.length) {
          break;
        }
        itemWrappers.push((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
            [ItemPaletteCSS.item]: true,
            [ItemPaletteCSS.itemActive]: index === this.activeItemIndex,
            [ItemPaletteCSS.itemSelected]: typeof selected === "function"
              ? selected(item)
              : item === selected
          }, "data-index": index, key: index, onClick: this.handleClick, tabIndex: -1, "aria-label": ((_a = item.item) === null || _a === void 0 ? void 0 : _a.data) ? (item.item.data.title || item.item.data.name) : item.name }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(ItemRenderer, Object.assign({}, Object.assign(Object.assign({}, (itemProperty ? { [itemProperty]: item } : item)), extraItemProps)))));
      }
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: ItemPaletteCSS.palette, "data-row-size": itemsPerRow, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown, tabIndex: 0, style: { gridTemplateColumns } }, itemWrappers));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemPalette.style = arcgisItemPaletteCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,