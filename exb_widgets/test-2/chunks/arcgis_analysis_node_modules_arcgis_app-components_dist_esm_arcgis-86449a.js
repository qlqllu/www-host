"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-86449a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const addItemStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  typeKeywords: [],
  customParameters: [],
  analyzedLocationTypes: [],
  allowStoredAuth: true,
  isSecured: null,
  checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-feature-layer-summary.entry.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-feature-layer-summary.entry.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_feature_layer_summary: () => (/* binding */ ArcgisNewItemPagesFeatureLayerSummary)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _feature_layer_d0f64b81_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./feature-layer-d0f64b81.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-d0f64b81.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */







const arcgisNewItemPagesFeatureLayerSummaryCss = ".info-container{padding-bottom:1.5rem}.layer-description{display:block;margin-bottom:1.5rem}.details{padding-bottom:0.5rem;display:block}.deselect-button{margin-top:1.5rem;margin-bottom:1rem}arcgis-new-item-layer-summary-item+arcgis-new-item-layer-summary-item{border-top:none}";

const ArcgisNewItemPagesFeatureLayerSummary = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.newItemUpdatePage = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
    this.featureLayerInfos = [];
    this.selectAll = () => {
      const selectedLayerInfoNames = {};
      this.featureLayerInfos.forEach((info) => {
        selectedLayerInfoNames[info.name] = true;
      });
      this.selectedLayerInfoNames = selectedLayerInfoNames;
    };
    this.deselectAll = () => {
      this.selectedLayerInfoNames = {};
    };
    this.selectOrDeselectLayer = (layerName, selected) => {
      if (selected) {
        this.selectedLayerInfoNames[layerName] = true;
      }
      else {
        delete this.selectedLayerInfoNames[layerName];
      }
      this.selectedLayerInfoNames = Object.assign({}, this.selectedLayerInfoNames);
    };
    this.selectedLayerInfoNames = {};
    this.alertInfo = undefined;
  }
  handleNext() {
    const { selectedLayerInfoNames, featureLayerInfos } = this;
    if (!Object.keys(selectedLayerInfoNames).some((name) => selectedLayerInfoNames[name] === true)) {
      (0,_feature_layer_d0f64b81_js__WEBPACK_IMPORTED_MODULE_3__.f)("No layer chosen");
      this.setAlertMessage("noLayer");
      return;
    }
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.selectedServiceInfoLayersNames = Object.assign({}, selectedLayerInfoNames);
    const layerChosen = featureLayerInfos.some((info) => info.type !== "Table" && selectedLayerInfoNames[info.name]);
    this.newItemUpdatePage.emit(layerChosen ? "featureLayerPreference" : "itemProperties");
  }
  async componentWillLoad() {
    const { serviceInfo, selectedServiceInfoLayersNames, addFeatureLayerType } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
    const { i18n } = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__.u;
    this.addCreateI18n = i18n;
    this.i18n = i18n.featureLayerSummary;
    this.creationType = addFeatureLayerType;
    this.layerName = (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.name) || _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.sourceTitle;
    const featureServiceInfo = serviceInfo;
    this.featureLayerInfos = [...featureServiceInfo.layers, ...featureServiceInfo.tables].sort((infoA, infoB) => infoA.id - infoB.id);
    let newSelectedLayerInfoNames = {};
    if (selectedServiceInfoLayersNames) {
      // This means we're going back from the next screen
      newSelectedLayerInfoNames = Object.assign({}, selectedServiceInfoLayersNames);
    }
    else {
      this.featureLayerInfos.forEach((info) => {
        newSelectedLayerInfoNames[info.name] = true;
      });
    }
    this.selectedLayerInfoNames = newSelectedLayerInfoNames;
  }
  setAlertMessage(type) {
    this.alertInfo = this.i18n.error[type];
  }
  render() {
    const { i18n, addCreateI18n, selectedLayerInfoNames, featureLayerInfos, alertInfo, creationType, layerName, selectAll, deselectAll, selectOrDeselectLayer } = this;
    const multipleLayers = featureLayerInfos.length > 1;
    const featureLayerI18n = addCreateI18n.featureLayer;
    const allowSelectAll = Object.keys(selectedLayerInfoNames).length <= 0;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { class: "layer-description", header: featureLayerI18n.creationType[creationType], content: layerName, leadingIconInfo: { icon: "featureLayer", scale: "s" } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.layerDetails, content: multipleLayers ? i18n.deselectAnyLayers : "", class: "details" }), multipleLayers && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { kind: "neutral", class: "deselect-button", onClick: allowSelectAll ? selectAll : deselectAll }, allowSelectAll ? i18n.selectAll : i18n.deselectAll)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-container" }, featureLayerInfos === null || featureLayerInfos === void 0 ? void 0 : featureLayerInfos.map((layer, index) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-layer-summary-item", { key: index, layerInfo: layer, translatedLayerType: featureLayerI18n.type, translatedFieldType: addCreateI18n.fieldType, selected: selectedLayerInfoNames[layer.name], hideSelect: !multipleLayers, onLayerSelectionChange: (event) => {
        selectOrDeselectLayer(layer.name, event.detail);
      }, onExpand: (event) => {
        const { expanded } = event.detail;
        if (expanded) {
          (0,_feature_layer_d0f64b81_js__WEBPACK_IMPORTED_MODULE_3__.i)("layer");
        }
      } })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { heading: alertInfo === null || alertInfo === void 0 ? void 0 : alertInfo.title, description: alertInfo === null || alertInfo === void 0 ? void 0 : alertInfo.description, active: !!alertInfo, onAlertDismiss: () => (this.alertInfo = null) })));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemPagesFeatureLayerSummary.style = arcgisNewItemPagesFeatureLayerSummaryCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const configStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  portal: null,
  user: null,
  api: 4,
  scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-d0f64b81.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-d0f64b81.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ featureServiceEndTelemetry),
/* harmony export */   b: () => (/* binding */ filterChangeTelemetry),
/* harmony export */   c: () => (/* binding */ featureLayerTypeTelemetry),
/* harmony export */   e: () => (/* binding */ enableLayerPreferenceTelemetry),
/* harmony export */   f: () => (/* binding */ featureLayerErrorTelemetry),
/* harmony export */   i: () => (/* binding */ itemExpandedTelemetry)
/* harmony export */ });
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const TELEMETRY_ID = "create feature layer";
const TELEMETRY_PAGE_NAME = "my content";
const addFeatureLayerTypeToTelemetry = (type) => {
  switch (type) {
    case "build":
      return "blank";
    case "existing":
      return "fs";
    case "template":
      return "template";
    case "link":
      return "url";
  }
};
const enableLayerPreferenceTelemetry = (type) => {
  const telemetry = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
  telemetry === null || telemetry === void 0 ? void 0 : telemetry.stepWorkflow(TELEMETRY_ID, `enable ${type === "captureGPS" ? "gps" : type === "enableZDefaults" ? "z" : "m"}`, {
    category: TELEMETRY_ID,
    attribute: addFeatureLayerTypeToTelemetry(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addFeatureLayerType),
    pageName: TELEMETRY_PAGE_NAME
  });
};
const itemExpandedTelemetry = (type) => {
  const telemetry = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
  telemetry === null || telemetry === void 0 ? void 0 : telemetry.stepWorkflow(TELEMETRY_ID, `expand ${type} details`, {
    category: TELEMETRY_ID,
    attribute: addFeatureLayerTypeToTelemetry(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addFeatureLayerType),
    pageName: TELEMETRY_PAGE_NAME
  });
};
const filterChangeTelemetry = () => {
  const telemetry = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
  telemetry === null || telemetry === void 0 ? void 0 : telemetry.stepWorkflow(TELEMETRY_ID, "filter", {
    category: TELEMETRY_ID,
    attribute: addFeatureLayerTypeToTelemetry(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addFeatureLayerType),
    pageName: TELEMETRY_PAGE_NAME
  });
};
const featureLayerTypeTelemetry = (type) => {
  const telemetryType = addFeatureLayerTypeToTelemetry(type);
  const telemetry = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
  telemetry === null || telemetry === void 0 ? void 0 : telemetry.stepWorkflow(TELEMETRY_ID, "from option", {
    category: TELEMETRY_ID,
    attribute: telemetryType,
    pageName: TELEMETRY_PAGE_NAME
  });
};
const featureServiceEndTelemetry = () => {
  const { addFeatureLayerType, serviceInfo } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
  const featureLayerServiceInfo = serviceInfo;
  const telemetry = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
  telemetry === null || telemetry === void 0 ? void 0 : telemetry.endWorkflow(TELEMETRY_ID, {
    category: TELEMETRY_ID,
    attribute: addFeatureLayerTypeToTelemetry(addFeatureLayerType),
    pageName: TELEMETRY_PAGE_NAME,
    count: featureLayerServiceInfo.layers.length,
    number: featureLayerServiceInfo.tables.length
  });
};
const featureLayerErrorTelemetry = (errString) => {
  var _a;
  (_a = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry) === null || _a === void 0 ? void 0 : _a.logError({
    category: TELEMETRY_ID,
    error: errString
  });
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const uiStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  nextText: "next",
  workflow: "content",
  scale: "m",
  disableScroll: false,
  featureFlags: { tileLayer3dTiles: false }
});
const uiStoreState = uiStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,