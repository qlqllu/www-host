"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_data-s-2d22c0"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/data-store-f509564d.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/data-store-f509564d.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addDataStore),
/* harmony export */   b: () => (/* binding */ requestCloudStoreList),
/* harmony export */   c: () => (/* binding */ validateDatastoreForServers),
/* harmony export */   d: () => (/* binding */ checkServersType),
/* harmony export */   e: () => (/* binding */ validateDatastoreServer),
/* harmony export */   f: () => (/* binding */ fetchCloudStorageRegionInfo),
/* harmony export */   g: () => (/* binding */ getDatastoreContents),
/* harmony export */   h: () => (/* binding */ handleDatabaseFileDrop),
/* harmony export */   p: () => (/* binding */ publishFromDataStore),
/* harmony export */   r: () => (/* binding */ requestCloudStoreInfo),
/* harmony export */   v: () => (/* binding */ validateDatastoreForOnline)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _item_d9d70416_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./item-d9d70416.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-d9d70416.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data-store-e8b5ce2f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/data-store-e8b5ce2f.js");
/* harmony import */ var _feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./feature-layer-38cdae87.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-38cdae87.js");
/* harmony import */ var _server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./server-item-f12153e6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-f12153e6.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */








const pollForDataStoreJob = async (jobId, jobKey) => {
  var _a, _b;
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal;
  const restBaseUrl = `${(_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl}portals/${portal.id}`;
  const jobDetailsApiUrl = `${restBaseUrl}/jobs/${encodeURIComponent(jobId)}/?key=${encodeURIComponent(jobKey)}`;
  try {
    return {
      result: await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.p)(jobDetailsApiUrl, {
        pendingStatuses: ["processing", "submitted"],
        successStatuses: ["succeeded"]
      }, "post")
    };
  }
  catch (error) {
    console.error(error);
    const errMessage = (_b = error.messages) === null || _b === void 0 ? void 0 : _b[0];
    if (errMessage === null || errMessage === void 0 ? void 0 : errMessage.includes("ERROR 000623")) {
      return { error: { code: "invalidDataStorePublishType" } };
    }
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const publishFromDataStore = async (dataStoreInfo, portal, 
/**
 * There is a tricky case where ImageServer needs to be use for cacheDataset instead of MapServer
 *
 * Currently, making another call to backend to check would be really long so we use retry as a faster workaround
 */
useRetryWorkaround) => {
  var _a;
  try {
    const { folder, type, cacheStoreId, serviceName, pathInCachedStore, description, serverId, tags } = dataStoreInfo;
    let configType;
    switch (type) {
      case "i3sRestCache":
      case "extractedScenePackage":
        configType = "SceneServer";
        break;
      case "vectorCacheDataset":
        configType = "VectorTileServer";
        break;
      case "cacheDataset":
        configType = useRetryWorkaround ? "ImageServer" : "MapServer";
        break;
    }
    // https://developers.arcgis.com/rest/users-groups-and-items/publish-datasets-to-datastore.htm
    const serviceConfiguration = JSON.stringify({
      type: configType,
      serviceName,
      properties: { pathInCachedStore, cacheStoreId }
    });
    const requestData = {
      serviceConfiguration,
      serverId,
      tags,
      f: "json"
    };
    const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/datastores/publish`;
    const { jobId, key } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, requestData, {}, "post");
    const { error, result } = await pollForDataStoreJob(jobId, key);
    if ((error === null || error === void 0 ? void 0 : error.code) === "invalidDataStorePublishType") {
      // Workaround as explain above
      return dataStoreInfo.type === "cacheDataset"
        ? publishFromDataStore(dataStoreInfo, portal, true)
        : { error: { code: "invalidDataStorePublishType", message: JSON.stringify(error.message) } };
    }
    else if (error) {
      return { error: { code: "failToPublishFromDataStore", message: JSON.stringify(error.message) } };
    }
    const resultService = (_a = result === null || result === void 0 ? void 0 : result.result) === null || _a === void 0 ? void 0 : _a.services[0];
    if (!(0,_feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_5__.q)(folder)) {
      await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_6__.m)(resultService.serviceItemId, folder.id);
    }
    // publish API doesn't support changing the summary / snippet, so we make a separate call for it
    // https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm
    const itemUpdateData = {
      snippet: description,
      f: "json"
    };
    await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_6__.e)(resultService.serviceItemId, itemUpdateData);
    return { result: resultService };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "failToPublishFromDataStore", message: JSON.stringify(error) } };
  }
};
const getDatastoreContents = async (datastoreId, path, type, serverId) => {
  var _a;
  // https://developers.arcgis.com/rest/users-groups-and-items/describe-datastore.htm
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal;
  const restBaseUrl = `${(_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl}portals/${portal.id}`;
  const datastoreDescriptionApiUrl = `${restBaseUrl}/datastores/describe`;
  const datastoreDescriptionApiPayload = { datastoreId, serverId, path, type, f: "json" };
  try {
    const { jobId, key } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(datastoreDescriptionApiUrl, datastoreDescriptionApiPayload, {}, "post");
    const { result } = await pollForDataStoreJob(jobId, key);
    return { result: result.result };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "failToListDataStoreContents", message: JSON.stringify(error) } };
  }
};
const validateDatastoreServer = async (server, datastoreId) => {
  var _a;
  // https://developers.arcgis.com/rest/users-groups-and-items/validate-datastore.htm
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal;
  const restBaseUrl = `${(_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl}portals/${portal.id}`;
  const validateServerUrl = `${restBaseUrl}/datastores/validate`;
  const validateServerPayload = { datastoreId: datastoreId, serverId: server.id, f: "json" };
  try {
    const { status } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(validateServerUrl, validateServerPayload, {}, "post");
    return { result: status };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const handleDatabaseFileDrop = async (url, data, hostingServerAdminUrl) => {
  let itemName;
  try {
    const { result } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.e)(url, data, {}, "post").then((response) => {
      if (response.status === "success") {
        itemName = response.item.itemName;
        return submitDatabaseFileJob(response.item, hostingServerAdminUrl);
      }
    });
    const connString = Object.assign(Object.assign({}, result), { itemName: itemName });
    return { result: connString };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const submitDatabaseFileJob = async (item, hostingServerAdminUrl) => {
  const publishingToolsUrl = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.k)(hostingServerAdminUrl);
  const url = `${publishingToolsUrl}/Get%20Database%20Connection%20String/submitJob`;
  const data = { in_inputData: item.itemID, in_connDataType: "UPLOADED_CONNECTION_FILE_ID" };
  try {
    const { jobId, jobStatus } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, data, {}, "post");
    if ((jobStatus || "") === "esriJobSubmitted") {
      const url = `${publishingToolsUrl}/Get%20Database%20Connection%20String/jobs/${jobId}`;
      const result = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.p)(url, {
        requestParams: { jobId: jobId, jobStatus: jobStatus },
        pendingStatuses: ["esriJobNew", "esriJobSubmitted", "esriJobWaiting", "esriJobExecuting"],
        successStatuses: ["esriJobSucceeded"]
      });
      const connectionString = await (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.g)(result, publishingToolsUrl);
      return { result: connectionString };
    }
    return { result: null };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const fetchCloudStorageRegionInfo = async (provider) => {
  const regionInfoURL = "https://esriresources.s3.amazonaws.com/1120/regionsforcloudstorage.dat";
  try {
    const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(regionInfoURL);
    let result;
    if (provider === "amazon") {
      result = response.Amazon.regions;
    }
    else if (provider === "azure" || provider === "azuredatalakegen2store") {
      result = response.environments;
    }
    else if (provider === "alibaba") {
      result = response.Alibaba.regions;
    }
    else if (provider === "google") {
      result = response.Google.regions;
    }
    return { result: result };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const validateDatastoreForOnline = async (orgId, portal, payload) => {
  const url = `${portal.user.portal.helperServices.datastoreManagement.url}/${orgId}/data/validateDataItem`;
  const item = JSON.stringify(payload);
  try {
    const validateResponse = await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, portal, {
      body: { item, f: "json" },
      usePost: true
    });
    return { result: validateResponse };
  }
  catch (error) {
    const errorMessage = String(error).toLowerCase() || "";
    switch (true) {
      case errorMessage.includes("incorrect username or password was specified."):
        return { error: { code: "invalidUsernameOrPassword" } };
      default:
        return { error: { code: "unhandledError" } };
    }
  }
};
const validateDatastoreForServers = async (item, serverList, datastoreType) => {
  let servers = serverList;
  await Promise.all(servers.map((server) => validateServerForAddDataStore(item, server, datastoreType))).then((responses) => {
    servers = servers.map((server) => {
      let updatedServer = server;
      responses.forEach((response) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        if (response.status === "success" ||
          ((_a = response.machines) === null || _a === void 0 ? void 0 : _a[0].machine.toLowerCase()) === server.name.toLowerCase().split(":")[0]) {
          updatedServer = Object.assign(Object.assign({}, server), { serverStatus: response.status || response.machines[0].status, errorMsg: (((_b = response.machines) === null || _b === void 0 ? void 0 : _b[0].status) === "error" &&
              ((_c = response === null || response === void 0 ? void 0 : response.error) === null || _c === void 0 ? void 0 : _c.message) &&
              JSON.parse(response.error.message).message) ||
              (((_e = (_d = response.machines) === null || _d === void 0 ? void 0 : _d[0].dataItems) === null || _e === void 0 ? void 0 : _e[0]) && ((_g = (_f = response.machines) === null || _f === void 0 ? void 0 : _f[0].dataItems) === null || _g === void 0 ? void 0 : _g[0].message)) });
        }
        else {
          updatedServer = Object.assign(Object.assign({}, server), { serverStatus: "error", errorMsg: (((_h = response === null || response === void 0 ? void 0 : response.error) === null || _h === void 0 ? void 0 : _h.message) && JSON.parse(response.error.message).message) ||
              (((_k = (_j = response.machines) === null || _j === void 0 ? void 0 : _j[0].dataItems) === null || _k === void 0 ? void 0 : _k[0]) && ((_m = (_l = response.machines) === null || _l === void 0 ? void 0 : _l[0].dataItems) === null || _m === void 0 ? void 0 : _m[0].message)) });
        }
      });
      return updatedServer;
    });
  });
  return servers;
};
const validateServerForAddDataStore = async (item, server, datastoreType) => {
  var _a;
  let datastorePayload;
  const bdfsType = item.bdfsType;
  let validateServerPayload = null;
  if (datastoreType === "bdfs") {
    if (bdfsType === "fileshare") {
      datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.c)(item);
    }
    else if (bdfsType === "hdfs") {
      datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.a)(item);
    }
    else if (bdfsType === "hive") {
      datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.b)(item);
    }
    else if (bdfsType === "cloud") {
      if (item.bdfsCloudType === "new") {
        datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.d)(item);
        datastorePayload.info.isManaged = false;
      }
      // validating against existing cloud data store
      else {
        validateServerPayload = {
          serverId: server.id,
          datastoreId: item.bdfsExistingDatastore.id,
          f: "json"
        };
      }
    }
  }
  else {
    if (datastoreType === "folder") {
      datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.e)(item);
    }
    else if (datastoreType === "database") {
      datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.f)(item);
    }
    else if (datastoreType === "cloud") {
      datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.d)(item);
    }
    else if (datastoreType === "nosql") {
      datastorePayload = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.h)(item);
    }
    datastorePayload.info.isManaged = false;
  }
  // https://developers.arcgis.com/rest/users-groups-and-items/validate-datastore.htm
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal;
  const restBaseUrl = `${(_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl}portals/${portal.id}`;
  const validateServerUrl = `${restBaseUrl}/datastores/validate`;
  if (!validateServerPayload) {
    validateServerPayload = {
      datastore: JSON.stringify(datastorePayload),
      serverId: server.id,
      f: "json"
    };
  }
  try {
    const { status, machines } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(validateServerUrl, validateServerPayload, {}, "post");
    return { status: status, machines: machines };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const checkServersType = async (serverList) => {
  let serverTypes = [];
  let servers = serverList;
  if ((0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.i)()) {
    const serversToValidate = [];
    servers.forEach((federatedServer) => {
      if (federatedServer.isHosted) {
        const serverItem = { name: federatedServer.adminUrl, type: "Linux" };
        serverTypes.push(serverItem);
      }
      else if (federatedServer.serverRole === "FEDERATED_SERVER") {
        serversToValidate.push(federatedServer);
      }
    });
    const responses = await Promise.allSettled(serversToValidate.map((server) => {
      const url = `${server.adminUrl}/admin/machines?f=json`;
      return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, {}, "post");
    }));
    await Promise.allSettled(responses.map((response) => {
      var _a;
      return validateServerTypeKubernetes((_a = response === null || response === void 0 ? void 0 : response.value) === null || _a === void 0 ? void 0 : _a.machines, servers).then((validatedServerTypes) => {
        serverTypes = [...serverTypes, ...validatedServerTypes];
      });
    }));
  }
  else {
    // 1. Retrieve the Federated machines
    const responses = await Promise.allSettled(servers.map((server) => {
      const url = `${server.adminUrl}/admin/machines?f=json`;
      return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, {}, "post");
    }));
    await Promise.allSettled(responses.map((response) => {
      var _a;
      return validateServerType((_a = response === null || response === void 0 ? void 0 : response.value) === null || _a === void 0 ? void 0 : _a.machines, servers).then((result) => {
        servers = [...result.serverList];
        serverTypes = result.serverTypes;
      });
    }));
  }
  return { servers: servers, serverTypes: serverTypes };
};
const validateServerType = async (machines, serverList) => {
  let serverTypes = [];
  // 2. Validate server type
  serverList.map((server, index) => {
    if (machines === null || machines === void 0 ? void 0 : machines[index]) {
      server.shouldFilter = false;
    }
    else {
      server.shouldFilter = true;
    }
  });
  serverList.filter((server) => {
    return !server.shouldFilter;
  });
  for (let index = 0; index < serverList.length; index++) {
    const machine = machines[0].machineName;
    const url = `${machines[0].adminURL}/machines/${machine}?f=json`;
    await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, {}, "post").then((result) => {
      if (result) {
        const serverItem = {
          name: serverList[index].adminUrl,
          type: result.platform.indexOf("Windows") > -1 ? "Windows" : "Linux"
        };
        serverTypes.push(serverItem);
      }
    });
  }
  return { serverTypes: serverTypes, serverList: serverList };
};
const requestCloudStoreList = async () => {
  const orgId = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.user.orgId;
  const type = "Data Store";
  const q = `orgid:${orgId} type:"${type}"`;
  const num = 10000;
  const content = { q, num };
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}search`;
  const supportedCloudStores = [
    "cloudStore_amazon",
    "cloudStore_azure",
    "cloudStore_azuredatalakegen2store",
    "cloudStore_azureDataLakeStore"
  ];
  try {
    const existingCloudStoreIds = [];
    const { results } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, content);
    results === null || results === void 0 ? void 0 : results.forEach(({ id, title, type, typeKeywords }) => {
      // Exclude Big Data File Share items
      if (!typeKeywords.includes("bigDataFileShare") &&
        typeKeywords.some((keyword) => supportedCloudStores.includes(keyword))) {
        existingCloudStoreIds.push({ id, title, type, typeKeywords });
      }
    });
    return { result: existingCloudStoreIds };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const requestCloudStoreInfo = async (selectedCloudStoreId) => {
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}content/items/${selectedCloudStoreId}/data`;
  try {
    const { id, path, provider } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url);
    return { id: id, path: path, provider: provider };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const validateServerTypeKubernetes = async (machines, serverList) => {
  let serverTypes = [];
  await Promise.all(serverList.map((federatedServer, index) => {
    if (!federatedServer.isHosted) {
      const machine = machines[0].machineName;
      const url = `${machines[0].adminURL}/machines/${machine}?f=json`;
      return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, {}, "post").then((result) => {
        if (!result.isHosted) {
          const serverItem = {
            name: serverList[index].adminUrl,
            type: result.platform.indexOf("Windows") > -1 ? "Windows" : "Linux"
          };
          serverTypes.push(serverItem);
        }
      });
    }
  }));
  return serverTypes;
};
const registerDataStoreWithServers = async (addItemInfo, item, title, tags, categories, snippet) => {
  var _a;
  const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
  const restBaseUrl = `${(_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl}portals/${portal.id}`;
  const servers = item.dataStoreSelectedServers;
  const addResults = await Promise.all(servers.map((serverId) => {
    const content = {
      serverId,
      datastoreId: addItemInfo.id
    };
    if ((0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.i)() && item.addDataStoreType === "folder" && item.allowServicesRestart) {
      content.options = JSON.stringify({ allowServicesRestart: true });
    }
    const addToServerUrl = `${restBaseUrl}/datastores/addToServer`;
    return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(addToServerUrl, content, {}, "post");
  }));
  let result = { success: false, id: null, folder: null };
  for (const addResult of addResults) {
    // TODO: error checking for the servers
    // const errors = [];
    // if (!addResult || !(addResult.result[1] || {}).success) {
    //   errors.push(addResult.result[1]);
    // }
    if (addResult.success) {
      if (item.addDataStoreType === "bdfs" && item.bdfsType === "cloud" && item.bdfsCloudType === "new") {
        result = await addBdfsDataStoreItem(item, title, tags, categories, snippet, addItemInfo.id);
        return result;
      }
      else {
        if (["folder", "database", "nosql", "cloud"].includes(item.addDataStoreType)) {
          result = { success: true, id: addItemInfo.id, folder: addItemInfo.id };
        }
        else {
          // For BDFS Data Store: get Catalog Service item id
          const getCatalog = async () => {
            const itemUrl = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}content/items/${addItemInfo.id}/relatedItems`;
            const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(itemUrl, {
              relationshipType: "BDFSDataStore2BDFSCatalogService",
              direction: "forward"
            });
            if (response.total) {
              result = { success: true, id: response.relatedItems[0].id, folder: addItemInfo.id };
              return result;
            }
            else {
              await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__.t)(10000);
              return getCatalog();
            }
          };
          result = getCatalog();
        }
      }
    }
  }
  return result;
};
//for adding BDFS cloud data store
const addBdfsDataStoreItem = async (item, title, tags, categories, snippet, cloudId, cloudPath) => {
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}content/items/${cloudId}/data`;
  const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url);
  const path = cloudPath || response.path;
  const datastoreTitle = path.split("/")[2].split("_")[0];
  const data = {
    type: "Data Store",
    title: title || datastoreTitle,
    tags: tags,
    categories: categories,
    snippet: snippet,
    text: ""
  };
  data.text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.j)(data.title, path);
  item.addDataStoreType = "bdfsDataStore";
  let addItemResponse = await (0,_feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_5__.t)(data, null);
  if (addItemResponse.success && _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal) {
    addItemResponse = await registerDataStoreWithServers(addItemResponse, item);
  }
  return addItemResponse;
};
const addDataStore = async (item, title, tags, categories, snippet) => {
  const datastoreType = item.addDataStoreType;
  const data = {
    type: "Data Store",
    title: title,
    tags: tags,
    categories: categories,
    snippet: snippet,
    text: "",
    typeKeywords: item.typeKeywords
  };
  let text;
  const bdfsType = item.bdfsType;
  if (datastoreType === "bdfs") {
    if (bdfsType === "fileshare") {
      text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.c)(item, title);
    }
    else if (bdfsType === "hdfs") {
      text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.a)(item, title);
    }
    else if (bdfsType === "hive") {
      text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.b)(item, title);
    }
    else if (bdfsType === "cloud") {
      if (item.bdfsCloudType === "new") {
        text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.d)(item, title);
        text.info.isManaged = false;
      }
      else {
        return await addBdfsDataStoreItem(item, title, tags, categories, snippet, item.bdfsExistingDatastore.id, item.bdfsExistingDatastore.path);
      }
    }
  }
  else {
    if (datastoreType === "folder") {
      text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.e)(item, title);
    }
    else if (datastoreType === "database") {
      text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.f)(item, title);
    }
    else if (datastoreType === "cloud") {
      text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.d)(item, title);
    }
    else if (datastoreType === "nosql") {
      text = (0,_data_store_e8b5ce2f_js__WEBPACK_IMPORTED_MODULE_4__.h)(item, title);
    }
    text.info.isManaged = false;
  }
  data.text = JSON.stringify(text);
  let response = await (0,_feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_5__.t)(data, null);
  if (response.success && _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal) {
    response = await registerDataStoreWithServers(response, item, title, tags, categories, snippet);
  }
  return response;
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,