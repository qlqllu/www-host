"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-ad0b4c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-popup_13.entry.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-popup_13.entry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_popup: () => (/* binding */ ArcgisPopup),
/* harmony export */   arcgis_popup_arcade: () => (/* binding */ ArcgisPopupArcade),
/* harmony export */   arcgis_popup_attachments: () => (/* binding */ ArcgisPopupAttachments),
/* harmony export */   arcgis_popup_attributes: () => (/* binding */ ArcgisPopupAttributes),
/* harmony export */   arcgis_popup_chart: () => (/* binding */ ArcgisPopupChart),
/* harmony export */   arcgis_popup_expressions: () => (/* binding */ ArcgisPopupExpressions),
/* harmony export */   arcgis_popup_field_pick_list: () => (/* binding */ ArcgisPopupFieldPickList),
/* harmony export */   arcgis_popup_image: () => (/* binding */ ArcgisPopupImage),
/* harmony export */   arcgis_popup_main_contentpopover: () => (/* binding */ ArcgisPopupMainContentpopover),
/* harmony export */   arcgis_popup_multimedia: () => (/* binding */ ArcgisPopupMultimedia),
/* harmony export */   arcgis_popup_relationship: () => (/* binding */ ArcgisPopupRelationship),
/* harmony export */   arcgis_popup_richtext: () => (/* binding */ ArcgisPopupRichtext),
/* harmony export */   arcgis_popup_title: () => (/* binding */ ArcgisPopupTitle)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./guid-4f4176ba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js");
/* harmony import */ var _previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./previewPopup-05f5d196.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/previewPopup-05f5d196.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./popupStore-a5d93b58.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */













const CSS$6 = {
  enablePopup: "enable-popup",
  componentDiv: "component-ul",
  summaryET: "summary-et",
  summaryETLabel: "summary-et-label",
  summaryETAction: "summary-et-action",
  imageryOptions: "imagery-options",
  notice: "notice"
};

// add field at cursor if position is available
const addSelectedFieldAtCursor = (inputElement, selectedFieldName) => {
  var _a, _b;
  const position = (_b = (_a = inputElement === null || inputElement === void 0 ? void 0 : inputElement.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("input")) === null || _b === void 0 ? void 0 : _b.selectionStart;
  if (isDefined(position)) {
    return [inputElement.value.slice(0, position), `{${selectedFieldName}}`, inputElement.value.slice(position)].join("");
  }
  else {
    return `${inputElement.value}{${selectedFieldName}}`;
  }
};
const isDefined = (value) => {
  return value !== undefined && value !== null;
};
const layerHasRelatedRecords = async (layer, view, serviceType) => {
  var _a, _b, _c, _d, _e;
  const supportsCount = (_b = (_a = layer.capabilities) === null || _a === void 0 ? void 0 : _a.queryRelated) === null || _b === void 0 ? void 0 : _b.supportsCount;
  const supportsPagination = (_d = (_c = layer.capabilities) === null || _c === void 0 ? void 0 : _c.queryRelated) === null || _d === void 0 ? void 0 : _d.supportsPagination;
  if ([_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.feature, _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.scene].indexOf(serviceType) > -1 &&
    ((_e = layer === null || layer === void 0 ? void 0 : layer.relationships) === null || _e === void 0 ? void 0 : _e.length) &&
    supportsCount &&
    supportsPagination) {
    for (const relationship of layer.relationships) {
      // check table and layers, including group layers in map view
      // return true if any related layer/table is found in the map
      for (const currLayerOrTable of [...view.map.allLayers, ...view.map.allTables]) {
        const curr = currLayerOrTable;
        if (await relationshipExists(layer, curr, relationship)) {
          await curr.load();
          return Promise.resolve(true);
        }
      }
    }
  }
  return Promise.resolve(false);
};
const getDefaultRelationshipAndLayer = async (layer, view, serviceType) => {
  var _a;
  if ([_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.feature, _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.scene].indexOf(serviceType) > -1 && ((_a = layer === null || layer === void 0 ? void 0 : layer.relationships) === null || _a === void 0 ? void 0 : _a.length)) {
    for (const relationship of layer.relationships) {
      // check table and layers, including group layers in map view
      for (const currLayerOrTable of [...view.map.allLayers, ...view.map.allTables]) {
        const curr = currLayerOrTable;
        // by default setup relationships based on the 1st layer/table found
        if (await relationshipExists(layer, curr, relationship)) {
          await curr.load();
          return { relationship: relationship, currLayer: curr };
        }
      }
    }
  }
};
function trimServerFromUrl(layer) {
  if (layer.type === "feature" && layer.url.toLocaleLowerCase().endsWith("/featureserver")) {
    return layer.url.substring(0, layer.url.length - 14);
  }
  else if (layer.type === "scene" && layer.url.toLocaleLowerCase().endsWith("/sceneserver")) {
    return layer.url.substring(0, layer.url.length - 12);
  }
  return layer.url;
}
async function relationshipExists(layer, relatedLayer, relationship) {
  var _a, _b, _c;
  const sameParent = relatedLayer.url
    ? relatedLayer.url === layer.url || trimServerFromUrl(relatedLayer) === trimServerFromUrl(layer)
    : "type" in relatedLayer.parent &&
      relatedLayer.parent.type === "group" &&
      ((_b = (_a = relatedLayer.parent) === null || _a === void 0 ? void 0 : _a.portalItem) === null || _b === void 0 ? void 0 : _b.id) === ((_c = layer.portalItem) === null || _c === void 0 ? void 0 : _c.id);
  if (["feature", "scene"].indexOf(relatedLayer.type) > -1 && sameParent && !isDefined(relatedLayer.layerId)) {
    // happens in SV
    await relatedLayer.load();
  }
  return Promise.resolve(["feature", "scene"].indexOf(relatedLayer.type) > -1 &&
    sameParent &&
    relatedLayer.layerId === relationship.relatedTableId);
}
function relationshipExistsCheckWithoutLoad(layer, relatedLayer, relationship) {
  var _a, _b, _c;
  const sameParent = relatedLayer.url
    ? relatedLayer.url === layer.url || trimServerFromUrl(relatedLayer) === trimServerFromUrl(layer)
    : "type" in relatedLayer.parent &&
      relatedLayer.parent.type === "group" &&
      ((_b = (_a = relatedLayer.parent) === null || _a === void 0 ? void 0 : _a.portalItem) === null || _b === void 0 ? void 0 : _b.id) === ((_c = layer.portalItem) === null || _c === void 0 ? void 0 : _c.id);
  return (["feature", "scene"].indexOf(relatedLayer.type) > -1 &&
    sameParent &&
    relatedLayer.layerId === relationship.relatedTableId);
}

var ContentSelection;
(function (ContentSelection) {
  ContentSelection["attributes"] = "attributes";
  ContentSelection["attachments"] = "attachments";
  ContentSelection["charts"] = "charts";
  ContentSelection["images"] = "images";
  ContentSelection["richText"] = "richText";
  ContentSelection["summaryET"] = "summaryET";
  ContentSelection["arcade"] = "arcade";
  ContentSelection["relationship"] = "relationship";
})(ContentSelection || (ContentSelection = {}));
var PopupMultiMediaType;
(function (PopupMultiMediaType) {
  PopupMultiMediaType["image"] = "image";
  PopupMultiMediaType["barChart"] = "bar-chart";
  PopupMultiMediaType["columnChart"] = "column-chart";
  PopupMultiMediaType["lineChart"] = "line-chart";
  PopupMultiMediaType["pieChart"] = "pie-chart";
})(PopupMultiMediaType || (PopupMultiMediaType = {}));
var AttachmentDisplayType;
(function (AttachmentDisplayType) {
  AttachmentDisplayType["preview"] = "preview";
  AttachmentDisplayType["list"] = "list";
  AttachmentDisplayType["auto"] = "auto";
})(AttachmentDisplayType || (AttachmentDisplayType = {}));

const getArcadeScript = (expression, layerDisplayType, strings) => {
  if (expression) {
    return expression;
  }
  if (layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
    return defaultClusterPopupScript(strings);
  }
  return defaultPopupScript(strings);
};
const getArcadeProfile = async (layer, mapView, serviceType, popupTemplate, layerDisplayType) => {
  if (layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
    return {
      id: "popup-feature-reduction",
      definitions: {
        $feature: { fields: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.k)(popupTemplate, false) },
        $aggregatedFeatures: await getAggregatedFeatureSet(mapView, layer, popupTemplate)
      }
    };
  }
  return Object.assign(Object.assign({ id: "popup" }, ((serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.csv ||
    serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.geojson ||
    serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImage ||
    serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.tile) && {
    disabledVariables: ["$layer", "$map", "$datastore"]
  })), { definitions: {
      $feature: layer,
      $layer: layer,
      $map: mapView.map,
      $datastore: layer
    } });
};
const getTestData = async (layer, mapView, layerDisplayType, popupTemplate) => {
  try {
    if (layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
      return {
        profileVariableInstances: {
          $feature: await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.l)(mapView, layer, popupTemplate),
          $aggregatedFeatures: await getAggregatedFeatureSet(mapView, layer, popupTemplate)
        },
        spatialReference: mapView.spatialReference,
        timeZone: mapView.timeZone
      };
    }
    return {
      profileVariableInstances: {
        $feature: (await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.m)(layer, mapView)).features[0],
        $layer: layer,
        $map: mapView.map,
        $datastore: layer.url
      },
      spatialReference: mapView.spatialReference,
      timeZone: mapView.timeZone
    };
  }
  catch (error) {
    console.log(error);
  }
};
const getTemplates = (strings) => {
  return [
    {
      label: strings.templates,
      suggestions: [
        {
          label: strings.chartTemplate,
          code: chartTemplate()
        },
        {
          label: strings.fieldsListTemplate,
          code: fieldTemplate()
        },
        {
          label: strings.richText,
          code: richTextTemplate()
        }
      ]
    }
  ];
};
const getAggregatedFeatureSet = async (mapView, layer, popupTemplate) => {
  const layerView = await mapView.whenLayerView(layer);
  const q = layerView.createQuery();
  q.aggregateIds = [(await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.l)(mapView, layer, popupTemplate)).getObjectId()];
  return layerView.queryFeatures(q);
};
const defaultPopupScript = (strings) => {
  return `// ${strings.arcadeScriptLine1} \n// ${strings.arcadeScriptLine2}\n// Average($feature.SalesQ1, $feature.SalesQ2, $feature.SalesQ3, $feature.SalesQ4)\n`;
};
const defaultClusterPopupScript = (strings) => {
  return `// ${strings.clusterArcadeScriptLine3} \nExpects($aggregatedFeatures, "field1", "field2")\n\n// ${strings.clusterArcadeScriptLine1} \n// ${strings.clusterArcadeScriptLine2}\n// Count(Filter($aggregatedFeatures, "field1 = 'value'"))\n`;
};
const defaultContentMessage = (layerDisplayType, strings) => {
  const clusterMessage = `// ${strings.arcadeContentClusterScriptLine} \nExpects($aggregatedFeatures, "field1", "field2")\n\n`;
  const defaultMessage = `/* \n${strings.arcadeContentScriptLine1} \n${strings.arcadeContentScriptLine2} \nhttps://developers.arcgis.com/arcade/guide/profiles/#popup-element \n*/\n\n${richTextTemplate()}`;
  return layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster ? clusterMessage + defaultMessage : defaultMessage;
};
const richTextTemplate = () => {
  return `return { \n\ttype : 'text', \n\ttext : 'place your text or html here' //this property supports html tags \n}`;
};
const fieldTemplate = () => {
  return `return {
    type: 'fields',
    //title: '',
    //description : '',
    fieldInfos:  [{
          fieldName: "att1"  // fieldName should match the key in the attributes dictionary
        },
        {
          fieldName: "att2"  // fieldName should match the key in the attributes dictionary
        },
        {
          fieldName: "att3"  // fieldName should match the key in the attributes dictionary
        }],
    attributes : {att1 : 2, att2 : 3, att3 : 4}  // replace this dictionary with your own key-value pairs
  }`;
};
const chartTemplate = () => {
  return `return {
    type: 'media',
    // title : 'The title for all media in the element',
    // description : '',
    attributes : {att1 : 2, att2 : 3, att3 : 4},  // replace this dictionary with your own key-value pairs,
    mediaInfos: [{
        type : 'piechart', //linechart | barchart | piechart | columnchart
        title : 'give your chart a title',
        // caption : '',
        altText : '', //altText will be read by screen readers
        value : {
          fields: ["att1", "att2", "att3"],  // choose what attributes to use in the chart
          /* colors: [  // values must be an array of [r, g, b, a] values (0-255)
            [122, 190, 229, 255],
            [179, 155, 213, 255],
            [248, 174, 131, 255]
          ], */
          //normalizeField : '',  // the name of the attribute to normalize by or value
        }
      }]
  }`;
};
const getClusterFieldInfos = (popupTemplate, FieldInfo) => {
  var _a;
  const clusterFieldInfos = [];
  // remove expressions
  popupTemplate.fieldInfos.forEach((fieldInfo) => {
    if (!fieldInfo.fieldName.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression)) {
      clusterFieldInfos.push(fieldInfo);
    }
  });
  // add potential new and existing expressions
  (_a = popupTemplate.expressionInfos) === null || _a === void 0 ? void 0 : _a.forEach(async (expressionInfo) => {
    const tempFieldInfo = new FieldInfo();
    tempFieldInfo.fieldName = `${_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression}${expressionInfo.name}`;
    tempFieldInfo.visible = false;
    clusterFieldInfos.push(tempFieldInfo);
  });
  return clusterFieldInfos;
};
const getExpressioName = (popupTemplate, arcadeFieldName) => {
  var _a;
  if (arcadeFieldName) {
    return arcadeFieldName;
  }
  else {
    if ((_a = popupTemplate.expressionInfos) === null || _a === void 0 ? void 0 : _a.length) {
      const tempExp = popupTemplate.expressionInfos[popupTemplate.expressionInfos.length - 1];
      const matches = tempExp.name.match(/\d+$/);
      if (matches === null || matches === void 0 ? void 0 : matches[0]) {
        return `expr${Number(matches[0]) + 1}`;
      }
      else {
        return `expr${popupTemplate.expressionInfos.length}`;
      }
    }
    else {
      return "expr0";
    }
  }
};
const setExpressionInfoInPopupTemplate = (objectArcadeEditor, currentArcadeFieldName, PopupExpressionInfo, popupTemplate) => {
  const tempCurrentArcadeFieldName = currentArcadeFieldName;
  const tempExp = new PopupExpressionInfo();
  tempExp.expression = objectArcadeEditor.script;
  tempExp.title = objectArcadeEditor.title;
  tempExp.name = getExpressioName(popupTemplate, tempCurrentArcadeFieldName);
  tempExp.returnType = objectArcadeEditor.predictOutputType === "number" ? "number" : "string";
  if (popupTemplate.expressionInfos) {
    if (tempCurrentArcadeFieldName) {
      popupTemplate.expressionInfos.find((exp, index) => {
        if (exp.name === tempCurrentArcadeFieldName) {
          popupTemplate.expressionInfos[index] = tempExp;
        }
      });
    }
    else {
      popupTemplate.expressionInfos.push(tempExp);
    }
  }
  else {
    popupTemplate.expressionInfos = [tempExp];
  }
  return tempExp;
};
const setLayerExpressionAndFieldInfo = async (popupTemplate, layerDisplayType, layer, FieldInfo) => {
  if (layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
    layer.featureReduction.popupTemplate.expressionInfos =
      [...popupTemplate.expressionInfos];
    popupTemplate.fieldInfos = getClusterFieldInfos(popupTemplate, FieldInfo);
  }
  else {
    layer.popupTemplate.expressionInfos = [...popupTemplate.expressionInfos];
    popupTemplate.fieldInfos = [...(await (0,_previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_6__.g)(layer, popupTemplate))];
  }
};

const arcgisPopupCss = ".enable-popup{background-color:var(--arcgis-app-background);display:flex;padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-cap-spacing-half) var(--arcgis-app-cap-spacing-quarter);border-bottom:solid 1px var(--arcgis-app-border)}.component-ul{margin:0 0 var(--arcgis-app-cap-spacing);padding:0}.summary-et{display:flex;align-items:center;padding:0% var(--arcgis-app-cap-spacing-three-quarters)}.summary-et-label{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden;padding:0% var(--arcgis-app-cap-spacing-half);font-size:medium}.summary-et-action{margin:0;flex:0 0 0%;justify-self:flex-end}.notice{margin:0.5rem}.imagery-options{padding:0 var(--arcgis-app-cap-spacing-three-quarters)}";

const ArcgisPopup = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.popupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "popupUpdated", 7);
    this.arcgisPopupDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupDismissedChange", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.resetMultiMediaIndex = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "resetMultiMediaIndex", 7);
    this.mainPopupReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "mainPopupReRender", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    this.closeAttributePopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAttributePopovers", 7);
    this.attributesChangeNotification = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "attributesChangeNotification", 7);
    this.arcadeChangeNotification = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcadeChangeNotification", 7);
    this.attributeData = [];
    this.fieldData = [];
    this.richTextElements = [];
    this.popupHasAttachment = false;
    this.layerHasAttributes = true;
    this.layerHasCharts = true;
    this.layerHasImages = true;
    this.layerHasText = true;
    this.isPopupOpenForCurrentLayer = false;
    this.relatedRecordsDefaultCount = 1;
    this.guidList = [];
    this.debouncedPopupUpdates = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_8__.d)((detail) => {
      var _a;
      if (this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms) {
        // if event.detail is true, only update external
        if (!detail || !((_a = this.layer) === null || _a === void 0 ? void 0 : _a.popupTemplate)) {
          if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
            this.layer.popupTemplate = this.popupTemplate.clone();
          }
          else if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
            this.layer.featureReduction.popupTemplate = this.popupTemplate.clone();
          }
        }
      }
      this.popupUpdated.emit(this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.mapNotes && {
        mapNotesPopuptemplate: this.mapNotesPopupEnabled ? this.popupTemplate.clone() : null
      });
    }, 1000);
    this.manageExpressionBtnClick = (event) => {
      event.stopPropagation();
      this.closePopupPopovers.emit();
      const expressionComponent = document.createElement("arcgis-popup-expressions");
      if (this.calciteFlowProps) {
        this.calciteFlowProps.flow.appendChild(expressionComponent);
      }
      else {
        this.hostElement.shadowRoot.getElementById("popupFlow_Id").appendChild(expressionComponent);
      }
      setTimeout(() => requestAnimationFrame(() => expressionComponent.setFocus()), 200);
    };
    // rendor methods
    this.popupTitleComponent = () => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-title", { popupFlowItem: this.popupPanel }));
    this.fieldComponent = (uniqueGuid, content, blockOpen) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueGuid, id: uniqueGuid }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-attributes", { guid: uniqueGuid, popupContent: content, popupFlowItem: this.popupPanel, blockOpen: blockOpen })));
    this.attachmentComponent = (uniqueGuid, content, blockOpen) => {
      var _a, _b, _c;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueGuid, id: uniqueGuid }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-attachments", { guid: uniqueGuid, attachmentContent: content, layerSupportsResizeAttachments: ((_c = (_b = (_a = this.layer) === null || _a === void 0 ? void 0 : _a.capabilities) === null || _b === void 0 ? void 0 : _b.operations) === null || _c === void 0 ? void 0 : _c.supportsResizeAttachments)
          ? true
          : false, popupFlowItem: this.popupPanel, blockOpen: blockOpen })));
    };
    this.richtextComponent = (uniqueGuid, content, blockOpen) => {
      // sketch/mapNotes layers have no fieldInfos
      var _a, _b;
      const popupData = this.popupTemplate.toJSON();
      const fieldData = (_a = popupData.fieldInfos) === null || _a === void 0 ? void 0 : _a.map(({ fieldName, label }) => {
        return {
          name: fieldName,
          alias: label || fieldName
        };
      });
      this.fieldData = fieldData || [];
      // the only way to see the current arcade expressions in the color picker plugin is if it is first
      // added in before the richtext editor component is mounted on initially
      const expressionInfos = (_b = this.popupTemplate) === null || _b === void 0 ? void 0 : _b.toJSON().expressionInfos;
      const newExpressionData = expressionInfos === null || expressionInfos === void 0 ? void 0 : expressionInfos.map(({ expression, name, returnType, title }) => {
        return {
          name: `expression/${name}`,
          alias: title === "New expression" ? " " : title,
          type: returnType,
          description: expression
        };
      });
      if (newExpressionData === null || newExpressionData === void 0 ? void 0 : newExpressionData.length) {
        this.fieldData = this.fieldData.filter((field) => !newExpressionData.some((expression) => expression.name === field.name));
      }
      this.attributeData = newExpressionData
        ? [...newExpressionData, ...this.fieldData]
        : this.fieldData;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueGuid, id: uniqueGuid, ref: (el) => {
          if (el) {
            this.richTextElements = [...this.richTextElements, el];
          }
        } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-richtext", { fieldExpressionData: {
          data: this.attributeData,
          placeholderText: this.strings.searchFields,
          heading: this.strings.selectField,
          label: this.strings.fieldsListPluginName,
          mapView: this.mapView,
          layer: this.layer
        }, arcgisColorPickerData: {
          data: this.attributeData,
          filterPlaceholder: this.strings.searchAttributes,
          label: this.strings.colorPicker,
          doneText: this.strings.done,
          customText: this.strings.customText,
          attributeText: this.strings.attributeText
        }, guid: uniqueGuid, richtextContent: content, popupFlowItem: this.popupPanel, blockOpen: blockOpen })));
    };
    this.multimediaComponent = (uniqueGuid, content, blockOpen) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueGuid, id: uniqueGuid }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-multimedia", { guid: uniqueGuid, multimediaContent: content, popupFlowItem: this.popupPanel, blockOpen: blockOpen })));
    this.arcadeComponent = (uniqueGuid, content, blockOpen) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueGuid, id: uniqueGuid }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-arcade", { guid: uniqueGuid, arcadeContent: content, blockOpen: blockOpen })));
    this.relationshipComponent = (uniqueGuid, content, blockOpen) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueGuid, id: uniqueGuid }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-relationship", { guid: uniqueGuid, relatedRecordsContent: content, popupFlowItem: this.popupPanel, blockOpen: blockOpen })));
    this.mapView = undefined;
    this.layer = undefined;
    this.portal = undefined;
    this.displayPopup = true;
    this.config = undefined;
    this.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature;
    this.dismissible = false;
    this.backButton = false;
    this.hideLayerTitle = false;
    this.showConfigureFields = false;
    this.showManageExpressions = true;
    this.calciteFlowProps = null;
    this.mapNotesPopupTemplate = undefined;
    this.mapNotesGraphic = undefined;
    this.reRender = undefined;
    this.popupComponents = [];
    this.hasError = false;
  }
  // lifecycle methods
  async componentWillLoad() {
    var _a, _b, _c;
    // popupState here has the settings from the last
    // session of this component instead of a clean new one
    // because createStore gets called just once in a app session
    // so instead call a clear method, as a workaround
    (0,_popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.c)(_popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p);
    [this.strings, this.currentLanguage, this.currentLanguageIntl] =
      await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.serviceType = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.c)(this.layer);
    await this.loadAllModules();
    // determine if to show manage expressions and also arcade content
    this.supportsArcade =
      this.showManageExpressions &&
        (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature ||
          this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) &&
        this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.ogcFeature &&
        this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wfs &&
        this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.imagery &&
        this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.imageryTile &&
        this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.subtype;
    if (this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.tile &&
      "url" in this.layer &&
      !("type" in this.layer) &&
      this.layer.url.indexOf(this.layer.layer.url) > -1) {
      // JS-API does the check if a related FL exists
      this.hasError = true;
      console.error("popups not supported, no related feature service");
    }
    else if (this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms) {
      if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
        const layerType = "type" in this.layer ? this.layer.type : "sublayer";
        const sourceLayer = this.mapView.popup.visible
          ? (_a = this.mapView.popup.selectedFeature) === null || _a === void 0 ? void 0 : _a.sourceLayer
          : undefined;
        this.isPopupOpenForCurrentLayer =
          layerType === "subtype-sublayer"
            ? (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.subtypeCode) === this.layer.subtypeCode &&
              (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.parent.id) === this.layer.parent.id // TODO any + parent
            : layerType === "sublayer"
              ? (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.id) === this.layer.id &&
                (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.layer.id) === this.layer.layer.id
              : "id" in this.layer && (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.id) === this.layer.id;
        // does layer have attachment
        if (isDefined((_c = (_b = this.layer.capabilities) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.supportsAttachment)) {
          this.layerHasAttachment = this.layer.capabilities.data.supportsAttachment;
        }
        this.layerHasET = this.layer.editFieldsInfo ? true : false;
        _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasRelatedRecords = await layerHasRelatedRecords(this.layer, this.mapView, this.serviceType);
        // temp, turn off popupEnabled for MIL
        if (this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImage &&
          !this.layer.popupTemplate) {
          this.layer.popupEnabled = false;
        }
        // generate default if template is empty
        this.popupTemplate = this.layer.popupTemplate
          ? this.layer.popupTemplate.clone()
          : this.layer.createPopupTemplate();
        // generate master field info
        this.popupTemplate.fieldInfos = [
          ...(await (0,_previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.layer, this.popupTemplate))
        ];
      }
      else if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
        this.layerHasAttachment = false;
        this.layerHasET = false;
        this.popupTemplate = this.layer.featureReduction.popupTemplate.clone();
      }
      else if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.mapNotes) {
        if (this.mapNotesPopupTemplate) {
          this.mapNotesPopupEnabled = true;
          this.popupTemplate = this.mapNotesPopupTemplate.clone();
        }
        else {
          this.mapNotesPopupEnabled = false;
          const [PopupTemplate] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
            "esri/PopupTemplate"
          ]);
          this.popupTemplate = new PopupTemplate();
        }
        this.layerHasAttachment = false;
        this.layerHasET = false;
        this.layerHasAttributes = false;
        this.layerHasCharts = false;
      }
    }
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layer = this.layer;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.mapView = this.mapView;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.portal = this.portal;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.config = this.config;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings = this.strings;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.currentLanguage = this.currentLanguage;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.currentLanguageIntl = this.currentLanguageIntl;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.serviceType = this.serviceType;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate = this.popupTemplate;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasAttachment = this.layerHasAttachment;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasET = this.layerHasET;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasAttributes = this.layerHasAttributes;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasCharts = this.layerHasCharts;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasImages = this.layerHasImages;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasText = this.layerHasText;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerDisplayType = this.layerDisplayType;
    _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.supportsArcade = this.supportsArcade;
  }
  async componentDidLoad() {
    var _a;
    // load content only once popupFlowItem exists
    // popupTemplate.content can be [], string, function and promise
    // if string, convert to text content
    if (this.popupTemplate) {
      if (typeof this.popupTemplate.content === "string") {
        const textContent = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)(["esri/popup/content/TextContent"]).then(([TextContent]) => {
          return new TextContent({
            text: this.popupTemplate.content
          });
        });
        this.popupTemplate.content = [textContent];
      }
      if (Array.isArray(this.popupTemplate.content)) {
        this.popupTemplate.content.forEach((content, index) => {
          // if layer has no attachment, remove it
          if (content.type === "attachments" && !this.layerHasAttachment) {
            this.popupTemplate.content.splice(index, 1);
          }
          else {
            this.addToPopupComponents(content);
          }
        });
      }
      else {
        console.error("content not supported");
      }
      this.reRender = !this.reRender;
    } // else WMS
    if (this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms) {
      // watch for changes to layers/tables to show/hide relationship
      if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
        this.watchForChangesToLayersList();
      }
      this.sortableComponents = this.hostElement.shadowRoot.getElementById("SortableComponents_Id");
      this.calciteFab =
        ((_a = this.calciteFlowProps) === null || _a === void 0 ? void 0 : _a.calciteFab) ||
          this.hostElement.shadowRoot.getElementById("addComponentBtn_Id");
      const tempPopupProp = this.getPopupEnabledProp();
      this.enableDisablePopup(tempPopupProp);
      //this.showPreviewPopup(tempPopupProp); - setupResizeObserver opens the popup already
      // MV workflow
      this.setupResizeObserver();
      // fab for content popover
      this.calciteFab.onclick = (event) => {
        event.stopPropagation();
        this.closePopupPopovers.emit();
        if (!this.contentPopover) {
          this.contentPopover = document.createElement("arcgis-popup-main-contentpopover");
          this.contentPopover.contentPopoverRefElement = this.calciteFab;
          this.contentPopover.popupHasAttachment = this.popupHasAttachment;
          this.contentPopover.popoverPanelWidth = this.hostElement.getBoundingClientRect().width;
          document.body.appendChild(this.contentPopover);
          this.calciteFab.disabled = true;
          this.disablePopupPanel.emit(true);
        }
      };
    }
    requestAnimationFrame(() => this.popupPanel.setFocus());
  }
  componentDidUpdate() {
    this.internalPopupUpdated.emit();
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.parentShellObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.watchLayersAndTables) === null || _b === void 0 ? void 0 : _b.remove();
    if (this.contentPopover) {
      document.body.removeChild(this.contentPopover);
    }
  }
  // Public Methods
  async done() {
    var _a;
    this.resetMultiMediaIndex.emit();
    this.closePopupPopovers.emit();
    (_a = this.attributesComponent) === null || _a === void 0 ? void 0 : _a.done();
    this.showPreviewPopup(false);
  }
  /**
   * @deprecated with 3.0.x
   * @param focusId
   **/
  async setFocus(focusId) {
    var _a;
    (_a = this.calciteFab) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  // Events
  calciteFlowItemBackHandler(event) {
    event.stopPropagation();
    this.closePopupPopovers.emit();
  }
  mainPopupReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = this.reRender ? false : true;
  }
  // update popup
  internalPopupUpdatedHandler(event) {
    var _a, _b;
    event.stopPropagation();
    // refresh popup in case it's in a drill-in state
    if (this.singleFeature && ((_b = (_a = this.mapView.popup) === null || _a === void 0 ? void 0 : _a._flowItems) === null || _b === void 0 ? void 0 : _b.length)) {
      this.mapView.popup.features = undefined;
      // waiting here makes sure it doesn't refresh twice
      // a timeout of at least 0 is needed to reset the features list
      setTimeout(() => (this.mapView.popup.features = [this.singleFeature]), 1000);
    }
    this.debouncedPopupUpdates(event.detail);
  }
  deleteComponentHandler(event) {
    event.stopPropagation();
    this.closePopupPopovers.emit();
    // each div has id. Find id, and splice by index
    const allComponents = this.sortableComponents.getElementsByTagName("div");
    for (let x = 0; x < allComponents.length; x++) {
      if (allComponents[x].id === event.detail) {
        this.popupTemplate.content.splice(x, 1);
        this.popupComponents.splice(x, 1);
        this.guidList.splice(x, 1);
        break;
      }
    }
    // only allow 1 attachment
    this.popupHasAttachment = this.popupTemplate.content.some((content) => {
      if (content.type === "attachments") {
        return true;
      }
    });
    if (this.richTextElements) {
      // Remove the reference to the rich text editor if the rich text editor is being destroyed
      const newElements = this.richTextElements.filter((ref) => ref.id !== event.detail);
      this.richTextElements = newElements;
    }
    this.mainPopupReRender.emit();
    this.calciteFab.setFocus();
  }
  duplicateComponentHandler(event) {
    event.stopPropagation();
    this.closePopupPopovers.emit();
    // each div has id. Find id, and clone
    const allComponents = this.sortableComponents.getElementsByTagName("div");
    for (let x = 0; x < allComponents.length; x++) {
      if (allComponents[x].id === event.detail) {
        const tempContent = this.popupTemplate.content[x].clone();
        this.popupTemplate.content.push(tempContent);
        this.addToPopupComponents(tempContent, true);
        break;
      }
    }
  }
  closePopupPopoversHandler() {
    if (this.contentPopover) {
      document.body.removeChild(this.contentPopover);
      this.contentPopover = null;
      this.calciteFab.disabled = false;
      requestAnimationFrame(() => this.calciteFab.setFocus());
      this.disablePopupPanel.emit(false);
    }
  }
  notifyAddContentSelectionHandler(event) {
    event.stopPropagation();
    this.closePopupPopovers.emit();
    // editor tracking
    if (event.detail === ContentSelection.summaryET) {
      this.popupTemplate.lastEditInfoEnabled = true;
      this.mainPopupReRender.emit();
      this.summaryETDiv.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
      this.calciteFab.setFocus();
    }
    else {
      this.addPopupContents(event.detail);
    }
  }
  disablePopupPanelHandler(event) {
    var _a;
    event.stopPropagation();
    const panel = ((_a = this.calciteFlowProps) === null || _a === void 0 ? void 0 : _a.calciteFlowItem) || this.popupPanel;
    panel.disabled = event.detail;
  }
  //updates to attributes
  async attributesUpdatedHandler(event) {
    event.stopPropagation();
    this.popupTemplate.fieldInfos = [
      ...(await (0,_previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.layer, this.layer.popupTemplate || this.popupTemplate))
    ];
    if (this.layer.popupTemplate.expressionInfos) {
      this.popupTemplate.expressionInfos = [
        ...this.layer.popupTemplate.expressionInfos
      ];
      this.arcadeChangeNotification.emit();
    }
    this.attributesChangeNotification.emit();
    this.mainPopupReRender.emit();
  }
  // for arcade changes
  arcadeChangeNotificationHandler() {
    var _a;
    // if an arcade expression is added/removed, update the selection of expressions in the rich
    // text editor's color picker plugin
    if (this.richTextElements) {
      const newExpressionData = (_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.toJSON().expressionInfos.map(({ expression, name, returnType, title }) => {
        return {
          name: `expression/${name}`,
          alias: title === "New expression" ? " " : title,
          type: returnType,
          description: expression
        };
      });
      this.attributeData = newExpressionData
        ? [...newExpressionData, ...this.fieldData]
        : this.fieldData;
      // updating the state here manually here since the rich text editor will not listen for changes in state
      // in initialization - we do not need to keep list of expressions in a state decorator either
      this.richTextElements.forEach((el) => {
        const richTextElement = el.firstChild;
        richTextElement.arcgisColorPickerData.data = this.attributeData;
        richTextElement.fieldExpressionData.data = this.attributeData;
      });
    }
    this.mainPopupReRender.emit();
  }
  // private methods and properties
  async loadAllModules() {
    [this.LayerOptions, this.reactiveUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/popup/LayerOptions",
      "esri/core/reactiveUtils"
    ]);
  }
  watchForChangesToLayersList() {
    var _a, _b;
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature &&
      this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.feature &&
      ((_b = (_a = this.layer) === null || _a === void 0 ? void 0 : _a.relationships) === null || _b === void 0 ? void 0 : _b.length)) {
      this.watchLayersAndTables = this.reactiveUtils.watch(() => [this.mapView.map.allLayers.length, this.mapView.map.allTables.length], async () => {
        _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasRelatedRecords = await layerHasRelatedRecords(this.layer, this.mapView, this.serviceType);
      });
    }
  }
  enableDisablePopup(popupBool) {
    // hide rest of the component.
    if (this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms) {
      const popupDiv = this.hostElement.shadowRoot.getElementById("popupDiv_Id");
      popupDiv.style.display = popupBool ? "block" : "none";
      this.calciteFab.style.display = popupBool ? "block" : "none";
    }
    this.closePopupPopovers.emit();
  }
  getPopupEnabledProp() {
    switch (this.layerDisplayType) {
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature: {
        if (this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms) {
          return this.layer.popupEnabled;
        }
        else {
          return this.layer.popupTemplate
            ? this.layer.popupEnabled
            : false;
        }
      }
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster: {
        return this.layer.featureReduction.popupEnabled;
      }
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.mapNotes: {
        return this.mapNotesPopupEnabled;
      }
      default: {
        return this.layer.popupEnabled;
      }
    }
  }
  reorder(arr, oldIdxs, newIdxs) {
    const oldArr = [...arr];
    arr.length = 0;
    oldArr.forEach((item, idx) => {
      let newIdx;
      newIdxs.forEach((guid, idx2) => {
        if (oldIdxs[idx] === guid) {
          newIdx = idx2;
        }
      });
      arr[newIdx] = item;
    });
  }
  addToPopupComponents(content, blockOpen = false) {
    const newGuid = (0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_5__.g)();
    if (content.type === "fields") {
      this.popupComponents = [
        ...this.popupComponents,
        this.fieldComponent(newGuid, content, blockOpen)
      ];
      this.guidList = [...this.guidList, newGuid];
    }
    else if (content.type === "attachments") {
      this.popupComponents = [
        ...this.popupComponents,
        this.attachmentComponent(newGuid, content, blockOpen)
      ];
      this.popupHasAttachment = true;
      this.guidList = [...this.guidList, newGuid];
    }
    else if (content.type === "media") {
      this.popupComponents = [
        ...this.popupComponents,
        this.multimediaComponent(newGuid, content, blockOpen)
      ];
      this.guidList = [...this.guidList, newGuid];
    }
    else if (content.type === "text") {
      this.popupComponents = [
        ...this.popupComponents,
        this.richtextComponent(newGuid, content, blockOpen)
      ];
      this.guidList = [...this.guidList, newGuid];
    }
    else if (content.type === "expression") {
      this.popupComponents = [
        ...this.popupComponents,
        this.arcadeComponent(newGuid, content, blockOpen)
      ];
      this.guidList = [...this.guidList, newGuid];
    }
    else if (content.type === "relationship") {
      this.popupComponents = [
        ...this.popupComponents,
        this.relationshipComponent(newGuid, content, blockOpen)
      ];
      this.guidList = [...this.guidList, newGuid];
    }
  }
  async addPopupContents(popupContentType) {
    const [FieldsContent, AttachmentsContent, TextContent, MediaContent, ImageMediaInfo, ColumnChartMediaInfo, ImageMediaInfoValue, ChartMediaInfoValue, ExpressionContent, RelationshipContent] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/popup/content/FieldsContent",
      "esri/popup/content/AttachmentsContent",
      "esri/popup/content/TextContent",
      "esri/popup/content/MediaContent",
      "esri/popup/content/ImageMediaInfo",
      "esri/popup/content/ColumnChartMediaInfo",
      "esri/popup/content/support/ImageMediaInfoValue",
      "esri/popup/content/support/ChartMediaInfoValue",
      "esri/popup/content/ExpressionContent",
      "esri/popup/content/RelationshipContent"
    ]);
    let content = null;
    if (popupContentType === ContentSelection.attributes) {
      content = new FieldsContent({
        fieldInfos: null
      });
    }
    else if (popupContentType === ContentSelection.attachments) {
      content = new AttachmentsContent({
        displayType: null
      });
    }
    else if (popupContentType === ContentSelection.richText) {
      content = new TextContent({
        text: null
      });
    }
    else if (popupContentType === ContentSelection.images) {
      const imageElement = new ImageMediaInfo({
        title: "",
        caption: "",
        altText: "",
        value: new ImageMediaInfoValue({
          sourceURL: "",
          linkURL: ""
        })
      });
      content = new MediaContent({
        mediaInfos: [imageElement]
      });
    }
    else if (popupContentType === ContentSelection.charts) {
      const chartElement = new ColumnChartMediaInfo({
        title: "",
        caption: "",
        altText: "",
        value: new ChartMediaInfoValue({
          fields: []
        })
      });
      content = new MediaContent({
        mediaInfos: [chartElement]
      });
    }
    else if (popupContentType === ContentSelection.arcade) {
      content = new ExpressionContent({
        expressionInfo: {
          expression: defaultContentMessage(this.layerDisplayType, this.strings)
        }
      });
    }
    else if (popupContentType === ContentSelection.relationship) {
      const relationshipAndLayer = await getDefaultRelationshipAndLayer(this.layer, this.mapView, this.serviceType);
      let defaultField = relationshipAndLayer.currLayer.fields.find((field) => field.visible && field.type === "date");
      if (!defaultField) {
        defaultField = relationshipAndLayer.currLayer.fields.find((field) => field.visible);
      }
      content = new RelationshipContent({
        displayCount: this.relatedRecordsDefaultCount,
        relationshipId: relationshipAndLayer.relationship.id,
        orderByFields: [{ field: defaultField.name, order: "asc" }]
      });
    }
    this.popupTemplate.content.push(content);
    this.addToPopupComponents(content, true);
  }
  async showPreviewPopup(show) {
    var _a, _b, _c;
    if (this.displayPopup &&
      this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature &&
      !this.isPopupOpenForCurrentLayer) {
      if (show &&
        this.layer.popupEnabled &&
        this.layer.popupTemplate) {
        if ((_b = (_a = this.mapView.popup) === null || _a === void 0 ? void 0 : _a.features) === null || _b === void 0 ? void 0 : _b.length) {
          // if we have a popup, maybe from another layer
          // make sure we don't stay in a drill-in state
          // popup might not be visible at this moment
          this.mapView.closePopup();
          this.mapView.popup.features = undefined;
        }
        this.previewPopupController = new AbortController();
        this.singleFeature = await (0,_previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_6__.p)(this.mapView, this.layer, this.previewPopupController);
      }
      else {
        (_c = this.previewPopupController) === null || _c === void 0 ? void 0 : _c.abort();
        this.mapView.closePopup();
      }
    }
    else if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.mapNotes) {
      if (show) {
        this.mapView.openPopup({
          features: [this.mapNotesGraphic],
          location: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.o)(this.mapNotesGraphic.geometry)
        });
      }
      else {
        this.mapView.closePopup();
      }
    }
  }
  // if parent is shell panel. MV workflow.
  setupResizeObserver() {
    var _a;
    const parentNode = (_a = this.hostElement) === null || _a === void 0 ? void 0 : _a.parentElement;
    if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.tagName) === "CALCITE-SHELL-PANEL") {
      const shellPanelNode = parentNode;
      if (isDefined(shellPanelNode.collapsed)) {
        this.parentShellObserver = new ResizeObserver(() => {
          if (shellPanelNode.collapsed) {
            this.done();
          }
          else {
            this.showPreviewPopup(true);
          }
        });
        this.parentShellObserver.observe(shellPanelNode);
      }
    }
    else {
      this.showPreviewPopup(true);
    }
  }
  createLayerOptions() {
    var _a, _b;
    const layerOptions = this.popupTemplate.layerOptions || new this.LayerOptions();
    // showNoDataRecords and returnTopmostRaster can be null when not set
    layerOptions.showNoDataRecords = (_a = layerOptions.showNoDataRecords) !== null && _a !== void 0 ? _a : false;
    layerOptions.returnTopmostRaster = (_b = layerOptions.returnTopmostRaster) !== null && _b !== void 0 ? _b : true;
    this.popupTemplate.layerOptions = layerOptions;
  }
  render() {
    var _a, _b, _c, _d, _e, _f;
    if (this.hasError) {
      return this.renderPopupError();
    }
    const enablePopup = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: CSS$6.enablePopup, alignment: "start", layout: "inline-space-between" }, this.strings.enablePopup, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: this.getPopupEnabledProp(), onCalciteSwitchChange: (event) => {
        const checked = event.target.checked;
        switch (this.layerDisplayType) {
          case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature: {
            this.layer.popupEnabled = checked;
            break;
          }
          case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster: {
            this.layer
              .featureReduction.popupEnabled = checked;
            break;
          }
          case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.mapNotes: {
            this.mapNotesPopupEnabled = checked;
            break;
          }
          default: {
            this.layer.popupEnabled = checked;
          }
        }
        this.enableDisablePopup(checked);
        this.internalPopupUpdated.emit(true);
        // layer.popupTemplate can be null, due to debouncedPopupUpdates, causing popup preview to not work
        if (this.layerDisplayType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.mapNotes &&
          checked &&
          !this.layer.popupTemplate) {
          this.layer.popupTemplate = this.popupTemplate;
        }
        this.showPreviewPopup(checked);
      } })));
    const manageExpressionBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "transparent", kind: "neutral", iconEnd: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement) === "rtl" ? "chevron-left" : "chevron-right", label: this.strings.manageExpressions, width: "full", onClick: this.manageExpressionBtnClick }, this.strings.manageExpressions));
    const ignoreNodata = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", layout: "inline-space-between" }, this.strings.ignoreNoData, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: !((_c = (_b = (_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.layerOptions) === null || _b === void 0 ? void 0 : _b.showNoDataRecords) !== null && _c !== void 0 ? _c : false), onCalciteSwitchChange: (event) => {
        var _a;
        const checked = event.target.checked;
        if (!((_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.layerOptions)) {
          this.createLayerOptions();
        }
        this.popupTemplate.layerOptions.showNoDataRecords = !checked;
        this.internalPopupUpdated.emit();
      } })));
    const displayTopmost = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", layout: "inline-space-between" }, this.strings.displayTopmost, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: (_f = (_e = (_d = this.popupTemplate) === null || _d === void 0 ? void 0 : _d.layerOptions) === null || _e === void 0 ? void 0 : _e.returnTopmostRaster) !== null && _f !== void 0 ? _f : true, onCalciteSwitchChange: (event) => {
        var _a;
        const checked = event.target.checked;
        if (!((_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.layerOptions)) {
          this.createLayerOptions();
        }
        this.popupTemplate.layerOptions.returnTopmostRaster = checked;
        this.internalPopupUpdated.emit();
      } })));
    const summaryET = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { class: CSS$6.summaryET }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "user" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: CSS$6.summaryETLabel }, this.strings.summaryETHeading), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.remove, appearance: "transparent", icon: "x", class: CSS$6.summaryETAction, onClick: (event) => {
        event.stopPropagation();
        this.closePopupPopovers.emit();
        this.popupTemplate.lastEditInfoEnabled = false;
        this.mainPopupReRender.emit();
        this.calciteFab.setFocus();
      } })));
    const calciteFab = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { id: "addComponentBtn_Id", icon: "plus", slot: "fab", scale: "s", appearance: "outline-fill", kind: "neutral", label: this.strings.addContent, text: this.strings.addContent, "text-enabled": true }));
    const manageFieldsBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "transparent", kind: "neutral", iconEnd: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement) === "rtl" ? "chevron-left" : "chevron-right", label: this.strings.configureFields, width: "full", onClick: (event) => {
        event.stopPropagation();
        this.closePopupPopovers.emit();
        const attributesFlowItem = document.createElement("calcite-flow-item");
        attributesFlowItem.heading = this.strings.attributes;
        attributesFlowItem.description = !this.hideLayerTitle ? this.layer.title : undefined;
        this.attributesComponent = document.createElement("arcgis-attributes");
        this.attributesComponent.lang = this.currentLanguage;
        this.attributesComponent.layer = this.layer;
        this.attributesComponent.mapView = this.mapView;
        this.attributesComponent.portal = this.portal;
        this.attributesComponent.layerDisplayType = this.layerDisplayType;
        this.attributesComponent.config = this.config;
        this.attributesComponent.calciteFlowProps = true;
        this.attributesComponent.displayPopup = false;
        attributesFlowItem.appendChild(this.attributesComponent);
        attributesFlowItem.beforeBack = async () => {
          this.closeAttributePopovers.emit();
        };
        if (this.calciteFlowProps) {
          this.calciteFlowProps.flow.appendChild(attributesFlowItem);
        }
        else {
          this.hostElement.shadowRoot
            .getElementById("popupFlow_Id")
            .appendChild(attributesFlowItem);
        }
        setTimeout(() => requestAnimationFrame(() => attributesFlowItem.setFocus()), 200);
      } }, this.strings.configureFields));
    const popupOptions = () => {
      // show popup options if any of the following is true
      const configureFields = this.showConfigureFields;
      const isImagery = this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.imagery;
      if (configureFields || this.supportsArcade || isImagery) {
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: this.strings.options, open: true, collapsible: true }, isImagery && imageryOptions(), this.supportsArcade && manageExpressionBtn, configureFields && manageFieldsBtn));
      }
    };
    const imageryOptions = () => {
      var _a, _b, _c;
      //enable display topmost if service version is greater than 10.8 and if its mosaic dataset
      //or single raster dataset which is multidimensional
      const layer = this.layer;
      const isMosaicDatasetService = !!((_b = (_a = layer.capabilities) === null || _a === void 0 ? void 0 : _a.operations) === null || _b === void 0 ? void 0 : _b.supportsQuery) && ((_c = layer.fields) === null || _c === void 0 ? void 0 : _c.length);
      const isMultidimensional = layer.hasMultidimensions;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.imageryOptions }, ignoreNodata, (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.p)(layer) >= 10.8 &&
        (isMosaicDatasetService || isMultidimensional) &&
        displayTopmost));
    };
    const popupMain = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, enablePopup, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "popupDiv_Id" }, popupOptions(), this.popupTitleComponent(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.componentDiv }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-sortable-list", { id: "SortableComponents_Id", style: { position: "relative" }, onCalciteListOrderChange: (event) => {
        event.stopPropagation();
        this.sortableComponents =
          this.hostElement.shadowRoot.getElementById("SortableComponents_Id");
        const newGuidList = [];
        const allComponents = this.sortableComponents.getElementsByTagName("div");
        for (let x = 0; x < allComponents.length; x++) {
          newGuidList.push(allComponents[x].id);
        }
        this.reorder(this.popupTemplate.content, this.guidList, newGuidList);
        this.reorder(this.popupComponents, this.guidList, newGuidList);
        this.guidList = newGuidList;
        this.internalPopupUpdated.emit();
      } }, this.popupComponents)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.summaryETDiv = el) }, this.layerHasET && this.popupTemplate.lastEditInfoEnabled && summaryET))));
    const backButton = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.back, scale: "s", slot: "header-actions-start", ref: (backButtonEl) => (this.backButtonEl = backButtonEl), onClick: (event) => {
        event.stopPropagation();
        this.done();
        this.arcgisPopupDismissedChange.emit();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement) === "rtl" ? "chevron-right" : "chevron-left" })));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { style: this.calciteFlowProps ? {} : { display: "flex", flex: "1 1 auto", overflow: "hidden" } }, this.calciteFlowProps ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), ref: () => (this.popupPanel = this.calciteFlowProps.calciteFlowItem) }, this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms ? enablePopup : popupMain)) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { id: "popupFlow_Id", dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.popupPanel = el), heading: this.strings.popupHeading, description: !this.hideLayerTitle ? this.layer.title : undefined, closable: this.dismissible, onCalciteFlowItemClose: (event) => {
        event.stopPropagation();
        this.done();
        this.arcgisPopupDismissedChange.emit();
      } }, this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms ? enablePopup : popupMain, this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.wms && calciteFab, this.backButton && backButton)))));
  }
  renderPopupError() {
    const popupMain = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.notice }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { open: true, closable: false, icon: "exclamation-mark-triangle", scale: "s" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, " ", this.strings.popupTileError))));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { style: this.calciteFlowProps ? {} : { display: "flex", flex: "1 1 auto", overflow: "hidden" } }, this.calciteFlowProps ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), ref: () => (this.popupPanel = this.calciteFlowProps.calciteFlowItem) }, popupMain)) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { id: "popupFlow_Id", dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.popupPanel = el), heading: this.strings.popupHeading, description: !this.hideLayerTitle ? this.layer.title : undefined, closable: this.dismissible, onCalciteFlowItemClose: (event) => {
        event.stopPropagation();
        this.done();
        this.arcgisPopupDismissedChange.emit();
      } }, popupMain)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopup.style = arcgisPopupCss;

const ArcgisPopupArcade = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    this.guid = undefined;
    this.arcadeContent = undefined;
    this.blockOpen = false;
    this.reRender = undefined;
  }
  // lifecycle methods
  async componentWillLoad() {
    this.layer = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layer;
    this.mapView = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.mapView;
    this.portal = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.portal;
    this.config = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.config;
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.currentLanguage = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.currentLanguage;
    this.serviceType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.serviceType;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    this.layerDisplayType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerDisplayType;
  }
  async componentDidLoad() {
    if (this.blockOpen) {
      this.blockOptions.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
      await this.launchArcade();
    }
  }
  // private methods and properties
  async launchArcade() {
    var _a, _b, _c;
    if (!this.arcadeEditor) {
      this.disablePopupPanel.emit(true);
      this.arcadeEditor = document.createElement("arcgis-modal-arcade");
      this.arcadeEditor.arcadeScript = getArcadeScript((_a = this.arcadeContent.expressionInfo) === null || _a === void 0 ? void 0 : _a.expression, this.layerDisplayType, this.strings);
      this.arcadeEditor.arcadeProfile = await getArcadeProfile(this.layer, this.mapView, this.serviceType, this.popupTemplate, this.layerDisplayType);
      this.arcadeEditor.testData = await getTestData(this.layer, this.mapView, this.layerDisplayType, this.popupTemplate);
      this.arcadeEditor.suggestions = getTemplates(this.strings);
      this.arcadeEditor.addExistingExpressions = true;
      this.arcadeEditor.layer = this.layer;
      this.arcadeEditor.arcadeTitle =
        ((_b = this.arcadeContent.expressionInfo) === null || _b === void 0 ? void 0 : _b.title) || this.strings.arcadeDefaultTitle;
      this.arcadeEditor.arcadeTitleEditable = true;
      this.arcadeEditor.returnPredictOutputType = false;
      this.arcadeEditor.arcadeTitleEditingEnabled = !((_c = this.arcadeContent.expressionInfo) === null || _c === void 0 ? void 0 : _c.title);
      document.body.appendChild(this.arcadeEditor);
      this.arcadeEditor.addEventListener("arcgisModalArcadeClose", (event) => this.arcadeSetup(event.detail));
    }
  }
  async arcadeSetup(arcadeObject) {
    if (arcadeObject) {
      this.arcadeContent.expressionInfo.expression = arcadeObject.script;
      this.arcadeContent.expressionInfo.title = arcadeObject.title;
      this.reRender = !this.reRender;
      this.internalPopupUpdated.emit();
    }
    this.disablePopupPanel.emit(false);
    document.body.removeChild(this.arcadeEditor);
    this.arcadeEditor = null;
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), heading: this.strings.arcade, description: this.arcadeContent.expressionInfo.title, collapsible: true, open: this.blockOpen, dragHandle: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable", slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-calcite-block-options", { ref: (el) => (this.blockOptions = el), guid: this.guid, intlOptions: this.strings.options, intlDelete: this.strings.delete, intlDuplicate: this.strings.duplicate, calciteBlockOptions: { hasDelete: true, hasDuplicate: true } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "code" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", width: "full", onClick: async () => await this.launchArcade() }, this.strings.editExpression)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const CSS$5 = {
  listWarningDiv: "list-warning-div",
  listWarningIcon: "list-warning-icon",
  listWarningLabel: "list-warning-label",
  listWarningText: "list-warning-text",
  formInputButton: "form-input-button"
};

const arcgisPopupAttachmentsCss = ".list-warning-div{background-color:var(--arcgis-app-background)}.list-warning-label{align-items:stretch;background-color:var(--arcgis-app-background);border-radius:var(--arcgis-app-border-radius);border:1px solid var(--arcgis-app-border);display:flex;font-size:var(--arcgis-app-font-size--2)}.list-warning-icon{align-items:center;background-color:var(--arcgis-app-background-content);display:flex;padding:0 var(--arcgis-app-side-spacing-half)}.list-warning-text{padding:var(--arcgis-app-cap-spacing-quarter) var(--arcgis-app-side-spacing-half)}.form-input-button{display:flex}.form-input-button calcite-input[type=text]{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.form-input-button calcite-action{margin:0;flex:0 0 0%;justify-self:flex-end}";

const ArcgisPopupAttachments = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    this.formInput = (formType, formString, formInputElement, formValue, formPlaceholder
    // promptMessage: string
    ) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, formString, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.formInputButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", autofocus: true, ref: formInputElement, value: formValue, placeholder: formPlaceholder, onCalciteInputInput: (event) => {
          event.stopPropagation();
          const inputVal = event.target.value;
          if (formType === "title") {
            this.attachmentContent.title = inputVal;
          }
          else {
            this.attachmentContent.description = inputVal;
          }
          this.reRender = !this.reRender;
        }, onClick: () => this.closePopupPopovers.emit() }), ((_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.attributes, onClick: () => {
          this.closePopupPopovers.emit();
          if (!this.popupFieldSelectionPickList) {
            this.popupFieldSelectionPickList = document.createElement("arcgis-popup-field-pick-list");
            this.popupFieldSelectionPickList.popoverProps = {
              refElement: this.popupFlowItem
            };
            this.popupFieldSelectionPickList.multiple = false;
            this.popupFieldSelectionPickList.heading = this.strings.addField;
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListDismissed", () => {
              this.closePopupPopovers.emit();
            });
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListChange", (event) => this.popupFieldSelectionPickListChanges(event, formType));
            document.body.appendChild(this.popupFieldSelectionPickList);
            this.disablePopupPanel.emit(true);
          }
        }, scale: "s", icon: "brackets-curly" })))));
    };
    this.guid = undefined;
    this.attachmentContent = undefined;
    this.layerSupportsResizeAttachments = undefined;
    this.blockOpen = false;
    this.popupFlowItem = undefined;
    this.reRender = undefined;
  }
  // lifecycle methods
  componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    if (this.layerSupportsResizeAttachments) {
      if (!this.attachmentContent.displayType) {
        this.attachmentContent.displayType = AttachmentDisplayType.auto;
        // temp
        this.internalPopupUpdated.emit();
      }
    }
    else {
      this.attachmentContent.displayType = AttachmentDisplayType.list;
    }
    if (!this.attachmentContent.title) {
      this.attachmentContent.title = "";
    }
    if (!this.attachmentContent.description) {
      this.attachmentContent.description = "";
    }
  }
  componentDidLoad() {
    if (this.blockOpen) {
      this.blockOptions.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
      this.blockOptions.setFocus();
    }
  }
  componentDidUpdate() {
    this.internalPopupUpdated.emit();
  }
  disconnectedCallback() {
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
    }
  }
  // Events
  calciteBlockToggleHandler() {
    this.closePopupPopovers.emit();
  }
  closePopupPopoversHandler() {
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
      this.popupFieldSelectionPickList = null;
      this.disablePopupPanel.emit(false);
    }
  }
  // field selection for title and caption
  popupFieldSelectionPickListChanges(event, formType) {
    const selectedFieldName = event.detail.selectedFields[0];
    if (formType === "title") {
      this.contentTitle.value = addSelectedFieldAtCursor(this.contentTitle, selectedFieldName);
      this.contentTitle.setFocus();
      this.attachmentContent.title = this.contentTitle.value;
    }
    else if (formType === "description") {
      this.contentDescription.value = addSelectedFieldAtCursor(this.contentDescription, selectedFieldName);
      this.contentDescription.setFocus();
      this.attachmentContent.description = this.contentDescription.value;
    }
    this.closePopupPopovers.emit();
    this.reRender = !this.reRender;
  }
  // rendor methods
  render() {
    const attachmentDisplayType = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.displayAttachmentsAs, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { width: "full", scale: "s", disabled: !this.layerSupportsResizeAttachments, onCalciteSegmentedControlChange: (event) => {
        const node = event.target;
        const selectedItem = node.selectedItem;
        this.attachmentContent.displayType = selectedItem.value;
        this.reRender = !this.reRender;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: AttachmentDisplayType.auto, iconStart: "check", checked: this.attachmentContent.displayType === AttachmentDisplayType.auto }, this.strings.auto), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: AttachmentDisplayType.list, iconStart: "list", checked: this.attachmentContent.displayType === AttachmentDisplayType.list }, this.strings.list), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: AttachmentDisplayType.preview, iconStart: "image", checked: this.attachmentContent.displayType === AttachmentDisplayType.preview }, this.strings.gallery)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, (() => {
      switch (this.attachmentContent.displayType) {
        case AttachmentDisplayType.auto:
          return this.strings.autoDisplayMessage;
        case AttachmentDisplayType.list:
          return this.strings.listDisplayMessage;
        case AttachmentDisplayType.preview:
          return this.strings.previewDisplayMessage;
        default:
          return this.strings.listDisplayMessage;
      }
    })())));
    const listWarningMessage = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.listWarningDiv }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: CSS$5.listWarningLabel }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS$5.listWarningIcon }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "exclamation-mark-triangle" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS$5.listWarningText }, this.strings.layerOnlySupportsListView))));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), heading: this.strings.attachments, description: (this.attachmentContent.title &&
        `${this.attachmentContent.title.substring(0, 25)}${this.attachmentContent.title.length > 25 ? "..." : ""}`) ||
        (() => {
          switch (this.attachmentContent.displayType) {
            case AttachmentDisplayType.auto:
              return this.strings.auto;
            case AttachmentDisplayType.list:
              return this.strings.list;
            case AttachmentDisplayType.preview:
              return this.strings.gallery;
            default:
              return this.strings.list;
          }
        })(), collapsible: true, open: this.blockOpen, dragHandle: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable", slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-calcite-block-options", { ref: (el) => (this.blockOptions = el), guid: this.guid, intlOptions: this.strings.options, intlDelete: this.strings.delete, calciteBlockOptions: { hasDelete: true } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "attachment" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable" }, this.formInput("title", this.strings.title, (element) => {
      return (this.contentTitle = element);
    }, this.attachmentContent.title, this.strings.enterTitle
    // this.strings.titleContext.replace("${titleContext}", this.strings.attachments_L)
    ), this.formInput("description", this.strings.desc, (element) => {
      return (this.contentDescription = element);
    }, this.attachmentContent.description, this.strings.enterDescription
    // this.strings.descriptionContext.replace(
    //   "${descriptionContext}",
    //   this.strings.attachments_L
    // )
    ), attachmentDisplayType, this.layerSupportsResizeAttachments ? null : listWarningMessage))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupAttachments.style = arcgisPopupAttachmentsCss;

const CSS$4 = {
  manageBtn: "manage-btn",
  formInputButton: "form-input-button"
};

const arcgisPopupAttributesCss = ".manage-btn{justify-content:flex-end;margin:4px 0}.form-input-button{display:flex}.form-input-button calcite-input[type=text]{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.form-input-button calcite-action{margin:0;flex:0 0 0%;justify-self:flex-end}";

const ArcgisPopupAttributes = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    this.pickList = [];
    this.arcadeExpMap = new Map();
    // open popover
    this.manageBtnClick = (event) => {
      event.stopPropagation();
      // close first since we can have multiple attributes open
      this.closePopupPopovers.emit();
      // lazy load attribute manager component
      if (!this.popupFieldManagePickList) {
        this.popupFieldManagePickList = document.createElement("arcgis-popup-field-pick-list");
        this.popupFieldManagePickList.popoverProps = {
          refElement: this.popupFlowItem
        };
        this.popupFieldManagePickList.selectedFields = this.getSelectedFields();
        this.popupFieldManagePickList.showCancel = false;
        this.popupFieldManagePickList.multiple = true;
        this.popupFieldManagePickList.heading = this.strings.selectFields;
        this.popupFieldManagePickList.okBtnText = this.strings.done;
        this.popupFieldManagePickList.addEventListener("arcgisPopupPickListDismissed", () => {
          this.closePopupPopovers.emit();
        });
        this.popupFieldManagePickList.addEventListener("arcgisPopupPickListChange", this.popupFieldManagePickListChanges);
        document.body.appendChild(this.popupFieldManagePickList);
        this.disablePopupPanel.emit(true);
      }
    };
    this.popupFieldManagePickListChanges = (event) => {
      var _a;
      event.stopPropagation();
      const selectedField = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields;
      const fieldInfos = [];
      this.setupFieldMapInfo();
      selectedField.forEach((fieldName) => {
        var _a;
        if (this.fieldInfoMap.has(fieldName)) {
          const tempField = (_a = this.fieldInfoMap.get(fieldName)) === null || _a === void 0 ? void 0 : _a.clone();
          tempField.visible = true;
          fieldInfos.push(tempField);
        }
      });
      this.popupContent.fieldInfos = [...fieldInfos];
      this.reRender = !this.reRender;
    };
    this.calcitePickList = (field) => (
    // field.fieldName is always unique
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { key: field.fieldName, label: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.b)(field, this.arcadeExpMap), value: field.fieldName }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", appearance: "transparent", text: this.strings.remove, onClick: () => this.removeBtnClick(field.fieldName) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" }))));
    this.formInput = (formType, formString, formInputElement, formValue, formPlaceholder
    // promptMessage: string
    ) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, formString, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.formInputButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", autofocus: true, ref: formInputElement, value: formValue, placeholder: formPlaceholder, onCalciteInputInput: (event) => {
          event.stopPropagation();
          const inputVal = event.target.value;
          if (formType === "title") {
            this.popupContent.title = inputVal;
          }
          else {
            this.popupContent.description = inputVal;
          }
          this.reRender = !this.reRender;
        }, onClick: () => this.closePopupPopovers.emit() }), ((_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.attributes, onClick: () => {
          this.closePopupPopovers.emit();
          if (!this.popupFieldSelectionPickList) {
            this.popupFieldSelectionPickList = document.createElement("arcgis-popup-field-pick-list");
            this.popupFieldSelectionPickList.popoverProps = {
              refElement: this.popupFlowItem,
              offsetSkidding: 50
            };
            this.popupFieldSelectionPickList.multiple = false;
            this.popupFieldSelectionPickList.heading = this.strings.addField;
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListDismissed", () => {
              this.closePopupPopovers.emit();
            });
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListChange", (event) => this.popupFieldSelectionPickListChanges(event, formType));
            document.body.appendChild(this.popupFieldSelectionPickList);
            this.disablePopupPanel.emit(true);
          }
        }, scale: "s", icon: "brackets-curly" })))));
    };
    this.guid = undefined;
    this.popupContent = undefined;
    this.blockOpen = false;
    this.popupFlowItem = undefined;
    this.reRender = undefined;
  }
  // lifecycle methods
  async componentWillLoad() {
    this.layer = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layer;
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    this.layerDisplayType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerDisplayType;
    if (!this.popupContent.fieldInfos) {
      this.popupContent.fieldInfos = await this.getFieldsContent();
    }
    if (!this.popupContent.title) {
      this.popupContent.title = "";
    }
    if (!this.popupContent.description) {
      this.popupContent.description = "";
    }
  }
  componentDidLoad() {
    if (this.blockOpen) {
      this.blockOptions.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
      this.blockOptions.setFocus();
      this.internalPopupUpdated.emit();
    }
  }
  componentWillRender() {
    this.arcadeExpMap = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.e)(this.popupTemplate);
    this.setupFieldMapInfo();
    this.pickList = [];
    this.popupContent.fieldInfos.forEach((field) => {
      this.pickList.push(this.calcitePickList(field));
    });
  }
  componentDidUpdate() {
    this.internalPopupUpdated.emit();
  }
  disconnectedCallback() {
    if (this.popupFieldManagePickList) {
      document.body.removeChild(this.popupFieldManagePickList);
    }
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
    }
  }
  // Events
  // for arcade changes
  arcadeChangeNotificationHandler() {
    this.reRender = this.reRender ? false : true;
  }
  // for attribute changes
  async attributesChangeNotificationHandler() {
    // update field infos
    this.popupContent.fieldInfos.forEach((field, index) => {
      if (this.fieldInfoMap.has(field.fieldName)) {
        this.popupContent.fieldInfos[index] = this.fieldInfoMap.get(field.fieldName).clone();
        this.popupContent.fieldInfos[index].visible = true;
      }
    });
    this.reRender = !this.reRender;
  }
  closePopupPopoversHandler() {
    if (this.popupFieldManagePickList) {
      document.body.removeChild(this.popupFieldManagePickList);
      this.popupFieldManagePickList = null;
      this.blockOptions.setFocus();
      this.disablePopupPanel.emit(false);
    }
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
      this.popupFieldSelectionPickList = null;
      this.disablePopupPanel.emit(false);
    }
  }
  calciteBlockToggleHandler() {
    this.closePopupPopovers.emit();
  }
  calciteListOrderChangeHandler(event) {
    const tempFields = event.detail;
    const tempFieldInfos = [];
    tempFields.forEach((fieldName) => {
      this.popupContent.fieldInfos.find((field) => {
        if (field.fieldName === fieldName) {
          return tempFieldInfos.push(field);
        }
      });
    });
    this.popupContent.fieldInfos = tempFieldInfos;
    this.internalPopupUpdated.emit();
  }
  // private methods and properties
  async getFieldsContent() {
    var _a, _b;
    let fieldInfos = [];
    if (this.checkForCreateFieldsContent()) {
      const [popupUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)(["esri/support/popupUtils"]);
      // get default from createFieldsContent
      const popupUtilsFieldInfo = (_b = popupUtils.createFieldsContent({
        fields: await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.j)(this.layer),
        objectIdField: this.layer.objectIdField,
        editFieldsInfo: ((_a = this.layer) === null || _a === void 0 ? void 0 : _a.editFieldsInfo) || null
      })) === null || _b === void 0 ? void 0 : _b.fieldInfos;
      // popupUtilsFieldInfo should have a subset of fieldInfoMap
      // but with differences in format and visibility
      !this.fieldInfoMap && this.setupFieldMapInfo();
      popupUtilsFieldInfo.forEach((fieldInfo) => {
        if (this.fieldInfoMap.has(fieldInfo.fieldName)) {
          const tempFieldInfo = this.fieldInfoMap.get(fieldInfo.fieldName);
          fieldInfos.push(tempFieldInfo.clone());
          fieldInfos[fieldInfos.length - 1].visible = true;
        }
      });
      // add expressions and relationship fields is visible = true
      this.popupTemplate.fieldInfos.forEach((fieldInfo) => {
        if ((fieldInfo.fieldName.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression) ||
          fieldInfo.fieldName.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.relationship)) &&
          fieldInfo.visible) {
          fieldInfos.push(fieldInfo.clone());
        }
      });
    }
    else {
      // feature reduction, 3x and default case
      this.popupTemplate.fieldInfos.forEach((fieldInfo) => {
        fieldInfo.visible && fieldInfos.push(fieldInfo.clone());
      });
    }
    return fieldInfos;
  }
  checkForCreateFieldsContent() {
    var _a, _b, _c;
    // regular feature or feature reduction
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
      // check 1st content for 3x and default use case
      if (((_b = (_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.content[0]) === null || _b === void 0 ? void 0 : _b.type) === "fields") {
        if ((_c = this.popupTemplate.content[0]) === null || _c === void 0 ? void 0 : _c.fieldInfos) {
          // use createFieldsContent
          return true;
        }
        else {
          // Default or coming from 3x.
          // Dont use createFieldsContent, but depend on fieldInfos
          return false;
        }
      }
      else {
        // 1st element is not field, use createFieldsContent
        return true;
      }
    }
    else {
      // feature reduction
      return false;
    }
  }
  removeBtnClick(fieldName) {
    this.closePopupPopovers.emit();
    this.popupContent.fieldInfos.find((fieldInContent, index) => {
      if (fieldInContent.fieldName === fieldName) {
        return this.popupContent.fieldInfos.splice(index, 1);
      }
    });
    this.reRender = !this.reRender;
  }
  getSelectedFields() {
    const selectedFields = [];
    this.popupContent.fieldInfos.forEach((field) => {
      selectedFields.push(field.fieldName);
    });
    return selectedFields;
  }
  // field selection for title and caption
  popupFieldSelectionPickListChanges(event, formType) {
    const selectedFieldName = event.detail.selectedFields[0];
    if (formType === "title") {
      this.contentTitle.value = addSelectedFieldAtCursor(this.contentTitle, selectedFieldName);
      this.contentTitle.setFocus();
      this.popupContent.title = this.contentTitle.value;
    }
    else if (formType === "description") {
      this.contentDescription.value = addSelectedFieldAtCursor(this.contentDescription, selectedFieldName);
      this.contentDescription.setFocus();
      this.popupContent.description = this.contentDescription.value;
    }
    this.closePopupPopovers.emit();
    this.reRender = !this.reRender;
  }
  setupFieldMapInfo() {
    this.fieldInfoMap = new Map(this.popupTemplate.fieldInfos.map((fieldInfo) => [
      fieldInfo.fieldName,
      fieldInfo
    ]));
  }
  // rendor methods
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), heading: this.strings.fieldsList, description: (this.popupContent.title &&
        `${this.popupContent.title.substring(0, 25)}${this.popupContent.title.length > 25 ? "..." : ""}`) ||
        `${this.popupContent.fieldInfos.length}/${this.popupTemplate.fieldInfos.length} ${this.strings.attributes_L}`, collapsible: true, open: this.blockOpen, dragHandle: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable", slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-calcite-block-options", { ref: (el) => (this.blockOptions = el), guid: this.guid, intlOptions: this.strings.options, intlDelete: this.strings.delete, intlDuplicate: this.strings.duplicate, calciteBlockOptions: { hasDelete: true, hasDuplicate: true } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "feature-details" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable" }, this.formInput("title", this.strings.title, (element) => {
      return (this.contentTitle = element);
    }, this.popupContent.title, this.strings.enterTitle
    // this.strings.titleContext.replace("${titleContext}", this.strings.attributes_L)
    ), this.formInput("description", this.strings.desc, (element) => {
      return (this.contentDescription = element);
    }, this.popupContent.description, this.strings.enterDescription
    // this.strings.descriptionContext.replace(
    //   "${descriptionContext}",
    //   this.strings.attributes_L
    // )
    ), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: CSS$4.manageBtn, appearance: "transparent", scale: "m", width: "full", id: "openManageAttributes_Id", onClick: this.manageBtnClick }, this.strings.selectAttributes), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { "drag-enabled": true }, this.pickList)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupAttributes.style = arcgisPopupAttributesCss;

const CSS$3 = {
  manageBtn: "manage-btn",
  enableColumn: "enable-column",
  enableColumnLabel: "enable-column-label",
  ColumnSwitch: "column-switch",
  normalizeBlock: "normalize-block",
  normalizeContentButtonSection: "normalize-content-btn-section",
  normalizeContentButton: "normalize-content-btn",
  normalizeContentButtonText: "normalize-content-btn-text",
  normalizeContentButtonIcon: "normalize-content-btn-icon",
  popoverChartDiv: "popover-chart-div",
  formInputButton: "form-input-button",
  chartGroup: "chart-group"
};

const arcgisPopupChartCss = ".manage-btn{justify-content:flex-end}.enable-column{background-color:var(--arcgis-app-background);display:flex;padding:var(--arcgis-app-cap-spacing-half) var(--arcgis-app-side-spacing-quarter)}.enable-column-label{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.column-switch{margin:0;flex:0 0 0%;justify-self:flex-end}.normalize-block{padding:0 var(--arcgis-app-side-spacing-quarter)}.normalize-content-btn-section{background-color:var(--arcgis-app-background);min-width:100%}.normalize-content-btn{background:var(--arcgis-app-background-clear);border:1px solid var(--arcgis-app-border);border-radius:var(--arcgis-app-border-radius);display:flex;align-items:center;justify-content:space-between;padding:var(--arcgis-app-cap-spacing-half) var(--arcgis-app-side-spacing-quarter);cursor:pointer;width:100%;text-align:unset;transition:background-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function), border-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function)}.normalize-content-btn:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.normalize-content-btn-text{font-family:var(--arcgis-app-font-family);font-size:var(--arcgis-app-font-size-0);flex:0 1 auto;overflow:hidden;padding:0 var(--arcgis-app-side-spacing-eighth);text-overflow:ellipsis;white-space:nowrap}.normalize-content-btn-icon{flex:0 0 0%;padding:0 var(--arcgis-app-side-spacing-half)}.popover-chart-div{background-color:var(--arcgis-app-background);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing-half);max-height:60vh}.form-input-button{display:flex}.form-input-button calcite-input[type=text]{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.form-input-button calcite-action{margin:0;flex:0 0 0%;justify-self:flex-end}.chart-group{margin-bottom:var(--arcgis-app-cap-spacing-half)}.color-icon{width:18px;height:18px;border-radius:90%}";

const MAX_RAMP_COLORS = 10;
const ArcgisPopupChart = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.chartChangedReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "chartChangedReRender", 7);
    this.notifyMultiMediaChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "notifyMultiMediaChange", 7);
    this.lastColors = {};
    this.pickList = [];
    this.arcadeExpMap = new Map();
    this.colorNodes = [];
    this.popupFieldManagePickListChanges = (event) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      const { esriLang, esriColor, rendererColors } = this;
      event.stopPropagation();
      const oldFields = this.chartMediaInfo.value.fields;
      const newFields = event.detail.selectedFields;
      this.chartMediaInfo.value.fields = newFields;
      if (this.chartMediaInfo.type === PopupMultiMediaType.lineChart) {
        if (((_a = this.chartMediaInfo.value.fields) === null || _a === void 0 ? void 0 : _a.length) && !((_b = this.chartMediaInfo.value.colors) === null || _b === void 0 ? void 0 : _b.length)) {
          const defaultScheme = this.getDefaultColorScheme();
          this.colors = [defaultScheme.colors[0]];
          this.chartMediaInfo.value.colors = esriLang.clone(this.colors);
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        else if (!((_c = this.chartMediaInfo.value.fields) === null || _c === void 0 ? void 0 : _c.length) &&
          ((_d = this.chartMediaInfo.value.colors) === null || _d === void 0 ? void 0 : _d.length)) {
          this.colors = undefined;
          this.chartMediaInfo.value.colors = undefined;
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        if ((_e = this.lastColors.rampColors) === null || _e === void 0 ? void 0 : _e.length) {
          const defaultScheme = this.getDefaultColorScheme();
          this.lastColors.rampColors = (_f = this.chartMediaInfo) === null || _f === void 0 ? void 0 : _f.value.fields.map((field, idx) => {
            var _a;
            const oldIdx = oldFields.indexOf(field);
            return ((oldIdx > -1 && ((_a = this.lastColors.rampColors) === null || _a === void 0 ? void 0 : _a[oldIdx])) ||
              new esriColor(defaultScheme.colors[idx % MAX_RAMP_COLORS]) ||
              new esriColor([0, 0, 0, 1]));
          });
        }
      }
      else {
        if ((_g = this.chartMediaInfo.value.fields) === null || _g === void 0 ? void 0 : _g.length) {
          const defaultScheme = this.getDefaultColorScheme();
          this.colors = (_h = this.chartMediaInfo) === null || _h === void 0 ? void 0 : _h.value.fields.map((fieldName, idx) => {
            var _a;
            const oldIdx = oldFields.indexOf(fieldName);
            return ((oldIdx > -1 && ((_a = this.colors) === null || _a === void 0 ? void 0 : _a[oldIdx])) ||
              (rendererColors.get(fieldName)
                ? esriLang.clone(rendererColors.get(fieldName)[0])
                : new esriColor(defaultScheme.colors[idx % MAX_RAMP_COLORS]) ||
                  new esriColor([0, 0, 0, 1])));
          });
          if ((_j = this.chartMediaInfo.value.colors) === null || _j === void 0 ? void 0 : _j.length) {
            this.chartMediaInfo.value.colors = esriLang.clone(this.colors);
          }
          else {
            // don't auto save colors on remove; update to make sure default colors still match
            this.colors = [];
            this.setColors();
            (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
          }
          if (oldFields === null || oldFields === void 0 ? void 0 : oldFields.length) {
            this.colorButtonNode && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.colorButtonNode);
          }
          else {
            (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
          }
        }
        else {
          this.colors = undefined;
          this.chartMediaInfo.value.colors = undefined;
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      }
      this.chartChangedReRender.emit();
      if (!(oldFields === null || oldFields === void 0 ? void 0 : oldFields.length) || !((_k = this.chartMediaInfo.value.fields) === null || _k === void 0 ? void 0 : _k.length)) {
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      }
    };
    this.fieldPickListChanges = (event) => {
      var _a, _b;
      event.stopPropagation();
      const selectedField = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) === null || _b === void 0 ? void 0 : _b[0];
      if (selectedField) {
        this.chartMediaInfo.value.normalizeField = selectedField;
        this.chartChangedReRender.emit();
      }
      this.closePopupPopovers.emit(this.guid);
      this.normalizeBtn.focus();
    };
    // field selection for title and caption
    this.popupFieldSelectionPickListChanges = (event, formType) => {
      const selectedFieldName = event.detail.selectedFields[0];
      if (formType === "title") {
        this.editChartTitle.value = addSelectedFieldAtCursor(this.editChartTitle, selectedFieldName);
        this.chartMediaInfo.title = this.editChartTitle.value;
        this.editChartTitle.setFocus();
      }
      else if (formType === "caption") {
        this.editChartCaption.value = addSelectedFieldAtCursor(this.editChartCaption, selectedFieldName);
        this.chartMediaInfo.caption = this.editChartCaption.value;
        this.editChartCaption.setFocus();
      }
      else if (formType === "altText") {
        this.editAltText.value = addSelectedFieldAtCursor(this.editAltText, selectedFieldName);
        this.chartMediaInfo.altText = this.editAltText.value;
        this.editAltText.setFocus();
      }
      this.closePopupPopovers.emit(this.guid);
      this.chartChangedReRender.emit();
    };
    this.chartFormInput = (chartFormInputType) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, (() => {
        if (chartFormInputType === "title") {
          return this.strings.title;
        }
        else if (chartFormInputType === "caption") {
          return this.strings.caption;
        }
        else if (chartFormInputType === "altText") {
          return this.strings.description;
        }
      })(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.formInputButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", autofocus: true, ref: (element) => {
          element.addEventListener("calciteInputChange", (event) => {
            event.stopPropagation();
            const inputVal = event.target.value;
            if (chartFormInputType === "title") {
              this.chartMediaInfo.title = inputVal;
            }
            else if (chartFormInputType === "caption") {
              this.chartMediaInfo.caption = inputVal;
            }
            else if (chartFormInputType === "altText") {
              this.chartMediaInfo.altText = inputVal;
            }
            this.chartChangedReRender.emit();
          });
          if (chartFormInputType === "title") {
            return (this.editChartTitle = element);
          }
          else if (chartFormInputType === "caption") {
            return (this.editChartCaption = element);
          }
          else if (chartFormInputType === "altText") {
            return (this.editAltText = element);
          }
        }, value: (() => {
          if (chartFormInputType === "title") {
            return this.chartMediaInfo.title;
          }
          else if (chartFormInputType === "caption") {
            return this.chartMediaInfo.caption;
          }
          else if (chartFormInputType === "altText") {
            return this.chartMediaInfo.altText;
          }
        })(), placeholder: (() => {
          if (chartFormInputType === "title") {
            return this.strings.imageTitlePlaceHolder;
          }
          else if (chartFormInputType === "caption") {
            return this.strings.imageCaptionPlaceHolder;
          }
          else if (chartFormInputType === "altText") {
            return this.strings.describeChart;
          }
        })(), onClick: () => this.closePopupPopovers.emit(this.guid) }), ((_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.attributes, "text-display": "hidden", onClick: () => {
          var _a;
          this.closePopupPopovers.emit(this.guid);
          (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
          this.closeColorPopover();
          if (!this.popupFieldSelectionPickList) {
            this.popupFieldSelectionPickList = document.createElement("arcgis-popup-field-pick-list");
            this.popupFieldSelectionPickList.popoverProps = {
              refElement: this.panelElement
            };
            this.popupFieldSelectionPickList.multiple = false;
            this.popupFieldSelectionPickList.heading = this.strings.addField;
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListDismissed", () => {
              this.closePopupPopovers.emit(this.guid);
            });
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListChange", (event) => this.popupFieldSelectionPickListChanges(event, chartFormInputType));
            document.body.appendChild(this.popupFieldSelectionPickList);
            this.panelElement.disabled = true;
          }
        }, scale: "s", icon: "brackets-curly" })))));
    };
    this.calcitePickList = (field, idx) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: field.fieldName, label: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.b)(field, this.arcadeExpMap), value: field.fieldName }, this.renderColorIcon(idx), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", appearance: "transparent", text: this.strings.remove, onClick: () => {
        var _a, _b, _c;
        this.closePopupPopovers.emit(this.guid);
        (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
        this.closeColorPopover();
        if ((_b = this.chartMediaInfo.value.colors) === null || _b === void 0 ? void 0 : _b.length) {
          this.chartMediaInfo.value.fields.forEach((fieldName, idx) => {
            var _a;
            if (fieldName === field.fieldName) {
              this.chartMediaInfo.value.fields.splice(idx, 1);
              if (this.chartMediaInfo.type !== PopupMultiMediaType.lineChart) {
                this.chartMediaInfo.value.colors.splice(idx, 1);
                this.colors.splice(idx, 1);
                this.colorButtonNode && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.colorButtonNode);
              }
              if ((_a = this.lastColors.rampColors) === null || _a === void 0 ? void 0 : _a.length) {
                this.lastColors.rampColors.splice(idx, 1);
              }
            }
          });
        }
        else {
          this.chartMediaInfo.value.fields.forEach((fieldName, idx) => {
            if (fieldName === field.fieldName) {
              this.chartMediaInfo.value.fields.splice(idx, 1);
            }
          });
          // don't auto save colors on remove/add; update to make sure default colors still match
          this.colors = [];
          this.setColors();
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        this.chartChangedReRender.emit();
        if (!((_c = this.chartMediaInfo.value.fields) === null || _c === void 0 ? void 0 : _c.length)) {
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" }))));
    this.guid = undefined;
    this.chartMediaInfo = undefined;
    this.mediaContent = undefined;
    this.mediaIndexPosition = undefined;
    this.refElement = undefined;
    this.isOpen = false;
    this.reRender = undefined;
  }
  // lifecycle methods
  async componentWillLoad() {
    var _a;
    this.layer = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layer;
    this.mapView = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.mapView;
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    this.layerDisplayType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerDisplayType;
    this.chartMediaInfo.title = this.chartMediaInfo.title || "";
    this.chartMediaInfo.altText = this.chartMediaInfo.altText || "";
    this.chartMediaInfo.caption = this.chartMediaInfo.caption || "";
    const [esriLang, esriColor, pieChartSchemes, rendererUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/core/lang",
      "esri/Color",
      "esri/smartMapping/symbology/pieChart",
      "esri/renderers/support/utils"
    ]);
    this.esriLang = esriLang;
    this.esriColor = esriColor;
    this.pieChartSchemes = pieChartSchemes;
    this.rendererUtils = rendererUtils;
    if ("renderer" in this.layer) {
      let renderer;
      if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
        renderer = this.layer.featureReduction.renderer;
      }
      else {
        renderer = this.layer.renderer;
      }
      if (["class-breaks", "dot-density", "heatmap", "pie-chart", "simple", "unique-value"].indexOf(renderer.type) > -1) {
        this.rendererColors = await this.rendererUtils.getColorsFromRenderer(renderer);
      }
    }
    this.colors = esriLang.clone((_a = this.chartMediaInfo) === null || _a === void 0 ? void 0 : _a.value.colors) || [];
    this.setColors();
  }
  componentDidLoad() {
    this.isOpen = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 300);
  }
  async componentWillRender() {
    this.fieldInfoMap = new Map(this.popupTemplate.fieldInfos.map((fieldInfo) => [
      fieldInfo.fieldName,
      fieldInfo
    ]));
    this.layerFieldsMap = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.d)(this.layer);
    this.arcadeExpMap = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.e)(this.popupTemplate);
    this.pickList = [];
    this.chartMediaInfo.value.fields.forEach((field, idx) => {
      var _a, _b;
      if (this.fieldInfoMap.has(field)) {
        const currentFieldInfo = this.fieldInfoMap.get(field);
        this.pickList.push(this.calcitePickList(currentFieldInfo, idx));
      }
      else {
        // field does not exist anymore, remove
        this.chartMediaInfo.value.fields.splice(idx, 1);
        if (this.chartMediaInfo.type !== PopupMultiMediaType.lineChart) {
          if ((_a = this.chartMediaInfo.value.colors) === null || _a === void 0 ? void 0 : _a.length) {
            this.chartMediaInfo.value.colors.splice(idx, 1);
            this.colors.splice(idx, 1);
          }
          else {
            const defaultScheme = this.getDefaultColorScheme();
            this.colors = (_b = this.chartMediaInfo) === null || _b === void 0 ? void 0 : _b.value.fields.map((fieldName, idx) => {
              var _a;
              return this.rendererColors.get(fieldName)
                ? this.esriLang.clone(this.rendererColors.get(fieldName)[0])
                : ((_a = this.colors) === null || _a === void 0 ? void 0 : _a[idx]) ||
                  new this.esriColor(defaultScheme.colors[idx % MAX_RAMP_COLORS]) ||
                  new this.esriColor([0, 0, 0, 1]);
            });
          }
        }
      }
    });
  }
  componentDidUpdate() {
    this.notifyMultiMediaChange.emit({
      guid: this.guid,
      mediaIndexPosition: this.mediaIndexPosition
    });
    this.chartPopover.reposition();
  }
  disconnectedCallback() {
    var _a;
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
    }
    if (this.popupFieldManagePickList) {
      document.body.removeChild(this.popupFieldManagePickList);
    }
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
    }
    (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
  }
  // Public Methods
  async reposition() {
    this.chartPopover.reposition();
  }
  // Events
  chartChangedReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = this.reRender ? false : true;
  }
  closePopupPopoversHandler() {
    this.removeAttributesSelectionPopover();
  }
  closeMultiMediaPopoverHandler() {
    this.removeAttributesSelectionPopover();
  }
  // arcade changes
  arcadeChangeNotificationHandler() {
    this.chartChangedReRender.emit();
  }
  // private methods and properties
  removeAttributesSelectionPopover() {
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
      this.popupFieldSelectionPickList = null;
    }
    if (this.popupFieldManagePickList) {
      document.body.removeChild(this.popupFieldManagePickList);
      this.popupFieldManagePickList = null;
    }
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
      this.arcgisFieldPickList = null;
    }
    if (this.colorPopoverNode) {
      document.body.removeChild(this.colorPopoverNode);
      this.colorPopoverNode = null;
    }
    this.panelElement.disabled = false;
  }
  async chartSelection(chartType) {
    const [BarChartMediaInfo, ColumnChartMediaInfo, LineChartMediaInfo, PieChartMediaInfo] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/popup/content/BarChartMediaInfo",
      "esri/popup/content/ColumnChartMediaInfo",
      "esri/popup/content/LineChartMediaInfo",
      "esri/popup/content/PieChartMediaInfo"
    ]);
    let chartElement = null;
    if (chartType === PopupMultiMediaType.barChart) {
      chartElement = new BarChartMediaInfo({
        title: this.chartMediaInfo.title,
        caption: this.chartMediaInfo.caption,
        value: this.chartMediaInfo.value,
        altText: this.chartMediaInfo.altText
      });
    }
    if (chartType === PopupMultiMediaType.columnChart) {
      chartElement = new ColumnChartMediaInfo({
        title: this.chartMediaInfo.title,
        caption: this.chartMediaInfo.caption,
        value: this.chartMediaInfo.value,
        altText: this.chartMediaInfo.altText
      });
    }
    if (chartType === PopupMultiMediaType.lineChart) {
      chartElement = new LineChartMediaInfo({
        title: this.chartMediaInfo.title,
        caption: this.chartMediaInfo.caption,
        value: this.chartMediaInfo.value,
        altText: this.chartMediaInfo.altText
      });
    }
    if (chartType === PopupMultiMediaType.pieChart) {
      chartElement = new PieChartMediaInfo({
        title: this.chartMediaInfo.title,
        caption: this.chartMediaInfo.caption,
        value: this.chartMediaInfo.value,
        altText: this.chartMediaInfo.altText
      });
    }
    this.chartMediaInfo = chartElement.clone();
    this.mediaContent.mediaInfos[this.mediaIndexPosition] = this.chartMediaInfo;
    this.chartChangedReRender.emit();
  }
  getSummaryString() {
    if (this.chartMediaInfo.type === PopupMultiMediaType.barChart) {
      return this.strings.bar;
    }
    if (this.chartMediaInfo.type === PopupMultiMediaType.columnChart) {
      return this.strings.column;
    }
    if (this.chartMediaInfo.type === PopupMultiMediaType.lineChart) {
      return this.strings.line;
    }
    if (this.chartMediaInfo.type === PopupMultiMediaType.pieChart) {
      return this.strings.pie;
    }
  }
  // rendor methods
  render() {
    var _a, _b;
    const hasFields = !!((_a = this.chartMediaInfo.value.fields) === null || _a === void 0 ? void 0 : _a.length);
    const chartGroup = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { width: "full", scale: "s", class: CSS$3.chartGroup, onCalciteSegmentedControlChange: async (event) => {
        var _a;
        (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
        this.closeColorPopover();
        const node = event.target;
        const selectedItem = node.selectedItem;
        if ((this.chartMediaInfo.type === PopupMultiMediaType.lineChart &&
          selectedItem.value !== PopupMultiMediaType.lineChart) ||
          (this.chartMediaInfo.type !== PopupMultiMediaType.lineChart &&
            selectedItem.value === PopupMultiMediaType.lineChart)) {
          const savedColors = this.chartMediaInfo.value.colors;
          if (this.chartMediaInfo.type === PopupMultiMediaType.lineChart) {
            this.lastColors.lineColors = savedColors && this.esriLang.clone(savedColors);
            this.colors = undefined;
            this.chartMediaInfo.value.colors = undefined;
          }
          else {
            this.lastColors.rampColors = savedColors && this.esriLang.clone(savedColors);
            if (selectedItem.value === PopupMultiMediaType.lineChart) {
              this.colors = undefined;
              this.chartMediaInfo.value.colors = undefined;
            }
          }
        }
        if (selectedItem.value !== this.chartMediaInfo.type) {
          // bar and column are in same radio group
          !(selectedItem.value === PopupMultiMediaType.columnChart &&
            this.chartMediaInfo.type === PopupMultiMediaType.barChart) && (await this.chartSelection(selectedItem.value));
        }
        this.setColors();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: PopupMultiMediaType.columnChart, iconStart: "graph-bar", checked: this.chartMediaInfo.type === PopupMultiMediaType.columnChart ||
        this.chartMediaInfo.type === PopupMultiMediaType.barChart }, this.strings.bar), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: PopupMultiMediaType.lineChart, iconStart: "graph-time-series", checked: this.chartMediaInfo.type === PopupMultiMediaType.lineChart }, this.strings.line), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: PopupMultiMediaType.pieChart, iconStart: "pie-chart", checked: this.chartMediaInfo.type === PopupMultiMediaType.pieChart }, this.strings.pie)));
    const colorButton = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-popup-color-button", { chartMediaInfo: this.chartMediaInfo, colors: this.colors, popoverReferenceElement: this.panelElement, onArcgisPopupColorButtonChange: ({ detail: colors }) => {
        this.colors = colors;
        // once the user makes a change we save all colors
        this.chartMediaInfo.value.colors = this.esriLang.clone(colors);
        this.chartChangedReRender.emit();
      }, onArcgisPopupColorButtonBeforeOpen: () => this.closeColorPopover(), ref: (node) => (this.colorButtonNode = node) }));
    const resetButton = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, this.strings.resetColors, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { appearance: "transparent", text: this.strings.resetColors, disabled: !((_b = this.chartMediaInfo.value.colors) === null || _b === void 0 ? void 0 : _b.length), onClick: () => {
        var _a;
        (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
        this.closeColorPopover();
        this.chartMediaInfo.value.colors = null;
        this.colors = [];
        if (this.chartMediaInfo.type === PopupMultiMediaType.lineChart) {
          this.lastColors.lineColors = undefined;
        }
        else {
          this.lastColors.rampColors = undefined;
        }
        this.setColors();
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "reset" }))));
    // manage button and list of selected fields
    const fieldList = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: CSS$3.manageBtn, appearance: "transparent", scale: "m", width: "full", onClick: async (event) => {
        var _a, _b, _c;
        event.stopPropagation();
        this.closePopupPopovers.emit(this.guid);
        (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
        this.closeColorPopover();
        if (!this.popupFieldManagePickList) {
          this.popupFieldManagePickList = document.createElement("arcgis-popup-field-pick-list");
          this.popupFieldManagePickList.popoverProps = {
            refElement: this.panelElement
          };
          this.popupFieldManagePickList.selectedFields =
            ((_c = (_b = this.chartMediaInfo) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.fields) || [];
          this.popupFieldManagePickList.showCancel = false;
          this.popupFieldManagePickList.multiple = true;
          this.popupFieldManagePickList.heading = this.strings.selectFields;
          this.popupFieldManagePickList.okBtnText = this.strings.done;
          this.popupFieldManagePickList.numbersOnly = true;
          this.popupFieldManagePickList.addEventListener("arcgisPopupPickListDismissed", () => {
            this.closePopupPopovers.emit(this.guid);
          });
          this.popupFieldManagePickList.addEventListener("arcgisPopupPickListChange", this.popupFieldManagePickListChanges);
          document.body.appendChild(this.popupFieldManagePickList);
          this.panelElement.disabled = true;
        }
      } }, this.strings.selectAttributes), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { "drag-enabled": true, onCalciteListOrderChange: async (event) => {
        var _a, _b;
        event.stopPropagation();
        const allItems = event.target.querySelectorAll("calcite-list-item");
        const newIndexOrder = [];
        allItems.forEach((item) => {
          this.chartMediaInfo.value.fields.forEach((field, idx) => {
            if (item.value === field) {
              newIndexOrder.push(idx);
            }
          });
        });
        if (this.chartMediaInfo.type === PopupMultiMediaType.lineChart) {
          this.chartMediaInfo.value.fields = Array.from(allItems).map((item) => item.value);
        }
        else {
          if (!((_a = this.chartMediaInfo.value.colors) === null || _a === void 0 ? void 0 : _a.length)) {
            // once the user makes a re-order change we save all colors
            this.chartMediaInfo.value.colors = this.esriLang.clone(this.colors);
          }
          const newFields = [];
          const newColors = [];
          newIndexOrder.forEach((idx) => {
            newFields.push(this.chartMediaInfo.value.fields[idx]);
            newColors.push(this.esriLang.clone(this.chartMediaInfo.value.colors[idx]));
          });
          this.chartMediaInfo.value.fields = newFields;
          this.colors = newColors;
          // we save colors on re-order
          this.chartMediaInfo.value.colors = this.esriLang.clone(newColors);
        }
        if ((_b = this.lastColors.rampColors) === null || _b === void 0 ? void 0 : _b.length) {
          const rampColors = [];
          newIndexOrder.forEach((idx) => {
            rampColors.push(this.lastColors.rampColors[idx]);
          });
          this.lastColors.rampColors = rampColors;
        }
        this.chartChangedReRender.emit();
      } }, this.pickList)));
    // bar chart checkbox only under default column-chart
    const barChart = (this.chartMediaInfo.type === PopupMultiMediaType.barChart ||
      this.chartMediaInfo.type === PopupMultiMediaType.columnChart) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { class: CSS$3.enableColumn }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: CSS$3.enableColumnLabel }, this.strings.horizontalOrientation), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", class: CSS$3.ColumnSwitch, checked: this.chartMediaInfo.type === PopupMultiMediaType.barChart ? true : false, onCalciteSwitchChange: async (event) => {
        var _a;
        await this.chartSelection(((_a = event.target) === null || _a === void 0 ? void 0 : _a.checked)
          ? PopupMultiMediaType.barChart
          : PopupMultiMediaType.columnChart);
      } })));
    const normalizeField = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { class: CSS$3.normalizeBlock, text: this.strings.normalize, toggleDisplay: "switch", open: this.chartMediaInfo.value.normalizeField ? true : false, onCalciteBlockSectionToggle: (event) => {
        if (event.target.open) {
          this.chartMediaInfo.value.normalizeField = this.tempNormalizedField;
        }
        else {
          this.tempNormalizedField = this.chartMediaInfo.value.normalizeField;
          this.chartMediaInfo.value.normalizeField = "";
        }
        this.chartChangedReRender.emit();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.normalizeContentButtonSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { ref: (el) => (this.normalizeBtn = el), class: CSS$3.normalizeContentButton, title: this.strings.normalizeBy, onClick: (event) => {
        var _a;
        event.stopPropagation();
        this.closePopupPopovers.emit(this.guid);
        (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
        this.closeColorPopover();
        // lazy load attribute selection component
        if (!this.arcgisFieldPickList) {
          this.arcgisFieldPickList = document.createElement("arcgis-popup-field-pick-list");
          this.arcgisFieldPickList.popoverProps = {
            refElement: this.panelElement
          };
          this.arcgisFieldPickList.selectedFields = [
            this.chartMediaInfo.value.normalizeField
          ];
          this.arcgisFieldPickList.numbersOnly = true;
          this.arcgisFieldPickList.addEventListener("arcgisPopupPickListDismissed", this.fieldPickListChanges);
          document.body.appendChild(this.arcgisFieldPickList);
          this.panelElement.disabled = true;
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS$3.normalizeContentButtonText }, this.fieldInfoMap.has(this.chartMediaInfo.value.normalizeField)
      ? (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.b)(this.fieldInfoMap.get(this.chartMediaInfo.value.normalizeField), this.arcadeExpMap)
      : this.strings.normalizeBy), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS$3.normalizeContentButtonIcon }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "pencil" }))))));
    const doneBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", scale: "m", slot: "footer", width: "full", onClick: () => this.closePopupPopovers.emit() }, this.strings.done));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), ref: (element) => (this.chartPopover = element), placement: "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: this.refElement, offsetDistance: -Math.round(this.refElement.getBoundingClientRect().width), offsetSkidding: 50, label: "", style: {
        zIndex: "100"
      }, triggerDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (element) => (this.panelElement = element), closable: true, style: {
        width: `${this.refElement.getBoundingClientRect().width}px`
      }, onCalcitePanelClose: () => this.closePopupPopovers.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, this.strings.configureChart), doneBtn, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.popoverChartDiv }, chartGroup, this.chartFormInput("title"), this.chartFormInput("caption"), this.chartFormInput("altText"), hasFields && colorButton, hasFields && resetButton, fieldList, barChart, normalizeField)))));
  }
  renderColorIcon(index) {
    const { strings, selectedFieldIdx, colors } = this;
    if (this.chartMediaInfo.type === PopupMultiMediaType.lineChart) {
      return;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-icon", style: { backgroundColor: colors[index].toHex() }, slot: "content-start", onClick: () => this.openColorPicker(index), role: "button", tabIndex: 0, "aria-label": strings.changeColor, "aria-haspopup": "true", "aria-expanded": selectedFieldIdx === index, onKeyUp: (event) => {
        if (event.key === " " || event.key === "Enter") {
          this.openColorPicker(index);
        }
      }, ref: (node) => {
        this.colorNodes[index] = node;
      } }));
  }
  openColorPicker(index) {
    var _a;
    const { colors, strings, esriColor } = this;
    (_a = this.colorButtonNode) === null || _a === void 0 ? void 0 : _a.closePopover();
    this.closeColorPopover();
    this.selectedFieldIdx = index;
    const popover = document.createElement("arcgis-popup-color-popover");
    popover.heading = strings.selectColor;
    popover.intlDone = strings.done;
    popover.label = strings.selectColor;
    popover.hexColor = colors[index].toHex();
    popover.popoverProps = {
      placement: "leading-start",
      offsetDistance: 1,
      offsetSkidding: 52,
      pointerDisabled: "true",
      popoverWidth: 315,
      //overlayPositioning: "fixed", -- buggy, offset issue
      refElement: this.chartPopover
    };
    popover.addEventListener("arcgisPopupColorPopoverClose", () => {
      this.selectedFieldIdx = undefined;
      this.colorPopoverNode = null;
    });
    popover.addEventListener("arcgisPopupColorPopoverChange", ({ detail: hexColor }) => {
      colors[index] = new esriColor(hexColor);
      // once the user makes a change we save all colors
      this.chartMediaInfo.value.colors = this.esriLang.clone(colors);
      this.chartChangedReRender.emit();
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.colorButtonNode);
    });
    document.body.appendChild(popover);
    popover.setOpen(true);
    this.colorPopoverNode = popover;
    //popover.addEventListener("arcgisPopupColorPopoverOpen", () => {});
  }
  setColors() {
    var _a, _b, _c, _d, _e, _f;
    const { esriColor, lastColors, rendererColors } = this;
    if (this.chartMediaInfo.type === PopupMultiMediaType.lineChart) {
      if (!((_a = this.colors) === null || _a === void 0 ? void 0 : _a.length) && lastColors.lineColors) {
        this.colors = lastColors.lineColors;
        this.chartMediaInfo.value.colors = this.esriLang.clone(this.colors);
      }
      if (!((_b = this.colors) === null || _b === void 0 ? void 0 : _b.length)) {
        const defaultScheme = this.getDefaultColorScheme();
        this.colors = [defaultScheme.colors[0]];
      }
      else if (this.colors.length > 1) {
        this.colors = [this.colors[0]];
      }
    }
    else {
      if (!((_c = this.colors) === null || _c === void 0 ? void 0 : _c.length) && lastColors.rampColors) {
        this.colors = this.esriLang.clone(lastColors.rampColors);
        this.chartMediaInfo.value.colors = this.esriLang.clone(this.colors);
      }
      if (!((_d = this.colors) === null || _d === void 0 ? void 0 : _d.length) || this.colors.length !== ((_e = this.chartMediaInfo) === null || _e === void 0 ? void 0 : _e.value.fields.length)) {
        const defaultScheme = this.getDefaultColorScheme();
        this.colors = (_f = this.chartMediaInfo) === null || _f === void 0 ? void 0 : _f.value.fields.map((fieldName, idx) => {
          var _a;
          return rendererColors.get(fieldName)
            ? this.esriLang.clone(rendererColors.get(fieldName)[0])
            : ((_a = this.colors) === null || _a === void 0 ? void 0 : _a[idx]) ||
              new esriColor(defaultScheme.colors[idx % MAX_RAMP_COLORS]) ||
              new esriColor([0, 0, 0, 1]);
        });
      }
    }
  }
  getDefaultColorScheme() {
    const schemes = this.pieChartSchemes.getSchemes({
      basemap: this.mapView.map.basemap,
      geometryType: "polygon",
      numColors: Math.min(MAX_RAMP_COLORS, this.chartMediaInfo.value.fields.length)
    });
    return ([schemes.primaryScheme]
      .concat(schemes.secondarySchemes)
      .find((scheme) => scheme.name === "Olympic Sunset") ||
      schemes.primaryScheme);
  }
  closeColorPopover() {
    if (this.colorPopoverNode) {
      document.body.removeChild(this.colorPopoverNode);
      this.colorPopoverNode = null;
    }
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupChart.style = arcgisPopupChartCss;

const ArcgisPopupExpressions = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcadeChangeNotification = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcadeChangeNotification", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.valueList = [];
    this.filterLength = 5;
    // rendor methods
    this.calciteValueList = (arcadeField) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { label: arcadeField.title, description: `{${_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression}${arcadeField.name}}`, value: arcadeField.name, metadata: {
        title: arcadeField.title,
        name: `{${_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression}${arcadeField.name}}`
      }, onClick: (event) => this.launchArcade(event, arcadeField) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", appearance: "transparent", text: this.strings.remove, onClick: (event) => this.removeBtnClick(event, arcadeField.name) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" }))));
    this.reRender = undefined;
  }
  componentWillLoad() {
    this.layer = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layer;
    this.mapView = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.mapView;
    this.portal = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.portal;
    this.config = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.config;
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.currentLanguage = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.currentLanguage;
    this.serviceType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.serviceType;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    this.layerDisplayType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerDisplayType;
  }
  // lifecycle methods
  async componentDidLoad() {
    await this.loadAllModules();
  }
  componentWillRender() {
    var _a;
    this.valueList = [];
    if ((_a = this.popupTemplate.expressionInfos) === null || _a === void 0 ? void 0 : _a.length) {
      this.popupTemplate.expressionInfos.forEach((arcadeField) => {
        this.valueList.push(this.calciteValueList(arcadeField));
      });
    }
  }
  // Public Methods
  async setFocus() {
    this.expressionFlowItem.setFocus();
  }
  // private methods and properties
  async loadAllModules() {
    [this.FieldInfo, this.PopupExpressionInfo] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/popup/FieldInfo",
      "esri/popup/ExpressionInfo"
    ]);
  }
  async launchArcade(event, currentExpression) {
    event.stopPropagation();
    if (!this.arcadeEditor) {
      this.expressionFlowItem.disabled = true;
      this.arcadeEditor = document.createElement("arcgis-modal-arcade");
      this.arcadeEditor.arcadeScript = getArcadeScript(currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.expression, this.layerDisplayType, this.strings);
      this.arcadeEditor.arcadeProfile = await getArcadeProfile(this.layer, this.mapView, this.serviceType, this.popupTemplate, this.layerDisplayType);
      this.arcadeEditor.testData = await getTestData(this.layer, this.mapView, this.layerDisplayType, this.popupTemplate);
      this.arcadeEditor.addExistingExpressions = true;
      this.arcadeEditor.layer = this.layer;
      this.arcadeEditor.arcadeTitle = (currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.title) || this.strings.arcadeDefaultTitle;
      this.arcadeEditor.arcadeTitleEditable = true;
      this.arcadeEditor.arcadeTitleEditingEnabled = !(currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.title);
      document.body.appendChild(this.arcadeEditor);
      this.arcadeEditor.addEventListener("arcgisModalArcadeClose", (event) => {
        this.arcadeSetup(event.detail, currentExpression);
        setTimeout(() => this.fabButtonNode.setFocus(), 300);
      });
    }
  }
  async arcadeSetup(arcadeObject, currentExpression) {
    if (arcadeObject) {
      setExpressionInfoInPopupTemplate(arcadeObject, currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.name, this.PopupExpressionInfo, this.popupTemplate);
      await this.popupExpressionSetup();
    }
    this.expressionFlowItem.disabled = false;
    document.body.removeChild(this.arcadeEditor);
    this.arcadeEditor = null;
  }
  // update master field info and emit for attributes re-render, self re-render and update popup
  async popupExpressionSetup() {
    await setLayerExpressionAndFieldInfo(this.popupTemplate, this.layerDisplayType, this.layer, this.FieldInfo);
    this.arcadeChangeNotification.emit();
    this.internalPopupUpdated.emit();
    this.reRender = !this.reRender;
  }
  removeBtnClick(event, fieldName) {
    event.stopPropagation();
    this.popupTemplate.expressionInfos.find((exp, index) => {
      if (exp.name === fieldName) {
        return this.popupTemplate.expressionInfos.splice(index, 1);
      }
    });
    this.popupExpressionSetup();
  }
  render() {
    var _a;
    const addExpressionBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { slot: "fab", class: "fab", icon: "plus", scale: "s", appearance: "outline-fill", kind: "neutral", label: this.strings.addExpression, text: this.strings.addExpression, "text-enabled": true, onClick: (event) => this.launchArcade(event), ref: (node) => (this.fabButtonNode = node) }));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), heading: this.strings.manageExpressions, ref: (node) => (this.expressionFlowItem = node) }, ((_a = this.popupTemplate.expressionInfos) === null || _a === void 0 ? void 0 : _a.length) > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { filterEnabled: this.valueList.length >= this.filterLength ? true : false }, this.valueList)), addExpressionBtn)));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisPopupFieldPickListCss = ".popover{z-index:100}.panel{min-height:300px}.content{max-height:calc(60vh - 142px);}.selection-button-div{padding:4px 10px}.footer{width:100%}.expression-actions{display:flex}.add-expression-button{margin:4px 0 8px}";

const ArcgisPopupFieldPickList = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisPopupPickListDismissed = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupPickListDismissed", 7);
    this.arcgisPopupPickListChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupPickListChange", 7);
    this.arcadeChangeNotification = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcadeChangeNotification", 7);
    this.arcadeExpMap = new Map();
    this.calciteFieldOnlyValueList = (field) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: field.name, label: field.alias || field.name, value: field.name, description: `{${field.name}}`, selected: (!this.multiple && field.name === this.selectedFields[0]) ||
        (this.multiple && this.selectedFields.indexOf(field.name) > -1), metadata: {
        label: field.alias,
        fieldName: field.name
      } }, this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature &&
      !field.name.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.relationship) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: this.strings.info, title: this.strings.info, scale: "s", icon: "information", onClick: (event) => {
        var _a;
        event.stopPropagation();
        const action = event.target;
        const fieldInfoFlowItem = document.createElement("calcite-flow-item");
        fieldInfoFlowItem.heading = (_a = field.alias) !== null && _a !== void 0 ? _a : field.name;
        fieldInfoFlowItem.description = field.name;
        const fieldInfo = document.createElement("arcgis-field-info");
        fieldInfo.lang = this.currentLanguageIntl;
        fieldInfo.fieldName = field.name;
        fieldInfo.layer = this.layer;
        fieldInfo.view = this.mapView;
        fieldInfo.classList.add("content");
        fieldInfoFlowItem.addEventListener("calciteFlowItemBack", () => requestAnimationFrame(() => action.setFocus()));
        fieldInfoFlowItem.appendChild(fieldInfo);
        this.flowElement.appendChild(fieldInfoFlowItem);
        setTimeout(() => fieldInfoFlowItem.setFocus(), 200);
      } }))));
    this.calciteExpressionsOnlyValueList = (field) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: field.name, label: field.alias || field.name, value: field.name, description: `{${field.name}}`, selected: (!this.multiple && field.name === this.selectedFields[0]) ||
        (this.multiple && this.selectedFields.indexOf(field.name) > -1), metadata: {
        label: field.alias,
        fieldName: field.name
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "expression-actions", slot: "actions-end" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.edit, title: this.strings.edit, scale: "s", icon: this.numbersOnly && field.type.toLowerCase() !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.number
        ? "exclamation-mark-triangle"
        : "pencil", onClick: () => {
        if (this.arcadeExpMap.has(field.name)) {
          this.launchArcade(this.arcadeExpMap.get(field.name));
        }
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.remove, title: this.strings.remove, scale: "s", icon: "trash", onClick: async () => {
        this.popupTemplate.expressionInfos.find((exp, index) => {
          if (field.name.includes(`/${exp.name}`)) {
            return this.popupTemplate.expressionInfos.splice(index, 1);
          }
        });
        await setLayerExpressionAndFieldInfo(this.popupTemplate, this.layerDisplayType, this.layer, this.FieldInfo);
        this.fields = this.fields.filter((currField) => {
          return currField.name !== field.name;
        });
        this.selectedFields = [...this.selectedFields].filter((fieldName) => {
          return fieldName !== field.name;
        });
        this.multiple &&
          this.arcgisPopupPickListChange.emit({
            selectedFields: [...new Set(this.selectedFields)]
          });
        this.arcadeChangeNotification.emit();
      } }))));
    this.selectedFields = [];
    this.popoverProps = undefined;
    this.showCancel = true;
    this.multiple = false;
    this.heading = undefined;
    this.okBtnText = undefined;
    this.showFilterLength = 5;
    this.numbersOnly = false;
    this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.default;
    this.filterFields = null;
    this.arcadeEditor = undefined;
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  async componentWillLoad() {
    this.layer = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layer;
    this.mapView = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.mapView;
    this.portal = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.portal;
    this.config = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.config;
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.currentLanguage = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.currentLanguage;
    this.currentLanguageIntl = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.currentLanguageIntl;
    this.serviceType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.serviceType;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    this.layerDisplayType = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerDisplayType;
    this.supportsArcade = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.supportsArcade;
    this.layerFieldsMap = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.d)(this.layer);
    this.arcadeExpMap = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.e)(this.popupTemplate);
    this.fields = await this.getFields();
    // in case more than 1 selected field and multiple is set to false
    if (!this.multiple && this.selectedFields.length > 1) {
      this.selectedFields = [this.selectedFields[0]];
    }
  }
  async componentDidLoad() {
    await this.loadAllModules();
    this.popoverNode.open = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.flowItemElement.setFocus()), 200);
  }
  componentWillRender() {
    this.arcadeExpMap = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.e)(this.popupTemplate);
    this.fieldsOnly = [...this.getSortedList()].filter((field) => {
      return !field.name.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression);
    });
    this.expressionsOnly = [...this.getSortedList()].filter((field) => {
      return field.name.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression);
    });
  }
  // Public Methods
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  // temp: https://github.com/Esri/calcite-components/issues/4333
  calciteFilterChangeHandler(event) {
    var _a, _b;
    event.stopPropagation();
    const filterNode = (_a = event === null || event === void 0 ? void 0 : event.path) === null || _a === void 0 ? void 0 : _a.find((item) => item.nodeName === "CALCITE-FILTER");
    this.filterFields = (_b = filterNode === null || filterNode === void 0 ? void 0 : filterNode.filteredItems) === null || _b === void 0 ? void 0 : _b.map((item) => {
      return item.value;
    });
  }
  // --------------------------------------------------------------------------
  //
  // Private Methods
  //
  // --------------------------------------------------------------------------
  getSortedList() {
    const tempSorted = [...this.fields];
    if (this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.display) {
      tempSorted.sort((a, b) => a.alias.localeCompare(b.alias));
    }
    else if (this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.field) {
      tempSorted.sort((a, b) => a.name.localeCompare(b.name));
    }
    else if (this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.type) {
      tempSorted.sort((a, b) => a.type.localeCompare(b.type));
    }
    return tempSorted;
  }
  // return true for deselect all, false for select all
  selectDeselect() {
    var _a;
    return ((_a = this.filterFields) === null || _a === void 0 ? void 0 : _a.length)
      ? this.filterContainsAll()
      : this.selectedFields.length === this.fields.length;
  }
  // check if filter has all current field info
  filterContainsAll() {
    return this.filterFields.every((filter) => {
      return this.selectedFields.some((curr) => {
        return curr === filter;
      });
    });
  }
  async loadAllModules() {
    [this.PopupExpressionInfo, this.FieldInfo] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/popup/ExpressionInfo",
      "esri/popup/FieldInfo"
    ]);
  }
  async launchArcade(currentExpression) {
    if (!this.arcadeEditor) {
      this.flowItemElement.disabled = true;
      this.arcadeEditor = document.createElement("arcgis-modal-arcade");
      this.arcadeEditor.arcadeScript = getArcadeScript(currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.expression, this.layerDisplayType, this.strings);
      this.arcadeEditor.arcadeProfile = await getArcadeProfile(this.layer, this.mapView, this.serviceType, this.popupTemplate, this.layerDisplayType);
      this.arcadeEditor.testData = await getTestData(this.layer, this.mapView, this.layerDisplayType, this.popupTemplate);
      this.arcadeEditor.addExistingExpressions = true;
      this.arcadeEditor.layer = this.layer;
      this.arcadeEditor.arcadeTitle = (currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.title) || this.strings.arcadeDefaultTitle;
      this.arcadeEditor.arcadeTitleEditable = true;
      this.arcadeEditor.arcadeTitleEditingEnabled = !(currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.title);
      document.body.appendChild(this.arcadeEditor);
      this.arcadeEditor.addEventListener("arcgisModalArcadeClose", (event) => this.arcadeSetup(event.detail, currentExpression));
    }
  }
  async arcadeSetup(arcadeObject, currentExpression) {
    if (arcadeObject) {
      const popupExpression = setExpressionInfoInPopupTemplate(arcadeObject, currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.name, this.PopupExpressionInfo, this.popupTemplate);
      await setLayerExpressionAndFieldInfo(this.popupTemplate, this.layerDisplayType, this.layer, this.FieldInfo);
      const expName = `${_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression}${popupExpression.name}`;
      this.fields.push({
        name: expName,
        alias: popupExpression.title,
        type: popupExpression.returnType
      });
      // remove duplicates
      this.fields = [
        ...new Map(this.fields.map((item) => [item.name, item])).values()
      ];
      if (this.multiple) {
        this.selectedFields.push(expName);
      }
      else {
        this.selectedFields = [expName];
      }
      this.arcgisPopupPickListChange.emit({ selectedFields: [...new Set(this.selectedFields)] });
      this.arcadeChangeNotification.emit();
    }
    this.flowItemElement.disabled = false;
    document.body.removeChild(this.arcadeEditor);
    this.arcadeEditor = null;
  }
  async getFields() {
    const tempFieldAndFieldInfo = [];
    let fieldsOrderInService = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.j)(this.layer);
    fieldsOrderInService = fieldsOrderInService.filter((field) => field.visible);
    // map fieldInfos for faster access
    const fieldInfoMap = new Map(this.popupTemplate.fieldInfos.map((fieldInfo) => [
      fieldInfo.fieldName,
      fieldInfo
    ]));
    // order based on order of fields in the service
    fieldsOrderInService.forEach((layerField) => {
      if (fieldInfoMap.has(layerField.name)) {
        const fieldInfo = fieldInfoMap.get(layerField.name);
        tempFieldAndFieldInfo.push({
          name: fieldInfo.fieldName,
          alias: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.b)(fieldInfo, this.arcadeExpMap),
          type: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.a)(fieldInfo.fieldName, this.layerFieldsMap, this.arcadeExpMap)
        });
        // delete from map
        fieldInfoMap.delete(layerField.name);
      }
    });
    // add remaining fields in popuptemplate. e.g. arcade, related
    fieldInfoMap.forEach((fieldInfo) => {
      tempFieldAndFieldInfo.push({
        name: fieldInfo.fieldName,
        alias: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.b)(fieldInfo, this.arcadeExpMap),
        type: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.a)(fieldInfo.fieldName, this.layerFieldsMap, this.arcadeExpMap)
      });
    });
    if (this.numbersOnly) {
      // set for faster lookup
      const selectedFieldsSet = new Set(this.selectedFields);
      return tempFieldAndFieldInfo.filter((currFieldAndFieldInfo) => {
        const fieldType = currFieldAndFieldInfo.type.toLowerCase();
        if ((selectedFieldsSet.has(currFieldAndFieldInfo.name) ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.number ||
          fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.oid) &&
          !currFieldAndFieldInfo.name.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.relationship)) {
          return currFieldAndFieldInfo;
        }
      });
    }
    return tempFieldAndFieldInfo;
  }
  // --------------------------------------------------------------------------
  //
  // Rendor  Methods
  //
  // --------------------------------------------------------------------------
  render() {
    const addBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: this.showCancel ? "solid" : "outline-fill", width: this.showCancel ? "half" : "full", scale: "m", onClick: () => {
        this.arcgisPopupPickListDismissed.emit({
          selectedFields: [...new Set(this.selectedFields)]
        });
      } }, this.okBtnText || (this.multiple ? this.strings.done : this.strings.ok)));
    const cancelBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", width: this.multiple ? "half" : "full", scale: "m", onClick: () => this.arcgisPopupPickListDismissed.emit() }, this.strings.cancel));
    const sort = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { slot: "menu-actions", placement: "bottom-end", overlayPositioning: "fixed" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", text: this.strings.sort, title: this.strings.sort }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.default, onClick: () => (this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.default) }, this.strings.default), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.display, onClick: () => (this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.display) }, this.strings.displayName), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.type, onClick: () => (this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.type) }, this.strings.type), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.field, onClick: () => (this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.field) }, this.strings.fieldName))));
    const selectionBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "selection-button-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", scale: "m", width: "full", class: "selection-button", onClick: () => {
        var _a, _b;
        if (this.selectDeselect()) {
          //deselect all
          this.selectedFields = ((_a = this.filterFields) === null || _a === void 0 ? void 0 : _a.length)
            ? this.selectedFields.filter((item) => !this.filterFields.includes(item))
            : [];
        }
        else {
          //select all
          this.selectedFields = ((_b = this.filterFields) === null || _b === void 0 ? void 0 : _b.length)
            ? [...new Set([...this.selectedFields, ...this.filterFields])]
            : this.fields.map((field) => {
              return field.name;
            });
        }
      } }, this.selectDeselect() ? this.strings.deselectAll : this.strings.selectAll)));
    const addExpressionsBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", scale: "m", width: "full", iconStart: "plus", class: "add-expression-button", onClick: () => {
        this.launchArcade();
      } }, this.strings.addExpression));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), class: "popover", placement: this.popoverProps.placement || "leading-start", open: false, pointerDisabled: true, referenceElement: this.popoverProps.refElement, offsetDistance: this.popoverProps.offsetDistance ||
        -Math.round(this.popoverProps.refElement.getBoundingClientRect().width), offsetSkidding: this.popoverProps.offsetSkidding || 50, label: this.heading, triggerDisabled: true, ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (node) => {
        this.flowElement = node;
      }, style: {
        width: `${this.popoverProps.popoverWidth ||
          this.popoverProps.refElement.getBoundingClientRect().width}px`
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.flowItemElement = el), class: "panel", heading: this.heading, closable: true, onCalciteFlowItemClose: () => this.arcgisPopupPickListDismissed.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "footer", slot: "footer" }, this.supportsArcade && addExpressionsBtn, this.multiple && addBtn, this.showCancel && cancelBtn), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { class: "content", multiple: this.multiple, ref: (node) => {
        this.pickListNode = node;
      }, filterEnabled: this.fields.length >= this.showFilterLength ? true : false, filterPlaceholder: this.strings.searchFields, onCalciteListChange: async () => {
        // keep original order. Add addional values at the end
        const tempSelectedFields = await this.pickListNode.getSelectedItems();
        this.selectedFields = [
          ...new Set([
            ...this.selectedFields.filter((item) => {
              return tempSelectedFields.has(item);
            }),
            ...tempSelectedFields.keys()
          ])
        ];
        this.arcgisPopupPickListChange.emit({
          selectedFields: this.selectedFields
        });
        if (!this.multiple) {
          this.arcgisPopupPickListDismissed.emit({ selectedFields: this.selectedFields });
        }
      } }, this.fields.length >= this.showFilterLength && sort, this.multiple && selectionBtn, this.supportsArcade && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-group", { "group-title": this.strings.expressions }, this.expressionsOnly.length ? (this.expressionsOnly.map((field) => {
      return this.calciteExpressionsOnlyValueList(field);
    })) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "center" }, this.strings.noExpressions)))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-group", { groupTitle: this.supportsArcade ? this.strings.attributes : null }, this.fieldsOnly.map((field) => {
      return this.calciteFieldOnlyValueList(field);
    }))))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupFieldPickList.style = arcgisPopupFieldPickListCss;

const CSS$2 = {
  popoverImageDiv: "popover-image-div",
  formInputButton: "form-input-button",
  refreshImageInput: "refresh-image-input"
};

const arcgisPopupImageCss = ".popover-image-div{background-color:var(--arcgis-app-background);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing-half);max-height:calc(60vh - 102px);}.refresh-label{margin-top:6px}.form-input-button{display:flex}.form-input-button calcite-input[type=text]{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.form-input-button calcite-action{margin:0;flex:0 0 0%;justify-self:flex-end}.refresh-image-input{width:5rem}";

const ArcgisPopupImage = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.imageChangedReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "imageChangedReRender", 7);
    this.notifyMultiMediaChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "notifyMultiMediaChange", 7);
    this.changeImageProperties = (event) => {
      event === null || event === void 0 ? void 0 : event.stopPropagation();
      event === null || event === void 0 ? void 0 : event.preventDefault();
      // hide rest of the component.
      this.imageMediaInfo.value.sourceURL = this.editImageUrl.value;
      this.imageMediaInfo.title = this.editImageTitle.value;
      this.imageMediaInfo.refreshInterval = this.editRefreshImage.value || 0;
      this.imageMediaInfo.caption = this.editImageCaption.value;
      this.imageMediaInfo.altText = this.editAltText.value;
      this.imageMediaInfo.value.linkURL = this.editImageLinkUrl.value;
      this.imageChangedReRender.emit();
    };
    // open popover
    this.openAttributesList = (imageComponentInputType) => {
      // close first since we can have multiple attributes open
      this.closePopupPopovers.emit(this.guid);
      // lazy load attribute selection component
      if (!this.popupFieldSelectionPickList) {
        this.popupFieldSelectionPickList = document.createElement("arcgis-popup-field-pick-list");
        this.popupFieldSelectionPickList.popoverProps = {
          refElement: this.panelElement
        };
        this.popupFieldSelectionPickList.multiple = false;
        this.popupFieldSelectionPickList.heading = this.strings.addField;
        this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListDismissed", () => {
          this.closePopupPopovers.emit(this.guid);
        });
        this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListChange", (event) => this.popupFieldSelectionPickListChanges(event, imageComponentInputType));
        document.body.appendChild(this.popupFieldSelectionPickList);
        this.panelElement.disabled = true;
      }
    };
    this.imageFormInput = (imageInputType) => {
      var _a;
      const imageInputObject = this.getImageInputObject(imageInputType);
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, imageInputObject.inputLabel, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: imageInputObject.popoverId, class: CSS$2.formInputButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", autofocus: true, ref: imageInputObject.referenceElement, value: imageInputObject.inputValue, placeholder: imageInputObject.placeHolder, onClick: () => this.closePopupPopovers.emit(this.guid) }), ((_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.attributes, "text-display": "hidden", onClick: () => this.openAttributesList(imageInputObject.imageInput), scale: "s", icon: "brackets-curly" })))));
    };
    this.getImageInputObject = (imageInputType) => {
      class ImageInputClass {
      }
      const imageInputObject = new ImageInputClass();
      imageInputObject.imageInput = imageInputType;
      imageInputObject.popoverId = `popoverId_${imageInputObject.imageInput}`;
      if (imageInputType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.sourceUrl) {
        imageInputObject.inputLabel = this.strings.url;
        imageInputObject.referenceElement = (element) => {
          element.addEventListener("calciteInputChange", this.changeImageProperties);
          this.editImageUrl = element;
        };
        imageInputObject.inputValue = this.imageMediaInfo.value.sourceURL;
        imageInputObject.placeHolder = this.strings.imageUrlPlaceHolder;
      }
      else if (imageInputType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.title) {
        imageInputObject.inputLabel = this.strings.title;
        imageInputObject.referenceElement = (element) => {
          element.addEventListener("calciteInputChange", this.changeImageProperties);
          this.editImageTitle = element;
        };
        imageInputObject.inputValue = this.imageMediaInfo.title;
        imageInputObject.placeHolder = this.strings.imageTitlePlaceHolder;
      }
      else if (imageInputType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.caption) {
        imageInputObject.inputLabel = this.strings.caption;
        imageInputObject.referenceElement = (element) => {
          element.addEventListener("calciteInputChange", this.changeImageProperties);
          this.editImageCaption = element;
        };
        imageInputObject.inputValue = this.imageMediaInfo.caption;
        imageInputObject.placeHolder = this.strings.imageCaptionPlaceHolder;
      }
      else if (imageInputType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.altText) {
        imageInputObject.inputLabel = this.strings.description;
        imageInputObject.referenceElement = (element) => {
          element.addEventListener("calciteInputChange", this.changeImageProperties);
          this.editAltText = element;
        };
        imageInputObject.inputValue = this.imageMediaInfo.altText;
        imageInputObject.placeHolder = this.strings.describeImage;
      }
      else if (imageInputType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.linkUrl) {
        imageInputObject.inputLabel = this.strings.link;
        imageInputObject.referenceElement = (element) => {
          element.addEventListener("calciteInputChange", this.changeImageProperties);
          this.editImageLinkUrl = element;
        };
        imageInputObject.inputValue = this.imageMediaInfo.value.linkURL;
        imageInputObject.placeHolder = this.strings.imageLinkUrlPlaceHolder;
      }
      return imageInputObject;
    };
    this.guid = undefined;
    this.imageMediaInfo = undefined;
    this.refElement = undefined;
    this.mediaIndexPosition = undefined;
    this.isOpen = false;
    this.reRender = undefined;
  }
  // lifecycle methods
  componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    this.imageMediaInfo.title = this.imageMediaInfo.title || "";
    this.imageMediaInfo.altText = this.imageMediaInfo.altText || "";
    this.imageMediaInfo.caption = this.imageMediaInfo.caption || "";
    this.imageMediaInfo.value.sourceURL = this.imageMediaInfo.value.sourceURL || "";
    this.imageMediaInfo.value.linkURL = this.imageMediaInfo.value.linkURL || "";
  }
  componentDidLoad() {
    this.editImageUrl.value = this.imageMediaInfo.value.sourceURL;
    this.editImageTitle.value = this.imageMediaInfo.title;
    this.editRefreshImage.value = this.imageMediaInfo.refreshInterval || 0;
    this.editImageCaption.value = this.imageMediaInfo.caption;
    this.editImageLinkUrl.value = this.imageMediaInfo.value.linkURL;
    this.editAltText.value = this.imageMediaInfo.altText;
    this.isOpen = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 300);
  }
  componentDidUpdate() {
    this.notifyMultiMediaChange.emit({
      guid: this.guid,
      mediaIndexPosition: this.mediaIndexPosition
    });
  }
  disconnectedCallback() {
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
    }
  }
  // Public Methods
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  // Events
  imageChangedReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = this.reRender ? false : true;
  }
  calciteBlockToggleHandler() {
    this.closePopupPopovers.emit();
  }
  closePopupPopoversHandler() {
    this.removeAttributesSelectionPopover();
  }
  closeMultiMediaPopoverHandler() {
    this.removeAttributesSelectionPopover();
  }
  calciteBlockSectionToggleHandler(event) {
    const composedPath = event.composedPath();
    if ((composedPath === null || composedPath === void 0 ? void 0 : composedPath[0].id) === "refreshImageBlockSection_id") {
      this.editRefreshImage.value = 0;
      this.changeImageProperties(event);
      this.hostElement.shadowRoot.getElementById("managePopover_Id")["reposition"]();
    }
    event.stopPropagation();
  }
  // private methods and properties
  removeAttributesSelectionPopover() {
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
      this.popupFieldSelectionPickList = null;
    }
    this.panelElement.disabled = false;
  }
  // field selection for title and caption
  popupFieldSelectionPickListChanges(event, currImageComponentInputTypes) {
    const selectedFieldName = event.detail.selectedFields[0];
    if (currImageComponentInputTypes === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.sourceUrl) {
      this.editImageUrl.value = addSelectedFieldAtCursor(this.editImageUrl, selectedFieldName);
      this.editImageUrl.setFocus();
    }
    else if (currImageComponentInputTypes === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.title) {
      this.editImageTitle.value = addSelectedFieldAtCursor(this.editImageTitle, selectedFieldName);
      this.editImageTitle.setFocus();
    }
    else if (currImageComponentInputTypes === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.caption) {
      this.editImageCaption.value = addSelectedFieldAtCursor(this.editImageCaption, selectedFieldName);
      this.editImageCaption.setFocus();
    }
    else if (currImageComponentInputTypes === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.linkUrl) {
      this.editImageLinkUrl.value = addSelectedFieldAtCursor(this.editImageLinkUrl, selectedFieldName);
      this.editImageLinkUrl.setFocus();
    }
    else if (currImageComponentInputTypes === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.altText) {
      this.editAltText.value = addSelectedFieldAtCursor(this.editAltText, selectedFieldName);
      this.editAltText.setFocus();
    }
    this.closePopupPopovers.emit(this.guid);
    this.changeImageProperties();
  }
  render() {
    const refreshImageInput = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { id: "refreshImageBlockSection_id", text: this.strings.refreshInterval, toggleDisplay: "switch", open: this.imageMediaInfo.refreshInterval ? true : false }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "refresh-label" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", layout: "inline" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: CSS$2.refreshImageInput, type: "number", min: 0, max: 1440, ref: (element) => {
        element.addEventListener("calciteInputChange", this.changeImageProperties);
        this.editRefreshImage = element;
      }, value: this.imageMediaInfo.refreshInterval
        ? this.imageMediaInfo.refreshInterval.toString()
        : "0", onClick: () => this.closePopupPopovers.emit(this.guid), onCalciteInputInput: () => {
        if (this.editRefreshImage.value) {
          const value = parseInt(this.editRefreshImage.value);
          if (value < 0) {
            this.editRefreshImage.value = 0;
          }
          else if (value > 1440) {
            this.editRefreshImage.value = 1440;
          }
        }
      } }), this.strings.minutes))));
    const imageDiv = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable" }, this.imageFormInput(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.sourceUrl), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { open: true, text: this.strings.options }, this.imageFormInput(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.title), this.imageFormInput(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.caption), this.imageFormInput(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.altText), this.imageFormInput(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.i.linkUrl), refreshImageInput)));
    const doneBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", scale: "m", slot: "footer", width: "full", onClick: () => this.closePopupPopovers.emit() }, this.strings.done));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), id: "managePopover_Id", placement: "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: this.refElement, offsetDistance: -Math.round(this.refElement.getBoundingClientRect().width), offsetSkidding: 50, label: "", style: {
        zIndex: "100"
      }, triggerDisabled: true, ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (element) => (this.panelElement = element), closable: true, style: {
        width: `${this.refElement.getBoundingClientRect().width}px`
      }, onCalcitePanelClose: () => this.closePopupPopovers.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, this.strings.configureImage), doneBtn, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.popoverImageDiv }, imageDiv)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupImage.style = arcgisPopupImageCss;

const ArcgisPopupMainContentpopover = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.notifyAddContentSelection = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "notifyAddContentSelection", 7);
    this.notifyAddMultiMediaContentSelection = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "notifyAddMultiMediaContentSelection", 7);
    this.contentPopoverRefElement = undefined;
    this.popupHasAttachment = undefined;
    this.popoverPanelWidth = undefined;
    this.isMultimediaContent = false;
    this.guid = undefined;
    this.isOpen = false;
  }
  async reposition() {
    var _a;
    (_a = this.popoverElement) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.layerHasAttachment = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasAttachment;
    this.layerHasET = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasET;
    this.layerHasAttributes = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasAttributes;
    this.layerHasCharts = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasCharts;
    this.layerHasImages = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasImages;
    this.layerHasText = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasText;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    this.supportsArcade = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.supportsArcade;
  }
  componentDidLoad() {
    this.hostElement.shadowRoot.getElementById("managePopover_Id")["reposition"]();
    this.isOpen = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 300);
  }
  contentSelection(content) {
    if (this.isMultimediaContent) {
      this.notifyAddMultiMediaContentSelection.emit({ guid: this.guid, content: content });
    }
    else {
      this.notifyAddContentSelection.emit(content);
    }
  }
  // rendor methods
  render() {
    const attributes = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.fieldsList, text: this.strings.fieldsList, textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.attributes);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "feature-details" })));
    const attachments = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.attachments, text: this.strings.attachments, textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.attachments);
      }, disabled: this.popupHasAttachment ? true : false }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "attachment" })));
    const charts = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.chart, text: this.strings.chart, textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.charts);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "graph-bar" })));
    const images = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.image, text: this.strings.image, textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.images);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "image" })));
    const richText = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.text, text: this.strings.text, textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.richText);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "text" })));
    const arcade = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.arcade, text: this.strings.arcade, icon: "code", textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.arcade);
      } }));
    const et = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.summaryETHeading, text: this.strings.summaryETHeading, textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.summaryET);
      }, disabled: this.popupTemplate.lastEditInfoEnabled ? true : false }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "user" })));
    const relatedRecords = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: this.strings.relatedRecords, text: this.strings.relatedRecords, textEnabled: true, onClick: () => {
        this.contentSelection(ContentSelection.relationship);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "link" })));
    const panel = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.q)(this.contentPopoverRefElement, "calcite-flow-item");
    const panelTop = (panel === null || panel === void 0 ? void 0 : panel.getBoundingClientRect().top) || 56;
    const buttonTop = this.contentPopoverRefElement.getBoundingClientRect().top;
    // 54: panel header; 10: panel arrow
    const popoverMaxHeight = buttonTop - panelTop - 54 - 10;
    const contentStyle = { maxHeight: popoverMaxHeight > 0 ? `${popoverMaxHeight}px` : "60vh" };
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { ref: (el) => (this.popoverElement = el), dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), id: "managePopover_Id", placement: "bottom", open: this.isOpen, referenceElement: this.contentPopoverRefElement, label: this.isMultimediaContent ? this.strings.addMedia : this.strings.addContent, style: {
        zIndex: "100"
      }, triggerDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (el) => (this.panelElement = el), closable: true, style: {
        width: `${this.popoverPanelWidth}px`
      }, onCalcitePanelClose: () => this.closePopupPopovers.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, this.isMultimediaContent ? this.strings.addMedia : this.strings.content), this.isMultimediaContent ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: contentStyle }, this.layerHasCharts && charts, this.layerHasImages && images)) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: contentStyle }, this.layerHasAttributes && attributes, this.layerHasAttachment && attachments, this.layerHasCharts && charts, this.layerHasImages && images, this.layerHasText && richText, this.supportsArcade && arcade, this.layerHasET && et, _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layerHasRelatedRecords && relatedRecords))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const CSS$1 = {
  addMediaButton: "add-media-button",
  formInputButton: "form-input-button",
  disableSpacing: "disable-spacing"
};

const arcgisPopupMultimediaCss = ".add-media-button{display:flex;justify-content:center;padding:var(--arcgis-app-cap-spacing-half) 0 0 0}.form-input-button{display:flex}.form-input-button calcite-input[type=text]{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.form-input-button calcite-action{margin:0;flex:0 0 0%;justify-self:flex-end}.disable-spacing{--calcite-label-margin-bottom:0}";

const ArcgisPopupMultimedia = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.closeMultiMediaPopover = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeMultiMediaPopover", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.deleteComponent = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "deleteComponent", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    this.pickList = [];
    // to keep track of drag and drop
    this.mediaMap = new Map();
    this.calciteValueListItem = (mediaInfo, listItemGuid) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { id: listItemGuid, label: (mediaInfo.title &&
        `${mediaInfo.title.substring(0, 25)}${mediaInfo.title.length > 25 ? "..." : ""}`) ||
        this.strings.noTitle, description: this.getMultiMediaText(mediaInfo.type), value: listItemGuid, onClick: (event) => {
        event.stopPropagation();
        this.closePopupPopovers.emit();
        this.openMediaPopover(mediaInfo, this.findChartIndexPosition(listItemGuid));
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", appearance: "transparent", text: this.strings.remove, onClick: (event) => {
        event.stopPropagation();
        this.closePopupPopovers.emit();
        // each list-item has id. Find id, and splice by index
        const allListItems = this.hostElement.shadowRoot
          .getElementById("valueList_Id")
          .getElementsByTagName("calcite-value-list-item");
        for (let x = 0; x < allListItems.length; x++) {
          if (allListItems[x].id === listItemGuid) {
            this.multimediaContent.mediaInfos.splice(x, 1);
            // delete component if empty, else re-render
            if (this.multimediaContent.mediaInfos.length === 0) {
              this.deleteComponent.emit(this.guid);
            }
            else {
              // reset to 0 on delete
              this.setActiveMediaInfoIndex(0);
              this.reRender = this.reRender ? false : true;
            }
            break;
          }
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" }))));
    this.formInput = (formType, formString, formInputElement, formValue, formPlaceholder
    // promptMessage: string
    ) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, formString, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.formInputButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", autofocus: true, ref: formInputElement, value: formValue, placeholder: formPlaceholder, onCalciteInputInput: (event) => {
          event.stopPropagation();
          const inputVal = event.target.value;
          if (formType === "title") {
            this.multimediaContent.title = inputVal;
          }
          else {
            this.multimediaContent.description = inputVal;
          }
          this.reRender = !this.reRender;
        }, onClick: () => this.closePopupPopovers.emit() }), ((_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.attributes, onClick: () => {
          this.closePopupPopovers.emit();
          if (!this.popupFieldSelectionPickList) {
            this.popupFieldSelectionPickList = document.createElement("arcgis-popup-field-pick-list");
            this.popupFieldSelectionPickList.popoverProps = {
              refElement: this.popupFlowItem
            };
            this.popupFieldSelectionPickList.multiple = false;
            this.popupFieldSelectionPickList.heading = this.strings.addField;
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListDismissed", () => {
              this.closePopupPopovers.emit();
            });
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListChange", (event) => this.popupFieldSelectionPickListChanges(event, formType));
            document.body.appendChild(this.popupFieldSelectionPickList);
            this.disablePopupPanel.emit(true);
          }
        }, scale: "s", icon: "brackets-curly" })))));
    };
    this.guid = undefined;
    this.multimediaContent = undefined;
    this.blockOpen = false;
    this.popupFlowItem = undefined;
    this.reRender = undefined;
  }
  // lifecycle methods
  async componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.mapView = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.mapView;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    // watch if popup changes to reset the index
    const [reactiveUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)(["esri/core/reactiveUtils"]);
    reactiveUtils.watch(() => { var _a; return (_a = this.mapView.popup) === null || _a === void 0 ? void 0 : _a.selectedFeature; }, () => this.setActiveMediaInfoIndex(0));
    reactiveUtils.watch(() => { var _a; return (_a = this.mapView.popup) === null || _a === void 0 ? void 0 : _a.visible; }, () => this.setActiveMediaInfoIndex(0));
    if (!this.multimediaContent.title) {
      this.multimediaContent.title = "";
    }
    if (!this.multimediaContent.description) {
      this.multimediaContent.description = "";
    }
  }
  componentDidLoad() {
    if (this.blockOpen) {
      this.addMediaBtn.scrollIntoView({ behavior: "auto", block: "nearest", inline: "start" });
      if (this.multimediaContent.mediaInfos.length === 1) {
        this.openMediaPopover(this.multimediaContent.mediaInfos[0], 0);
      }
      else {
        this.blockOptions.setFocus();
      }
    }
  }
  componentWillRender() {
    this.pickList = [];
    this.mediaMap.clear();
    this.multimediaContent.mediaInfos.forEach((mediaInfo) => {
      const listItemGuid = (0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_5__.g)();
      this.mediaMap.set(listItemGuid, mediaInfo);
      this.pickList.push(this.calciteValueListItem(mediaInfo, listItemGuid));
    });
  }
  componentDidUpdate() {
    this.internalPopupUpdated.emit();
  }
  disconnectedCallback() {
    if (this.imagePopover) {
      document.body.removeChild(this.imagePopover);
    }
    if (this.chartPopover) {
      document.body.removeChild(this.chartPopover);
    }
    if (this.multimediaContentPopover) {
      document.body.removeChild(this.multimediaContentPopover);
    }
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
    }
  }
  // events
  calciteBlockToggleHandler() {
    this.closePopupPopovers.emit();
  }
  // drag and drop to re-order
  calciteListOrderChangeHandler() {
    let tempMediaInfos = [];
    const allListItems = this.hostElement.shadowRoot
      .getElementById("valueList_Id")
      .getElementsByTagName("calcite-value-list-item");
    const eventValueGuids = Array.from(allListItems).map((item) => item.id);
    eventValueGuids.forEach((eventValueGuid) => {
      if (this.mediaMap.has(eventValueGuid)) {
        tempMediaInfos.push(this.mediaMap.get(eventValueGuid));
      }
    });
    if (tempMediaInfos.length > 0) {
      this.multimediaContent.mediaInfos = tempMediaInfos;
    }
    // reset to 0 on drag and drop
    this.setActiveMediaInfoIndex(0, true);
    // dont need to re-render since only updating media infos.
    // calcite pick list takes care of rendering correctly.
    this.closePopupPopovers.emit();
  }
  resetMultiMediaIndexHandler() {
    this.setActiveMediaInfoIndex(0, true);
  }
  closePopupPopoversHandler(event) {
    if ((event === null || event === void 0 ? void 0 : event.detail) !== this.guid && this.imagePopover) {
      this.closeMultiMediaPopover.emit();
      document.body.removeChild(this.imagePopover);
      this.imagePopover = null;
      this.addMediaBtn.setFocus();
      this.disablePopupPanel.emit(false);
    }
    if ((event === null || event === void 0 ? void 0 : event.detail) !== this.guid && this.chartPopover) {
      this.closeMultiMediaPopover.emit();
      document.body.removeChild(this.chartPopover);
      this.chartPopover = null;
      this.addMediaBtn.setFocus();
      this.disablePopupPanel.emit(false);
    }
    if (this.multimediaContentPopover) {
      document.body.removeChild(this.multimediaContentPopover);
      this.multimediaContentPopover = null;
      this.addMediaBtn.disabled = false;
      requestAnimationFrame(() => this.addMediaBtn.setFocus());
      this.disablePopupPanel.emit(false);
    }
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
      this.popupFieldSelectionPickList = null;
      this.disablePopupPanel.emit(false);
    }
  }
  notifyMultiMediaChangeHandler(event) {
    var _a, _b;
    if (((_a = event.detail) === null || _a === void 0 ? void 0 : _a.guid) === this.guid) {
      this.setActiveMediaInfoIndex((_b = event.detail) === null || _b === void 0 ? void 0 : _b.mediaIndexPosition);
      this.reRender = this.reRender ? false : true;
    }
  }
  async notifyAddMultiMediaContentSelectionHandler(event) {
    event.stopPropagation();
    this.closePopupPopovers.emit();
    if (event.detail.guid === this.guid) {
      const contentType = event.detail.content;
      const [ImageMediaInfo, ColumnChartMediaInfo, ImageMediaInfoValue, ChartMediaInfoValue] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
        "esri/popup/content/ImageMediaInfo",
        "esri/popup/content/ColumnChartMediaInfo",
        "esri/popup/content/support/ImageMediaInfoValue",
        "esri/popup/content/support/ChartMediaInfoValue"
      ]);
      let multiMediaElement;
      if (contentType === ContentSelection.images) {
        multiMediaElement = new ImageMediaInfo({
          title: "",
          caption: "",
          altText: "",
          value: new ImageMediaInfoValue({
            sourceURL: "",
            linkURL: ""
          })
        });
      }
      else if (contentType === ContentSelection.charts) {
        multiMediaElement = new ColumnChartMediaInfo({
          title: "",
          caption: "",
          altText: "",
          value: new ChartMediaInfoValue({
            fields: []
          })
        });
      }
      this.multimediaContent.mediaInfos.push(multiMediaElement);
      this.reRender = !this.reRender;
      this.openMediaPopover(multiMediaElement, this.multimediaContent.mediaInfos.length - 1);
    }
  }
  // private methods
  setActiveMediaInfoIndex(index, updatePopup) {
    this.multimediaContent.activeMediaInfoIndex = index || 0;
    updatePopup && this.internalPopupUpdated.emit();
  }
  findChartIndexPosition(listItemGuid) {
    const allListItems = this.hostElement.shadowRoot
      .getElementById("valueList_Id")
      .getElementsByTagName("calcite-value-list-item");
    for (let x = 0; x < allListItems.length; x++) {
      if (allListItems[x].id === listItemGuid) {
        return x;
      }
    }
  }
  getMultiMediaText(type) {
    if (type === PopupMultiMediaType.image) {
      return this.strings.image;
    }
    else if (type === PopupMultiMediaType.barChart || type === PopupMultiMediaType.columnChart) {
      return this.strings.barChart;
    }
    else if (type === PopupMultiMediaType.lineChart) {
      return this.strings.lineChart;
    }
    else if (type === PopupMultiMediaType.pieChart) {
      return this.strings.pieChart;
    }
    return this.strings.image;
  }
  openMediaPopover(mediaInfo, indexPosition) {
    if (mediaInfo.type === PopupMultiMediaType.image) {
      this.imagePopover = document.createElement("arcgis-popup-image");
      this.imagePopover.guid = this.guid;
      this.imagePopover.refElement = this.popupFlowItem;
      this.imagePopover.imageMediaInfo = mediaInfo;
      this.imagePopover.mediaIndexPosition = indexPosition;
      document.body.appendChild(this.imagePopover);
    }
    else {
      this.chartPopover = document.createElement("arcgis-popup-chart");
      this.chartPopover.guid = this.guid;
      this.chartPopover.refElement = this.popupFlowItem;
      this.chartPopover.chartMediaInfo = mediaInfo;
      this.chartPopover.mediaContent = this.multimediaContent;
      this.chartPopover.mediaIndexPosition = indexPosition;
      document.body.appendChild(this.chartPopover);
    }
    this.disablePopupPanel.emit(true);
  }
  getSummartText() {
    if (this.multimediaContent.mediaInfos.length > 1) {
      return `${this.strings.multiple} (${this.multimediaContent.mediaInfos.length})`;
    }
    else {
      return this.getMultiMediaText(this.multimediaContent.mediaInfos[0].type);
    }
  }
  // field selection for title and caption
  popupFieldSelectionPickListChanges(event, formType) {
    const selectedFieldName = event.detail.selectedFields[0];
    if (formType === "title") {
      this.contentTitle.value = addSelectedFieldAtCursor(this.contentTitle, selectedFieldName);
      this.contentTitle.setFocus();
      this.multimediaContent.title = this.contentTitle.value;
    }
    else if (formType === "description") {
      this.contentDescription.value = addSelectedFieldAtCursor(this.contentDescription, selectedFieldName);
      this.contentDescription.setFocus();
      this.multimediaContent.description = this.contentDescription.value;
    }
    this.closePopupPopovers.emit();
    this.reRender = !this.reRender;
  }
  // rendor methods
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), heading: this.multimediaContent.mediaInfos.length > 1
        ? this.strings.mediaGroup
        : this.strings.media, description: (this.multimediaContent.title &&
        `${this.multimediaContent.title.substring(0, 25)}${this.multimediaContent.title.length > 25 ? "..." : ""}`) ||
        this.getSummartText(), collapsible: true, open: this.blockOpen, dragHandle: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable", slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-calcite-block-options", { ref: (el) => (this.blockOptions = el), guid: this.guid, intlOptions: this.strings.options, intlDelete: this.strings.delete, intlDuplicate: this.strings.duplicate, calciteBlockOptions: { hasDelete: true, hasDuplicate: true } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "images" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable" }, this.formInput("title", this.strings.title, (element) => {
      return (this.contentTitle = element);
    }, this.multimediaContent.title, this.strings.enterTitle
    // this.strings.titleContext.replace("${titleContext}", this.strings.media_L)
    ), this.formInput("description", this.strings.desc, (element) => {
      return (this.contentDescription = element);
    }, this.multimediaContent.description, this.strings.enterDescription
    // this.strings.descriptionContext.replace("${descriptionContext}", this.strings.media_L)
    ), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: CSS$1.disableSpacing, scale: "s" }, this.strings.mediaContent), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { id: "valueList_Id", "drag-enabled": true }, this.pickList), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { ref: (el) => (this.addMediaBtn = el), title: this.strings.addMedia, appearance: "outline-fill", round: true, scale: "s", class: CSS$1.addMediaButton, iconStart: "plus", onClick: (event) => {
        event.stopPropagation();
        this.closePopupPopovers.emit();
        if (!this.multimediaContentPopover) {
          this.multimediaContentPopover = document.createElement("arcgis-popup-main-contentpopover");
          this.multimediaContentPopover.contentPopoverRefElement = this.addMediaBtn;
          this.multimediaContentPopover.popoverPanelWidth =
            this.hostElement.getBoundingClientRect().width;
          this.multimediaContentPopover.isMultimediaContent = true;
          this.multimediaContentPopover.guid = this.guid;
          document.body.appendChild(this.multimediaContentPopover);
          this.addMediaBtn.disabled = true;
          this.disablePopupPanel.emit(true);
        }
      } })))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupMultimedia.style = arcgisPopupMultimediaCss;

const arcgisPopupRelationshipCss = ".form-input-button{display:flex}.form-input-button calcite-input[type=text]{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.form-input-button calcite-action{margin:0;flex:0 0 0%;justify-self:flex-end}.dropdown{display:block}";

const ArcgisPopupRelationship = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    this.maxPreviewCount = 11;
    this.fieldPickListChanges = (event) => {
      var _a, _b;
      event.stopPropagation();
      const selectedField = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) === null || _b === void 0 ? void 0 : _b[0];
      if (selectedField) {
        this.relatedRecordsContent.orderByFields[0].field = selectedField;
        this.reRender = !this.reRender;
      }
      this.closePopupPopovers.emit();
    };
    this.formInput = (formType, formString, formInputElement, formValue, formPlaceholder) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, formString, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "form-input-button" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", autofocus: true, ref: formInputElement, value: formValue, placeholder: formPlaceholder, disabled: !this.hasRelationshipLayer, onCalciteInputInput: (event) => {
          event.stopPropagation();
          const inputVal = event.target.value;
          if (formType === "title") {
            this.relatedRecordsContent.title = inputVal;
          }
          else {
            this.relatedRecordsContent.description = inputVal;
          }
          this.reRender = !this.reRender;
        }, onClick: () => this.closePopupPopovers.emit() }), ((_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: this.strings.attributes, disabled: !this.hasRelationshipLayer, onClick: () => {
          this.closePopupPopovers.emit();
          if (!this.popupFieldSelectionPickList) {
            this.popupFieldSelectionPickList = document.createElement("arcgis-popup-field-pick-list");
            this.popupFieldSelectionPickList.popoverProps = {
              refElement: this.popupFlowItem,
              offsetSkidding: 50
            };
            this.popupFieldSelectionPickList.multiple = false;
            this.popupFieldSelectionPickList.heading = this.strings.addField;
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListDismissed", () => {
              this.closePopupPopovers.emit();
            });
            this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListChange", (event) => this.popupFieldSelectionPickListChanges(event, formType));
            document.body.appendChild(this.popupFieldSelectionPickList);
            this.disablePopupPanel.emit(true);
          }
        }, scale: "s", icon: "brackets-curly" })))));
    };
    this.guid = undefined;
    this.relatedRecordsContent = undefined;
    this.blockOpen = false;
    this.popupFlowItem = undefined;
    this.reRender = undefined;
    this.hasRelationshipLayer = true;
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  async componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.layer = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.layer;
    this.view = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.mapView;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
    await this.loadAllModules();
    this.hasRelationshipLayer = await this.checkIfRelationshipExists();
    if (!this.relatedRecordsContent.title) {
      this.relatedRecordsContent.title = "";
    }
    if (!this.relatedRecordsContent.description) {
      this.relatedRecordsContent.description = "";
    }
  }
  componentDidLoad() {
    if (this.blockOpen) {
      this.blockOptions.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
      this.blockOptions.setFocus();
    }
    this.watchForChangesToLayersList();
  }
  componentDidUpdate() {
    this.internalPopupUpdated.emit();
  }
  disconnectedCallback() {
    var _a;
    (_a = this.watchLayersTables) === null || _a === void 0 ? void 0 : _a.remove();
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
    }
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
    }
  }
  // --------------------------------------------------------------------------
  //
  // Events
  //
  // --------------------------------------------------------------------------
  closePopupPopoversHandler() {
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
      this.popupFieldSelectionPickList = null;
      this.disablePopupPanel.emit(false);
    }
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
      this.arcgisFieldPickList = null;
      this.disablePopupPanel.emit(false);
    }
  }
  // --------------------------------------------------------------------------
  //
  // Private Methods
  //
  // --------------------------------------------------------------------------
  async loadAllModules() {
    [this.RelatedRecordsInfoFieldOrder, this.reactiveUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/popup/support/RelatedRecordsInfoFieldOrder",
      "esri/core/reactiveUtils"
    ]);
  }
  // field selection for title and caption
  popupFieldSelectionPickListChanges(event, formType) {
    const selectedFieldName = event.detail.selectedFields[0];
    if (formType === "title") {
      this.contentTitle.value = addSelectedFieldAtCursor(this.contentTitle, selectedFieldName);
      this.contentTitle.setFocus();
      this.relatedRecordsContent.title = this.contentTitle.value;
    }
    else if (formType === "description") {
      this.contentDescription.value = addSelectedFieldAtCursor(this.contentDescription, selectedFieldName);
      this.contentDescription.setFocus();
      this.relatedRecordsContent.description = this.contentDescription.value;
    }
    this.closePopupPopovers.emit();
    this.reRender = !this.reRender;
  }
  async openPickList(currLayer) {
    var _a, _b, _c;
    this.closePopupPopovers.emit();
    if (!this.arcgisFieldPickList) {
      this.arcgisFieldPickList = document.createElement("arcgis-field-pick-list");
      this.arcgisFieldPickList.popoverProps = {
        refElement: this.popupFlowItem,
        offsetSkidding: 50
      };
      this.arcgisFieldPickList.fields = currLayer.fields.filter((field) => field.visible);
      this.arcgisFieldPickList.layer = currLayer;
      this.arcgisFieldPickList.mapView = this.view;
      this.arcgisFieldPickList.showFieldInfo = true;
      this.arcgisFieldPickList.showFieldName = true;
      this.arcgisFieldPickList.selectedFields = [
        (_c = (_b = (_a = this.relatedRecordsContent) === null || _a === void 0 ? void 0 : _a.orderByFields) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.field
      ];
      this.arcgisFieldPickList.addEventListener("arcgisFieldPickListDismissed", this.fieldPickListChanges);
      document.body.appendChild(this.arcgisFieldPickList);
      this.disablePopupPanel.emit(true);
    }
  }
  async checkIfRelationshipExists() {
    var _a;
    for (const relationship of (_a = this.layer) === null || _a === void 0 ? void 0 : _a.relationships) {
      if (relationship.id === this.relatedRecordsContent.relationshipId) {
        for (const currLayerOrTable of [...this.view.map.allLayers, ...this.view.map.allTables]) {
          const curr = currLayerOrTable;
          if (await relationshipExists(this.layer, curr, relationship)) {
            await curr.load();
            return Promise.resolve(true);
          }
        }
        return Promise.resolve(false);
      }
    }
    return Promise.resolve(false);
  }
  watchForChangesToLayersList() {
    this.watchLayersTables = this.reactiveUtils.watch(() => [this.view.map.allLayers.length, this.view.map.allTables.length], async () => {
      // check if related layer/table is removed, and disable panel/show warning if yes
      this.hasRelationshipLayer = await this.checkIfRelationshipExists();
    });
  }
  // --------------------------------------------------------------------------
  //
  // Rendor  Methods
  //
  // --------------------------------------------------------------------------
  render() {
    var _a, _b, _c, _d, _e, _f, _g;
    const relationship = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.relationship, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { disabled: !this.hasRelationshipLayer, overlayPositioning: "fixed", class: "dropdown" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "trigger", appearance: "outline-fill", kind: "neutral", iconEnd: "chevronDown", alignment: "icon-end-space-between", width: "full", scale: "m" }, (() => {
      for (const relationship of this.layer.relationships) {
        if (relationship.id === this.relatedRecordsContent.relationshipId) {
          return relationship.name || this.strings.relationship;
        }
      }
      return this.strings.relationship;
    })()), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, this.layer.relationships.map((relationship) => {
      for (const currLayerOrTable of [
        ...this.view.map.allLayers,
        ...this.view.map.allTables
      ]) {
        const curr = currLayerOrTable;
        if (relationshipExistsCheckWithoutLoad(this.layer, curr, relationship)) {
          return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.relatedRecordsContent.relationshipId === relationship.id, onClick: async () => {
              var _a;
              await curr.load();
              this.relatedRecordsContent.relationshipId = relationship.id;
              this.relatedRecordsContent.orderByFields = [
                new this.RelatedRecordsInfoFieldOrder({
                  field: curr.fields.find((field) => field.visible)
                    .name,
                  order: ((_a = this.relatedRecordsContent.orderByFields) === null || _a === void 0 ? void 0 : _a[0].order) || "asc"
                })
              ];
              this.reRender = !this.reRender;
            } }, relationship.name || this.strings.relationship));
        }
      }
    })))));
    const sortBy = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.sortBy, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", iconEnd: "chevronDown", alignment: "icon-end-space-between", width: "full", scale: "m", disabled: !this.hasRelationshipLayer, onClick: async () => {
        // find the layer/table, and display the pick list based on the related layer/table
        this.layer.relationships.map(async (relationship) => {
          for (const currLayerOrTable of [
            ...this.view.map.allLayers,
            ...this.view.map.allTables
          ]) {
            const curr = currLayerOrTable;
            if (this.relatedRecordsContent.relationshipId === relationship.id &&
              relationshipExistsCheckWithoutLoad(this.layer, curr, relationship)) {
              this.openPickList(curr);
            }
          }
        });
      } }, ((_c = (_b = (_a = this.relatedRecordsContent) === null || _a === void 0 ? void 0 : _a.orderByFields) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.field) || this.strings.default)));
    const sortOrder = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.sortOrder, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { disabled: !this.hasRelationshipLayer, overlayPositioning: "fixed" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "trigger", appearance: "outline-fill", kind: "neutral", iconEnd: "chevronDown", alignment: "icon-end-space-between", width: "full", scale: "m" }, ((_d = this.relatedRecordsContent.orderByFields) === null || _d === void 0 ? void 0 : _d[0].order) === "desc"
      ? this.strings.descending
      : this.strings.ascending), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: ((_e = this.relatedRecordsContent.orderByFields) === null || _e === void 0 ? void 0 : _e[0].order) === "asc", onClick: () => {
        this.relatedRecordsContent.orderByFields[0].order = "asc";
        this.reRender = !this.reRender;
      } }, this.strings.ascending), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: ((_f = this.relatedRecordsContent.orderByFields) === null || _f === void 0 ? void 0 : _f[0].order) === "desc", onClick: () => {
        this.relatedRecordsContent.orderByFields[0].order = "desc";
        this.reRender = !this.reRender;
      } }, this.strings.descending))));
    const previewCount = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.previewCount, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { disabled: !this.hasRelationshipLayer, overlayPositioning: "fixed" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "trigger", appearance: "outline-fill", kind: "neutral", iconEnd: "chevronDown", alignment: "icon-end-space-between", width: "full", scale: "m" }, (_g = (this.relatedRecordsContent.displayCount === 0
      ? this.strings.none
      : this.relatedRecordsContent.displayCount)) !== null && _g !== void 0 ? _g : 1), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, [...Array(this.maxPreviewCount).keys()].map((x) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.relatedRecordsContent.displayCount === x, onClick: () => {
          this.relatedRecordsContent.displayCount = x;
          this.reRender = !this.reRender;
        } }, x === 0 ? this.strings.none : x));
    })))));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), heading: this.strings.relatedRecords, description: (this.relatedRecordsContent.title &&
        `${this.relatedRecordsContent.title.substring(0, 25)}${this.relatedRecordsContent.title.length > 25 ? "..." : ""}`) ||
        (() => {
          for (const relationship of this.layer.relationships) {
            if (relationship.id === this.relatedRecordsContent.relationshipId) {
              return relationship.name;
            }
          }
          return this.strings.selectTable;
        })(), collapsible: true, open: this.blockOpen, dragHandle: true, onCalciteBlockToggle: () => this.closePopupPopovers.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable", slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-calcite-block-options", { ref: (el) => (this.blockOptions = el), guid: this.guid, intlOptions: this.strings.options, intlDelete: this.strings.delete, intlDuplicate: this.strings.duplicate, calciteBlockOptions: { hasDelete: true, hasDuplicate: this.hasRelationshipLayer } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: this.hasRelationshipLayer ? "link" : "exclamation-mark-triangle" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable" }, this.formInput("title", this.strings.title, (element) => {
      return (this.contentTitle = element);
    }, this.relatedRecordsContent.title, this.strings.enterTitle), this.formInput("description", this.strings.desc, (element) => {
      return (this.contentDescription = element);
    }, this.relatedRecordsContent.description, this.strings.enterDescription), relationship, sortBy, sortOrder, previewCount))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupRelationship.style = arcgisPopupRelationshipCss;

const ArcgisPopupRichtext = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.richTextChangedReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "richTextChangedReRender", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    this.arcadeExpMap = new Map();
    this.guid = undefined;
    this.fieldExpressionData = undefined;
    this.arcgisColorPickerData = undefined;
    this.richtextContent = undefined;
    this.blockOpen = false;
    this.popupFlowItem = undefined;
    this.reRender = undefined;
  }
  // lifecycle methods
  componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.currentLanguage = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.currentLanguage;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
  }
  componentDidLoad() {
    this.ckEditorMentionFieldsSetup();
    if (this.blockOpen) {
      const content = this.hostElement.shadowRoot.getElementById("content_Id");
      content.scrollIntoView({
        behavior: "auto",
        block: "nearest",
        inline: "start"
      });
      this.showRichTextEditor();
    }
  }
  componentDidUpdate() {
    this.internalPopupUpdated.emit();
  }
  disconnectedCallback() {
    if (this.arcgisCkeditor5) {
      document.body.removeChild(this.arcgisCkeditor5);
    }
  }
  // Events
  richTextChangedReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = this.reRender ? false : true;
  }
  closeAllPopoversHandler() {
    if (this.arcgisCkeditor5) {
      document.body.removeChild(this.arcgisCkeditor5);
      this.arcgisCkeditor5 = null;
      this.disablePopupPanel.emit(false);
    }
  }
  ckEditorPopoverClosedHandler(event) {
    var _a, _b, _c, _d, _e;
    if (((_a = event.detail) === null || _a === void 0 ? void 0 : _a.guid) === this.guid) {
      event.stopPropagation();
      if (((_c = (_b = event.detail) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.length) || ((_e = (_d = event.detail) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.length) === 0) {
        this.richtextContent.text = event.detail.data;
        this.reRender = !this.reRender;
        this.richTextChangedReRender.emit();
      } // else null
      this.closePopupPopovers.emit();
    }
  }
  calciteBlockToggleHandler() {
    this.closePopupPopovers.emit();
  }
  // for arcade changes
  arcadeChangeNotificationHandler() {
    this.ckEditorMentionFieldsSetup();
  }
  // private methods and properties
  ckEditorMentionFieldsSetup() {
    var _a;
    this.arcadeExpMap = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.e)(this.popupTemplate);
    this.ckEditorMentionFields = [];
    (_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.forEach((field) => {
      if (field.fieldName) {
        this.ckEditorMentionFields.push({
          id: "{" + field.fieldName + "}",
          name: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.b)(field, this.arcadeExpMap)
        });
      }
    });
  }
  getTextFromHtml(totalChars) {
    var _a;
    const tempHtml = (_a = this.richtextContent.text) !== null && _a !== void 0 ? _a : "";
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = tempHtml;
    const tempString = tempDiv.textContent || tempDiv.innerText || "";
    return `${tempString.substring(0, totalChars)}${tempString.length > totalChars ? "..." : ""}`;
  }
  showRichTextEditor() {
    var _a, _b;
    this.closePopupPopovers.emit();
    this.arcgisCkeditor5 = document.createElement("arcgis-ckeditor5");
    this.arcgisCkeditor5.fieldExpressionConfig = this.fieldExpressionData;
    this.arcgisCkeditor5.arcgisColorPickerConfig = Object.assign(Object.assign({}, this.arcgisColorPickerData), { enableFields: this.arcgisColorPickerData.data && this.arcgisColorPickerData.data.length ? true : false });
    this.arcgisCkeditor5.guid = this.guid;
    this.arcgisCkeditor5.refElement = this.popupFlowItem;
    this.arcgisCkeditor5.textData = (_a = this.richtextContent.text) !== null && _a !== void 0 ? _a : "";
    this.arcgisCkeditor5.ckEditorMentionFields = this.ckEditorMentionFields;
    this.arcgisCkeditor5.intlTextPlaceHolder =
      ((_b = this.popupTemplate.fieldInfos) === null || _b === void 0 ? void 0 : _b.length) > 0
        ? this.strings.textPlaceHolder
        : this.strings.textPlaceHolderLabel;
    this.arcgisCkeditor5.intlOk = this.strings.ok;
    this.arcgisCkeditor5.intlCancel = this.strings.cancel;
    this.arcgisCkeditor5.currentLanguage = this.currentLanguage;
    document.body.appendChild(this.arcgisCkeditor5);
    this.arcgisCkeditor5.setFocus();
    this.disablePopupPanel.emit(true);
  }
  // rendor methods
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), id: "richText_Id", heading: this.strings.text, description: this.getTextFromHtml(25), open: this.blockOpen, collapsible: true, dragHandle: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable", slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-calcite-block-options", { guid: this.guid, intlOptions: this.strings.options, intlDelete: this.strings.delete, intlDuplicate: this.strings.duplicate, calciteBlockOptions: { hasDelete: true, hasDuplicate: true } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "text" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "ignore-elements-sortable", id: "content_Id" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", width: "full", onClick: () => this.showRichTextEditor() }, this.strings.editText)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const CSS = {
  formInputButton: "form-input-button"
};

const arcgisPopupTitleCss = ".form-input-button{display:flex}.form-input-button calcite-input[type=text]{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.form-input-button calcite-action{margin:0;flex:0 0 0%;justify-self:flex-end}";

const ArcgisPopupTitle = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.titleChangedReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "titleChangedReRender", 7);
    this.internalPopupUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalPopupUpdated", 7);
    this.disablePopupPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disablePopupPanel", 7);
    // private methods and properties
    this.changeTitle = () => {
      this.popupTemplate.title = this.titleInput.value;
      this.internalPopupUpdated.emit();
      this.titleChangedReRender.emit();
    };
    // open popover
    this.openAttributesList = (event) => {
      event.stopPropagation();
      // close first since we can have multiple attributes open
      this.closePopupPopovers.emit();
      // lazy load attribute selection component
      if (!this.popupFieldSelectionPickList) {
        this.popupFieldSelectionPickList = document.createElement("arcgis-popup-field-pick-list");
        this.popupFieldSelectionPickList.popoverProps = {
          refElement: this.popupFlowItem
        };
        this.popupFieldSelectionPickList.multiple = false;
        this.popupFieldSelectionPickList.heading = this.strings.addField;
        this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListDismissed", () => {
          this.closePopupPopovers.emit();
        });
        this.popupFieldSelectionPickList.addEventListener("arcgisPopupPickListChange", this.popupFieldSelectionPickListChanges);
        document.body.appendChild(this.popupFieldSelectionPickList);
        this.disablePopupPanel.emit(true);
      }
    };
    this.popupFieldSelectionPickListChanges = (event) => {
      const selectedFieldName = event.detail.selectedFields[0];
      this.titleInput.value = addSelectedFieldAtCursor(this.titleInput, selectedFieldName);
      this.titleInput.setFocus();
      this.popupTemplate.title = this.titleInput.value;
      this.changeTitle();
      this.closePopupPopovers.emit();
    };
    this.popupFlowItem = undefined;
    this.reRender = undefined;
  }
  // lifecycle methods
  componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.strings;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_9__.p.popupTemplate;
  }
  componentDidLoad() {
    this.guidForSelection = (0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_5__.g)();
  }
  // Events
  titleChangedReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = this.reRender ? false : true;
  }
  closePopupPopoversHandler() {
    if (this.popupFieldSelectionPickList) {
      document.body.removeChild(this.popupFieldSelectionPickList);
      this.popupFieldSelectionPickList = null;
      this.titleInput.setFocus();
      this.disablePopupPanel.emit(false);
    }
  }
  // rendor methods
  render() {
    var _a;
    const popupTitle = this.popupTemplate.title;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.hostElement), heading: this.strings.popupTitle, description: popupTitle && `${popupTitle.substring(0, 25)}${popupTitle.length > 25 ? "..." : ""}`, collapsible: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "title" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.formInputButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", autofocus: true, ref: (element) => {
        this.titleInput = element;
      }, value: popupTitle, onCalciteInputInput: (event) => {
        event.stopPropagation();
        this.changeTitle();
      }, onClick: () => this.closePopupPopovers.emit() }), ((_a = this.popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", text: this.strings.attributes, onClick: this.openAttributesList, icon: "brackets-curly" }))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupTitle.style = arcgisPopupTitleCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ guid)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
function generateId(counts) {
  return counts
    .map((count) => {
    let out = "";
    for (let i = 0; i < count; i++) {
      out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return out;
  })
    .join("-");
}
const guid = () => generateId([2, 1, 1, 1, 3]);




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ clearPopupState),
/* harmony export */   p: () => (/* binding */ popupState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const popupStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  layer: null,
  mapView: null,
  portal: null,
  config: null,
  strings: null,
  currentLanguage: null,
  currentLanguageIntl: null,
  serviceType: null,
  popupTemplate: null,
  layerHasAttachment: null,
  layerHasET: null,
  layerHasAttributes: null,
  layerHasCharts: null,
  layerHasImages: null,
  layerHasText: null,
  layerDisplayType: null,
  supportsArcade: null,
  layerHasRelatedRecords: false
});
// workaround for starting a panel with a clean state
function clearPopupState(popupState) {
  popupState.layer = null;
  popupState.mapView = null;
  popupState.portal = null;
  popupState.config = null;
  popupState.strings = null;
  popupState.currentLanguage = null;
  popupState.currentLanguageIntl = null;
  popupState.serviceType = null;
  popupState.popupTemplate = null;
  popupState.layerHasAttachment = null;
  popupState.layerHasET = null;
  popupState.layerHasAttributes = null;
  popupState.layerHasCharts = null;
  popupState.layerHasImages = null;
  popupState.layerHasText = null;
  popupState.layerDisplayType = null;
  popupState.supportsArcade = null;
  popupState.layerHasRelatedRecords = false;
}
const popupState = popupStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,