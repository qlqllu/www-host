"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-arcade_-22d01a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-arcade.entry.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-arcade.entry.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_arcade: () => (/* binding */ ArcgisArcade)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const CSS = {
  arcadeDiv: "arcade-div",
  arcadeIframe: "arcade-iframe"
};

const arcgisArcadeCss = ".arcade-div{position:fixed;top:0px;right:0px;bottom:0px;left:0px;display:flex;justify-content:center;align-items:center;overflow-y:hidden;z-index:1001;transition:visibility 0ms linear 0.3s, opacity 0.3s cubic-bezier(0.215, 0.44, 0.42, 0.88) 0s}.arcade-iframe{border:none;width:100%;height:100%}";

const ArcgisArcade = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcadeClosed = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcadeClosed", 7);
    this.sendPostMessage = (jsonObj) => {
      var _a, _b;
      (_b = (_a = this.arcadeEditorInfo.arcadeEditor) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(JSON.stringify(jsonObj), this.arcadeEditorInfo.editorUrl);
    };
    this.receiveMessage = (event) => {
      event.stopPropagation();
      // for some reason the viewer is sending {request: "getUri"} to the editor
      // and the editor is returning {request: "postUri", uri: "http://may.arcgis.com/editor/editarcade.html?locale=en"}
      // This causes an error in editor when doing JSON.parse(event.data) because event.data is an object and not a string.
      // console.log("event received", event.data, event.origin);
      if (this.arcadeEditorInfo.editorUrl.indexOf(event.origin) === -1) {
        return;
      }
      const jsonObj = typeof event.data === "string" ? JSON.parse(event.data) : event.data;
      switch (jsonObj.type) {
        case "loaded":
          // Setup the embedded editor
          this.arcadeEditorInfo.editorFrameLoaded = jsonObj.value;
          if (this.arcadeEditorInfo.editorFrameLoaded) {
            this.sendPostMessage(this.objectForArcadeIFrame);
          }
          break;
        case "initFinished":
          if (this.arcadeEditorInfo.editorFrameLoaded) ;
          else {
            console.log("editor app not loaded yet");
          }
          break;
        case "scriptSaveAndClose":
          // The script has finished being edited.
          if (!jsonObj.script) {
            this.doneArcade();
            break;
          }
          this.doneArcade(jsonObj);
          break;
        case "scriptClose":
          this.doneArcade();
          break;
      }
    };
    this.arcadeEditorUrl = undefined;
    this.currentLanguage = undefined;
    this.objectForArcadeIFrame = undefined;
    this.currentArcadeFieldName = undefined;
  }
  // lifecycle methods
  componentWillLoad() {
    console.warn("arcgis-arcade component is deprecated. Instead use arcgis-modal-arcade");
  }
  componentDidLoad() {
    this.arcadeEditorInfo = {
      arcadeEditor: this.hostElement.shadowRoot.getElementById("arcadeFrame_Id"),
      editorFrameLoaded: false,
      editorUrl: `${this.arcadeEditorUrl}?locale=${this.currentLanguage.toLowerCase()}`
    };
    this.arcadeEditorInfo.arcadeEditor.onload = () => {
      this.arcadeEditorInfo.arcadeEditor.style.visibility = "visible";
    };
    this.arcadeEditorInfo.arcadeEditor.src = this.arcadeEditorInfo.editorUrl;
    window.addEventListener("message", this.receiveMessage, false);
    let timeoutCounter = 0;
    // Use a timer, to check when the iframe is ready
    this.arcadeEditorInfo.editorFrameListener = window.setInterval(() => {
      if (!this.arcadeEditorInfo.editorFrameLoaded) {
        this.sendPostMessage({ type: "isLoaded" });
      }
      else {
        window.clearInterval(this.arcadeEditorInfo.editorFrameListener);
        this.arcadeEditorInfo.editorFrameListener = null;
      }
      timeoutCounter++;
      if (timeoutCounter > 60) {
        console.log("reject");
      }
    }, 500);
  }
  // private methods and properties
  doneArcade(jsonObj) {
    var _a;
    window.clearInterval(this.arcadeEditorInfo.editorFrameListener);
    window.removeEventListener("message", this.receiveMessage);
    if ((_a = this.hostElement) === null || _a === void 0 ? void 0 : _a.parentNode) {
      if (jsonObj) {
        this.arcadeClosed.emit({
          arcadeExp: jsonObj,
          currentArcadeFieldName: this.currentArcadeFieldName
        });
      }
      else {
        this.arcadeClosed.emit();
      }
    }
  }
  // rendor methods
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.arcadeDiv }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("iframe", { id: "arcadeFrame_Id", class: CSS.arcadeIframe }))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisArcade.style = arcgisArcadeCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,