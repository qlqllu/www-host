"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-45bccc"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const addItemStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  typeKeywords: [],
  customParameters: [],
  analyzedLocationTypes: [],
  allowStoredAuth: true,
  isSecured: null,
  checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ agsServerMap),
/* harmony export */   i: () => (/* binding */ isAGS)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const agsServerMap = {
  FeatureServer: "Feature Service",
  GeocodeServer: "Geocoding Service",
  GeoDataServer: "Geodata Service",
  GeometryServer: "Geometry Service",
  GeoenrichmentServer: "Geoenrichment Service",
  GPServer: "Geoprocessing Service",
  GlobeServer: "Globe Service",
  ImageServer: "Image Service",
  MapServer: "Map Service",
  NAServer: "Network Analysis Service",
  ElevationServer: "Image Service",
  VectorTileServer: "Vector Tile Service",
  SceneServer: "Scene Service",
  StreamServer: "Stream Service",
  WMServer: "Workflow Manager Service",
  TiledImageServer: "Image Service",
  VideoServer: "Video Service"
};
const isAGS = (type) => !!Object.values(agsServerMap).includes(type);




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-hybrid-image-select.entry.js":
/*!********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-hybrid-image-select.entry.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_hybrid_image_select: () => (/* binding */ ArcgisNewItemPagesHybridImageSelect)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/* harmony import */ var _ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ags-68d4ae20.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */







const arcgisNewItemPagesHybridImageSelectCss = ".label{font-weight:400;font-size:1rem;color:var(--calcite-ui-text-1);margin-bottom:1rem;padding-top:1rem;display:block}.fieldset{margin:0;padding:0;border-style:none}";

const ArcgisNewItemPagesHybridImageSelect = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.newItemUpdatePage = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
    this.workflowComplete = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowComplete", 7);
    this.options = ["ImageServer", "TiledImageServer"];
    this.selected = "ImageServer";
  }
  async navigateToNextPage() {
    var _a, _b;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.hybridImageServiceSetting = this.selected;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.type = (_a = _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_2__.a[this.selected]) === null || _a === void 0 ? void 0 : _a.type;
    if (_ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_4__.u.workflow === "map") {
      this.workflowComplete.emit({
        type: _ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_3__.a[this.selected],
        url: encodeURI(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.url),
        agsType: this.selected,
        customParameters: _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.customParameters,
        addAsBasemap: (_b = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addAsBasemap) !== null && _b !== void 0 ? _b : false
      });
    }
    else {
      this.newItemUpdatePage.emit("itemProperties");
    }
  }
  async componentWillLoad() {
    this.i18n = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_4__.u.i18n.hybridImageSelect;
    if (_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.hybridImageServiceSetting) {
      this.selected = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.hybridImageServiceSetting;
    }
    if (this.isAddToMapTerminalPage()) {
      _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_4__.u.nextText = "addToMap";
      if (_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addAsBasemap) {
        _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_4__.u.nextText = "useAsBaseMap";
      }
    }
  }
  isAddToMapTerminalPage() {
    return _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_4__.u.workflow === "map";
  }
  render() {
    const { i18n, selected, options } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("fieldset", { class: "fieldset" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("legend", { class: "label" }, i18n.heading), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select-group", { layout: "vertical", class: "tile-select" }, options.map((key) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select", { checked: selected === key, heading: i18n[key].title, description: i18n[key].description, name: "hybrid-image-service-type", "input-enabled": true, width: "full", type: "radio", value: key, onCalciteTileSelectChange: (e) => {
          this.selected = e.target.value;
        } }));
    })))));
  }
  get element() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemPagesHybridImageSelect.style = arcgisNewItemPagesHybridImageSelectCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTQ1YmNjYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEOztBQUV2RCxxQkFBcUIscURBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdHOzs7Ozs7Ozs7Ozs7Ozs7O0FDcEJoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6QnpDO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQ2xEO0FBQ1E7QUFDYjtBQUNEO0FBQ3hCOztBQUU3Qix1REFBdUQsZ0JBQWdCLGVBQWUsK0JBQStCLG1CQUFtQixpQkFBaUIsY0FBYyxVQUFVLFNBQVMsVUFBVSxrQkFBa0I7O0FBRXROO0FBQ0E7QUFDQSxJQUFJLHFEQUFnQjtBQUNwQiw2QkFBNkIscURBQVc7QUFDeEMsNEJBQTRCLHFEQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFZO0FBQ2hCLElBQUksb0RBQVksY0FBYyxzREFBa0I7QUFDaEQsUUFBUSw4Q0FBWTtBQUNwQjtBQUNBLGNBQWMsK0NBQVk7QUFDMUIsdUJBQXVCLG9EQUFZO0FBQ25DO0FBQ0EsMEJBQTBCLG9EQUFZO0FBQ3RDLDRCQUE0QixvREFBWTtBQUN4QyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhDQUFZO0FBQzVCLFFBQVEsb0RBQVk7QUFDcEIsc0JBQXNCLG9EQUFZO0FBQ2xDO0FBQ0E7QUFDQSxNQUFNLDhDQUFZO0FBQ2xCLFVBQVUsb0RBQVk7QUFDdEIsUUFBUSw4Q0FBWTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOENBQVk7QUFDdkI7QUFDQTtBQUNBLFlBQVksMEJBQTBCO0FBQ3RDLFlBQVkscURBQUMsQ0FBQyxpREFBSSxRQUFRLHFEQUFDLGVBQWUsbUJBQW1CLEVBQUUscURBQUMsYUFBYSxnQkFBZ0IsaUJBQWlCLHFEQUFDLGdDQUFnQywwQ0FBMEM7QUFDekwsY0FBYyxxREFBQywwQkFBMEI7QUFDekM7QUFDQSxXQUFXO0FBQ1gsS0FBSztBQUNMO0FBQ0Esa0JBQWtCLE9BQU8scURBQVU7QUFDbkM7QUFDQTs7QUFFNEY7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqRTVGO0FBQ0E7QUFDQTtBQUNBO0FBQzZFOztBQUU3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsZUFBZSxpREFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFEQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsaURBQVc7QUFDdEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHdEQUF3RCxpREFBVztBQUNuRTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtIQUFrSDtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVHQUF1RztBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FkZC1pdGVtLTk3ZDU3N2E5LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2Fncy02OGQ0YWUyMC5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9hcmNnaXMtbmV3LWl0ZW0tcGFnZXMtaHlicmlkLWltYWdlLXNlbGVjdC5lbnRyeS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9pbmRleC04MWQ1NDhiNy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGMgYXMgY3JlYXRlU3RvcmUgfSBmcm9tICcuL2luZGV4LTgxZDU0OGI3LmpzJztcblxuY29uc3QgYWRkSXRlbVN0b3JlID0gY3JlYXRlU3RvcmUoe1xuICB0eXBlS2V5d29yZHM6IFtdLFxuICBjdXN0b21QYXJhbWV0ZXJzOiBbXSxcbiAgYW5hbHl6ZWRMb2NhdGlvblR5cGVzOiBbXSxcbiAgYWxsb3dTdG9yZWRBdXRoOiB0cnVlLFxuICBpc1NlY3VyZWQ6IG51bGwsXG4gIGNoZWNrQXV0aDogZmFsc2Vcbn0pO1xuLy8gRW50aXJlIGFkZCBpdGVtIHN0YXRlIG9iamVjdFxuY29uc3QgYWRkSXRlbVN0YXRlID0gYWRkSXRlbVN0b3JlLnN0YXRlO1xuLy8gU3Vic2V0cyBvZiBhZGQgaXRlbSBzdGF0ZVxuY29uc3QgYWRkSXRlbVJlcXVlc3RTdGF0ZSA9IGFkZEl0ZW1TdG9yZS5zdGF0ZTtcbmNvbnN0IGFkZEl0ZW1VcmxTdGF0ZSA9IGFkZEl0ZW1TdG9yZS5zdGF0ZTtcblxuZXhwb3J0IHsgYWRkSXRlbVN0YXRlIGFzIGEsIGFkZEl0ZW1VcmxTdGF0ZSBhcyBiLCBhZGRJdGVtUmVxdWVzdFN0YXRlIGFzIGMsIGFkZEl0ZW1TdG9yZSBhcyBkIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmNvbnN0IGFnc1NlcnZlck1hcCA9IHtcbiAgRmVhdHVyZVNlcnZlcjogXCJGZWF0dXJlIFNlcnZpY2VcIixcbiAgR2VvY29kZVNlcnZlcjogXCJHZW9jb2RpbmcgU2VydmljZVwiLFxuICBHZW9EYXRhU2VydmVyOiBcIkdlb2RhdGEgU2VydmljZVwiLFxuICBHZW9tZXRyeVNlcnZlcjogXCJHZW9tZXRyeSBTZXJ2aWNlXCIsXG4gIEdlb2VucmljaG1lbnRTZXJ2ZXI6IFwiR2VvZW5yaWNobWVudCBTZXJ2aWNlXCIsXG4gIEdQU2VydmVyOiBcIkdlb3Byb2Nlc3NpbmcgU2VydmljZVwiLFxuICBHbG9iZVNlcnZlcjogXCJHbG9iZSBTZXJ2aWNlXCIsXG4gIEltYWdlU2VydmVyOiBcIkltYWdlIFNlcnZpY2VcIixcbiAgTWFwU2VydmVyOiBcIk1hcCBTZXJ2aWNlXCIsXG4gIE5BU2VydmVyOiBcIk5ldHdvcmsgQW5hbHlzaXMgU2VydmljZVwiLFxuICBFbGV2YXRpb25TZXJ2ZXI6IFwiSW1hZ2UgU2VydmljZVwiLFxuICBWZWN0b3JUaWxlU2VydmVyOiBcIlZlY3RvciBUaWxlIFNlcnZpY2VcIixcbiAgU2NlbmVTZXJ2ZXI6IFwiU2NlbmUgU2VydmljZVwiLFxuICBTdHJlYW1TZXJ2ZXI6IFwiU3RyZWFtIFNlcnZpY2VcIixcbiAgV01TZXJ2ZXI6IFwiV29ya2Zsb3cgTWFuYWdlciBTZXJ2aWNlXCIsXG4gIFRpbGVkSW1hZ2VTZXJ2ZXI6IFwiSW1hZ2UgU2VydmljZVwiLFxuICBWaWRlb1NlcnZlcjogXCJWaWRlbyBTZXJ2aWNlXCJcbn07XG5jb25zdCBpc0FHUyA9ICh0eXBlKSA9PiAhIU9iamVjdC52YWx1ZXMoYWdzU2VydmVyTWFwKS5pbmNsdWRlcyh0eXBlKTtcblxuZXhwb3J0IHsgYWdzU2VydmVyTWFwIGFzIGEsIGlzQUdTIGFzIGkgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBjIGFzIGNyZWF0ZUV2ZW50LCBoLCBIIGFzIEhvc3QsIGQgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtOTJlYmIzOTYuanMnO1xuaW1wb3J0IHsgYSBhcyBhZGRJdGVtU3RhdGUgfSBmcm9tICcuL2FkZC1pdGVtLTk3ZDU3N2E5LmpzJztcbmltcG9ydCB7IGEgYXMgYWRkQ3JlYXRlSXRlbVR5cGVzIH0gZnJvbSAnLi9pdGVtLXR5cGVzLWI0ZmU4NmFkLmpzJztcbmltcG9ydCB7IGEgYXMgYWdzU2VydmVyTWFwIH0gZnJvbSAnLi9hZ3MtNjhkNGFlMjAuanMnO1xuaW1wb3J0IHsgdSBhcyB1aVN0b3JlU3RhdGUgfSBmcm9tICcuL3VpLWVjZjg2YmJhLmpzJztcbmltcG9ydCAnLi9pbmRleC04MWQ1NDhiNy5qcyc7XG5cbmNvbnN0IGFyY2dpc05ld0l0ZW1QYWdlc0h5YnJpZEltYWdlU2VsZWN0Q3NzID0gXCIubGFiZWx7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc2l6ZToxcmVtO2NvbG9yOnZhcigtLWNhbGNpdGUtdWktdGV4dC0xKTttYXJnaW4tYm90dG9tOjFyZW07cGFkZGluZy10b3A6MXJlbTtkaXNwbGF5OmJsb2NrfS5maWVsZHNldHttYXJnaW46MDtwYWRkaW5nOjA7Ym9yZGVyLXN0eWxlOm5vbmV9XCI7XG5cbmNvbnN0IEFyY2dpc05ld0l0ZW1QYWdlc0h5YnJpZEltYWdlU2VsZWN0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLm5ld0l0ZW1VcGRhdGVQYWdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJuZXdJdGVtVXBkYXRlUGFnZVwiLCA3KTtcbiAgICB0aGlzLndvcmtmbG93Q29tcGxldGUgPSBjcmVhdGVFdmVudCh0aGlzLCBcIndvcmtmbG93Q29tcGxldGVcIiwgNyk7XG4gICAgdGhpcy5vcHRpb25zID0gW1wiSW1hZ2VTZXJ2ZXJcIiwgXCJUaWxlZEltYWdlU2VydmVyXCJdO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBcIkltYWdlU2VydmVyXCI7XG4gIH1cbiAgYXN5bmMgbmF2aWdhdGVUb05leHRQYWdlKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgYWRkSXRlbVN0YXRlLmh5YnJpZEltYWdlU2VydmljZVNldHRpbmcgPSB0aGlzLnNlbGVjdGVkO1xuICAgIGFkZEl0ZW1TdGF0ZS50eXBlID0gKF9hID0gYWRkQ3JlYXRlSXRlbVR5cGVzW3RoaXMuc2VsZWN0ZWRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZTtcbiAgICBpZiAodWlTdG9yZVN0YXRlLndvcmtmbG93ID09PSBcIm1hcFwiKSB7XG4gICAgICB0aGlzLndvcmtmbG93Q29tcGxldGUuZW1pdCh7XG4gICAgICAgIHR5cGU6IGFnc1NlcnZlck1hcFt0aGlzLnNlbGVjdGVkXSxcbiAgICAgICAgdXJsOiBlbmNvZGVVUkkoYWRkSXRlbVN0YXRlLnVybCksXG4gICAgICAgIGFnc1R5cGU6IHRoaXMuc2VsZWN0ZWQsXG4gICAgICAgIGN1c3RvbVBhcmFtZXRlcnM6IGFkZEl0ZW1TdGF0ZS5jdXN0b21QYXJhbWV0ZXJzLFxuICAgICAgICBhZGRBc0Jhc2VtYXA6IChfYiA9IGFkZEl0ZW1TdGF0ZS5hZGRBc0Jhc2VtYXApICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLm5ld0l0ZW1VcGRhdGVQYWdlLmVtaXQoXCJpdGVtUHJvcGVydGllc1wiKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgdGhpcy5pMThuID0gdWlTdG9yZVN0YXRlLmkxOG4uaHlicmlkSW1hZ2VTZWxlY3Q7XG4gICAgaWYgKGFkZEl0ZW1TdGF0ZS5oeWJyaWRJbWFnZVNlcnZpY2VTZXR0aW5nKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gYWRkSXRlbVN0YXRlLmh5YnJpZEltYWdlU2VydmljZVNldHRpbmc7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzQWRkVG9NYXBUZXJtaW5hbFBhZ2UoKSkge1xuICAgICAgdWlTdG9yZVN0YXRlLm5leHRUZXh0ID0gXCJhZGRUb01hcFwiO1xuICAgICAgaWYgKGFkZEl0ZW1TdGF0ZS5hZGRBc0Jhc2VtYXApIHtcbiAgICAgICAgdWlTdG9yZVN0YXRlLm5leHRUZXh0ID0gXCJ1c2VBc0Jhc2VNYXBcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaXNBZGRUb01hcFRlcm1pbmFsUGFnZSgpIHtcbiAgICByZXR1cm4gdWlTdG9yZVN0YXRlLndvcmtmbG93ID09PSBcIm1hcFwiO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGkxOG4sIHNlbGVjdGVkLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgIHJldHVybiAoaChIb3N0LCBudWxsLCBoKFwiZmllbGRzZXRcIiwgeyBjbGFzczogXCJmaWVsZHNldFwiIH0sIGgoXCJsZWdlbmRcIiwgeyBjbGFzczogXCJsYWJlbFwiIH0sIGkxOG4uaGVhZGluZyksIGgoXCJjYWxjaXRlLXRpbGUtc2VsZWN0LWdyb3VwXCIsIHsgbGF5b3V0OiBcInZlcnRpY2FsXCIsIGNsYXNzOiBcInRpbGUtc2VsZWN0XCIgfSwgb3B0aW9ucy5tYXAoKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS10aWxlLXNlbGVjdFwiLCB7IGNoZWNrZWQ6IHNlbGVjdGVkID09PSBrZXksIGhlYWRpbmc6IGkxOG5ba2V5XS50aXRsZSwgZGVzY3JpcHRpb246IGkxOG5ba2V5XS5kZXNjcmlwdGlvbiwgbmFtZTogXCJoeWJyaWQtaW1hZ2Utc2VydmljZS10eXBlXCIsIFwiaW5wdXQtZW5hYmxlZFwiOiB0cnVlLCB3aWR0aDogXCJmdWxsXCIsIHR5cGU6IFwicmFkaW9cIiwgdmFsdWU6IGtleSwgb25DYWxjaXRlVGlsZVNlbGVjdENoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgIH0gfSkpO1xuICAgIH0pKSkpKTtcbiAgfVxuICBnZXQgZWxlbWVudCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNOZXdJdGVtUGFnZXNIeWJyaWRJbWFnZVNlbGVjdC5zdHlsZSA9IGFyY2dpc05ld0l0ZW1QYWdlc0h5YnJpZEltYWdlU2VsZWN0Q3NzO1xuXG5leHBvcnQgeyBBcmNnaXNOZXdJdGVtUGFnZXNIeWJyaWRJbWFnZVNlbGVjdCBhcyBhcmNnaXNfbmV3X2l0ZW1fcGFnZXNfaHlicmlkX2ltYWdlX3NlbGVjdCB9O1xuIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyBnIGFzIGdldFJlbmRlcmluZ1JlZiwgZiBhcyBmb3JjZVVwZGF0ZSB9IGZyb20gJy4vaW5kZXgtOTJlYmIzOTYuanMnO1xuXG5jb25zdCBhcHBlbmRUb01hcCA9IChtYXAsIHByb3BOYW1lLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IGl0ZW1zID0gbWFwLmdldChwcm9wTmFtZSk7XG4gICAgaWYgKCFpdGVtcykge1xuICAgICAgICBtYXAuc2V0KHByb3BOYW1lLCBbdmFsdWVdKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWl0ZW1zLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcbiAgICB9XG59O1xuY29uc3QgZGVib3VuY2UgPSAoZm4sIG1zKSA9PiB7XG4gICAgbGV0IHRpbWVvdXRJZDtcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKHRpbWVvdXRJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aW1lb3V0SWQgPSAwO1xuICAgICAgICAgICAgZm4oLi4uYXJncyk7XG4gICAgICAgIH0sIG1zKTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIHBvc3NpYmxlIGVsZW1lbnQgaXNDb25uZWN0ZWQuXG4gKiBUaGUgcHJvcGVydHkgbWlnaHQgbm90IGJlIHRoZXJlLCBzbyB3ZSBjaGVjayBmb3IgaXQuXG4gKlxuICogV2Ugd2FudCBpdCB0byByZXR1cm4gdHJ1ZSBpZiBpc0Nvbm5lY3RlZCBpcyBub3QgYSBwcm9wZXJ0eSxcbiAqIG90aGVyd2lzZSB3ZSB3b3VsZCByZW1vdmUgdGhlc2UgZWxlbWVudHMgYW5kIHdvdWxkIG5vdCB1cGRhdGUuXG4gKlxuICogQmV0dGVyIGxlYWsgaW4gRWRnZSB0aGFuIHRvIGJlIHVzZWxlc3MuXG4gKi9cbmNvbnN0IGlzQ29ubmVjdGVkID0gKG1heWJlRWxlbWVudCkgPT4gISgnaXNDb25uZWN0ZWQnIGluIG1heWJlRWxlbWVudCkgfHwgbWF5YmVFbGVtZW50LmlzQ29ubmVjdGVkO1xuY29uc3QgY2xlYW51cEVsZW1lbnRzID0gZGVib3VuY2UoKG1hcCkgPT4ge1xuICAgIGZvciAobGV0IGtleSBvZiBtYXAua2V5cygpKSB7XG4gICAgICAgIG1hcC5zZXQoa2V5LCBtYXAuZ2V0KGtleSkuZmlsdGVyKGlzQ29ubmVjdGVkKSk7XG4gICAgfVxufSwgMjAwMCk7XG5jb25zdCBzdGVuY2lsU3Vic2NyaXB0aW9uID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZ2V0UmVuZGVyaW5nUmVmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBub3QgaW4gYSBzdGVuY2lsIHByb2plY3QsIHdlIGRvIG5vdGhpbmcuXG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgbm90IHJlYWxseSBleHBvcnRlZCBieSBAc3RlbmNpbC9jb3JlLlxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IGVsbXNUb1VwZGF0ZSA9IG5ldyBNYXAoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkaXNwb3NlOiAoKSA9PiBlbG1zVG9VcGRhdGUuY2xlYXIoKSxcbiAgICAgICAgZ2V0OiAocHJvcE5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsbSA9IGdldFJlbmRlcmluZ1JlZigpO1xuICAgICAgICAgICAgaWYgKGVsbSkge1xuICAgICAgICAgICAgICAgIGFwcGVuZFRvTWFwKGVsbXNUb1VwZGF0ZSwgcHJvcE5hbWUsIGVsbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogKHByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IGVsbXNUb1VwZGF0ZS5nZXQocHJvcE5hbWUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgZWxtc1RvVXBkYXRlLnNldChwcm9wTmFtZSwgZWxlbWVudHMuZmlsdGVyKGZvcmNlVXBkYXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGVhbnVwRWxlbWVudHMoZWxtc1RvVXBkYXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGVsbXNUb1VwZGF0ZS5mb3JFYWNoKChlbG1zKSA9PiBlbG1zLmZvckVhY2goZm9yY2VVcGRhdGUpKTtcbiAgICAgICAgICAgIGNsZWFudXBFbGVtZW50cyhlbG1zVG9VcGRhdGUpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG5jb25zdCB1bndyYXAgPSAodmFsKSA9PiAodHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHZhbCgpIDogdmFsKTtcbmNvbnN0IGNyZWF0ZU9ic2VydmFibGVNYXAgPSAoZGVmYXVsdFN0YXRlLCBzaG91bGRVcGRhdGUgPSAoYSwgYikgPT4gYSAhPT0gYikgPT4ge1xuICAgIGNvbnN0IHVud3JhcHBlZFN0YXRlID0gdW53cmFwKGRlZmF1bHRTdGF0ZSk7XG4gICAgbGV0IHN0YXRlcyA9IG5ldyBNYXAoT2JqZWN0LmVudHJpZXModW53cmFwcGVkU3RhdGUgIT09IG51bGwgJiYgdW53cmFwcGVkU3RhdGUgIT09IHZvaWQgMCA/IHVud3JhcHBlZFN0YXRlIDoge30pKTtcbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgZGlzcG9zZTogW10sXG4gICAgICAgIGdldDogW10sXG4gICAgICAgIHNldDogW10sXG4gICAgICAgIHJlc2V0OiBbXSxcbiAgICB9O1xuICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIFdoZW4gcmVzZXR0aW5nIHRoZSBzdGF0ZSwgdGhlIGRlZmF1bHQgc3RhdGUgbWF5IGJlIGEgZnVuY3Rpb24gLSB1bndyYXAgaXQgdG8gaW52b2tlIGl0LlxuICAgICAgICAvLyBvdGhlcndpc2UsIHRoZSBzdGF0ZSB3b24ndCBiZSBwcm9wZXJseSByZXNldFxuICAgICAgICBzdGF0ZXMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKChfYSA9IHVud3JhcChkZWZhdWx0U3RhdGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpO1xuICAgICAgICBoYW5kbGVycy5yZXNldC5mb3JFYWNoKChjYikgPT4gY2IoKSk7XG4gICAgfTtcbiAgICBjb25zdCBkaXNwb3NlID0gKCkgPT4ge1xuICAgICAgICAvLyBDYWxsIGZpcnN0IGRpc3Bvc2UgYXMgcmVzZXR0aW5nIHRoZSBzdGF0ZSB3b3VsZFxuICAgICAgICAvLyBjYXVzZSBsZXNzIHVwZGF0ZXMgOylcbiAgICAgICAgaGFuZGxlcnMuZGlzcG9zZS5mb3JFYWNoKChjYikgPT4gY2IoKSk7XG4gICAgICAgIHJlc2V0KCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXQgPSAocHJvcE5hbWUpID0+IHtcbiAgICAgICAgaGFuZGxlcnMuZ2V0LmZvckVhY2goKGNiKSA9PiBjYihwcm9wTmFtZSkpO1xuICAgICAgICByZXR1cm4gc3RhdGVzLmdldChwcm9wTmFtZSk7XG4gICAgfTtcbiAgICBjb25zdCBzZXQgPSAocHJvcE5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gc3RhdGVzLmdldChwcm9wTmFtZSk7XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGUodmFsdWUsIG9sZFZhbHVlLCBwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIHN0YXRlcy5zZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNldC5mb3JFYWNoKChjYikgPT4gY2IocHJvcE5hbWUsIHZhbHVlLCBvbGRWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzdGF0ZSA9ICh0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnXG4gICAgICAgID8ge31cbiAgICAgICAgOiBuZXcgUHJveHkodW53cmFwcGVkU3RhdGUsIHtcbiAgICAgICAgICAgIGdldChfLCBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQocHJvcE5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG93bktleXMoXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHN0YXRlcy5rZXlzKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXMoXywgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVzLmhhcyhwcm9wTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KF8sIHByb3BOYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHNldChwcm9wTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgIGNvbnN0IG9uID0gKGV2ZW50TmFtZSwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgaGFuZGxlcnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZUZyb21BcnJheShoYW5kbGVyc1tldmVudE5hbWVdLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBvbkNoYW5nZSA9IChwcm9wTmFtZSwgY2IpID0+IHtcbiAgICAgICAgY29uc3QgdW5TZXQgPSBvbignc2V0JywgKGtleSwgbmV3VmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgY2IobmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB1bndyYXAgdGhlIGRlZmF1bHRTdGF0ZSBiZWNhdXNlIGl0IG1pZ2h0IGJlIGEgZnVuY3Rpb24uXG4gICAgICAgIC8vIE90aGVyd2lzZSB3ZSBtaWdodCBub3QgYmUgc2VuZGluZyB0aGUgcmlnaHQgcmVzZXQgdmFsdWUuXG4gICAgICAgIGNvbnN0IHVuUmVzZXQgPSBvbigncmVzZXQnLCAoKSA9PiBjYih1bndyYXAoZGVmYXVsdFN0YXRlKVtwcm9wTmFtZV0pKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHVuU2V0KCk7XG4gICAgICAgICAgICB1blJlc2V0KCk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCB1c2UgPSAoLi4uc3Vic2NyaXB0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCB1bnN1YnMgPSBzdWJzY3JpcHRpb25zLnJlZHVjZSgodW5zdWJzLCBzdWJzY3JpcHRpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uc2V0KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzLnB1c2gob24oJ3NldCcsIHN1YnNjcmlwdGlvbi5zZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uZ2V0KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzLnB1c2gob24oJ2dldCcsIHN1YnNjcmlwdGlvbi5nZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24ucmVzZXQpIHtcbiAgICAgICAgICAgICAgICB1bnN1YnMucHVzaChvbigncmVzZXQnLCBzdWJzY3JpcHRpb24ucmVzZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uZGlzcG9zZSkge1xuICAgICAgICAgICAgICAgIHVuc3Vicy5wdXNoKG9uKCdkaXNwb3NlJywgc3Vic2NyaXB0aW9uLmRpc3Bvc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bnN1YnM7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHVuc3Vicy5mb3JFYWNoKCh1bnN1YikgPT4gdW5zdWIoKSk7XG4gICAgfTtcbiAgICBjb25zdCBmb3JjZVVwZGF0ZSA9IChrZXkpID0+IHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBzdGF0ZXMuZ2V0KGtleSk7XG4gICAgICAgIGhhbmRsZXJzLnNldC5mb3JFYWNoKChjYikgPT4gY2Ioa2V5LCBvbGRWYWx1ZSwgb2xkVmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBnZXQsXG4gICAgICAgIHNldCxcbiAgICAgICAgb24sXG4gICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICB1c2UsXG4gICAgICAgIGRpc3Bvc2UsXG4gICAgICAgIHJlc2V0LFxuICAgICAgICBmb3JjZVVwZGF0ZSxcbiAgICB9O1xufTtcbmNvbnN0IHJlbW92ZUZyb21BcnJheSA9IChhcnJheSwgaXRlbSkgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICAgICAgYXJyYXkubGVuZ3RoLS07XG4gICAgfVxufTtcblxuY29uc3QgY3JlYXRlU3RvcmUgPSAoZGVmYXVsdFN0YXRlLCBzaG91bGRVcGRhdGUpID0+IHtcbiAgICBjb25zdCBtYXAgPSBjcmVhdGVPYnNlcnZhYmxlTWFwKGRlZmF1bHRTdGF0ZSwgc2hvdWxkVXBkYXRlKTtcbiAgICBtYXAudXNlKHN0ZW5jaWxTdWJzY3JpcHRpb24oKSk7XG4gICAgcmV0dXJuIG1hcDtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlIGFzIGMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==