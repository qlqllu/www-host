"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-e1f0d3"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-lazy-loading-list.entry.js":
/*!***************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-lazy-loading-list.entry.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_lazy_loading_list: () => (/* binding */ ArcgisLazyLoadingList)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






const arcgisLazyLoadingListCss = ":host{display:flex;flex-direction:column;overflow:hidden}.pop-menu{display:flex;flex-direction:column;position:absolute;max-height:100%;width:100%;overflow-y:hidden;border:1px solid var(--calcite-ui-border-3)}.pop-menu.pop-menu-flyout{top:0px;left:0px;z-index:100}.pop-list{overflow-y:scroll}";

const ArcgisLazyLoadingList = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLazyLoadingListChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLazyLoadingListChange", 7);
    this.hasSelectedScrolled = false;
    this.suspendObserver = false;
    this.scrollingDown = true;
    // TODO: dom query actual height (48 + 8) to reduce scroll when the list is very short
    this.filterHeight = 56;
    this.itemHeight = 32.5;
    this.itemHeightAdjusted = false;
    this.listChange = async () => {
      const selectedValues = await this.refListNode.getSelectedItems();
      // risk of 2 when filter is used and the pick list is updated frequently
      // this was found during dev, it's probably no longer the case.
      const selectedValue = [...selectedValues.keys()].pop();
      const selectedIndex = this.list.findIndex(({ value }) => value === selectedValue);
      this.arcgisLazyLoadingListChange.emit({
        selectedValue,
        selectedIndex
      });
    };
    this.updateFilter = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.d)(() => {
      const filteredItems = this.refFilterNode
        .filteredItems;
      if (!filteredItems.length) {
        return;
      }
      const set = new Set(filteredItems.map(({ label }) => label));
      this.suspendObserver = true;
      this.filterList = this.list.filter(({ label }) => set.has(label));
      this.pageRanges = [0, 1];
      this.pageId = 0;
    }, 100);
    this.list = undefined;
    this.popoverProps = undefined;
    this.selectedIndex = 0;
    this.strings = undefined;
    this.showFilter = false;
    this.pageSize = 500;
    this.accumulatePages = true;
    this.position = "auto";
    this.pageBufferSize = 10;
    this.flyOut = false;
    this.listType = "pick-list";
    this.pageId = 0;
    this.filterList = undefined;
  }
  watchSelectedIndex(newValue) {
    this.updatePageId(newValue);
  }
  watchList(newValue) {
    // reset locked "auto" position
    this.listLabels = newValue.map(({ label }) => ({ label }));
    this.lockedMenuPosition = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    this.listLabels = this.list.map(({ label }) => ({ label }));
    const pageIdMax = Math.floor(this.list.length / this.pageSize);
    if (pageIdMax < 2) {
      return;
    }
    this.updatePageId();
    this.setupObserver(pageIdMax);
  }
  componentDidRender() {
    // manipulate dom style at most once when initial item height is not accurate
    // TODO: delay auto menu position lock until item height adjustment
    if (this.flyOut && !this.itemHeightAdjusted && this.refSelectedNode) {
      const itemHeight = this.refSelectedNode.getBoundingClientRect().height;
      if (this.itemHeight !== itemHeight) {
        this.itemHeight = itemHeight;
        const { height, translateX, translateY } = this.getListPosition();
        this.refMenuNode.style.height = `${height}px`;
        this.refMenuNode.style.transform = `translate(${translateX}px, ${translateY}px)`;
      }
      this.itemHeightAdjusted = true;
    }
    requestAnimationFrame(() => {
      // scroll (at most once) selected node into view
      if (!this.hasSelectedScrolled && this.refSelectedNode) {
        this.refSelectedNode.scrollIntoView();
        this.hasSelectedScrolled = true;
      }
      // scroll anchor nodes when needed
      if (this.pendingScroll) {
        this.pendingScroll();
      }
      requestAnimationFrame(() => {
        // start observing after scrolling
        const { observer, refFirstnode, refLastnode } = this;
        if (observer) {
          this.suspendObserver = false;
          refFirstnode && observer.observe(refFirstnode);
          refLastnode && observer.observe(refLastnode);
        }
      });
    });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    var _a, _b;
    this.suspendObserver = true;
    let style;
    if (this.flyOut) {
      const { width, height, translateX, translateY } = this.getListPosition();
      // todo: refine translateY when it's drop-up and the list is short
      style = {
        width: `${width}px`,
        height: `${height}px`,
        transform: this.flyOut && `translate(${translateX}px, ${translateY}px)`
      };
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: this.flyOut && "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: this.flyOut ? "pop-menu pop-menu-flyout" : "pop-menu", style: style, ref: (node) => (this.refMenuNode = node) }, this.showFilter && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-filter", { items: this.listLabels, messageOverrides: {
        clear: (_a = this.strings) === null || _a === void 0 ? void 0 : _a.clearFilter,
        label: (_b = this.strings) === null || _b === void 0 ? void 0 : _b.filterLabel
      }, onCalciteFilterChange: this.updateFilter, ref: (node) => (this.refFilterNode = node) }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "pop-list" }, this.renderList()))));
  }
  renderList() {
    const { pageBufferSize } = this;
    const halfPageBufferSize = Math.floor(pageBufferSize / 2);
    const subList = this.getSubList();
    const selectionId = this.getSelectedIndex();
    const selectedItem = this.list[selectionId];
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), ref: (node) => {
        if (this.refListNode) {
          this.refListNode.removeEventListener("calciteListChange", this.listChange);
        }
        node.addEventListener("calciteListChange", this.listChange);
        this.refListNode = node;
      }, multiple: false, filterEnabled: false }, subList.map(({ value, label }, i) => (
    // TODO: this could be refactored to take an external render method, similar to renderRow in DGrid
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { value: value, label: label, key: label, selected: value === selectedItem.value, ref: !this.hasSelectedScrolled && label === selectedItem.label
        ? (node) => {
          this.refSelectedNode = node;
        }
        : i === subList.length - halfPageBufferSize
          ? (node) => {
            var _a;
            if (node) {
              this.refLastnode && ((_a = this.observer) === null || _a === void 0 ? void 0 : _a.unobserve(this.refLastnode));
              this.refLastnode = node;
            }
          }
          : i === subList.length - pageBufferSize
            ? (node) => {
              if (node) {
                this.refSecondLastnode = node;
              }
            }
            : i === halfPageBufferSize
              ? (node) => {
                var _a;
                if (node) {
                  this.refFirstnode && ((_a = this.observer) === null || _a === void 0 ? void 0 : _a.unobserve(this.refFirstnode));
                  this.refFirstnode = node;
                }
              }
              : i === pageBufferSize
                ? (node) => {
                  if (node) {
                    this.refSecondnode = node;
                  }
                }
                : null })))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  getSelectedIndex(value = this.selectedIndex) {
    return value >= this.list.length ? 0 : value;
  }
  getListPosition() {
    const { width, left: translateX, top, bottom, containerTop, containerBottom } = this.popoverProps;
    const list = this.filterList || this.list;
    const listHeight = this.itemHeight * list.length + (this.showFilter ? this.filterHeight : 0);
    const clientHeight = containerBottom > bottom ? containerBottom : document.body.clientHeight;
    const spaceBottom = clientHeight - bottom;
    const spaceTop = top - containerTop;
    // autoPosition is only initialized once per list, so it doesn't flip when filterList changes
    if (!this.lockedMenuPosition) {
      if (this.position === "auto") {
        // allow a third of the list to be scrolled, or goden ratio
        this.lockedMenuPosition =
          listHeight * 1.5 <= spaceBottom || spaceTop / (spaceTop + spaceBottom) < 0.618
            ? "down"
            : "up";
      }
      else {
        this.lockedMenuPosition = this.position === "down" ? "down" : "up";
      }
    }
    const isDropdown = this.lockedMenuPosition === "down";
    const height = isDropdown
      ? Math.min(listHeight, spaceBottom - 2)
      : Math.min(listHeight, spaceTop - 2);
    const translateY = isDropdown ? bottom : Math.max(containerTop, top - height);
    return { width, height, translateX, translateY };
  }
  getSubList() {
    const useAccumulatedPageId = !!(this.accumulatePages && this.pageRanges);
    const firstId = useAccumulatedPageId ? Math.min(this.pageRanges[0], this.pageId) : this.pageId;
    const lastId = useAccumulatedPageId
      ? Math.max(this.pageRanges[1], this.pageId + 1)
      : this.pageId + 1;
    const list = this.filterList || this.list;
    const { pageBufferSize } = this;
    // TODO: we could handle a async fetch-ed list here
    const subList = list.slice(firstId === 0 ? 0 : firstId * this.pageSize - pageBufferSize, lastId * this.pageSize + pageBufferSize);
    if (this.accumulatePages) {
      this.pageRanges = [firstId, lastId];
    }
    return subList;
  }
  setupObserver(pageIdMax) {
    // observe anchor nodes to determine whether lazy loading is needed
    this.observer = new IntersectionObserver((entries, _observer) => {
      if (this.suspendObserver) {
        return;
      }
      entries = entries.filter(({ isIntersecting }) => isIntersecting);
      let pageUpdated = false;
      // when only one node is intersecting, increase or decrease page id
      if (entries.length === 1) {
        const entry = entries[0];
        // scrolling downwards to make last item visible
        if (this.refLastnode && entry.target.label === this.refLastnode.label) {
          if (this.pageId < pageIdMax) {
            this.pageId++;
            pageUpdated = true;
            this.scrollingDown = true;
            if (!this.accumulatePages) {
              // hide refFirst node since it will appear and can't be detected by observer
              this.pendingScroll = () => { var _a; return this.pageId > 0 && ((_a = this.refSecondnode) === null || _a === void 0 ? void 0 : _a.scrollIntoView(true)); };
            }
          }
        }
        else if (this.pageId > 0) {
          // scrolling upwards to avoid stuck scroll position by make first item in the old page visible
          this.pageId--;
          if (this.accumulatePages) {
            const node = entry.target;
            this.pendingScroll = () => {
              node.scrollIntoView();
              this.pendingScroll = null;
            };
          }
          else {
            this.pendingScroll = () => {
              var _a;
              // bottom position instead of default center position to avoid bottom node to appear
              (_a = this.refSecondLastnode) === null || _a === void 0 ? void 0 : _a.scrollIntoView(false);
              this.pendingScroll = null;
            };
          }
          pageUpdated = true;
          this.scrollingDown = false;
        }
      }
      else if (entries.length === 2) {
        // both anchor nodes are visible (short page)
        if (this.pageId === pageIdMax) {
          this.pageId--;
          if (this.accumulatePages) {
            const node = this.refLastnode;
            this.pendingScroll = () => {
              // default is center position
              node.scrollIntoView();
              this.pendingScroll = null;
            };
          }
          pageUpdated = true;
          this.scrollingDown = false;
        }
      }
      if (pageUpdated) {
        _observer.unobserve(this.refLastnode);
        _observer.unobserve(this.refFirstnode);
      }
    });
  }
  updatePageId(selectedIndex = this.selectedIndex) {
    selectedIndex = this.getSelectedIndex(selectedIndex);
    const pageId = Math.floor(selectedIndex / this.pageSize);
    if (pageId !== this.pageId) {
      this.pageId = pageId;
    }
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "selectedIndex": ["watchSelectedIndex"],
    "list": ["watchList"]
  }; }
};
ArcgisLazyLoadingList.style = arcgisLazyLoadingListCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,