"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-177d7b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-popup-color-button.entry.js":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-popup-color-button.entry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_popup_color_button: () => (/* binding */ ArcgisPopupColorButton)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./popupStore-a5d93b58.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */







const arcgisPopupColorButtonCss = ".color-selector{display:flex;padding:6px;justify-content:space-between;align-items:center;border-radius:0;cursor:pointer;background-color:var(--calcite-ui-foreground-1);color:var(--calcite-ui-text-1);border-color:var(--calcite-ui-foreground-3);border-width:1px;border-style:solid;box-shadow:transparent 0px 0px 0px 1px inset}.color-selector:hover{box-shadow:inset 0 0 0 1px var(--calcite-ui-foreground-3)}.color-selector:active{box-shadow:inset 0 0 0 2px var(--calcite-ui-foreground-3)}.color-selector:focus{box-shadow:inset 0 0 0 2px var(--calcite-ui-foreground-3);outline:2px solid var(--calcite-ui-brand);outline-offset:2px}.color-selector.selected{box-shadow:inset 0 0 0 2px var(--calcite-ui-foreground-3)}.color-icon-section{height:16px;display:inline-block}.color-icon{width:100%;height:16px;overflow:hidden;border-radius:0}.color-icon.transparent{height:15px;width:100%}.color-icon.transparent svg{height:15px;width:95%;stroke:#e0e0e0;stroke-width:1px}.color-edit-button{padding:1px;height:18px;width:18px;border:none;cursor:pointer;color:var(--calcite-ui-icon-color)}.color-edit-button:focus{outline:none}";

const MAX_RAMP_COLORS = 10;
const ArcgisPopupColorButton = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisPopupColorButtonChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupColorButtonChange", 7);
    this.arcgisPopupColorButtonBeforeOpen = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupColorButtonBeforeOpen", 7);
    this.resizeObserver = new ResizeObserver(() => {
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    });
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.handleClick = async () => {
      const { popoverReferenceElement, popoverNode, buttonNode, colors, strings, esriColor, esriLang } = this;
      if (popoverNode) {
        this.onPopoverClose();
      }
      else if (colors.length === 1) {
        this.arcgisPopupColorButtonBeforeOpen.emit();
        this.selected = true;
        const popover = document.createElement("arcgis-popup-color-popover");
        popover.heading = strings.selectColor;
        popover.intlDone = strings.done;
        popover.label = strings.selectColor;
        popover.hexColor = colors[0].toHex();
        popover.popoverProps = {
          placement: "leading-start",
          offsetDistance: 1,
          offsetSkidding: 52,
          pointerDisabled: "true",
          popoverWidth: 315,
          //overlayPositioning: "fixed", -- buggy, offset issue
          refElement: typeof popoverReferenceElement === "string"
            ? document.getElementById(popoverReferenceElement)
            : popoverReferenceElement
        };
        popover.addEventListener("arcgisPopupColorPopoverClose", () => {
          this.popoverNode = null;
        });
        popover.addEventListener("arcgisPopupColorPopoverChange", ({ detail: hexColor }) => {
          this.colors[0] = new esriColor(hexColor);
          // once the user makes a change we save all colors
          this.chartMediaInfo.value.colors = esriLang.clone(this.colors);
          this.arcgisPopupColorButtonChange.emit(esriLang.clone(this.colors));
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        });
        document.body.appendChild(popover);
        popover.setOpen(true);
        this.popoverNode = popover;
      }
      else {
        this.arcgisPopupColorButtonBeforeOpen.emit();
        this.selected = true;
        const symbolStylerDiv = document.createElement("div");
        symbolStylerDiv.className = "symbol-styler-div";
        this.popoverNode = this.createSymbolStylerPopover({
          referenceElement: typeof popoverReferenceElement === "string"
            ? document.getElementById(popoverReferenceElement)
            : popoverReferenceElement
        });
        this.popoverNode.addEventListener("arcgisPopupStylerPopoverClose", () => {
          this.onPopoverClose();
          // if we do this too early the enter key executes on the focused div
          setTimeout(() => buttonNode.focus(), 300);
        });
        this.popoverNode.addEventListener("arcgisPopupStylerPopoverDisconnected", () => {
          this.onPopoverClose();
        });
        this.symbolStylerWatchScaleHandle = await this.buildSymbolStylerForRamp({
          popoverNode: this.popoverNode,
          onChange: () => {
            var _a;
            // once the user makes a change we save all colors
            ((_a = this.chartMediaInfo) === null || _a === void 0 ? void 0 : _a.value).colors = esriLang.clone(this.colors);
            this.arcgisPopupColorButtonChange.emit(esriLang.clone(this.colors));
          }
        });
      }
    };
    this.popoverReferenceElement = undefined;
    this.chartMediaInfo = undefined;
    this.colors = undefined;
    this.selected = false;
    this.symbolNodeWidth = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    var _a;
    (_a = this.buttonNode) === null || _a === void 0 ? void 0 : _a.focus();
  }
  async closePopover() {
    this.onPopoverClose();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    this.layer = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_1__.p.layer;
    this.mapView = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_1__.p.mapView;
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_1__.p.strings;
    this.portal = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_1__.p.portal;
    this.popupTemplate = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_1__.p.popupTemplate;
    const [esriLang, esriColor, pieChartSchemes, SimpleFillSymbol] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
      "esri/core/lang",
      "esri/Color",
      "esri/smartMapping/symbology/pieChart",
      "esri/symbols/SimpleFillSymbol"
    ]);
    this.esriLang = esriLang;
    this.esriColor = esriColor;
    this.pieChartSchemes = pieChartSchemes;
    this.SimpleFillSymbol = SimpleFillSymbol;
  }
  async componentDidLoad() {
    // for correct width
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    this.resizeObserver.observe(this.buttonNode);
  }
  disconnectedCallback() {
    this.resizeObserver.unobserve(this.buttonNode);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { id: "color-button-label", scale: "s" }, strings.color, this.renderButton())));
  }
  renderButton() {
    const { colors, selected } = this;
    let colorsIcon = (colors === null || colors === void 0 ? void 0 : colors.length)
      ? colors
        .filter((_, idx2) => idx2 < MAX_RAMP_COLORS)
        .map((color, idx) => {
        var _a;
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: `color-button-icon-${idx}`, class: "color-icon-section", style: {
            width: `${95 / Math.min(10, Math.min(MAX_RAMP_COLORS, colors.length))}%`,
            backgroundColor: `${(_a = color === null || color === void 0 ? void 0 : color.toHex()) !== null && _a !== void 0 ? _a : "#ffffff"}`
          } }));
      })
      : null;
    const colorClasses = {
      "color-selector": true,
      selected
    };
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: colorClasses, onClick: this.handleClick, role: "button", tabIndex: 0, "aria-labelledby": "color-button-label", "aria-haspopup": "true", "aria-expanded": !!selected, ref: (node) => {
        this.buttonNode = node;
        node.addEventListener("keyup", (event) => {
          if (event.key === " " || event.key === "Enter") {
            this.handleClick();
          }
        });
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-icon", "aria-hidden": "true" }, colorsIcon), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-edit-button" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "pencil" }))));
  }
  onPopoverClose() {
    var _a;
    if (this.colors.length === 1) {
      this.popoverNode && document.body.removeChild(this.popoverNode);
    }
    else {
      (_a = this.symbolStylerWatchScaleHandle) === null || _a === void 0 ? void 0 : _a.remove();
      this.popoverNode &&
        this.removeSymbolStylerPopover(this.popoverNode);
    }
    this.selected = false;
    this.popoverNode = undefined;
  }
  createSymbolStylerPopover(props) {
    const { referenceElement } = props;
    const popover = document.createElement("arcgis-popup-styler-popover");
    popover.referenceElement = referenceElement;
    document.body.appendChild(popover);
    popover.setOpen(true);
    popover.reposition();
    return popover;
  }
  removeSymbolStylerPopover(popover) {
    var _a;
    if (popover === null || popover === void 0 ? void 0 : popover.parentNode) {
      popover.open = false;
      (_a = popover.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(popover);
    }
  }
  async createSymbolStylerElement(popoverNode) {
    const symbolStyler = document.createElement("arcgis-symbol-styler");
    symbolStyler.style = "max-height: max(calc(100vh - 200px), 300px)"; // not the best, but easiest
    symbolStyler.popoverProps = {
      placement: "bottom-end",
      offsetDistance: 10,
      offsetSkidding: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement) === "rtl" ? 3 : -3,
      pointerDisabled: "true",
      popoverWidth: 315,
      //overlayPositioning: "fixed", -- buggy, offset issue
      refElement: await popoverNode.getPopoverRefElement()
    };
    return symbolStyler;
  }
  async buildSymbolStylerForRamp(options) {
    const { mapView, portal, colors, strings, esriLang } = this;
    const { popoverNode } = options;
    const currentColors = this.esriLang.clone(colors.filter((_, idx2) => idx2 < MAX_RAMP_COLORS));
    const schemes = this.pieChartSchemes.getSchemes({
      basemap: mapView.map.basemap,
      geometryType: "polygon",
      numColors: Math.min(MAX_RAMP_COLORS, colors.length)
    });
    const colorRampsAndSchemes = this.getColorRampsWithSchemes(schemes);
    const colorRamps = colorRampsAndSchemes.map((obj) => {
      return {
        stops: obj.colors.reverse(),
        tags: obj.scheme.tags,
        name: obj.scheme.name
      };
    });
    const onStylerEdit = ({ detail: { 
    //symbol,
    info: { /* marker, stroke, */ fill } } }) => {
      var _a;
      const colors = esriLang.clone(fill.color).reverse();
      if (colors.length < this.colors.length) {
        // repeat
        const len = colors.length;
        for (let i = len; i < this.colors.length; i++) {
          colors.push(this.esriLang.clone(colors[i % MAX_RAMP_COLORS]));
        }
      }
      ((_a = this.chartMediaInfo) === null || _a === void 0 ? void 0 : _a.value).colors = colors;
      this.colors = colors;
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      this.arcgisPopupColorButtonChange.emit(this.esriLang.clone(this.colors));
    };
    const symbolStyler = await this.createSymbolStylerElement(popoverNode);
    const edit = symbolStyler.edit(new this.SimpleFillSymbol(), {
      portal,
      sections: {
        marker: {
          parts: {
            preview: false,
            rotation: false,
            size: false
          }
        },
        fill: {
          type: "color-ramp",
          style: "discrete",
          open: true,
          colorRampsOpen: true,
          colorRamps,
          parts: {
            transparency: false // temp /arcgis-js-api/issues/27188
          }
        }
      },
      fill: {
        color: currentColors.reverse()
      }
    });
    symbolStyler.stringOverrides = {
      fillColor: strings.color
    };
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEdit);
    popoverNode.addStyler(symbolStyler);
    await edit;
  }
  getColorRampsWithSchemes(schemes) {
    const allSchemes = [schemes.primaryScheme].concat(schemes.secondarySchemes), colorRampsAndSchemes = [];
    allSchemes.forEach((scheme) => {
      colorRampsAndSchemes.push({
        colors: scheme.colors,
        scheme
      });
    });
    return colorRampsAndSchemes;
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupColorButton.style = arcgisPopupColorButtonCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ clearPopupState),
/* harmony export */   p: () => (/* binding */ popupState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const popupStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  layer: null,
  mapView: null,
  portal: null,
  config: null,
  strings: null,
  currentLanguage: null,
  currentLanguageIntl: null,
  serviceType: null,
  popupTemplate: null,
  layerHasAttachment: null,
  layerHasET: null,
  layerHasAttributes: null,
  layerHasCharts: null,
  layerHasImages: null,
  layerHasText: null,
  layerDisplayType: null,
  supportsArcade: null,
  layerHasRelatedRecords: false
});
// workaround for starting a panel with a clean state
function clearPopupState(popupState) {
  popupState.layer = null;
  popupState.mapView = null;
  popupState.portal = null;
  popupState.config = null;
  popupState.strings = null;
  popupState.currentLanguage = null;
  popupState.currentLanguageIntl = null;
  popupState.serviceType = null;
  popupState.popupTemplate = null;
  popupState.layerHasAttachment = null;
  popupState.layerHasET = null;
  popupState.layerHasAttributes = null;
  popupState.layerHasCharts = null;
  popupState.layerHasImages = null;
  popupState.layerHasText = null;
  popupState.layerDisplayType = null;
  popupState.supportsArcade = null;
  popupState.layerHasRelatedRecords = false;
}
const popupState = popupStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,