"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-drag-li-97d421"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-list-item-handle.entry.js":
/*!*******************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-list-item-handle.entry.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_drag_list_item_handle: () => (/* binding */ ArcgisDragNDropHandler)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const arcgisDragListItemHandleCss = ".arcgis-drag-list-item-handle{display:flex;justify-content:center;align-items:center;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;text-align:center;text-decoration:none;border-radius:0;box-sizing:border-box;padding:0;grid-gap:0.5rem;gap:0.5rem;position:relative;height:100%;background-color:transparent;outline-color:transparent;font-family:inherit;outline-offset:0}";

const ArcgisDragNDropHandler = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisHandlerDrag = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisHandlerDrag", 7);
    this.arcgisHandlerNavigation = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisHandlerNavigation", 7);
    this.handleKeys = (event) => {
      const { isActive, closestItem } = this;
      const { code } = event;
      if (code === "Space") {
        this.isActive = !isActive;
        return;
      }
      if (!isActive || (code !== "ArrowUp" && code !== "ArrowDown")) {
        return;
      }
      switch (code) {
        case "ArrowUp":
          this.arcgisHandlerNavigation.emit({
            direction: "up",
            handlerEle: this.ele,
            closestItem,
            event
          });
          break;
        case "ArrowDown":
          this.arcgisHandlerNavigation.emit({
            direction: "down",
            handlerEle: this.ele,
            closestItem,
            event
          });
          break;
      }
    };
    this.handleBlur = () => {
      this.isActive = false;
    };
    this.isActive = false;
  }
  async activateHandler() {
    var _a;
    (_a = this.buttonRef) === null || _a === void 0 ? void 0 : _a.focus();
    this.isActive = true;
  }
  componentWillLoad() {
    const { ele, arcgisHandlerDrag } = this;
    const itemTag = "arcgis-drag-list-item";
    const closestItem = ele.closest(itemTag);
    if (!closestItem) {
      console.warn(`Handler is not inside a arcgis-drag-list-item! ${ele}`);
      return;
    }
    this.closestItem = closestItem;
    const singleEvents = ["dragend", "dragstart"];
    singleEvents.forEach((eventType) => {
      ele.addEventListener(eventType, (event) => {
        if (eventType === "dragstart") {
          event.dataTransfer.effectAllowed = "move";
          closestItem.classList.add("arcgis-drag-list-item--dragging");
        }
        else {
          closestItem.classList.remove("arcgis-drag-list-item--dragging");
        }
        const siblingList = Array.from(closestItem.parentElement.querySelectorAll(itemTag));
        const index = siblingList.indexOf(closestItem);
        arcgisHandlerDrag.emit({ eventType, event, eventTarget: { index, ele: closestItem } });
      });
    });
  }
  render() {
    const { handleKeys, handleBlur, isActive } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: {
        "arcgis-drag-list-item-handle": true,
        "arcgis-drag-list-item-handle--active": isActive
      }, draggable: true, onBlur: handleBlur, onKeyDown: handleKeys, ref: (ele) => (this.buttonRef = ele) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
  get ele() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisDragNDropHandler.style = arcgisDragListItemHandleCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWRyYWctbGktOTdkNDIxLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDa0c7O0FBRWxHLG1FQUFtRSxhQUFhLHVCQUF1QixtQkFBbUIsZUFBZSx5QkFBeUIsc0JBQXNCLGlCQUFpQixrQkFBa0IscUJBQXFCLGdCQUFnQixzQkFBc0IsVUFBVSxnQkFBZ0IsV0FBVyxrQkFBa0IsWUFBWSw2QkFBNkIsMEJBQTBCLG9CQUFvQixpQkFBaUI7O0FBRXJiO0FBQ0E7QUFDQSxJQUFJLHFEQUFnQjtBQUNwQiw2QkFBNkIscURBQVc7QUFDeEMsbUNBQW1DLHFEQUFXO0FBQzlDO0FBQ0EsY0FBYyx3QkFBd0I7QUFDdEMsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUJBQXlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxJQUFJO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxpQ0FBaUMsMkJBQTJCO0FBQzdGLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DLFlBQVkscURBQUMsYUFBYTtBQUMxQjtBQUNBO0FBQ0EsT0FBTyxvR0FBb0csRUFBRSxxREFBQztBQUM5RztBQUNBLGNBQWMsT0FBTyxxREFBVTtBQUMvQjtBQUNBOztBQUVrRSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FyY2dpcy1kcmFnLWxpc3QtaXRlbS1oYW5kbGUuZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIGQgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtOTJlYmIzOTYuanMnO1xuXG5jb25zdCBhcmNnaXNEcmFnTGlzdEl0ZW1IYW5kbGVDc3MgPSBcIi5hcmNnaXMtZHJhZy1saXN0LWl0ZW0taGFuZGxle2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Ym9yZGVyLXJhZGl1czowO2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjA7Z3JpZC1nYXA6MC41cmVtO2dhcDowLjVyZW07cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtvdXRsaW5lLWNvbG9yOnRyYW5zcGFyZW50O2ZvbnQtZmFtaWx5OmluaGVyaXQ7b3V0bGluZS1vZmZzZXQ6MH1cIjtcblxuY29uc3QgQXJjZ2lzRHJhZ05Ecm9wSGFuZGxlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5hcmNnaXNIYW5kbGVyRHJhZyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzSGFuZGxlckRyYWdcIiwgNyk7XG4gICAgdGhpcy5hcmNnaXNIYW5kbGVyTmF2aWdhdGlvbiA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzSGFuZGxlck5hdmlnYXRpb25cIiwgNyk7XG4gICAgdGhpcy5oYW5kbGVLZXlzID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB7IGlzQWN0aXZlLCBjbG9zZXN0SXRlbSB9ID0gdGhpcztcbiAgICAgIGNvbnN0IHsgY29kZSB9ID0gZXZlbnQ7XG4gICAgICBpZiAoY29kZSA9PT0gXCJTcGFjZVwiKSB7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSAhaXNBY3RpdmU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBY3RpdmUgfHwgKGNvZGUgIT09IFwiQXJyb3dVcFwiICYmIGNvZGUgIT09IFwiQXJyb3dEb3duXCIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgIHRoaXMuYXJjZ2lzSGFuZGxlck5hdmlnYXRpb24uZW1pdCh7XG4gICAgICAgICAgICBkaXJlY3Rpb246IFwidXBcIixcbiAgICAgICAgICAgIGhhbmRsZXJFbGU6IHRoaXMuZWxlLFxuICAgICAgICAgICAgY2xvc2VzdEl0ZW0sXG4gICAgICAgICAgICBldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgICAgdGhpcy5hcmNnaXNIYW5kbGVyTmF2aWdhdGlvbi5lbWl0KHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJkb3duXCIsXG4gICAgICAgICAgICBoYW5kbGVyRWxlOiB0aGlzLmVsZSxcbiAgICAgICAgICAgIGNsb3Nlc3RJdGVtLFxuICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuaGFuZGxlQmx1ciA9ICgpID0+IHtcbiAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgfVxuICBhc3luYyBhY3RpdmF0ZUhhbmRsZXIoKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IHRoaXMuYnV0dG9uUmVmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgfVxuICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICBjb25zdCB7IGVsZSwgYXJjZ2lzSGFuZGxlckRyYWcgfSA9IHRoaXM7XG4gICAgY29uc3QgaXRlbVRhZyA9IFwiYXJjZ2lzLWRyYWctbGlzdC1pdGVtXCI7XG4gICAgY29uc3QgY2xvc2VzdEl0ZW0gPSBlbGUuY2xvc2VzdChpdGVtVGFnKTtcbiAgICBpZiAoIWNsb3Nlc3RJdGVtKSB7XG4gICAgICBjb25zb2xlLndhcm4oYEhhbmRsZXIgaXMgbm90IGluc2lkZSBhIGFyY2dpcy1kcmFnLWxpc3QtaXRlbSEgJHtlbGV9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY2xvc2VzdEl0ZW0gPSBjbG9zZXN0SXRlbTtcbiAgICBjb25zdCBzaW5nbGVFdmVudHMgPSBbXCJkcmFnZW5kXCIsIFwiZHJhZ3N0YXJ0XCJdO1xuICAgIHNpbmdsZUV2ZW50cy5mb3JFYWNoKChldmVudFR5cGUpID0+IHtcbiAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudFR5cGUgPT09IFwiZHJhZ3N0YXJ0XCIpIHtcbiAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwibW92ZVwiO1xuICAgICAgICAgIGNsb3Nlc3RJdGVtLmNsYXNzTGlzdC5hZGQoXCJhcmNnaXMtZHJhZy1saXN0LWl0ZW0tLWRyYWdnaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNsb3Nlc3RJdGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJhcmNnaXMtZHJhZy1saXN0LWl0ZW0tLWRyYWdnaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpYmxpbmdMaXN0ID0gQXJyYXkuZnJvbShjbG9zZXN0SXRlbS5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoaXRlbVRhZykpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHNpYmxpbmdMaXN0LmluZGV4T2YoY2xvc2VzdEl0ZW0pO1xuICAgICAgICBhcmNnaXNIYW5kbGVyRHJhZy5lbWl0KHsgZXZlbnRUeXBlLCBldmVudCwgZXZlbnRUYXJnZXQ6IHsgaW5kZXgsIGVsZTogY2xvc2VzdEl0ZW0gfSB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhbmRsZUtleXMsIGhhbmRsZUJsdXIsIGlzQWN0aXZlIH0gPSB0aGlzO1xuICAgIHJldHVybiAoaChcImJ1dHRvblwiLCB7IGNsYXNzOiB7XG4gICAgICAgIFwiYXJjZ2lzLWRyYWctbGlzdC1pdGVtLWhhbmRsZVwiOiB0cnVlLFxuICAgICAgICBcImFyY2dpcy1kcmFnLWxpc3QtaXRlbS1oYW5kbGUtLWFjdGl2ZVwiOiBpc0FjdGl2ZVxuICAgICAgfSwgZHJhZ2dhYmxlOiB0cnVlLCBvbkJsdXI6IGhhbmRsZUJsdXIsIG9uS2V5RG93bjogaGFuZGxlS2V5cywgcmVmOiAoZWxlKSA9PiAodGhpcy5idXR0b25SZWYgPSBlbGUpIH0sIGgoXCJzbG90XCIsIG51bGwpKSk7XG4gIH1cbiAgZ2V0IGVsZSgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNEcmFnTkRyb3BIYW5kbGVyLnN0eWxlID0gYXJjZ2lzRHJhZ0xpc3RJdGVtSGFuZGxlQ3NzO1xuXG5leHBvcnQgeyBBcmNnaXNEcmFnTkRyb3BIYW5kbGVyIGFzIGFyY2dpc19kcmFnX2xpc3RfaXRlbV9oYW5kbGUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==