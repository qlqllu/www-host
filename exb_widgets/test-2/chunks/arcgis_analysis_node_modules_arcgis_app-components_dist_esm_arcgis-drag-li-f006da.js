"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-drag-li-f006da"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-list.entry.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-list.entry.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_drag_list: () => (/* binding */ ArcgisDragNDropContainer)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const ArcgisDragNDropContainer = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisDragUpdate = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDragUpdate", 7);
    this.arcgisDragOrderChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDragOrderChange", 7);
    this.getNewItemListOrder = (eventValue, interactValue, type) => {
      const newOrderValueList = this._getItemListOrder();
      if (!this.autoReorder) {
        const modifier = type === "before" ? 1 : -1;
        newOrderValueList.splice(newOrderValueList.indexOf(eventValue), 1);
        newOrderValueList.splice(newOrderValueList.indexOf(interactValue) + modifier, 0, eventValue);
      }
      return newOrderValueList;
    };
    this.emitNewOrder = (newOrderList) => {
      this.arcgisDragOrderChange.emit(newOrderList !== null && newOrderList !== void 0 ? newOrderList : this._getItemListOrder());
    };
    this.changeNodeOrderOn = "dragenter";
    this.dragImage = undefined;
    this.autoReorder = true;
  }
  _getItemListOrder() {
    const itemList = Array.from(this.ele.querySelectorAll("arcgis-drag-list-item"));
    return itemList.map((item) => item.value);
  }
  async getItemListOrder() {
    return this._getItemListOrder();
  }
  handleHandlerDragEvent(event) {
    var _a;
    event.stopPropagation();
    const { event: dragEvent, eventType, eventTarget } = event.detail;
    if (eventType === "dragstart") {
      this.draggingItem = Object.assign({}, eventTarget);
    }
    else if (eventType === "dragend") {
      this.draggingItem = null;
    }
    dragEvent.dataTransfer.setDragImage((_a = this.dragImage) !== null && _a !== void 0 ? _a : eventTarget.ele, 0, 0);
    this.arcgisDragUpdate.emit({ eventType, event: dragEvent, eventTarget });
  }
  handleItemDragEvent(event) {
    event.stopPropagation();
    const { draggingItem, changeNodeOrderOn, emitNewOrder, arcgisDragUpdate: arcgisDragEvent, autoReorder, getNewItemListOrder } = this;
    const { event: dragEvent, eventType, eventTarget } = event.detail;
    if ((eventType === "dragenter" || eventType === "dragleave") &&
      this.draggingItem.ele === eventTarget.ele) {
      // Prevent duplication
      return;
    }
    const interactTarget = draggingItem;
    const intereactEle = draggingItem.ele;
    const eventEle = eventTarget.ele;
    if (intereactEle !== eventEle) {
      if (eventType === changeNodeOrderOn) {
        // Swap element order
        // https://stackoverflow.com/questions/56680928/compare-order-of-two-html-elements/56681103
        // The idea is to detect whether we are dragging the element above or below
        const type = intereactEle.compareDocumentPosition(eventEle) & Node.DOCUMENT_POSITION_FOLLOWING
          ? "after"
          : "before";
        if (autoReorder) {
          eventEle[type](intereactEle);
        }
        emitNewOrder(getNewItemListOrder(intereactEle.value, eventEle.value, type));
      }
      arcgisDragEvent.emit({ eventType, event: dragEvent, eventTarget, interactTarget });
    }
  }
  handleHandlerNavigationEvent(event) {
    const { closestItem, direction, handlerEle, event: keyboardEvent } = event.detail;
    const { ele, emitNewOrder, autoReorder } = this;
    const children = Array.from(ele.children);
    // ! This assumes there is no inner container that contains MORE THAN 1 of the arcgis drag n drop item
    /** e.g.: this will fail
     * arcgis-drag-list
     * --- inner-container
     * ----- arcgis-drag-list-item
     * ----- arcgis-drag-list-item
     * ----- arcgis-drag-list-item
     *
     * but this works
     * arcgis-drag-list
     * --- inner-container
     * ----- arcgis-drag-list-item
     * --- inner-container
     * ----- arcgis-drag-list-item
     * --- inner-container
     * ----- arcgis-drag-list-item
     */
    const itemIndex = children.findIndex((child) => child.contains(closestItem));
    if (itemIndex <= -1) {
      console.warn("The handler is hidden very sneakily...");
      return;
    }
    // Prevent other event such as overflow scroll
    keyboardEvent.preventDefault();
    const modifier = direction === "up" ? -1 : 1;
    const swapTargetIndex = (itemIndex + modifier + children.length) % children.length;
    const swapTargetChild = children[swapTargetIndex];
    const type = swapTargetIndex > itemIndex ? "after" : "before";
    if (autoReorder) {
      swapTargetChild[type](closestItem);
    }
    const swapTargetItem = swapTargetChild.tagName.toLowerCase() === "arcgis-drag-list-item"
      ? swapTargetChild
      : swapTargetChild.querySelector("arcgis-drag-list-item");
    emitNewOrder(this.getNewItemListOrder(closestItem.value, swapTargetItem.value, type));
    handlerEle.activateHandler();
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
  get ele() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,