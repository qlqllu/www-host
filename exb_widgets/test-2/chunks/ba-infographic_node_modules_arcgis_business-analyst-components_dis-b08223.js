"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_ba-infographic_node_modules_arcgis_business-analyst-components_dis-b08223"],{

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-3ef1a00f.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-3ef1a00f.js ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ ArcgisInfographic)
/* harmony export */ });
/* harmony import */ var _index_4e647411_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-4e647411.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/index-4e647411.js");
/* harmony import */ var _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ElementIds-a2c40592.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-a2c40592.js");
/* harmony import */ var _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GEClient-f71049f8.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-f71049f8.js");




class DebugLog {
  constructor() {
    this.fixForLint = '';
  }
  static log(title, ...list) {
    if (DebugLog.showDebugConsoleLogs) {
      console.log('=======>' + title + ': ');
      if (list && list.length) {
        for (let ii = 0; ii < list.length; ii++) {
          console.log('...', list[ii]);
        }
      }
    }
  }
}
DebugLog.showDebugConsoleLogs = false;

function setEnvironment(environment) {
  try {
    if (environment != null && environment.length > 0) {
      _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.S.setEnvironment(environment);
      return _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('ok');
    }
    else {
      return _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('invalid-environment');
    }
  }
  catch (ex) {
    return ex;
  }
}

class InfographicsHelper {
  constructor() {
  }
  static openInfographics(igItemId, hierarchyId, geometry, countryID) {
    try {
      InfographicsHelper._getInfographicsPlayerUrl().then((playerPageUrl) => {
        InfographicsHelper._openInfographicsTab(playerPageUrl, InfographicsHelper._getInfographicsParams(igItemId, hierarchyId, geometry, countryID));
      });
    }
    catch (ex) {
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'InfographicHelper Error while getting player URL: ', ex);
    }
  }
  static _getInfographicsPlayerUrl() {
    return (new Promise(async (resolve, reject) => {
      if (InfographicsHelper._infographicsPlayerPageUrl) {
        return;
      }
      var playerPageUrl = _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.E.getUrl('infographics');
      fetch(playerPageUrl, { method: 'HEAD' })
        .then(response => {
        response.ok ? resolve(playerPageUrl) : reject();
      }).catch(error => {
        reject(error);
      });
    }));
  }
  static _openInfographicsTab(playerPageUrl, infographicParameters) {
    var wnd = window.open(playerPageUrl, '_blank');
    var onMessage = function (_wnd) {
      var messageHandler = function (event) {
        var href = event.data && event.data.href;
        var status = event.data && event.data.status;
        if (href === playerPageUrl && status === 'waiting_for_infographic_parameters') {
          _wnd.postMessage({
            type: 'infographic_parameters',
            infographicParameters: infographicParameters
          }, href);
        }
        window.removeEventListener('message', messageHandler);
      };
      return messageHandler;
    };
    window.addEventListener('message', onMessage(wnd));
  }
  static _getInfographicsParams(igItemId, hierarchyId, geometry, countryID) {
    var token = _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.T.token.access_token;
    var userId = _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.T.token.username;
    let tokenExpires = _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.T.token.expires_in;
    let ts = Date.now();
    let timeout = (tokenExpires == null) ? ts + 600000 : tokenExpires - ts;
    var expires = Math.floor(timeout / 60000 + 0.5);
    var server = _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.S.getPortalBaseUrl();
    // var fullPagesOnly = BA.LocalStorage.getValue(BA.settings.localStorageID_showFullInfographics);
    // fullPagesOnly = SettingsHelper.isTrueString(fullPagesOnly);
    var params = {
      server: server,
      userId: userId,
      token: token,
      expires: expires,
      reportID: igItemId,
      countryID: countryID,
      hierarchy: hierarchyId,
      // fullPagesOnly: fullPagesOnly
      analysisAreas: [{
          feature: {
            geometry: geometry
          }
        }]
    };
    return JSON.stringify(params);
  }
}

// noinspection JSUnusedGlobalSymbols
class TransportUtil {
  constructor() {
    this.fixForLint = '';
    // debug logging set to true
  }
  // public static GEUrl =
  //   'https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver/Geoenrichment/Enrich';// eslint-disable-line no-eval
  static setToken(username, token) {
    _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.T.setToken(username, token);
  }
  /**
   * Makes GE call to generate drivetime or walktime buffers
   *
   * @param mode = 'drivetime' or 'walktime'
   * @param sourceCountry
   * @param units = 'minutes, 'miles' or 'kilometers'
   * @param bufferValues  = 1,3,5
   * @param longitude
   * @param latitude
   */
  static async getBuffers(mode, sourceCountry, units, bufferValues, longitude, latitude) {
    if (mode != 'drivetime' && mode != 'walktime') {
      throw ('TransportUtil - invalid args');
    }
    if (TransportUtil.hasText(sourceCountry) &&
      TransportUtil.hasText(units) &&
      bufferValues &&
      typeof longitude != undefined &&
      typeof latitude != undefined) {
      let params = await TransportUtil.getParams(mode, 
      // sourceCountry,
      units, bufferValues, longitude, latitude);
      let response = await _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.G.enrich(params);
      let spatial = response.results[0].value.FeatureSet[0].spatialReference;
      let obj = TransportUtil.parseRings(response);
      if (obj) {
        for (let ii = 0; ii < obj.length; ii++) {
          if (obj[ii]) {
            let item = obj[ii];
            // @ts-ignore
            item.transport = mode == 'drivetime' ? 'drive' : 'walk';
            // @ts-ignore
            item.latitude = latitude;
            // @ts-ignore
            item.longitude = longitude;
            // @ts-ignore
            item.spatial = spatial;
            // location marker
            item.location = {
              geometry: {
                x: longitude,
                y: latitude,
                spatialReference: {
                  wkid: 4326
                }
              },
              symbol: {
                type: 'esriPMS',
                width: 14,
                height: 26.6,
                xoffset: 0,
                yoffset: 12.6,
                contentType: 'image/png',
                imageData: 'iVBORw0KGgoAAAANSUhEUgAAABMAAAAjCAYAAAB2KjFhAAACtUlEQVRIS+2WS0wTURSG/zvT0kpfkGJ4pGCViA1Em9CtCQVx5QIWhiVRo8GdSNypqHElkcgOlzVh5ap1X6nEiAkQXzGBxkSKtZC0jdTSB7SdMXdwRjudB+w5q5t7T775z3/OzR0CWbT4x90Glh0CMEx43g1C3FIKz6/zhKwDCJYrldBWZIaupSDiqsE/3mBjmGeMyXLF7GiBubEVhmN2sIY6KblS3kO58BvFX5soZrbA7eYCWY67vR2Z2aZJAoyqMTLMvLXN47a1eeRiUSrmUSrmhHSGNYA11oGtMyO3FcVOYnW9xHH9VKUAcw1MfHSc9HktzvYaEN34B6suymSxCwozsQ+ReHi6n7gG7/iNZvv88W6/Ikgdtl+Y2d6I5NfXqJQK/cQ1MPHQ1uZ5oFSeSFdWtn9Ky93b/olsYvURhUWcXef7TPamGmWXfM3oPeVAi8OIeDKLpWgSrxY3qvIY1gjCl5GOvn2jCLOaWUyN9sDX6aj5wNJaErdm3yNbKAlnurCp0W709ThVPQy+i+H+ixV92OlWC+bGe1VB4sHlx2GsxTPayqhPkyNdurB7gRWEFmPasBsXT+D6YIcu7MnLz5gLf9OG0e7Njp3ThV2bXsBSNKUNo518ftML6p1aUK+oZwfqJgVRIAXLg47E1acLgvkHgtGk1kYTJkfOCEMrxnI0hbuBZSTSeWlPd87kaprqeWwkUopVHxqmdTePYMqTdeRZ9d1svzARtLnODlmbO1XvoqpnhMBkaUAhHUM2/iVE6ONrZZjIoZ+6v6BiZhOZ7yufdjjOL7ybesAaZQog+qpX/R6oKayCqYCoKAmmpVCCaYBqYGpAAbabF8z+3yPxh0XsXJUycVPuYWm3IIyAFkhRmRowl/4hdU2uSFOZHFjv7PDm0xtC+9VAmspkwOAOxw1rgWj+H4uVH6hj08HSAAAAAElFTkSuQmCC'
              }
            };
          }
        }
      }
      return obj;
    }
    return null;
  }
  static parseRings(response) {
    var rings = [];
    var checked = {};
    try {
      if (response && response.results && response.results.length > 0) {
        let featureSet = response.results[0].value.FeatureSet[0];
        if (featureSet.features && featureSet.features.length > 0) {
          for (let ii = 0; ii < featureSet.features.length; ii++) {
            let f = featureSet.features[ii];
            let bufferValue = f.attributes.bufferRadii;
            // filter out duplicate rings
            if (!checked[bufferValue]) {
              checked[bufferValue] = true;
              let bufferUnits = f.attributes.bufferUnits;
              let r = f.geometry.rings;
              rings.push({ value: bufferValue, units: bufferUnits, rings: r });
            }
          }
          return rings;
        }
      }
    }
    catch (ex) {
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'TransportUtil parse GE result is invalid');
    }
    return undefined;
  }
  static hasText(s) {
    let test = (typeof s != undefined && s.trim().length > 0);
    return test;
  }
  static calculateSimplification(mode, bufferUnits, bufferValues) {
    let factor = 10;
    let max = 1;
    for (let ii = 0; ii < bufferValues.length; ii++) {
      max = (bufferValues[ii] > max) ? bufferValues[ii] : max;
    }
    if (mode === 'drivetime') {
      switch (bufferUnits) {
        case ('minutes'): {
          factor = Math.max(10, (0.00614 * max * max) + (3.5 * max) - 40);
          break;
        }
        case ('miles'): {
          factor = Math.max(10, (8.5 * max) - 100);
          break;
        }
        case ('kilometers'): {
          factor = Math.max(10, (5.3233 * max) - 60);
          break;
        }
      }
    }
    else if (mode === 'walktime') {
      switch (bufferUnits) {
        case ('minutes'): {
          factor = Math.max(2, (0.1437 * max) - 8.7);
          break;
        }
        case ('miles'): {
          factor = Math.max(2, (4.7 * max) - 26.8);
          break;
        }
        case ('kilometers'): {
          factor = Math.max(2, (3.11 * max) - 32.7);
          break;
        }
      }
    }
    return factor;
  }
  /*
   * getParams - generates request parameters for drivetime or walktime
   */
  static async getParams(mode, 
  // sourceCountry: string,
  units, bufferValues, longitude, latitude) {
    let isTime = units.toLowerCase() == 'minutes';
    let isDrivetime = mode == 'drivetime';
    // let defaultHierarchy = await GEClient.getGEDefaultHierarchy(sourceCountry)
    const simpleFactor = this.calculateSimplification(mode, units, bufferValues);
    // let countryObj = {
    //   sourceCountry: sourceCountry,
    //   hierarchy: defaultHierarchy
    // }
    // let jsonData: string = JSON.stringify(countryObj)
    let studyObj;
    // DRIVING BUFFERS
    if (isDrivetime) {
      studyObj = [
        {
          bufferUnits: isTime ? 'Minutes' : (units == 'miles') ? 'esriMiles' : 'esriKilometers',
          bufferRadii: bufferValues,
          areaType: 'NetworkServiceArea',
          travel_mode: {
            attributeParameterValues: [
              {
                attributeName: 'Avoid Unpaved Roads',
                parameterName: 'Restriction Usage',
                value: 'AVOID_HIGH'
              },
              {
                attributeName: 'Avoid Private Roads',
                parameterName: 'Restriction Usage',
                value: 'AVOID_MEDIUM'
              },
              {
                attributeName: 'Driving an Automobile',
                parameterName: 'Restriction Usage',
                value: 'PROHIBITED'
              },
              {
                attributeName: 'Through Traffic Prohibited',
                parameterName: 'Restriction Usage',
                value: 'AVOID_HIGH'
              },
              {
                attributeName: 'TravelTime',
                parameterName: 'Vehicle Maximum Speed (km/h)',
                value: 0
              },
              {
                attributeName: 'Roads Under Construction Prohibited',
                parameterName: 'Restriction Usage',
                value: 'PROHIBITED'
              },
              {
                attributeName: 'Avoid Gates',
                parameterName: 'Restriction Usage',
                value: 'AVOID_MEDIUM'
              },
              {
                attributeName: 'Avoid Express Lanes',
                parameterName: 'Restriction Usage',
                value: 'PROHIBITED'
              },
              {
                attributeName: 'Avoid Carpool Roads',
                parameterName: 'Restriction Usage',
                value: 'PROHIBITED'
              }
            ],
            distanceAttributeName: 'Kilometers',
            id: 'FEgifRtFndKNcJMJ',
            impedanceAttributeName: (isTime) ? 'TravelTime' : 'Kilometers',
            name: (isTime) ? 'Driving Time' : 'Driving Distance',
            restrictionAttributeNames: [
              'Avoid Unpaved Roads',
              'Avoid Private Roads',
              'Driving an Automobile',
              'Through Traffic Prohibited',
              'Roads Under Construction Prohibited',
              'Avoid Gates',
              'Avoid Express Lanes',
              'Avoid Carpool Roads'
            ],
            simplificationTolerance: simpleFactor,
            simplificationToleranceUnits: 'esriMeters',
            timeAttributeName: 'TravelTime',
            type: 'AUTOMOBILE',
            useHierarchy: true,
            uturnAtJunctions: 'esriNFSBAtDeadEndsAndIntersections',
            description: 'Models the movement of cars and other similar small automobiles, such as pickup trucks, and finds solutions that optimize travel time. Travel obeys one-way roads, avoids illegal turns, and follows other rules that are specific to cars. When you specify a start time, dynamic travel speeds based on traffic are used where it is available.',
          },
          networkOptions: {
            // travel_direction: 'Away From Facility',
            polygon_overlap_type: 'Disks'
          },
          returnGeometry: true,
          geometry: {
            x: longitude,
            y: latitude,
            spatialReference: {
              wkid: 4326,
              latestWkid: 4326
            }
          }
        }
      ];
    }
    else {
      // WALKING BUFFERS
      studyObj = [
        {
          bufferUnits: isTime ? 'Minutes' : (units == 'miles') ? 'esriMiles' : 'esriKilometers',
          bufferRadii: bufferValues,
          areaType: 'NetworkServiceArea',
          travel_mode: {
            attributeParameterValues: [
              {
                parameterName: 'Restriction Usage',
                attributeName: 'Avoid Private Roads',
                value: 'AVOID_MEDIUM'
              },
              {
                parameterName: 'Restriction Usage',
                attributeName: 'Walking',
                value: 'PROHIBITED'
              },
              {
                parameterName: 'Restriction Usage',
                attributeName: 'Preferred for Pedestrians',
                value: 'PREFER_LOW'
              },
              {
                parameterName: 'Walking Speed (km/h)',
                attributeName: 'WalkTime',
                value: 5
              },
              {
                parameterName: 'Restriction Usage',
                attributeName: 'Avoid Roads Unsuitable for Pedestrians',
                value: 'AVOID_HIGH'
              }
            ],
            description: 'Follows paths and roads that allow pedestrian traffic and finds solutions that optimize travel time. The walking speed is set to 5 kilometers per hour.',
            impedanceAttributeName: isTime ? 'WalkTime' : 'Kilometers',
            simplificationToleranceUnits: 'esriMeters',
            uturnAtJunctions: 'esriNFSBAllowBacktrack',
            restrictionAttributeNames: [
              'Avoid Private Roads',
              'Avoid Roads Unsuitable for Pedestrians',
              'Preferred for Pedestrians',
              'Walking'
            ],
            useHierarchy: false,
            simplificationTolerance: simpleFactor,
            timeAttributeName: 'WalkTime',
            distanceAttributeName: 'Kilometers',
            type: 'WALK',
            id: 'caFAgoThrvUpkFBW',
            name: isTime ? 'Walking Time' : 'Walking Distance'
          },
          networkOptions: {
            polygon_overlap_type: 'Disks'
          },
          returnGeometry: true,
          geometry: {
            x: longitude,
            y: latitude,
            spatialReference: {
              wkid: 4326,
              latestWkid: 4326
            }
          }
        }
      ];
    }
    let jsonStudy = JSON.stringify(studyObj);
    let json = {
      "dataCollections": ["GlobalIntersect"],
      "returnGeometry": true,
      "outSR": "{\"wkid\":4326, \"latestWkid\":4326}",
      "studyareas": jsonStudy,
      "forStorage": false,
      "f": "json"
    };
    return json;
  }
}

class GeometryUtil {
  /*
   *  getRings
   *
   *  Generates rings for a location in the specified 'units', for
   *  the 1-3 radius values
   *
   *  units = [miles or kilometers]
   *  values = array of radius values using 1 to 3 values
   */
  static getRings(lat, lon, units, values, locationName, locationAttributes) {
    if (!values || values.length <= 0 || values.length > 3
      || (units != 'miles' && units != 'kilometers')
      || (!lat || !lon)) {
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'GeometryUtil: invalid args', lat, lon, values);
      throw 'GeometryUtil: invalid args';
    }
    // let latitude = parseFloat(lat);
    // let longitude = parseFloat(lon);
    let rings = [];
    for (let ii = 0; ii < values.length; ii++) {
      let area = this.getAnalysisAreaRings(lat, lon, units, values, ii, locationName, locationAttributes);
      rings.push(area);
    }
    return rings;
  }
  static getAnalysisAreaRings(lat, lon, units, values, index, locationName, locationAttributes) {
    if (!lat || !lon || units == undefined || !values || values.length < 0 || values.length > 3) {
      DebugLog.log('arcgis-infographic analysisAreas invalid args: ', lat, lon, units, values);
      throw ('GeometryUtil.getAnalysisAreaRings: invalid args');
    }
    let sUnits = (values[index] == 1) ?
      (units == 'miles') ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('mile') : _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('kilometer') :
      (units == 'miles') ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('milesLowercase') : _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('kilometersLowercase');
    function getDescription() {
      let _unit = (units == 'miles') ? ' ' + _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('mile') : ' ' + _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('kilometer');
      return (_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('ring-semicolon') + ' ' + values[index] + _unit + ' ' + _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('radiusLowercase'));
    }
    function getName() {
      return values[index] + ' ' + sUnits;
    }
    function getShortName() {
      return values[index] + ' ' + sUnits;
    }
    let result = {
      feature: {
        geometry: {
          rings: []
        },
        attributes: {
          RING: index + 1,
          DESCRIPTION: '',
          latitude: lat,
          longitude: lon,
          name: getName(),
          shortName: getShortName(),
          description: getDescription(),
        }
      },
      latitude: lat,
      longitude: lon,
      location: {
        geometry: {
          x: lon,
          y: lat,
          spatialReference: {
            wkid: 4326
          }
        },
        symbol: {
          type: 'esriPMS',
          width: 14,
          height: 26.6,
          xoffset: 0,
          yoffset: 12.6,
          contentType: 'image/png',
          imageData: 'iVBORw0KGgoAAAANSUhEUgAAABMAAAAjCAYAAAB2KjFhAAACtUlEQVRIS+2WS0wTURSG/zvT0kpfkGJ4pGCViA1Em9CtCQVx5QIWhiVRo8GdSNypqHElkcgOlzVh5ap1X6nEiAkQXzGBxkSKtZC0jdTSB7SdMXdwRjudB+w5q5t7T775z3/OzR0CWbT4x90Glh0CMEx43g1C3FIKz6/zhKwDCJYrldBWZIaupSDiqsE/3mBjmGeMyXLF7GiBubEVhmN2sIY6KblS3kO58BvFX5soZrbA7eYCWY67vR2Z2aZJAoyqMTLMvLXN47a1eeRiUSrmUSrmhHSGNYA11oGtMyO3FcVOYnW9xHH9VKUAcw1MfHSc9HktzvYaEN34B6suymSxCwozsQ+ReHi6n7gG7/iNZvv88W6/Ikgdtl+Y2d6I5NfXqJQK/cQ1MPHQ1uZ5oFSeSFdWtn9Ky93b/olsYvURhUWcXef7TPamGmWXfM3oPeVAi8OIeDKLpWgSrxY3qvIY1gjCl5GOvn2jCLOaWUyN9sDX6aj5wNJaErdm3yNbKAlnurCp0W709ThVPQy+i+H+ixV92OlWC+bGe1VB4sHlx2GsxTPayqhPkyNdurB7gRWEFmPasBsXT+D6YIcu7MnLz5gLf9OG0e7Njp3ThV2bXsBSNKUNo518ftML6p1aUK+oZwfqJgVRIAXLg47E1acLgvkHgtGk1kYTJkfOCEMrxnI0hbuBZSTSeWlPd87kaprqeWwkUopVHxqmdTePYMqTdeRZ9d1svzARtLnODlmbO1XvoqpnhMBkaUAhHUM2/iVE6ONrZZjIoZ+6v6BiZhOZ7yufdjjOL7ybesAaZQog+qpX/R6oKayCqYCoKAmmpVCCaYBqYGpAAbabF8z+3yPxh0XsXJUycVPuYWm3IIyAFkhRmRowl/4hdU2uSFOZHFjv7PDm0xtC+9VAmspkwOAOxw1rgWj+H4uVH6hj08HSAAAAAElFTkSuQmCC'
        }
      },
      name: locationName ? locationName : getName(),
      address: '',
      shortName: getShortName(),
      locationName: locationName ? locationName : getName(),
      description: getDescription()
    };
    // Add attributes that were passed in
    if (locationAttributes) {
      const mergedAttributes = {
        ...locationAttributes,
        ...result.feature.attributes
      };
      result.feature.attributes = mergedAttributes;
    }
    let r = GeometryUtil._generateRing(lat, lon, units, values[index]);
    // @ts-ignore
    result.feature.geometry.rings.push(r);
    return result;
  }
  // generate Analysis Areas for  infographic
  //
  // Expecting rings = [ {value,units,rings},...]
  //
  // Returns:  json geometry
  static getAnalysisAreasFromRings(data, locationName, locationAttributes) {
    var obj = {
      analysisAreas: []
    };
    for (let ii = 0; ii < data.length; ii++) {
      let d = data[ii];
      let isTime = d.units.toLowerCase() == 'minutes';
      // let isSingular = d.value == 1;
      let unitLow = d.units.toLowerCase();
      let displayUnits = isTime ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('minutes') : unitLow.indexOf('miles') >= 0 ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('milesLowercase') : _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('kilometersLowercase');
      let shortUnits = displayUnits.substr(0, displayUnits.length - 1);
      let shortName = d.value.toString() + ' ' + shortUnits + ' ' + d.transport;
      let descUnit = isTime ? ' ' + _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('time-semicolon') + ' ' : ' ' + _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('distance-semicolon') + ' ';
      let descValue = d.value.toString() + ' ' + (d.value == 1 ? shortUnits : displayUnits);
      let desc = (d.transport == 'drive' ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('drive') : _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('walk')) + descUnit + descValue;
      let buffer = {
        'feature': {
          'geometry': {
            'rings': d.rings,
            'spatialReference': { 'wkid': 4326 }
          },
          'attributes': {
            // "OBJECTID":      19,
            //   "RELID":         "028ddf01-c281-47f2-97bd-4cc586424890",
            'RING': ii,
            // "DESCRIPTION":   null,
            'SYMBOL': {
              'color': [204, 51, 0, 128],
              'outline': {
                'color': [204, 51, 0, 255],
                'width': 1.5,
                'type': 'esriSLS',
                'style': 'esriSLSSolid'
              },
              'type': 'esriSFS',
              'style': 'esriSFSSolid'
            }
          }
        },
        'latitude': d.latitude,
        'longitude': d.longitude,
        'name': locationName ? locationName : '',
        'address': '',
        'shortName': shortName,
        'locationName': locationName ? locationName : '',
        'description': desc,
        'location': {
          'geometry': {
            'x': d.longitude,
            'y': d.latitude,
            'spatialReference': {
              'wkid': '4326'
            }
          },
          'symbol': {
            'type': 'esriPMS',
            'width': 14,
            'height': 26.6,
            'xoffset': 0,
            'yoffset': 12.6,
            'contentType': 'image/png',
            'imageData': 'iVBORw0KGgoAAAANSUhEUgAAABMAAAAjCAYAAAB2KjFhAAACtUlEQVRIS+2WS0wTURSG/zvT0kpfkGJ4pGCViA1Em9CtCQVx5QIWhiVRo8GdSNypqHElkcgOlzVh5ap1X6nEiAkQXzGBxkSKtZC0jdTSB7SdMXdwRjudB+w5q5t7T775z3/OzR0CWbT4x90Glh0CMEx43g1C3FIKz6/zhKwDCJYrldBWZIaupSDiqsE/3mBjmGeMyXLF7GiBubEVhmN2sIY6KblS3kO58BvFX5soZrbA7eYCWY67vR2Z2aZJAoyqMTLMvLXN47a1eeRiUSrmUSrmhHSGNYA11oGtMyO3FcVOYnW9xHH9VKUAcw1MfHSc9HktzvYaEN34B6suymSxCwozsQ+ReHi6n7gG7/iNZvv88W6/Ikgdtl+Y2d6I5NfXqJQK/cQ1MPHQ1uZ5oFSeSFdWtn9Ky93b/olsYvURhUWcXef7TPamGmWXfM3oPeVAi8OIeDKLpWgSrxY3qvIY1gjCl5GOvn2jCLOaWUyN9sDX6aj5wNJaErdm3yNbKAlnurCp0W709ThVPQy+i+H+ixV92OlWC+bGe1VB4sHlx2GsxTPayqhPkyNdurB7gRWEFmPasBsXT+D6YIcu7MnLz5gLf9OG0e7Njp3ThV2bXsBSNKUNo518ftML6p1aUK+oZwfqJgVRIAXLg47E1acLgvkHgtGk1kYTJkfOCEMrxnI0hbuBZSTSeWlPd87kaprqeWwkUopVHxqmdTePYMqTdeRZ9d1svzARtLnODlmbO1XvoqpnhMBkaUAhHUM2/iVE6ONrZZjIoZ+6v6BiZhOZ7yufdjjOL7ybesAaZQog+qpX/R6oKayCqYCoKAmmpVCCaYBqYGpAAbabF8z+3yPxh0XsXJUycVPuYWm3IIyAFkhRmRowl/4hdU2uSFOZHFjv7PDm0xtC+9VAmspkwOAOxw1rgWj+H4uVH6hj08HSAAAAAElFTkSuQmCC'
          }
        }
      };
      // Add attributes that were passed in
      if (locationAttributes) {
        const mergedAttributes = {
          ...locationAttributes,
          ...buffer.feature.attributes
        };
        buffer.feature.attributes = mergedAttributes;
      }
      // @ts-ignore
      obj.analysisAreas.push(buffer);
    }
    let s = JSON.stringify(obj).replace('{"analysisAreas"', '"analysisAreas"');
    return s.substr(0, s.length - 1);
  }
  static getAnalysisAreasFromPolygon(data, locationName, locationAttributes) {
    if (!data || !data.rings || !data.spatial || !data.latitude || !data.longitude) {
      DebugLog.log('getAnalysisAreasFromPolygon', 'invalid args', data);
      return '';
    }
    const obj = {
      analysisAreas: [
        {
          feature: {
            name: locationName ? locationName : '',
            geometry: {
              rings: data.rings,
              spatialReference: data.spatial
            },
            attributes: {
              RING: 1,
              SYMBOL: {
                color: [204, 51, 0, 128],
                outline: {
                  color: [204, 51, 0, 255],
                  width: 1.5,
                  type: 'esriSLS',
                  style: 'esriSLSSolid'
                },
                type: 'esriSFS',
                style: 'esriSFSSolid'
              }
            }
          },
          name: locationName ? locationName : '',
          latitude: data.latitude,
          longitude: data.longitude,
          description: locationName ? locationName : 'feature polygon'
          // location: {
          //   geometry: {
          //     x: data.longitude,
          //     y: data.latitude,
          //     spatialReference: {
          //       wkid: 4326,
          //     },
          //   },
          //   symbol: {
          //     type: 'esriPMS',
          //     width: 14,
          //     height: 26.6,
          //     xoffset: 0,
          //     yoffset: 12.6,
          //     contentType: 'image/png',
          //     imageData: 'iVBORw0KGgoAAAANSUhEUgAAABMAAAAjCAYAAAB2KjFhAAACtUlEQVRIS+2WS0wTURSG/zvT0kpfkGJ4pGCViA1Em9CtCQVx5QIWhiVRo8GdSNypqHElkcgOlzVh5ap1X6nEiAkQXzGBxkSKtZC0jdTSB7SdMXdwRjudB+w5q5t7T775z3/OzR0CWbT4x90Glh0CMEx43g1C3FIKz6/zhKwDCJYrldBWZIaupSDiqsE/3mBjmGeMyXLF7GiBubEVhmN2sIY6KblS3kO58BvFX5soZrbA7eYCWY67vR2Z2aZJAoyqMTLMvLXN47a1eeRiUSrmUSrmhHSGNYA11oGtMyO3FcVOYnW9xHH9VKUAcw1MfHSc9HktzvYaEN34B6suymSxCwozsQ+ReHi6n7gG7/iNZvv88W6/Ikgdtl+Y2d6I5NfXqJQK/cQ1MPHQ1uZ5oFSeSFdWtn9Ky93b/olsYvURhUWcXef7TPamGmWXfM3oPeVAi8OIeDKLpWgSrxY3qvIY1gjCl5GOvn2jCLOaWUyN9sDX6aj5wNJaErdm3yNbKAlnurCp0W709ThVPQy+i+H+ixV92OlWC+bGe1VB4sHlx2GsxTPayqhPkyNdurB7gRWEFmPasBsXT+D6YIcu7MnLz5gLf9OG0e7Njp3ThV2bXsBSNKUNo518ftML6p1aUK+oZwfqJgVRIAXLg47E1acLgvkHgtGk1kYTJkfOCEMrxnI0hbuBZSTSeWlPd87kaprqeWwkUopVHxqmdTePYMqTdeRZ9d1svzARtLnODlmbO1XvoqpnhMBkaUAhHUM2/iVE6ONrZZjIoZ+6v6BiZhOZ7yufdjjOL7ybesAaZQog+qpX/R6oKayCqYCoKAmmpVCCaYBqYGpAAbabF8z+3yPxh0XsXJUycVPuYWm3IIyAFkhRmRowl/4hdU2uSFOZHFjv7PDm0xtC+9VAmspkwOAOxw1rgWj+H4uVH6hj08HSAAAAAElFTkSuQmCC',
          //   },
          // },
        }
      ]
    };
    // Add attributes that were passed in
    if (locationAttributes) {
      const mergedAttributes = {
        ...locationAttributes,
        ...obj.analysisAreas[0].feature.attributes
      };
      obj.analysisAreas[0].feature.attributes = mergedAttributes;
    }
    let s = JSON.stringify(obj).replace('{"analysisAreas"', '"analysisAreas"');
    return s.substr(0, s.length - 1);
  }
  /**
   * Takes data returned from getBuffers for DT/WT and returns
   * json analysis areas
   * @param data
   * @return {string}
   */
  static getAnalysisAreasFromEnrichBuffers(data, locationName, locationAttributes) {
    if (!data || data.length <= 0) {
      DebugLog.log('getAnalysisAreasFromEnrichBuffers', 'invalid args', data);
      return '';
    }
    const obj = {
      analysisAreas: [],
      spatialReference: data[0].spatial
    };
    let lat, lon;
    for (let ii = 0; ii < data.length; ii++) {
      let buffer = data[ii];
      if (!buffer || !buffer.latitude || !buffer.longitude || !buffer.rings)
        continue;
      let isTime = buffer.units.toLowerCase() == 'minutes';
      let isSingular = buffer.value == 1;
      let unitLow = buffer.units.toLowerCase();
      let displayUnits = isTime ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('minutes') : unitLow.toLowerCase().indexOf('miles') >= 0 ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('milesLowercase') : _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('kilometersLowercase');
      let shortUnits = displayUnits.substr(0, displayUnits.length - 1);
      let shortName = buffer.value.toString() + ' ' + shortUnits + ' ' + buffer.transport;
      let descUnit = isTime ? ' ' + _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('time-semicolon') + ' ' : ' ' + _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('distance-semicolon') + ' ';
      let descValue = buffer.value.toString() + ' ' + (isSingular ? shortUnits : displayUnits);
      let desc = (buffer.transport == 'drive' ? _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('drive') : _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('walk')) + descUnit + descValue;
      if (!lat)
        lat = buffer.latitude;
      if (!lon)
        lon = buffer.longitude;
      let area = {
        feature: {
          geometry: {
            rings: buffer.rings
          },
          attributes: {
            RING: 1,
            SYMBOL: {
              color: [204, 51, 0, 128],
              outline: {
                color: [204, 51, 0, 255],
                width: 1.5,
                type: 'esriSLS',
                style: 'esriSLSSolid'
              },
              type: 'esriSFS',
              style: 'esriSFSSolid'
            }
          }
        },
        latitude: lat,
        longitude: lon,
        description: desc,
        shortName: shortName,
        name: locationName ? locationName : '',
        location: {
          geometry: {
            x: lon,
            y: lat,
            spatialReference: {
              wkid: 4326
            }
          },
          symbol: {
            type: 'esriPMS',
            width: 14,
            height: 26.6,
            xoffset: 0,
            yoffset: 12.6,
            contentType: 'image/png',
            imageData: 'iVBORw0KGgoAAAANSUhEUgAAABMAAAAjCAYAAAB2KjFhAAACtUlEQVRIS+2WS0wTURSG/zvT0kpfkGJ4pGCViA1Em9CtCQVx5QIWhiVRo8GdSNypqHElkcgOlzVh5ap1X6nEiAkQXzGBxkSKtZC0jdTSB7SdMXdwRjudB+w5q5t7T775z3/OzR0CWbT4x90Glh0CMEx43g1C3FIKz6/zhKwDCJYrldBWZIaupSDiqsE/3mBjmGeMyXLF7GiBubEVhmN2sIY6KblS3kO58BvFX5soZrbA7eYCWY67vR2Z2aZJAoyqMTLMvLXN47a1eeRiUSrmUSrmhHSGNYA11oGtMyO3FcVOYnW9xHH9VKUAcw1MfHSc9HktzvYaEN34B6suymSxCwozsQ+ReHi6n7gG7/iNZvv88W6/Ikgdtl+Y2d6I5NfXqJQK/cQ1MPHQ1uZ5oFSeSFdWtn9Ky93b/olsYvURhUWcXef7TPamGmWXfM3oPeVAi8OIeDKLpWgSrxY3qvIY1gjCl5GOvn2jCLOaWUyN9sDX6aj5wNJaErdm3yNbKAlnurCp0W709ThVPQy+i+H+ixV92OlWC+bGe1VB4sHlx2GsxTPayqhPkyNdurB7gRWEFmPasBsXT+D6YIcu7MnLz5gLf9OG0e7Njp3ThV2bXsBSNKUNo518ftML6p1aUK+oZwfqJgVRIAXLg47E1acLgvkHgtGk1kYTJkfOCEMrxnI0hbuBZSTSeWlPd87kaprqeWwkUopVHxqmdTePYMqTdeRZ9d1svzARtLnODlmbO1XvoqpnhMBkaUAhHUM2/iVE6ONrZZjIoZ+6v6BiZhOZ7yufdjjOL7ybesAaZQog+qpX/R6oKayCqYCoKAmmpVCCaYBqYGpAAbabF8z+3yPxh0XsXJUycVPuYWm3IIyAFkhRmRowl/4hdU2uSFOZHFjv7PDm0xtC+9VAmspkwOAOxw1rgWj+H4uVH6hj08HSAAAAAElFTkSuQmCC'
          }
        }
      };
      // Add attributes that were passed in
      if (locationAttributes) {
        const mergedAttributes = {
          ...locationAttributes,
          ...area.feature.attributes
        };
        area.feature.attributes = mergedAttributes;
      }
      // @ts-ignore
      obj.analysisAreas.push(area);
    }
    let s = JSON.stringify(obj).replace('{"analysisAreas"', '"analysisAreas"');
    return s.substr(0, s.length - 1);
  }
  static getDemoPolygon() {
    return '"analysisAreas": [ \
      { \
        "feature": { \
          "geometry": { \
            "rings": [ \
              [ \
                [ \
                  -118.000083501802, \
                  34.0609396322877 \
                ], \
                [ \
                  -118.000083501802, \
                  34.0700406810389 \
                ], \
                [ \
                  -118.000083501802, \
                  34.0791407522251 \
                ], \
                [ \
                  -118.000083501802, \
                  34.0882398457216 \
                ], \
                [ \
                  -117.989097176058, \
                  34.0882398457216 \
                ], \
                [ \
                  -117.989097176058, \
                  34.0973379614042 \
                ], \
                [ \
                  -117.978110850314, \
                  34.1064350991486 \
                ], \
                [ \
                  -117.96712452457, \
                  34.1064350991486 \
                ], \
                [ \
                  -117.956138198827, \
                  34.1064350991486 \
                ], \
                [ \
                  -117.956138198827, \
                  34.1155312878821 \
                ], \
                [ \
                  -117.956138198827, \
                  34.1246264693743 \
                ], \
                [ \
                  -117.945151873083, \
                  34.1246264693743 \
                ], \
                [ \
                  -117.945151873083, \
                  34.1155312878821 \
                ], \
                [ \
                  -117.945151873083, \
                  34.1064350991486 \
                ], \
                [ \
                  -117.945151873083, \
                  34.0973379614042 \
                ], \
                [ \
                  -117.945151873083, \
                  34.0882398457216 \
                ], \
                [ \
                  -117.945151873083, \
                  34.0791407522251 \
                ], \
                [ \
                  -117.956138198827, \
                  34.0791407522251 \
                ], \
                [ \
                  -117.956138198827, \
                  34.0700406810389 \
                ], \
                [ \
                  -117.96712452457, \
                  34.0700406810389 \
                ], \
                [ \
                  -117.978110850314, \
                  34.0700406810389 \
                ], \
                [ \
                  -117.978110850314, \
                  34.0609396322877 \
                ], \
                [ \
                  -117.989097176058, \
                  34.0609396322877 \
                ], \
                [ \
                  -118.000083501802, \
                  34.0609396322877 \
                ] \
              ] \
            ], \
            "spatialReference": { \
              "wkid": 4326 \
            } \
          }, \
          "attributes": { \
            "OBJECTID": 6, \
            "NAME": "06 103", \
            "DESCRIPTION": "Area: 8.1 square miles", \
            "CREATED": 1518736922977, \
            "MODIFIED": 1518736922977, \
            "CREATOR": "fasil_ba", \
            "EDITOR": "fasil_ba", \
            "REGION": "US", \
            "FLAGS": 2, \
            "SYMBOL": {\"color\":[255,255,178,230],\"outline\":{\"color\":[0,0,0,255],\"width\":1.5,\"type\":\"esriSLS\",\"style\":\"esriSLSSolid\",\"marker\":null},\"type\":\"esriSFS\",\"style\":\"esriSFSSolid\"}, \
            "STATEFP": "06", \
            "UNSDLEA": "03690", \
            "GEOID": "0603690", \
            "NAME_": "Baldwin Park Unified School District", \
            "LSAD": "00", \
            "LOGRADE": "KG", \
            "HIGRADE": "12", \
            "MTFCC": "G5420", \
            "SDTYP": " ", \
            "FUNCSTAT": "E", \
            "ALAND": 22081431, \
            "AWATER": 626574, \
            "INTPTLAT": "+34.0896602", \
            "INTPTLON": "-117.9687223", \
            "GEOID2": 603690, \
            "COUNT_": 0, \
            "COUNT_1": 0, \
            "OID1": 75, \
            "YEAR_1": 1314, \
            "COUNTY_1": 19, \
            "DISTRICT_1": 1964287, \
            "DISTRICT_2": "Baldwin Park Unified", \
            "GEOGRAPH_1": "Baldwin Park Unified School District, CA", \
            "GEOID_12": 603690, \
            "HISP_1": 16310, \
            "PCTHISP_1": 86.91, \
            "AMIND_1": 62, \
            "PCTAMIND_1": 0.33, \
            "ASIAN_1": 731, \
            "PCTASIAN_1": 3.9, \
            "PAC_1": 32, \
            "PCTPAC_1": 0.17, \
            "FIL_1": 326, \
            "PCTFIL_1": 1.74, \
            "AFAM_1": 635, \
            "PCTAFAM_1": 3.38, \
            "WHITE_1": 552, \
            "PCTWHITE_1": 2.94, \
            "TWOORMOR_1": 107, \
            "PCTTWOOR_1": 0.57, \
            "NONEREPO_1": 12, \
            "PCTNONER_1": 0.06, \
            "TOTAL_1": 18767, \
            "NONWHITE_1": 18203, \
            "PCTNONWH_1": 97, \
            "SHAPE__Area": null, \
            "SHAPE__Length": null \
          } \
        }, \
        "name": "06 103", \
        "address": "06 103", \
        "shortName": "06 103", \
        "description": "Area: 8.1 square miles" \
      }]';
  }
  // static generateDriveTime(lat, lon, units, values) {
  //
  // }
  //
  // static generateWalkTime(lat, lon, units, values) {
  //
  // }
  /*
   * _generateRing - creates an array of arrays of lon,lat array coordinates that
   * define a circle around the given latitude, longitude at a given radius.
   *
   * Example:  [ [lon1,lat1], [lon2,lat2] ]
   *
   * 'units' - 'miles' or 'kilometers'
   * 'radius' - radius of circle in the 'units'
   */
  static _generateRing(lat, lon, units, radius) {
    if (!lat || !lon || (units != 'miles' && units != 'kilometers') || radius == undefined) {
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'GeometryUtil Error: _generateRing invalid args=', lat, lon, units, radius);
    }
    var result = [];
    function fmod(X, Y) {
      return X % Y;
    }
    function toRad(n) {
      return n * Math.PI / 180;
    }
    function toDeg(n) {
      return n * 180 / Math.PI;
    }
    const earthRadius = 6371000; // meters
    var radInMeters = (units == 'miles') ? radius * 1609.344 : radius * 1000;
    var rLat = toRad(lat);
    var rLon = toRad(lon);
    var d_rad = radInMeters / earthRadius;
    for (let i = 0; i <= 360; i += 4) {
      var radial = toRad(i);
      var lat_rad = Math.asin(Math.sin(rLat) * Math.cos(d_rad) + Math.cos(rLat) * Math.sin(d_rad) * Math.cos(radial));
      var dlon_rad = Math.atan2(Math.sin(radial) * Math.sin(d_rad) * Math.cos(rLat), Math.cos(d_rad) - Math.sin(rLat) * Math.sin(lat_rad));
      var lon_rad = fmod((rLon + dlon_rad + Math.PI), 2 * Math.PI) - Math.PI;
      let coord = [];
      coord.push(toDeg(lon_rad));
      coord.push(toDeg(lat_rad));
      result.push(coord);
    }
    return result;
  }
}

/** InfographicCard
 *
 *  This class provides support for displaying an infographic inside
 *  an iframe element.
 */
class InfographicCard {
  constructor(username, token, env, options) {
    this.geoenrichmentUrl = '';
    this.portalUrl = '';
    this.portalOnlineGEProxy = false;
    this.langCode = 'en-us'; // [OPTIONAL] default language (default is en-us)
    this.sourceCountry = 'US'; // [OPTIONAL] default country code (default is US)
    this.bufferType = 'ring';
    this.bufferUnits = 'miles';
    this.bufferSizes = [1, 3, 5];
    DebugLog.showDebugConsoleLogs = true;
    this.username = username;
    this.token = token;
    this.environment = env;
    this._idPrefix = 'ba-infographic-frame-';
    const fid = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._idPrefix);
    this._iFrame = { id: fid.id, container: null, instance: null };
    this.setOptions(options);
  }
  setShadowRoot(root) {
    this._containerShadowRoot = root;
  }
  /**
   * resetOptions - returns all options to their defaults
   */
  resetOptions() {
    this.bufferType = 'ring';
    this.bufferUnits = 'miles';
    this.bufferSizes = [1, 3, 5];
    this.viewMode = 'auto'; // view mode [full, stack, slides, stack-all]
    // report
    this.reportShowHeader = true; // infographic report header display on/off
    this.reportHeaderButtonPrint = true; // show print button in header on/off
    this.reportHeaderButtonZoomLevel = true; // show zoom level button in header on/off
    this.reportHeaderButtonFullscreen = true; // show Fullscreen button in header on/off
    // export
    this.reportHeaderButtonExcel = true; // show Excel button in header on/off
    this.reportHeaderButtonImage = true; // show image button in header on/off
    this.reportHeaderButtonPdf = true; // show PDF button in header on/off
    this.reportHeaderButtonDynHtml = true; // show Dynamic HTML button in header on/off
    // style
    this.reportColorBackground = '#fff'; // infographic background color
    this.reportColorHeader = 'blue'; // infographic header color
    this.reportColorHeaderText = '#fff'; // infographic header text color
    // map
    this.runReportOnClick = true; // Boolean - runs new report on map click
    this.showSearch = true; // Boolean - shows BA map search
  }
  /** setOptions
   *    Sets one or more config and display options.  Only the options that are
   *    found in the options argument get changed by default.   If the 'reset'
   *    flag is set 'true' then all the options will be reset back to their
   *    defaults before setting values found in 'options'.
   *
   * @param options   JSON string with only the options to be changed
   * @param reset     boolean, reset options to default before applying 'options'
   */
  setOptions(options, reset) {
    if (typeof options == undefined || options == null || !_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(options))
      return false;
    try {
      if (reset)
        this.resetOptions();
      const opt = JSON.parse(options);
      if (!opt || opt.length <= 0)
        return false;
      // console.log('%c BAC InfographicCard setOptions', 'color:blue;font-size:9pt;', opt)
      if (_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(opt.bufferType) && ['ring', 'drivetime', 'walktime'].includes(opt.bufferType))
        this.bufferType = opt.bufferType;
      if (_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(opt.bufferUnits) && ['miles', 'kilometers', 'minutes'].includes(opt.bufferUnits))
        this.bufferUnits = opt.bufferUnits;
      if (opt.bufferSizes && opt.bufferSizes.length > 0 && opt.bufferSizes.length <= 3)
        this.bufferSizes = opt.bufferSizes;
      if (_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(opt.viewMode) && ['full', 'stack', 'slides', 'stack-all'].includes(opt.viewMode))
        this.viewMode = opt.viewMode;
      if (opt.report) {
        if (opt.report.showHeader != typeof undefined)
          this.reportShowHeader = opt.report.showHeader;
        if (opt.report.showZoomLevel != typeof undefined)
          this.reportHeaderButtonZoomLevel = opt.report.showZoomLevel;
        if (opt.report.showFullscreen != typeof undefined)
          this.reportHeaderButtonFullscreen = opt.report.showFullscreen;
      }
      if (opt.export) {
        if (opt.export.excel != typeof undefined)
          this.reportHeaderButtonExcel = opt.export.excel;
        if (opt.export.image != typeof undefined)
          this.reportHeaderButtonImage = opt.export.image;
        if (opt.export.pdf != typeof undefined)
          this.reportHeaderButtonPdf = opt.export.pdf;
        if (opt.report.print != typeof undefined)
          this.reportHeaderButtonPrint = opt.export.print;
        if (opt.export.dynamicHtml != typeof undefined)
          this.reportHeaderButtonDynHtml = opt.export.dynamicHtml;
      }
      if (opt.style) {
        if (opt.style.igBackgroundColor !== undefined) {
          this.reportColorBackground = opt.style.igBackgroundColor;
        }
        else if (opt.style.backgroundColor !== undefined) {
          this.reportColorBackground = opt.style.backgroundColor;
        }
        if (opt.style.headerColor != typeof undefined)
          this.reportColorHeader = opt.style.headerColor;
        if (opt.style.headerTextColor != typeof undefined)
          this.reportColorHeaderText = opt.style.headerTextColor;
      }
      if (opt.map) {
        if (opt.map.runReportOnClick != typeof undefined)
          this.runReportOnClick = opt.map.runReportOnClick;
        if (opt.map.showSearch != typeof undefined)
          this.showSearch = opt.map.showSearch;
      }
      return true;
    }
    catch (ex) {
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'InfographicCard error: ', ex);
    }
    return false;
  }
  // generate infographic display options
  _createInfographicPlayerStyleOptions() {
    let arr1 = [];
    let arr2 = [];
    let arr3 = [];
    arr1.push('"showCloseButton":false');
    if (this.reportShowHeader != undefined && this.reportShowHeader == false)
      arr1.push('"showHeader":false');
    if (this.viewMode != undefined) {
      const modes = {
        full: 'full-pages',
        stack: 'panels-in-stack',
        slides: 'panels-in-slides',
        'stack-all': 'panels-in-stack-all'
      };
      let m = modes[this.viewMode];
      if (m)
        arr1.push('"viewMode":"' + m + '","resizeMode":"auto"');
    }
    if (this.reportHeaderButtonFullscreen)
      arr1.push('"showFullscreenButton": true');
    if (this.reportHeaderButtonZoomLevel)
      arr1.push('"disableZoom": true');
    if (this.reportHeaderButtonExcel)
      arr2.push('"excel": true');
    if (this.reportHeaderButtonImage)
      arr2.push('"image": true');
    if (this.reportHeaderButtonPdf)
      arr2.push('"pdf": true');
    if (this.reportHeaderButtonPrint)
      arr2.push('"print": true');
    if (this.reportHeaderButtonDynHtml)
      arr2.push('"dynamicHtml": true');
    if (this.reportColorBackground)
      arr3.push('"background":"' + this.reportColorBackground + '"');
    if (this.reportColorHeader)
      arr3.push('"headerBackground":"' + this.reportColorHeader + '"');
    if (this.reportColorHeaderText)
      arr3.push('"headerText":"' + this.reportColorHeaderText + '"');
    if (arr2.length > 0)
      arr1.push('"exportOptions": {' + arr2.toString() + '}');
    if (arr3.length > 0)
      arr1.push('"theme": {' + arr3.toString() + '}');
    return arr1.toString();
  }
  _validateSetup() {
    if (!_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(this.environment)) {
      return false;
    }
    if (!_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(this.token)) {
      DebugLog.log('InfographicCard', 'invalid token');
      return false;
    }
    if (!_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(this.username)) {
      DebugLog.log('InfographicCard', 'invalid username');
      return false;
    }
    if (!_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(this.reportId)) {
      DebugLog.log('InfographicCard', 'invalid report ID');
      return false;
    }
    if (!this.reportLocation) {
      if (!this.reportGeometry && !this.reportGeography) {
        DebugLog.log('InfographicCard', 'invalid location, geometry or geography');
        return false;
      }
    }
    return true;
  }
  _checkBuffersAssignDefaults() {
    if (typeof this.bufferType != undefined && typeof this.bufferUnits != undefined && typeof this.bufferSizes != undefined) {
      if (!isNaN(this.bufferSizes[0])) {
        return;
      }
    }
    if (typeof this.bufferType == undefined) {
      this.bufferType = 'ring'; // default
    }
    if (typeof this.bufferUnits == undefined) {
      this.bufferUnits = 'miles'; // default
    }
    if (typeof this.bufferSizes == undefined || isNaN(this.bufferSizes[0])) {
      // use default
      this.bufferSizes = [1];
    }
  }
  /** regenerateContent
   *    Rebuilds the infographic Card using current settings
   *
   * @param suggested   boolean, if true = will NOT render unless infographic has
   *                    already been rendered before
   */
  async regenerateContent(suggested) {
    const self = this;
    try {
      if (!suggested || (self._iFrame.container && self._iFrame.instance)) {
        if (self._iFrame.container) {
          _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.removeChildren(self._iFrame.container);
        }
        self._iFrame.instance = undefined;
        // Run report with current parameters
        await self.loadInfographic(self._iFrame.id, self._iFrame.container, self.reportLocation, self.reportGeometry, self.reportId, self.reportGeography);
      }
    }
    catch (ex) {
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'InfographicCard: regenerateContent', ex);
    }
  }
  _validateReportGeometry(data) {
    if (data && data.length > 0) {
      for (let ii = 0; ii < data.length; ii++) {
        let r = data[ii];
        if (!r
          || !_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(r.transport)
          || !r.latitude
          || !r.longitude
          || !r.value
          || !_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.hasText(r.units)
          || !r.rings)
          return false;
      }
      return true;
    }
    return false;
  }
  /** _getReportGeometryAnalysisAreas
   *
   *  Take the reportGeometry JS object and generates geometry json for
   *  Drivetimes, Walktimes, or Rings
   */
  async _getReportGeometryAnalysisAreas() {
    let json = '';
    if (this.reportGeometry) {
      if (this.reportGeometry.type && this.reportGeometry.type == 'polygon') {
        json = GeometryUtil.getAnalysisAreasFromPolygon(this.reportGeometry, this.reportLocationName, this.reportLocationAttributes);
      }
      else {
        if (this.bufferType == 'drivetime' || this.bufferType == 'walktime') {
          if (this._validateReportGeometry(this.reportGeometry)) {
            json = GeometryUtil.getAnalysisAreasFromRings(this.reportGeometry, this.reportLocationName, this.reportLocationAttributes);
          }
          else
            DebugLog.log('_getReportGeometryAnalysisAreas', 'reportGeometry is invalid', this.reportGeometry);
        }
      }
    }
    else if (this.bufferType == 'drivetime' || this.bufferType == 'walktime') {
      //
      // generate the DT/WT buffers using GE enrich request
      TransportUtil.setToken(this.username, this.token);
      let obj = await TransportUtil.getBuffers(this.bufferType, this.sourceCountry, this.bufferUnits, this.bufferSizes, this.reportLocation.lon, this.reportLocation.lat);
      json = GeometryUtil.getAnalysisAreasFromEnrichBuffers(obj, this.reportLocationName, this.reportLocationAttributes);
    }
    return json;
  }
  _checkBuffers() {
    if (typeof this.bufferType != undefined && typeof this.bufferUnits != undefined && typeof this.bufferSizes != undefined) {
      if (!isNaN(this.bufferSizes[0])) {
        return;
      }
    }
    if (typeof this.bufferType == undefined) {
      this.bufferType = 'ring'; // default
    }
    if (typeof this.bufferUnits == undefined) {
      this.bufferUnits = 'miles'; // default
    }
    if (typeof this.bufferSizes == undefined || isNaN(this.bufferSizes[0])) {
      // use default
      this.bufferSizes = [1];
    }
  }
  generateNotReadyHtml() {
    let nrId = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId('notReadyDiv');
    return '<div id="' + nrId + '" class="notReadyOuter" > \
          <svg class="notReadySvg" preserveAspectRatio="xMidYMid meet" width="66" height="58"> \
            <g transform="matrix(0.65909094 0 0 0.65909094 0.09090962 -0)"> \
              <g> \
                <path \
                  d="M48.445312 0.15625C 48.125 0.234375 47.5625 0.445312 47.195312 0.632812C 46.648438 0.90625 46.375 1.117188 45.734375 1.757812C 45.257812 2.226562 44.765625 2.804688 44.507812 3.203125C 43.84375 4.234375 39.1875 12.441406 21.367188 43.960938C 15.171875 54.91797 7.976562 67.65625 5.375 72.25391C 2.773438 76.85547 0.554688 80.83203 0.445312 81.08984C -0.171875 82.55469 -0.117188 84.171875 0.59375 85.46094C 0.710938 85.67969 1.09375 86.13281 1.4375 86.47656C 2.148438 87.17969 2.820312 87.5625 3.828125 87.84375L3.828125 87.84375L4.421875 88L50.351562 87.984375L96.28906 87.96094L96.921875 87.75C 99.75781 86.78125 100.78125 83.85156 99.296875 80.88672C 99.13281 80.55078 92.27344 68.53906 84.05469 54.183594C 75.83594 39.835938 66.02344 22.695312 62.25 16.097656C 58.46875 9.503906 55.148438 3.75 54.859375 3.320312C 53.9375 1.9375 52.765625 0.890625 51.585938 0.40625C 50.609375 0 49.460938 -0.09375 48.445312 0.15625zM61 26.804688C 67.19531 37.61328 76.77344 54.339844 82.28125 63.96875L82.28125 63.96875L92.30469 81.47266L71.11719 81.49609C 59.460938 81.50391 40.382812 81.50391 28.71875 81.49609L28.71875 81.49609L7.507812 81.47266L20.523438 58.45703C 45.429688 14.402344 49.625 7.011719 49.695312 7.097656C 49.726562 7.128906 54.8125 15.996094 61 26.804688z" \
                  stroke="none" \
                  fill="#D4D7DD" \
                  fill-rule="nonzero" \
                /> \
                <path \
                  d="M49.140625 26.460938C 49.03125 26.484375 48.664062 26.570312 48.328125 26.65625C 45.28125 27.421875 42.8125 30.363281 42.8125 33.19922C 42.8125 33.558594 42.984375 35.183594 43.203125 36.80078C 43.414062 38.41797 44.085938 43.5 44.6875 48.101562C 46.257812 60.097656 46.242188 59.95703 46.375 60.45703C 46.703125 61.75 47.476562 62.78125 48.492188 63.28125C 49.015625 63.539062 49.164062 63.578125 49.804688 63.601562C 50.992188 63.65625 51.726562 63.367188 52.523438 62.539062C 53.296875 61.71875 53.648438 60.789062 53.898438 58.910156C 53.984375 58.253906 54.375 55.30078 54.765625 52.339844C 55.148438 49.382812 55.789062 44.554688 56.171875 41.59375C 56.5625 38.640625 56.953125 35.683594 57.039062 35.027344C 57.226562 33.60547 57.234375 32.64453 57.070312 32.003906C 56.429688 29.480469 54.257812 27.320312 51.65625 26.640625C 51.070312 26.484375 49.578125 26.382812 49.140625 26.460938z" \
                  stroke="none" \
                  fill="#D4D7DD" \
                  fill-rule="nonzero" \
                /> \
                <path \
                  d="M49.390625 66.59375C 46.695312 66.9375 44.75 69.49219 45.078125 72.26953C 45.234375 73.56641 45.75 74.62109 46.671875 75.47266C 47.5625 76.30859 48.523438 76.72266 49.726562 76.80078C 51.1875 76.88672 52.351562 76.43359 53.4375 75.33984C 54.484375 74.29297 54.9375 73.20703 54.945312 71.70703C 54.953125 70.796875 54.84375 70.27344 54.492188 69.515625C 53.554688 67.47656 51.53125 66.32031 49.390625 66.59375z" \
                  stroke="none" \
                  fill="#D4D7DD" \
                  fill-rule="nonzero" \
                /> \
              </g> \
            </g> \
          </svg> \
        </div>';
  }
  async loadInfographic(id, container, location, geometry, reportId, geography) {
    const self = this;
    if (!id || !container || (!location && !geometry && !geography) || !reportId)
      throw ('infographicCard error: invalid args loading infographic');
    self._iFrame = { id: id, container: container, instance: null };
    self.reportGeometry = geometry;
    self.reportId = reportId;
    self.reportGeography = geography;
    self.reportLocation = location;
    _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.removeChildren(container);
    // create new iframe
    self._iFrame.container.innerHTML = '<iframe id="' + self._iFrame.id + '" class="arcgisInfographicFrame"></iframe>';
    // continue after dom settles
    const _continueLoading = async () => {
      self._iFrame.instance = self._containerShadowRoot.querySelector(_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.U.fixId(this._iFrame.id));
      if (!self._iFrame.instance) ;
      else {
        try {
          // message the infographic iframe with URL and params when loaded
          //
          // Options
          const env = _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.E.getEnvironment();
          // Environments env should always be correct
          // console.assert(env === self.environment)
          self.environment = env;
          setEnvironment(self.environment);
          const playerPageUrl = await InfographicsHelper._getInfographicsPlayerUrl();
          // default environment is 'www'
          const subdomain = self.environment === 'dev' ? 'devext' : self.environment === 'qa' ? 'qaext' : 'www';
          let lat = (self.reportLocation) ? self.reportLocation.lat : 0;
          let lon = (self.reportLocation) ? self.reportLocation.lon : 0;
          if (!self.reportGeometry && (!self.reportLocation || !lat || !lon) && !self.reportGeography) {
            _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'InfographicCard error: invalid location, geometry or geography', self.reportLocation, self.reportGeometry, self.reportGeography);
          }
          else {
            self.langCode = self.langCode || 'en-us';
            self.sourceCountry = self.sourceCountry || 'US';
            const defaultHierarchy = await _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.G.getGEDefaultHierarchy(self.sourceCountry, self.portalOnlineGEProxy ? self.token : "");
            // Need to pass the second parameter in langCode as uppercase to ReportPlayer to work (e.g. pt-BR, not pt-br)
            const upperLangCode = self.langCode.length === 5 ? self.langCode.substring(0, 3) + self.langCode.substring(3).toUpperCase() : self.langCode;
            let params = '{ \
                "userId":"' + self.username + '", \
                "token":"' + self.token + '", \
                "expires":"' + (Math.floor(Date.now() + 86400000.5)).toString() + '", \
                "componentId":"' + self._iFrame.id + '", \
                "reportID":"' + self.reportId + '", \
                "countryID":"' + self.sourceCountry + '", \
                "langCode":"' + upperLangCode + '", \
                "allLanguages":true, \
                "hierarchy":"' + defaultHierarchy + '", ';
            if (self.geoenrichmentUrl) {
              params += ' "geoenrichmentUrl":"' + self.geoenrichmentUrl + '", ';
            }
            if (self.portalUrl) {
              params += ' "server":"' + self.portalUrl + '", ';
            }
            else {
              params += ' "server":"https://' + subdomain + '.arcgis.com" ,';
            }
            if (self.portalOnlineGEProxy) {
              params += ' "portalOnlineGEProxy":true ,';
            }
            let analysisAreas;
            // Use geography if it is set
            if (self.reportGeography) {
              analysisAreas = ' "analysisAreas": [{"locationName":"' + self.reportLocationName + '", "geographies":[' + JSON.stringify(self.reportGeography) + ']}] ';
            }
            else {
              analysisAreas = await self._getReportGeometryAnalysisAreas();
            }
            if (!analysisAreas) {
              // Infographic will be for a location with Rings
              if (self.bufferUnits == 'minutes') {
                // invalid units for rings
                self.bufferUnits = self.bufferUnits = 'miles'; // default units for rings
              }
              let areas = GeometryUtil.getRings(lat, lon, self.bufferUnits, self.bufferSizes, this.reportLocationName, this.reportLocationAttributes);
              params += ' "analysisAreas": ' + JSON.stringify(areas);
            }
            else {
              params += analysisAreas;
            }
            let options = self._createInfographicPlayerStyleOptions();
            if (options && options.length > 0) {
              params += ',' + options;
            }
            params += ' }';
            // After the iframe loads, we message it with the instructions about
            // the infographic that will be generated
            //
            // @ts-ignore
            self._iFrame.instance.onload = function () {
              function _delay() {
                // @ts-ignore
                if (self._iFrame && self._iFrame.instance && self._iFrame.instance.contentWindow) {
                  // console.log("%c infographicCard: iframe onload event: passing params to player => ",'color:blue;font-size:10pt', JSON.parse(params))
                  // @ts-ignore
                  self._iFrame.instance.contentWindow.postMessage({
                    type: 'infographic_parameters',
                    infographicParameters: params
                  }, playerPageUrl);
                }
              }
              setTimeout(_delay, 500);
            };
            // instantiate infographic player (report will display after loaded)
            // @ts-ignore
            self._iFrame.instance.src = playerPageUrl;
          }
        }
        catch (ex) {
          _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.L.show('%e', 'InfographicCard error', ex);
        }
      }
    };
    setTimeout(_continueLoading, 0);
  }
  // /**
  //  * Renders the infographic iframe OR the warning image
  //  *
  //  * Actual infographic display is done in the 'loadInfographic' function
  //  */
  // render() {
  //   let _showWarning = false
  //   this._checkBuffers()
  //   if(!this._validateSetup()) {
  //     DebugLog.log('InfographicCard', ' error - no location or boundary to display')
  //     _showWarning = true
  //   }
  //   if(!_showWarning && !this.reportLocation && !this.reportGeometry) {
  //     DebugLog.log('InfographicCard', ' error - no location or boundary to display')
  //     _showWarning = true
  //   }
  //   if(!_showWarning && (!this.username || !this.token)) {
  //     DebugLog.log('InfographicCard', ' render error - invalid username/token')
  //     _showWarning = true
  //   }
  //
  //   if(!_showWarning) {
  //     this._checkBuffersAssignDefaults()
  //     setToken(this.username, this.token)
  //     return '<iframe id="' + this._iFrame.id + '" class="arcgisInfographicFrame"></iframe>'
  //   } else {
  //     return this.generateNotReadyHtml()
  //   }
  // }
  /* Client interface */
  updateInfographic() {
    // assuming all properties have been updated already.
    this.regenerateContent();
  }
  /**  setReportLocation
   *      Updates the report location (lat/lon) for the report. The also
   *      forces a refresh
   *
   * @param loc see LocationType
   */
  setReportLocation(loc) {
    if (loc && loc.lat && loc.lon) {
      this.reportLocation = loc;
      this.regenerateContent(true);
    }
  }
  /**  setReportGeometry
   *      Updates the report geometry for the report and
   *      forces a refresh
   *
   * @param loc geometry object
   */
  setReportGeometry(geometry) {
    if (geometry) {
      this.reportGeometry = geometry;
      this.regenerateContent(true);
    }
  }
  /**  setReportGeography
   *      Updates the report geography for the report and
   *      forces a refresh
   *
   * @param loc geography object
   */
  setReportGeography(geography) {
    if (geography) {
      this.reportGeography = geography;
      this.regenerateContent(true);
    }
  }
  /** generateBuffers
   *    Generates drivetime or walktime buffers using the InfographicCard properties
   *
   *    Result: geometry is saved into this InfographicCard's reportGeometry
   *    Return: object = {
   *      success:boolean,
   *      error:string
   *    }
   */
  async generateBuffers() {
    // Validation
    if (!this.sourceCountry)
      return { success: false, error: 'InfographicCard sourceCountry not valid' };
    if (!this.bufferType || (this.bufferType != 'drivetime' && this.bufferType != 'walktime'))
      return {
        success: false,
        error: '[' + this.bufferType + '] invalid bufferType (must be "drivetime" or "walktime")'
      };
    if (!this.bufferSizes || this.bufferSizes.length <= 0)
      return { success: false, error: 'missing bufferSizes' };
    // let bufferValues = this.bufferSizes.toString();
    if (!this.bufferUnits || (this.bufferUnits != 'miles' && this.bufferUnits != 'kilometers' && this.bufferUnits != 'minutes'))
      return { error: 'invalid units' };
    if (!this.reportLocation || !this.reportLocation.lat)
      return { error: 'invalid latitude' };
    if (!this.reportLocation || !this.reportLocation.lon)
      return { error: 'invalid latitude' };
    // GE request to generate drivetime/walktime rings
    TransportUtil.setToken(this.username, this.token);
    let resultObject;
    let lat = this.reportLocation.lat;
    let lon = this.reportLocation.lon;
    if (this.bufferType == 'drivetime') {
      resultObject = await TransportUtil.getBuffers('drivetime', this.sourceCountry, this.bufferUnits, this.bufferSizes, lon, lat);
    }
    else {
      resultObject = await TransportUtil.getBuffers('walktime', this.sourceCountry, this.bufferUnits, this.bufferSizes, lon, lat);
    }
    // update the infographic to do the drivetime/walktime polygons
    // This assignment triggers an infographic refresh
    // this._isInternalUpdate = true;
    this.reportGeometry = resultObject;
    return resultObject;
  }
}

const arcgisInfographicCss = ":host{display:block}.notReadyOuter{position:absolute;top:0;left:0;width:100%;height:100%}.notReadyDiv{position:absolute;top:calc(50% - 50px);left:calc(50% - 50px);width:100px;height:100px}.notReadySvg{position:absolute;top:calc(50% - 29px);left:calc(50% - 33px)}.arcgisInfographicFrame{position:absolute;top:0;left:0;width:100%;height:100%;border:none}";

const ArcgisInfographic = class {
  constructor(hostRef) {
    (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_2__.r)(this, hostRef);
    this._isInternalUpdate = false; // flag to prevent full property update mechanism
    this._idPrefix = 'arcgis-infographic-';
    this._hasSetEnv = false;
    this._defaultOptions = JSON.stringify({
      bufferType: 'ring',
      bufferUnits: 'miles',
      bufferSizes: '1,3,5',
      viewMode: 'auto'
    });
    // debug logging set to true
    DebugLog.showDebugConsoleLogs = true;
  }
  // ---------------------------------------------------------------------------------------------------
  // watches
  onEnvChanged() {
    this.stEnv = this.env;
    _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.E.setEnvironment(this.env);
    if (this._infographicCard)
      this._infographicCard.environment = this.env;
    this._onPropChanged();
  }
  onTokenChanged() {
    this.stToken = this.token;
    if (this._infographicCard)
      this._infographicCard.token = this.token;
    this._onPropChanged();
  }
  onUsernameChanged() {
    this.stUsername = this.username;
    if (this._infographicCard)
      this._infographicCard.username = this.username;
    this._onPropChanged();
  }
  onLocationDisplayNameChanged() {
    // this._l('locationName',this.locationName)
    this.stLocationDisplayName = this.locationName;
    if (this._infographicCard)
      this._infographicCard.reportLocationName = this.locationName;
    this._onPropChanged();
  }
  onLocationAttributesChanged() {
    // this._l('locationName',this.locationName)
    this.stLocationAttributes = this.locationAttributes ? JSON.parse(this.locationAttributes) : {};
    if (this._infographicCard)
      this._infographicCard.reportLocationAttributes = this.stLocationAttributes;
    this._onPropChanged();
  }
  onLangCodeChanged() {
    this.stLangCode = this.langCode;
    if (this._infographicCard)
      this._infographicCard.langCode = this.langCode;
    _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B._initialize(this.stLangCode);
    this._onPropChanged();
  }
  onCountryChanged() {
    this.stSourceCountry = this.sourceCountry;
    if (this._infographicCard)
      this._infographicCard.sourceCountry = this.sourceCountry;
    this._onPropChanged();
  }
  onOptionsChanged() {
    this.stOptions = this.options;
    // console.log('%c BAC arcgis-infographic options changing...', 'color:blue;font-size:9pt;', this.options)
    if (this._infographicCard)
      this._infographicCard.setOptions(this.options, true);
    this._onPropChanged();
  }
  onReportIdChanged() {
    this.stReportId = this.reportId;
    if (this._infographicCard)
      this._infographicCard.reportId = this.reportId;
    this._onPropChanged();
  }
  onThemeChanged() {
    this.stTheme = JSON.parse(this.theme);
    this._onPropChanged();
  }
  onReportLocationChanged() {
    try {
      this.stReportLocation = this.reportLocation;
      this._onPropChanged();
    }
    catch (ex) {
      console.log(ex);
    }
  }
  onReportGeometryChanged() {
    this.stReportGeometry = this.reportgeometry;
    // if(!this._isInternalUpdate) {
    //   if(this._infographicCard) {
    //     if(Utils.hasText(this.reportgeometry))
    //       this._infographicCard.setReportGeometry(JSON.parse(this.reportgeometry))
    //   }
    this._onPropChanged();
    // } else this._isInternalUpdate = false //reset flag
  }
  onReportGeographyChanged() {
    this.stReportGeography = this.reportgeography;
    this._onPropChanged();
  }
  // Update the Infographic Report when the arcgis-report-list changes
  reportSelectedEventHandler(e) {
    let reportId = e.detail?.value;
    if (reportId) {
      this.stReportId = reportId;
      // destroy iframe
      let frame = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.queryElementById(this._iframeId);
      if (frame && frame.parentNode) {
        frame.parentNode.removeChild(frame);
      }
      this.componentDidLoad();
    }
  }
  // _l(...args) {
  //   console.log('%carcgis-infographic:', 'color:yellow', args)
  // }
  // Methods -------------------------------------------
  //
  /**
   * generateBuffers
   *
   * This function passes in values needed to do either a drivetime or walktime buffers
   * report.  The values passed in update the Props in the component, async returns the
   * rings, and generates a new infographic using the drivetime or walktime values.
   *
   * @param bufferType = 'walktime' or 'drivetime'
   * @param values     = string representing drivetime distance or time [example:"1,3,5"]
   * @param units      = "miles", "kilometers", or "minutes"
   * @param latitude   = map location
   * @param longitude
   *
   * @return = [
   *  { value: <bufferValue>, units: <bufferUnits>, rings: <geometry rings> },
   *  { value: <bufferValue>, units: <bufferUnits>, rings: <geometry rings> },
   *  <up to 3 results depending on length of values>
   * ]
   */
  async generateBuffers(bufferType, values, units, latitude, longitude) {
    const card = this._infographicCard;
    try {
      if (!card)
        return null;
      // bufferType
      if (_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(bufferType) && ['ring', 'drivetime', 'walktime'].includes(bufferType)) { // @ts-ignore
        card.bufferType = bufferType;
      }
      // values
      if (values && values.trim().length > 0) {
        let sizes = [];
        let arr = values.split(',');
        for (let ii = 0; ii < arr.length; ii++) {
          if (ii < 3 && arr[ii] && arr[ii].trim().length > 0) {
            sizes.push(parseFloat(arr[ii].trim()));
          }
        }
        if (sizes.length > 0)
          card.bufferSizes = sizes;
      }
      // units
      if (_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(units) && ['miles', 'kilometers', 'minutes'].includes(bufferType)) {
        // @ts-ignore
        card.bufferUnits = units;
      }
      // latitude, longitude
      if (_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(latitude) && _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(longitude)) {
        let lat = parseFloat(latitude);
        let lon = parseFloat(longitude);
        card.reportLocation = { lat: lat, lon: lon };
        this.reportLocation = longitude + ', ' + latitude;
      }
      this._isInternalUpdate = true;
      return (card.generateBuffers());
    }
    catch (ex) {
      DebugLog.log('arcgis-infographic: generate buffers error: ', ex);
      return { error: 'exception: ' + ex.toString() };
    }
  }
  async onPropChange(callback, context) {
    this._onChangeCallback = { fn: callback, ctx: context };
  }
  async updateInfographic(name, reportId, location, geometry, geography) {
    if (name && _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(name)) {
      this.locationName = name;
      this.stLocationDisplayName = name;
    }
    if (reportId && _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(reportId)) {
      this.reportId = reportId;
      this.stReportId = reportId;
    }
    if (location) {
      this.reportLocation = location;
      this.stReportLocation = location;
    }
    if (geometry) {
      this.reportgeometry = geometry;
      this.stReportGeometry = geometry;
    }
    if (geography) {
      this.reportgeography = geography;
      this.stReportGeography = geography;
    }
  }
  /**
   * Filters out multiple rapid events of the same type.  The callback
   * function will be called if no new events have happened during the
   * 'wait' time.
   * @param callback - your function to call when the events have settled
   * @param wait     - milliseconds delay (ex: 250)
   */
  _debounce2(callback, wait) {
    const self = this;
    const delayedCall = function () {
      self._debounceTimer = null;
      callback.apply(self);
    };
    // everytime _debounce2 is called we kill the previous timer
    if (self._debounceTimer)
      clearTimeout(self._debounceTimer);
    self._debounceTimer = setTimeout(delayedCall, wait);
  }
  _onFilteredPropChanged() {
    if (this._onChangeCallback)
      this._onChangeCallback.fn(this._onChangeCallback.ctx, this.reportLocation);
    else {
      console.log('WARN- arcgis-infographic component: property sync callback not found');
    }
    this.attemptInfographicRender();
  }
  _onPropChanged() {
    this._debounce2(this._onFilteredPropChanged, 250);
  }
  _debounce(func, wait, immediate) {
    let timeout;
    const self = this;
    return function () {
      let context = self, args = arguments;
      let later = function () {
        timeout = null;
        if (!immediate)
          func.apply(context, args);
      };
      let callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow)
        func.apply(context, args);
    };
  }
  // Stencil lifecycle methods
  //
  componentWillLoad() {
    // console.log('%c BAC arcgis-infographic willLoad', 'color:blue;font-size:9pt;', this.options)
    // console.log('%c BAC arcgis-infographic willLoad creds', 'color:red;font-size:9pt;', this.username, this.token)
    try {
      // Each component has the ID with a suffix counter number that
      // is managed by the static instance of this component.  The
      // result is that we support multiple instances of the component
      // on any given webpage.
      if (!this._instanceId)
        this._instanceId = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._idPrefix).id;
      if (!this._containerId)
        this._containerId = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId('componentOuter').id;
      if (!this._iframeId)
        this._iframeId = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId('igFrame').id;
      // initialize state variables here without causing another render()
      this.stEnv = this.env;
      this.stToken = this.token;
      this.stUsername = this.username;
      this.stLocationDisplayName = this.locationName;
      try {
        this.stLocationAttributes = JSON.parse(this.locationAttributes);
      }
      catch (error) {
        this.stLocationAttributes = {};
      }
      this.stLangCode = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(this.langCode) ? this.langCode : 'en-us';
      this.stSourceCountry = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(this.sourceCountry) ? this.sourceCountry : 'US';
      this.stReportId = this.reportId;
      this.stTheme = null;
      if (!this.options || !_ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(this.options)) {
        this.options = this._defaultOptions;
      }
      this.stOptions = JSON.parse(this.options);
      if (!this._hasSetEnv && this.env) {
        this._hasSetEnv = true;
        this.stEnv = this.env;
        _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.E.setEnvironment(this.env);
      }
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.B._initialize(this.stLangCode);
      // Set if GeoenrichmentUrl was optionally passed in
      if (this.geoenrichmentUrl) {
        _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.E.setGeoenrichmentUrl(this.geoenrichmentUrl);
      }
      // Set if Poratl Url was optionally passed in
      if (this.portalUrl) {
        _GEClient_f71049f8_js__WEBPACK_IMPORTED_MODULE_0__.E.setPortalUrl(this.portalUrl);
      }
      // console.log('%c BAC arcgis-infographic willLoad2', 'color:blue;font-size:9pt;', this.options)
      if (!this._infographicCard) {
        // console.log('%c BAC arcgis-infographic creating new InfographicCard', 'color:blue;font-size:9pt;')
        this._infographicCard = new InfographicCard(this.username, this.token, this.env, this.options);
        this._infographicCard.setOptions(this.options, true); //@@@@@@@@@@@@
        this._infographicCard.geoenrichmentUrl = this.geoenrichmentUrl;
        this._infographicCard.portalUrl = this.portalUrl;
        this._infographicCard.portalOnlineGEProxy = this.portalOnlineGEProxy;
        this._infographicCard.reportLocationName = this.stLocationDisplayName;
        this._infographicCard.reportLocationAttributes = this.stLocationAttributes;
        this._infographicCard.sourceCountry = this.stSourceCountry;
        this._infographicCard.langCode = this.stLangCode;
        this._infographicCard.setShadowRoot(this.el.shadowRoot);
      }
    }
    catch (ex) {
      console.log(ex);
    }
  }
  async attemptInfographicRender() {
    let container = _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_1__.A.queryElementById.call(this, this._containerId);
    let location, geometry, geography, reportId;
    if (this._infographicCard && this.options)
      this._infographicCard.setOptions(this.options, true);
    // console.log('%c BAC arcgis-infographic attemptInfographicRender', 'color:blue;font-size:9pt;', this._infographicCard)
    // console.log('%c BAC arcgis-infographic attemptRender creds', 'color:red;font-size:9pt;', this.username, this.token)
    // Sync InfographicCard properties
    if (this.reportLocation) {
      let geo = this.reportLocation.split(',');
      if (geo && geo.length == 2) {
        let lat = parseFloat(geo[1]);
        let lon = parseFloat(geo[0]);
        location = { lat: lat, lon: lon };
        this._infographicCard.setReportLocation(location);
      }
    }
    if (this.reportgeometry) {
      geometry = JSON.parse(this.reportgeometry);
      this._infographicCard.setReportGeometry(geometry);
    }
    if (this.reportgeography) {
      geography = JSON.parse(this.reportgeography);
      this._infographicCard.setReportGeography(geography);
    }
    if (this.reportId) {
      reportId = this.reportId;
      this._infographicCard.reportId = this.reportId;
    }
    // validate required data to draw an infographic
    if (container && (location || geometry || geography) && reportId) {
      await this._infographicCard.loadInfographic(this._iframeId, container, location, geometry, reportId, geography);
    }
  }
  // Main component screen generation
  componentDidLoad() {
    this.attemptInfographicRender();
  }
  render() {
    // this._l(' render() running....')
    // This initially renders the component container only and
    // will update the contents when the Stencil life cycle function
    // componentDidLoad() runs.  This is because the card render()
    // function is async, so we load it then on 'componentDidLoad' we
    // assign the iframe 'src' and do a 'postmessage' when the
    // iframe is finally ready to accept options.
    //
    return (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_2__.h)("div", { id: this._containerId, class: 'componentOuter' });
  }
  get el() { return (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_2__.g)(this); }
  static get watchers() { return {
    "env": ["onEnvChanged"],
    "token": ["onTokenChanged"],
    "username": ["onUsernameChanged"],
    "locationName": ["onLocationDisplayNameChanged"],
    "locationAttributes": ["onLocationAttributesChanged"],
    "langCode": ["onLangCodeChanged"],
    "sourceCountry": ["onCountryChanged"],
    "options": ["onOptionsChanged"],
    "reportId": ["onReportIdChanged"],
    "theme": ["onThemeChanged"],
    "reportLocation": ["onReportLocationChanged"],
    "reportgeometry": ["onReportGeometryChanged"],
    "reportgeography": ["onReportGeographyChanged"]
  }; }
};
ArcgisInfographic.style = arcgisInfographicCss;



//# sourceMappingURL=arcgis-infographic-3ef1a00f.js.map

/***/ }),

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic.entry.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic.entry.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_infographic: () => (/* reexport safe */ _arcgis_infographic_3ef1a00f_js__WEBPACK_IMPORTED_MODULE_0__.A)
/* harmony export */ });
/* harmony import */ var _arcgis_infographic_3ef1a00f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arcgis-infographic-3ef1a00f.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-3ef1a00f.js");





//# sourceMappingURL=arcgis-infographic.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,