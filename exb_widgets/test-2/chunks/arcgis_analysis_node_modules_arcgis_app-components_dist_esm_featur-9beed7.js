"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_featur-9beed7"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-38cdae87.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-38cdae87.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ getSecuredAGSServiceInfo),
/* harmony export */   M: () => (/* binding */ MULTI_PART_UPLOAD_MINIMUM_SIZE),
/* harmony export */   a: () => (/* binding */ addSecureAGSUrl),
/* harmony export */   b: () => (/* binding */ addApplication),
/* harmony export */   c: () => (/* binding */ addFeatureLayer),
/* harmony export */   d: () => (/* binding */ addCloudProviderResource),
/* harmony export */   e: () => (/* binding */ addFile),
/* harmony export */   f: () => (/* binding */ fetchApplicationManifest),
/* harmony export */   g: () => (/* binding */ getServiceAndLayerInfo),
/* harmony export */   h: () => (/* binding */ handleAddUrl),
/* harmony export */   i: () => (/* binding */ isHybridImageService),
/* harmony export */   j: () => (/* binding */ isAppComponentError),
/* harmony export */   k: () => (/* binding */ isBackendError),
/* harmony export */   l: () => (/* binding */ addFileFromDataUrl),
/* harmony export */   m: () => (/* binding */ selectOGCFeatureLayer),
/* harmony export */   n: () => (/* binding */ formatCustomParameters),
/* harmony export */   o: () => (/* binding */ getUrlServiceInfo),
/* harmony export */   p: () => (/* binding */ processPostAddKML),
/* harmony export */   q: () => (/* binding */ isFolderRoot),
/* harmony export */   r: () => (/* binding */ removeParameter),
/* harmony export */   s: () => (/* binding */ subscriptionState),
/* harmony export */   t: () => (/* binding */ addItem),
/* harmony export */   u: () => (/* binding */ findTemplateServiceInfo),
/* harmony export */   v: () => (/* binding */ createService),
/* harmony export */   w: () => (/* binding */ getItemStatus),
/* harmony export */   x: () => (/* binding */ uploadFile),
/* harmony export */   y: () => (/* binding */ registerApplication),
/* harmony export */   z: () => (/* binding */ getLayerItemData)
/* harmony export */ });
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./item-properties-e6412a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-e6412a9a.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _feature_layer_d33ea114_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./feature-layer-d33ea114.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-d33ea114.js");
/* harmony import */ var _functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-9f648bee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js");
/* harmony import */ var _server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./server-item-f12153e6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-f12153e6.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ags-68d4ae20.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js");
/* harmony import */ var _url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./url-f3b82cc7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-f3b82cc7.js");
/* harmony import */ var _file_f36193e9_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./file-f36193e9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-f36193e9.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/* harmony import */ var _guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./guid-4f4176ba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js");
/* harmony import */ var _store_3210b604_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./store-3210b604.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-3210b604.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


















function isFolderRoot(folder) {
  return (folder === null || folder === void 0 ? void 0 : folder.id) === (folder === null || folder === void 0 ? void 0 : folder.username);
}

/**
 * for AGS and OGC Feature Services urls, formatted params will be used for the service Info requests
 */
function addParameters(url) {
  const { customParameters: parameters } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  const delimiter = url.includes("?") ? "&" : "?";
  const customParameters = (parameters === null || parameters === void 0 ? void 0 : parameters.map(({ parameter, value }) => `${parameter || ""}${parameter || value ? "=" : ""}${value || ""}`).join("&")) || "";
  if (!customParameters) {
    return url;
  }
  return `${url}${delimiter}${customParameters}`;
}
function removeParameter(url, { value, parameter }) {
  const paramStr = `${parameter}=${value}`;
  const resultUrl = url.replace(url[url.indexOf(paramStr) - 1] === "&" ? `&${paramStr}` : paramStr, "");
  return resultUrl[resultUrl.length - 1] === "?" ? resultUrl.replace("?", "") : resultUrl;
}

const errorCodeList = [
  "appExtensionError",
  "forbiddenCredential",
  "disabledSubscription",
  "unauthorized",
  "timeout",
  // --- Item error code
  "itemExists",
  "exceedsFileSize",
  "fileExists",
  "emptyFile",
  "unavailableGeocoder",
  "dataNotAvailable",
  "invalidShapefile",
  "invalidFileGeodatabase",
  "providePath",
  "useSameFileName",
  "invalidExtension",
  "tokenRequired",
  // --- Item properties error code
  "serviceNameInvalid",
  "titleInvalid",
  "titleRequired",
  "titleInUseService",
  "summaryInvalid",
  "missingUserOrPortal",
  "dataStoreTitleInvalid",
  // --- Services
  "serviceNameExists",
  // --- AGS, WMF, WMS, WFS, etc
  "serviceNotExist",
  "unsupportedWFSVersion",
  "invalidWMTS",
  "invalidSpatialRef",
  "emptyFeatureLayer",
  // --- Feature layer,
  "invalidFeatureLayerUrl",
  "invalidUrl",
  "httpWarning",
  // --- User error
  "flowAborted",
  // --- CSV error
  "duplicateFieldNames",
  "failToFetchText",
  // --- Tile layer
  "mapServiceError",
  "noTilingSchemeFound",
  "noMatchSpatialRef",
  // --- Datastore
  "invalidDataStorePublishType",
  "noRegisteredServersForDataStore",
  "noContentInDataStore",
  "failToPublishFromDataStore",
  "failToListDataStoreContents",
  "invalidUsernameOrPassword",
  "invalidJSON",
  // --- Internal error
  "unknownAGSType",
  "unhandledError",
  // -- Append errors
  "incompatibleGeometries",
  "multiPatchRestriction"
];
// * Utils
const isAppComponentError = (error) => errorCodeList.includes(error === null || error === void 0 ? void 0 : error.code);
const isBackendError = (error) => error &&
  error.hasOwnProperty("code") &&
  error.hasOwnProperty("message") &&
  error.hasOwnProperty("details") &&
  (!error.details || Array.isArray(error.details));

const unsubscribe = async (id) => {
  const subscriber = subscriptionState.subscribers[id];
  try {
    await (subscriber === null || subscriber === void 0 ? void 0 : subscriber.unsubscribe());
  }
  catch (error) {
    console.error(`Fail to call unsubscribe for ${subscriber.name}: ${error}`);
  }
};
const removeSubscriber = async (id) => {
  delete subscriptionState.subscribers[id];
};
const unsubscribeAll = async () => {
  await Promise.all(Object.keys(subscriptionState.subscribers).map(unsubscribe));
  subscriptionStore.reset();
};
const addSubscriber = (name, unsubscribe) => {
  const id = `${name}---${(0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_14__.g)()}`;
  subscriptionState.subscribers[id] = { name, unsubscribe };
  return id;
};
const isSubscriberValid = (subscriptionId) => !!subscriptionState.subscribers[subscriptionId];
/** Used to keep track and handle all the long running job like polling and upload multi-part file */
const subscriptionStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_16__.c)({
  subscribers: {},
  unsubscribeAll,
  addSubscriber,
  unsubscribe,
  removeSubscriber,
  isSubscriberValid
});
const subscriptionState = subscriptionStore.state;

// File size constants
const MULTI_PART_UPLOAD_BATCH_SIZE = 26214400; // 25mb
const MULTI_PART_UPLOAD_MINIMUM_SIZE = 78643200; // 75mb
const MULTI_PART_UPLOAD_RETRIES = 5;
const MULTI_PART_UPLOAD_MAX_PARTS = 10000;
const MULTI_PART_UPLOAD_INITIAL_BATCH_SIZE = 3;
const MULTI_PART_UPLOAD_MAX_BATCH_SIZE = 10;

// The shape of customParamters in the component is different than how it needs to be formatted in the URLS, so we do that here.
function formatCustomParameters(customParams) {
  if (!customParams) {
    return null;
  }
  let appendAll = true;
  let customParameters = {};
  let customLayerParameters = {};
  // WMS and WMTS can have custom Paramters that only apply to the specific layer not the whole serviceInfo request - thats what were doing here.
  customParams.forEach(({ append, parameter, value }) => {
    if (append === "layer") {
      appendAll = false;
      customLayerParameters[parameter] = value;
    }
    else {
      customParameters[parameter] = value;
    }
  });
  return appendAll ? { customParameters } : { customParameters, customLayerParameters };
}

async function addApplication(item, restBaseUrl, appInfo) {
  if (item.type === "Desktop Application") {
    return addFile();
  }
  const response = await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.c)(item);
  if (item.type === "Application" || item.type === "API Key") {
    await registerApplication(response.id, restBaseUrl, appInfo);
  }
  return response;
}
async function registerApplication(itemId, restBaseUrl, appInfo) {
  const url = `${restBaseUrl}oauth2/registerApp`;
  let requestParam = {
    itemId,
    appType: "multiple",
    redirect_uris: JSON.stringify(["urn:ietf:wg:oauth:2.0:oob"])
  };
  const redirectUrlString = JSON.stringify(appInfo.redirect_uris);
  if (appInfo) {
    requestParam =
      appInfo.appType === "apikey"
        ? {
          itemId,
          appType: "apikey",
          redirect_uris: redirectUrlString,
          httpReferrers: JSON.stringify(appInfo.httpReferrers),
          privileges: JSON.stringify(appInfo.privileges)
        }
        : { itemId, appType: appInfo.appType, redirect_uris: redirectUrlString, url: appInfo.url };
  }
  try {
    return { result: await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, requestParam, {}, "post") };
  }
  catch (error) {
    console.error("error:", error);
    return { error: { code: "unhandledError" } };
  }
}
async function fetchApplicationManifest(manifestUrl) {
  try {
    return { result: await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(manifestUrl, {}, { addTokenManually: false }), error: null };
  }
  catch (error) {
    console.error("error:", error);
    return { result: null, error: { code: "appExtensionError" } };
  }
}

const HIDDEN_MAP_DIV_ID = "hiddenMapDiv";
const destroyHiddenMapDiv = () => {
  const hiddenMapDiv = document.getElementById(HIDDEN_MAP_DIV_ID);
  if (hiddenMapDiv) {
    hiddenMapDiv.parentNode.removeChild(hiddenMapDiv);
  }
};
/** Return the id of the hidden map */
const createHiddenMapDiv = (width = 200, height = 130) => {
  let hiddenMapDiv = document.getElementById(HIDDEN_MAP_DIV_ID);
  if (!hiddenMapDiv) {
    hiddenMapDiv = document.createElement("div");
    hiddenMapDiv.id = HIDDEN_MAP_DIV_ID;
    hiddenMapDiv.style.position = "absolute";
    hiddenMapDiv.style.left = "-1000px";
    hiddenMapDiv.style.top = "-1000px";
    hiddenMapDiv.style.width = `${width}px`;
    hiddenMapDiv.style.height = `${height}px`;
    document.body.appendChild(hiddenMapDiv);
  }
  const hiddenMap = document.createElement("div");
  const hiddenMapId = "hiddenMap";
  hiddenMap.id = hiddenMapId;
  hiddenMap.style.width = `${width}px`;
  hiddenMap.style.height = `${height}px`;
  hiddenMapDiv.appendChild(hiddenMap);
  return hiddenMapId;
};

async function createThumbnailImage(map, config) {
  const [PrintTemplate, PrintParameters, PrintTask, esriConfig] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    "esri/tasks/PrintTemplate",
    "esri/tasks/PrintParameters",
    "esri/tasks/PrintTask",
    "esri/config"
  ]);
  const thumbnailWidth = 600;
  const thumbnailHeight = 400;
  const template = new PrintTemplate();
  template.layout = "MAP_ONLY";
  template.format = "png32";
  template.preserveScale = false;
  template.showAttribution = false;
  template.showLabels = false;
  template.exportOptions = {
    width: thumbnailWidth,
    height: thumbnailHeight,
    dpi: 96
  };
  const printTask = new PrintTask(config.self.helperServices.printTask.url, {});
  const params = new PrintParameters();
  params.map = map;
  params.template = template;
  esriConfig.defaults.io.timeout = 120000;
  // TODO: Some feature services need to be projected to WGS84 to generate correctly
  // Can set extent to geographicExtent here but should fix within PrintParameters
  return new Promise((resolve, reject) => {
    printTask.execute(params, (result) => {
      esriConfig.defaults.io.timeout = 60000;
      destroyHiddenMap(map);
      resolve(result.url);
    }, (err) => {
      esriConfig.defaults.io.timeout = 60000;
      reject(err);
    });
  });
}
async function createHiddenMap(webMapData, gcsExtentAsList) {
  const { config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const itemInfo = { item: { extent: gcsExtentAsList }, itemData: webMapData };
  try {
    const [arcgisUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/arcgis/utils"]);
    // Need to set this so "createMap" uses the correct portalUrl, in the future
    // "createMap" should really be improved to use the portal API, or a portalUrl parameter
    // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/14819
    arcgisUtils.arcgisUrl = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.g)()}content/items`;
    const hiddenMapId = createHiddenMapDiv();
    const response = await arcgisUtils.createMap(itemInfo, hiddenMapId, {
      mapOptions: {
        nav: false
      },
      bingMapsKey: config.self.bingKey,
      geometryServiceURL: _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal.helperServices.geometry.url
    });
    const waitForHeatmapImageLayer = function (layer) {
      return new Promise((resolve) => {
        if (layer._heatmapManager) {
          layer._heatmapManager.on("recalculateHeatmap", resolve);
        }
        else {
          // layer might be out of scale
          resolve();
        }
      });
    };
    const waitForWFSFeatures = (layer) => {
      // there is no event...
      const count = [0];
      return new Promise((resolve) => {
        const intHndl = setInterval((layer, count) => {
          var _a;
          if ((_a = layer.graphics) === null || _a === void 0 ? void 0 : _a.length) {
            clearInterval(intHndl);
            resolve();
          }
          else if (count[0] > 10) {
            clearInterval(intHndl);
            resolve();
          }
          else {
            count[0] = count[0] + 1;
          }
        }, 500, layer, count);
      });
    };
    const waitForUpdateStart = (layer) => {
      return new Promise((resolve) => {
        if (layer.declaredClass === "esri.layers.VectorTileLayer") {
          // bug, doesn't call onUpdateStart sometimes
          setTimeout(resolve, 5000);
        }
        layer.on("update-start", () => {
          waitForUpdateEnd(layer).then(resolve);
        });
      });
    };
    const waitForUpdateEnd = function (layer) {
      return new Promise((resolve) => {
        if (!layer.updating) {
          return resolve();
        }
        if (layer.declaredClass === "esri.layers.VectorTileLayer") {
          // bug, doesn't call onUpdateEnd if there are no tiles in the view
          setTimeout(resolve, 10000);
        }
        layer.on("update-end", resolve);
      });
    };
    const { map } = response;
    const promises = [];
    map.graphicsLayerIds.forEach((layerId) => {
      var _a;
      const layer = map.getLayer(layerId);
      if (((_a = layer.renderer) === null || _a === void 0 ? void 0 : _a.type) === "heatmap") {
        promises.push(waitForHeatmapImageLayer(layer));
      }
      else if (layer.declaredClass === "esri.layers.WFSLayer") {
        promises.push(waitForWFSFeatures(layer));
      }
      else if (layer.updating) {
        promises.push(waitForUpdateEnd(layer));
      }
    });
    map.layerIds.forEach((layerId) => {
      const lyr = response.map.getLayer(layerId);
      if (lyr.updating) {
        promises.push(waitForUpdateEnd(lyr));
      }
      else if (lyr.declaredClass === "esri.layers.VectorTileLayer") {
        // this is not working correctly in VTL; viewer should not have to wait for update start
        promises.push(waitForUpdateStart(lyr));
      }
    });
    if (promises.length) {
      await Promise.all(promises);
      // we need to wait a little longer
      return new Promise((resolve) => {
        setTimeout(async () => {
          resolve(await createThumbnailImage(response.map, config));
        }, 1000);
      });
    }
    else {
      return await createThumbnailImage(response.map, config);
    }
  }
  catch (error) {
    throw new Error(`Map creation failed: ${JSON.stringify(error)}`);
  }
}

async function buildThumbnailURLFromItemWebMap(webMap, gcsExtentAsList, spatialReference) {
  var _a;
  // TODO: remove this dependency
  const api = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api;
  // does not support heatmap renderer
  const [Geoprocessor] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([api === 3 ? "esri/tasks/Geoprocessor" : "esri/rest/geoprocessor"]);
  const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  ((_a = webMap.baseMap.baseMapLayers) !== null && _a !== void 0 ? _a : []).forEach((baseMapLayer) => {
    delete baseMapLayer.resourceInfo;
  });
  webMap.mapOptions = {
    showAttribution: false,
    extent: {
      xmin: gcsExtentAsList[0][0],
      ymin: gcsExtentAsList[0][1],
      xmax: gcsExtentAsList[1][0],
      ymax: gcsExtentAsList[1][1],
      spatialReference: {
        wkid: 4326
      }
    },
    spatialReference: spatialReference
  };
  webMap.exportOptions = {
    dpi: 96,
    outputSize: [600, 400]
  };
  webMap.layoutOptions = {};
  const params = {
    Web_Map_as_JSON: JSON.stringify(webMap),
    Format: "PNG32",
    Layout_Template: "MAP_ONLY"
  };
  if (api === 3) {
    const gp = new Geoprocessor(portal.helperServices.printTask.url);
    return new Promise((resolve, reject) => {
      gp.execute(params).then((response) => {
        if (response) {
          let found = false;
          for (let i = 0; i < response.length; i++) {
            if (response[i].paramName === "Output_File") {
              resolve(response[i].value.url);
              found = true;
              break;
            }
          }
          if (!found) {
            reject();
          }
        }
      });
    });
  }
  const { results } = await Geoprocessor.execute(portal.helperServices.printTask.url, params);
  const url = results.find((result) => result.dataType === "data-file" && result).value.url;
  if (!url) {
    // TODO: refactor this error to the new system
    throw new Error("Failed to create thumbnail");
  }
  return url;
}
function destroyHiddenMap(map) {
  var _a;
  map.destroy();
  (_a = document.getElementById("hiddenMapDiv")) === null || _a === void 0 ? void 0 : _a.removeChild(document.getElementById("hiddenMap"));
}
async function buildThumbnailURLFromWebMap(webMap, gcsExtentAsList) {
  return await createHiddenMap(webMap, gcsExtentAsList);
}

async function buildThumbnailURLFromKMLItem(item) {
  var _a;
  const [SpatialReference] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? "esri/geometry/SpatialReference" : "esri/SpatialReference"
  ]);
  const { config, portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const webMap = {};
  webMap.baseMap = config.defaultBasemap || portal.defaultBasemap;
  webMap.baseMap.title = "basemap";
  webMap.operationalLayers = [];
  let url = item.url;
  if (!url && item.type === "KML") {
    // loaded from a file KML
    url = config.restBaseUrl + "content/items/" + item.id + "/data";
  }
  // we don't have ID manager
  const restDomain = new URL(config.restBaseUrl).hostname;
  if (url.indexOf(restDomain) > -1) {
    const token = (_a = config === null || config === void 0 ? void 0 : config.userInfo) === null || _a === void 0 ? void 0 : _a.token;
    if (token) {
      url += "?token=" + token;
    }
  }
  webMap.operationalLayers.push({
    url,
    id: "KML_" + Math.random(),
    opacity: 1,
    title: item.title,
    visibility: true,
    type: "KML"
  });
  let ext = [];
  if (typeof item.extent === "string") {
    const e = item.extent.split(",");
    ext = [
      [parseFloat(e[0]), parseFloat(e[1])],
      [parseFloat(e[2]), parseFloat(e[3])]
    ];
  }
  else {
    if (item.extent && item.extent.length > 0) {
      ext = item.extent;
    }
    else {
      ext = [
        [-180, -90],
        [180, 90]
      ];
    }
  }
  return buildThumbnailURLFromItemWebMap(webMap, ext, new SpatialReference({ wkid: 4326 }));
}

const worldExtentInfo = {
  xmax: 20000000,
  xmin: -20000000,
  ymax: 20000000,
  ymin: -20000000,
  spatialReference: {
    wkid: 102100
  }
};
function wrapAround(wkid, geom) {
  const VALID_EXTENTS = {
    "102113": [-20037508.342788905, 20037508.342788905],
    "102100": [-20037508.342788905, 20037508.342788905],
    "3785": [-20037508.342788905, 20037508.342788905],
    "3857": [-20037508.342788905, 20037508.342788905],
    "4326": [-180, 180]
  };
  const valid = VALID_EXTENTS[wkid];
  if (valid) {
    if (geom.xmin > geom.xmax) {
      // wrap around
      const dif1 = valid[1] - geom.xmin;
      const dif2 = geom.xmax - valid[0];
      if (dif1 > dif2) {
        geom.xmax = valid[1] + dif2;
      }
      else {
        geom.xmin = valid[0] - dif1;
      }
    }
  }
}
function getSpatialReference(serviceInfo, agsType) {
  var _a, _b;
  const spatialReference = agsType !== "ImageServer" ? serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.spatialReference : (_a = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.extent) === null || _a === void 0 ? void 0 : _a.spatialReference;
  if (!spatialReference) {
    return null;
  }
  else if (spatialReference.wkid) {
    return spatialReference.wkid;
  }
  else if (((_b = spatialReference.wkt) === null || _b === void 0 ? void 0 : _b.search(/^PROJCS/i)) !== -1) {
    return /^PROJCS\["[A-Za-z0-9_]*/i.exec(spatialReference.wkt)[0].split("[")[1];
  }
  return null;
}
async function projectExtentToWGS84(extent) {
  var _a, _b;
  const [SpatialReference] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? "esri/geometry/SpatialReference" : "esri/SpatialReference"
  ]);
  const hasSR = ((_a = extent === null || extent === void 0 ? void 0 : extent.spatialReference) === null || _a === void 0 ? void 0 : _a.wkid) || ((_b = extent === null || extent === void 0 ? void 0 : extent.spatialReference) === null || _b === void 0 ? void 0 : _b.wkt);
  const GCS_WGS_1984 = new SpatialReference({ wkid: 4326 });
  const sameSpatialRef = await sameSpatialReference(GCS_WGS_1984, extent === null || extent === void 0 ? void 0 : extent.spatialReference);
  return hasSR && !sameSpatialRef ? await project(extent, GCS_WGS_1984) : extent;
}
async function projectExtentToWGS84FromItem(item) {
  const { extent } = item;
  item.extent = extentToString(await projectExtentToWGS84(extent));
  return item;
}
async function projectExtent(geometry, outSR) {
  const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const [mercatorUtils, GeometryService] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4
    ? ["esri/geometry/support/webMercatorUtils", "esri/rest/geometryService"]
    : ["esri/geometry/webMercatorUtils", "esri/tasks/GeometryService"]);
  const mercator = [102113, 102100, 3857];
  const wkid = geometry.spatialReference.wkid;
  // we only have 1 geometry anyway
  if (wkid === outSR.wkid) {
    return [geometry];
  }
  let geom;
  // going from GCS_WGS_1984 to mercator
  if (wkid === 4326 && mercator.indexOf(outSR.wkid) > -1) {
    // clip it, so it's not going to Infinity
    geometry.ymin = Math.max(geometry.ymin, -89.99);
    geometry.ymax = Math.min(geometry.ymax, 89.99);
    geom = mercatorUtils.geographicToWebMercator(geometry);
    wrapAround(outSR.wkid, geom);
    // geographicToWebMercator returns 102100; make sure it's what we want
    geom.spatialReference.wkid = outSR.wkid;
    return [geom];
  }
  if (mercator.indexOf(wkid) > -1 && outSR.wkid === 4326) {
    geom = mercatorUtils.webMercatorToGeographic(geometry);
    wrapAround(outSR.wkid, geom);
    return [geom];
  }
  else {
    return new Promise(async (resolve, reject) => {
      const geometryService = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? GeometryService : new GeometryService(portal.helperServices.geometry.url);
      const firstHandler = (result) => {
        // check if response is valid
        const first = result === null || result === void 0 ? void 0 : result[0];
        if ((first === null || first === void 0 ? void 0 : first.type) === "extent" &&
          !isNaN(result[0].xmin) &&
          !isNaN(result[0].ymin) &&
          !isNaN(result[0].xmax) &&
          !isNaN(result[0].ymax)) {
          resolve(result);
        }
        else if ((first === null || first === void 0 ? void 0 : first.type) === "point" && !isNaN(result[0].x) && !isNaN(result[0].y)) {
          resolve(result);
        }
        else {
          throw new Error();
        }
      };
      if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4) {
        try {
          const [_ProjectParameters] = (await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/rest/support/ProjectParameters"]));
          const projectParameters = new _ProjectParameters({ geometries: [geometry], outSpatialReference: outSR });
          firstHandler(await geometryService.project(portal.helperServices.geometry.url, projectParameters));
        }
        catch (error) {
          throw new Error(error);
        }
      }
      else {
        geometryService.project([geometry], outSR, firstHandler, (err) => {
          reject(err);
        });
      }
    });
  }
}
async function project(extent, toExtent) {
  var _a;
  const [Extent] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/geometry/Extent"]);
  const worldExtent = new Extent(worldExtentInfo);
  const fullExtent = new Extent(extent);
  const result = await projectExtent(fullExtent, toExtent);
  return ((_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a.type) === "extent" ? result[0] : worldExtent;
}
async function sameSpatialReference(sp1, sp2) {
  const mercator = [102113, 102100, 3857];
  if (((sp1 === null || sp1 === void 0 ? void 0 : sp1.wkt) == (sp2 === null || sp2 === void 0 ? void 0 : sp2.wkt) && ((sp1 === null || sp1 === void 0 ? void 0 : sp1.wkid) == (sp2 === null || sp2 === void 0 ? void 0 : sp2.wkid) || ((0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.i)(sp1.latestWkid) && (sp1 === null || sp1 === void 0 ? void 0 : sp1.latestWkid) == (sp2 === null || sp2 === void 0 ? void 0 : sp2.wkid)))) ||
    ((0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.i)(sp2 === null || sp2 === void 0 ? void 0 : sp2.latestWkid) && (sp1 === null || sp1 === void 0 ? void 0 : sp1.wkid) == (sp2 === null || sp2 === void 0 ? void 0 : sp2.latestWkid)) ||
    ((0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.i)(sp1 === null || sp1 === void 0 ? void 0 : sp1.latestWkid) && (sp1 === null || sp1 === void 0 ? void 0 : sp1.latestWkid) == (sp2 === null || sp2 === void 0 ? void 0 : sp2.latestWkid))) {
    return true;
  }
  else if ((sp1 === null || sp1 === void 0 ? void 0 : sp1.wkid) && (sp2 === null || sp2 === void 0 ? void 0 : sp2.wkid) && mercator.includes(sp1 === null || sp1 === void 0 ? void 0 : sp1.wkid) && mercator.includes(sp2 === null || sp2 === void 0 ? void 0 : sp2.wkid)) {
    return true;
  }
  return false;
}
async function getExtentWithFeatures(layer, extentAsList) {
  const { api } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const [SpatialReference] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    api === 4 ? "esri/geometry/SpatialReference" : "esri/SpatialReference"
  ]);
  const [FeatureLayer, StreamLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/layers/FeatureLayer", "esri/layers/StreamLayer"]);
  if (!layer || !(layer instanceof FeatureLayer) || layer instanceof StreamLayer) {
    return extentAsList;
  }
  if (api === 3) {
    // we want to zoom to where we see features
    await layer.addPlugin("esri/plugins/FeatureLayerStatistics");
    const info = await layer.statisticsPlugin.getSuggestedScaleRange();
    const { minScale, center, relaxedMinScale } = info;
    if (center) {
      // we need to use the width the scale is calculated with and then shrink down the map
      let extent = await getExtentFromCenter(center, 1280, minScale);
      if (info.relaxedMinScale > 0) {
        // are we still in the scale of the layer for a 200 width map?
        let scale = getScaleForExtent(extent, 200);
        let width = 800;
        while (scale > relaxedMinScale) {
          extent = getExtentFromCenter(center, width, minScale);
          scale = getScaleForExtent(extent, 200);
          width -= 200;
          if (width <= 0) {
            // that's it, we can't do more. Thumbnail might look empty now.
            break;
          }
        }
      }
      try {
        const result = await projectExtent(extent, new SpatialReference({ wkid: 4326 }));
        extentAsList = [
          [result[0].xmin, result[0].ymin],
          [result[0].xmax, result[0].ymax]
        ];
        return extentAsList;
      }
      catch (_a) {
        return extentAsList;
      }
    }
    else {
      return extentAsList;
    }
  }
  // TODO: use esri/smartMapping/heuristics/scaleRange to zoom to features.
  return extentAsList;
}
async function getScaleForExtent(extent, width) {
  const [esriConfig, WKIDUnitConversion] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/config", "esri/WKIDUnitConversion"]);
  const INCHES_PER_METER = 39.37;
  const DEC_DEG_TO_METERS = 20015077.0 / 180.0;
  const spatialRef = extent.spatialReference;
  const wkid = spatialRef === null || spatialRef === void 0 ? void 0 : spatialRef.wkid;
  const wkt = spatialRef === null || spatialRef === void 0 ? void 0 : spatialRef.wkt;
  let unitValue = null;
  if (wkid) {
    unitValue = WKIDUnitConversion.values[WKIDUnitConversion[wkid]];
  }
  else if ((wkt === null || wkt === void 0 ? void 0 : wkt.search(/^PROJCS/i)) !== -1) {
    // well known text is PROJCS
    const result = /UNIT\[([^\]]+)\]\]$/i.exec(wkt);
    if (result === null || result === void 0 ? void 0 : result[1]) {
      unitValue = parseFloat(result[1].split(",")[1]);
    }
  }
  // else assumed to be in degrees
  return ((extent.getWidth() / width) * (unitValue || DEC_DEG_TO_METERS) * INCHES_PER_METER * esriConfig.defaults.screenDPI);
}
async function getExtentFromCenter(point, width, scale) {
  const [Extent] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/geometry/Extent"]);
  const extent = new Extent(point.x - 1, point.y - 0.5, point.x + 1, point.y + 0.5, point.spatialReference);
  return getExtentForScale(extent, width, scale);
}
async function getExtentForScale(extent, width, scale) {
  const [esriConfig, WKIDUnitConversion] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/config", "esri/WKIDUnitConversion"]);
  const INCHES_PER_METER = 39.37, DEC_DEG_TO_METERS = 20015077.0 / 180.0, lookup = WKIDUnitConversion;
  let wkid, wkt, sr = extent.spatialReference;
  if (sr) {
    wkid = sr.wkid;
    wkt = sr.wkt;
  }
  let unitValue = null;
  if (wkid) {
    unitValue = lookup.values[lookup[wkid]];
  }
  else if (wkt && wkt.search(/^PROJCS/i) !== -1) {
    const result = /UNIT\[([^\]]+)\]\]$/i.exec(wkt);
    if (result === null || result === void 0 ? void 0 : result[1]) {
      unitValue = parseFloat(result[1].split(",")[1]);
    }
  }
  // else assumed to be in degrees
  const newExtent = extent.expand((scale * width) /
    ((unitValue || DEC_DEG_TO_METERS) * INCHES_PER_METER * esriConfig.defaults.screenDPI) /
    extent.getWidth());
  return newExtent;
}
const isValidWGS84Extent = (extent) => {
  // Taken from Define Extent.js
  const inRange = (value, min, max) => value >= min && value <= max;
  return (inRange(extent.ymax, -90, 90) && // -90 <= maxy <= 90
    inRange(extent.ymin, -90, 90) && // -90 <= miny <= 90
    inRange(extent.xmax, -180, 180) && // -180 <= maxx <= 180
    inRange(extent.xmin, -180, 180) && // -180 <= minx <= 180
    extent.ymax > extent.ymin && // maxy > miny
    extent.xmax > extent.xmin // maxx > minx
  );
};
function extentToString(extent, places = 4) {
  if (!extent) {
    return extentToString(worldExtentInfo);
  }
  if (typeof extent === "string") {
    return extent;
  }
  if (Array.isArray(extent)) {
    if (Array.isArray(extent[0]) && Array.isArray(extent[1])) {
      let mins;
      let maxs;
      if (extent[0].length === 2) {
        mins = extent[0];
        maxs = extent[1];
      }
      // Refer to OGCExtent's bbox type
      if (extent[0].length === 4 || extent[0].length === 6) {
        mins = [extent[0][0], extent[0][1]];
        maxs = [extent[0][2], extent[0][3]];
        if (extent[0].length === 6) {
          maxs = [extent[0][3], extent[0][4]];
        }
      }
      return `${mins.join(",")},${maxs.join(",")}`;
    }
    return extent.join(",");
  }
  const xmin = extent.xmin.toFixed(places);
  const ymin = extent.ymin.toFixed(places);
  const xmax = extent.xmax.toFixed(places);
  const ymax = extent.ymax.toFixed(places);
  return `${xmin},${ymin},${xmax},${ymax}`;
}

async function addKMLUrl(itemProperties, config, api) {
  try {
    const [extent, thumbnailURL] = await Promise.all([
      setKmlExtent(itemProperties.url, config, api),
      buildThumbnailURLFromKMLItem(itemProperties)
    ]);
    return await addUrl(Object.assign(Object.assign({}, itemProperties), { extent, thumbnailURL }));
  }
  catch (error) {
    throw error;
  }
}
async function setKmlExtent(url, config, api) {
  const [esriConfig, KMLLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/config", "esri/layers/KMLLayer"]);
  if (api === 3) {
    esriConfig.defaults.kmlService = config.kmlService;
  }
  else {
    esriConfig.kmlServiceUrl = config.kmlService;
  }
  if (api === 4) {
    const kmlLayer = new KMLLayer({ url });
    await kmlLayer.load();
    const kmlExtent = kmlLayer.fullExtent;
    const extent = extentToString(kmlExtent);
    return extent;
  }
  const kmlLayer = new KMLLayer(url);
  return new Promise((resolve, reject) => {
    kmlLayer.on("load", async () => {
      const kmlExtent = await getKmlExtent(kmlLayer);
      resolve(kmlExtent ? extentToString(kmlExtent) : undefined);
    });
    kmlLayer.on("error", reject);
  });
}
async function getKmlExtent(kmlLayer) {
  const [graphicsUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/graphicsUtils"]);
  const kmlLayers = kmlLayer.getLayers();
  let kmlExtent;
  kmlLayers.forEach((layer) => {
    var _a;
    if (((_a = layer.graphics) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      const layerExtent = graphicsUtils.graphicsExtent(layer.graphics);
      kmlExtent = !kmlExtent ? layerExtent : kmlExtent.union(layerExtent);
    }
  });
  return kmlExtent;
}
const processPostAddKML = async (itemId, portal, restBaseUrl, config, api) => {
  try {
    const baseUrl = portal.isPortal ? restBaseUrl : `https://${portal.portalHostname}/sharing/rest`;
    const url = portal.portalHostname ? `${baseUrl}/content/items/${itemId}/data` : `${(0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.g)(itemId)}/data`;
    const extent = await setKmlExtent(url, config, api);
    // TODO: Double check result type on URL refactor
    const result = await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.e)(itemId, { url, extent });
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};

/** True if x doesn't hold a value. */
function isNone(x) {
  return x == null;
}

async function isTiledImageServiceLayer(layer) {
  if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4) {
    return layer.type == "imagery-tile";
  }
  const [RasterXLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/layers/RasterXLayer"]);
  return layer instanceof RasterXLayer;
}
async function isImageServiceLayer(layer) {
  if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4) {
    return layer.type === "imagery";
  }
  const [ArcGISImageServiceLayer, ArcGISImageServiceVectorLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    "esri/layers/ArcGISImageServiceLayer",
    "esri/layers/ArcGISImageServiceVectorLayer"
  ]);
  return layer instanceof ArcGISImageServiceLayer || layer instanceof ArcGISImageServiceVectorLayer;
}
async function getDefaultPopupInfo(layerInfo, layer) {
  var _a, _b;
  const displayField = layerInfo.displayField;
  const title = layerInfo.name + ((displayField === null || displayField === void 0 ? void 0 : displayField.length) ? `: {${displayField}}` : "");
  let fields = layerInfo.fields;
  let isMosaicDatasetService = false;
  let isVectorMosaicDatasetService = false;
  let isIntegerImageService = false;
  const isImageService = await isImageServiceLayer(layer);
  const isTiledImageService = await isTiledImageServiceLayer(layer);
  if (isImageService || isTiledImageService) {
    const options = { rasterAttributeTableFieldPrefix: "Raster." };
    fields = (_a = layer.getCustomRasterFields) === null || _a === void 0 ? void 0 : _a.call(layer, options);
    isIntegerImageService = ["F32", "F64"].indexOf(layer.pixelType) < 0;
    //checking for single dataset image service
    if (layer === null || layer === void 0 ? void 0 : layer.capabilities) {
      isMosaicDatasetService = (layer === null || layer === void 0 ? void 0 : layer.capabilities.toLowerCase().indexOf("catalog")) > -1 || ((_b = layer.fields) === null || _b === void 0 ? void 0 : _b.length) > 0;
      isVectorMosaicDatasetService =
        isMosaicDatasetService &&
          (layer.serviceDataType === "esriImageServiceDataTypeVector-UV" ||
            layer.serviceDataType === "esriImageServiceDataTypeVector-MagDir");
    }
  }
  const decimal = {
    esriFieldTypeDouble: 1,
    esriFieldTypeSingle: 1
  };
  const integer = {
    esriFieldTypeInteger: 1,
    esriFieldTypeSmallInteger: 1
  };
  const dt = {
    esriFieldTypeDate: 1
  };
  // hide editor tracking fields
  let editTrackingFields = ",";
  if (layerInfo.editFieldsInfo) {
    if (layerInfo.editFieldsInfo.creatorField) {
      editTrackingFields += `${layerInfo.editFieldsInfo.creatorField},`;
    }
    if (layerInfo.editFieldsInfo.creationDateField) {
      editTrackingFields += `${layerInfo.editFieldsInfo.creationDateField},`;
    }
    if (layerInfo.editFieldsInfo.editorField) {
      editTrackingFields += `${layerInfo.editFieldsInfo.editorField},`;
    }
    if (layerInfo.editFieldsInfo.editDateField) {
      editTrackingFields += `${layerInfo.editFieldsInfo.editDateField},`;
    }
    editTrackingFields = editTrackingFields.toLowerCase();
  }
  const fieldInfos = fields.map((item) => {
    let visible = item.type !== "esriFieldTypeOID" &&
      item.type !== "esriFieldTypeGlobalID" &&
      item.type !== "esriFieldTypeGeometry";
    let format = null;
    let isEditable = item.editable && item.type !== "esriFieldTypeOID" && item.type !== "esriFieldTypeGlobalID";
    if (visible) {
      let f = item.name.toLowerCase();
      let hideFieldsStr = `${editTrackingFields}stretched value,fnode_,tnode_,lpoly_,rpoly_,poly_,subclass,subclass_,rings_ok,rings_nok,`;
      if (isMosaicDatasetService) {
        hideFieldsStr = `${hideFieldsStr}raster.itempixelvalue,`;
        if (isVectorMosaicDatasetService) {
          hideFieldsStr = `${hideFieldsStr}raster.magnitude,raster.direction,`;
        }
      }
      if (hideFieldsStr.indexOf(`,${f},`) > -1 ||
        //f.indexOf("area") > -1 ||
        //f.indexOf("length") > -1 ||
        f.indexOf("shape") > -1 ||
        f.indexOf("perimeter") > -1 ||
        f.indexOf("objectid") > -1 ||
        f.indexOf("raster.servicepixelvalue.") > -1 ||
        //f.indexOf("_") == f.length - 1 ||
        f.indexOf("_i") == f.length - 2) {
        visible = false;
      }
      if (item.type in integer) {
        format = {
          places: 0,
          digitSeparator: true
        };
      }
      else if (item.type in decimal) {
        var rasterPixelValueField = isIntegerImageService &&
          (f.indexOf("raster.servicepixelvalue") > -1 || f.indexOf("raster.itempixelvalue") > -1);
        format = {
          places: rasterPixelValueField ? 0 : 2,
          digitSeparator: true
        };
      }
      else if (item.type in dt && (layerInfo.currentVersion >= 10 || (layer === null || layer === void 0 ? void 0 : layer.version) >= 10)) {
        format = {
          dateFormat: "longMonthDayYear"
        };
      }
    }
    isEditable = isEditable ? editTrackingFields.indexOf(`,${item.name.toLowerCase()},`) === -1 : isEditable;
    return {
      fieldName: item.name,
      label: item.alias,
      isEditable,
      tooltip: "",
      visible,
      format,
      stringFieldOption: "textbox"
    };
  });
  const popupInfo = {
    title: title,
    fieldInfos: fieldInfos,
    description: null,
    showAttachments: true,
    mediaInfos: [],
    layerOptions: undefined
  };
  if (isImageServiceLayer(layer)) {
    popupInfo.layerOptions = {};
    popupInfo.layerOptions.showNoDataRecords = true;
    popupInfo.layerOptions.returnTopmostRaster = true;
  }
  else if (isTiledImageServiceLayer(layer)) {
    popupInfo.layerOptions = {};
    popupInfo.layerOptions.showNoDataRecords = true;
  }
  return popupInfo;
}

const pointJson = {
  type: "esriSMS",
  style: "esriSMSCircle",
  color: [34, 114, 162, 128],
  size: 6,
  outline: {
    color: [34, 114, 162, 255],
    width: 1
  }
};
const lineJson = {
  type: "esriSLS",
  style: "esriSLSSolid",
  color: [77, 77, 77, 255],
  width: 1.5
};
const polygonJson = {
  type: "esriSFS",
  style: "esriSFSSolid",
  color: [227, 139, 79, 204],
  outline: {
    type: "esriSLS",
    style: "esriSLSSolid",
    color: [255, 255, 255, 255],
    width: 0.75
  }
};
async function getRendererAsJson(geometryType) {
  const [SimpleRenderer, esriJsonUtil] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    "esri/renderers/SimpleRenderer",
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? "esri/geometry/support/jsonUtils" : "esri/symbols/jsonUtils"
  ]);
  switch (geometryType) {
    case "esriGeometryPoint":
      return new SimpleRenderer(esriJsonUtil.fromJson(pointJson)).toJson();
    case "esriGeometryPolyline":
      return new SimpleRenderer(esriJsonUtil.fromJson(lineJson)).toJson();
    case "esriGeometryPolygon":
      return new SimpleRenderer(esriJsonUtil.fromJson(polygonJson)).toJson();
  }
}
async function getPopupInfo(wfsLayer) {
  const { fields, selectedLayer } = wfsLayer;
  if (fields === null || fields === void 0 ? void 0 : fields.length) {
    const nonGeomFields = fields.filter((field) => field.type !== "esriFieldTypeGeometry");
    if (nonGeomFields === null || nonGeomFields === void 0 ? void 0 : nonGeomFields.length) {
      return getDefaultPopupInfo({
        name: (selectedLayer === null || selectedLayer === void 0 ? void 0 : selectedLayer.title) || "",
        fields: fields
      }, wfsLayer);
    }
  }
}
async function getWfsConfig(wfsLayer) {
  const { layerNamespace, getFeatureUrl, spatialReferences, fields } = wfsLayer;
  const { maxFeatures, geometryType: addItemGeometryType } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  let url;
  let mode;
  let version;
  let name;
  if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3) {
    const data = wfsLayer.toJson();
    url = data.url;
    mode = data.mode;
    version = data.version;
    name = data.name;
  }
  else {
    const v4WFS = wfsLayer;
    url = v4WFS.url;
    // mode = v4WFS.mode;
    version = "2.0.0";
    name = v4WFS.name;
  }
  const geometryType = addItemGeometryType || wfsLayer.geometryType || "esriGeometryComplex";
  return {
    url,
    mode,
    wfsInfo: {
      version,
      name,
      wfsNamespace: layerNamespace,
      featureUrl: getFeatureUrl,
      supportedSpatialReferences: spatialReferences,
      customParameters: wfsLayer.customParameters || {},
      maxFeatures: maxFeatures || wfsLayer.maxFeatures || 3000
    },
    layerDefinition: {
      geometryType: geometryType,
      drawingInfo: {
        renderer: await getRendererAsJson(geometryType)
      },
      spatialReference: {
        wkid: 4326
      },
      fields
    },
    popupInfo: await getPopupInfo(wfsLayer)
  };
}
async function buildThumbnailURLFromWFSItem(extent) {
  const { config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const webMap = {
    baseMap: config.defaultBasemap || config.self.defaultBasemap,
    operationalLayers: []
  };
  const { baseMapLayers } = webMap.baseMap;
  // we need only one basemap layer and we hide it - use layerSet bool to check if one has been set already
  let layerSet = false;
  baseMapLayers.forEach((layer) => {
    if (!layer.isReference && !layerSet) {
      // we need only one basemap layer and we hide it
      if ((config.allSSL || location.protocol == "https:") &&
        ((0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.a)(layer.url) || (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.b)(layer.url))) {
        layer.url = layer.url.replace("http:", "https:");
      }
      layer.visibility = false;
      layerSet = true;
      webMap.baseMap.baseMapLayers = [layer];
    }
  });
  const operationalLayer = {
    type: "WFS",
    layerType: "WFS",
    opacity: 1,
    visibility: true,
    id: "wfs_xxx",
    wfsInfo: {
      maxFeatures: 100
    }
  };
  webMap.operationalLayers.push(operationalLayer);
  return buildThumbnailURLFromItemWebMap(webMap, extent);
}
async function getWMTSConfig(wmtsLayer) {
  var _a;
  const is4xAPI = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4;
  function getTileInfoAsJson(selectedTileInfo) {
    const { tileInfo } = selectedTileInfo;
    if ((tileInfo === null || tileInfo === void 0 ? void 0 : tileInfo.dpi) !== 96) {
      tileInfo.lods.forEach((lod) => {
        lod.scale = (lod.scale * 96) / tileInfo.dpi;
      });
      tileInfo.dpi = 96;
    }
    return is4xAPI ? tileInfo : tileInfo.toJson();
  }
  function getCopyright(copyright) {
    if ((copyright === null || copyright === void 0 ? void 0 : copyright.toLowerCase()) !== "none") {
      return (copyright === null || copyright === void 0 ? void 0 : copyright.length) > 180 ? `${copyright.substring(0, 180)}..` : "";
    }
    else {
      return copyright;
    }
  }
  try {
    const [SpatialReference] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
      is4xAPI ? "esri/geometry/SpatialReference" : "esri/SpatialReference"
    ]);
    const { selectedLayer, selectedTileInfo, copyright } = wmtsLayer;
    const sr = (selectedTileInfo === null || selectedTileInfo === void 0 ? void 0 : selectedTileInfo.fullExtent.spatialReference) || new SpatialReference({ wkid: 4326 });
    const fullExtent = await projectExtent(selectedLayer === null || selectedLayer === void 0 ? void 0 : selectedLayer[is4xAPI ? "fullExtent" : "gcsExtent"], sr).then((result) => { var _a; return ((_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a.type) === "extent" ? (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? result[0] : result[0].toJson()) : null; });
    const format = selectedLayer[is4xAPI ? "imageFormat" : "formats"].indexOf("image/png") > -1
      ? "image/png"
      : selectedLayer.formats[0];
    wmtsLayer.resourceUrls = selectedLayer.resourceUrls;
    let templateUrl;
    if (is4xAPI) {
      templateUrl = wmtsLayer.getUrlTemplate(selectedLayer.id, selectedTileInfo.id, format, selectedLayer.styleId);
    }
    else {
      templateUrl = wmtsLayer.getTileUrlTemplate({
        identifier: selectedLayer.identifier,
        tileMatrixSet: selectedTileInfo.tileMatrixSet,
        format
      });
    }
    const wmtsConfig = {
      templateUrl,
      copyright: getCopyright(copyright),
      fullExtent: fullExtent || wmtsLayer.selectedTileInfo.fullExtent,
      tileInfo: getTileInfoAsJson(selectedTileInfo),
      wmtsInfo: {
        url: (_a = wmtsLayer.wmtsUrl) !== null && _a !== void 0 ? _a : wmtsLayer.url,
        layerIdentifier: selectedLayer.identifier,
        tileMatrixSet: selectedTileInfo.tileMatrixSet,
        customParameters: wmtsLayer.customParameters || {},
        customLayerParameters: wmtsLayer.customLayerParameters || {}
      }
    };
    return Promise.resolve({ wmtsConfig: wmtsConfig, fullExtent: fullExtent });
  }
  catch (error) {
    console.error(error);
    throw error; // TODO: refactor this to our error system
  }
}
/** HAZARD WARNING! Return a URL to the hosted image in 3.x case and base64 data url in 4.x case*/
async function buildThumbnailURLFromWMTSItem(item, newExtent) {
  if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3) {
    const baseMapLayerOpts = {
      opacity: 1,
      visibility: true,
      layerType: "WebTiledLayer",
      type: "WebTiledLayer"
    };
    const webMap = {
      baseMap: {
        title: "basemap",
        baseMapLayers: [],
        operationalLayers: []
      }
    };
    if (item.id) {
      const response = await getItemData(item.id);
      webMap.baseMap.baseMapLayers.push(Object.assign(Object.assign({}, response), baseMapLayerOpts));
    }
    else {
      webMap.baseMap.baseMapLayers.push(baseMapLayerOpts);
    }
    return buildThumbnailURLFromWebMap(webMap, newExtent || item.extent);
  }
  else {
    const [WMTSLayer, Map, MapView, reactiveUtils] = (await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
      "esri/layers/WMTSLayer",
      "esri/Map",
      "esri/views/MapView",
      "esri/core/reactiveUtils"
    ]));
    const wmtsLayer = new WMTSLayer({
      portalItem: {
        id: item.id,
        // @ts-ignore --- User.role is different in 3x
        portal: _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal
      }
    });
    const map = new Map({ layers: [wmtsLayer] });
    const hiddenMapId = createHiddenMapDiv();
    const view = new MapView({ container: hiddenMapId, map });
    await reactiveUtils.whenOnce(() => !view.updating);
    await view.goTo(wmtsLayer.fullExtent);
    const screenshot = await view.takeScreenshot({
      width: view.width,
      height: view.height,
      format: "png"
    });
    return screenshot.dataUrl;
  }
}
async function getItemData(id) {
  const { config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const url = `${config.restBaseUrl}content/items/${id}/data`;
  try {
    const result = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, null, {
      disableIdentityLookup: true
    });
    if (result && ((result === null || result === void 0 ? void 0 : result.wfsInfo) || result.wmtsInfo)) {
      return result;
    }
    else if (result === null || result === void 0 ? void 0 : result.layers) {
      return result.layers;
    }
    return {};
  }
  catch (error) {
    return error;
  }
}

function getStaticImagesUrl(portal) {
  var _a;
  return ((_a = portal === null || portal === void 0 ? void 0 : portal.staticImagesUrl) === null || _a === void 0 ? void 0 : _a.replace("http:", "https:")) || "";
}
const checkThumbnailURL = (item) => {
  var _a;
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal;
  if (item.thumbnailURL) {
    item.thumbnailURL = getStaticImagesUrl(portal) + item.thumbnailURL;
  }
  if (portal.isPortal && ((_a = item.thumbnailURL) === null || _a === void 0 ? void 0 : _a.indexOf("http")) !== 0) {
    // staticImagesUrl is relative
    item.thumbnailURL = window.location.protocol + "//" + window.location.host + item.thumbnailURL;
  }
  return item;
};

const stripParameters = (url, blackList) => {
  const [base, search] = url.split("?");
  const whitelisted = (search === null || search === void 0 ? void 0 : search.split("&").reduce((acc, section) => {
    const [key] = section.split("=");
    if (blackList.indexOf(key.toLowerCase()) === -1) {
      return `${acc}${acc ? "&" : "?"}${section}`;
    }
    return acc;
  }, "")) || "";
  return `${base}${whitelisted}`;
};
const getWMSServiceInfo = async (item) => {
  var _a;
  const [WMSLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/layers/WMSLayer"]);
  const { customParameters } = item;
  const formattedParams = formatCustomParameters(customParameters);
  // Remove these parameters from the url since the JSAPI will set them automatically
  const wmsUrl = stripParameters(item.url, [
    "service",
    "request",
    "bbox",
    "format",
    "height",
    "width",
    "layers",
    "srs",
    "crs",
    "styles",
    "transparent",
    "bgcolor",
    "exceptions",
    "time",
    "elevation",
    "sld",
    "wfs"
  ]);
  try {
    if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4) {
      const wmsLayer = new WMSLayer({
        url: wmsUrl,
        customParameters: Object.assign({}, formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customParameters) || {},
        customLayerParameters: Object.assign({}, formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customLayerParameters) || {}
      });
      try {
        const loadedLayer = await wmsLayer.load();
        item.type = "WMS";
        return { result: Object.assign(Object.assign({}, item), { type: "WMS", serviceInfo: loadedLayer }) };
      }
      catch (err) {
        return {
          error: {
            code: err.message ? "unhandledError" : "serviceNotExist",
            message: (_a = err.message) !== null && _a !== void 0 ? _a : err.message
          }
        };
      }
    }
    // --- v3 ---
    await checkCORS(wmsUrl);
    const wmsLayer = new WMSLayer(wmsUrl, {
      customParameters: Object.assign({}, formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customParameters) || {},
      customLayerParameters: Object.assign({}, formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customLayerParameters) || {}
    });
    const result = await new Promise((resolve, reject) => {
      wmsLayer.on("load", () => {
        item.type = "WMS";
        resolve(Object.assign(Object.assign({}, item), { type: "WMS", serviceInfo: wmsLayer }));
      });
      wmsLayer.on("error", (err) => {
        var _a;
        const { error } = err;
        const serviceNotExist = !(error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.status) === 404;
        reject({
          code: serviceNotExist ? "serviceNotExist" : "unhandledError",
          message: (_a = error.message) !== null && _a !== void 0 ? _a : err.message
        });
      });
    });
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error };
  }
};
// this will correctly format the layers from the service info to be used in the bulk layer select component
const loadWMSLayers = async (serviceInfo) => {
  const loadedServiceInfo = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? await serviceInfo.load() : serviceInfo;
  const { layerInfos, title, allSublayers } = loadedServiceInfo;
  const layers = getWMSLayerTree(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? allSublayers.items : layerInfos);
  // TODO: move title to base serviceInfo fetch, only return layers here
  return { title, layers };
};
function getWMSLayerTree(layers) {
  return layers.map((layer) => ({
    name: layer.name,
    visible: false,
    title: layer.title.replace(/ /g, String.fromCharCode(160)),
    extent: layer.extent,
    legendURL: layer.legendURL,
    queryable: layer.queryable,
    subLayers: layer.subLayers || []
  }));
}
function flattenLayerAndRemoveIds(flattenedLayers = [], layer) {
  delete layer.id;
  if (!layer.subLayers || !layer.subLayers.length) {
    return [...flattenedLayers, layer];
  }
  else {
    return layer.subLayers.reduce(flattenLayerAndRemoveIds, flattenedLayers);
  }
}
const addWMSUrl = async (item) => {
  const [SpatialReference] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? "esri/geometry/SpatialReference" : "esri/SpatialReference"
  ]);
  const { layers } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  if (!item || !(item === null || item === void 0 ? void 0 : item.serviceInfo)) {
    return Promise.reject(new Error("serviceNotExist"));
  }
  const itemInfo = checkThumbnailURL(item);
  const { serviceInfo } = itemInfo;
  const visibleLayers = [];
  let fullExtent;
  const flattenedLayers = layers.reduce(flattenLayerAndRemoveIds, []);
  const selectedLayers = flattenedLayers.map((layer) => {
    fullExtent = !fullExtent ? layer.extent : layer.extent ? fullExtent.union(layer.extent) : fullExtent;
    visibleLayers.push(layer.name);
    const obj = { name: layer.name, title: layer.title, legendURL: "", queryable: layer.queryable };
    if (layer.legendURL) {
      obj.legendURL = layer.legendURL;
    }
    return obj;
  });
  serviceInfo.setVisibleLayers(visibleLayers);
  fullExtent = fullExtent || serviceInfo.fullExtent;
  const isGCS = !serviceInfo.spatialReferences.some((sr) => sr === fullExtent.spatialReference.wkid);
  const updatedItem = {
    type: item.type,
    url: serviceInfo.url,
    description: serviceInfo.description || "",
    accessInformation: serviceInfo.copyright || "",
    text: getWMSData(serviceInfo, selectedLayers),
    extent: fullExtent
  };
  if (isGCS) {
    project(fullExtent, new SpatialReference({ wkid: serviceInfo.spatialReferences[0] })).then((extent) => (updatedItem.extent = extent));
  }
  const itemToAdd = await getWMSImageUrl(updatedItem, serviceInfo);
  return addUrl(itemToAdd);
};
const getWMSImageUrl = (item, wmsLayer) => {
  return new Promise((resolve) => {
    const handler = (imageUrl) => {
      resolve(Object.assign(Object.assign({}, item), { thumbnailURL: imageUrl || item.thumbnailURL, extent: extentToString(item.extent) }));
    };
    wmsLayer.getImageUrl(item.extent, 800, 532, handler, handler);
  });
};
const getWMSData = (wmsLayer, selectedLayers) => {
  return JSON.stringify({
    title: wmsLayer.title || "",
    url: wmsLayer.url,
    mapUrl: wmsLayer.getMapURL,
    version: wmsLayer.version,
    layers: selectedLayers,
    copyright: wmsLayer.copyright || "",
    maxHeight: wmsLayer.maxHeight,
    maxWidth: wmsLayer.maxWidth,
    spatialReferences: wmsLayer.spatialReferences,
    format: wmsLayer.getImageFormat() !== "png" ? wmsLayer.getImageFormat() : null,
    featureInfoUrl: wmsLayer.getFeatureInfoURL,
    featureInfoFormat: wmsLayer.featureInfoFormat,
    customParameters: wmsLayer.customParameters || {},
    customLayerParameters: wmsLayer.customLayerParameters || {}
  });
};
const getWFSVersionFromUrl = async (url) => {
  const { query: queryObject } = await (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.c)(url);
  return (queryObject === null || queryObject === void 0 ? void 0 : queryObject.version) || "2.0.0";
};
/**
 * Fetch a url and add to the trusted domains list if it supports CORS
 */
async function checkCORS(url) {
  var _a, _b, _c;
  try {
    const testReponse = await fetch(url);
    if (testReponse.type === "cors" && testReponse.status === 200) {
      const domain = new URL(url).hostname;
      const [esriConfig] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/config"]);
      (_c = (_b = (_a = esriConfig === null || esriConfig === void 0 ? void 0 : esriConfig.defaults) === null || _a === void 0 ? void 0 : _a.io) === null || _b === void 0 ? void 0 : _b.corsEnabledServers) === null || _c === void 0 ? void 0 : _c.push(domain);
    }
  }
  catch (error) { }
}
const getWFSServiceInfo = async (item, options) => {
  const [WFSLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/layers/WFSLayer"]);
  const { customParameters } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  const { url } = item;
  const wfsUrl = stripParameters(url, ["version", "service", "request", "layer", "typename"]);
  const formattedParams = formatCustomParameters(customParameters);
  const wfsVersion = await getWFSVersionFromUrl(url);
  const wfsLayerOptions = options || {
    version: wfsVersion,
    url: wfsUrl,
    customParameters: (formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customParameters) || {}
  };
  try {
    // V4 only supports 2.0.0 version
    if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4) {
      if (wfsVersion !== "2.0.0") {
        return { error: { code: "unsupportedWFSVersion" } };
      }
      // v4 version is read-only
      delete wfsLayerOptions.version;
      // and we don't need the url
      delete wfsLayerOptions.url;
      const [wfsUtils] = (await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/layers/ogc/wfsUtils"]));
      const capabilities = await wfsUtils.getCapabilities(wfsUrl, wfsLayerOptions);
      const layers = capabilities.featureTypes;
      if (!layers || !layers.length) {
        return { error: { code: "emptyFeatureLayer" } };
      }
      else {
        const layerInfo = await wfsUtils.getWFSLayerInfo(capabilities);
        const wfsLayer = WFSLayer.fromWFSLayerInfo(layerInfo);
        wfsLayer.layers = layers;
        wfsLayer.url = wfsUrl;
        wfsLayer.isComplex = wfsLayer.geometryType === "esriGeometryComplex";
        return { result: Object.assign(Object.assign({}, item), { type: "WFS", serviceInfo: wfsLayer }) };
      }
    }
    // --- v3 ---
    const wfsLayer = new WFSLayer(wfsLayerOptions);
    await checkCORS(wfsUrl);
    const result = await new Promise((resolve, reject) => {
      wfsLayer.initialize(wfsLayerOptions, (layers) => {
        if (!layers || !layers.length) {
          reject({ code: "emptyFeatureLayer" });
        }
        else {
          wfsLayer.layers = layers;
          wfsLayer.url = wfsUrl;
          wfsLayer.isComplex = wfsLayer.geometryType === "esriGeometryComplex";
          resolve(Object.assign(Object.assign({}, item), { type: "WFS", serviceInfo: wfsLayer }));
        }
      });
      // WFS layers can throw an error if not using the correct version - so we can try with different versions from newest version to oldest
      wfsLayer.on("error", async () => {
        if (wfsLayer.toJson().version === "2.0.0") {
          const { result, error } = await getWFSServiceInfo(item, { version: "1.1.0", url });
          if (error) {
            reject(error);
          }
          resolve(result);
        }
        else if (wfsLayer.toJson().version === "1.1.0") {
          const { result, error } = await getWFSServiceInfo(item, { version: "1.0.0", url });
          if (error) {
            reject(error);
          }
          resolve(result);
        }
        else {
          reject({ code: "serviceNotExist" });
        }
      });
    });
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error };
  }
};
const addWFSUrl = async (item) => {
  var _a;
  if (!item || !(item === null || item === void 0 ? void 0 : item.serviceInfo)) {
    return Promise.reject(new Error("serviceNotExist"));
  }
  const { serviceInfo: wfsLayer } = item;
  const fullExtent = ((_a = wfsLayer.selectedLayer) === null || _a === void 0 ? void 0 : _a.fullExtent) || [[], []];
  const stringExtent = extentToString(fullExtent);
  const arrExtent = stringExtent.split(",").map(Number);
  if (!wfsLayer.geometryType || wfsLayer.geometryType === "none") {
    return Promise.reject(new Error("missingGeometry"));
  }
  const formattedItem = { type: item.type, url: item.url, thumbnailURL: item.thumbnailURL };
  const wfsConfig = await getWfsConfig(wfsLayer);
  const itemInfo = Object.assign(Object.assign({}, checkThumbnailURL(formattedItem)), { text: JSON.stringify(wfsConfig), extent: stringExtent });
  const response = await addUrl(itemInfo);
  const updatedItem = Object.assign(Object.assign(Object.assign({}, itemInfo), response), { extent: [
      [arrExtent[0], arrExtent[1]],
      [arrExtent[2], arrExtent[3]]
    ] });
  // TODO: you know - looking at this - i think we need to actually call updateItem on WFS items since it looks like the thumbnail url isn't actually being set on the Item. Oops!
  try {
    const thumbnailUrl = await buildThumbnailURLFromWFSItem(updatedItem.extent);
    return Object.assign(Object.assign({}, updatedItem), { thumbnailUrl });
  }
  catch (error) {
    return updatedItem;
  }
};
async function getWMTSOptions(url) {
  var _a, _b;
  // before we strip parameters see if it's a KVP capabilities URL. Then we use that one first.
  const urlObj = await (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.c)(url);
  const servicekey = ((_a = urlObj.query) === null || _a === void 0 ? void 0 : _a["service"]) || "";
  const requestKey = ((_b = urlObj.query) === null || _b === void 0 ? void 0 : _b["request"]) || "";
  if ((servicekey.toLowerCase() === "wmts" && requestKey.toLowerCase() === "getcapabilities") ||
    url.toLowerCase().indexOf("/1.0.0/wmtscapabilities.xml") > -1) {
    return { serviceMode: "KVP" };
  }
  else {
    return {};
  }
}
async function getWMTSServiceInfo(item, options) {
  const [WMTSLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)(["esri/layers/WMTSLayer"]);
  const { customParameters, url } = item;
  const formattedParams = formatCustomParameters(customParameters);
  const wmtsOptions = Object.assign(Object.assign({}, options), { customLayerParameters: (formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customLayerParameters) || {}, customParameters: (formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customParameters) || {} }) ||
    (await Object.assign(Object.assign({}, getWMTSOptions(url)), { customLayerParameters: (formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customLayerParameters) || {}, customParameters: (formattedParams === null || formattedParams === void 0 ? void 0 : formattedParams.customParameters) || {} }));
  const wmtsUrl = stripParameters(url, [
    "version",
    "service",
    "request",
    "layer",
    "style",
    "format",
    "tilematrixset",
    "tilematrix",
    "tilerow",
    "tilecol"
  ]);
  const newWmtsUrl = wmtsUrl.replace(/\/1.0.0\/wmtscapabilities.xml/i, "");
  try {
    if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4) {
      const wmtsLayer = new WMTSLayer(newWmtsUrl, wmtsOptions);
      const v4Layer = wmtsLayer;
      await v4Layer.load();
      const layers = v4Layer.sublayers.toArray();
      if (!layers || !layers.length) {
        return { error: { code: `serviceNotExist` } };
      }
      else {
        wmtsLayer.layers = layers;
        return { result: Object.assign(Object.assign({}, item), { type: "WMTS", serviceInfo: wmtsLayer }) };
      }
    }
    // --- v3 ---
    await checkCORS(wmtsUrl);
    const wmtsLayer = new WMTSLayer(newWmtsUrl, wmtsOptions);
    let layers;
    const result = await new Promise((resolve, reject) => {
      wmtsLayer.on("load", ({ layer: wmtsInfo }) => {
        layers = wmtsInfo.layers;
        if (!layers || !layers.length) {
          reject(new Error(`serviceNotExist`));
        }
        else {
          wmtsLayer.layers = layers;
          resolve(Object.assign(Object.assign({}, item), { type: "WMTS", serviceInfo: wmtsLayer }));
        }
      });
      wmtsLayer.on("error", (err) => {
        var _a;
        if (!wmtsOptions.serviceMode) {
          getWMTSServiceInfo(item, { serviceMode: "KVP" }).then(({ result, error }) => {
            if (error) {
              reject(error);
            }
            resolve(result);
          }, reject);
        }
        else {
          if (((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) === "The WMTS capabilities XML is not valid") {
            reject({ code: "invalidWMTS" });
          }
          reject({ code: "serviceNotExist" });
        }
      });
    });
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error };
  }
}
async function addWMTSUrl(item) {
  if (!item) {
    return Promise.reject("serviceNotExist");
  }
  const { serviceInfo: wmtsLayer, selectedLayer, selectedTileInfo } = item;
  if (!selectedLayer) {
    return Promise.reject(new Error("layerNotSelected"));
  }
  if (!selectedTileInfo) {
    return Promise.reject(new Error("missingGeometry"));
  }
  wmtsLayer.selectedTileInfo = selectedTileInfo;
  const { wmtsConfig, fullExtent: configExtent } = await getWMTSConfig(wmtsLayer).catch((error) => {
    console.error("Error getting WMTS config", error);
    throw error;
  });
  const gcsExtent = wmtsLayer.selectedLayer[_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? "fullExtent" : "gcsExtent"];
  const fullExtent = configExtent ? gcsExtent : { xmin: -180, ymin: -90, xmax: 180, ymax: 90 };
  const formattedItem = { type: item.type, url: item.url, thumbnailURL: item.thumbnailURL };
  const itemInfo = Object.assign(Object.assign({}, checkThumbnailURL(formattedItem)), { url: wmtsConfig.wmtsInfo.url, text: JSON.stringify(wmtsConfig), extent: `${fullExtent.xmin},${fullExtent.ymin},${fullExtent.xmax},${fullExtent.ymax}` });
  const response = await addUrl(itemInfo);
  const updatedItem = Object.assign(Object.assign(Object.assign({}, itemInfo), response), { extent: [
      [fullExtent.xmin, fullExtent.ymin],
      [fullExtent.xmax, fullExtent.ymax]
    ] });
  try {
    const thumbnailData = await buildThumbnailURLFromWMTSItem(updatedItem);
    const requestData = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 4 ? { type: "base64", data: thumbnailData } : { type: "url", url: thumbnailData };
    const itemWithThumbnail = await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.i)(response.id, requestData);
    return Object.assign(Object.assign({}, updatedItem), itemWithThumbnail);
  }
  catch (error) {
    console.error("Error when adding WMTS URL:", error);
    return updatedItem;
  }
}
async function getOGCFeatureLayerServiceInfo(item) {
  var _a, _b, _c, _d;
  const { url } = item;
  /** this is the first call from the MapViewer  - it will get the landing page in the form of "application/json - and then get the collection from it. */
  //   // @ 9.3 Will need to set the trustedServer stuff before this call
  //   // in case the service needs credentials
  const landingPageOptions = { addTokenManually: false, headers: { accept: "application/json" } };
  try {
    const getDataWithJSONRetry = async (func, failCallback) => {
      var _a, _b, _c;
      try {
        return await func();
      }
      catch (error) {
        const message = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : "";
        if (message.includes("unexpected token") || message.includes("expected expression")) {
          return failCallback();
        }
        else {
          throw { result: null, error: { code: "unhandledError", message: JSON.stringify(error) } };
        }
      }
    };
    const landingPage = await getDataWithJSONRetry(() => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, {}, landingPageOptions, "auto", { excludeJson: true }), () => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, {}, landingPageOptions));
    const serviceInfo = await getDataWithJSONRetry(() => getServerCollections(landingPage), () => getServerCollections(landingPage, {}, false));
    return {
      result: Object.assign(Object.assign({}, item), { extent: extentToString((_d = (_c = (_b = (_a = serviceInfo.collections) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.extent) === null || _c === void 0 ? void 0 : _c.spatial) === null || _d === void 0 ? void 0 : _d.bbox), type: "OGCFeatureServer", serviceInfo, layers: serviceInfo.collections }),
      error: null
    };
  }
  catch (error) {
    console.error("get OGC feature layer:", error);
    // TODO: handle error transformation here
    return { result: null, error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
}
function selectOGCFeatureLayer(selectedLayer) {
  var _a, _b;
  if (!selectedLayer) {
    return;
  }
  const { title, description } = selectedLayer;
  _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.title = (_a = title !== null && title !== void 0 ? title : _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.title) !== null && _a !== void 0 ? _a : "";
  _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.snippet = (_b = description !== null && description !== void 0 ? description : _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.snippet) !== null && _b !== void 0 ? _b : "";
  _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.selectedLayer = selectedLayer;
}
async function getServerCollections(landingPage, options = {}, excludeJson = true) {
  const { links } = landingPage;
  const link = getLink(links, "data", "application/json") ||
    getLink(links, "http://www.opengis.net/def/rel/ogc/1.0/data", "application/json");
  if (isNone(link)) {
    throw new Error("Missing collections url");
  }
  return _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3
    ? (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(addParameters(link.href), {}, Object.assign(Object.assign({}, options), { addTokenManually: false }), "auto", {
      v3Request: { headers: { accept: "application/json" } },
      excludeJson
    })
    : (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(addParameters(link.href), {}, Object.assign(Object.assign({}, options), { addTokenManually: false, headers: { accept: "application/json" } }), "auto", {
      excludeJson
    });
}
function getLink(links, relation, type) {
  return (links.find((link) => link.rel === relation && link.type === type) ||
    links.find((link) => link.rel === relation && !link.type));
}
async function addOGCFeatureService(item) {
  const { serviceInfo, customParameters } = item;
  if (!serviceInfo) {
    return Promise.reject(new Error("serviceNotExist"));
  }
  // This will need to be updated based on how metadata needs to be formatted.
  if (customParameters.length > 0) {
    item.text = JSON.stringify({ customParameters: formatCustomParameters(customParameters).customParameters });
  }
  return addUrl(item);
}

// function to navigate to the correct "addItem" requests
const addItem = (item, restBaseUrl) => {
  const { newItemMode, typeKeywords, tags, extent, selectedServiceInfoLayersNames, addFeatureLayerType } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  const title = _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.title;
  if ((title === null || title === void 0 ? void 0 : title.length) > 250) {
    _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.title = title.substring(0, 250);
  }
  switch (newItemMode) {
    case "application":
      return addApplication(item, restBaseUrl);
    case "file":
      // TODO: Pass in item properties/item request here instead of grabbing from the store again
      return addFile();
    case "url":
      // TODO: refactor the passed configState out of this
      return handleAddUrl(item, _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.config, _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api);
    case "featureLayer":
      return addFeatureLayer({
        serviceInfo: item.serviceInfo,
        typeKeywords,
        tags,
        extent,
        selectedServiceInfoLayersNames,
        addFeatureLayerType
      });
    default:
      return (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.c)(Object.assign({}, item));
  }
};
const uploadFile = async () => {
  try {
    const addItemRequest = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.c; // { ...addItemStore.state };
    const response = (await addItem(addItemRequest, ""));
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.id = response.id;
    const jobStatus = await getItemStatus(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.id, { success: response.success });
    if (jobStatus.status === "failed") {
      throw jobStatus.statusMessage;
    }
    return {};
  }
  catch (error) {
    console.error(error);
    const errorMessage = (error === null || error === void 0 ? void 0 : error.statusMessage) || error || "";
    switch (true) {
      case errorMessage.includes("Invalid File Geodatabase"):
        return { error: { code: "invalidFileGeodatabase" } };
      case errorMessage.includes("Invalid Shapefile"):
        return { error: { code: "invalidShapefile" } };
      case errorMessage.includes("The request size is greater than the max allowed of 1024MB"):
        return { error: { code: "exceedsFileSize" } };
      default:
        return { error: { code: "unhandledError" } };
    }
  }
};
const addFile = async (props) => {
  const file = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.file;
  const dataUrl = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.dataUrl;
  if (!file && dataUrl) {
    return addFileFromDataUrl(props);
  }
  // TODO: remove this ECD workaround when backend fixes filename creation (WebGIS/arcgis-portal-app#41068)
  if ((file === null || file === void 0 ? void 0 : file.size) > MULTI_PART_UPLOAD_MINIMUM_SIZE || _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.type === "Esri Classifier Definition") {
    return addFileMultiPart();
  }
  return addFileSingle();
};
const addFileFromDataUrl = async (props) => {
  var _a;
  const url = (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.n)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user, _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.folder);
  const { fileName, dataUrl, extension } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  const addItemParams = (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.j)(_item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i, _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a);
  const overwrite = !!_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.overwrite; //could be undefined
  // in the case where we're adding geojson from a url referencing a feature service,
  // make a unique file name so that the file isn't the query WebGIS/arcgis-portal-app#42403
  const isGeoJSONFromFeatureServer = (dataUrl === null || dataUrl === void 0 ? void 0 : dataUrl.includes("/query?")) && (fileName === null || fileName === void 0 ? void 0 : fileName.includes("query")) && (extension === null || extension === void 0 ? void 0 : extension.includes("json"));
  const geojsonProperties = isGeoJSONFromFeatureServer
    ? {
      filename: (0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_14__.g)(),
      dataUrl
    }
    : {};
  const params = Object.assign(Object.assign(Object.assign({}, addItemParams), { async: true, filename: (_a = props === null || props === void 0 ? void 0 : props.filename) !== null && _a !== void 0 ? _a : fileName, title: props === null || props === void 0 ? void 0 : props.title, overwrite }), geojsonProperties);
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, params, {}, "post");
};
async function addFileSingle() {
  const url = (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.n)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user, _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.folder);
  const form = (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.k)(_item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i, _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a);
  try {
    return await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.e)(url, form, {}, "post");
  }
  catch (error) {
    throw (error === null || error === void 0 ? void 0 : error.message) || error;
  }
}
async function addPart(part, itemId, attempts = 0) {
  const user = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user;
  // Keep attempting to add the part, only throwing an error after multiple retries
  try {
    const { partData, formData } = part;
    const parameters = `?streamdata=true&size=${partData.size}&partNum=${partData.partNum}&f=json`;
    const url = `${user.userContentUrl}/items/${itemId}/addPart${parameters}`;
    const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.e)(url, formData, {
      "X-Esri-Authorization": `Bearer ${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.h)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal)}`
    }, "post");
    return { response, attempts, partSize: partData.size };
  }
  catch (_a) {
    if (!_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.id) {
      throw "cancelled";
    }
    attempts++;
    if (attempts > MULTI_PART_UPLOAD_RETRIES) {
      // TODO: Update error message
      throw new Error("Upload failed - too many attempts");
    }
    else {
      return addPart(part, itemId, attempts);
    }
  }
}
function* generatePart() {
  const file = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.file;
  const { name, size } = file;
  let partSize = MULTI_PART_UPLOAD_BATCH_SIZE;
  let totalParts = Math.ceil(size / partSize);
  let part = 0;
  // Max number of parts is 10,000, so we increase the chunk size if the file is bigger than the threshold
  if (totalParts > MULTI_PART_UPLOAD_MAX_PARTS) {
    partSize = Math.ceil(size / MULTI_PART_UPLOAD_MAX_PARTS);
    totalParts = Math.ceil(size / partSize);
  }
  while (part < totalParts) {
    const formData = new FormData();
    const offset = part * partSize;
    const blob = file.slice(offset, offset + partSize);
    part++;
    const partData = {
      partNum: part,
      size: blob.size
    };
    formData.append("partNum", String(partData.partNum));
    formData.append("streamdata", "true");
    formData.append("f", "json");
    formData.append("token", (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.h)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal));
    formData.append("file", blob, name);
    yield { partData, formData };
  }
  return null;
}
const addFileMultiPart = async () => {
  var _a, _b, _c, _d;
  let doUpload = true;
  const cancelUpload = () => {
    if (_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.id) {
      doUpload = false;
      const itemId = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.id;
      _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.id = null;
      return (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.o)(itemId);
    }
  };
  const multiPartSubscriber = subscriptionState.addSubscriber("addFileMultiPart", cancelUpload);
  const config = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.config;
  const url = (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.n)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user, _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.folder);
  const { fileName, file } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  let partsPerBatch = (_a = config.multiPartBatchSize) !== null && _a !== void 0 ? _a : MULTI_PART_UPLOAD_INITIAL_BATCH_SIZE;
  let numConsecutiveSuccess = 0;
  let itemId;
  try {
    const itemResponse = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, { multipart: true, fileName, async: true }, {}, "post");
    itemId = (_b = itemResponse.id) !== null && _b !== void 0 ? _b : itemResponse.itemId;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.id = itemId;
    // TODO: Factor uploadProgress out of addItemState
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.uploadProgress = 0;
    _store_3210b604_js__WEBPACK_IMPORTED_MODULE_15__.w.uploadProgress = 0;
    let bytesUploaded = 0;
    // Initialize dynamic batch generator
    const partGenerator = generatePart();
    await (0,_functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_6__.s)(() => {
      const { value, done } = partGenerator.next();
      return done ? null : addPart(value, itemId);
    }, {
      getBatchSize: () => partsPerBatch,
      onPromiseCompleted: (addPartResult) => {
        const { attempts, partSize } = addPartResult;
        // If a part only succeeded after one or more failures/retries, flag the batch to be reduced next time
        if (attempts > 0) {
          partsPerBatch = Math.max(1, Math.ceil(partsPerBatch / 2));
          numConsecutiveSuccess = 0;
        }
        else {
          numConsecutiveSuccess++;
          if (numConsecutiveSuccess >= partsPerBatch) {
            partsPerBatch = Math.min(partsPerBatch + 1, MULTI_PART_UPLOAD_MAX_BATCH_SIZE);
            numConsecutiveSuccess = 0;
          }
        }
        bytesUploaded += partSize;
        const progress = Math.floor((bytesUploaded / file.size) * 100);
        // TODO: Factor uploadProgress out of addItemState
        _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.uploadProgress = progress;
        _store_3210b604_js__WEBPACK_IMPORTED_MODULE_15__.w.uploadProgress = progress;
      },
      onPromiseThrow() {
        doUpload = false;
      },
      shouldContinue: () => doUpload && subscriptionState.isSubscriberValid(multiPartSubscriber)
    });
    subscriptionState.removeSubscriber(multiPartSubscriber);
    const { type, extension, enablePublishing, properties } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
    return await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.l)(itemId, {
      file,
      type,
      extension,
      enablePublishing,
      properties
    });
  }
  catch (error) {
    // If an item was partially uploaded, cancel it before throwing error
    await cancelUpload();
    console.error((_c = error === null || error === void 0 ? void 0 : error.message) !== null && _c !== void 0 ? _c : error);
    throw (_d = error === null || error === void 0 ? void 0 : error.message) !== null && _d !== void 0 ? _d : error;
  }
};
// --- URL
const handleAddUrl = (item, config, api) => {
  if (item.agsType) {
    return addSecureAGSUrl(item);
  }
  switch (item.type) {
    case "KML":
      return addKMLUrl(item, config, api);
    case "WMS":
      return addWMSUrl(item);
    case "WFS":
      return addWFSUrl(item);
    case "WMTS":
      return addWMTSUrl(item);
    case "OGCFeatureServer":
      return addOGCFeatureService(item);
    default:
      return addUrl(item);
  }
};
const getTypeKeywords = (item) => {
  var _a;
  const { type, agsType } = item;
  const generatedTypes = ((_a = _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_13__.a[agsType !== null && agsType !== void 0 ? agsType : type]) === null || _a === void 0 ? void 0 : _a.typeKeywords) || [];
  return [...generatedTypes, ...(item.typeKeywords || [])];
};
const addUrl = async (item) => {
  const { customParameters: customParams, agsType } = item;
  const { type } = (0,_file_f36193e9_js__WEBPACK_IMPORTED_MODULE_12__.g)(item.type);
  const content = Object.assign(Object.assign({}, item), { typeKeywords: getTypeKeywords(item), type });
  if ((customParams === null || customParams === void 0 ? void 0 : customParams.length) >= 1 && !!agsType) {
    const { customParameters } = formatCustomParameters(customParams);
    content.text = JSON.stringify({ customParameters });
  }
  return (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.c)(content);
};
// --- Other
async function getItemStatus(id, options = {}, statusUrl) {
  var _a;
  try {
    const user = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user;
    const url = statusUrl !== null && statusUrl !== void 0 ? statusUrl : `${user.userContentUrl}/items/${id}/status`;
    const requestParams = (options === null || options === void 0 ? void 0 : options.jobId) ? { jobId: options.jobId } : {};
    // Need to await here so it will catch related error below
    const jobStatus = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.p)(url, { requestParams });
    return jobStatus;
  }
  catch (error) {
    if (!((_a = error.statusMessage) === null || _a === void 0 ? void 0 : _a.includes("Item status doesn't exist")) || !options.success) {
      console.error(error);
      throw error;
    }
    return { itemId: id, status: "status-not-found", lastUpdatedTime: 0, submissionTime: 0, recordCount: 0 };
  }
}
async function addResource(owner, id, folder, params) {
  const { config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const folderPath = folder.id && folder.id !== "/" && folder.id !== owner ? `/${folder.id}` : "";
  const url = `${config.restBaseUrl}content/users/${owner}${folderPath}/items/${id}/addResources`;
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, params, {}, "post");
}
async function addCloudProviderResource(resource, id) {
  const folder = _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.folder;
  const { user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  // add cloud info to resource
  return addResource(user.username, id, folder, {
    fileName: "cloudProvider.json",
    text: JSON.stringify(resource),
    access: "private"
  });
}

async function getAGSThumbnail(item) {
  const { url, thumbnailURL, serviceInfo, extent } = item;
  if (thumbnailURL) {
    return thumbnailURL;
  }
  if (!["Map Service", "Feature Service", "Image Service"].includes(item.type)) {
    return null;
  }
  if (["Map Service", "Image Service"].includes(item.type) || url.indexOf("MapServer") !== -1) {
    const extentString = extentToString(extent);
    // make thumbnail in service spatial reference
    const exportCallOpts = { serviceUrl: url, extent: extentString, size: "800,532", format: "image", serviceInfo };
    return extent ? buildExportCall(exportCallOpts) : null;
  }
  const { result, error } = await buildThumbnailURLFromFSItem(item);
  if (error) {
    // Ideally the thumbnail generation process shouldn't stop the other process in case of failing
    console.error("Error generating thumbnail", error);
    return "";
  }
  return result;
}
function buildExportCall(exportCallOpts) {
  var _a;
  let { visibleLayers, serviceUrl, serviceInfo, size, extent, bboxSR, imageSR, format } = exportCallOpts;
  let position;
  if (!serviceInfo) {
    return "";
  }
  let isMap = serviceUrl.indexOf("/MapServer") > -1;
  if (!visibleLayers && isMap) {
    let layerId;
    // it's just one layer of a map service
    position = serviceUrl.indexOf("/MapServer");
    const queryPosition = serviceUrl.indexOf("?");
    if (queryPosition > -1) {
      layerId = serviceUrl.substring(position + 11, queryPosition);
      serviceUrl = serviceUrl.substring(0, position + 10) + serviceUrl.substring(queryPosition);
      visibleLayers = layerId;
    }
    else {
      layerId = serviceUrl.substring(position + 11);
      serviceUrl = serviceUrl.substring(0, position + 10);
      visibleLayers = layerId;
    }
  }
  if (!isMap && serviceInfo) {
    // if we have a proxy service ending in /service
    if (serviceInfo.capabilities) {
      isMap = serviceInfo.capabilities.toLowerCase().indexOf("map") > -1;
    }
    else {
      // older servers
      isMap = serviceInfo.supportedImageFormatTypes;
    }
  }
  let url = serviceUrl;
  position = url.indexOf("?");
  if (position === -1) {
    if (isMap) {
      url += "/export?";
    }
    else if (typeof serviceInfo.currentVersion !== "undefined" && serviceInfo.currentVersion >= 10.1) {
      url += "/info/thumbnail";
      return url;
    }
    else {
      url += "/exportImage?";
    }
  }
  else {
    if (isMap) {
      url = `${url.substring(0, position)}/export${url.substring(position, url.length)}&`;
    }
    else if (typeof serviceInfo.currentVersion !== "undefined" && serviceInfo.currentVersion >= 10.1) {
      url = `${url.substring(0, position)}/info/thumbnail${url.substring(position, url.length)}`;
      return url;
    }
    else {
      url = `${url.substring(0, position)}/exportImage${url.substring(position, url.length)}&`;
    }
  }
  url += `size=${size}&bbox=${extent}`;
  if ((bboxSR === null || bboxSR === void 0 ? void 0 : bboxSR.length) > 0) {
    url += `&bboxSR=${bboxSR}`;
  }
  if ((imageSR === null || imageSR === void 0 ? void 0 : imageSR.length) > 0) {
    url += `&imageSR=${imageSR}`;
  }
  if (isMap && ((_a = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.supportedImageFormatTypes) === null || _a === void 0 ? void 0 : _a.indexOf("PNG32")) > -1) {
    url += `&format=png32&f=${format}`;
  }
  else if (isMap) {
    url += `&format=png24&f=${format}`;
  }
  else {
    url += `&format=jpgpng&f=${format}`;
  }
  if (isMap) {
    if ((visibleLayers === null || visibleLayers === void 0 ? void 0 : visibleLayers.length) > 0) {
      url += `&layers=show:${visibleLayers}`;
    }
  }
  else {
    url += "&interpolation=RSP_NearestNeighbor&bandIds=null";
  }
  return url;
}
async function buildThumbnailForFSItem4x(id, portal) {
  var _a, _b, _c;
  const [Map, MapView, FeatureLayer, Basemap, print, PrintTemplate, PrintParameters, scaleRange] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    "esri/Map",
    "esri/views/MapView",
    "esri/layers/FeatureLayer",
    "esri/Basemap",
    "esri/rest/print",
    "esri/rest/support/PrintTemplate",
    "esri/rest/support/PrintParameters",
    "esri/smartMapping/heuristics/scaleRange"
  ]);
  try {
    const container = createHiddenMapDiv(800, 532);
    const knownBasemapId = portal.defaultBasemap.id.includes("basemap");
    const layer = new FeatureLayer({
      portalItem: {
        id,
        portal
      }
    });
    const map = new Map({
      basemap: knownBasemapId
        ? "topo-vector"
        : new Basemap({
          portalItem: {
            id: portal.defaultBasemap.id,
            portal
          }
        })
    });
    const view = new MapView({
      map,
      container
    });
    await map.watch("loaded");
    let minScale = 0;
    let maxScale = 0;
    if (!knownBasemapId) {
      ({ minScale, maxScale } = await scaleRange({
        layer,
        view
      }));
    }
    const extentResponse = await layer.queryExtent();
    view.goTo(extentResponse.extent);
    layer.minScale = minScale;
    layer.maxScale = maxScale;
    view.map.add(layer);
    view.scale = maxScale;
    await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.t)(2000);
    // url to the print service
    const url = (_c = (_b = (_a = portal.helperServices) === null || _a === void 0 ? void 0 : _a.printTask) === null || _b === void 0 ? void 0 : _b.url) !== null && _c !== void 0 ? _c : "https://utility.arcgisonline.com/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task";
    const template = new PrintTemplate({
      format: "png32",
      exportOptions: {
        dpi: 96,
        width: 800,
        height: 532
      },
      layout: "map-only",
      showLabels: false,
      attributionVisible: false
    });
    const params = new PrintParameters({
      view: view,
      template
    });
    const printResult = await print.execute(url, params);
    destroyHiddenMapDiv();
    return printResult.url;
  }
  catch (error) {
    destroyHiddenMapDiv();
    return null;
  }
}
async function buildThumbnailURLFromFSItem(item) {
  var _a;
  const { config, portal, api } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  if (api === 4) {
    return { result: await buildThumbnailForFSItem4x(item.id, portal) };
  }
  const [esriId, FeatureLayer, Extent] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    "esri/IdentityManager",
    "esri/layers/FeatureLayer",
    "esri/geometry/Extent"
  ]);
  const { serviceInfo, proxyUrl } = item;
  // from item properties page or viewer 'save layer' (not for feature collection)
  // newExtent and layers overwrites for the item are optional
  // 1. get item /data to get overwrites
  // 2. make service info request to get layers
  // 3. build webMap object
  // 4. call Geoprocessor task
  const webMap = {
    baseMap: config.defaultBasemap || config.self.defaultBasemap,
    operationalLayers: []
  };
  webMap.baseMap.title = "basemap";
  const len = webMap.baseMap.baseMapLayers.length;
  for (let i = 0; i < len; i++) {
    let layer = webMap.baseMap.baseMapLayers[i];
    if (!layer.isReference) {
      // we need only one basemap layer and we hide it
      if ((config.allSSL || location.protocol == "https:") &&
        ((0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.a)(layer.url) || (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.b)(layer.url))) {
        layer.url = layer.url.replace("http:", "https:");
      }
      layer.visibility = false;
      webMap.baseMap.baseMapLayers = [layer];
      break;
    }
  }
  if (!serviceInfo) {
    return { result: "" };
  }
  const layers = serviceInfo.layers || [];
  const itemUrl = proxyUrl || item.url;
  const urlObject = await (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.c)(itemUrl);
  const credentials = esriId.findCredential(urlObject.path);
  layers.reverse().forEach(async (layer) => {
    const operationalLayer = {
      url: `${itemUrl}/${layer.id}${credentials ? `?token=${credentials.token}` : ""}`,
      id: `${item.id || Math.random()}_${layer.id}`,
      opacity: 1,
      title: `${item.title || "title"}_${layer.id}`,
      visibility: true,
      layerDefinition: undefined
    };
    let found = false;
    layers.forEach((lyr) => {
      if (lyr.id === layer.id && !found) {
        found = true;
        operationalLayer.layerDefinition = lyr.layerDefinition;
      }
    });
    if (!layers.length || (layers.length && found)) {
      webMap.operationalLayers.push(operationalLayer);
    }
  });
  let extent = [
    [-180, -90],
    [180, 90]
  ];
  if (typeof item.extent === "string") {
    const e = item.extent.split(",");
    extent = [
      [parseFloat(e[0]), parseFloat(e[1])],
      [parseFloat(e[2]), parseFloat(e[3])]
    ];
  }
  else if (((_a = item.extent) === null || _a === void 0 ? void 0 : _a.length) > 0) {
    extent = item.extent;
  }
  if (webMap.operationalLayers.length === 1) {
    let featureLayer = new FeatureLayer(webMap.operationalLayers[0].url);
    return new Promise((resolve) => {
      featureLayer.on("load", async (featLayer) => {
        if (featLayer === null || featLayer === void 0 ? void 0 : featLayer.layer) {
          featureLayer = featLayer.layer;
        }
        const extentAsList = await getExtentWithFeatures(featureLayer, extent);
        try {
          const thumbnailUrl = await buildThumbnailURLFromWebMap(webMap, extentAsList);
          resolve({ result: thumbnailUrl });
        }
        catch (error) {
          resolve({ error: { code: "unhandledError", message: error } });
        }
      });
    });
  }
  else {
    // check if at least one layer is in scale
    const extentAsList = item.extent;
    const ext = new Extent(extentAsList[0][0], extentAsList[0][1], extentAsList[1][0], extentAsList[1][1]);
    const thumbnailScale = getScaleForExtent(ext, 200);
    const opLayers = [];
    const featureLayers = [];
    const promises = [];
    webMap.operationalLayers.forEach((opLayer) => {
      const featureLayer = new FeatureLayer(opLayer.url);
      const promise = new Promise((resolve) => {
        featureLayer.on("load", (layer) => {
          opLayers.push(opLayer);
          featureLayers.push(layer);
          if (layer.minScale <= thumbnailScale && layer.maxScale > thumbnailScale) {
            resolve(true);
          }
          else {
            resolve(false);
          }
        });
        featureLayer.on("error", () => {
          resolve(false);
        });
      });
      promises.push(promise);
    });
    const responses = await Promise.all(promises);
    // clean out layers that didn't load from the webmap
    webMap.operationalLayers = opLayers;
    const found = responses.filter((res) => res).length > 0;
    try {
      if (!found && featureLayers.length > 0) {
        // saving thumbnail with item extent will be blank
        // zoom to features instead; use first working layer
        const extentWithFeatures = await getExtentWithFeatures(featureLayers[0], extentAsList);
        return { result: await buildThumbnailURLFromWebMap(webMap, extentWithFeatures) };
      }
      else {
        return { result: await buildThumbnailURLFromWebMap(webMap, extentAsList) };
      }
    }
    catch (error) {
      return { error: { code: "unhandledError", message: error } };
    }
  }
}

async function isFederatedWithWebTierAuth(itemInfo, checkUrlResponse, checkAuth) {
  var _a, _b;
  //If a service is federated with another portal, and is secured with web tier authentication
  //it will still report back that its secured with token security ("499"), even though it uses web tier authentication ("401")
  //it does this because its federated with another portal, unfortunately.  If secured with web tier, there
  //isn't a reason to store the credentials so lets hide that box, but the only way to check that is to call
  //checkUrl with the generateToken endpoint, and see if that returns 401
  //https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/3791
  if ((checkUrlResponse === null || checkUrlResponse === void 0 ? void 0 : checkUrlResponse.httpStatusCode) === 499) {
    const [esriId] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
      _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3 ? "esri/IdentityManager" : "esri/identity/IdentityManager"
    ]);
    const { url, password, username } = itemInfo;
    const tokenServiceUrl = await esriId._getTokenSvcUrl(url);
    let generateTokenUrl = (_a = tokenServiceUrl.authInfo) === null || _a === void 0 ? void 0 : _a.tokenServicesUrl;
    if (generateTokenUrl) {
      // Add a trailing slash if it doesn't exist
      if (generateTokenUrl[generateTokenUrl.length - 1] !== "/") {
        generateTokenUrl += "/";
      }
      try {
        const result = await getIsSecured({ password, username }, generateTokenUrl !== null && generateTokenUrl !== void 0 ? generateTokenUrl : "", (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.g)(), checkAuth);
        return (result === null || result === void 0 ? void 0 : result.secured) && (result === null || result === void 0 ? void 0 : result.httpStatusCode) === 401;
      }
      catch (error) {
        return ((_b = error === null || error === void 0 ? void 0 : error.message) === null || _b === void 0 ? void 0 : _b.indexOf("Http StatusCode: -1")) > -1 ? -1 : false;
      }
    }
  }
  return false;
}
function parseAGSTitle(url) {
  return (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.p)((0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.d)(url)).serverName;
}
function parseAGSType(url) {
  const formattedUrl = (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.d)(url);
  const serverTypeAndLayerIndex = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.p)(url);
  const containsAGS = formattedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.v, "").match(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.r);
  let agsType = serverTypeAndLayerIndex === null || serverTypeAndLayerIndex === void 0 ? void 0 : serverTypeAndLayerIndex.serverType;
  let soeType = serverTypeAndLayerIndex === null || serverTypeAndLayerIndex === void 0 ? void 0 : serverTypeAndLayerIndex.index;
  const caseCorrected = {
    mapserver: "MapServer",
    geocodeserver: "GeocodeServer",
    gpserver: "GPServer",
    geometryserver: "GeometryServer",
    geoenrichmentserver: "GeoenrichmentServer",
    imageserver: "ImageServer",
    naserver: "NAServer",
    featureserver: "FeatureServer",
    geodataserver: "GeoDataServer",
    globeserver: "GlobeServer",
    wmserver: "WMServer",
    sceneserver: "SceneServer",
    vectortileserver: "VectorTileServer",
    streamserver: "StreamServer",
    videoserver: "VideoServer"
  };
  if (agsType && caseCorrected[agsType.toLowerCase()]) {
    agsType = caseCorrected[agsType.toLowerCase()];
  }
  // TODO: Fix this mapping earlier, maybe remove this whole function? The original url parser might may be able to handle this up front
  if (agsType === "ags" || (!agsType && containsAGS)) {
    agsType = "MapServer";
  }
  if (agsType === "MapServer" && soeType !== null) {
    // Layer within a mapserver - CR260845
    return "FeatureServer";
  }
  return agsType;
}
async function getSecuredAGSServiceInfo(item) {
  var _a;
  // TODO: Pass in what we need from configState as args
  const { config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const { checkAuth, storeAuth, username, password } = item;
  item.title = parseAGSTitle(item.url);
  const agsType = parseAGSType(item.url);
  if (!agsType || (agsType === "SceneServer" && !config.sceneViewerEnabled)) {
    return { error: { code: "unknownAGSType" } };
  }
  let itemType = (_a = _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_13__.a[agsType]) === null || _a === void 0 ? void 0 : _a.type;
  if (!itemType) {
    console.warn(`Unknown AGS Type ${agsType}`);
    // TODO: Can we reach this point? And if so will an item be created?
  }
  item.type = itemType;
  item.agsType = agsType;
  try {
    if (!_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user) {
      return { result: await getAGSServiceInfo(item) };
    }
    const result = await getIsSecured({ username, password }, item.url, (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.g)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal), checkAuth);
    const checkUrlAllowStoredAuth = result === null || result === void 0 ? void 0 : result.allowStoredAuth;
    if (checkUrlAllowStoredAuth === false) {
      // This means /checkUrl fails for some reason
      item.allowStoredAuth = false;
    }
    if (result.secured) {
      item.isSecured = Object.assign({}, result);
      item.allowStoredAuth = false;
      //https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/3791
      const isFederatedWithWebTier = await isFederatedWithWebTierAuth({ username: item.username, password: item.password, url: item.url }, result, checkAuth);
      if (!isFederatedWithWebTier && result.httpStatusCode !== 401) {
        item.isSecured = Object.assign(Object.assign({}, result), { isFederatedWithWebTierAuth: isFederatedWithWebTier });
        // Only allow to toggle auth if `/checkUrl` determine the URL can be reached
        if (checkUrlAllowStoredAuth !== false) {
          item.allowStoredAuth = true;
        }
        if (result.isOverride) {
          // #29916, arcgis-portal-services-design #153 - Geoenrichment servers are able to have a proxy created without
          // prompting for credentials. In this case don't disallow the storeAuth option and pass createAsServiceProxy
          // through to the /addItem request
          if (agsType === "GeoenrichmentServer" && !item.storeAuth) {
            item.createAsServiceProxy = true;
          }
          else {
            item.storeAuth = true;
          }
        }
        if (checkAuth && !storeAuth) {
          return { result: await getAGSServiceInfo(item) };
        }
        return { result: item };
      }
      else if (isFederatedWithWebTier === -1) {
        //https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/1900
        //https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/4765
        // -1 means the proxy does not trust the ssl cert for the isFederatedWithWebTierAuth request from above
        const updatedItem = Object.assign(Object.assign({}, item), { isSecured: null, checkUrlError: true, storeAuth: false });
        return { result: await getAGSServiceInfo(updatedItem) };
      }
      else {
        const updatedItem = Object.assign(Object.assign({}, item), { isSecured: { httpStatusCode: 401, isFederatedWithWebTierAuth: isFederatedWithWebTier } });
        return { result: await getAGSServiceInfo(updatedItem) };
      }
    }
    else {
      return { result: await getAGSServiceInfo(item) };
    }
  }
  catch (error) {
    // If the user aborted the flow, don't try to fetch again
    // Also prevent re-request if it's known that an api key is missing (code "unauthorized")
    if (isAppComponentError(error)) {
      const code = error.code;
      if (code === "flowAborted" || code === "unauthorized" || code === "invalidSpatialRef") {
        return { error };
      }
    }
    try {
      //https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/1900
      const updatedItem = Object.assign(Object.assign({}, item), { isSecured: item.isSecured || null, checkUrlError: error, storeAuth: false });
      return { result: await getAGSServiceInfo(updatedItem) };
    }
    catch (error) {
      if (isAppComponentError(error)) {
        return { error };
      }
      return {
        error: { code: "unhandledError", message: JSON.stringify(error) }
      };
    }
  }
}
const MAX_RETRY = 3; // TODO: Determine a better number
async function getAGSServiceInfo(item, url = item.url, retry = 0) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  const [esriId] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3 ? "esri/IdentityManager" : "esri/identity/IdentityManager"
  ]);
  const { username, password, checkAuth, agsType } = item;
  const { tags: itemTags = [] } = _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i || {};
  const secureService = [499, 498];
  const serviceUrl = (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.d)(url);
  if (!item.isSecured ||
    (((_a = item.isSecured) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== 401 && checkAuth) ||
    (((_b = item.checkUrlError) === null || _b === void 0 ? void 0 : _b.message) && !!item.isSecured && !!(0,_ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_10__.i)(item.type))) {
    try {
      const serviceInfo = await getServiceInfo({ username, password }, serviceUrl, {
        isSecure: item.isSecured,
        isVideoService: item.type === "Video Service",
        checkAuth
      });
      // Image service with LERC format tiles, create new elevation service
      if (item.type === "Image Service" && serviceInfo.tileInfo) {
        if (serviceInfo.tileInfo.format === "LERC" || ((_c = serviceInfo.cacheType) === null || _c === void 0 ? void 0 : _c.toLowerCase()) === "elevation") {
          item.agsType = "ElevationServer";
        }
        else if (((_d = serviceInfo.cacheType) === null || _d === void 0 ? void 0 : _d.toLowerCase()) === "raster") {
          item.agsType = "TiledImageServer";
          if (isHybridImageService(url, serviceInfo) && _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.hybridImageServiceSetting !== "TiledImageServer") {
            item.agsType = "ImageServer";
          }
        }
      }
      const credential = serviceInfo.credential || esriId.findCredential(url);
      const documentInfo = serviceInfo.documentInfo;
      const keywords = ((documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.Keywords) || "").split(",");
      const serviceTitle = (_e = documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.Title) !== null && _e !== void 0 ? _e : serviceInfo.name;
      item.tags = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.b)([...keywords, ...itemTags]).filter((tag) => tag);
      // Keep parsed title if service is nullish or an empty string
      if ((serviceTitle === null || serviceTitle === void 0 ? void 0 : serviceTitle.length) > 0) {
        item.title = serviceTitle;
      }
      item.description = (_g = (_f = documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.Comments) !== null && _f !== void 0 ? _f : serviceInfo.description) !== null && _g !== void 0 ? _g : "";
      item.snippet = (_j = (_h = documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.Subject) !== null && _h !== void 0 ? _h : serviceInfo.serviceDescription) !== null && _j !== void 0 ? _j : "";
      item = Object.assign(Object.assign({}, item), { thumbnailToken: (credential === null || credential === void 0 ? void 0 : credential.token) || null, extent: item.extent || serviceInfo.fullExtent || serviceInfo.extent, serviceInfo: Object.assign(Object.assign({}, serviceInfo), { isSecure: checkAuth ? true : false, userInfo: { username, password } }) });
      return Object.assign({}, item);
    }
    catch (error) {
      if (((_k = error === null || error === void 0 ? void 0 : error.message) === null || _k === void 0 ? void 0 : _k.toLowerCase().includes("aborted")) || (error === null || error === void 0 ? void 0 : error.message) === "Error: json") {
        // user cancelled when prompted for login
        throw {
          code: "flowAborted",
          message: JSON.stringify(error.message.message)
        };
      }
      // Unfortunately the idManager throws an error AND calls back on the setProtocolErrorHandler when
      // an ago service needs to be accessed over ssl,  so set this flag to distunguish a typical error
      // vs the setProtocolError
      if (secureService.includes((_l = error === null || error === void 0 ? void 0 : error.code) !== null && _l !== void 0 ? _l : (_m = error === null || error === void 0 ? void 0 : error.details) === null || _m === void 0 ? void 0 : _m.httpStatus)) {
        if (item.allowStoredAuth !== false) {
          item.allowStoredAuth = !item.checkUrlError;
        }
        return Object.assign(Object.assign({}, item), { isSecured: { secured: true }, serviceInfo: { isSecure: true }, 
          // If we already determine that we can't store auth via `checkUrl`, just set it to false
          allowStoredAuth: item.allowStoredAuth === false ? false : _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.allowStoredAuth });
      }
      else if ((error === null || error === void 0 ? void 0 : error.code) === 403) {
        item.serviceInfo = { isSecure: true };
        item.isSecured = { secured: true };
        throw {
          code: "forbiddenCredential",
          message: JSON.stringify(error)
        };
      }
      else if (error && ((_o = item.checkUrlError) === null || _o === void 0 ? void 0 : _o.message)) {
        // TODO: Handle error here using our standard form
        if ((_r = (_q = (_p = item.checkUrlError) === null || _p === void 0 ? void 0 : _p.message) === null || _q === void 0 ? void 0 : _q.includes) === null || _r === void 0 ? void 0 : _r.call(_q, "was not found")) {
          throw {
            code: "serviceNotExist",
            message: JSON.stringify(item.checkUrlError.message)
          };
        }
        throw {
          code: "unhandledError",
          message: JSON.stringify(item.checkUrlError.message)
        };
      }
      else if ((!!agsType && agsType !== "FeatureServer") ||
        (typeof error === "string" && error.includes("not found"))) {
        throw { code: "serviceNotExist", message: JSON.stringify(error) };
      }
      else if (isBackendError(error) &&
        error.details[0] === "The input spatial reference must be either a geographic or projected coordinate system") {
        throw {
          code: "invalidSpatialRef",
          message: JSON.stringify(error)
        };
      }
      else if (retry < MAX_RETRY) {
        return getAGSServiceInfo(item, url, retry + 1);
      }
    }
  }
  else if (((_s = item.isSecured) === null || _s === void 0 ? void 0 : _s.isFederatedWithWebTierAuth) || ((_t = item.isSecured) === null || _t === void 0 ? void 0 : _t.httpStatusCode) === 401) {
    try {
      const { title } = item;
      const serviceInfo = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(item.url, {}, { addTokenManually: false });
      const documentInfo = serviceInfo.documentInfo;
      const keywords = (documentInfo.Keywords || "").split(",");
      const tags = [...(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.b)([...keywords, ...itemTags])];
      item = Object.assign(Object.assign({}, item), { extent: serviceInfo.fullExtent || serviceInfo.extent, serviceInfo });
      return Object.assign(Object.assign({}, item), { title, tags });
    }
    catch (error) {
      if (error.status === 401) {
        throw { code: "unauthorized" };
      }
      throw { code: "serviceNotExist", message: JSON.stringify(error) };
    }
  }
}
async function addSecureAGSUrl(itemProperties) {
  const { serviceInfo, username, password, isSecured, storeAuth, type } = itemProperties;
  const { user, portal, config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const itemType = type;
  const userInfo = { username, password };
  const { thumbnailURL } = (0,_file_f36193e9_js__WEBPACK_IMPORTED_MODULE_12__.g)(itemType);
  const item = Object.assign(Object.assign({}, itemProperties), { thumbnailURL: thumbnailURL || itemProperties.thumbnailURL });
  if (((serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.isSecure) && !serviceInfo.userInfo) ||
    ((isSecured === null || isSecured === void 0 ? void 0 : isSecured.isOverride) && !userInfo) ||
    ((isSecured === null || isSecured === void 0 ? void 0 : isSecured.httpStatusCode) !== 401 && !userInfo) ||
    (storeAuth && !userInfo)) {
    throw new Error("invalidCredentials");
  }
  if (isSecured) {
    if (storeAuth) {
      if (!portal.isPortal || (portal.isPortal && (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.e)())) {
        item.serviceUsername = username;
        item.servicePassword = password;
      }
      else {
        throw new Error();
      }
      if (isSecured.httpStatusCode === 401) {
        const result = await addItem(item, config === null || config === void 0 ? void 0 : config.restBaseUrl).then(({ id }) => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(`${user.userContentUrl}/items/${id}`, {}, {}, "post"));
        const updatedItem = Object.assign(Object.assign({}, item), { id: result.item.id, url: result.item.url, sourceUrl: result.item.sourceUrl });
        return addAGSService(updatedItem, true);
      }
      else if ((serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.isSecure) && !(serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.userInfo)) {
        throw new Error("invalidCredentials");
      }
    }
  }
  return addAGSService(item);
}
async function addAGSService(itemProperties, update = false) {
  var _a, _b, _c, _d;
  const { url, serviceInfo, type, storeAuth, hybridImageServiceSetting } = itemProperties;
  let singlelayer = { StreamServer: 1, ImageServer: 1, WorkspaceServer: 1 }, serviceLayers;
  if (!serviceInfo && !storeAuth) {
    throw new Error("serviceNotExist");
  }
  if (storeAuth && !serviceInfo) {
    // For proxied secure AGS services, we'll need to delete the item after creating it to:
    // 1. remove the item to not have duplicate items with titles
    // 2. we will need to get service info again to get the correct thumbnail / service info
    // 3. We create the item here so we can get initial serviceInfo so that we can append the correct itemKeywords
    const { response, updatedProperties } = await retrieveProxyServiceInfo(itemProperties);
    await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.d)(response.id, { permanentDelete: true });
    // WebGIS/arcgis-portal-app#35615 - wait for the deleted item to be removed from the search index
    await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.t)(3000);
    return updatedProperties;
  }
  const updatedItem = Object.assign(Object.assign({}, itemProperties), { description: (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.description) || ((_a = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.documentInfo) === null || _a === void 0 ? void 0 : _a.Comments) || "", accessInformation: (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.copyrightText) || ((_b = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.documentInfo) === null || _b === void 0 ? void 0 : _b.Credits) || "", spatialReference: getSpatialReference(itemProperties.serviceInfo, itemProperties.agsType) });
  //For icon purposes we can update the
  //typeKeywords to show different icons
  if ((type === null || type === void 0 ? void 0 : type.toLowerCase()) === "map service") {
    updatedItem.typeKeywords.push((serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.singleFusedMapCache) ? "Tiled" : "Dynamic");
  }
  if ((type === "Image Service" && hybridImageServiceSetting === "TiledImageServer") ||
    isTilesOnlyImageService(url, serviceInfo)) {
    updatedItem.typeKeywords = _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_13__.a.TiledImageServer.typeKeywords;
  }
  if ((serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.type) === "Table") {
    updatedItem.typeKeywords = [...updatedItem.typeKeywords, "Table", "Singlelayer"];
  }
  if (type in singlelayer) {
    updatedItem.typeKeywords.push("Singlelayer");
  }
  else if ((serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.layers) || (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.tables)) {
    if ((!serviceInfo.layers || !((_c = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.layers) === null || _c === void 0 ? void 0 : _c.length)) && (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.tables.length)) {
      //Check if "Table" was added above, dont want to add it twice
      if (updatedItem.typeKeywords.findIndex((type) => type === "Table") === -1) {
        updatedItem.typeKeywords.push("Table");
      }
      updatedItem.typeKeywords.push(serviceInfo.tables.length > 1 ? "Multilayer" : "Singlelayer");
    }
    else {
      serviceLayers = [...(serviceInfo.layers || []), ...(serviceInfo.tables || [])];
      updatedItem.typeKeywords.push(serviceLayers.length > 1 ? "Multilayer" : "Singlelayer");
    }
  }
  //For icon purposes we need to update the typeKeywords for a SceneServer added by reference
  if ((type === null || type === void 0 ? void 0 : type.toLowerCase()) === "sceneserver") {
    const { layers } = serviceInfo;
    const layerType = ((_d = layers === null || layers === void 0 ? void 0 : layers[0]) === null || _d === void 0 ? void 0 : _d.layerType) || (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.layerType);
    layerType && updatedItem.typeKeywords.push(layerType);
  }
  try {
    const { extent: wgsExtent } = await projectExtentToWGS84FromItem(Object.assign({}, updatedItem));
    const item = updatedItem;
    const itemInfo = (0,_file_f36193e9_js__WEBPACK_IMPORTED_MODULE_12__.g)(item.type);
    item.type = itemInfo.type;
    item.typeKeywords = [...(item.typeKeywords || []), ...(itemInfo.typeKeywords || [])];
    if (!storeAuth) {
      // TODO: unify extent formatting, thumbnail generation between here and updateProxyService
      const extentAsString = extentToString(item.extent);
      const e = extentAsString.split(",");
      const formattedExtent = [
        [parseFloat(e[0]), parseFloat(e[1])],
        [parseFloat(e[2]), parseFloat(e[3])]
      ];
      item.extent = formattedExtent;
      const thumbnailURL = await getAGSThumbnail(item);
      item.thumbnailURL = thumbnailURL;
      if (item.thumbnailURL && item.thumbnailToken) {
        item.thumbnailURL += `${item.thumbnailURL.indexOf("?") > -1 ? "&" : "?"}${item.thumbnailToken}`;
      }
      item.extent = extentToString(item.type === "Feature Service" ? wgsExtent : item.extent);
    }
    if (storeAuth) {
      return updateProxyService(item);
    }
    if (update) {
      return (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.e)(item.id, Object.assign(Object.assign({}, item), { url: item.sourceUrl }));
    }
    else {
      return addUrl(item);
    }
  }
  catch (error) {
    if (storeAuth) {
      throw error;
    }
    return addUrl(itemProperties);
  }
}
async function updateProxyService(itemProperties) {
  const { user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const { exportTilesAllowed } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  const createdItem = await addUrl(itemProperties);
  const requestUrl = `${user.userContentUrl}/items/${createdItem.id}`;
  const { item } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(requestUrl, {}, {}, "post");
  const serviceInfoUrl = exportTilesAllowed ? itemProperties.url : item.url;
  const updatedItem = await getAGSServiceInfo(Object.assign(Object.assign({}, itemProperties), { type: _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.type }), serviceInfoUrl);
  const { typeKeywords, thumbnailToken, spatialReference, extent, description } = updatedItem;
  itemProperties.id = createdItem.id;
  itemProperties.proxyUrl = item.url;
  itemProperties.typeKeywords = typeKeywords;
  itemProperties.thumbnailToken = thumbnailToken;
  itemProperties.spatialReference = spatialReference;
  itemProperties.extent = extent;
  itemProperties.description = description;
  // INC1055397 - On its own, a failed thumbnail shouldn't derail the whole upload process (?)
  // TODO: If needed, throw a more specific error in the catch block
  try {
    const extentAsString = extentToString(updatedItem.extent);
    const e = extentAsString.split(",");
    const formattedExtent = [
      [parseFloat(e[0]), parseFloat(e[1])],
      [parseFloat(e[2]), parseFloat(e[3])]
    ];
    itemProperties.extent = formattedExtent;
    const thumbnailURL = await getAGSThumbnail(itemProperties);
    item.thumbnailURL = thumbnailURL;
    if (item.thumbnailURL && item.thumbnailToken) {
      item.thumbnailURL += `${item.thumbnailURL.indexOf("?") > -1 ? "&" : "?"}${item.thumbnailToken}`;
    }
  }
  catch (error) {
    console.error(error);
  }
  await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.e)(createdItem.id, { thumbnailURL: item.thumbnailURL });
  return createdItem;
}
async function retrieveProxyServiceInfo(itemProperties) {
  var _a, _b, _c, _d, _e, _f;
  const { user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const { type, exportTilesAllowed } = itemProperties;
  const addedItem = await addUrl(itemProperties);
  const { id } = addedItem;
  const url = `${user.userContentUrl}/items/${id}`;
  const { item } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, {}, {}, "post");
  // For vectorTile services where the root url is not secured, but exportTilesAllowed = true, may have the "exporTiles" endpoint secured. So when requesting service info we should use the entered url, not the url generated from the proxied item generation
  const serviceInfoUrl = exportTilesAllowed ? itemProperties.url : item.url;
  const updatedItem = (await getAGSServiceInfo(Object.assign(Object.assign({}, itemProperties), { type }), serviceInfoUrl)) || {};
  const documentInfo = (_b = (_a = updatedItem.serviceInfo) === null || _a === void 0 ? void 0 : _a.documentInfo) !== null && _b !== void 0 ? _b : {};
  const { tags, serviceUsername, servicePassword, serviceInfo, spatialReference, extent, thumbnailToken } = updatedItem;
  let storeUpdates = {};
  storeUpdates.title = (_c = documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.Title) !== null && _c !== void 0 ? _c : "";
  storeUpdates.description = (_d = documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.description) !== null && _d !== void 0 ? _d : "";
  storeUpdates.snippet = (_f = (_e = documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.Subject) !== null && _e !== void 0 ? _e : documentInfo === null || documentInfo === void 0 ? void 0 : documentInfo.serviceDescription) !== null && _f !== void 0 ? _f : "";
  storeUpdates.tags = tags;
  storeUpdates.proxyUrl = item.url;
  storeUpdates.serviceUsername = serviceUsername;
  storeUpdates.servicePassword = servicePassword;
  storeUpdates.serviceInfo = serviceInfo;
  storeUpdates.spatialReference = spatialReference;
  storeUpdates.extent = extent;
  storeUpdates.thumbnailToken = thumbnailToken;
  return { response: addedItem, updatedProperties: storeUpdates };
}

const overrideUrls = [
  "geocode.arcgis.com",
  "geocodedev.arcgis.com",
  "geocodeqa.arcgis.com",
  "route.arcgis.com",
  "routedev.arcgis.com",
  "routeqa.arcgis.com",
  "geoenrich.arcgis.com",
  "geoenrichqa.arcgis.com",
  "geoenrichddev.arcgis.com"
];
async function getIsSecured(userInfo, serviceUrl, restBaseUrl, checkAuth) {
  // the /checkURL call will respond whether a service needs authentication or not.
  const url = serviceUrl.split("?")[0];
  const securedURL = `${restBaseUrl}portals/checkurl`;
  const isOverrideUrl = overrideUrls.some((url) => serviceUrl.indexOf(url) !== -1);
  if (isOverrideUrl) {
    return { secured: true, isOverride: true };
  }
  else {
    const isVectorTileService = !isOverrideUrl && serviceUrl.indexOf("/VectorTileServer") > -1;
    const requestUrl = `${securedURL}?url=${encodeURIComponent(`${addParameters(`${url}?f=json`)}`)}`;
    try {
      const result = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(requestUrl, {}, { addTokenManually: false });
      const { httpStatusCode } = result;
      if (result.secured) {
        if (httpStatusCode === 403) {
          //See https://devtopia/WebGIS/arcgis-portal-app/issues/51 403 considered not-secure
          result.secured = false;
        }
        else if (httpStatusCode === 401) {
          // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/35981 web tier auth doesn't allow storing credentials
          result.allowStoredAuth = false;
        }
      }
      else if (isVectorTileService) {
        // For vectorTile services where the root url is not secured, but exportTilesAllowed = true, may have the "exporTiles" endpoint secured,
        // we need to check that here, if it is secured then we need to prompt for credentials https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/19510
        const serviceInfo = await getServiceInfo({ username: userInfo.username, password: userInfo.password }, serviceUrl, { isVideoService: false, checkAuth });
        _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.exportTilesAllowed = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.exportTilesAllowed;
        if (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.exportTilesAllowed) {
          return getIsSecured(userInfo, `${serviceUrl}/exportTiles`, restBaseUrl, checkAuth);
        }
      }
      return Object.assign(Object.assign({}, result), { isOverride: false });
    }
    catch (error) {
      const { message, code } = error;
      if (message === "Error checking resource") {
        // Internal service URL detected
        // checkUrl shouldn't be handling this --- Check with Chris Whitmore for detail
        return {
          secured: false,
          url: serviceUrl,
          httpResponse: "",
          httpStatusCode: code,
          httpStatusMessage: message,
          isOverride: false,
          allowStoredAuth: false // This is the key point, we just want to hide the toggle
        };
      }
      return {
        allowStoredAuth: false,
        url: serviceUrl,
        httpResponse: "",
        httpStatusCode: code,
        httpStatusMessage: message,
        isOverride: false
      };
    }
  }
}
function isEsriHostedService(url) {
  // esri hosted service: https://dev0011211.esri.com/server/rest/services/Hosted/California/FeatureServer
  return url.indexOf(".esri.com/server/rest/services") > -1 ? true : false;
}
function isHybridImageService(url, serviceInfo) {
  var _a;
  return (url.toLowerCase().indexOf("/imageserver") > -1 &&
    (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.cacheType) === "Raster" &&
    ((_a = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.capabilities) === null || _a === void 0 ? void 0 : _a.toLowerCase().indexOf("tilesonly")) === -1);
}
function isTilesOnlyImageService(url, serviceInfo) {
  var _a, _b;
  return ((_a = url.toLowerCase()) === null || _a === void 0 ? void 0 : _a.includes("/imageserver")) && ((_b = serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.capabilities) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes("tilesonly"));
}
async function getServiceInfo(userInfo, svcUrl, options) {
  const config = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.config;
  const [esriId] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3 ? "esri/IdentityManager" : "esri/identity/IdentityManager"
  ]);
  const { forceAddToken, isSecure, checkAuth } = options;
  const { username, password } = userInfo;
  const method = "auto";
  const isHosted = (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_11__.a)(svcUrl);
  const isESRI = isEsriHostedService(svcUrl);
  const hostedService = isHosted || isESRI;
  const isOverrideUrl = overrideUrls.some((url) => svcUrl.indexOf(url) !== -1);
  const requestOptions = {
    useProxy: false,
    timeout: config.isMultiTenant === false ? 60000 : 5000,
    addSSL: hostedService,
    addTokenManually: (isSecure && hostedService && !!config.isMultiTenant) || forceAddToken || false,
    disableIdentityLookup: null
  };
  if (checkAuth) {
    svcUrl = svcUrl.split("?")[0];
    if (isOverrideUrl) {
      await signIn(svcUrl, { username, password });
      return serviceInfoRequest(svcUrl, requestOptions, method);
    }
    else {
      // Video Service URL doesn't accept POST method
      const result = await serviceInfoRequest(svcUrl, requestOptions, method);
      result.credential = esriId.findCredential(svcUrl);
      if (result.credential) {
        esriId.registerToken({
          server: svcUrl,
          token: result.credential.token,
          userId: result.credential.userId,
          expires: result.credential.expires,
          ssl: result.credential.ssl
        });
      }
      return result;
    }
  }
  else {
    // `disableIdentityLookup` will override the Id manager in ESRIRequest so that it doesnt render the auth window - which has been a pain point for certain urls - if you have an issue with authentication and the ID manager check here first.
    requestOptions.disableIdentityLookup = true;
    return await serviceInfoRequest(svcUrl, requestOptions, method);
  }
}
async function signIn(svcUrl, userInfo) {
  const [esriId, Credential] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3 ? "esri/IdentityManager" : "esri/identity/IdentityManager",
    "esri/Credential"
  ]);
  if (userInfo.username && userInfo.password) {
    const serverInfo = await findServerInfo(svcUrl);
    if (esriId._checkProtocol(svcUrl, serverInfo, (error) => console.error(error))) {
      try {
        const response = await esriId.generateToken(serverInfo, userInfo);
        const expires = response.expires ? Number(response.expires) : null;
        const ssl = !!response.ssl;
        const cred = new Credential({
          userId: userInfo.username,
          server: serverInfo.server,
          token: response.token,
          expires,
          ssl,
          validity: serverInfo.shortLivedTokenValidity,
          resources: [svcUrl],
          scope: "server"
        });
        if (esriId.credentials.indexOf(cred) === -1) {
          esriId.credentials.push(cred);
        }
        return userInfo;
      }
      catch (error) {
        error.code = 403;
        throw error;
      }
    }
    else {
      return null;
    }
  }
}
async function findServerInfo(serviceUrl) {
  const [esriId, ServerInfo] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__.l)([
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.api === 3 ? "esri/IdentityManager" : "esri/identity/IdentityManager",
    "esri/ServerInfo"
  ]);
  let serverInfo = await esriId.findServerInfo(serviceUrl);
  if (!serverInfo) {
    serverInfo = new ServerInfo();
    serverInfo.server = await esriId._getOrigin(serviceUrl);
    const response = await esriId._getTokenSvcUrl(serviceUrl);
    const { authInfo, tokenServiceUrl, currentVersion } = response;
    serverInfo.tokenServiceUrl = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.tokenServicesUrl) || (authInfo === null || authInfo === void 0 ? void 0 : authInfo.tokenServiceUrl) || tokenServiceUrl;
    serverInfo.currentVersion = currentVersion;
    serverInfo.hasServer = true;
    esriId.registerServers([serverInfo]);
    return serverInfo;
  }
  else {
    return serverInfo;
  }
}
async function serviceInfoRequest(serviceUrl, options, method = "post") {
  try {
    return await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(addParameters(serviceUrl), {}, Object.assign({}, options), method);
  }
  catch (error) {
    throw error;
  }
}
async function getUrlServiceInfo(item) {
  var _a, _b;
  let urlServiceInfo = {};
  if ((0,_ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_10__.i)(item.type)) {
    urlServiceInfo = await getSecuredAGSServiceInfo(item);
  }
  else {
    switch (item.type) {
      case "OGCFeatureServer":
        urlServiceInfo = await getOGCFeatureLayerServiceInfo(item);
        break;
      case "WMS":
        const { result, error } = await getWMSServiceInfo(item);
        if (error) {
          urlServiceInfo.error = error;
        }
        else {
          const wmsLayers = await loadWMSLayers(result.serviceInfo);
          urlServiceInfo.result = Object.assign(Object.assign({}, result), wmsLayers);
        }
        break;
      case "WFS":
        urlServiceInfo = await getWFSServiceInfo(item);
        if (urlServiceInfo.result) {
          urlServiceInfo.result.layers = urlServiceInfo.result.serviceInfo.layers;
          urlServiceInfo.result.title = (_a = urlServiceInfo.result.serviceInfo.title) !== null && _a !== void 0 ? _a : "";
          urlServiceInfo.result.isComplex = urlServiceInfo.result.serviceInfo.isComplex === "esriGeometryComplex";
        }
        break;
      case "WMTS":
        urlServiceInfo = await getWMTSServiceInfo(item);
        if (urlServiceInfo.result) {
          urlServiceInfo.result.layers = urlServiceInfo.result.serviceInfo.layers;
          urlServiceInfo.result.title = (_b = urlServiceInfo.result.serviceInfo.title) !== null && _b !== void 0 ? _b : "";
        }
        break;
      default:
        urlServiceInfo = { result: Object.assign({}, item) };
        break;
    }
  }
  return urlServiceInfo;
}
// We need to send layer's relationship in a separate /addToDefinition call
// https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/4319
// So this function should NOT accept layers/tables with relationships
async function createService(service, options) {
  var _a, _b;
  // Spread to avoid manipulating the original content
  const copiedService = Object.assign({}, service);
  const { config, user, asyncAddToDefinition = true } = options;
  const addToDefinitionContent = {
    layers: (_a = copiedService.layers) !== null && _a !== void 0 ? _a : [],
    tables: (_b = copiedService.tables) !== null && _b !== void 0 ? _b : []
  };
  const addToDefinitionRequestContent = JSON.stringify(addToDefinitionContent);
  // Create service fails if passing layers, tables
  delete copiedService.layers;
  delete copiedService.tables;
  delete copiedService.initialExtent;
  delete copiedService.fullExtent;
  delete copiedService._ssl;
  const createServiceContent = { createParameters: JSON.stringify(copiedService), targetType: "featureService" };
  const url = `${config.restBaseUrl}content/users/${user.username}/createService`;
  const createServiceResponse = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, createServiceContent, {}, "post");
  try {
    await addToDefinition(addToDefinitionRequestContent, createServiceResponse.encodedServiceURL, asyncAddToDefinition);
    return { createServiceResponse, addToDefinitionResponse: addToDefinitionContent };
  }
  catch (err) {
    // if there were errors adding to the definition, clean up after ourselves and delete the service
    const deleteUrl = `${user.userContentUrl}/items/${createServiceResponse.itemId}/delete`;
    await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(deleteUrl, {}, {}, "post");
    console.error(err);
    throw err;
  }
}
async function addToDefinition(params, encodedServiceURL, async = true) {
  if (params) {
    const adminUrl = encodedServiceURL.replace("rest/services", "rest/admin/services");
    const url = `${adminUrl}/addToDefinition`;
    try {
      const result = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, { addToDefinition: params, async }, {}, "post");
      return async ? await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.p)(result.statusURL) : result;
    }
    catch (error) {
      if (async) {
        // TODO: handle error gracefully
        // TODO: remove this once the backend shows meaningful errors on `async: true`
        // `async: true` doesn't show a meaningful error.
        //    so we do this to get the actual error for debugging purposes
        await addToDefinition(params, encodedServiceURL, false);
      }
      throw error;
    }
  }
  return null;
}
function getLayerItemData(item, portal) {
  // TODO: refactor this to use getItemData from server-item.ts
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.g)(portal)}content/items/${item.id}/data`;
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url);
}
/**
 * Fetch an item of type "Layer Template" used by the org to create new attachment layers
 */
async function findTemplateServiceInfo(portal) {
  var _a, _b;
  const groupResponse = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.q)({ q: 'title: "Esri Layer Templates" AND owner: "esri_en"', num: 1 });
  const group = (_a = groupResponse.results) === null || _a === void 0 ? void 0 : _a[0];
  if (!group) {
    return null;
  }
  const templateResponse = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(`${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.g)(portal)}/search`, {
    q: `title:"Points" group:"${group.id}" AND type:"Layer Template" -type:"Attachment"`,
    num: 1
  });
  const template = (_b = templateResponse.results) === null || _b === void 0 ? void 0 : _b[0];
  return template ? getLayerItemData(template, portal) : null;
}

var __rest = ( false) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const defaultTemplateServiceInfo = {
  currentVersion: 10.51,
  hasVersionedData: false,
  supportsDisconnectedEditing: false,
  hasStaticData: false,
  maxRecordCount: 2000,
  supportedQueryFormats: "JSON",
  supportsVCSProjection: false,
  capabilities: "Query,Editing,Create,Update,Delete,Sync",
  description: "",
  copyrightText: "",
  allowGeometryUpdates: true,
  units: "esriMeters",
  supportsAppend: true,
  syncEnabled: false,
  supportsApplyEditsWithGlobalIds: false,
  editorTrackingInfo: {
    allowAnonymousToDelete: true,
    allowAnonymousToQuery: true,
    allowAnonymousToUpdate: true,
    allowOthersToDelete: false,
    allowOthersToQuery: true,
    allowOthersToUpdate: true,
    enableEditorTracking: false,
    enableOwnershipAccessControl: false
  },
  xssPreventionInfo: { xssPreventionEnabled: true, xssPreventionRule: "InputOnly", xssInputRule: "rejectInvalid" },
  _ssl: true
};
const addFeatureLayer = async (requestParams) => {
  var _a, _b, _c;
  const { tags, serviceInfo, typeKeywords: storeTypeKeywords, extent: storeExtent, selectedServiceInfoLayersNames, addFeatureLayerType } = requestParams;
  const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
  const isEnterprise = portal.isPortal;
  if (!serviceInfo) {
    // TODO: have a better error message here
    throw new Error("No service info found.");
  }
  try {
    // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/37255#issuecomment-3186564
    let presetServiceInfo = defaultTemplateServiceInfo;
    try {
      presetServiceInfo = (_a = (await findTemplateServiceInfo(portal))) !== null && _a !== void 0 ? _a : defaultTemplateServiceInfo;
      presetServiceInfo.capabilities = "Query,Editing,Create,Update,Delete";
      // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/38966
      presetServiceInfo.hasStaticData = false;
    }
    catch (error) {
      console.warn(`Could not fetch template ${JSON.stringify(error)}`);
    }
    const featureLayerServiceInfo = serviceInfo;
    let baseLayer = (_b = featureLayerServiceInfo.layers) !== null && _b !== void 0 ? _b : [];
    let baseTables = (_c = featureLayerServiceInfo.tables) !== null && _c !== void 0 ? _c : [];
    // * Filter selected layers
    // ! Make sure this is done before extractAndCleanRelationshipParam because the `relationship`
    // !   depends on it!
    // Build from scratch flow will automatically be filter at the end of its page
    if (addFeatureLayerType !== "build" && selectedServiceInfoLayersNames) {
      const checkSelected = (layer) => selectedServiceInfoLayersNames[layer.name];
      baseLayer = baseLayer.filter(checkSelected);
      baseTables = baseTables.filter(checkSelected);
    }
    // * Filter unique index
    // ! Sometimes the backend returns template layers with duplicate indexes,
    // !  we need to make it unique until the problem got fixed
    // ? Note that this might be a bug in the /addToDefinition backend because
    // ?  https://developers.arcgis.com/rest/services-reference/online/add-to-definition-feature-service-.htm
    // ?  example seems to allow duplicate fields
    const { layers: uniqueIndexLayers, tables: uniqueIndexTables } = extractUniqueIndex(baseLayer, baseTables);
    // * Fix ids
    //  Some template returns noncontinuous id, which is bad
    //  => we also need to fix ids that case
    const { layers, tables } = fixIds(uniqueIndexLayers, uniqueIndexTables);
    // * Form parameters
    const createParameters = Object.assign(Object.assign(Object.assign({}, presetServiceInfo), serviceInfo), { name: featureLayerServiceInfo.name || _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.title, layers,
      tables });
    // * Clean parameters
    // We need to send layer's relationship in a separate /addToDefinition call
    // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/4319
    // There are also some case where layers depend on each other (hence the `relationship`)
    //  but some of the layers are deselected so we need to make sure the bad relationship doesn't go the backend
    // => extract and clean
    const { cleanedCreateParameters, relationshipParameters } = extractAndCleanRelationshipParam(createParameters);
    // * 🍒 ⛏ the rest of the properties
    const cherryPickProps = [
      "serviceDescription",
      "hasStaticData",
      "maxRecordCount",
      "supportedQueryFormats",
      "capabilities",
      "description",
      "copyrightText",
      "spatialReference",
      "initialExtent",
      "fullExtent",
      "_ssl",
      "allowGeometryUpdates",
      "units",
      "xssPreventionInfo"
    ];
    cherryPickProps.forEach((key) => {
      const value = featureLayerServiceInfo[key];
      value != null && (cleanedCreateParameters[key] = value);
    });
    cleanedCreateParameters.name = (0,_functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_6__.a)(cleanedCreateParameters.name);
    if (addFeatureLayerType === "template") {
      cleanedCreateParameters.syncEnabled = true;
      cleanedCreateParameters.capabilities = "Query,Editing,Create,Update,Delete,Sync";
    }
    // * Send requests
    const { createServiceResponse } = await createService(cleanedCreateParameters, {
      asyncAddToDefinition: !isEnterprise,
      config: _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.config,
      user: _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user
    });
    const { itemId, success } = createServiceResponse;
    const { typeKeywords: itemTypeKeywords } = (await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.a)(itemId)).result;
    const typeKeywords = [...storeTypeKeywords, ...itemTypeKeywords];
    if (serviceInfo.captureGPS) {
      typeKeywords.push("gpsMetadataEnabled");
    }
    try {
      // number taken from the old UI's "/update" endpoint
      const extent = portal.defaultExtent || serviceInfo.fullExtent || serviceInfo.extent || storeExtent;
      const spatialReference = extent.spatialReference.wkid || extent.spatialReference.wkt || "4326";
      const extentString = extentToString(isValidWGS84Extent(extent) || spatialReference !== "4326" ? extent : await projectExtentToWGS84(extent));
      const thumbnailURL = `https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/export?size=800,532&format=png24&bboxSR=${spatialReference}&bbox=${extentString}&f=image`;
      const isInRoot = isFolderRoot(_item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.folder);
      await Promise.all([
        (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.e)(itemId, {
          title: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.title,
          typeKeywords: typeKeywords.join(","),
          tags: (tags !== null && tags !== void 0 ? tags : _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.tags).join(","),
          extent: extentString,
          snippet: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.snippet,
          description: _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a.description
        }),
        relationshipParameters.layers || relationshipParameters.tables
          ? addToDefinition(JSON.stringify(relationshipParameters), createServiceResponse.encodedServiceURL, !isEnterprise)
          : undefined,
        !isInRoot && (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.m)(itemId, _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.folder.id)
      ]);
      // No await, just leave it be
      (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.e)(itemId, { thumbnailURL }).catch(console.error);
      return { success, id: itemId, folder: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_3__.i.folder.id };
    }
    catch (error) {
      (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.d)(itemId);
      console.error(error);
      throw error;
    }
  }
  catch (error) {
    console.error(error);
    throw error;
  }
};
const getServiceAndLayerInfo = async (serviceUrl, restBaseUrl, forceAddToken, isSecure
// TODO: refactor this to new error system
) => {
  var _a;
  const { username, password, checkAuth } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_4__.a;
  try {
    const getServiceInfoWrapper = (url) => getServiceInfo({ username, password }, url, {
      forceAddToken,
      isSecure,
      // Add the time of writing, only feature layer and tile layer use this method, so they're not a video service
      isVideoService: false,
      checkAuth
    });
    const extractedServiceInfo = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.p)(serviceUrl);
    if (!extractedServiceInfo) {
      console.warn("invalid service info");
      return null;
    }
    const { baseServerUrl, index } = extractedServiceInfo;
    const serviceInfo = (await getServiceInfoWrapper(baseServerUrl));
    const layers = (await Promise.all((serviceInfo.layers || [])
      .filter((layer) => index === null || layer.id === index)
      .map((layer) => getServiceInfoWrapper(`${baseServerUrl}/${layer.id}`))));
    const tables = (await Promise.all((serviceInfo.tables || [])
      .filter((table) => index === null || table.id === index)
      .map((table) => getServiceInfoWrapper(`${baseServerUrl}/${table.id}`))));
    return { serviceInfo, layers, tables };
  }
  catch (error) {
    console.error(error);
    if (((_a = error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "token required") {
      try {
        const { secured } = await getIsSecured({ username, password }, serviceUrl, restBaseUrl, checkAuth);
        return await getServiceAndLayerInfo(serviceUrl, restBaseUrl, secured);
      }
      catch (error) {
        throw error;
      }
    }
    throw error;
  }
};
const extractAndCleanRelationshipParam = (createParameters) => {
  const lookupMap = {};
  const setupLookupMap = (relationship) => (lookupMap[relationship.id] = true);
  createParameters.layers.forEach(setupLookupMap);
  createParameters.tables.forEach(setupLookupMap);
  // * Extract relationship
  // ! Do not delete layer.relationships here or it will break when
  // !  the user go Back then Next in the case item creation failed
  const filterMissingRelationship = (relationship) => lookupMap[relationship.relatedTableId];
  const extractRelationship = (layer) => ({
    relationships: layer.relationships.filter(filterMissingRelationship),
    id: layer.id
  });
  const filterEmptyRelationship = (layer) => { var _a; return ((_a = layer.relationships) === null || _a === void 0 ? void 0 : _a.length) > 0; };
  const layerRelationships = createParameters.layers.map(extractRelationship).filter(filterEmptyRelationship);
  const tableRelationships = createParameters.tables.map(extractRelationship).filter(filterEmptyRelationship);
  const relationshipParameters = { layers: layerRelationships, tables: tableRelationships };
  if (relationshipParameters.layers.length === 0) {
    delete relationshipParameters.layers;
  }
  if (relationshipParameters.tables.length === 0) {
    delete relationshipParameters.tables;
  }
  // * Create new createParameters without relationship
  const layers = createParameters.layers.map((_a) => {
    var layers = __rest(_a, ["relationships"]);
    return layers;
  });
  const tables = createParameters.tables.map((_a) => {
    var tables = __rest(_a, ["relationships"]);
    return tables;
  });
  const cleanedCreateParameters = Object.assign(Object.assign({}, createParameters), { layers, tables });
  return { relationshipParameters, cleanedCreateParameters };
};
const extractUniqueIndex = (layers, tables) => {
  const getUniqueIndexLayer = (layer) => (Object.assign(Object.assign({}, layer), { indexes: (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.u)(layer.indexes, (item) => item.name) }));
  return {
    layers: layers.map(getUniqueIndexLayer),
    tables: tables.map(getUniqueIndexLayer)
  };
};
/** Fix ids for both layers and relationships */
const fixIds = (layers, tables) => {
  // https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/sharing/dijit/dialog/PublishWizard.js#L1450-L1483
  let layerInfos = (0,_feature_layer_d33ea114_js__WEBPACK_IMPORTED_MODULE_5__.c)(layers, tables);
  // * Fix layers ids
  /** Record<old id, new id> */
  const oldLayerIds = {};
  layerInfos = layerInfos.map((layerInfo, index) => {
    oldLayerIds[layerInfo.id] = index;
    const newLayer = Object.assign(Object.assign({}, layerInfo), { id: index });
    return newLayer;
  });
  // * Fix relationshipIds
  layerInfos.forEach((layerInfo) => {
    var _a;
    layerInfo.relationships = ((_a = layerInfo.relationships) !== null && _a !== void 0 ? _a : []).map((relationship) => {
      const oldRelatedId = relationship.relatedTableId;
      const newRelatedId = oldLayerIds[oldRelatedId];
      const newRelationship = Object.assign(Object.assign({}, relationship), { relatedTableId: newRelatedId });
      return newRelationship;
    });
  });
  return layerInfos.reduce((result, curInfo) => {
    curInfo.type === "Table" ? result.tables.push(curInfo) : result.layers.push(curInfo);
    return result;
  }, { layers: [], tables: [] });
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-f36193e9.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-f36193e9.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ sanitizeFileName),
/* harmony export */   f: () => (/* binding */ formatFileSize),
/* harmony export */   g: () => (/* binding */ getItemInfoByType),
/* harmony export */   s: () => (/* binding */ sanitizeFileInput),
/* harmony export */   v: () => (/* binding */ validateOverwriteFileName)
/* harmony export */ });
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/* harmony import */ var _guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./guid-4f4176ba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



function sanitizeFileName(name, addGUID) {
  //TODO: add new param to spec file.
  const expression = /(?:\.([^.]+))?$/;
  const invalidTitleCharacters = /\.|-/g;
  let fileName = name.replace(/^.*(\\|\/|:)/, "");
  let extension = (fileName && expression.exec(fileName)[1] ? expression.exec(fileName)[1].toLowerCase() : "");
  let title = "";
  if (fileName.indexOf(".rft.") > -1) {
    const [name, suffix] = fileName.split(".rft.");
    extension = `rft.${suffix}`;
    title = name;
  }
  if (fileName && !title) {
    title = fileName.lastIndexOf(".") === -1 ? fileName : fileName.substring(0, fileName.lastIndexOf("."));
  }
  // Replace any invalid characters with an underscore
  title = title.replace(invalidTitleCharacters, "_");
  // Allow file upload of existing item's file name // currently used in append
  if (addGUID) {
    title = makeUniqueFileName(title);
    fileName = `${title}.${extension}`;
  }
  return { title, fileName, extension };
}
// Helper method that takes in a file & returns the cleaned up file name as is and in title form, and the detected file extension
function sanitizeFileInput(file, addGUID) {
  return sanitizeFileName(file.name, !!addGUID);
}
function makeUniqueFileName(name) {
  return `${name}_${(0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_1__.g)()}`;
}
function validateOverwriteFileName(uploadedFileName, sourceFileName) {
  let fileName = uploadedFileName;
  const position = uploadedFileName.lastIndexOf("\\");
  if (position > -1) {
    fileName = fileName.substring(position + 1, fileName.length);
  }
  return fileName.replace(/\ /g, "_") === sourceFileName.replace(/\ /g, "_");
}
function getItemInfoByType(type) {
  if (_item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[type]) {
    return _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[type];
  }
  else {
    return _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[Object.keys(_item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a).find((fileType) => _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[fileType].type === type)];
  }
}
function formatFileSize(size) {
  if (!size) {
    return "0 B";
  }
  const i = Math.floor(Math.log(size) / Math.log(1024));
  const adjustedSize = Math.round(size / Math.pow(1024, i));
  const unit = ["B", "KB", "MB", "GB", "TB"][i];
  return `${adjustedSize} ${unit}`;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-3210b604.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-3210b604.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: () => (/* binding */ workflowState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const workflowStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  portal: null,
  user: null,
  i18n: null,
  scale: "m",
  api: 4,
  nextText: null,
  uploadProgress: 0
});
const workflowState = workflowStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,