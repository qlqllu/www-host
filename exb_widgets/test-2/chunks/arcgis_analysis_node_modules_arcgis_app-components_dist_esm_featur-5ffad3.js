"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_featur-5ffad3"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-69305a85.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-69305a85.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ esriGeometryTypes),
/* harmony export */   b: () => (/* binding */ featureLayerPreferences),
/* harmony export */   e: () => (/* binding */ esriDataTypes),
/* harmony export */   f: () => (/* binding */ featureLayerTypes),
/* harmony export */   g: () => (/* binding */ geometryTypes),
/* harmony export */   r: () => (/* binding */ renderers)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const featureLayerPreferences = ["captureGPS", "enableZDefaults", "enableMDefaults"];
const featureLayerTypes = ["point", "line", "polygon", "multipatch", "multipoint", "table"];
const esriGeometryTypes = {
  esriGeometryPoint: "point",
  esriGeometryPolyline: "line",
  esriGeometryPolygon: "polygon",
  esriGeometryMultiPatch: "multipatch",
  esriGeometryMultipoint: "multipoint"
};
const esriDataTypes = {
  esriFieldTypeOID: "oid",
  esriFieldTypeBoolean: "boolean",
  esriFieldTypeString: "string",
  esriFieldTypeDouble: "number",
  esriFieldTypeInteger: "number",
  esriFieldTypeSmallInteger: "number",
  esriFieldTypeSingle: "number",
  esriFieldTypeGlobalID: "string",
  esriFieldTypeDate: "date",
  esriFieldTypeBigInteger: "number",
  esriFieldTypeDateOnly: "date",
  esriFieldTypeTimeOnly: "date",
  esriFieldTypeTimestampOffset: "date"
};
const geometryTypes = {
  point: "esriGeometryPoint",
  line: "esriGeometryPolyline",
  polygon: "esriGeometryPolygon",
  multipatch: "esriGeometryMultiPatch",
  multipoint: "esriGeometryMultipoint"
};
// TODO: strictly type this
const renderers = {
  line: {
    type: "simple",
    symbol: {
      type: "esriSLS",
      style: "esriSLSSolid",
      color: [165, 83, 183, 255],
      width: 1
    }
  },
  point: {
    type: "simple",
    symbol: {
      type: "esriPMS",
      url: "RedSphere.png",
      imageData: "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",
      contentType: "image/png",
      width: 15,
      height: 15
    }
  },
  multipoint: {
    type: "simple",
    symbol: {
      type: "esriPMS",
      url: "RedSphere.png",
      imageData: "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",
      contentType: "image/png",
      width: 15,
      height: 15
    }
  },
  polygon: {
    type: "simple",
    symbol: {
      type: "esriSFS",
      style: "esriSFSSolid",
      color: [76, 129, 205, 191],
      outline: {
        type: "esriSLS",
        style: "esriSLSSolid",
        color: [0, 0, 0, 255],
        width: 0.75
      }
    }
  },
  // We don't allow adding multipatch layers in from-scratch flow, so no need for this
  multipatch: {}
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-d33ea114.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-d33ea114.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getNewInfoFromStore),
/* harmony export */   b: () => (/* binding */ saveNewInfoToStore),
/* harmony export */   c: () => (/* binding */ combineFeatureLayerInfos),
/* harmony export */   d: () => (/* binding */ layerUseZValues),
/* harmony export */   e: () => (/* binding */ layerUseMValues),
/* harmony export */   g: () => (/* binding */ getFeatureLayerIndexFromUrl),
/* harmony export */   l: () => (/* binding */ layerCaptureGPS),
/* harmony export */   m: () => (/* binding */ mergeLayerPreference),
/* harmony export */   s: () => (/* binding */ saveFeatureLayerSearchResult)
/* harmony export */ });
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./guid-4f4176ba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _thumbnail_0b7adfcd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thumbnail-0b7adfcd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/thumbnail-0b7adfcd.js");
/* harmony import */ var _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./item-properties-e6412a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-e6412a9a.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _feature_layer_69305a85_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./feature-layer-69305a85.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-69305a85.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */









const lineAndPolygonLayerCaptureGPSFields = [
  {
    name: "esrignss_avg_h_rms",
    type: "esriFieldTypeDouble",
    alias: "Average horizontal accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_avg_v_rms",
    type: "esriFieldTypeDouble",
    alias: "Average vertical accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_worst_h_rms",
    type: "esriFieldTypeDouble",
    alias: "Worst horizontal accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_worst_v_rms",
    type: "esriFieldTypeDouble",
    alias: "Worst vertical accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_worst_fixtype",
    type: "esriFieldTypeSmallInteger",
    alias: "Worst fix type",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: {
      type: "codedValue",
      name: "ESRI_FIX_TYPE_DOMAIN",
      codedValues: [
        { name: "NoFix", code: 0 },
        { name: "GPS", code: 1 },
        { name: "DifferentialGPS", code: 2 },
        { name: "PrecisePositioningService", code: 3 },
        { name: "RTKFixed", code: 4 },
        { name: "RTKFloat", code: 5 }
      ]
    },
    defaultValue: null
  },
  {
    name: "esrignss_manual_locations",
    type: "esriFieldTypeInteger",
    alias: "Number of manual locations",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  }
];
const pointLayerCaptureGPSFields = [
  {
    name: "esrignss_speed",
    type: "esriFieldTypeDouble",
    alias: "Speed (km/h)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_direction",
    type: "esriFieldTypeDouble",
    alias: "Direction of travel (°)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrisnsr_azimuth",
    type: "esriFieldTypeDouble",
    alias: "Compass reading (°)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_positionsourcetype",
    type: "esriFieldTypeInteger",
    alias: "Position source type",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: {
      type: "codedValue",
      name: "ESRI_POSITIONSOURCETYPE_DOMAIN",
      codedValues: [
        { name: "Unknown", code: 0 },
        { name: "User defined", code: 1 },
        { name: "Integrated (System) Location Provider", code: 2 },
        { name: "External GNSS Receiver", code: 3 },
        { name: "Network Location Provider", code: 4 },
        { name: "Snapped", code: 5 }
      ]
    },
    defaultValue: null
  },
  {
    name: "esrignss_receiver",
    type: "esriFieldTypeString",
    alias: "Receiver Name",
    sqlType: "sqlTypeOther",
    length: 50,
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_h_rms",
    type: "esriFieldTypeDouble",
    alias: "Horizontal Accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_v_rms",
    type: "esriFieldTypeDouble",
    alias: "Vertical Accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_latitude",
    type: "esriFieldTypeDouble",
    alias: "Latitude",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_longitude",
    type: "esriFieldTypeDouble",
    alias: "Longitude",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_altitude",
    type: "esriFieldTypeDouble",
    alias: "Altitude",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_pdop",
    type: "esriFieldTypeDouble",
    alias: "PDOP",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_hdop",
    type: "esriFieldTypeDouble",
    alias: "HDOP",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_vdop",
    type: "esriFieldTypeDouble",
    alias: "VDOP",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_fixtype",
    type: "esriFieldTypeSmallInteger",
    alias: "Fix Type",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: {
      type: "codedValue",
      name: "ESRI_FIX_TYPE_DOMAIN",
      codedValues: [
        { name: "NoFix", code: 0 },
        { name: "GPS", code: 1 },
        { name: "DifferentialGPS", code: 2 },
        { name: "PrecisePositioningService", code: 3 },
        { name: "RTKFixed", code: 4 },
        { name: "RTKFloat", code: 5 }
      ]
    },
    defaultValue: null
  },
  {
    name: "esrignss_correctionage",
    type: "esriFieldTypeDouble",
    alias: "Correction Age",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_stationid",
    type: "esriFieldTypeSmallInteger",
    alias: "Station ID",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_numsats",
    type: "esriFieldTypeSmallInteger",
    alias: "Number of Satellites",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: {
      type: "range",
      name: "ESRI_NUM_SATS_DOMAIN",
      range: [0, 99]
    },
    defaultValue: null
  },
  {
    name: "esrignss_fixdatetime",
    type: "esriFieldTypeDate",
    alias: "Fix Time",
    sqlType: "sqlTypeOther",
    length: 8,
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_avg_h_rms",
    type: "esriFieldTypeDouble",
    alias: "Average Horizontal Accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_avg_v_rms",
    type: "esriFieldTypeDouble",
    alias: "Average Vertical Accuracy (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_avg_positions",
    type: "esriFieldTypeInteger",
    alias: "Averaged Positions",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  },
  {
    name: "esrignss_h_stddev",
    type: "esriFieldTypeDouble",
    alias: "Standard Deviation (m)",
    sqlType: "sqlTypeOther",
    nullable: true,
    editable: true,
    domain: null,
    defaultValue: null
  }
];
const getTemplateFromType = (type) => {
  switch (type) {
    case "point":
    case "multipoint":
      return [
        {
          name: "New Feature",
          description: "",
          drawingTool: "esriFeatureEditToolPoint",
          prototype: {
            attributes: {}
          }
        }
      ];
    case "line":
      return [
        {
          name: "New Feature",
          description: "",
          drawingTool: "esriFeatureEditToolLine",
          prototype: {
            attributes: {}
          }
        }
      ];
    case "polygon":
      return [
        {
          name: "New Feature",
          description: "",
          drawingTool: "esriFeatureEditToolPolygon",
          prototype: {
            attributes: {}
          }
        }
      ];
    default:
      return [];
  }
};
const getCaptureGPSFieldForGeometryType = (type) => {
  switch (type) {
    case "line":
    case "polygon":
      return [...lineAndPolygonLayerCaptureGPSFields];
    case "point":
      return [...pointLayerCaptureGPSFields];
    default:
      return [];
  }
};
const getCaptureGPSFieldForEsriGeometryType = (type) => {
  switch (type) {
    case "esriGeometryPolyline":
    case "esriGeometryPolygon":
      return [...lineAndPolygonLayerCaptureGPSFields];
    case "esriGeometryPoint":
      return [...pointLayerCaptureGPSFields];
    default:
      return [];
  }
};
const getSharedLayerProperties = ({ id, name, type, layerPreference: { captureGPS, enableZDefaults, enableMDefaults }, portal }) => (Object.assign(Object.assign({ currentVersion: 10.51, id,
  name, geometryType: _feature_layer_69305a85_js__WEBPACK_IMPORTED_MODULE_7__.g[type], type: "Feature Layer", displayField: "", description: "", copyrightText: "", defaultVisibility: true, editingInfo: { lastEditDate: null }, relationships: [], isDataVersioned: false, supportsAppend: true, supportsCalculate: true, supportsTruncate: true, supportsAttachmentsByUploadId: true, supportsAttachmentsResizing: true, supportsRollbackOnFailureParameter: true, supportsStatistics: true, supportsAdvancedQueries: true, supportsValidateSql: true, supportsCoordinatesQuantization: true, supportsApplyEditsWithGlobalIds: false, supportsMultiScaleGeometry: !portal.isPortal, hasGeometryProperties: true, geometryProperties: {
    shapeLengthFieldName: "Shape__Length",
    units: "esriMeters"
  }, advancedQueryCapabilities: {
    supportsPagination: true,
    supportsPaginationOnAggregatedQueries: true,
    supportsQueryRelatedPagination: true,
    supportsQueryWithDistance: true,
    supportsReturningQueryExtent: true,
    supportsStatistics: true,
    supportsOrderBy: true,
    supportsDistinct: true,
    supportsQueryWithResultType: true,
    supportsSqlExpression: true,
    supportsAdvancedQueryRelated: true,
    supportsCountDistinct: true,
    supportsLod: true,
    supportsReturningGeometryCentroid: false,
    supportsReturningGeometryProperties: true,
    supportsQueryWithDatumTransformation: true,
    supportsHavingClause: true,
    supportsOutFieldSQLExpression: true
  }, useStandardizedQueries: true, minScale: 0, maxScale: 0, extent: {
    xmin: -17811118.526923772,
    ymin: -15538711.096309224,
    xmax: 17811118.526923772,
    ymax: 15538711.096309224,
    spatialReference: { wkid: 102100, latestWkid: 3857 }
  }, drawingInfo: Object.assign({ renderer: _feature_layer_69305a85_js__WEBPACK_IMPORTED_MODULE_7__.r[type] }, (type === "point" ? {} : { transparency: 0, labelingInfo: null })), allowGeometryUpdates: true, hasAttachments: true, htmlPopupType: "esriServerHTMLPopupTypeNone", hasMetadata: true, hasM: enableMDefaults, hasZ: enableZDefaults, objectIdField: "OBJECTID", uniqueIdField: {
    name: "OBJECTID",
    isSystemMaintained: true
  }, fields: [
    {
      name: "OBJECTID",
      type: "esriFieldTypeOID",
      alias: "OBJECTID",
      sqlType: "sqlTypeOther",
      nullable: false,
      editable: false,
      domain: null,
      defaultValue: null
    },
    ...(captureGPS ? getCaptureGPSFieldForGeometryType(type) : [])
  ], capabilities: "Query,Editing,Create,Update,Delete,Sync", maxRecordCount: 2000, supportedQueryFormats: "JSON, geoJSON, PBF", indexes: [], types: [], templates: getTemplateFromType(type), globalIdField: "", hasStaticData: false }, (enableZDefaults ? { enableZDefaults: true } : {})), (enableMDefaults ? { enableMDefaults: true } : {})));
const getTableProperties = ({ name, id }) => ({
  currentVersion: 10.7,
  id,
  name,
  type: "Table",
  displayField: "",
  description: "",
  copyrightText: "",
  defaultVisibility: true,
  editingInfo: {
    lastEditDate: null
  },
  relationships: [],
  isDataVersioned: false,
  supportsAppend: true,
  supportsCalculate: true,
  supportsASyncCalculate: true,
  supportsTruncate: true,
  supportsAttachmentsByUploadId: true,
  supportsAttachmentsResizing: true,
  supportsRollbackOnFailureParameter: true,
  supportsStatistics: true,
  supportsExceedsLimitStatistics: true,
  supportsAdvancedQueries: true,
  supportsValidateSql: true,
  supportsCoordinatesQuantization: true,
  supportsFieldDescriptionProperty: true,
  supportsQuantizationEditMode: true,
  supportsApplyEditsWithGlobalIds: false,
  advancedQueryCapabilities: {
    supportsPagination: true,
    supportsPaginationOnAggregatedQueries: true,
    supportsQueryRelatedPagination: true,
    supportsQueryWithDistance: true,
    supportsReturningQueryExtent: true,
    supportsStatistics: true,
    supportsOrderBy: true,
    supportsDistinct: true,
    supportsQueryWithResultType: true,
    supportsSqlExpression: true,
    supportsAdvancedQueryRelated: true,
    supportsCountDistinct: true,
    supportsPercentileStatistics: true,
    supportsLod: true,
    supportsQueryWithLodSR: false,
    supportedLodTypes: ["geohash"],
    supportsReturningGeometryCentroid: false,
    supportsQueryWithDatumTransformation: true,
    supportsHavingClause: true,
    supportsOutFieldSQLExpression: true,
    supportsMaxRecordCountFactor: true,
    supportsTopFeaturesQuery: true,
    supportsQueryWithCacheHint: true
  },
  useStandardizedQueries: true,
  allowGeometryUpdates: true,
  hasAttachments: false,
  htmlPopupType: "esriServerHTMLPopupTypeNone",
  hasM: false,
  hasZ: false,
  objectIdField: "OBJECTID",
  uniqueIdField: {
    name: "OBJECTID",
    isSystemMaintained: true
  },
  globalIdField: "",
  typeIdField: "",
  fields: [
    {
      name: "OBJECTID",
      type: "esriFieldTypeOID",
      alias: "OBJECTID",
      sqlType: "sqlTypeOther",
      nullable: false,
      editable: false,
      domain: null,
      defaultValue: null
    }
  ],
  indexes: [],
  types: [],
  templates: [],
  supportedQueryFormats: "JSON, geoJSON, PBF",
  hasStaticData: false,
  maxRecordCount: 2000,
  standardMaxRecordCount: 32000,
  tileMaxRecordCount: 8000,
  maxRecordCountFactor: 1,
  capabilities: "Query,Editing,Create,Update,Delete,Sync",
  syncEnabled: true
});
function getFullLayerInfo(id, name, type, layerPreference, portal) {
  if (type === "table") {
    // TODO: figure this out
    return getTableProperties({ id, name });
  }
  return getSharedLayerProperties({
    id,
    name,
    type: type,
    layerPreference,
    portal
  });
}
const saveNewInfoToStore = (newLayerInfos, layerPreference, portal) => {
  var _a, _b;
  const featureLayerInfo = newLayerInfos.map(({ name, type }, index) => getFullLayerInfo(index, name, type, layerPreference, portal));
  const layers = [];
  const tables = [];
  featureLayerInfo.forEach((info, index) => {
    const newInfo = Object.assign(Object.assign({}, info), { id: index });
    if (newInfo.type === "Table") {
      tables.push(newInfo);
    }
    else {
      layers.push(newInfo);
    }
  });
  _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo = Object.assign(Object.assign(Object.assign({}, _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo), layerPreference), { name: (_b = (_a = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "", layers,
    tables });
};
const getNewInfoFromStore = () => {
  const { layers = [], tables = [], enableZDefaults = false, enableMDefaults = false, captureGPS = false } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_6__.a.serviceInfo || {};
  const revertEsriGeometryLookup = {};
  Object.keys(_feature_layer_69305a85_js__WEBPACK_IMPORTED_MODULE_7__.g).forEach((geometryType) => {
    revertEsriGeometryLookup[_feature_layer_69305a85_js__WEBPACK_IMPORTED_MODULE_7__.g[geometryType]] = geometryType;
  });
  const allLayersAndTables = combineFeatureLayerInfos(layers, tables);
  const newLayerInfos = allLayersAndTables.map((item) => ({
    id: (0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_2__.g)(),
    name: item.name,
    type: item.type === "Feature Layer" ? revertEsriGeometryLookup[item.geometryType] : "table"
  }));
  return { newLayerInfos, layerPreference: { captureGPS, enableZDefaults, enableMDefaults } };
};
const combineFeatureLayerInfos = (layers, tables) => [...layers, ...tables].sort((itemA, itemB) => itemA.id - itemB.id);
const saveFeatureLayerSearchResult = (searchResult) => {
  _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_6__.a.typeKeywords = searchResult.typeKeywords;
  _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_6__.a.thumbnailURL = (0,_thumbnail_0b7adfcd_js__WEBPACK_IMPORTED_MODULE_4__.g)(_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal, searchResult);
  _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_5__.i.tags = searchResult.tags;
  _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_5__.i.snippet = searchResult.snippet || "";
};
const layerCaptureGPS = (layerInfo) => layerInfo.type === "Feature Layer" &&
  getCaptureGPSFieldForEsriGeometryType(layerInfo.geometryType).every((field) => (layerInfo.fields || []).find((layerField) => layerField.alias === field.alias) != null);
const layerUseZValues = (layerInfo) => !!layerInfo.enableZDefaults || !!layerInfo.hasZ;
const layerUseMValues = (layerInfo) => !!layerInfo.enableMDefaults || !!layerInfo.hasM;
const mergeLayerPreference = (layerInfos, layerPreference) => {
  const layers = layerInfos.map((layerInfo) => {
    const newLayer = Object.assign({}, layerInfo);
    if (layerPreference.enableZDefaults) {
      newLayer.enableZDefaults = true;
      newLayer.hasZ = true;
      if (!layerUseZValues(layerInfo)) {
        newLayer.zDefault = 0;
      }
    }
    else {
      newLayer.enableZDefaults = false;
      newLayer.hasZ = false;
      delete newLayer.zDefault;
    }
    if (layerPreference.enableMDefaults) {
      newLayer.enableMDefaults = true;
      newLayer.hasM = true;
    }
    else {
      newLayer.enableMDefaults = false;
      newLayer.hasM = false;
    }
    if (layerInfo.type === "Feature Layer") {
      const fieldList = getCaptureGPSFieldForEsriGeometryType(layerInfo.geometryType);
      if (layerPreference.captureGPS) {
        if (layerInfo.geometryType !== "esriGeometryPoint") {
          newLayer.hasAttachments = true;
        }
        if (!layerCaptureGPS(layerInfo)) {
          newLayer.fields = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.u)([...newLayer.fields, ...fieldList], (layerInfo) => layerInfo.name);
        }
      }
      else {
        newLayer.fields = newLayer.fields.filter((layerField) => !fieldList.some((field) => field.name === layerField.name));
      }
    }
    return newLayer;
  });
  return layers;
};
const getFeatureLayerIndexFromUrl = (url) => {
  var _a;
  const { index, serverType } = (_a = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_3__.p)(url)) !== null && _a !== void 0 ? _a : {};
  if (serverType !== "FeatureServer") {
    return { error: { code: "invalidFeatureLayerUrl" } };
  }
  return { result: index };
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ guid)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
function generateId(counts) {
  return counts
    .map((count) => {
    let out = "";
    for (let i = 0; i < count; i++) {
      out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return out;
  })
    .join("-");
}
const guid = () => generateId([2, 1, 1, 1, 3]);




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/thumbnail-0b7adfcd.js":
/*!***************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/thumbnail-0b7adfcd.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getDefaultThumbnail),
/* harmony export */   b: () => (/* binding */ getAdjustedThumbnail),
/* harmony export */   g: () => (/* binding */ getItemThumbnail),
/* harmony export */   i: () => (/* binding */ isBlankImage)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _query_4f7b7e4d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query-4f7b7e4d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-4f7b7e4d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




function getItemThumbnail(portal, item, restBase, noToken) {
  restBase !== null && restBase !== void 0 ? restBase : (restBase = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal));
  const token = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.h)(portal);
  const tokenParam = token && !noToken ? `token=${token}` : "";
  const itemUrl = `${restBase}content/items/${item.id}`;
  if (item.thumbnail) {
    return `${itemUrl}/info/${item.thumbnail}?w=400${token ? "&" : ""}${tokenParam}`;
  }
  else if (item.type === "Image" && !noToken) {
    return `${itemUrl}/data?${tokenParam}`;
  }
  return getDefaultThumbnail(item);
}
/** This is just like getItemThumbnail but it will use an arcgis.com base in certain portal conditions */
async function getAdjustedThumbnail(portal, item, bucket) {
  if (await (0,_query_4f7b7e4d_js__WEBPACK_IMPORTED_MODULE_2__.i)(portal, bucket)) {
    return getItemThumbnail(portal, item, "https://www.arcgis.com/sharing/rest/", true);
  }
  return getItemThumbnail(portal, item);
}
function getDefaultThumbnail(item) {
  var _a;
  const fileName = ((_a = item.type) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== "notebook" ? "default_thumb.png" : "notebook-thumb.png";
  return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-item-browser-card-thumbnail/${fileName}`);
}
/**
 * Checks if the given image is blank.
 * Drawing the image on canvas, get the image data,
 * generate a hash and compare this against a known blank hash.
 */
function isBlankImage(image) {
  if (!image) {
    return true;
  }
  const canvas = document.createElement("canvas");
  const context = canvas.getContext("2d");
  canvas.height = image.naturalHeight;
  canvas.width = image.naturalWidth;
  context.fillStyle = "#ffffff";
  context.fillRect(0, 0, image.naturalWidth, image.naturalHeight);
  const blank = canvas.toDataURL("image/jpeg");
  context.drawImage(image, 0, 0);
  return blank === canvas.toDataURL("image/jpeg");
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,