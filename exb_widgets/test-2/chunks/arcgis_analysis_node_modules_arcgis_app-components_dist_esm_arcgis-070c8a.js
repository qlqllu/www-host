"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-070c8a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const addItemStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  typeKeywords: [],
  customParameters: [],
  analyzedLocationTypes: [],
  allowStoredAuth: true,
  isSecured: null,
  checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-tile-layer-select.entry.js":
/*!******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-tile-layer-select.entry.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_tile_layer_select: () => (/* binding */ ArcgisNewItemPagesTileLayerSelect)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tile-layer-90a6b901.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-90a6b901.js");
/* harmony import */ var _tile_layer_bd7e56c2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tile-layer-bd7e56c2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-bd7e56c2.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */








const arcgisNewItemPagesTileLayerSelectCss = ".tile-select{margin-top:1.25rem}.tile-select:not(:last-child){margin-bottom:2.5rem}";

const ArcgisNewItemPagesTileLayerSelect = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.newItemUpdatePage = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
    this.rasterOptions = {
      upload: { icon: "upload-to", page: "layerUpload" },
      store: { icon: "data-cloud", page: "dataStoreList" },
      existing: { icon: "layers", page: "tileLayerFromExisting" }
    };
    this.vectorOptions = {
      upload: { icon: "upload-to", page: "layerUpload" },
      store: { icon: "data-cloud", page: "dataStoreList" },
      existing: { icon: "layers", page: "tileLayerFromExisting" }
    };
    this.selectedSource = "existing";
    this.selectedLayerType = "vector";
    this.options = this.vectorOptions;
  }
  async componentWillLoad() {
    this.selectedSource = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__.a.addTileLayerOption || "upload";
    const storeTileLayerPublishType = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__.a.tileLayerPublishType;
    this.selectedLayerType =
      storeTileLayerPublishType === "3dTiles"
        ? "3dTiles"
        : storeTileLayerPublishType === "tiles"
          ? "raster"
          : "vector";
    this.i18n = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__.u.i18n.tileLayerSelect;
  }
  handleNewLayerTypeChange(newType) {
    const { rasterOptions, vectorOptions, selectedSource } = this;
    const isPortal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.isPortal;
    this.selectedLayerType = newType;
    this.options = newType === "raster" ? rasterOptions : vectorOptions;
    if (
    // ! We don't support publishing a vector tile layer from feature layer in Enterprise
    (newType === "vector" && selectedSource === "existing" && isPortal) ||
      // ! This is the only option for 3dTiles
      newType === "3dTiles") {
      this.selectedSource = "upload";
    }
  }
  handleNext() {
    const { selectedSource, selectedLayerType } = this;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__.a.addTileLayerOption = selectedSource;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__.a.tileLayerPublishType =
      selectedLayerType === "3dTiles"
        ? "3dTiles"
        : selectedLayerType === "raster"
          ? "tiles"
          : "vectorTiles";
    (0,_tile_layer_bd7e56c2_js__WEBPACK_IMPORTED_MODULE_5__.b)();
    this.newItemUpdatePage.emit(this.options[selectedSource].page);
  }
  render() {
    const { i18n, options, selectedLayerType } = this;
    const isPortal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.isPortal;
    const { helpMap, helpBase } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.config;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.layerTypeHeading, headerLink: {
        text: _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__.u.i18n.common.learnMore,
        href: `${helpBase}${helpMap["120003719"]}`
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select-group", { layout: "vertical", class: "tile-select" }, _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_4__.d
      .filter((type) => type !== "3dTiles" || _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__.u.featureFlags.tileLayer3dTiles)
      .map((layerType) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select", { checked: this.selectedLayerType === layerType, heading: i18n.layerTypeOptions[layerType].title, description: i18n.layerTypeOptions[layerType].description, name: "tile-layer-type", "input-enabled": true, width: "full", type: "radio", value: layerType, onCalciteTileSelectChange: (e) => {
        const newType = e.target.value;
        this.handleNewLayerTypeChange(newType);
      } })))), selectedLayerType !== "3dTiles" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.sourceHeading }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select-group", { layout: "vertical", class: "tile-select" }, Object.keys(options)
      .filter((option) => isPortal
      ? option !== "existing" || selectedLayerType === "raster"
      : option !== "store")
      .map((key, index) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select", { key: `${key}-${index}`, checked: this.selectedSource === key, heading: i18n.sourceOptions[key][key === "upload" && selectedLayerType === "raster" ? "titleRaster" : "title"], description: i18n.sourceOptions[key][key === "upload" && selectedLayerType === "raster"
        ? "rasterDescription"
        : "description"], name: "tile-layer-create-mode", "input-enabled": true, width: "full", type: "radio", value: key, onCalciteTileSelectChange: (e) => {
        this.selectedSource = e.target.value;
      } }))))))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemPagesTileLayerSelect.style = arcgisNewItemPagesTileLayerSelectCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const configStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  portal: null,
  user: null,
  api: 4,
  scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-90a6b901.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-90a6b901.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DEFAULT_TILE_LAYER_3D_TILES_LAYER_TYPE),
/* harmony export */   T: () => (/* binding */ TILE_LAYER_SCALE_MIN),
/* harmony export */   a: () => (/* binding */ presetRasterTileCacheInfo),
/* harmony export */   b: () => (/* binding */ presetVectorTileImageInfo),
/* harmony export */   c: () => (/* binding */ presetRasterTileImageInfo),
/* harmony export */   d: () => (/* binding */ tileLayerTypes),
/* harmony export */   e: () => (/* binding */ TILE_LAYER_SCALE_MAX),
/* harmony export */   f: () => (/* binding */ tileLayerBasemaps),
/* harmony export */   g: () => (/* binding */ presetLods),
/* harmony export */   p: () => (/* binding */ presetVectorTileCacheInfo),
/* harmony export */   t: () => (/* binding */ tilesLayer3dTilesLayerTypes)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const tileLayerBasemaps = ["standard", "custom"];
const tilesLayer3dTilesLayerTypes = ["IntegratedMesh", "3DObject"];
const DEFAULT_TILE_LAYER_3D_TILES_LAYER_TYPE = tilesLayer3dTilesLayerTypes[0];
const tileLayerTypes = ["vector", "raster", "3dTiles"];
// TODO: switch this back once the SettingTileLayer supports this number
// export const TILE_LAYER_SCALE_MIN = 591657527.591555;
const TILE_LAYER_SCALE_MIN = 147914382;
const TILE_LAYER_SCALE_MAX = 0;
const presetLods = [
  { level: 0, label: "1:591,657,528", scale: 591657527.591555 },
  { level: 1, label: "1:295,828,764", scale: 295828763.795777 },
  { level: 2, label: "1:147,914,382", scale: 147914381.897889 },
  { level: 3, label: "1:73,957,191", scale: 73957190.948944 },
  { level: 4, label: "1:36,978,595", scale: 36978595.474472 },
  { level: 5, label: "1:18,489,298", scale: 18489297.737236 },
  { level: 6, label: "1:9,244,649", scale: 9244648.868618 },
  { level: 7, label: "1:4,622,324", scale: 4622324.434309 },
  { level: 8, label: "1:2,311,162", scale: 2311162.217155 },
  { level: 9, label: "1:1,155,581", scale: 1155581.108577 },
  { level: 10, label: "1:577,791", scale: 577790.554289 },
  { level: 11, label: "1:288,895", scale: 288895.277144 },
  { level: 12, label: "1:144,448", scale: 144447.638572 },
  { level: 13, label: "1:72,224", scale: 72223.819286 },
  { level: 14, label: "1:36,112", scale: 36111.909643 },
  { level: 15, label: "1:18,056", scale: 18055.954822 },
  { level: 16, label: "1:9,028", scale: 9027.977411 },
  { level: 17, label: "1:4,514", scale: 4513.988705 },
  { level: 18, label: "1:2,257", scale: 2256.994353 },
  { level: 19, label: "1:1,128", scale: 1128.497176 },
  { level: 20, label: "1:564", scale: 564.248588 },
  { level: 21, label: "1:282", scale: 282.124294 },
  { level: 22, label: "1:141", scale: 141.062147 }
];
const presetRasterTileCacheInfo = {
  spatialReference: { wkid: 102100, latestWkid: 3857 },
  origin: { x: -20037508.342787, y: 20037508.342787 },
  rows: 256,
  cols: 256,
  dpi: 96,
  preciseDpi: 96,
  lods: [
    { level: 0, resolution: 156543.033928, scale: 591657527.591555 },
    { level: 1, resolution: 78271.5169639999, scale: 295828763.795777 },
    { level: 2, resolution: 39135.7584820001, scale: 147914381.897889 },
    { level: 3, resolution: 19567.8792409999, scale: 73957190.948944 },
    { level: 4, resolution: 9783.93962049996, scale: 36978595.474472 },
    { level: 5, resolution: 4891.96981024998, scale: 18489297.737236 },
    { level: 6, resolution: 2445.98490512499, scale: 9244648.868618 },
    { level: 7, resolution: 1222.99245256249, scale: 4622324.434309 },
    { level: 8, resolution: 611.49622628138, scale: 2311162.217155 },
    { level: 9, resolution: 305.748113140558, scale: 1155581.108577 },
    { level: 10, resolution: 152.874056570411, scale: 577790.554289 },
    { level: 11, resolution: 76.4370282850732, scale: 288895.277144 },
    { level: 12, resolution: 38.2185141425366, scale: 144447.638572 },
    { level: 13, resolution: 19.1092570712683, scale: 72223.819286 },
    { level: 14, resolution: 9.55462853563415, scale: 36111.909643 },
    { level: 15, resolution: 4.77731426794937, scale: 18055.954822 },
    { level: 16, resolution: 2.38865713397468, scale: 9027.977411 },
    { level: 17, resolution: 1.19432856685505, scale: 4513.988705 },
    { level: 18, resolution: 0.597164283559817, scale: 2256.994353 },
    { level: 19, resolution: 0.298582141647617, scale: 1128.497176 },
    { level: 20, resolution: 0.14929107082380833, scale: 564.248588 },
    { level: 21, resolution: 0.07464553541190416, scale: 282.124294 },
    { level: 22, resolution: 0.03732276770595208, scale: 141.062147 }
  ]
};
const presetVectorTileCacheInfo = {
  spatialReference: {
    wkid: 102100,
    latestWkid: 3857
  },
  origin: {
    x: -2.0037508342787e7,
    y: 2.0037508342787e7
  },
  rows: 512,
  cols: 512,
  dpi: 96,
  preciseDpi: 96,
  lods: [
    { level: 0, resolution: 78271.51696399994, scale: 2.95828763795777e8 },
    { level: 1, resolution: 39135.75848200009, scale: 1.47914381897889e8 },
    { level: 2, resolution: 19567.87924099992, scale: 7.3957190948944e7 },
    { level: 3, resolution: 9783.93962049996, scale: 3.6978595474472e7 },
    { level: 4, resolution: 4891.96981024998, scale: 1.8489297737236e7 },
    { level: 5, resolution: 2445.98490512499, scale: 9244648.868618 },
    { level: 6, resolution: 1222.992452562495, scale: 4622324.434309 },
    { level: 7, resolution: 611.4962262813797, scale: 2311162.217155 },
    { level: 8, resolution: 305.74811314055756, scale: 1155581.108577 },
    { level: 9, resolution: 152.87405657041106, scale: 577790.554289 },
    { level: 10, resolution: 76.43702828507324, scale: 288895.277144 },
    { level: 11, resolution: 38.21851414253662, scale: 144447.638572 },
    { level: 12, resolution: 19.10925707126831, scale: 72223.819286 },
    { level: 13, resolution: 9.554628535634155, scale: 36111.909643 },
    { level: 14, resolution: 4.77731426794937, scale: 18055.954822 },
    { level: 15, resolution: 2.388657133974685, scale: 9027.977411 },
    { level: 16, resolution: 1.1943285668550503, scale: 4513.988705 },
    { level: 17, resolution: 0.5971642835598172, scale: 2256.994353 },
    { level: 18, resolution: 0.29858214164761665, scale: 1128.497176 },
    { level: 19, resolution: 0.14929107082380833, scale: 564.248588 },
    { level: 20, resolution: 0.07464553541190416, scale: 282.124294 },
    { level: 21, resolution: 0.03732276770595208, scale: 141.062147 },
    { level: 22, resolution: 0.01866138385297604, scale: 70.5310735 },
    { level: 23, resolution: 0.0093306919293428040466217365, scale: 35.265536760789715032412079626 }
  ]
};
const presetVectorTileImageInfo = {
  format: "indexedVector",
  compressionQuality: 0,
  antialiasing: false
};
const presetRasterTileImageInfo = {
  format: "PNG32",
  compressionQuality: 0,
  antialiasing: true
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-bd7e56c2.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-bd7e56c2.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ logTileLayerFinish),
/* harmony export */   b: () => (/* binding */ logTileLayerFromOption),
/* harmony export */   l: () => (/* binding */ logTileLayerStart)
/* harmony export */ });
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const TELEMETRY_ID = "create tile layer";
const TELEMETRY_PAGE_NAME = "my content";
const mapTileLayerOptionToTelemetry = (type) => {
  switch (type) {
    case "store":
      return "data store";
    case "existing":
      return "fs";
    case "upload":
      return "upload";
  }
};
const mapTileLayerTypeToTelemetry = (type) => {
  switch (type) {
    case "tiles":
      return "raster";
    case "vectorTiles":
      return "vector";
  }
};
const logTileLayerStart = () => {
  var _a;
  (_a = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry) === null || _a === void 0 ? void 0 : _a.startWorkflow(TELEMETRY_ID, {
    category: "create tile layer",
    pageName: "my content"
  });
};
const logTileLayerFromOption = () => {
  const telemetry = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
  telemetry === null || telemetry === void 0 ? void 0 : telemetry.stepWorkflow(TELEMETRY_ID, "from option", {
    category: TELEMETRY_ID,
    attribute: mapTileLayerOptionToTelemetry(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addTileLayerOption),
    details: mapTileLayerTypeToTelemetry(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.tileLayerPublishType),
    pageName: TELEMETRY_PAGE_NAME
  });
};
const logTileLayerFinish = () => {
  const telemetry = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
  telemetry === null || telemetry === void 0 ? void 0 : telemetry.endWorkflow(TELEMETRY_ID, {
    category: TELEMETRY_ID,
    attribute: mapTileLayerOptionToTelemetry(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addTileLayerOption),
    details: mapTileLayerTypeToTelemetry(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.tileLayerPublishType),
    pageName: TELEMETRY_PAGE_NAME
  });
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const uiStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  nextText: "next",
  workflow: "content",
  scale: "m",
  disableScroll: false,
  featureFlags: { tileLayer3dTiles: false }
});
const uiStoreState = uiStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTA3MGM4YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEOztBQUV2RCxxQkFBcUIscURBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWdHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEJoRztBQUNBO0FBQ0E7QUFDQTtBQUNpSDtBQUN6RDtBQUNHO0FBQ047QUFDVTtBQUNRO0FBQzFDOztBQUU3QiwyREFBMkQsbUJBQW1CLDhCQUE4QixxQkFBcUI7O0FBRWpJO0FBQ0E7QUFDQSxJQUFJLHFEQUFnQjtBQUNwQiw2QkFBNkIscURBQVc7QUFDeEM7QUFDQSxnQkFBZ0Isd0NBQXdDO0FBQ3hELGVBQWUsMkNBQTJDO0FBQzFELGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsZ0JBQWdCLHdDQUF3QztBQUN4RCxlQUFlLDJDQUEyQztBQUMxRCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG9EQUFZO0FBQ3RDLHNDQUFzQyxvREFBWTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsOENBQVk7QUFDNUI7QUFDQTtBQUNBLFlBQVksK0NBQStDO0FBQzNELHFCQUFxQixrREFBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQ0FBb0M7QUFDaEQsSUFBSSxvREFBWTtBQUNoQixJQUFJLG9EQUFZO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDBEQUFzQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1DQUFtQztBQUMvQyxxQkFB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LG9EQUFZO0FBQ3JEO0FBQ0EsR0FBRztBQUNIOztBQUV3Rjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyRHhGO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEOztBQUV2RCxnQkFBZ0IscURBQVc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsQ0FBQztBQUNEOztBQUUyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FkZC1pdGVtLTk3ZDU3N2E5LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FyY2dpcy1uZXctaXRlbS1wYWdlcy10aWxlLWxheWVyLXNlbGVjdC5lbnRyeS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9jb25maWctZWI1ZjdkYzIuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vaW5kZXgtODFkNTQ4YjcuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vdGlsZS1sYXllci05MGE2YjkwMS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS90aWxlLWxheWVyLWJkN2U1NmMyLmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL3VpLWVjZjg2YmJhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVTdG9yZSB9IGZyb20gJy4vaW5kZXgtODFkNTQ4YjcuanMnO1xuXG5jb25zdCBhZGRJdGVtU3RvcmUgPSBjcmVhdGVTdG9yZSh7XG4gIHR5cGVLZXl3b3JkczogW10sXG4gIGN1c3RvbVBhcmFtZXRlcnM6IFtdLFxuICBhbmFseXplZExvY2F0aW9uVHlwZXM6IFtdLFxuICBhbGxvd1N0b3JlZEF1dGg6IHRydWUsXG4gIGlzU2VjdXJlZDogbnVsbCxcbiAgY2hlY2tBdXRoOiBmYWxzZVxufSk7XG4vLyBFbnRpcmUgYWRkIGl0ZW0gc3RhdGUgb2JqZWN0XG5jb25zdCBhZGRJdGVtU3RhdGUgPSBhZGRJdGVtU3RvcmUuc3RhdGU7XG4vLyBTdWJzZXRzIG9mIGFkZCBpdGVtIHN0YXRlXG5jb25zdCBhZGRJdGVtUmVxdWVzdFN0YXRlID0gYWRkSXRlbVN0b3JlLnN0YXRlO1xuY29uc3QgYWRkSXRlbVVybFN0YXRlID0gYWRkSXRlbVN0b3JlLnN0YXRlO1xuXG5leHBvcnQgeyBhZGRJdGVtU3RhdGUgYXMgYSwgYWRkSXRlbVVybFN0YXRlIGFzIGIsIGFkZEl0ZW1SZXF1ZXN0U3RhdGUgYXMgYywgYWRkSXRlbVN0b3JlIGFzIGQgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBjIGFzIGNyZWF0ZUV2ZW50LCBoLCBGIGFzIEZyYWdtZW50LCBkIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LTkyZWJiMzk2LmpzJztcbmltcG9ydCB7IGMgYXMgY29uZmlnU3RhdGUgfSBmcm9tICcuL2NvbmZpZy1lYjVmN2RjMi5qcyc7XG5pbXBvcnQgeyBhIGFzIGFkZEl0ZW1TdGF0ZSB9IGZyb20gJy4vYWRkLWl0ZW0tOTdkNTc3YTkuanMnO1xuaW1wb3J0IHsgdSBhcyB1aVN0b3JlU3RhdGUgfSBmcm9tICcuL3VpLWVjZjg2YmJhLmpzJztcbmltcG9ydCB7IGQgYXMgdGlsZUxheWVyVHlwZXMgfSBmcm9tICcuL3RpbGUtbGF5ZXItOTBhNmI5MDEuanMnO1xuaW1wb3J0IHsgYiBhcyBsb2dUaWxlTGF5ZXJGcm9tT3B0aW9uIH0gZnJvbSAnLi90aWxlLWxheWVyLWJkN2U1NmMyLmpzJztcbmltcG9ydCAnLi9pbmRleC04MWQ1NDhiNy5qcyc7XG5cbmNvbnN0IGFyY2dpc05ld0l0ZW1QYWdlc1RpbGVMYXllclNlbGVjdENzcyA9IFwiLnRpbGUtc2VsZWN0e21hcmdpbi10b3A6MS4yNXJlbX0udGlsZS1zZWxlY3Q6bm90KDpsYXN0LWNoaWxkKXttYXJnaW4tYm90dG9tOjIuNXJlbX1cIjtcblxuY29uc3QgQXJjZ2lzTmV3SXRlbVBhZ2VzVGlsZUxheWVyU2VsZWN0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLm5ld0l0ZW1VcGRhdGVQYWdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJuZXdJdGVtVXBkYXRlUGFnZVwiLCA3KTtcbiAgICB0aGlzLnJhc3Rlck9wdGlvbnMgPSB7XG4gICAgICB1cGxvYWQ6IHsgaWNvbjogXCJ1cGxvYWQtdG9cIiwgcGFnZTogXCJsYXllclVwbG9hZFwiIH0sXG4gICAgICBzdG9yZTogeyBpY29uOiBcImRhdGEtY2xvdWRcIiwgcGFnZTogXCJkYXRhU3RvcmVMaXN0XCIgfSxcbiAgICAgIGV4aXN0aW5nOiB7IGljb246IFwibGF5ZXJzXCIsIHBhZ2U6IFwidGlsZUxheWVyRnJvbUV4aXN0aW5nXCIgfVxuICAgIH07XG4gICAgdGhpcy52ZWN0b3JPcHRpb25zID0ge1xuICAgICAgdXBsb2FkOiB7IGljb246IFwidXBsb2FkLXRvXCIsIHBhZ2U6IFwibGF5ZXJVcGxvYWRcIiB9LFxuICAgICAgc3RvcmU6IHsgaWNvbjogXCJkYXRhLWNsb3VkXCIsIHBhZ2U6IFwiZGF0YVN0b3JlTGlzdFwiIH0sXG4gICAgICBleGlzdGluZzogeyBpY29uOiBcImxheWVyc1wiLCBwYWdlOiBcInRpbGVMYXllckZyb21FeGlzdGluZ1wiIH1cbiAgICB9O1xuICAgIHRoaXMuc2VsZWN0ZWRTb3VyY2UgPSBcImV4aXN0aW5nXCI7XG4gICAgdGhpcy5zZWxlY3RlZExheWVyVHlwZSA9IFwidmVjdG9yXCI7XG4gICAgdGhpcy5vcHRpb25zID0gdGhpcy52ZWN0b3JPcHRpb25zO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMuc2VsZWN0ZWRTb3VyY2UgPSBhZGRJdGVtU3RhdGUuYWRkVGlsZUxheWVyT3B0aW9uIHx8IFwidXBsb2FkXCI7XG4gICAgY29uc3Qgc3RvcmVUaWxlTGF5ZXJQdWJsaXNoVHlwZSA9IGFkZEl0ZW1TdGF0ZS50aWxlTGF5ZXJQdWJsaXNoVHlwZTtcbiAgICB0aGlzLnNlbGVjdGVkTGF5ZXJUeXBlID1cbiAgICAgIHN0b3JlVGlsZUxheWVyUHVibGlzaFR5cGUgPT09IFwiM2RUaWxlc1wiXG4gICAgICAgID8gXCIzZFRpbGVzXCJcbiAgICAgICAgOiBzdG9yZVRpbGVMYXllclB1Ymxpc2hUeXBlID09PSBcInRpbGVzXCJcbiAgICAgICAgICA/IFwicmFzdGVyXCJcbiAgICAgICAgICA6IFwidmVjdG9yXCI7XG4gICAgdGhpcy5pMThuID0gdWlTdG9yZVN0YXRlLmkxOG4udGlsZUxheWVyU2VsZWN0O1xuICB9XG4gIGhhbmRsZU5ld0xheWVyVHlwZUNoYW5nZShuZXdUeXBlKSB7XG4gICAgY29uc3QgeyByYXN0ZXJPcHRpb25zLCB2ZWN0b3JPcHRpb25zLCBzZWxlY3RlZFNvdXJjZSB9ID0gdGhpcztcbiAgICBjb25zdCBpc1BvcnRhbCA9IGNvbmZpZ1N0YXRlLnBvcnRhbC5pc1BvcnRhbDtcbiAgICB0aGlzLnNlbGVjdGVkTGF5ZXJUeXBlID0gbmV3VHlwZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBuZXdUeXBlID09PSBcInJhc3RlclwiID8gcmFzdGVyT3B0aW9ucyA6IHZlY3Rvck9wdGlvbnM7XG4gICAgaWYgKFxuICAgIC8vICEgV2UgZG9uJ3Qgc3VwcG9ydCBwdWJsaXNoaW5nIGEgdmVjdG9yIHRpbGUgbGF5ZXIgZnJvbSBmZWF0dXJlIGxheWVyIGluIEVudGVycHJpc2VcbiAgICAobmV3VHlwZSA9PT0gXCJ2ZWN0b3JcIiAmJiBzZWxlY3RlZFNvdXJjZSA9PT0gXCJleGlzdGluZ1wiICYmIGlzUG9ydGFsKSB8fFxuICAgICAgLy8gISBUaGlzIGlzIHRoZSBvbmx5IG9wdGlvbiBmb3IgM2RUaWxlc1xuICAgICAgbmV3VHlwZSA9PT0gXCIzZFRpbGVzXCIpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRTb3VyY2UgPSBcInVwbG9hZFwiO1xuICAgIH1cbiAgfVxuICBoYW5kbGVOZXh0KCkge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWRTb3VyY2UsIHNlbGVjdGVkTGF5ZXJUeXBlIH0gPSB0aGlzO1xuICAgIGFkZEl0ZW1TdGF0ZS5hZGRUaWxlTGF5ZXJPcHRpb24gPSBzZWxlY3RlZFNvdXJjZTtcbiAgICBhZGRJdGVtU3RhdGUudGlsZUxheWVyUHVibGlzaFR5cGUgPVxuICAgICAgc2VsZWN0ZWRMYXllclR5cGUgPT09IFwiM2RUaWxlc1wiXG4gICAgICAgID8gXCIzZFRpbGVzXCJcbiAgICAgICAgOiBzZWxlY3RlZExheWVyVHlwZSA9PT0gXCJyYXN0ZXJcIlxuICAgICAgICAgID8gXCJ0aWxlc1wiXG4gICAgICAgICAgOiBcInZlY3RvclRpbGVzXCI7XG4gICAgbG9nVGlsZUxheWVyRnJvbU9wdGlvbigpO1xuICAgIHRoaXMubmV3SXRlbVVwZGF0ZVBhZ2UuZW1pdCh0aGlzLm9wdGlvbnNbc2VsZWN0ZWRTb3VyY2VdLnBhZ2UpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGkxOG4sIG9wdGlvbnMsIHNlbGVjdGVkTGF5ZXJUeXBlIH0gPSB0aGlzO1xuICAgIGNvbnN0IGlzUG9ydGFsID0gY29uZmlnU3RhdGUucG9ydGFsLmlzUG9ydGFsO1xuICAgIGNvbnN0IHsgaGVscE1hcCwgaGVscEJhc2UgfSA9IGNvbmZpZ1N0YXRlLmNvbmZpZztcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgbnVsbCwgaChcImFyY2dpcy1uZXctaXRlbS1kZXNjcmlwdGlvblwiLCB7IGhlYWRlcjogaTE4bi5sYXllclR5cGVIZWFkaW5nLCBoZWFkZXJMaW5rOiB7XG4gICAgICAgIHRleHQ6IHVpU3RvcmVTdGF0ZS5pMThuLmNvbW1vbi5sZWFybk1vcmUsXG4gICAgICAgIGhyZWY6IGAke2hlbHBCYXNlfSR7aGVscE1hcFtcIjEyMDAwMzcxOVwiXX1gXG4gICAgICB9IH0pLCBoKFwiY2FsY2l0ZS10aWxlLXNlbGVjdC1ncm91cFwiLCB7IGxheW91dDogXCJ2ZXJ0aWNhbFwiLCBjbGFzczogXCJ0aWxlLXNlbGVjdFwiIH0sIHRpbGVMYXllclR5cGVzXG4gICAgICAuZmlsdGVyKCh0eXBlKSA9PiB0eXBlICE9PSBcIjNkVGlsZXNcIiB8fCB1aVN0b3JlU3RhdGUuZmVhdHVyZUZsYWdzLnRpbGVMYXllcjNkVGlsZXMpXG4gICAgICAubWFwKChsYXllclR5cGUpID0+IChoKFwiY2FsY2l0ZS10aWxlLXNlbGVjdFwiLCB7IGNoZWNrZWQ6IHRoaXMuc2VsZWN0ZWRMYXllclR5cGUgPT09IGxheWVyVHlwZSwgaGVhZGluZzogaTE4bi5sYXllclR5cGVPcHRpb25zW2xheWVyVHlwZV0udGl0bGUsIGRlc2NyaXB0aW9uOiBpMThuLmxheWVyVHlwZU9wdGlvbnNbbGF5ZXJUeXBlXS5kZXNjcmlwdGlvbiwgbmFtZTogXCJ0aWxlLWxheWVyLXR5cGVcIiwgXCJpbnB1dC1lbmFibGVkXCI6IHRydWUsIHdpZHRoOiBcImZ1bGxcIiwgdHlwZTogXCJyYWRpb1wiLCB2YWx1ZTogbGF5ZXJUeXBlLCBvbkNhbGNpdGVUaWxlU2VsZWN0Q2hhbmdlOiAoZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUeXBlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgIHRoaXMuaGFuZGxlTmV3TGF5ZXJUeXBlQ2hhbmdlKG5ld1R5cGUpO1xuICAgICAgfSB9KSkpKSwgc2VsZWN0ZWRMYXllclR5cGUgIT09IFwiM2RUaWxlc1wiICYmIChoKEZyYWdtZW50LCBudWxsLCBoKFwiYXJjZ2lzLW5ldy1pdGVtLWRlc2NyaXB0aW9uXCIsIHsgaGVhZGVyOiBpMThuLnNvdXJjZUhlYWRpbmcgfSksIGgoXCJjYWxjaXRlLXRpbGUtc2VsZWN0LWdyb3VwXCIsIHsgbGF5b3V0OiBcInZlcnRpY2FsXCIsIGNsYXNzOiBcInRpbGUtc2VsZWN0XCIgfSwgT2JqZWN0LmtleXMob3B0aW9ucylcbiAgICAgIC5maWx0ZXIoKG9wdGlvbikgPT4gaXNQb3J0YWxcbiAgICAgID8gb3B0aW9uICE9PSBcImV4aXN0aW5nXCIgfHwgc2VsZWN0ZWRMYXllclR5cGUgPT09IFwicmFzdGVyXCJcbiAgICAgIDogb3B0aW9uICE9PSBcInN0b3JlXCIpXG4gICAgICAubWFwKChrZXksIGluZGV4KSA9PiAoaChcImNhbGNpdGUtdGlsZS1zZWxlY3RcIiwgeyBrZXk6IGAke2tleX0tJHtpbmRleH1gLCBjaGVja2VkOiB0aGlzLnNlbGVjdGVkU291cmNlID09PSBrZXksIGhlYWRpbmc6IGkxOG4uc291cmNlT3B0aW9uc1trZXldW2tleSA9PT0gXCJ1cGxvYWRcIiAmJiBzZWxlY3RlZExheWVyVHlwZSA9PT0gXCJyYXN0ZXJcIiA/IFwidGl0bGVSYXN0ZXJcIiA6IFwidGl0bGVcIl0sIGRlc2NyaXB0aW9uOiBpMThuLnNvdXJjZU9wdGlvbnNba2V5XVtrZXkgPT09IFwidXBsb2FkXCIgJiYgc2VsZWN0ZWRMYXllclR5cGUgPT09IFwicmFzdGVyXCJcbiAgICAgICAgPyBcInJhc3RlckRlc2NyaXB0aW9uXCJcbiAgICAgICAgOiBcImRlc2NyaXB0aW9uXCJdLCBuYW1lOiBcInRpbGUtbGF5ZXItY3JlYXRlLW1vZGVcIiwgXCJpbnB1dC1lbmFibGVkXCI6IHRydWUsIHdpZHRoOiBcImZ1bGxcIiwgdHlwZTogXCJyYWRpb1wiLCB2YWx1ZToga2V5LCBvbkNhbGNpdGVUaWxlU2VsZWN0Q2hhbmdlOiAoZSkgPT4ge1xuICAgICAgICB0aGlzLnNlbGVjdGVkU291cmNlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICB9IH0pKSkpKSkpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzTmV3SXRlbVBhZ2VzVGlsZUxheWVyU2VsZWN0LnN0eWxlID0gYXJjZ2lzTmV3SXRlbVBhZ2VzVGlsZUxheWVyU2VsZWN0Q3NzO1xuXG5leHBvcnQgeyBBcmNnaXNOZXdJdGVtUGFnZXNUaWxlTGF5ZXJTZWxlY3QgYXMgYXJjZ2lzX25ld19pdGVtX3BhZ2VzX3RpbGVfbGF5ZXJfc2VsZWN0IH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGMgYXMgY3JlYXRlU3RvcmUgfSBmcm9tICcuL2luZGV4LTgxZDU0OGI3LmpzJztcblxuY29uc3QgY29uZmlnU3RvcmUgPSBjcmVhdGVTdG9yZSh7XG4gIHBvcnRhbDogbnVsbCxcbiAgdXNlcjogbnVsbCxcbiAgYXBpOiA0LFxuICBzY2FsZTogXCJtXCJcbn0pO1xuY29uc3QgY29uZmlnU3RhdGUgPSBjb25maWdTdG9yZS5zdGF0ZTtcbmNvbnN0IG9uQ29uZmlnQ2hhbmdlID0gY29uZmlnU3RvcmUub25DaGFuZ2U7XG5cbmV4cG9ydCB7IGNvbmZpZ1N0YXRlIGFzIGMsIG9uQ29uZmlnQ2hhbmdlIGFzIG8gfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgZyBhcyBnZXRSZW5kZXJpbmdSZWYsIGYgYXMgZm9yY2VVcGRhdGUgfSBmcm9tICcuL2luZGV4LTkyZWJiMzk2LmpzJztcblxuY29uc3QgYXBwZW5kVG9NYXAgPSAobWFwLCBwcm9wTmFtZSwgdmFsdWUpID0+IHtcbiAgICBjb25zdCBpdGVtcyA9IG1hcC5nZXQocHJvcE5hbWUpO1xuICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgbWFwLnNldChwcm9wTmFtZSwgW3ZhbHVlXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpdGVtcy5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgfVxufTtcbmNvbnN0IGRlYm91bmNlID0gKGZuLCBtcykgPT4ge1xuICAgIGxldCB0aW1lb3V0SWQ7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGltZW91dElkID0gMDtcbiAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgICB9LCBtcyk7XG4gICAgfTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBwb3NzaWJsZSBlbGVtZW50IGlzQ29ubmVjdGVkLlxuICogVGhlIHByb3BlcnR5IG1pZ2h0IG5vdCBiZSB0aGVyZSwgc28gd2UgY2hlY2sgZm9yIGl0LlxuICpcbiAqIFdlIHdhbnQgaXQgdG8gcmV0dXJuIHRydWUgaWYgaXNDb25uZWN0ZWQgaXMgbm90IGEgcHJvcGVydHksXG4gKiBvdGhlcndpc2Ugd2Ugd291bGQgcmVtb3ZlIHRoZXNlIGVsZW1lbnRzIGFuZCB3b3VsZCBub3QgdXBkYXRlLlxuICpcbiAqIEJldHRlciBsZWFrIGluIEVkZ2UgdGhhbiB0byBiZSB1c2VsZXNzLlxuICovXG5jb25zdCBpc0Nvbm5lY3RlZCA9IChtYXliZUVsZW1lbnQpID0+ICEoJ2lzQ29ubmVjdGVkJyBpbiBtYXliZUVsZW1lbnQpIHx8IG1heWJlRWxlbWVudC5pc0Nvbm5lY3RlZDtcbmNvbnN0IGNsZWFudXBFbGVtZW50cyA9IGRlYm91bmNlKChtYXApID0+IHtcbiAgICBmb3IgKGxldCBrZXkgb2YgbWFwLmtleXMoKSkge1xuICAgICAgICBtYXAuc2V0KGtleSwgbWFwLmdldChrZXkpLmZpbHRlcihpc0Nvbm5lY3RlZCkpO1xuICAgIH1cbn0sIDIwMDApO1xuY29uc3Qgc3RlbmNpbFN1YnNjcmlwdGlvbiA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIGdldFJlbmRlcmluZ1JlZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgbm90IGluIGEgc3RlbmNpbCBwcm9qZWN0LCB3ZSBkbyBub3RoaW5nLlxuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIG5vdCByZWFsbHkgZXhwb3J0ZWQgYnkgQHN0ZW5jaWwvY29yZS5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBlbG1zVG9VcGRhdGUgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogKCkgPT4gZWxtc1RvVXBkYXRlLmNsZWFyKCksXG4gICAgICAgIGdldDogKHByb3BOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbG0gPSBnZXRSZW5kZXJpbmdSZWYoKTtcbiAgICAgICAgICAgIGlmIChlbG0pIHtcbiAgICAgICAgICAgICAgICBhcHBlbmRUb01hcChlbG1zVG9VcGRhdGUsIHByb3BOYW1lLCBlbG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IChwcm9wTmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBlbG1zVG9VcGRhdGUuZ2V0KHByb3BOYW1lKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGVsbXNUb1VwZGF0ZS5zZXQocHJvcE5hbWUsIGVsZW1lbnRzLmZpbHRlcihmb3JjZVVwZGF0ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYW51cEVsZW1lbnRzKGVsbXNUb1VwZGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICBlbG1zVG9VcGRhdGUuZm9yRWFjaCgoZWxtcykgPT4gZWxtcy5mb3JFYWNoKGZvcmNlVXBkYXRlKSk7XG4gICAgICAgICAgICBjbGVhbnVwRWxlbWVudHMoZWxtc1RvVXBkYXRlKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuY29uc3QgdW53cmFwID0gKHZhbCkgPT4gKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgPyB2YWwoKSA6IHZhbCk7XG5jb25zdCBjcmVhdGVPYnNlcnZhYmxlTWFwID0gKGRlZmF1bHRTdGF0ZSwgc2hvdWxkVXBkYXRlID0gKGEsIGIpID0+IGEgIT09IGIpID0+IHtcbiAgICBjb25zdCB1bndyYXBwZWRTdGF0ZSA9IHVud3JhcChkZWZhdWx0U3RhdGUpO1xuICAgIGxldCBzdGF0ZXMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKHVud3JhcHBlZFN0YXRlICE9PSBudWxsICYmIHVud3JhcHBlZFN0YXRlICE9PSB2b2lkIDAgPyB1bndyYXBwZWRTdGF0ZSA6IHt9KSk7XG4gICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICAgIGRpc3Bvc2U6IFtdLFxuICAgICAgICBnZXQ6IFtdLFxuICAgICAgICBzZXQ6IFtdLFxuICAgICAgICByZXNldDogW10sXG4gICAgfTtcbiAgICBjb25zdCByZXNldCA9ICgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBXaGVuIHJlc2V0dGluZyB0aGUgc3RhdGUsIHRoZSBkZWZhdWx0IHN0YXRlIG1heSBiZSBhIGZ1bmN0aW9uIC0gdW53cmFwIGl0IHRvIGludm9rZSBpdC5cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCB0aGUgc3RhdGUgd29uJ3QgYmUgcHJvcGVybHkgcmVzZXRcbiAgICAgICAgc3RhdGVzID0gbmV3IE1hcChPYmplY3QuZW50cmllcygoX2EgPSB1bndyYXAoZGVmYXVsdFN0YXRlKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKTtcbiAgICAgICAgaGFuZGxlcnMucmVzZXQuZm9yRWFjaCgoY2IpID0+IGNiKCkpO1xuICAgIH07XG4gICAgY29uc3QgZGlzcG9zZSA9ICgpID0+IHtcbiAgICAgICAgLy8gQ2FsbCBmaXJzdCBkaXNwb3NlIGFzIHJlc2V0dGluZyB0aGUgc3RhdGUgd291bGRcbiAgICAgICAgLy8gY2F1c2UgbGVzcyB1cGRhdGVzIDspXG4gICAgICAgIGhhbmRsZXJzLmRpc3Bvc2UuZm9yRWFjaCgoY2IpID0+IGNiKCkpO1xuICAgICAgICByZXNldCgpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0ID0gKHByb3BOYW1lKSA9PiB7XG4gICAgICAgIGhhbmRsZXJzLmdldC5mb3JFYWNoKChjYikgPT4gY2IocHJvcE5hbWUpKTtcbiAgICAgICAgcmV0dXJuIHN0YXRlcy5nZXQocHJvcE5hbWUpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0ID0gKHByb3BOYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHN0YXRlcy5nZXQocHJvcE5hbWUpO1xuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKHZhbHVlLCBvbGRWYWx1ZSwgcHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBzdGF0ZXMuc2V0KHByb3BOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zZXQuZm9yRWFjaCgoY2IpID0+IGNiKHByb3BOYW1lLCB2YWx1ZSwgb2xkVmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3RhdGUgPSAodHlwZW9mIFByb3h5ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IHt9XG4gICAgICAgIDogbmV3IFByb3h5KHVud3JhcHBlZFN0YXRlLCB7XG4gICAgICAgICAgICBnZXQoXywgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHByb3BOYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvd25LZXlzKF8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShzdGF0ZXMua2V5cygpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzKF8sIHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlcy5oYXMocHJvcE5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldChfLCBwcm9wTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXQocHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICBjb25zdCBvbiA9IChldmVudE5hbWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGhhbmRsZXJzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVGcm9tQXJyYXkoaGFuZGxlcnNbZXZlbnROYW1lXSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3Qgb25DaGFuZ2UgPSAocHJvcE5hbWUsIGNiKSA9PiB7XG4gICAgICAgIGNvbnN0IHVuU2V0ID0gb24oJ3NldCcsIChrZXksIG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIGNiKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gdW53cmFwIHRoZSBkZWZhdWx0U3RhdGUgYmVjYXVzZSBpdCBtaWdodCBiZSBhIGZ1bmN0aW9uLlxuICAgICAgICAvLyBPdGhlcndpc2Ugd2UgbWlnaHQgbm90IGJlIHNlbmRpbmcgdGhlIHJpZ2h0IHJlc2V0IHZhbHVlLlxuICAgICAgICBjb25zdCB1blJlc2V0ID0gb24oJ3Jlc2V0JywgKCkgPT4gY2IodW53cmFwKGRlZmF1bHRTdGF0ZSlbcHJvcE5hbWVdKSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB1blNldCgpO1xuICAgICAgICAgICAgdW5SZXNldCgpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdXNlID0gKC4uLnN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgdW5zdWJzID0gc3Vic2NyaXB0aW9ucy5yZWR1Y2UoKHVuc3Vicywgc3Vic2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnNldCkge1xuICAgICAgICAgICAgICAgIHVuc3Vicy5wdXNoKG9uKCdzZXQnLCBzdWJzY3JpcHRpb24uc2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmdldCkge1xuICAgICAgICAgICAgICAgIHVuc3Vicy5wdXNoKG9uKCdnZXQnLCBzdWJzY3JpcHRpb24uZ2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnJlc2V0KSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzLnB1c2gob24oJ3Jlc2V0Jywgc3Vic2NyaXB0aW9uLnJlc2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmRpc3Bvc2UpIHtcbiAgICAgICAgICAgICAgICB1bnN1YnMucHVzaChvbignZGlzcG9zZScsIHN1YnNjcmlwdGlvbi5kaXNwb3NlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5zdWJzO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB1bnN1YnMuZm9yRWFjaCgodW5zdWIpID0+IHVuc3ViKCkpO1xuICAgIH07XG4gICAgY29uc3QgZm9yY2VVcGRhdGUgPSAoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gc3RhdGVzLmdldChrZXkpO1xuICAgICAgICBoYW5kbGVycy5zZXQuZm9yRWFjaCgoY2IpID0+IGNiKGtleSwgb2xkVmFsdWUsIG9sZFZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgZ2V0LFxuICAgICAgICBzZXQsXG4gICAgICAgIG9uLFxuICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgdXNlLFxuICAgICAgICBkaXNwb3NlLFxuICAgICAgICByZXNldCxcbiAgICAgICAgZm9yY2VVcGRhdGUsXG4gICAgfTtcbn07XG5jb25zdCByZW1vdmVGcm9tQXJyYXkgPSAoYXJyYXksIGl0ZW0pID0+IHtcbiAgICBjb25zdCBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIGFycmF5Lmxlbmd0aC0tO1xuICAgIH1cbn07XG5cbmNvbnN0IGNyZWF0ZVN0b3JlID0gKGRlZmF1bHRTdGF0ZSwgc2hvdWxkVXBkYXRlKSA9PiB7XG4gICAgY29uc3QgbWFwID0gY3JlYXRlT2JzZXJ2YWJsZU1hcChkZWZhdWx0U3RhdGUsIHNob3VsZFVwZGF0ZSk7XG4gICAgbWFwLnVzZShzdGVuY2lsU3Vic2NyaXB0aW9uKCkpO1xuICAgIHJldHVybiBtYXA7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSBhcyBjIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmNvbnN0IHRpbGVMYXllckJhc2VtYXBzID0gW1wic3RhbmRhcmRcIiwgXCJjdXN0b21cIl07XG5jb25zdCB0aWxlc0xheWVyM2RUaWxlc0xheWVyVHlwZXMgPSBbXCJJbnRlZ3JhdGVkTWVzaFwiLCBcIjNET2JqZWN0XCJdO1xuY29uc3QgREVGQVVMVF9USUxFX0xBWUVSXzNEX1RJTEVTX0xBWUVSX1RZUEUgPSB0aWxlc0xheWVyM2RUaWxlc0xheWVyVHlwZXNbMF07XG5jb25zdCB0aWxlTGF5ZXJUeXBlcyA9IFtcInZlY3RvclwiLCBcInJhc3RlclwiLCBcIjNkVGlsZXNcIl07XG4vLyBUT0RPOiBzd2l0Y2ggdGhpcyBiYWNrIG9uY2UgdGhlIFNldHRpbmdUaWxlTGF5ZXIgc3VwcG9ydHMgdGhpcyBudW1iZXJcbi8vIGV4cG9ydCBjb25zdCBUSUxFX0xBWUVSX1NDQUxFX01JTiA9IDU5MTY1NzUyNy41OTE1NTU7XG5jb25zdCBUSUxFX0xBWUVSX1NDQUxFX01JTiA9IDE0NzkxNDM4MjtcbmNvbnN0IFRJTEVfTEFZRVJfU0NBTEVfTUFYID0gMDtcbmNvbnN0IHByZXNldExvZHMgPSBbXG4gIHsgbGV2ZWw6IDAsIGxhYmVsOiBcIjE6NTkxLDY1Nyw1MjhcIiwgc2NhbGU6IDU5MTY1NzUyNy41OTE1NTUgfSxcbiAgeyBsZXZlbDogMSwgbGFiZWw6IFwiMToyOTUsODI4LDc2NFwiLCBzY2FsZTogMjk1ODI4NzYzLjc5NTc3NyB9LFxuICB7IGxldmVsOiAyLCBsYWJlbDogXCIxOjE0Nyw5MTQsMzgyXCIsIHNjYWxlOiAxNDc5MTQzODEuODk3ODg5IH0sXG4gIHsgbGV2ZWw6IDMsIGxhYmVsOiBcIjE6NzMsOTU3LDE5MVwiLCBzY2FsZTogNzM5NTcxOTAuOTQ4OTQ0IH0sXG4gIHsgbGV2ZWw6IDQsIGxhYmVsOiBcIjE6MzYsOTc4LDU5NVwiLCBzY2FsZTogMzY5Nzg1OTUuNDc0NDcyIH0sXG4gIHsgbGV2ZWw6IDUsIGxhYmVsOiBcIjE6MTgsNDg5LDI5OFwiLCBzY2FsZTogMTg0ODkyOTcuNzM3MjM2IH0sXG4gIHsgbGV2ZWw6IDYsIGxhYmVsOiBcIjE6OSwyNDQsNjQ5XCIsIHNjYWxlOiA5MjQ0NjQ4Ljg2ODYxOCB9LFxuICB7IGxldmVsOiA3LCBsYWJlbDogXCIxOjQsNjIyLDMyNFwiLCBzY2FsZTogNDYyMjMyNC40MzQzMDkgfSxcbiAgeyBsZXZlbDogOCwgbGFiZWw6IFwiMToyLDMxMSwxNjJcIiwgc2NhbGU6IDIzMTExNjIuMjE3MTU1IH0sXG4gIHsgbGV2ZWw6IDksIGxhYmVsOiBcIjE6MSwxNTUsNTgxXCIsIHNjYWxlOiAxMTU1NTgxLjEwODU3NyB9LFxuICB7IGxldmVsOiAxMCwgbGFiZWw6IFwiMTo1NzcsNzkxXCIsIHNjYWxlOiA1Nzc3OTAuNTU0Mjg5IH0sXG4gIHsgbGV2ZWw6IDExLCBsYWJlbDogXCIxOjI4OCw4OTVcIiwgc2NhbGU6IDI4ODg5NS4yNzcxNDQgfSxcbiAgeyBsZXZlbDogMTIsIGxhYmVsOiBcIjE6MTQ0LDQ0OFwiLCBzY2FsZTogMTQ0NDQ3LjYzODU3MiB9LFxuICB7IGxldmVsOiAxMywgbGFiZWw6IFwiMTo3MiwyMjRcIiwgc2NhbGU6IDcyMjIzLjgxOTI4NiB9LFxuICB7IGxldmVsOiAxNCwgbGFiZWw6IFwiMTozNiwxMTJcIiwgc2NhbGU6IDM2MTExLjkwOTY0MyB9LFxuICB7IGxldmVsOiAxNSwgbGFiZWw6IFwiMToxOCwwNTZcIiwgc2NhbGU6IDE4MDU1Ljk1NDgyMiB9LFxuICB7IGxldmVsOiAxNiwgbGFiZWw6IFwiMTo5LDAyOFwiLCBzY2FsZTogOTAyNy45Nzc0MTEgfSxcbiAgeyBsZXZlbDogMTcsIGxhYmVsOiBcIjE6NCw1MTRcIiwgc2NhbGU6IDQ1MTMuOTg4NzA1IH0sXG4gIHsgbGV2ZWw6IDE4LCBsYWJlbDogXCIxOjIsMjU3XCIsIHNjYWxlOiAyMjU2Ljk5NDM1MyB9LFxuICB7IGxldmVsOiAxOSwgbGFiZWw6IFwiMToxLDEyOFwiLCBzY2FsZTogMTEyOC40OTcxNzYgfSxcbiAgeyBsZXZlbDogMjAsIGxhYmVsOiBcIjE6NTY0XCIsIHNjYWxlOiA1NjQuMjQ4NTg4IH0sXG4gIHsgbGV2ZWw6IDIxLCBsYWJlbDogXCIxOjI4MlwiLCBzY2FsZTogMjgyLjEyNDI5NCB9LFxuICB7IGxldmVsOiAyMiwgbGFiZWw6IFwiMToxNDFcIiwgc2NhbGU6IDE0MS4wNjIxNDcgfVxuXTtcbmNvbnN0IHByZXNldFJhc3RlclRpbGVDYWNoZUluZm8gPSB7XG4gIHNwYXRpYWxSZWZlcmVuY2U6IHsgd2tpZDogMTAyMTAwLCBsYXRlc3RXa2lkOiAzODU3IH0sXG4gIG9yaWdpbjogeyB4OiAtMjAwMzc1MDguMzQyNzg3LCB5OiAyMDAzNzUwOC4zNDI3ODcgfSxcbiAgcm93czogMjU2LFxuICBjb2xzOiAyNTYsXG4gIGRwaTogOTYsXG4gIHByZWNpc2VEcGk6IDk2LFxuICBsb2RzOiBbXG4gICAgeyBsZXZlbDogMCwgcmVzb2x1dGlvbjogMTU2NTQzLjAzMzkyOCwgc2NhbGU6IDU5MTY1NzUyNy41OTE1NTUgfSxcbiAgICB7IGxldmVsOiAxLCByZXNvbHV0aW9uOiA3ODI3MS41MTY5NjM5OTk5LCBzY2FsZTogMjk1ODI4NzYzLjc5NTc3NyB9LFxuICAgIHsgbGV2ZWw6IDIsIHJlc29sdXRpb246IDM5MTM1Ljc1ODQ4MjAwMDEsIHNjYWxlOiAxNDc5MTQzODEuODk3ODg5IH0sXG4gICAgeyBsZXZlbDogMywgcmVzb2x1dGlvbjogMTk1NjcuODc5MjQwOTk5OSwgc2NhbGU6IDczOTU3MTkwLjk0ODk0NCB9LFxuICAgIHsgbGV2ZWw6IDQsIHJlc29sdXRpb246IDk3ODMuOTM5NjIwNDk5OTYsIHNjYWxlOiAzNjk3ODU5NS40NzQ0NzIgfSxcbiAgICB7IGxldmVsOiA1LCByZXNvbHV0aW9uOiA0ODkxLjk2OTgxMDI0OTk4LCBzY2FsZTogMTg0ODkyOTcuNzM3MjM2IH0sXG4gICAgeyBsZXZlbDogNiwgcmVzb2x1dGlvbjogMjQ0NS45ODQ5MDUxMjQ5OSwgc2NhbGU6IDkyNDQ2NDguODY4NjE4IH0sXG4gICAgeyBsZXZlbDogNywgcmVzb2x1dGlvbjogMTIyMi45OTI0NTI1NjI0OSwgc2NhbGU6IDQ2MjIzMjQuNDM0MzA5IH0sXG4gICAgeyBsZXZlbDogOCwgcmVzb2x1dGlvbjogNjExLjQ5NjIyNjI4MTM4LCBzY2FsZTogMjMxMTE2Mi4yMTcxNTUgfSxcbiAgICB7IGxldmVsOiA5LCByZXNvbHV0aW9uOiAzMDUuNzQ4MTEzMTQwNTU4LCBzY2FsZTogMTE1NTU4MS4xMDg1NzcgfSxcbiAgICB7IGxldmVsOiAxMCwgcmVzb2x1dGlvbjogMTUyLjg3NDA1NjU3MDQxMSwgc2NhbGU6IDU3Nzc5MC41NTQyODkgfSxcbiAgICB7IGxldmVsOiAxMSwgcmVzb2x1dGlvbjogNzYuNDM3MDI4Mjg1MDczMiwgc2NhbGU6IDI4ODg5NS4yNzcxNDQgfSxcbiAgICB7IGxldmVsOiAxMiwgcmVzb2x1dGlvbjogMzguMjE4NTE0MTQyNTM2Niwgc2NhbGU6IDE0NDQ0Ny42Mzg1NzIgfSxcbiAgICB7IGxldmVsOiAxMywgcmVzb2x1dGlvbjogMTkuMTA5MjU3MDcxMjY4Mywgc2NhbGU6IDcyMjIzLjgxOTI4NiB9LFxuICAgIHsgbGV2ZWw6IDE0LCByZXNvbHV0aW9uOiA5LjU1NDYyODUzNTYzNDE1LCBzY2FsZTogMzYxMTEuOTA5NjQzIH0sXG4gICAgeyBsZXZlbDogMTUsIHJlc29sdXRpb246IDQuNzc3MzE0MjY3OTQ5MzcsIHNjYWxlOiAxODA1NS45NTQ4MjIgfSxcbiAgICB7IGxldmVsOiAxNiwgcmVzb2x1dGlvbjogMi4zODg2NTcxMzM5NzQ2OCwgc2NhbGU6IDkwMjcuOTc3NDExIH0sXG4gICAgeyBsZXZlbDogMTcsIHJlc29sdXRpb246IDEuMTk0MzI4NTY2ODU1MDUsIHNjYWxlOiA0NTEzLjk4ODcwNSB9LFxuICAgIHsgbGV2ZWw6IDE4LCByZXNvbHV0aW9uOiAwLjU5NzE2NDI4MzU1OTgxNywgc2NhbGU6IDIyNTYuOTk0MzUzIH0sXG4gICAgeyBsZXZlbDogMTksIHJlc29sdXRpb246IDAuMjk4NTgyMTQxNjQ3NjE3LCBzY2FsZTogMTEyOC40OTcxNzYgfSxcbiAgICB7IGxldmVsOiAyMCwgcmVzb2x1dGlvbjogMC4xNDkyOTEwNzA4MjM4MDgzMywgc2NhbGU6IDU2NC4yNDg1ODggfSxcbiAgICB7IGxldmVsOiAyMSwgcmVzb2x1dGlvbjogMC4wNzQ2NDU1MzU0MTE5MDQxNiwgc2NhbGU6IDI4Mi4xMjQyOTQgfSxcbiAgICB7IGxldmVsOiAyMiwgcmVzb2x1dGlvbjogMC4wMzczMjI3Njc3MDU5NTIwOCwgc2NhbGU6IDE0MS4wNjIxNDcgfVxuICBdXG59O1xuY29uc3QgcHJlc2V0VmVjdG9yVGlsZUNhY2hlSW5mbyA9IHtcbiAgc3BhdGlhbFJlZmVyZW5jZToge1xuICAgIHdraWQ6IDEwMjEwMCxcbiAgICBsYXRlc3RXa2lkOiAzODU3XG4gIH0sXG4gIG9yaWdpbjoge1xuICAgIHg6IC0yLjAwMzc1MDgzNDI3ODdlNyxcbiAgICB5OiAyLjAwMzc1MDgzNDI3ODdlN1xuICB9LFxuICByb3dzOiA1MTIsXG4gIGNvbHM6IDUxMixcbiAgZHBpOiA5NixcbiAgcHJlY2lzZURwaTogOTYsXG4gIGxvZHM6IFtcbiAgICB7IGxldmVsOiAwLCByZXNvbHV0aW9uOiA3ODI3MS41MTY5NjM5OTk5NCwgc2NhbGU6IDIuOTU4Mjg3NjM3OTU3NzdlOCB9LFxuICAgIHsgbGV2ZWw6IDEsIHJlc29sdXRpb246IDM5MTM1Ljc1ODQ4MjAwMDA5LCBzY2FsZTogMS40NzkxNDM4MTg5Nzg4OWU4IH0sXG4gICAgeyBsZXZlbDogMiwgcmVzb2x1dGlvbjogMTk1NjcuODc5MjQwOTk5OTIsIHNjYWxlOiA3LjM5NTcxOTA5NDg5NDRlNyB9LFxuICAgIHsgbGV2ZWw6IDMsIHJlc29sdXRpb246IDk3ODMuOTM5NjIwNDk5OTYsIHNjYWxlOiAzLjY5Nzg1OTU0NzQ0NzJlNyB9LFxuICAgIHsgbGV2ZWw6IDQsIHJlc29sdXRpb246IDQ4OTEuOTY5ODEwMjQ5OTgsIHNjYWxlOiAxLjg0ODkyOTc3MzcyMzZlNyB9LFxuICAgIHsgbGV2ZWw6IDUsIHJlc29sdXRpb246IDI0NDUuOTg0OTA1MTI0OTksIHNjYWxlOiA5MjQ0NjQ4Ljg2ODYxOCB9LFxuICAgIHsgbGV2ZWw6IDYsIHJlc29sdXRpb246IDEyMjIuOTkyNDUyNTYyNDk1LCBzY2FsZTogNDYyMjMyNC40MzQzMDkgfSxcbiAgICB7IGxldmVsOiA3LCByZXNvbHV0aW9uOiA2MTEuNDk2MjI2MjgxMzc5Nywgc2NhbGU6IDIzMTExNjIuMjE3MTU1IH0sXG4gICAgeyBsZXZlbDogOCwgcmVzb2x1dGlvbjogMzA1Ljc0ODExMzE0MDU1NzU2LCBzY2FsZTogMTE1NTU4MS4xMDg1NzcgfSxcbiAgICB7IGxldmVsOiA5LCByZXNvbHV0aW9uOiAxNTIuODc0MDU2NTcwNDExMDYsIHNjYWxlOiA1Nzc3OTAuNTU0Mjg5IH0sXG4gICAgeyBsZXZlbDogMTAsIHJlc29sdXRpb246IDc2LjQzNzAyODI4NTA3MzI0LCBzY2FsZTogMjg4ODk1LjI3NzE0NCB9LFxuICAgIHsgbGV2ZWw6IDExLCByZXNvbHV0aW9uOiAzOC4yMTg1MTQxNDI1MzY2Miwgc2NhbGU6IDE0NDQ0Ny42Mzg1NzIgfSxcbiAgICB7IGxldmVsOiAxMiwgcmVzb2x1dGlvbjogMTkuMTA5MjU3MDcxMjY4MzEsIHNjYWxlOiA3MjIyMy44MTkyODYgfSxcbiAgICB7IGxldmVsOiAxMywgcmVzb2x1dGlvbjogOS41NTQ2Mjg1MzU2MzQxNTUsIHNjYWxlOiAzNjExMS45MDk2NDMgfSxcbiAgICB7IGxldmVsOiAxNCwgcmVzb2x1dGlvbjogNC43NzczMTQyNjc5NDkzNywgc2NhbGU6IDE4MDU1Ljk1NDgyMiB9LFxuICAgIHsgbGV2ZWw6IDE1LCByZXNvbHV0aW9uOiAyLjM4ODY1NzEzMzk3NDY4NSwgc2NhbGU6IDkwMjcuOTc3NDExIH0sXG4gICAgeyBsZXZlbDogMTYsIHJlc29sdXRpb246IDEuMTk0MzI4NTY2ODU1MDUwMywgc2NhbGU6IDQ1MTMuOTg4NzA1IH0sXG4gICAgeyBsZXZlbDogMTcsIHJlc29sdXRpb246IDAuNTk3MTY0MjgzNTU5ODE3Miwgc2NhbGU6IDIyNTYuOTk0MzUzIH0sXG4gICAgeyBsZXZlbDogMTgsIHJlc29sdXRpb246IDAuMjk4NTgyMTQxNjQ3NjE2NjUsIHNjYWxlOiAxMTI4LjQ5NzE3NiB9LFxuICAgIHsgbGV2ZWw6IDE5LCByZXNvbHV0aW9uOiAwLjE0OTI5MTA3MDgyMzgwODMzLCBzY2FsZTogNTY0LjI0ODU4OCB9LFxuICAgIHsgbGV2ZWw6IDIwLCByZXNvbHV0aW9uOiAwLjA3NDY0NTUzNTQxMTkwNDE2LCBzY2FsZTogMjgyLjEyNDI5NCB9LFxuICAgIHsgbGV2ZWw6IDIxLCByZXNvbHV0aW9uOiAwLjAzNzMyMjc2NzcwNTk1MjA4LCBzY2FsZTogMTQxLjA2MjE0NyB9LFxuICAgIHsgbGV2ZWw6IDIyLCByZXNvbHV0aW9uOiAwLjAxODY2MTM4Mzg1Mjk3NjA0LCBzY2FsZTogNzAuNTMxMDczNSB9LFxuICAgIHsgbGV2ZWw6IDIzLCByZXNvbHV0aW9uOiAwLjAwOTMzMDY5MTkyOTM0MjgwNDA0NjYyMTczNjUsIHNjYWxlOiAzNS4yNjU1MzY3NjA3ODk3MTUwMzI0MTIwNzk2MjYgfVxuICBdXG59O1xuY29uc3QgcHJlc2V0VmVjdG9yVGlsZUltYWdlSW5mbyA9IHtcbiAgZm9ybWF0OiBcImluZGV4ZWRWZWN0b3JcIixcbiAgY29tcHJlc3Npb25RdWFsaXR5OiAwLFxuICBhbnRpYWxpYXNpbmc6IGZhbHNlXG59O1xuY29uc3QgcHJlc2V0UmFzdGVyVGlsZUltYWdlSW5mbyA9IHtcbiAgZm9ybWF0OiBcIlBORzMyXCIsXG4gIGNvbXByZXNzaW9uUXVhbGl0eTogMCxcbiAgYW50aWFsaWFzaW5nOiB0cnVlXG59O1xuXG5leHBvcnQgeyBERUZBVUxUX1RJTEVfTEFZRVJfM0RfVElMRVNfTEFZRVJfVFlQRSBhcyBELCBUSUxFX0xBWUVSX1NDQUxFX01JTiBhcyBULCBwcmVzZXRSYXN0ZXJUaWxlQ2FjaGVJbmZvIGFzIGEsIHByZXNldFZlY3RvclRpbGVJbWFnZUluZm8gYXMgYiwgcHJlc2V0UmFzdGVyVGlsZUltYWdlSW5mbyBhcyBjLCB0aWxlTGF5ZXJUeXBlcyBhcyBkLCBUSUxFX0xBWUVSX1NDQUxFX01BWCBhcyBlLCB0aWxlTGF5ZXJCYXNlbWFwcyBhcyBmLCBwcmVzZXRMb2RzIGFzIGcsIHByZXNldFZlY3RvclRpbGVDYWNoZUluZm8gYXMgcCwgdGlsZXNMYXllcjNkVGlsZXNMYXllclR5cGVzIGFzIHQgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgYyBhcyBjb25maWdTdGF0ZSB9IGZyb20gJy4vY29uZmlnLWViNWY3ZGMyLmpzJztcbmltcG9ydCB7IGEgYXMgYWRkSXRlbVN0YXRlIH0gZnJvbSAnLi9hZGQtaXRlbS05N2Q1NzdhOS5qcyc7XG5cbmNvbnN0IFRFTEVNRVRSWV9JRCA9IFwiY3JlYXRlIHRpbGUgbGF5ZXJcIjtcbmNvbnN0IFRFTEVNRVRSWV9QQUdFX05BTUUgPSBcIm15IGNvbnRlbnRcIjtcbmNvbnN0IG1hcFRpbGVMYXllck9wdGlvblRvVGVsZW1ldHJ5ID0gKHR5cGUpID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcInN0b3JlXCI6XG4gICAgICByZXR1cm4gXCJkYXRhIHN0b3JlXCI7XG4gICAgY2FzZSBcImV4aXN0aW5nXCI6XG4gICAgICByZXR1cm4gXCJmc1wiO1xuICAgIGNhc2UgXCJ1cGxvYWRcIjpcbiAgICAgIHJldHVybiBcInVwbG9hZFwiO1xuICB9XG59O1xuY29uc3QgbWFwVGlsZUxheWVyVHlwZVRvVGVsZW1ldHJ5ID0gKHR5cGUpID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcInRpbGVzXCI6XG4gICAgICByZXR1cm4gXCJyYXN0ZXJcIjtcbiAgICBjYXNlIFwidmVjdG9yVGlsZXNcIjpcbiAgICAgIHJldHVybiBcInZlY3RvclwiO1xuICB9XG59O1xuY29uc3QgbG9nVGlsZUxheWVyU3RhcnQgPSAoKSA9PiB7XG4gIHZhciBfYTtcbiAgKF9hID0gY29uZmlnU3RhdGUudGVsZW1ldHJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhcnRXb3JrZmxvdyhURUxFTUVUUllfSUQsIHtcbiAgICBjYXRlZ29yeTogXCJjcmVhdGUgdGlsZSBsYXllclwiLFxuICAgIHBhZ2VOYW1lOiBcIm15IGNvbnRlbnRcIlxuICB9KTtcbn07XG5jb25zdCBsb2dUaWxlTGF5ZXJGcm9tT3B0aW9uID0gKCkgPT4ge1xuICBjb25zdCB0ZWxlbWV0cnkgPSBjb25maWdTdGF0ZS50ZWxlbWV0cnk7XG4gIHRlbGVtZXRyeSA9PT0gbnVsbCB8fCB0ZWxlbWV0cnkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRlbGVtZXRyeS5zdGVwV29ya2Zsb3coVEVMRU1FVFJZX0lELCBcImZyb20gb3B0aW9uXCIsIHtcbiAgICBjYXRlZ29yeTogVEVMRU1FVFJZX0lELFxuICAgIGF0dHJpYnV0ZTogbWFwVGlsZUxheWVyT3B0aW9uVG9UZWxlbWV0cnkoYWRkSXRlbVN0YXRlLmFkZFRpbGVMYXllck9wdGlvbiksXG4gICAgZGV0YWlsczogbWFwVGlsZUxheWVyVHlwZVRvVGVsZW1ldHJ5KGFkZEl0ZW1TdGF0ZS50aWxlTGF5ZXJQdWJsaXNoVHlwZSksXG4gICAgcGFnZU5hbWU6IFRFTEVNRVRSWV9QQUdFX05BTUVcbiAgfSk7XG59O1xuY29uc3QgbG9nVGlsZUxheWVyRmluaXNoID0gKCkgPT4ge1xuICBjb25zdCB0ZWxlbWV0cnkgPSBjb25maWdTdGF0ZS50ZWxlbWV0cnk7XG4gIHRlbGVtZXRyeSA9PT0gbnVsbCB8fCB0ZWxlbWV0cnkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRlbGVtZXRyeS5lbmRXb3JrZmxvdyhURUxFTUVUUllfSUQsIHtcbiAgICBjYXRlZ29yeTogVEVMRU1FVFJZX0lELFxuICAgIGF0dHJpYnV0ZTogbWFwVGlsZUxheWVyT3B0aW9uVG9UZWxlbWV0cnkoYWRkSXRlbVN0YXRlLmFkZFRpbGVMYXllck9wdGlvbiksXG4gICAgZGV0YWlsczogbWFwVGlsZUxheWVyVHlwZVRvVGVsZW1ldHJ5KGFkZEl0ZW1TdGF0ZS50aWxlTGF5ZXJQdWJsaXNoVHlwZSksXG4gICAgcGFnZU5hbWU6IFRFTEVNRVRSWV9QQUdFX05BTUVcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBsb2dUaWxlTGF5ZXJGaW5pc2ggYXMgYSwgbG9nVGlsZUxheWVyRnJvbU9wdGlvbiBhcyBiLCBsb2dUaWxlTGF5ZXJTdGFydCBhcyBsIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGMgYXMgY3JlYXRlU3RvcmUgfSBmcm9tICcuL2luZGV4LTgxZDU0OGI3LmpzJztcblxuY29uc3QgdWlTdG9yZSA9IGNyZWF0ZVN0b3JlKHtcbiAgbmV4dFRleHQ6IFwibmV4dFwiLFxuICB3b3JrZmxvdzogXCJjb250ZW50XCIsXG4gIHNjYWxlOiBcIm1cIixcbiAgZGlzYWJsZVNjcm9sbDogZmFsc2UsXG4gIGZlYXR1cmVGbGFnczogeyB0aWxlTGF5ZXIzZFRpbGVzOiBmYWxzZSB9XG59KTtcbmNvbnN0IHVpU3RvcmVTdGF0ZSA9IHVpU3RvcmUuc3RhdGU7XG5cbmV4cG9ydCB7IHVpU3RvcmUgYXMgYSwgdWlTdG9yZVN0YXRlIGFzIHUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==