"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-79e23e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-un-ntc-pick-list_2.entry.js":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-un-ntc-pick-list_2.entry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_un_ntc_pick_list: () => (/* binding */ ArcgisUnNtcPickList),
/* harmony export */   arcgis_un_ntc_pick_list_info: () => (/* binding */ ArcgisUnNtcPickListInfo)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






var ntcLastSortBy;
(function (ntcLastSortBy) {
  ntcLastSortBy["default"] = "default";
  ntcLastSortBy["title"] = "title";
  ntcLastSortBy["type"] = "type";
  ntcLastSortBy["description"] = "description";
})(ntcLastSortBy || (ntcLastSortBy = {}));

const arcgisUnNtcPickListCss = ".popover{z-index:100}.panel{min-height:300px}.label{height:-webkit-fill-available;width:-webkit-fill-available;padding:10px}.selection-button-div{padding:4px 10px}.content{max-height:60vh}";

const ArcgisUnNtcPickList = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisNtcPickListChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisNtcPickListChange", 7);
    this.arcgisNtcPickListDismissed = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisNtcPickListDismissed", 7);
    this.arcgisNtcPickListSortByChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisNtcPickListSortByChange", 7);
    this.errorMessage = "";
    this.namedTraceConfigurationsInfo = [];
    this.calciteValueList = (ntc) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: ntc.id, label: ntc.title, description: ntc.description, value: ntc.id, selected: this.selectedNTCs.indexOf(ntc.id) > -1, metadata: {
        id: ntc.id,
        title: ntc.title
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: this.strings.info, title: this.strings.info, scale: "s", icon: "information", onClick: (event) => {
        event.stopPropagation();
        const ntcFlowItemElementInfo = document.createElement("calcite-flow-item");
        ntcFlowItemElementInfo.heading = ntc.title;
        ntcFlowItemElementInfo.description = ntc.description;
        const ntcInfo = document.createElement("arcgis-un-ntc-pick-list-info");
        ntcInfo.utilityNetwork = this.utilityNetwork;
        ntcInfo.ntcId = ntc.id;
        ntcInfo.strings = this.strings;
        ntcInfo.classList.add("content");
        ntcFlowItemElementInfo.appendChild(ntcInfo);
        this.flowElement.appendChild(ntcFlowItemElementInfo);
        ntcFlowItemElementInfo.setFocus();
      } })));
    this.filterPlaceholderText = undefined;
    this.multiple = true;
    this.popoverProps = undefined;
    this.selectedNTCs = [];
    this.showFilterLength = 10;
    this.showSort = true;
    this.sortBy = ntcLastSortBy.default;
    this.utilityNetwork = undefined;
    this.lastSortyBy = ntcLastSortBy.default;
    this.filterNTCs = null;
    this.isOpen = false;
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  async componentWillLoad() {
    await this.loadAllModules();
    const localeSettings = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement);
    this.strings = localeSettings[0];
    this.currentLanguage = localeSettings[1];
    this.lastSortyBy = this.sortBy || this.lastSortyBy;
    try {
      this.namedTraceConfigurations = await this.utilityNetwork.queryNamedTraceConfigurations();
      this.namedTraceConfigurations.forEach((ntc) => {
        this.namedTraceConfigurationsInfo.push({
          id: ntc.globalId,
          creationDate: ntc.creationDate,
          creator: ntc.creator,
          description: ntc.description,
          minStartingPoints: ntc.minStartingPoints,
          resultTypes: ntc.resultTypes,
          tags: ntc.tags,
          title: ntc.title,
          type: ntc.traceType
        });
      });
      this.utilityNetwork.sharedNamedTraceConfigurations.forEach((ntc) => {
        this.selectedNTCs.push(ntc.globalId);
      });
    }
    catch (error) {
      this.errorMessage = error.message;
    }
  }
  componentDidLoad() {
    this.isOpen = true;
  }
  // temp: https://github.com/Esri/calcite-components/issues/4333
  calciteFilterChangeHandler(event) {
    var _a, _b;
    event.stopPropagation();
    const filterNode = (_a = event === null || event === void 0 ? void 0 : event.path) === null || _a === void 0 ? void 0 : _a.find((item) => item.nodeName === "CALCITE-FILTER");
    this.filterNTCs = (_b = filterNode === null || filterNode === void 0 ? void 0 : filterNode.filteredItems) === null || _b === void 0 ? void 0 : _b.map((item) => {
      return item.value;
    });
  }
  // --------------------------------------------------------------------------
  //
  // Public Methods
  //
  // --------------------------------------------------------------------------
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  // --------------------------------------------------------------------------
  //
  // Private Methods
  //
  // --------------------------------------------------------------------------
  getSortedList() {
    const tempSorted = [...this.namedTraceConfigurationsInfo];
    if (this.lastSortyBy === ntcLastSortBy.title) {
      tempSorted.sort((a, b) => a.title.localeCompare(b.title));
    }
    else if (this.lastSortyBy === ntcLastSortBy.description) {
      tempSorted.sort((a, b) => a.description.localeCompare(b.description));
    }
    if (this.lastSortyBy === ntcLastSortBy.type) {
      tempSorted.sort((a, b) => a.type.localeCompare(b.type));
    }
    return tempSorted;
  }
  // return true for deselect all, false for select all
  selectDeselect() {
    var _a;
    return ((_a = this.filterNTCs) === null || _a === void 0 ? void 0 : _a.length)
      ? this.filterContainsAll()
      : this.selectedNTCs.length === this.namedTraceConfigurationsInfo.length;
  }
  // check if filter has all current NTC info
  filterContainsAll() {
    return this.filterNTCs.every((filter) => {
      return this.selectedNTCs.some((curr) => {
        return curr === filter;
      });
    });
  }
  async loadAllModules() {
    const [NamedTraceConfiguration] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)([
      "esri/networks/support/NamedTraceConfiguration"
    ]);
    this.NamedTraceConfiguration = NamedTraceConfiguration;
  }
  // --------------------------------------------------------------------------
  //
  // Render  Methods
  //
  // --------------------------------------------------------------------------
  render() {
    var _a;
    const { NamedTraceConfiguration } = this;
    const sort = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { slot: "menu-actions", placement: "bottom-end" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", text: this.strings.sort, title: this.strings.sort }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.default, onClick: () => {
        this.lastSortyBy = ntcLastSortBy.default;
        this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.default), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.title, onClick: () => {
        this.lastSortyBy = ntcLastSortBy.title;
        this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.name), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.type, onClick: () => {
        this.lastSortyBy = ntcLastSortBy.type;
        this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.type), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === ntcLastSortBy.description, onClick: () => {
        this.lastSortyBy = ntcLastSortBy.description;
        this.arcgisNtcPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.description))));
    const selectionButton = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "selection-button-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", scale: "s", width: "full", onClick: () => {
        var _a, _b;
        if (this.selectDeselect()) {
          //deselect all
          this.selectedNTCs = ((_a = this.filterNTCs) === null || _a === void 0 ? void 0 : _a.length)
            ? this.selectedNTCs.filter((item) => !this.filterNTCs.includes(item))
            : [];
        }
        else {
          //select all
          this.selectedNTCs = ((_b = this.filterNTCs) === null || _b === void 0 ? void 0 : _b.length)
            ? [...new Set([...this.selectedNTCs, ...this.filterNTCs])]
            : this.namedTraceConfigurationsInfo.map((ntc) => {
              return ntc.id;
            });
        }
      } }, this.selectDeselect() ? this.strings.deselectAll : this.strings.selectAll)));
    const errorLabel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "label" }, this.errorMessage);
    const nctPickList = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { multiple: this.multiple, ref: (node) => {
        this.pickListNode = node;
      }, filterEnabled: this.namedTraceConfigurationsInfo.length >= this.showFilterLength ? true : false, filterPlaceholder: (_a = this.filterPlaceholderText) !== null && _a !== void 0 ? _a : this.strings.filter, onCalciteListChange: async () => {
        // keep original order. Add addional values at the end
        const selectedItems = await this.pickListNode.getSelectedItems();
        this.selectedNTCs = [
          ...new Set([
            ...this.selectedNTCs.filter((item) => {
              return selectedItems.has(item);
            }),
            ...selectedItems.keys()
          ])
        ];
        this.utilityNetwork.sharedNamedTraceConfigurations = [];
        this.selectedNTCs.forEach((ntcId) => {
          let tmpNamedTraceConfiguration = this.namedTraceConfigurations.find((c) => c.globalId === ntcId);
          this.utilityNetwork.sharedNamedTraceConfigurations.push(new NamedTraceConfiguration({
            globalId: tmpNamedTraceConfiguration.globalId,
            title: tmpNamedTraceConfiguration.title
          }));
        });
        this.arcgisNtcPickListChange.emit(this.utilityNetwork.sharedNamedTraceConfigurations);
      } }, this.namedTraceConfigurationsInfo.length >= this.showFilterLength && this.showSort && sort, selectionButton, [...this.getSortedList()].map((ntc) => this.calciteValueList(ntc))));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { class: "popover", placement: this.popoverProps.placement || "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: this.popoverProps.refElement, offsetDistance: this.popoverProps.offsetDistance ||
        -Math.round(this.popoverProps.refElement.getBoundingClientRect().width), offsetSkidding: this.popoverProps.offsetSkidding || 0, label: this.strings.headerSelect, ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (node) => {
        this.flowElement = node;
      }, style: {
        width: `${this.popoverProps.popoverWidth ||
          this.popoverProps.refElement.getBoundingClientRect().width}px`
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.flowItemElement = el), class: "panel", heading: this.strings.headerSelect, closable: true, onCalciteFlowItemClose: () => this.arcgisNtcPickListDismissed.emit() }, this.errorMessage !== "" ? errorLabel : nctPickList)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisUnNtcPickList.style = arcgisUnNtcPickListCss;

/**
 * Returns additional named trace configuration info from utility network
 * @param props - properties containing utility network and named trace configuration globalID
 */
async function getNtcInfo(props) {
  const { utilityNetwork, ntcId } = props;
  let ntcInfo;
  let namedTraceConfigurations = await utilityNetwork.queryNamedTraceConfigurations();
  namedTraceConfigurations
    .filter((ntc) => ntc.globalId === ntcId)
    .forEach((c) => {
    const info = {
      title: c.title,
      description: c.description,
      creator: c.creator,
      creationDate: c.creationDate,
      traceType: c.traceType,
      minimumPoints: c.minStartingPoints,
      resultTypes: c.resultTypes,
      tags: c.tags
    };
    ntcInfo = info;
  });
  return ntcInfo;
}

const arcgisUnNtcPickListInfoCss = ":host{height:100%}.container{padding:6px;background-color:white}.title{font-weight:bold;padding:5px 0}.section{padding:6px 0}";

const CSS = {
  container: "container",
  section: "section",
  title: "title"
};
const ArcgisUnNtcPickListInfo = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this._getResultTypes = (resultTypes) => {
      if (resultTypes.length === 0) {
        return this.strings.ntcNoResultTypes;
      }
      else {
        let arr = [];
        resultTypes.forEach((r) => {
          arr.push(r["type"]);
        });
        return arr.join(", ");
      }
    };
    this._getTags = (tags) => {
      if (tags.length === 0) {
        return this.strings.ntcNoTags;
      }
      else {
        return tags.join(", ");
      }
    };
    this.utilityNetwork = undefined;
    this.ntcId = undefined;
    this.strings = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Events
  //
  //--------------------------------------------------------------------------
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { utilityNetwork, ntcId } = this;
    this.props = {
      utilityNetwork,
      ntcId
    };
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/intl"]);
    this.intl = intl;
    // required for initial load
    this.props.ntcInfo = await getNtcInfo(this.props);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props } = this;
    const { ntcInfo } = props;
    if (!ntcInfo) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.container }, this.renderNtcCreator(), this.renderNtcCreationDate(), this.renderNtcTraceType(), this.renderNtcMinimumPoints(), this.renderNtcResultTypes(), this.renderNtcTags())));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  renderNtcCreator() {
    const { props } = this;
    const { ntcInfo } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcCreator), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, ntcInfo.creator)));
  }
  renderNtcCreationDate() {
    const { intl, props } = this;
    const { ntcInfo } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcCreationDate), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, intl.formatDate(ntcInfo.creationDate, { dateStyle: "full" }))));
  }
  renderNtcTraceType() {
    const { props } = this;
    const { ntcInfo } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcTraceType), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, ntcInfo.traceType)));
  }
  renderNtcMinimumPoints() {
    const { props } = this;
    const { ntcInfo } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcMinPoints), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, ntcInfo.minimumPoints)));
  }
  renderNtcResultTypes() {
    const { props } = this;
    const { ntcInfo } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcResultTypes), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this._getResultTypes(ntcInfo.resultTypes))));
  }
  renderNtcTags() {
    const { props } = this;
    const { ntcInfo } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, this.strings.ntcTags), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this._getTags(ntcInfo.tags))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisUnNtcPickListInfo.style = arcgisUnNtcPickListInfoCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTc5ZTIzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNkc7QUFDaEQ7QUFDUztBQUMzQztBQUNTOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQzs7QUFFdkMseUNBQXlDLFlBQVksT0FBTyxpQkFBaUIsT0FBTyw4QkFBOEIsNkJBQTZCLGFBQWEsc0JBQXNCLGlCQUFpQixTQUFTLGdCQUFnQjs7QUFFNU47QUFDQTtBQUNBLElBQUkscURBQWdCO0FBQ3BCLG1DQUFtQyxxREFBVztBQUM5QyxzQ0FBc0MscURBQVc7QUFDakQseUNBQXlDLHFEQUFXO0FBQ3BEO0FBQ0E7QUFDQSxzQ0FBc0MscURBQUMsNkJBQTZCO0FBQ3BFO0FBQ0E7QUFDQSxTQUFTLEVBQUUscURBQUMscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxzREFBeUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsZUFBZSxHQUFHLGtCQUFrQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFNEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9hcmNnaXMtdW4tbnRjLXBpY2stbGlzdF8yLmVudHJ5LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2xhbmd1YWdlVXRpbC0yMjI1OGM5MC5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sb2NhbGUtMTNlMDBhNzUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgZCBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC05MmViYjM5Ni5qcyc7XG5pbXBvcnQgeyBsIGFzIGxvYWRNb2R1bGVzIH0gZnJvbSAnLi9sb2FkTW9kdWxlcy1hYWYzMGJkNi5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgfSBmcm9tICcuL2xvY2FsZS0xM2UwMGE3NS5qcyc7XG5pbXBvcnQgJy4vZG9tLTEzZjViMDBjLmpzJztcbmltcG9ydCAnLi9sYW5ndWFnZVV0aWwtMjIyNThjOTAuanMnO1xuXG52YXIgbnRjTGFzdFNvcnRCeTtcbihmdW5jdGlvbiAobnRjTGFzdFNvcnRCeSkge1xuICBudGNMYXN0U29ydEJ5W1wiZGVmYXVsdFwiXSA9IFwiZGVmYXVsdFwiO1xuICBudGNMYXN0U29ydEJ5W1widGl0bGVcIl0gPSBcInRpdGxlXCI7XG4gIG50Y0xhc3RTb3J0QnlbXCJ0eXBlXCJdID0gXCJ0eXBlXCI7XG4gIG50Y0xhc3RTb3J0QnlbXCJkZXNjcmlwdGlvblwiXSA9IFwiZGVzY3JpcHRpb25cIjtcbn0pKG50Y0xhc3RTb3J0QnkgfHwgKG50Y0xhc3RTb3J0QnkgPSB7fSkpO1xuXG5jb25zdCBhcmNnaXNVbk50Y1BpY2tMaXN0Q3NzID0gXCIucG9wb3Zlcnt6LWluZGV4OjEwMH0ucGFuZWx7bWluLWhlaWdodDozMDBweH0ubGFiZWx7aGVpZ2h0Oi13ZWJraXQtZmlsbC1hdmFpbGFibGU7d2lkdGg6LXdlYmtpdC1maWxsLWF2YWlsYWJsZTtwYWRkaW5nOjEwcHh9LnNlbGVjdGlvbi1idXR0b24tZGl2e3BhZGRpbmc6NHB4IDEwcHh9LmNvbnRlbnR7bWF4LWhlaWdodDo2MHZofVwiO1xuXG5jb25zdCBBcmNnaXNVbk50Y1BpY2tMaXN0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmFyY2dpc050Y1BpY2tMaXN0Q2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNOdGNQaWNrTGlzdENoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmFyY2dpc050Y1BpY2tMaXN0RGlzbWlzc2VkID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNOdGNQaWNrTGlzdERpc21pc3NlZFwiLCA3KTtcbiAgICB0aGlzLmFyY2dpc050Y1BpY2tMaXN0U29ydEJ5Q2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNOdGNQaWNrTGlzdFNvcnRCeUNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgdGhpcy5uYW1lZFRyYWNlQ29uZmlndXJhdGlvbnNJbmZvID0gW107XG4gICAgdGhpcy5jYWxjaXRlVmFsdWVMaXN0ID0gKG50YykgPT4gKGgoXCJjYWxjaXRlLXBpY2stbGlzdC1pdGVtXCIsIHsga2V5OiBudGMuaWQsIGxhYmVsOiBudGMudGl0bGUsIGRlc2NyaXB0aW9uOiBudGMuZGVzY3JpcHRpb24sIHZhbHVlOiBudGMuaWQsIHNlbGVjdGVkOiB0aGlzLnNlbGVjdGVkTlRDcy5pbmRleE9mKG50Yy5pZCkgPiAtMSwgbWV0YWRhdGE6IHtcbiAgICAgICAgaWQ6IG50Yy5pZCxcbiAgICAgICAgdGl0bGU6IG50Yy50aXRsZVxuICAgICAgfSB9LCBoKFwiY2FsY2l0ZS1hY3Rpb25cIiwgeyBzbG90OiBcImFjdGlvbnMtZW5kXCIsIHRleHQ6IHRoaXMuc3RyaW5ncy5pbmZvLCB0aXRsZTogdGhpcy5zdHJpbmdzLmluZm8sIHNjYWxlOiBcInNcIiwgaWNvbjogXCJpbmZvcm1hdGlvblwiLCBvbkNsaWNrOiAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGNvbnN0IG50Y0Zsb3dJdGVtRWxlbWVudEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FsY2l0ZS1mbG93LWl0ZW1cIik7XG4gICAgICAgIG50Y0Zsb3dJdGVtRWxlbWVudEluZm8uaGVhZGluZyA9IG50Yy50aXRsZTtcbiAgICAgICAgbnRjRmxvd0l0ZW1FbGVtZW50SW5mby5kZXNjcmlwdGlvbiA9IG50Yy5kZXNjcmlwdGlvbjtcbiAgICAgICAgY29uc3QgbnRjSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhcmNnaXMtdW4tbnRjLXBpY2stbGlzdC1pbmZvXCIpO1xuICAgICAgICBudGNJbmZvLnV0aWxpdHlOZXR3b3JrID0gdGhpcy51dGlsaXR5TmV0d29yaztcbiAgICAgICAgbnRjSW5mby5udGNJZCA9IG50Yy5pZDtcbiAgICAgICAgbnRjSW5mby5zdHJpbmdzID0gdGhpcy5zdHJpbmdzO1xuICAgICAgICBudGNJbmZvLmNsYXNzTGlzdC5hZGQoXCJjb250ZW50XCIpO1xuICAgICAgICBudGNGbG93SXRlbUVsZW1lbnRJbmZvLmFwcGVuZENoaWxkKG50Y0luZm8pO1xuICAgICAgICB0aGlzLmZsb3dFbGVtZW50LmFwcGVuZENoaWxkKG50Y0Zsb3dJdGVtRWxlbWVudEluZm8pO1xuICAgICAgICBudGNGbG93SXRlbUVsZW1lbnRJbmZvLnNldEZvY3VzKCk7XG4gICAgICB9IH0pKSk7XG4gICAgdGhpcy5maWx0ZXJQbGFjZWhvbGRlclRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tdWx0aXBsZSA9IHRydWU7XG4gICAgdGhpcy5wb3BvdmVyUHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zZWxlY3RlZE5UQ3MgPSBbXTtcbiAgICB0aGlzLnNob3dGaWx0ZXJMZW5ndGggPSAxMDtcbiAgICB0aGlzLnNob3dTb3J0ID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRCeSA9IG50Y0xhc3RTb3J0QnkuZGVmYXVsdDtcbiAgICB0aGlzLnV0aWxpdHlOZXR3b3JrID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFzdFNvcnR5QnkgPSBudGNMYXN0U29ydEJ5LmRlZmF1bHQ7XG4gICAgdGhpcy5maWx0ZXJOVENzID0gbnVsbDtcbiAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBMaWZlY3ljbGVcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkQWxsTW9kdWxlcygpO1xuICAgIGNvbnN0IGxvY2FsZVNldHRpbmdzID0gYXdhaXQgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICB0aGlzLnN0cmluZ3MgPSBsb2NhbGVTZXR0aW5nc1swXTtcbiAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IGxvY2FsZVNldHRpbmdzWzFdO1xuICAgIHRoaXMubGFzdFNvcnR5QnkgPSB0aGlzLnNvcnRCeSB8fCB0aGlzLmxhc3RTb3J0eUJ5O1xuICAgIHRyeSB7XG4gICAgICB0aGlzLm5hbWVkVHJhY2VDb25maWd1cmF0aW9ucyA9IGF3YWl0IHRoaXMudXRpbGl0eU5ldHdvcmsucXVlcnlOYW1lZFRyYWNlQ29uZmlndXJhdGlvbnMoKTtcbiAgICAgIHRoaXMubmFtZWRUcmFjZUNvbmZpZ3VyYXRpb25zLmZvckVhY2goKG50YykgPT4ge1xuICAgICAgICB0aGlzLm5hbWVkVHJhY2VDb25maWd1cmF0aW9uc0luZm8ucHVzaCh7XG4gICAgICAgICAgaWQ6IG50Yy5nbG9iYWxJZCxcbiAgICAgICAgICBjcmVhdGlvbkRhdGU6IG50Yy5jcmVhdGlvbkRhdGUsXG4gICAgICAgICAgY3JlYXRvcjogbnRjLmNyZWF0b3IsXG4gICAgICAgICAgZGVzY3JpcHRpb246IG50Yy5kZXNjcmlwdGlvbixcbiAgICAgICAgICBtaW5TdGFydGluZ1BvaW50czogbnRjLm1pblN0YXJ0aW5nUG9pbnRzLFxuICAgICAgICAgIHJlc3VsdFR5cGVzOiBudGMucmVzdWx0VHlwZXMsXG4gICAgICAgICAgdGFnczogbnRjLnRhZ3MsXG4gICAgICAgICAgdGl0bGU6IG50Yy50aXRsZSxcbiAgICAgICAgICB0eXBlOiBudGMudHJhY2VUeXBlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnV0aWxpdHlOZXR3b3JrLnNoYXJlZE5hbWVkVHJhY2VDb25maWd1cmF0aW9ucy5mb3JFYWNoKChudGMpID0+IHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5UQ3MucHVzaChudGMuZ2xvYmFsSWQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcbiAgfVxuICAvLyB0ZW1wOiBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWNvbXBvbmVudHMvaXNzdWVzLzQzMzNcbiAgY2FsY2l0ZUZpbHRlckNoYW5nZUhhbmRsZXIoZXZlbnQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IGZpbHRlck5vZGUgPSAoX2EgPSBldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQucGF0aCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbmQoKGl0ZW0pID0+IGl0ZW0ubm9kZU5hbWUgPT09IFwiQ0FMQ0lURS1GSUxURVJcIik7XG4gICAgdGhpcy5maWx0ZXJOVENzID0gKF9iID0gZmlsdGVyTm9kZSA9PT0gbnVsbCB8fCBmaWx0ZXJOb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWx0ZXJOb2RlLmZpbHRlcmVkSXRlbXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH0pO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vIFB1YmxpYyBNZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGFzeW5jIHJlcG9zaXRpb24oKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IHRoaXMucG9wb3Zlck5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXBvc2l0aW9uKCk7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gUHJpdmF0ZSBNZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGdldFNvcnRlZExpc3QoKSB7XG4gICAgY29uc3QgdGVtcFNvcnRlZCA9IFsuLi50aGlzLm5hbWVkVHJhY2VDb25maWd1cmF0aW9uc0luZm9dO1xuICAgIGlmICh0aGlzLmxhc3RTb3J0eUJ5ID09PSBudGNMYXN0U29ydEJ5LnRpdGxlKSB7XG4gICAgICB0ZW1wU29ydGVkLnNvcnQoKGEsIGIpID0+IGEudGl0bGUubG9jYWxlQ29tcGFyZShiLnRpdGxlKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMubGFzdFNvcnR5QnkgPT09IG50Y0xhc3RTb3J0QnkuZGVzY3JpcHRpb24pIHtcbiAgICAgIHRlbXBTb3J0ZWQuc29ydCgoYSwgYikgPT4gYS5kZXNjcmlwdGlvbi5sb2NhbGVDb21wYXJlKGIuZGVzY3JpcHRpb24pKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubGFzdFNvcnR5QnkgPT09IG50Y0xhc3RTb3J0QnkudHlwZSkge1xuICAgICAgdGVtcFNvcnRlZC5zb3J0KChhLCBiKSA9PiBhLnR5cGUubG9jYWxlQ29tcGFyZShiLnR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXBTb3J0ZWQ7XG4gIH1cbiAgLy8gcmV0dXJuIHRydWUgZm9yIGRlc2VsZWN0IGFsbCwgZmFsc2UgZm9yIHNlbGVjdCBhbGxcbiAgc2VsZWN0RGVzZWxlY3QoKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gdGhpcy5maWx0ZXJOVENzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKVxuICAgICAgPyB0aGlzLmZpbHRlckNvbnRhaW5zQWxsKClcbiAgICAgIDogdGhpcy5zZWxlY3RlZE5UQ3MubGVuZ3RoID09PSB0aGlzLm5hbWVkVHJhY2VDb25maWd1cmF0aW9uc0luZm8ubGVuZ3RoO1xuICB9XG4gIC8vIGNoZWNrIGlmIGZpbHRlciBoYXMgYWxsIGN1cnJlbnQgTlRDIGluZm9cbiAgZmlsdGVyQ29udGFpbnNBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyTlRDcy5ldmVyeSgoZmlsdGVyKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZE5UQ3Muc29tZSgoY3VycikgPT4ge1xuICAgICAgICByZXR1cm4gY3VyciA9PT0gZmlsdGVyO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgbG9hZEFsbE1vZHVsZXMoKSB7XG4gICAgY29uc3QgW05hbWVkVHJhY2VDb25maWd1cmF0aW9uXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcbiAgICAgIFwiZXNyaS9uZXR3b3Jrcy9zdXBwb3J0L05hbWVkVHJhY2VDb25maWd1cmF0aW9uXCJcbiAgICBdKTtcbiAgICB0aGlzLk5hbWVkVHJhY2VDb25maWd1cmF0aW9uID0gTmFtZWRUcmFjZUNvbmZpZ3VyYXRpb247XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gUmVuZGVyICBNZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJlbmRlcigpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyBOYW1lZFRyYWNlQ29uZmlndXJhdGlvbiB9ID0gdGhpcztcbiAgICBjb25zdCBzb3J0ID0gKGgoXCJjYWxjaXRlLWRyb3Bkb3duXCIsIHsgc2xvdDogXCJtZW51LWFjdGlvbnNcIiwgcGxhY2VtZW50OiBcImJvdHRvbS1lbmRcIiB9LCBoKFwiY2FsY2l0ZS1hY3Rpb25cIiwgeyBzbG90OiBcInRyaWdnZXJcIiwgdGV4dDogdGhpcy5zdHJpbmdzLnNvcnQsIHRpdGxlOiB0aGlzLnN0cmluZ3Muc29ydCB9LCBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBcInNvcnREZXNjZW5kaW5nXCIgfSkpLCBoKFwiY2FsY2l0ZS1kcm9wZG93bi1ncm91cFwiLCBudWxsLCBoKFwiY2FsY2l0ZS1kcm9wZG93bi1pdGVtXCIsIHsgc2VsZWN0ZWQ6IHRoaXMubGFzdFNvcnR5QnkgPT09IG50Y0xhc3RTb3J0QnkuZGVmYXVsdCwgb25DbGljazogKCkgPT4ge1xuICAgICAgICB0aGlzLmxhc3RTb3J0eUJ5ID0gbnRjTGFzdFNvcnRCeS5kZWZhdWx0O1xuICAgICAgICB0aGlzLmFyY2dpc050Y1BpY2tMaXN0U29ydEJ5Q2hhbmdlLmVtaXQodGhpcy5sYXN0U29ydHlCeSk7XG4gICAgICB9IH0sIHRoaXMuc3RyaW5ncy5kZWZhdWx0KSwgaChcImNhbGNpdGUtZHJvcGRvd24taXRlbVwiLCB7IHNlbGVjdGVkOiB0aGlzLmxhc3RTb3J0eUJ5ID09PSBudGNMYXN0U29ydEJ5LnRpdGxlLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMubGFzdFNvcnR5QnkgPSBudGNMYXN0U29ydEJ5LnRpdGxlO1xuICAgICAgICB0aGlzLmFyY2dpc050Y1BpY2tMaXN0U29ydEJ5Q2hhbmdlLmVtaXQodGhpcy5sYXN0U29ydHlCeSk7XG4gICAgICB9IH0sIHRoaXMuc3RyaW5ncy5uYW1lKSwgaChcImNhbGNpdGUtZHJvcGRvd24taXRlbVwiLCB7IHNlbGVjdGVkOiB0aGlzLmxhc3RTb3J0eUJ5ID09PSBudGNMYXN0U29ydEJ5LnR5cGUsIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgdGhpcy5sYXN0U29ydHlCeSA9IG50Y0xhc3RTb3J0QnkudHlwZTtcbiAgICAgICAgdGhpcy5hcmNnaXNOdGNQaWNrTGlzdFNvcnRCeUNoYW5nZS5lbWl0KHRoaXMubGFzdFNvcnR5QnkpO1xuICAgICAgfSB9LCB0aGlzLnN0cmluZ3MudHlwZSksIGgoXCJjYWxjaXRlLWRyb3Bkb3duLWl0ZW1cIiwgeyBzZWxlY3RlZDogdGhpcy5sYXN0U29ydHlCeSA9PT0gbnRjTGFzdFNvcnRCeS5kZXNjcmlwdGlvbiwgb25DbGljazogKCkgPT4ge1xuICAgICAgICB0aGlzLmxhc3RTb3J0eUJ5ID0gbnRjTGFzdFNvcnRCeS5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5hcmNnaXNOdGNQaWNrTGlzdFNvcnRCeUNoYW5nZS5lbWl0KHRoaXMubGFzdFNvcnR5QnkpO1xuICAgICAgfSB9LCB0aGlzLnN0cmluZ3MuZGVzY3JpcHRpb24pKSkpO1xuICAgIGNvbnN0IHNlbGVjdGlvbkJ1dHRvbiA9IChoKFwiZGl2XCIsIHsgY2xhc3M6IFwic2VsZWN0aW9uLWJ1dHRvbi1kaXZcIiB9LCBoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBhcHBlYXJhbmNlOiBcInRyYW5zcGFyZW50XCIsIHNjYWxlOiBcInNcIiwgd2lkdGg6IFwiZnVsbFwiLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdERlc2VsZWN0KCkpIHtcbiAgICAgICAgICAvL2Rlc2VsZWN0IGFsbFxuICAgICAgICAgIHRoaXMuc2VsZWN0ZWROVENzID0gKChfYSA9IHRoaXMuZmlsdGVyTlRDcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aClcbiAgICAgICAgICAgID8gdGhpcy5zZWxlY3RlZE5UQ3MuZmlsdGVyKChpdGVtKSA9PiAhdGhpcy5maWx0ZXJOVENzLmluY2x1ZGVzKGl0ZW0pKVxuICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvL3NlbGVjdCBhbGxcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkTlRDcyA9ICgoX2IgPSB0aGlzLmZpbHRlck5UQ3MpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpXG4gICAgICAgICAgICA/IFsuLi5uZXcgU2V0KFsuLi50aGlzLnNlbGVjdGVkTlRDcywgLi4udGhpcy5maWx0ZXJOVENzXSldXG4gICAgICAgICAgICA6IHRoaXMubmFtZWRUcmFjZUNvbmZpZ3VyYXRpb25zSW5mby5tYXAoKG50YykgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gbnRjLmlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gfSwgdGhpcy5zZWxlY3REZXNlbGVjdCgpID8gdGhpcy5zdHJpbmdzLmRlc2VsZWN0QWxsIDogdGhpcy5zdHJpbmdzLnNlbGVjdEFsbCkpKTtcbiAgICBjb25zdCBlcnJvckxhYmVsID0gaChcImNhbGNpdGUtbGFiZWxcIiwgeyBjbGFzczogXCJsYWJlbFwiIH0sIHRoaXMuZXJyb3JNZXNzYWdlKTtcbiAgICBjb25zdCBuY3RQaWNrTGlzdCA9IChoKFwiY2FsY2l0ZS1waWNrLWxpc3RcIiwgeyBtdWx0aXBsZTogdGhpcy5tdWx0aXBsZSwgcmVmOiAobm9kZSkgPT4ge1xuICAgICAgICB0aGlzLnBpY2tMaXN0Tm9kZSA9IG5vZGU7XG4gICAgICB9LCBmaWx0ZXJFbmFibGVkOiB0aGlzLm5hbWVkVHJhY2VDb25maWd1cmF0aW9uc0luZm8ubGVuZ3RoID49IHRoaXMuc2hvd0ZpbHRlckxlbmd0aCA/IHRydWUgOiBmYWxzZSwgZmlsdGVyUGxhY2Vob2xkZXI6IChfYSA9IHRoaXMuZmlsdGVyUGxhY2Vob2xkZXJUZXh0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnN0cmluZ3MuZmlsdGVyLCBvbkNhbGNpdGVMaXN0Q2hhbmdlOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIGtlZXAgb3JpZ2luYWwgb3JkZXIuIEFkZCBhZGRpb25hbCB2YWx1ZXMgYXQgdGhlIGVuZFxuICAgICAgICBjb25zdCBzZWxlY3RlZEl0ZW1zID0gYXdhaXQgdGhpcy5waWNrTGlzdE5vZGUuZ2V0U2VsZWN0ZWRJdGVtcygpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkTlRDcyA9IFtcbiAgICAgICAgICAuLi5uZXcgU2V0KFtcbiAgICAgICAgICAgIC4uLnRoaXMuc2VsZWN0ZWROVENzLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRJdGVtcy5oYXMoaXRlbSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC4uLnNlbGVjdGVkSXRlbXMua2V5cygpXG4gICAgICAgICAgXSlcbiAgICAgICAgXTtcbiAgICAgICAgdGhpcy51dGlsaXR5TmV0d29yay5zaGFyZWROYW1lZFRyYWNlQ29uZmlndXJhdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZE5UQ3MuZm9yRWFjaCgobnRjSWQpID0+IHtcbiAgICAgICAgICBsZXQgdG1wTmFtZWRUcmFjZUNvbmZpZ3VyYXRpb24gPSB0aGlzLm5hbWVkVHJhY2VDb25maWd1cmF0aW9ucy5maW5kKChjKSA9PiBjLmdsb2JhbElkID09PSBudGNJZCk7XG4gICAgICAgICAgdGhpcy51dGlsaXR5TmV0d29yay5zaGFyZWROYW1lZFRyYWNlQ29uZmlndXJhdGlvbnMucHVzaChuZXcgTmFtZWRUcmFjZUNvbmZpZ3VyYXRpb24oe1xuICAgICAgICAgICAgZ2xvYmFsSWQ6IHRtcE5hbWVkVHJhY2VDb25maWd1cmF0aW9uLmdsb2JhbElkLFxuICAgICAgICAgICAgdGl0bGU6IHRtcE5hbWVkVHJhY2VDb25maWd1cmF0aW9uLnRpdGxlXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcmNnaXNOdGNQaWNrTGlzdENoYW5nZS5lbWl0KHRoaXMudXRpbGl0eU5ldHdvcmsuc2hhcmVkTmFtZWRUcmFjZUNvbmZpZ3VyYXRpb25zKTtcbiAgICAgIH0gfSwgdGhpcy5uYW1lZFRyYWNlQ29uZmlndXJhdGlvbnNJbmZvLmxlbmd0aCA+PSB0aGlzLnNob3dGaWx0ZXJMZW5ndGggJiYgdGhpcy5zaG93U29ydCAmJiBzb3J0LCBzZWxlY3Rpb25CdXR0b24sIFsuLi50aGlzLmdldFNvcnRlZExpc3QoKV0ubWFwKChudGMpID0+IHRoaXMuY2FsY2l0ZVZhbHVlTGlzdChudGMpKSkpO1xuICAgIHJldHVybiAoaChIb3N0LCB7IGNsYXNzOiBcImpzLWFwcC1mbHlvdXRcIiB9LCBoKFwiY2FsY2l0ZS1wb3BvdmVyXCIsIHsgY2xhc3M6IFwicG9wb3ZlclwiLCBwbGFjZW1lbnQ6IHRoaXMucG9wb3ZlclByb3BzLnBsYWNlbWVudCB8fCBcImxlYWRpbmctc3RhcnRcIiwgb3BlbjogdGhpcy5pc09wZW4sIHBvaW50ZXJEaXNhYmxlZDogdHJ1ZSwgcmVmZXJlbmNlRWxlbWVudDogdGhpcy5wb3BvdmVyUHJvcHMucmVmRWxlbWVudCwgb2Zmc2V0RGlzdGFuY2U6IHRoaXMucG9wb3ZlclByb3BzLm9mZnNldERpc3RhbmNlIHx8XG4gICAgICAgIC1NYXRoLnJvdW5kKHRoaXMucG9wb3ZlclByb3BzLnJlZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpLCBvZmZzZXRTa2lkZGluZzogdGhpcy5wb3BvdmVyUHJvcHMub2Zmc2V0U2tpZGRpbmcgfHwgMCwgbGFiZWw6IHRoaXMuc3RyaW5ncy5oZWFkZXJTZWxlY3QsIHJlZjogKG5vZGUpID0+ICh0aGlzLnBvcG92ZXJOb2RlID0gbm9kZSkgfSwgaChcImNhbGNpdGUtZmxvd1wiLCB7IHJlZjogKG5vZGUpID0+IHtcbiAgICAgICAgdGhpcy5mbG93RWxlbWVudCA9IG5vZGU7XG4gICAgICB9LCBzdHlsZToge1xuICAgICAgICB3aWR0aDogYCR7dGhpcy5wb3BvdmVyUHJvcHMucG9wb3ZlcldpZHRoIHx8XG4gICAgICAgICAgdGhpcy5wb3BvdmVyUHJvcHMucmVmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGBcbiAgICAgIH0gfSwgaChcImNhbGNpdGUtZmxvdy1pdGVtXCIsIHsgcmVmOiAoZWwpID0+ICh0aGlzLmZsb3dJdGVtRWxlbWVudCA9IGVsKSwgY2xhc3M6IFwicGFuZWxcIiwgaGVhZGluZzogdGhpcy5zdHJpbmdzLmhlYWRlclNlbGVjdCwgY2xvc2FibGU6IHRydWUsIG9uQ2FsY2l0ZUZsb3dJdGVtQ2xvc2U6ICgpID0+IHRoaXMuYXJjZ2lzTnRjUGlja0xpc3REaXNtaXNzZWQuZW1pdCgpIH0sIHRoaXMuZXJyb3JNZXNzYWdlICE9PSBcIlwiID8gZXJyb3JMYWJlbCA6IG5jdFBpY2tMaXN0KSkpKSk7XG4gIH1cbiAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc1VuTnRjUGlja0xpc3Quc3R5bGUgPSBhcmNnaXNVbk50Y1BpY2tMaXN0Q3NzO1xuXG4vKipcbiAqIFJldHVybnMgYWRkaXRpb25hbCBuYW1lZCB0cmFjZSBjb25maWd1cmF0aW9uIGluZm8gZnJvbSB1dGlsaXR5IG5ldHdvcmtcbiAqIEBwYXJhbSBwcm9wcyAtIHByb3BlcnRpZXMgY29udGFpbmluZyB1dGlsaXR5IG5ldHdvcmsgYW5kIG5hbWVkIHRyYWNlIGNvbmZpZ3VyYXRpb24gZ2xvYmFsSURcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0TnRjSW5mbyhwcm9wcykge1xuICBjb25zdCB7IHV0aWxpdHlOZXR3b3JrLCBudGNJZCB9ID0gcHJvcHM7XG4gIGxldCBudGNJbmZvO1xuICBsZXQgbmFtZWRUcmFjZUNvbmZpZ3VyYXRpb25zID0gYXdhaXQgdXRpbGl0eU5ldHdvcmsucXVlcnlOYW1lZFRyYWNlQ29uZmlndXJhdGlvbnMoKTtcbiAgbmFtZWRUcmFjZUNvbmZpZ3VyYXRpb25zXG4gICAgLmZpbHRlcigobnRjKSA9PiBudGMuZ2xvYmFsSWQgPT09IG50Y0lkKVxuICAgIC5mb3JFYWNoKChjKSA9PiB7XG4gICAgY29uc3QgaW5mbyA9IHtcbiAgICAgIHRpdGxlOiBjLnRpdGxlLFxuICAgICAgZGVzY3JpcHRpb246IGMuZGVzY3JpcHRpb24sXG4gICAgICBjcmVhdG9yOiBjLmNyZWF0b3IsXG4gICAgICBjcmVhdGlvbkRhdGU6IGMuY3JlYXRpb25EYXRlLFxuICAgICAgdHJhY2VUeXBlOiBjLnRyYWNlVHlwZSxcbiAgICAgIG1pbmltdW1Qb2ludHM6IGMubWluU3RhcnRpbmdQb2ludHMsXG4gICAgICByZXN1bHRUeXBlczogYy5yZXN1bHRUeXBlcyxcbiAgICAgIHRhZ3M6IGMudGFnc1xuICAgIH07XG4gICAgbnRjSW5mbyA9IGluZm87XG4gIH0pO1xuICByZXR1cm4gbnRjSW5mbztcbn1cblxuY29uc3QgYXJjZ2lzVW5OdGNQaWNrTGlzdEluZm9Dc3MgPSBcIjpob3N0e2hlaWdodDoxMDAlfS5jb250YWluZXJ7cGFkZGluZzo2cHg7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZX0udGl0bGV7Zm9udC13ZWlnaHQ6Ym9sZDtwYWRkaW5nOjVweCAwfS5zZWN0aW9ue3BhZGRpbmc6NnB4IDB9XCI7XG5cbmNvbnN0IENTUyA9IHtcbiAgY29udGFpbmVyOiBcImNvbnRhaW5lclwiLFxuICBzZWN0aW9uOiBcInNlY3Rpb25cIixcbiAgdGl0bGU6IFwidGl0bGVcIlxufTtcbmNvbnN0IEFyY2dpc1VuTnRjUGlja0xpc3RJbmZvID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLl9nZXRSZXN1bHRUeXBlcyA9IChyZXN1bHRUeXBlcykgPT4ge1xuICAgICAgaWYgKHJlc3VsdFR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmdzLm50Y05vUmVzdWx0VHlwZXM7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IGFyciA9IFtdO1xuICAgICAgICByZXN1bHRUeXBlcy5mb3JFYWNoKChyKSA9PiB7XG4gICAgICAgICAgYXJyLnB1c2gocltcInR5cGVcIl0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFyci5qb2luKFwiLCBcIik7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9nZXRUYWdzID0gKHRhZ3MpID0+IHtcbiAgICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmdzLm50Y05vVGFncztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFncy5qb2luKFwiLCBcIik7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnV0aWxpdHlOZXR3b3JrID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubnRjSWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdHJpbmdzID0gdW5kZWZpbmVkO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIEV2ZW50c1xuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIExpZmVjeWNsZVxuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIGNvbnN0IHsgdXRpbGl0eU5ldHdvcmssIG50Y0lkIH0gPSB0aGlzO1xuICAgIHRoaXMucHJvcHMgPSB7XG4gICAgICB1dGlsaXR5TmV0d29yayxcbiAgICAgIG50Y0lkXG4gICAgfTtcbiAgICBjb25zdCBbaW50bF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL2ludGxcIl0pO1xuICAgIHRoaXMuaW50bCA9IGludGw7XG4gICAgLy8gcmVxdWlyZWQgZm9yIGluaXRpYWwgbG9hZFxuICAgIHRoaXMucHJvcHMubnRjSW5mbyA9IGF3YWl0IGdldE50Y0luZm8odGhpcy5wcm9wcyk7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFJlbmRlciBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBudGNJbmZvIH0gPSBwcm9wcztcbiAgICBpZiAoIW50Y0luZm8pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MuY29udGFpbmVyIH0sIHRoaXMucmVuZGVyTnRjQ3JlYXRvcigpLCB0aGlzLnJlbmRlck50Y0NyZWF0aW9uRGF0ZSgpLCB0aGlzLnJlbmRlck50Y1RyYWNlVHlwZSgpLCB0aGlzLnJlbmRlck50Y01pbmltdW1Qb2ludHMoKSwgdGhpcy5yZW5kZXJOdGNSZXN1bHRUeXBlcygpLCB0aGlzLnJlbmRlck50Y1RhZ3MoKSkpKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgUHJpdmF0ZSBtZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJlbmRlck50Y0NyZWF0b3IoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IG50Y0luZm8gfSA9IHByb3BzO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc2VjdGlvbiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy50aXRsZSB9LCB0aGlzLnN0cmluZ3MubnRjQ3JlYXRvciksIGgoXCJkaXZcIiwgbnVsbCwgbnRjSW5mby5jcmVhdG9yKSkpO1xuICB9XG4gIHJlbmRlck50Y0NyZWF0aW9uRGF0ZSgpIHtcbiAgICBjb25zdCB7IGludGwsIHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbnRjSW5mbyB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zZWN0aW9uIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnRpdGxlIH0sIHRoaXMuc3RyaW5ncy5udGNDcmVhdGlvbkRhdGUpLCBoKFwiZGl2XCIsIG51bGwsIGludGwuZm9ybWF0RGF0ZShudGNJbmZvLmNyZWF0aW9uRGF0ZSwgeyBkYXRlU3R5bGU6IFwiZnVsbFwiIH0pKSkpO1xuICB9XG4gIHJlbmRlck50Y1RyYWNlVHlwZSgpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbnRjSW5mbyB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zZWN0aW9uIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnRpdGxlIH0sIHRoaXMuc3RyaW5ncy5udGNUcmFjZVR5cGUpLCBoKFwiZGl2XCIsIG51bGwsIG50Y0luZm8udHJhY2VUeXBlKSkpO1xuICB9XG4gIHJlbmRlck50Y01pbmltdW1Qb2ludHMoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IG50Y0luZm8gfSA9IHByb3BzO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc2VjdGlvbiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy50aXRsZSB9LCB0aGlzLnN0cmluZ3MubnRjTWluUG9pbnRzKSwgaChcImRpdlwiLCBudWxsLCBudGNJbmZvLm1pbmltdW1Qb2ludHMpKSk7XG4gIH1cbiAgcmVuZGVyTnRjUmVzdWx0VHlwZXMoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IG50Y0luZm8gfSA9IHByb3BzO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc2VjdGlvbiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy50aXRsZSB9LCB0aGlzLnN0cmluZ3MubnRjUmVzdWx0VHlwZXMpLCBoKFwiZGl2XCIsIG51bGwsIHRoaXMuX2dldFJlc3VsdFR5cGVzKG50Y0luZm8ucmVzdWx0VHlwZXMpKSkpO1xuICB9XG4gIHJlbmRlck50Y1RhZ3MoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IG50Y0luZm8gfSA9IHByb3BzO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc2VjdGlvbiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy50aXRsZSB9LCB0aGlzLnN0cmluZ3MubnRjVGFncyksIGgoXCJkaXZcIiwgbnVsbCwgdGhpcy5fZ2V0VGFncyhudGNJbmZvLnRhZ3MpKSkpO1xuICB9XG4gIGdldCBob3N0RWxlbWVudCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNVbk50Y1BpY2tMaXN0SW5mby5zdHlsZSA9IGFyY2dpc1VuTnRjUGlja0xpc3RJbmZvQ3NzO1xuXG5leHBvcnQgeyBBcmNnaXNVbk50Y1BpY2tMaXN0IGFzIGFyY2dpc191bl9udGNfcGlja19saXN0LCBBcmNnaXNVbk50Y1BpY2tMaXN0SW5mbyBhcyBhcmNnaXNfdW5fbnRjX3BpY2tfbGlzdF9pbmZvIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGwgYXMgbG9hZE1vZHVsZXMgfSBmcm9tICcuL2xvYWRNb2R1bGVzLWFhZjMwYmQ2LmpzJztcbmltcG9ydCB7IGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tMTNmNWIwMGMuanMnO1xuXG5jb25zdCBsYW5ndWFnZU1hcCA9IG5ldyBNYXAoW1xuICBbXCJhclwiLCBcImFyXCJdLFxuICBbXCJiZ1wiLCBcImJnXCJdLFxuICBbXCJic1wiLCBcImJzXCJdLFxuICBbXCJjYVwiLCBcImNhXCJdLFxuICBbXCJjc1wiLCBcImNzXCJdLFxuICBbXCJkYVwiLCBcImRhXCJdLFxuICBbXCJkZVwiLCBcImRlXCJdLFxuICBbXCJlbFwiLCBcImVsXCJdLFxuICBbXCJlblwiLCBcImVuXCJdLFxuICBbXCJlc1wiLCBcImVzXCJdLFxuICBbXCJldFwiLCBcImV0XCJdLFxuICBbXCJmaVwiLCBcImZpXCJdLFxuICBbXCJmclwiLCBcImZyXCJdLFxuICBbXCJoZVwiLCBcImhlXCJdLFxuICBbXCJoclwiLCBcImhyXCJdLFxuICBbXCJodVwiLCBcImh1XCJdLFxuICBbXCJpZFwiLCBcImlkXCJdLFxuICBbXCJpdFwiLCBcIml0XCJdLFxuICBbXCJqYVwiLCBcImphXCJdLFxuICBbXCJrb1wiLCBcImtvXCJdLFxuICBbXCJsdFwiLCBcImx0XCJdLFxuICBbXCJsdlwiLCBcImx2XCJdLFxuICBbXCJuYlwiLCBcIm5iXCJdLFxuICBbXCJubFwiLCBcIm5sXCJdLFxuICBbXCJwbFwiLCBcInBsXCJdLFxuICBbXCJwdC1iclwiLCBcInB0LUJSXCJdLFxuICBbXCJwdC1wdFwiLCBcInB0LVBUXCJdLFxuICBbXCJyb1wiLCBcInJvXCJdLFxuICBbXCJydVwiLCBcInJ1XCJdLFxuICBbXCJza1wiLCBcInNrXCJdLFxuICBbXCJzbFwiLCBcInNsXCJdLFxuICBbXCJzclwiLCBcInNyXCJdLFxuICBbXCJzdlwiLCBcInN2XCJdLFxuICBbXCJ0aFwiLCBcInRoXCJdLFxuICBbXCJ0clwiLCBcInRyXCJdLFxuICBbXCJ1a1wiLCBcInVrXCJdLFxuICBbXCJ2aVwiLCBcInZpXCJdLFxuICBbXCJ6aC1jblwiLCBcInpoLUNOXCJdLFxuICBbXCJ6aC1oa1wiLCBcInpoLUhLXCJdLFxuICBbXCJ6aC10d1wiLCBcInpoLVRXXCJdXG5dKTtcbi8vIHJ0bFxuZnVuY3Rpb24gZ2V0RWxlbWVudERpcihlbCkge1xuICByZXR1cm4gZ2V0RWxlbWVudFByb3AoZWwsIFwiZGlyXCIsIFwibHRyXCIpO1xufVxuZnVuY3Rpb24gZ2V0RWxlbWVudFByb3AoZWwsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IGNsb3Nlc3RXaXRoUHJvcCA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbCwgYFske3Byb3B9XWApO1xuICByZXR1cm4gY2xvc2VzdFdpdGhQcm9wID8gY2xvc2VzdFdpdGhQcm9wLmdldEF0dHJpYnV0ZShwcm9wKSA6IHZhbHVlO1xufVxuLy8gY3NzXG5jb25zdCBDU1NfVVRJTElUWSA9IHtcbiAgcnRsOiBcImFyY2dpcy0tcnRsXCJcbn07XG5hc3luYyBmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgYXBpLCB0eXBlLCBwbGFjZXMgfSA9IG9wdGlvbnMgfHwge307XG4gIGlmIChhcGkgPT09IDQpIHtcbiAgICBjb25zdCBbaW50bF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL2ludGxcIl0pO1xuICAgIGNvbnN0IG51bWJlckZvcm1hdEludGxPcHRpb25zID0gaW50bC5jb252ZXJ0TnVtYmVyRm9ybWF0VG9JbnRsT3B0aW9ucyh7XG4gICAgICBwbGFjZXMsXG4gICAgICBzdHlsZTogdHlwZSxcbiAgICAgIGRpZ2l0U2VwYXJhdG9yOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGludGwuZm9ybWF0TnVtYmVyKG51bWJlciwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXJGb3JtYXRJbnRsT3B0aW9ucyksIHsgc3R5bGU6IHR5cGUgfSkpO1xuICB9XG4gIGNvbnN0IFtkb2pvTnVtYmVyXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImRvam8vbnVtYmVyXCJdKTtcbiAgcmV0dXJuIGRvam9OdW1iZXIuZm9ybWF0KG51bWJlciwge1xuICAgIHR5cGUsXG4gICAgcGxhY2VzLFxuICAgIHBhdHRlcm46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wYXR0ZXJuXG4gIH0pO1xufVxuY29uc3QgY2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICBjb25zdCBsYW5nID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lmxhbmc7XG4gIGNvbnN0IGRheVNob3J0TW9udGhZZWFyID0ge1xuICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgIG1vbnRoOiBcInNob3J0XCIsXG4gICAgZGF5OiBcIm51bWVyaWNcIlxuICB9O1xuICBpZiAoIWNhY2hlW2xhbmddKSB7XG4gICAgY2FjaGVbbGFuZ10gPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZywgZGF5U2hvcnRNb250aFllYXIpO1xuICB9XG4gIHJldHVybiBjYWNoZVtsYW5nXS5mb3JtYXQoZGF0ZSk7XG59XG5cbmV4cG9ydCB7IENTU19VVElMSVRZIGFzIEMsIGZvcm1hdERhdGUgYXMgYSwgZm9ybWF0TnVtYmVyIGFzIGYsIGdldEVsZW1lbnREaXIgYXMgZywgbGFuZ3VhZ2VNYXAgYXMgbCB9O1xuIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyBjIGFzIGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeSB9IGZyb20gJy4vZG9tLTEzZjViMDBjLmpzJztcbmltcG9ydCB7IGwgYXMgbGFuZ3VhZ2VNYXAgfSBmcm9tICcuL2xhbmd1YWdlVXRpbC0yMjI1OGM5MC5qcyc7XG5pbXBvcnQgeyBhIGFzIGdldEFzc2V0UGF0aCB9IGZyb20gJy4vaW5kZXgtOTJlYmIzOTYuanMnO1xuXG4vLyBodHRwczovL21lZGl1bS5jb20vc3RlbmNpbC10cmlja3MvaW1wbGVtZW50aW5nLWludGVybmF0aW9uYWxpc2F0aW9uLWkxOG4td2l0aC1zdGVuY2lsLTVlNjU1OTU1NDExN1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlKGVsZW1lbnQpIHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIGNvbnN0IGNsb3Nlc3RFbGVtZW50ID0gKF9hID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGVsZW1lbnQsIFwiW2xhbmddXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2MgPSAoX2IgPSBlbGVtZW50LnNoYWRvd1Jvb3QpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZG9jdW1lbnRFbGVtZW50O1xuICAvLyBsYW5ndWFnZSBzZXQgYnkgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gb3IgYnJvd3Nlci4gZGVmYXVsdHMgdG8gZW5nbGlzaC5cbiAgY29uc3QgbGFuZyA9ICgoY2xvc2VzdEVsZW1lbnQgPT09IG51bGwgfHwgY2xvc2VzdEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsb3Nlc3RFbGVtZW50LmxhbmcpIHx8IChuYXZpZ2F0b3IgPT09IG51bGwgfHwgbmF2aWdhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8IFwiZW5cIikudG9Mb3dlckNhc2UoKTtcbiAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nKSkge1xuICAgIHJldHVybiBsYW5ndWFnZU1hcC5nZXQobGFuZyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gXCJydS1SVVwiIG1hcHMgdG8gXCJydVwiIHVzZSBjYXNlXG4gICAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nLnNsaWNlKDAsIDIpKSkge1xuICAgICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nLnNsaWNlKDAsIDIpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gXCJlblwiO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlSW50bChlbGVtZW50KSB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICAvLyBpdCdzIE9LIGlmIHdlIGRvbid0IGhhdmUgdGhlIDQgbGV0dGVyIGxhbmd1YWdlIGZpbGUgZm9yIGl0XG4gIC8vIDQgbGV0dGVyIGxhbmd1YWdlIGNvZGUgbmVlZGVkIGZvciBmb3JtYXR0aW5nIG51bWJlcnNcbiAgY29uc3QgY2xvc2VzdEVsZW1lbnQgPSAoX2EgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWxlbWVudCwgXCJbbGFuZ11cIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYyA9IChfYiA9IGVsZW1lbnQuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kb2N1bWVudEVsZW1lbnQ7XG4gIC8vIGxhbmd1YWdlIHNldCBieSB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBvciBicm93c2VyLiBkZWZhdWx0cyB0byBlbmdsaXNoLlxuICBjb25zdCBsYW5nID0gKChjbG9zZXN0RWxlbWVudCA9PT0gbnVsbCB8fCBjbG9zZXN0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2VzdEVsZW1lbnQubGFuZykgfHwgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5sYW5ndWFnZSkgfHwgXCJlblwiKS50b0xvd2VyQ2FzZSgpO1xuICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcpKSB7XG4gICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nKTtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcuc2xpY2UoMCwgMikpKSB7XG4gICAgICAvLyB3ZSBzdXBwb3J0IHRoZSAyIGxldHRlciBjb2RlZCBsYW5ndWFnZVxuICAgICAgLy8gZS5nLiBpdC1DSCB2cyBpdFxuICAgICAgcmV0dXJuIGxhbmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZW5cIjtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGZldGNoTG9jYWxlU3RyaW5nc0ZvckNvbXBvbmVudChjb21wb25lbnROYW1lLCBsb2NhbGUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmZXRjaChnZXRBc3NldFBhdGgoYC4uL2FyY2dpcy1hcHAtYXNzZXRzL2kxOG4vJHtjb21wb25lbnROYW1lfS5pMThuLiR7bG9jYWxlfS5qc29uYCkpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5vaylcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQuanNvbigpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgfSwgKCkgPT4gcmVqZWN0KCkpO1xuICB9KTtcbn1cbmNvbnN0IHN0cmluZ0NhY2hlID0ge307XG5mdW5jdGlvbiBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgbG9jYWxlKSB7XG4gIGNvbnN0IGlkID0gYCR7Y29tcG9uZW50TmFtZX0ke2xvY2FsZX1gO1xuICBpZiAoIXN0cmluZ0NhY2hlW2lkXSkge1xuICAgIHN0cmluZ0NhY2hlW2lkXSA9IGZldGNoTG9jYWxlU3RyaW5nc0ZvckNvbXBvbmVudChjb21wb25lbnROYW1lLCBsb2NhbGUpO1xuICB9XG4gIHJldHVybiBzdHJpbmdDYWNoZVtpZF07XG59XG4vKipcbiAqIEdldCBzdHJpbmdzIGFuZCBsYW5ndWFnZSBjb2Rlcy5cbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgMiBsYW5ndWFnZSBjb2Rlcy5cbiAqIFRoZSBmaXJzdCBvbmUgcmV0dXJucyBhIGNvZGUgdGhhdCdzIGFsc28gc3VwcG9ydGVkIGFzIGEgbGFuZ3VhZ2UgZmlsZS5cbiAqIFRoZSBzZWNvbmQgb25lIHJldHVybnMgYSBjb2RlIHdoZXJlIHRoZXJlIGlzIHN1cHBvcnQgZm9yIHRoZSBmaXJzdCAyIGxldHRlcnMgb2YgdGhlIGNvZGUgYXMgcGFydCBvZiBhIGxhbmd1YWdlIGZpbGUsXG4gKiBidXQgd2lsbCByZXR1cm4gdGhlIG9yaWdpbmFsIDQgbGV0dGVyIGNvZGUgZnJvbSB0aGUgcGFnZS5cbiAqIEUuZy4gRm9yIFwiaXQtY2hcIiBpdCB3aWxsIHJldHVybiBcIml0XCIgYXMgdGhlIGZpcnN0IGxhbmd1YWdlIGNvZGUgYW5kIFwiaXQtY2hcIiBhcyB0aGUgc2Vjb25kLlxuICogVGhlIHNlY29uZCBvbmUgaXMgcmVxdWlyZWQgZm9yIGVzcmkuaW50bC5zZXRMb2NhbGUoKSB0byBnZXQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZy5cbiAqXG4gKiBJZiBhIHRhZ05hbWUgaXMgcHJvdmlkZWQgaXQgd2lsbCBvdmVyd2l0ZSB0aGUgZWxlbWVudCdzIHRhZ05hbWVcbiAqXG4gKiAgQHJldHVybiBbIHN0cmluZ3MsIGZpcnN0IGxhbmd1YWdlIGNvZGUsIHNlY29uZCBsYW5ndWFnZSBjb2RlXVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKGVsZW1lbnQsIHRhZ05hbWUpIHtcbiAgY29uc3QgY29tcG9uZW50TmFtZSA9IHRhZ05hbWUgfHwgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGNvbXBvbmVudExhbmd1YWdlID0gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlKGVsZW1lbnQpO1xuICBjb25zdCBjb21wb25lbnRMYW5ndWFnZUludGwgPSBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2VJbnRsKGVsZW1lbnQpO1xuICBsZXQgc3RyaW5ncztcbiAgdHJ5IHtcbiAgICBzdHJpbmdzID0gYXdhaXQgZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudExhbmd1YWdlKTtcbiAgfVxuICBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2Fybihgbm8gbG9jYWxlIGZvciAke2NvbXBvbmVudE5hbWV9ICgke2NvbXBvbmVudExhbmd1YWdlfSkgbG9hZGluZyBkZWZhdWx0IGxvY2FsZSBlbi5gKTtcbiAgICBzdHJpbmdzID0gYXdhaXQgZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIFwiZW5cIik7XG4gIH1cbiAgcmV0dXJuIFtzdHJpbmdzLCBjb21wb25lbnRMYW5ndWFnZSwgY29tcG9uZW50TGFuZ3VhZ2VJbnRsXTtcbn1cblxuZXhwb3J0IHsgZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlIGFzIGEsIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9