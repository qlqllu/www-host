"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-abad1b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-floor-configuration_11.entry.js":
/*!********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-floor-configuration_11.entry.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_floor_configuration: () => (/* binding */ ArcgisFloorConfiguration),
/* harmony export */   arcgis_floor_configuration_add_layers: () => (/* binding */ ArcgisFloorAddLayers),
/* harmony export */   arcgis_floor_configuration_add_layers_flow: () => (/* binding */ ArcgisFloorAddLayersFlow),
/* harmony export */   arcgis_floor_configuration_additional_layers: () => (/* binding */ ArcgisFloorAdditionalLayers),
/* harmony export */   arcgis_floor_configuration_field_list: () => (/* binding */ ArcgisFieldList),
/* harmony export */   arcgis_floor_configuration_field_picker: () => (/* binding */ ArcgisFloorFieldPicker),
/* harmony export */   arcgis_floor_configuration_field_select: () => (/* binding */ ArcgisFloorConfigurationFieldSelect),
/* harmony export */   arcgis_floor_configuration_layer_list: () => (/* binding */ ArcgisLayerList),
/* harmony export */   arcgis_floor_configuration_layer_picker: () => (/* binding */ ArcgisLayerPicker),
/* harmony export */   arcgis_floor_configuration_replace_field: () => (/* binding */ ArcgisFloorReplaceField),
/* harmony export */   arcgis_floor_configuration_select_fields: () => (/* binding */ ArcgisFloorSelectFields)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






const CSS = {
  container: "container",
  section: "section",
  title: "title",
  missing: "missing"
};

const floorInfoSchema = {
  facilityLayer: {
    facilityIdField: "FACILITY_ID",
    siteIdField: "SITE_ID",
    nameField: "NAME"
  },
  levelLayer: {
    levelIdField: "LEVEL_ID",
    facilityIdField: "FACILITY_ID",
    longNameField: "NAME",
    shortNameField: "NAME_SHORT",
    levelNumberField: "LEVEL_NUMBER",
    verticalOrderField: "VERTICAL_ORDER"
  },
  siteLayer: {
    siteIdField: "SITE_ID",
    nameField: "NAME"
  }
};
let tempFloorInfo;
const getMapFloorInfo = (view) => {
  var _a;
  const map = view === null || view === void 0 ? void 0 : view.map;
  tempFloorInfo = tempFloorInfo || (map === null || map === void 0 ? void 0 : map.floorInfo) || Object.assign({}, floorInfoSchema);
  // SiteLayer is optional, but might be specified without a
  // layerId if so we should remove it so the schema can still validate
  tempFloorInfo.siteLayer = ((_a = tempFloorInfo === null || tempFloorInfo === void 0 ? void 0 : tempFloorInfo.siteLayer) === null || _a === void 0 ? void 0 : _a.layerId) ? tempFloorInfo.siteLayer : null;
  return tempFloorInfo;
};
const setMapFloorInfo = (view) => {
  const map = view === null || view === void 0 ? void 0 : view.map;
  const mapFloorInfo = getMapFloorInfo(view);
  if (map && validateFloorInfo(mapFloorInfo)) {
    map.set("floorInfo", mapFloorInfo);
  }
  else {
    removeMapFloorInfo(view);
  }
};
const updateMapFloorInfo = (floorInfoProps, view) => {
  const mapFloorInfo = getMapFloorInfo(view);
  const { name } = floorInfoProps;
  const layer = floorInfoProps.layer;
  const isSublayer = !!(layer === null || layer === void 0 ? void 0 : layer.layer);
  if (layer) {
    mapFloorInfo[name] = Object.assign({}, floorInfoSchema[name]);
    mapFloorInfo[name].layerId = isSublayer ? layer.layer.id : layer.id;
    mapFloorInfo[name].sublayerId = isSublayer ? layer.id : undefined;
  }
  else {
    mapFloorInfo[name] = undefined;
  }
  setMapFloorInfo(view);
};
const removeMapFloorInfo = (view) => {
  const map = view === null || view === void 0 ? void 0 : view.map;
  if (map) {
    map.floorInfo = null;
  }
};
const validateFloorInfo = (mapFloorInfo) => {
  var _a, _b;
  return ((_a = mapFloorInfo === null || mapFloorInfo === void 0 ? void 0 : mapFloorInfo.facilityLayer) === null || _a === void 0 ? void 0 : _a.layerId) &&
    ((_b = mapFloorInfo === null || mapFloorInfo === void 0 ? void 0 : mapFloorInfo.levelLayer) === null || _b === void 0 ? void 0 : _b.layerId) &&
    (!(mapFloorInfo === null || mapFloorInfo === void 0 ? void 0 : mapFloorInfo.siteLayer) || (mapFloorInfo === null || mapFloorInfo === void 0 ? void 0 : mapFloorInfo.siteLayer.layerId))
    ? true
    : false;
};
const getRequiredFields = (name) => {
  const schema = floorInfoSchema[name];
  return Object.values(schema);
};
const getNonFloorLayers = (view) => {
  const { map } = view;
  const { allLayers } = map;
  let nonFloorLayers = [];
  allLayers.forEach((layer) => {
    const { type, floorInfo } = layer;
    if (type === "map-image") {
      const { allSublayers } = layer;
      nonFloorLayers = nonFloorLayers.concat(allSublayers.filter((subLayer) => subLayer.fieldsIndex && !(subLayer === null || subLayer === void 0 ? void 0 : subLayer.floorInfo)).toArray());
    }
    else if (!floorInfo && type === "feature") {
      nonFloorLayers.push(layer);
    }
  });
  return nonFloorLayers;
};
const getCompatibleLayers = async (view) => {
  const { map } = view;
  const { allLayers } = map;
  const promises = allLayers
    .map(async (layer) => await loadAll(layer))
    .filter((layer) => (layer === null || layer === void 0 ? void 0 : layer.loadStatus) !== "failed");
  // Make sure all layers and sublayers are loaded
  // before checking them for compatibility
  const validLayers = await Promise.all(promises);
  let compatibleLayers = [];
  validLayers.forEach((layer) => {
    const { type, geometryType } = layer;
    if (type === "map-image") {
      const { allSublayers } = layer;
      compatibleLayers = compatibleLayers.concat(allSublayers
        .filter((subLayer) => { var _a; return subLayer.fieldsIndex && ((_a = subLayer.sourceJSON) === null || _a === void 0 ? void 0 : _a.geometryType) === "esriGeometryPolygon"; })
        .toArray());
    }
    else if (type === "feature" && geometryType === "polygon") {
      compatibleLayers.push(layer);
    }
  });
  return compatibleLayers;
};
const loadAll = (layer) => {
  try {
    layer.loadAll ? layer.loadAll() : layer.load();
  }
  catch (_a) { }
  return layer;
};
const getFloorLayer = (name, view) => {
  var _a, _b;
  const map = view.map;
  const layers = map.allLayers;
  const floorInfo = getMapFloorInfo(view);
  const layerId = (_a = floorInfo === null || floorInfo === void 0 ? void 0 : floorInfo[name]) === null || _a === void 0 ? void 0 : _a.layerId;
  const sublayerId = (_b = floorInfo === null || floorInfo === void 0 ? void 0 : floorInfo[name]) === null || _b === void 0 ? void 0 : _b.sublayerId;
  let floorLayer = layerId ? layers === null || layers === void 0 ? void 0 : layers.find((layer) => layer.id === layerId) : null;
  if ((floorLayer === null || floorLayer === void 0 ? void 0 : floorLayer.type) === "map-image") {
    floorLayer = floorLayer.allSublayers.find((sublayer) => sublayer.id === sublayerId);
  }
  return floorLayer;
};
const setFloorInfo = (element) => {
  let { layer, field } = element;
  if ((element === null || element === void 0 ? void 0 : element.localName) === "arcgis-field-list") {
    field = element.selection.values().next().value;
  }
  const floorInfo = layer.floorInfo || {};
  floorInfo.floorField = field.name;
  layer.set("floorInfo", floorInfo);
};

const ArcgisFloorConfiguration = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.floorInfoChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "floorInfoChange", 7);
    this.view = undefined;
    this.layer = undefined;
    this.open = true;
    this.disabled = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [strings] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = strings;
    const { view } = this;
    this.props = {
      view,
      strings
    };
    this.disabled = this.disabled || (await this.getDisabled());
  }
  async componentDidLoad() {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/intl"]);
    this.intl = intl;
    this.intl.setLocale(document.documentElement.lang);
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  addMapFloorInfo() {
    setMapFloorInfo(this.view);
    this.floorInfoChange.emit();
  }
  removeFloorInfo() {
    removeMapFloorInfo(this.view);
    this.floorInfoChange.emit();
  }
  updateFloorInfo(props) {
    updateMapFloorInfo(props, this.view);
    this.floorInfoChange.emit();
  }
  disableContainer(e) {
    const { detail } = e;
    const container = this.hostElement.closest("calcite-flow-item");
    if (container) {
      container.disabled = detail;
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  closeAllLayerPickers() {
    const pickers = document.querySelectorAll("arcgis-floor-configuration-layer-picker");
    pickers.forEach((picker) => (picker.open = false));
  }
  async getDisabled() {
    const mapView = this.view;
    const compatibleLayers = await getCompatibleLayers(mapView);
    const sections = ["facilityLayer", "levelLayer"];
    // For each floorInfoSection we need to check that each polygon layer in the map
    // has the required fields in order to enable this component
    const supportedSections = sections.filter((sectionName) => {
      var _a;
      return (_a = compatibleLayers.filter((layer) => this.hasRequiredFields(layer, getRequiredFields(sectionName)))) === null || _a === void 0 ? void 0 : _a.length;
    });
    return !(supportedSections === null || supportedSections === void 0 ? void 0 : supportedSections.length);
  }
  hasRequiredFields(layer, requiredFields) {
    if (layer) {
      const { fieldsIndex } = layer;
      return ((fieldsIndex && requiredFields.every((fieldName) => !!fieldsIndex.get(fieldName))) || false);
    }
    else {
      return false;
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { strings, open, disabled } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: CSS.container, heading: strings.heading, collapsible: true, disabled: disabled, open: open && !disabled }, this.renderFloorConfiguration())));
  }
  renderFloorConfiguration() {
    const { strings, view } = this;
    const map = view.map;
    const open = (map === null || map === void 0 ? void 0 : map.floorInfo) ? true : false;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: strings.enable, open: open, "toggle-display": "switch", onCalciteBlockSectionToggle: (e) => e.currentTarget.open ? this.addMapFloorInfo() : this.removeFloorInfo() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", null, strings.summary), this.renderLayerPicker("siteLayer"), this.renderLayerPicker("facilityLayer"), this.renderLayerPicker("levelLayer"), this.renderAdditionalLayers()));
  }
  renderLayerPicker(name) {
    const { strings, view } = this;
    const floorLayer = getFloorLayer(name, view);
    const requiredFields = getRequiredFields(name);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-floor-configuration-layer-picker", { view: this.view, label: strings[name], strings: strings, selectedLayer: floorLayer, requiredFields: requiredFields, onListChange: (e) => this.updateFloorInfo({ layer: (e === null || e === void 0 ? void 0 : e.detail) ? e === null || e === void 0 ? void 0 : e.detail[0] : null, name: name }) }));
  }
  renderAdditionalLayers() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: strings.additionalLayers, open: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-floor-configuration-additional-layers", { view: this.view, strings: this.strings, onDisable: (e) => this.disableContainer(e) })));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisFloorAddLayers = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.listChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "listChange", 7);
    this.view = undefined;
    this.layers = undefined;
    this.selection = new Map();
    this.strings = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Events
  //
  //--------------------------------------------------------------------------
  selectionChange() {
    this.listChange.emit(this.selection);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.renderPanel());
  }
  renderPanel() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-floor-configuration-layer-list", { layers: getNonFloorLayers(this.view), "filter-enabled": true, multiple: true, strings: this.strings, onListChange: (e) => (this.selection = e.detail) })));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "selection": ["selectionChange"]
  }; }
};

const arcgisFloorConfigurationAddLayersFlowCss = ".content{width:20vw;max-width:420px;min-width:240px;max-height:40vh}";

const ArcgisFloorAddLayersFlow = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.done = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "done", 7);
    this.dismiss = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dismiss", 7);
    this.view = undefined;
    this.strings = undefined;
    this.layers = undefined;
    this.selectedLayers = undefined;
    this.mode = "create";
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.renderFlow());
  }
  renderFlow() {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (el) => this.createPanels(el) });
  }
  // --------------------------------------------------------------------------
  //
  //  Event Handlers
  //
  //--------------------------------------------------------------------------
  onCreate(e) {
    e.stopPropagation();
    this.done.emit();
  }
  onEdit(e) {
    e.stopPropagation();
    this.done.emit();
  }
  onDismiss(e) {
    e.stopPropagation();
    this.dismiss.emit();
  }
  // --------------------------------------------------------------------------
  //
  //  Protected methods
  //
  // --------------------------------------------------------------------------
  createPanels(el) {
    const { mode } = this;
    if (mode === "create") {
      return this.createAddLayersPanel(el);
    }
    else if (mode === "edit") {
      return this.createReplaceFieldsPanel(el);
    }
  }
  createAddLayersPanel(flow) {
    const addLayersPanel = document.createElement("arcgis-floor-configuration-add-layers");
    addLayersPanel.strings = this.strings;
    addLayersPanel.view = this.view;
    addLayersPanel.classList.add("content");
    addLayersPanel.addEventListener("listChange", (e) => { var _a; return (nextButton.disabled = !((_a = e.detail) === null || _a === void 0 ? void 0 : _a.length)); });
    const panel = this.createPanel({
      heading: this.strings.addLayers
    });
    panel.appendChild(addLayersPanel);
    const dismissButton = this.createButton({
      label: this.strings.cancel,
      appearance: "outline-fill",
      eventListener: this.onDismiss.bind(this)
    });
    panel.appendChild(dismissButton);
    const nextButton = this.createButton({
      label: this.strings.next,
      appearance: "solid",
      disabled: true,
      eventListener: () => {
        //const selectedLayers = (this.selectedLayers = addLayersPanel.selection);
        this.createSelectFloorFieldsPanel(addLayersPanel.selection, flow);
      }
    });
    panel.appendChild(nextButton);
    flow.appendChild(panel);
  }
  createSelectFloorFieldsPanel(layers, flow) {
    const selectFloorFieldsPanel = document.createElement("arcgis-floor-configuration-select-fields");
    selectFloorFieldsPanel.classList.add("content");
    selectFloorFieldsPanel.strings = this.strings;
    selectFloorFieldsPanel.layers = layers;
    selectFloorFieldsPanel.view = this.view;
    const panel = this.createPanel({
      heading: this.strings.selectFloorField
    });
    panel.appendChild(selectFloorFieldsPanel);
    const cancelButton = this.createButton({
      label: this.strings.cancel,
      appearance: "outline-fill",
      eventListener: this.onDismiss.bind(this)
    });
    panel.appendChild(cancelButton);
    const doneButton = this.createButton({
      label: this.strings.add,
      appearance: "solid",
      eventListener: async (e) => {
        await selectFloorFieldsPanel.commit();
        this.onCreate(e);
      }
    });
    panel.appendChild(doneButton);
    flow.appendChild(panel);
  }
  createReplaceFieldsPanel(flow) {
    const layer = this.layers[0];
    const replaceFloorFieldsPanel = document.createElement("arcgis-floor-configuration-replace-field");
    replaceFloorFieldsPanel.classList.add("content");
    replaceFloorFieldsPanel.strings = this.strings;
    replaceFloorFieldsPanel.view = this.view;
    replaceFloorFieldsPanel.layer = layer;
    const panel = this.createPanel({
      heading: layer.title,
      summary: this.strings.replaceFloorField
    });
    panel.appendChild(replaceFloorFieldsPanel);
    const replaceButton = this.createButton({
      label: this.strings.replace,
      width: "full",
      eventListener: async (e) => {
        await replaceFloorFieldsPanel.commit();
        this.onEdit(e);
      }
    });
    panel.appendChild(replaceButton);
    flow.appendChild(panel);
  }
  createPanel(panelProps) {
    const panel = document.createElement("calcite-flow-item");
    panel.heading = panelProps.heading;
    panel.description = panelProps.summary;
    panel.closable = true;
    panel.closed = false;
    panel.addEventListener("calcitePanelClose", this.onDismiss.bind(this));
    return panel;
  }
  createButton(buttonProps) {
    const { appearance = "solid", label, eventListener, width = "half", disabled = false } = buttonProps;
    const button = document.createElement("calcite-button");
    button.slot = "footer";
    button.appearance = appearance;
    button.disabled = disabled;
    button.width = width;
    const text = document.createTextNode(label);
    button.appendChild(text);
    button.addEventListener("click", eventListener);
    return button;
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFloorAddLayersFlow.style = arcgisFloorConfigurationAddLayersFlowCss;

const arcgisFloorConfigurationAdditionalLayersCss = ":host{height:100%}calcite-notice{margin-bottom:1em}";

const ArcgisFloorAdditionalLayers = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.dismiss = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dismiss", 7);
    this.disable = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disable", 7);
    this.floorInfoChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "floorInfoChange", 7);
    this.reRender = undefined;
    this.view = undefined;
    this.strings = undefined;
    this.placement = "bottom-start";
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  disconnectedCallback() {
    var _a;
    const { popoverNode } = this;
    if (popoverNode) {
      popoverNode.open = false;
      (_a = popoverNode.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(popoverNode);
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    var _a;
    return (_a = this.layerPanel) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  open() {
    // To avoid flicker when the popover aligns to the
    // referenceElement we add a small delay before opening
    setTimeout(() => (this.popoverNode.open = true), 25);
  }
  close(changes) {
    this.disableContainer(false);
    const { popoverNode } = this;
    popoverNode.open = false;
    popoverNode.remove();
    this.popoverNode = null;
    this.reRender = !this.reRender;
    if (changes) {
      this.floorInfoChange.emit();
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  create() {
    const popoverNode = this.createPopover();
    const createFlow = this.createAddLayersFlow("create");
    popoverNode.appendChild(createFlow);
    this.open();
  }
  edit(e) {
    const layer = this.getSelectedLayer(e);
    const popoverNode = this.createPopover();
    const editFlow = this.createAddLayersFlow("edit");
    editFlow.layers = [layer];
    popoverNode.appendChild(editFlow);
    this.open();
  }
  removeLayer(layer) {
    layer.floorInfo = null;
    this.reRender = !this.reRender;
    this.floorInfoChange.emit();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.renderNotice(), this.renderPanel()));
  }
  renderNotice() {
    const { strings } = this;
    const layers = this.getLayers();
    return (layers === null || layers === void 0 ? void 0 : layers.length) ? null : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "s", width: "auto", open: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.additionalLayersTip)));
  }
  renderPanel() {
    const { strings } = this;
    const nonFloorLayers = getNonFloorLayers(this.view);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (el) => (this.layerPanel = el) }, this.renderLayers(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { slot: "fab", icon: "plus", appearance: "outline-fill", kind: "neutral", "text-enabled": true, label: strings.addLayers, text: strings.addLayers, disabled: nonFloorLayers.length === 0, scale: "s", ref: (el) => (this.triggerButton = el), onClick: () => this.create() })));
  }
  renderLayers() {
    const layers = this.getLayers();
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { dir: "ltr", class: "calcite-mode-light", onClick: (e) => this.edit(e) }, layers.map((layer) => this.renderLayer(layer))));
  }
  renderLayer(floorLayer) {
    const { title, floorInfo, id } = floorLayer;
    const { floorField } = floorInfo;
    const fieldName = `{${floorField}}`;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { label: title, description: fieldName, value: id }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: this.strings.remove, icon: "x", onClick: (e) => {
        e.stopPropagation();
        this.removeLayer(floorLayer);
      } })));
  }
  // --------------------------------------------------------------------------
  //
  //  Protected methods
  //
  // --------------------------------------------------------------------------
  disableContainer(disable) {
    const block = this.el.closest("calcite-block");
    if (block) {
      block.disabled = disable;
    }
    this.disable.emit(disable);
  }
  createAddLayersFlow(mode) {
    this.disableContainer(true);
    const addLayersFlow = (this.addLayersFlow = document.createElement("arcgis-floor-configuration-add-layers-flow"));
    addLayersFlow.strings = this.strings;
    addLayersFlow.view = this.view;
    addLayersFlow.mode = mode;
    addLayersFlow.addEventListener("done", this.close.bind(this, true));
    addLayersFlow.addEventListener("dismiss", this.close.bind(this, false));
    return addLayersFlow;
  }
  createPopover() {
    const referenceElement = this.el;
    const popoverNode = (this.popoverNode =
      document.createElement("calcite-popover"));
    popoverNode.classList.add("js-app-primary-flyout");
    popoverNode.referenceElement = referenceElement;
    popoverNode.offsetDistance = -550;
    popoverNode.offsetSkidding = 0;
    popoverNode.label = this.strings.addLayers;
    popoverNode.placement = "bottom-start";
    popoverNode.pointerDisabled = true;
    document.body.appendChild(popoverNode);
    return popoverNode;
  }
  getSelectedLayer(e) {
    var _a, _b, _c, _d, _e;
    if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.localName) === "calcite-value-list-item" ||
      ((_c = (_b = e.target) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.localName) === "calcite-value-list-item") {
      const id = (_d = e.target.value) !== null && _d !== void 0 ? _d : (_e = e.target.parentElement) === null || _e === void 0 ? void 0 : _e.value;
      return this.findLayer(id);
    }
  }
  getLayers() {
    const mapView = this.view;
    const { map } = mapView;
    const { allLayers } = map;
    let layers = [];
    allLayers.forEach((layer) => {
      const { type, floorInfo } = layer;
      if (type === "map-image") {
        const { allSublayers } = layer;
        layers = layers.concat(allSublayers.filter((subLayer) => subLayer.fieldsIndex && (subLayer === null || subLayer === void 0 ? void 0 : subLayer.floorInfo)).toArray());
      }
      else if (floorInfo) {
        layers.push(layer);
      }
    });
    return layers;
  }
  findLayer(layerId) {
    const layers = this.getLayers();
    return layers === null || layers === void 0 ? void 0 : layers.find((layer) => layer.id === layerId);
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFloorAdditionalLayers.style = arcgisFloorConfigurationAdditionalLayersCss;

const ArcgisFieldList = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.listChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "listChange", 7);
    this.layer = undefined;
    this.selection = new Map();
    this.filterEnabled = true;
    this.multiple = false;
    this.strings = undefined;
    this.fieldType = "string";
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { "filter-enabled": this.filterEnabled, "filter-placeholder": this.strings.filter, multiple: this.multiple, onClick: (e) => this.onListChange(e) }, this.renderFields())));
  }
  renderFields() {
    let fields = this.getFields();
    return (fields || []).map((field) => this.renderField(field));
  }
  renderField(field) {
    const fieldName = `{${field.name}}`;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { label: field.alias, description: fieldName, selected: this.selection.has(field.name), value: field.name }));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  onListChange(e) {
    const { selection } = this;
    this.updateSelection(e);
    this.listChange.emit(Array.from(selection.values()));
  }
  updateSelection(e) {
    var _a, _b, _c, _d, _e;
    if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.localName) === "calcite-pick-list-item" ||
      ((_c = (_b = e.target) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.localName) === "calcite-pick-list-item") {
      const { selection } = this;
      const selectedFieldName = (_d = e.target.value) !== null && _d !== void 0 ? _d : (_e = e.target.parentElement) === null || _e === void 0 ? void 0 : _e.value;
      const isRemoved = selection.has(selectedFieldName);
      const selectedField = this.findField(selectedFieldName);
      if (!this.multiple) {
        selection.clear();
      }
      if (!isRemoved) {
        this.selection.set(selectedFieldName, selectedField);
      }
      else {
        this.selection.delete(selectedField.name);
      }
    }
  }
  getFields() {
    const { layer, fieldType } = this;
    const { fields } = layer;
    return (fields === null || fields === void 0 ? void 0 : fields.length)
      ? fields.filter((field) => !fieldType || (field === null || field === void 0 ? void 0 : field.type) === fieldType)
      : [];
  }
  findField(name) {
    const { layer } = this;
    return layer.fieldsIndex.get(name);
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisFloorFieldPicker = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.iconEnd = "pencil";
    this.label = undefined;
    this.layer = undefined;
    this.placement = "auto";
    this.open = undefined;
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    var _a;
    const buttonText = ((_a = this.layer) === null || _a === void 0 ? void 0 : _a.title) || this.strings.none;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.label, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", scale: "m", "icon-end": this.iconEnd, ref: (el) => (this.triggerButton = el), onClick: () => (this.open = !this.open) }, buttonText)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { label: this.label, pointerDisabled: true, referenceElement: this.triggerButton, open: this.open, closable: true, placement: this.placement }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisFloorConfigurationFieldSelect = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.layer = undefined;
    this.strings = undefined;
    this.field = undefined;
    this.fieldType = "string";
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    this.onSelectChange();
  }
  // --------------------------------------------------------------------------
  //
  //  Private Functions
  //
  //--------------------------------------------------------------------------
  findField(fieldName) {
    return this.layer.fieldsIndex.get(fieldName);
  }
  // --------------------------------------------------------------------------
  //
  //  Event Handlers
  //
  //--------------------------------------------------------------------------
  onSelectChange() {
    const { select } = this;
    const selectedOption = select === null || select === void 0 ? void 0 : select.selectedOption;
    this.field = selectedOption
      ? this.findField(selectedOption.value)
      : this.field || this.getFields()[0];
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { title } = this.layer;
    const fields = this.getFields();
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, title, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: "select", ref: (e) => (this.select = e), onCalciteSelectChange: () => this.onSelectChange() }, fields.map((field) => this.renderField(field))))));
  }
  renderField(field) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { label: field.alias, value: field.name });
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  getFields() {
    const { layer, fieldType } = this;
    const { fields } = layer;
    return (fields === null || fields === void 0 ? void 0 : fields.length)
      ? fields.filter((field) => !fieldType || (field === null || field === void 0 ? void 0 : field.type) === fieldType)
      : [];
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisLayerList = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.listChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "listChange", 7);
    this.layers = undefined;
    this.selection = new Map();
    this.filterEnabled = true;
    this.multiple = false;
    this.strings = undefined;
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { "filter-enabled": this.filterEnabled, "filter-placeholder": this.strings.filter, multiple: this.multiple, onClick: (e) => this.onListChange(e) }, this.renderLayers())));
  }
  renderLayers() {
    const { layers, selection } = this;
    return (layers || []).map((layer) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { label: layer.title, description: this.getLayerType(layer), selected: selection.has(layer.id), value: layer.id })));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  onListChange(e) {
    const { selection } = this;
    this.updateSelection(e);
    this.listChange.emit(Array.from(selection.values()));
  }
  updateSelection(e) {
    var _a, _b, _c, _d, _e;
    if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.localName) === "calcite-pick-list-item" ||
      ((_c = (_b = e.target) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.localName) === "calcite-pick-list-item") {
      const { selection } = this;
      const selectedLayerId = (_d = e.target.value) !== null && _d !== void 0 ? _d : (_e = e.target.parentElement) === null || _e === void 0 ? void 0 : _e.value;
      const isRemoved = selection.has(selectedLayerId);
      const selectedLayer = this.findLayer(selectedLayerId);
      if (!this.multiple) {
        selection.clear();
      }
      if (!isRemoved) {
        this.selection.set(selectedLayer.id, selectedLayer);
      }
      else {
        this.selection.delete(selectedLayer.id);
      }
    }
  }
  findLayer(layerId) {
    const { layers } = this;
    return layers === null || layers === void 0 ? void 0 : layers.find((layer) => layer.id === layerId);
  }
  getLayerType(layer) {
    const { layerTypes } = this.strings;
    const { geometryType = "unknown", sourceJSON } = layer;
    return geometryType !== "unknown"
      ? layerTypes[geometryType]
      : layerTypes[this.jsonTypeToLayerType(sourceJSON === null || sourceJSON === void 0 ? void 0 : sourceJSON.geometryType)];
  }
  jsonTypeToLayerType(type) {
    if (type === "esriGeometryPolygon") {
      return "polygon";
    }
    else if (type === "esriGeometryPoint") {
      return "point";
    }
    else if (type === "esriGeometryPolyline") {
      return "line";
    }
    else {
      return "unknown";
    }
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisFloorConfigurationLayerPickerCss = "calcite-label span{width:100%;display:flex;justify-content:space-between}calcite-label span calcite-action{margin-left:0.3em}.arcgis--rtl calcite-label span calcite-action{margin-left:auto;margin-right:0.3em}";

const ArcgisLayerPicker = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.listChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "listChange", 7);
    this.selectedLayer = undefined;
    this.view = undefined;
    this.iconEnd = "pencil";
    this.label = undefined;
    this.placement = "bottom-start";
    this.open = false;
    this.strings = undefined;
    this.requiredFields = undefined;
    this.geometryType = "polygon";
  }
  //--------------------------------------------------------------------------
  //
  //  Events
  //
  //--------------------------------------------------------------------------
  calcitePopoverCloseHandler() {
    this.open = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Public
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    if (this.panel) {
      return this.panel.setFocus();
    }
    else {
      return Promise.resolve();
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { selectedLayer } = this;
    const buttonText = (selectedLayer === null || selectedLayer === void 0 ? void 0 : selectedLayer.title) || this.strings.none;
    const layers = this.getLayers();
    const disabled = this.open || !(layers === null || layers === void 0 ? void 0 : layers.length);
    const selection = new Map();
    if (selectedLayer) {
      selection.set(selectedLayer.id, selectedLayer);
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.label, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", alignment: "icon-end-space-between", kind: "neutral", scale: "m", "icon-end": "pencil", width: "full", disabled: disabled, ref: (el) => (this.triggerButton = el), onClick: () => {
        this.open = !this.open;
        setTimeout(() => this.setFocus(), 25);
      } }, buttonText), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "x", scale: "s", text: this.strings.clear, disabled: !this.selectedLayer, onClick: () => {
        this.selectedLayer = null;
        this.listChange.emit();
      } }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { label: this.label, pointerDisabled: true, referenceElement: this.triggerButton, open: this.open, placement: this.placement, ref: (el) => (this.popoverNode = el) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: this.label, closed: false, "width-scale": "m", "height-scale": "m", ref: (el) => (this.panel = el) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-floor-configuration-layer-list", { strings: this.strings, layers: layers, selection: selection, onListChange: (e) => (this.selectedLayer = e === null || e === void 0 ? void 0 : e.detail[0]) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { width: "full", slot: "footer", onClick: () => (this.open = false) }, this.strings.done)))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  getLayers() {
    const compatibleLayers = this.getCompatibleLayers();
    return (compatibleLayers === null || compatibleLayers === void 0 ? void 0 : compatibleLayers.length)
      ? compatibleLayers.filter((layer) => this.checkRequiredFields(layer))
      : [];
  }
  getCompatibleLayers() {
    const { geometryType } = this;
    const { map } = this.view;
    const { allLayers } = map;
    let compatibleLayers = [];
    allLayers.forEach((layer) => {
      const { type } = layer;
      if (type === "map-image") {
        const { allSublayers } = layer;
        compatibleLayers = compatibleLayers.concat(allSublayers.filter((subLayer) => subLayer.fieldsIndex).toArray());
      }
      else if ((type === "feature" && !geometryType) || (layer === null || layer === void 0 ? void 0 : layer.geometryType) === geometryType) {
        compatibleLayers.push(layer);
      }
    });
    return compatibleLayers;
  }
  checkRequiredFields(layer) {
    const { requiredFields } = this;
    const { fieldsIndex } = layer;
    return requiredFields && fieldsIndex
      ? requiredFields.every((fieldName) => fieldsIndex.get(fieldName))
      : true;
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerPicker.style = arcgisFloorConfigurationLayerPickerCss;

const arcgisFloorConfigurationReplaceFieldCss = "section{padding:0.5rem 0.75rem;background-color:white}";

const ArcgisFloorReplaceField = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.view = undefined;
    this.layer = undefined;
    this.strings = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Public
  //
  //--------------------------------------------------------------------------
  async commit() {
    return new Promise(async (resolve) => {
      const lists = Array.from(this.el.shadowRoot.querySelectorAll("arcgis-field-list"));
      lists.map((list) => setFloorInfo(list));
      resolve();
    });
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.renderPanel());
  }
  renderPanel() {
    const layer = this.layer;
    const field = this.findField(layer.floorInfo.floorField);
    const fieldSelection = new Map();
    fieldSelection.set(field.name, field);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-floor-configuration-field-list", { strings: this.strings, layer: layer, selection: fieldSelection })));
  }
  // --------------------------------------------------------------------------
  //
  //  Protected methods
  //
  // --------------------------------------------------------------------------
  findField(name) {
    const layer = this.layer;
    return layer.fieldsIndex.get(name);
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFloorReplaceField.style = arcgisFloorConfigurationReplaceFieldCss;

const arcgisFloorConfigurationSelectFieldsCss = "section{padding:0.5rem 0.75rem;background-color:white}";

const ArcgisFloorSelectFields = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.view = undefined;
    this.layers = undefined;
    this.strings = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async commit() {
    return new Promise(async (resolve) => {
      const selects = Array.from(this.el.shadowRoot.querySelectorAll("arcgis-floor-configuration-field-select"));
      selects.forEach((select) => setFloorInfo(select));
      resolve();
    });
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.renderPanel());
  }
  renderPanel() {
    const { layers } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", null, this.strings.selectMessage), layers.map((layer) => this.renderSelect(layer))));
  }
  renderSelect(layer) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-floor-configuration-field-select", { strings: this.strings, layer: layer });
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFloorSelectFields.style = arcgisFloorConfigurationSelectFieldsCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,