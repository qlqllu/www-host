"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-c6ab5f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-pick-list.entry.js":
/*!*************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-pick-list.entry.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_field_pick_list: () => (/* binding */ ArcgisFieldPickList)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */







const arcgisFieldPickListCss = ".popover{z-index:100}.panel{min-height:300px}.content{max-height:60vh}.selection-button-div{padding:4px 10px}";

const ArcgisFieldPickList = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisFieldPickListDismissed = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldPickListDismissed", 7);
    this.arcgisFieldPickListChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldPickListChange", 7);
    this.arcgisFieldPickListSortByChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldPickListSortByChange", 7);
    this.calciteValueList = (field) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: field.name, label: field.alias || field.name, description: (() => {
        if (this.showFieldName) {
          return `{${field.name}}`;
        }
        if (this.showDescription && field.description) {
          return field.description;
        }
        return null;
      })(), value: field.name, selected: (!this.multiple && field.name === this.selectedFields[0]) ||
        (this.multiple && this.selectedFields.indexOf(field.name) > -1), metadata: {
        label: field.alias,
        fieldName: field.name
      } }, this.showFieldInfoCheck(field) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: this.strings.info, title: this.strings.info, scale: "s", icon: "information", onClick: (event) => {
        var _a;
        event.stopPropagation();
        const action = event.target;
        const fieldInfoFlowItem = document.createElement("calcite-flow-item");
        fieldInfoFlowItem.heading = (_a = field.alias) !== null && _a !== void 0 ? _a : field.name;
        fieldInfoFlowItem.description = field.name;
        const fieldInfo = document.createElement("arcgis-field-info");
        fieldInfo.lang = this.currentLanguageIntl;
        fieldInfo.fieldName = field.name;
        fieldInfo.layer = this.layer;
        fieldInfo.view = this.mapView;
        fieldInfo.classList.add("content");
        fieldInfoFlowItem.appendChild(fieldInfo);
        fieldInfoFlowItem.addEventListener("calciteFlowItemBack", () => setTimeout(() => requestAnimationFrame(() => action.setFocus()), 200));
        this.flowElement.appendChild(fieldInfoFlowItem);
        setTimeout(() => requestAnimationFrame(() => fieldInfoFlowItem.setFocus()), 200);
      } }))));
    this.selectedFields = [];
    this.fields = undefined;
    this.popoverProps = undefined;
    this.layer = undefined;
    this.mapView = undefined;
    this.showFieldInfo = false;
    this.showFieldName = false;
    this.showDescription = false;
    this.showSelectionAll = false;
    this.showCancel = true;
    this.showSort = true;
    this.showFilterLength = 10;
    this.multiple = false;
    this.heading = undefined;
    this.okBtnText = undefined;
    this.filterPlaceholderText = undefined;
    this.sortBy = undefined;
    this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.default;
    this.filterFields = null;
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  async componentWillLoad() {
    const localeSettings = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
    this.strings = localeSettings[0];
    this.currentLanguage = localeSettings[1];
    this.currentLanguageIntl = localeSettings[2];
    // in case more than 1 selected field and multiple is set to false
    if (!this.multiple && this.selectedFields.length > 1) {
      this.selectedFields = [this.selectedFields[0]];
    }
    this.lastSortyBy = this.sortBy || this.lastSortyBy;
  }
  componentDidLoad() {
    this.setUpObserver();
    this.popoverNode.open = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 200);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  // temp: https://github.com/Esri/calcite-components/issues/4333
  calciteFilterChangeHandler(event) {
    var _a, _b;
    event.stopPropagation();
    const filterNode = (_a = event === null || event === void 0 ? void 0 : event.path) === null || _a === void 0 ? void 0 : _a.find((item) => item.nodeName === "CALCITE-FILTER");
    this.filterFields = (_b = filterNode === null || filterNode === void 0 ? void 0 : filterNode.filteredItems) === null || _b === void 0 ? void 0 : _b.map((item) => {
      return item.value;
    });
  }
  // --------------------------------------------------------------------------
  //
  // Public Methods
  //
  // --------------------------------------------------------------------------
  async setFocus() {
    setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 1);
  }
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  // --------------------------------------------------------------------------
  //
  // Private Methods
  //
  // --------------------------------------------------------------------------
  getSortedList() {
    const tempSorted = [...this.fields];
    if (this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.display) {
      tempSorted.sort((a, b) => a.alias.localeCompare(b.alias));
    }
    else if (this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.field) {
      tempSorted.sort((a, b) => a.name.localeCompare(b.name));
    }
    else if (this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.type) {
      tempSorted.sort((a, b) => a.type.localeCompare(b.type));
    }
    return tempSorted;
  }
  showFieldInfoCheck(field) {
    if (this.showFieldInfo) {
      // dont want info for arcade and relation fields
      if (field.name.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression) ||
        field.name.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.relationship)) {
        return false;
      }
      else {
        return true;
      }
    }
    else {
      return false;
    }
  }
  // return true for deselect all, false for select all
  selectDeselect() {
    var _a;
    return ((_a = this.filterFields) === null || _a === void 0 ? void 0 : _a.length)
      ? this.filterContainsAll()
      : this.selectedFields.length === this.fields.length;
  }
  // check if filter has all current field info
  filterContainsAll() {
    return this.filterFields.every((filter) => {
      return this.selectedFields.some((curr) => {
        return curr === filter;
      });
    });
  }
  // --------------------------------------------------------------------------
  //
  // Rendor  Methods
  //
  // --------------------------------------------------------------------------
  render() {
    var _a;
    const addBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: this.showCancel ? "solid" : "outline-fill", width: this.showCancel ? "half" : "full", scale: "m", onClick: () => {
        this.arcgisFieldPickListDismissed.emit({ selectedFields: this.selectedFields });
      } }, this.okBtnText || (this.multiple ? this.strings.done : this.strings.ok)));
    const cancelBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: "outline-fill", width: this.multiple ? "half" : "full", scale: "m", onClick: () => this.arcgisFieldPickListDismissed.emit() }, this.strings.cancel));
    const hasType = this.fields.every((field) => !!field.type);
    const sort = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { slot: "menu-actions", placement: "bottom-end", overlayPositioning: "fixed", ref: (node) => (this.dropdownNode = node), onCalciteDropdownOpen: () => {
        var _a;
        (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.observer.observe(this.popoverNode, { attributes: true });
      }, onCalciteDropdownClose: () => { var _a; return (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect(); } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", text: this.strings.sort, title: this.strings.sort }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.default, onClick: () => {
        this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.default;
        this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.default), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.display, onClick: () => {
        this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.display;
        this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.displayName), hasType && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.type, onClick: () => {
        this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.type;
        this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.type)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.field, onClick: () => {
        this.lastSortyBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.L.field;
        this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
      } }, this.strings.fieldName))));
    const selectionBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "selection-button-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", scale: "s", width: "full", onClick: () => {
        var _a, _b;
        if (this.selectDeselect()) {
          //deselect all
          this.selectedFields = ((_a = this.filterFields) === null || _a === void 0 ? void 0 : _a.length)
            ? this.selectedFields.filter((item) => !this.filterFields.includes(item))
            : [];
        }
        else {
          //select all
          this.selectedFields = ((_b = this.filterFields) === null || _b === void 0 ? void 0 : _b.length)
            ? [...new Set([...this.selectedFields, ...this.filterFields])]
            : this.fields.map((field) => {
              return field.name;
            });
        }
      } }, this.selectDeselect() ? this.strings.deselectAll : this.strings.selectAll)));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement), class: "popover", placement: this.popoverProps.placement || "leading-start", open: false, pointerDisabled: true, referenceElement: this.popoverProps.refElement, offsetDistance: this.popoverProps.offsetDistance ||
        -Math.round(this.popoverProps.refElement.getBoundingClientRect().width), offsetSkidding: this.popoverProps.offsetSkidding || 0, overlayPositioning: this.popoverProps.overlayPositioning, triggerDisabled: this.popoverProps.triggerDisabled, autoClose: this.popoverProps.autoClose, label: this.heading || (this.multiple ? this.strings.headerSelect : this.strings.header), onCalcitePopoverClose: () => this.arcgisFieldPickListDismissed.emit(), ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (node) => {
        this.flowElement = node;
      }, style: {
        width: `${this.popoverProps.popoverWidth ||
          this.popoverProps.refElement.getBoundingClientRect().width}px`
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.panelElement = el), class: "panel", heading: this.heading || (this.multiple ? this.strings.headerSelect : this.strings.header), closable: true, onCalciteFlowItemClose: () => this.arcgisFieldPickListDismissed.emit() }, this.multiple && addBtn, this.showCancel && cancelBtn, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { multiple: this.multiple, ref: (node) => {
        this.pickListNode = node;
      }, class: "content", filterEnabled: this.fields.length >= this.showFilterLength ? true : false, filterPlaceholder: (_a = this.filterPlaceholderText) !== null && _a !== void 0 ? _a : this.strings.filter, onCalciteListChange: async () => {
        // keep original order. Add addional values at the end
        const tempSelectedFields = await this.pickListNode.getSelectedItems();
        this.selectedFields = [
          ...new Set([
            ...this.selectedFields.filter((item) => {
              return tempSelectedFields.has(item);
            }),
            ...tempSelectedFields.keys()
          ])
        ];
        this.arcgisFieldPickListChange.emit({ selectedFields: this.selectedFields });
        if (!this.multiple) {
          this.arcgisFieldPickListDismissed.emit({ selectedFields: this.selectedFields });
        }
      } }, this.fields.length >= this.showFilterLength && this.showSort && sort, this.multiple && this.showSelectionAll && selectionBtn, [...this.getSortedList()].map((field) => {
      return this.calciteValueList(field);
    })))))));
  }
  // --------------------------------------------------------------------------
  //
  // Private  Methods
  //
  // --------------------------------------------------------------------------
  setUpObserver() {
    this.observer = new MutationObserver((mutationList /* , observer */) => {
      for (const mutation of mutationList) {
        if (mutation.attributeName === "style") {
          if (this.popoverNode.style.visibility === "hidden") {
            this.dropdownNode.open = false;
          }
        }
      }
    });
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFieldPickList.style = arcgisFieldPickListCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js":
/*!*****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ LastSortyBy),
/* harmony export */   a: () => (/* binding */ fieldTypesEnum),
/* harmony export */   f: () => (/* binding */ fieldInfoPrefixEnum),
/* harmony export */   i: () => (/* binding */ imageComponentInputTypesEnum),
/* harmony export */   l: () => (/* binding */ layerDisplayTypeEnum),
/* harmony export */   s: () => (/* binding */ serviceTypeEnum)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
var imageComponentInputTypesEnum;
(function (imageComponentInputTypesEnum) {
  imageComponentInputTypesEnum["sourceUrl"] = "sourceUrl";
  imageComponentInputTypesEnum["title"] = "title";
  imageComponentInputTypesEnum["caption"] = "caption";
  imageComponentInputTypesEnum["linkUrl"] = "linkUrl";
  imageComponentInputTypesEnum["altText"] = "altText";
})(imageComponentInputTypesEnum || (imageComponentInputTypesEnum = {}));
var fieldInfoPrefixEnum;
(function (fieldInfoPrefixEnum) {
  fieldInfoPrefixEnum["expression"] = "expression/";
  fieldInfoPrefixEnum["relationship"] = "relationships/";
  fieldInfoPrefixEnum["raster"] = "Raster.";
})(fieldInfoPrefixEnum || (fieldInfoPrefixEnum = {}));
var layerDisplayTypeEnum;
(function (layerDisplayTypeEnum) {
  layerDisplayTypeEnum["feature"] = "feature";
  layerDisplayTypeEnum["cluster"] = "cluster";
  layerDisplayTypeEnum["mapNotes"] = "mapNotes";
})(layerDisplayTypeEnum || (layerDisplayTypeEnum = {}));
var serviceTypeEnum;
(function (serviceTypeEnum) {
  serviceTypeEnum["feature"] = "feature";
  serviceTypeEnum["mapImage"] = "map-image";
  serviceTypeEnum["scene"] = "scene";
  serviceTypeEnum["ogcFeature"] = "ogc-feature";
  serviceTypeEnum["imagery"] = "imagery";
  serviceTypeEnum["wfs"] = "wfs";
  serviceTypeEnum["wms"] = "wms";
  serviceTypeEnum["csv"] = "csv";
  serviceTypeEnum["geojson"] = "geojson";
  serviceTypeEnum["stream"] = "stream";
  serviceTypeEnum["imageryTile"] = "imagery-tile";
  serviceTypeEnum["tile"] = "tile";
  serviceTypeEnum["subtype"] = "subtype";
})(serviceTypeEnum || (serviceTypeEnum = {}));
// https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#type
var fieldTypesEnum;
(function (fieldTypesEnum) {
  fieldTypesEnum["integer"] = "integer";
  fieldTypesEnum["smallInteger"] = "small-integer";
  fieldTypesEnum["bigInteger"] = "big-integer";
  fieldTypesEnum["single"] = "single";
  fieldTypesEnum["double"] = "double";
  fieldTypesEnum["long"] = "long";
  fieldTypesEnum["string"] = "string";
  fieldTypesEnum["date"] = "date";
  fieldTypesEnum["dateOnly"] = "date-only";
  fieldTypesEnum["timeOnly"] = "time-only";
  fieldTypesEnum["timestampOffset"] = "timestamp-offset";
  fieldTypesEnum["oid"] = "oid";
  fieldTypesEnum["guid"] = "guid";
  fieldTypesEnum["globalId"] = "global-id";
  fieldTypesEnum["number"] = "number"; // for arcade
})(fieldTypesEnum || (fieldTypesEnum = {}));
var LastSortyBy;
(function (LastSortyBy) {
  LastSortyBy["default"] = "default";
  LastSortyBy["display"] = "display";
  LastSortyBy["type"] = "type";
  LastSortyBy["field"] = "field";
})(LastSortyBy || (LastSortyBy = {}));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWM2YWI1Zi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNkc7QUFDN0M7QUFDdUI7QUFDakI7QUFDbkM7QUFDUjs7QUFFM0IseUNBQXlDLFlBQVksT0FBTyxpQkFBaUIsU0FBUyxnQkFBZ0Isc0JBQXNCLGlCQUFpQjs7QUFFN0k7QUFDQTtBQUNBLElBQUkscURBQWdCO0FBQ3BCLHdDQUF3QyxxREFBVztBQUNuRCxxQ0FBcUMscURBQVc7QUFDaEQsMkNBQTJDLHFEQUFXO0FBQ3RELHdDQUF3QyxxREFBQyw2QkFBNkI7QUFDdEU7QUFDQSxtQkFBbUIsRUFBRSxZQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUyxxQ0FBcUMscURBQUMscUJBQXFCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdURBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxzREFBeUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QSxRQUFRLHdEQUFXO0FBQ25CLGFBQWEsd0RBQVc7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsbURBQWlDO0FBQ2hFO0FBQ0E7QUFDQSxNQUFNLHdEQUFXO0FBQ2pCLFdBQVcsd0RBQVc7QUFDdEI7QUFDQTtBQUNBLFFBQVEsd0RBQVc7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUscURBQVksOEJBQThCLGNBQWMsUUFBUSxPQUFPO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYyxFQUFFLE9BQU87QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGVBQWUsR0FBRyxrQkFBa0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRTRFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vYXJjZ2lzLWZpZWxkLXBpY2stbGlzdC5lbnRyeS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9jb21tb25FbnVtcy1mOThhMzIzYy5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sYW5ndWFnZVV0aWwtMjIyNThjOTAuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vbG9jYWxlLTEzZTAwYTc1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBjIGFzIGNyZWF0ZUV2ZW50LCBoLCBIIGFzIEhvc3QsIGQgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtOTJlYmIzOTYuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRFbGVtZW50RGlyIH0gZnJvbSAnLi9sYW5ndWFnZVV0aWwtMjIyNThjOTAuanMnO1xuaW1wb3J0IHsgTCBhcyBMYXN0U29ydHlCeSwgZiBhcyBmaWVsZEluZm9QcmVmaXhFbnVtIH0gZnJvbSAnLi9jb21tb25FbnVtcy1mOThhMzIzYy5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgfSBmcm9tICcuL2xvY2FsZS0xM2UwMGE3NS5qcyc7XG5pbXBvcnQgJy4vbG9hZE1vZHVsZXMtYWFmMzBiZDYuanMnO1xuaW1wb3J0ICcuL2RvbS0xM2Y1YjAwYy5qcyc7XG5cbmNvbnN0IGFyY2dpc0ZpZWxkUGlja0xpc3RDc3MgPSBcIi5wb3BvdmVye3otaW5kZXg6MTAwfS5wYW5lbHttaW4taGVpZ2h0OjMwMHB4fS5jb250ZW50e21heC1oZWlnaHQ6NjB2aH0uc2VsZWN0aW9uLWJ1dHRvbi1kaXZ7cGFkZGluZzo0cHggMTBweH1cIjtcblxuY29uc3QgQXJjZ2lzRmllbGRQaWNrTGlzdCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0RGlzbWlzc2VkID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNGaWVsZFBpY2tMaXN0RGlzbWlzc2VkXCIsIDcpO1xuICAgIHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdENoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzRmllbGRQaWNrTGlzdENoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3RTb3J0QnlDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0ZpZWxkUGlja0xpc3RTb3J0QnlDaGFuZ2VcIiwgNyk7XG4gICAgdGhpcy5jYWxjaXRlVmFsdWVMaXN0ID0gKGZpZWxkKSA9PiAoaChcImNhbGNpdGUtcGljay1saXN0LWl0ZW1cIiwgeyBrZXk6IGZpZWxkLm5hbWUsIGxhYmVsOiBmaWVsZC5hbGlhcyB8fCBmaWVsZC5uYW1lLCBkZXNjcmlwdGlvbjogKCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd0ZpZWxkTmFtZSkge1xuICAgICAgICAgIHJldHVybiBgeyR7ZmllbGQubmFtZX19YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zaG93RGVzY3JpcHRpb24gJiYgZmllbGQuZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gZmllbGQuZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KSgpLCB2YWx1ZTogZmllbGQubmFtZSwgc2VsZWN0ZWQ6ICghdGhpcy5tdWx0aXBsZSAmJiBmaWVsZC5uYW1lID09PSB0aGlzLnNlbGVjdGVkRmllbGRzWzBdKSB8fFxuICAgICAgICAodGhpcy5tdWx0aXBsZSAmJiB0aGlzLnNlbGVjdGVkRmllbGRzLmluZGV4T2YoZmllbGQubmFtZSkgPiAtMSksIG1ldGFkYXRhOiB7XG4gICAgICAgIGxhYmVsOiBmaWVsZC5hbGlhcyxcbiAgICAgICAgZmllbGROYW1lOiBmaWVsZC5uYW1lXG4gICAgICB9IH0sIHRoaXMuc2hvd0ZpZWxkSW5mb0NoZWNrKGZpZWxkKSAmJiAoaChcImNhbGNpdGUtYWN0aW9uXCIsIHsgc2xvdDogXCJhY3Rpb25zLWVuZFwiLCB0ZXh0OiB0aGlzLnN0cmluZ3MuaW5mbywgdGl0bGU6IHRoaXMuc3RyaW5ncy5pbmZvLCBzY2FsZTogXCJzXCIsIGljb246IFwiaW5mb3JtYXRpb25cIiwgb25DbGljazogKGV2ZW50KSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgY29uc3QgZmllbGRJbmZvRmxvd0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FsY2l0ZS1mbG93LWl0ZW1cIik7XG4gICAgICAgIGZpZWxkSW5mb0Zsb3dJdGVtLmhlYWRpbmcgPSAoX2EgPSBmaWVsZC5hbGlhcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmllbGQubmFtZTtcbiAgICAgICAgZmllbGRJbmZvRmxvd0l0ZW0uZGVzY3JpcHRpb24gPSBmaWVsZC5uYW1lO1xuICAgICAgICBjb25zdCBmaWVsZEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXJjZ2lzLWZpZWxkLWluZm9cIik7XG4gICAgICAgIGZpZWxkSW5mby5sYW5nID0gdGhpcy5jdXJyZW50TGFuZ3VhZ2VJbnRsO1xuICAgICAgICBmaWVsZEluZm8uZmllbGROYW1lID0gZmllbGQubmFtZTtcbiAgICAgICAgZmllbGRJbmZvLmxheWVyID0gdGhpcy5sYXllcjtcbiAgICAgICAgZmllbGRJbmZvLnZpZXcgPSB0aGlzLm1hcFZpZXc7XG4gICAgICAgIGZpZWxkSW5mby5jbGFzc0xpc3QuYWRkKFwiY29udGVudFwiKTtcbiAgICAgICAgZmllbGRJbmZvRmxvd0l0ZW0uYXBwZW5kQ2hpbGQoZmllbGRJbmZvKTtcbiAgICAgICAgZmllbGRJbmZvRmxvd0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNhbGNpdGVGbG93SXRlbUJhY2tcIiwgKCkgPT4gc2V0VGltZW91dCgoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gYWN0aW9uLnNldEZvY3VzKCkpLCAyMDApKTtcbiAgICAgICAgdGhpcy5mbG93RWxlbWVudC5hcHBlbmRDaGlsZChmaWVsZEluZm9GbG93SXRlbSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IGZpZWxkSW5mb0Zsb3dJdGVtLnNldEZvY3VzKCkpLCAyMDApO1xuICAgICAgfSB9KSkpKTtcbiAgICB0aGlzLnNlbGVjdGVkRmllbGRzID0gW107XG4gICAgdGhpcy5maWVsZHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wb3BvdmVyUHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYXllciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1hcFZpZXcgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zaG93RmllbGRJbmZvID0gZmFsc2U7XG4gICAgdGhpcy5zaG93RmllbGROYW1lID0gZmFsc2U7XG4gICAgdGhpcy5zaG93RGVzY3JpcHRpb24gPSBmYWxzZTtcbiAgICB0aGlzLnNob3dTZWxlY3Rpb25BbGwgPSBmYWxzZTtcbiAgICB0aGlzLnNob3dDYW5jZWwgPSB0cnVlO1xuICAgIHRoaXMuc2hvd1NvcnQgPSB0cnVlO1xuICAgIHRoaXMuc2hvd0ZpbHRlckxlbmd0aCA9IDEwO1xuICAgIHRoaXMubXVsdGlwbGUgPSBmYWxzZTtcbiAgICB0aGlzLmhlYWRpbmcgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5va0J0blRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5maWx0ZXJQbGFjZWhvbGRlclRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zb3J0QnkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYXN0U29ydHlCeSA9IExhc3RTb3J0eUJ5LmRlZmF1bHQ7XG4gICAgdGhpcy5maWx0ZXJGaWVsZHMgPSBudWxsO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBMaWZlY3ljbGVcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgY29uc3QgbG9jYWxlU2V0dGluZ3MgPSBhd2FpdCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgIHRoaXMuc3RyaW5ncyA9IGxvY2FsZVNldHRpbmdzWzBdO1xuICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gbG9jYWxlU2V0dGluZ3NbMV07XG4gICAgdGhpcy5jdXJyZW50TGFuZ3VhZ2VJbnRsID0gbG9jYWxlU2V0dGluZ3NbMl07XG4gICAgLy8gaW4gY2FzZSBtb3JlIHRoYW4gMSBzZWxlY3RlZCBmaWVsZCBhbmQgbXVsdGlwbGUgaXMgc2V0IHRvIGZhbHNlXG4gICAgaWYgKCF0aGlzLm11bHRpcGxlICYmIHRoaXMuc2VsZWN0ZWRGaWVsZHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkcyA9IFt0aGlzLnNlbGVjdGVkRmllbGRzWzBdXTtcbiAgICB9XG4gICAgdGhpcy5sYXN0U29ydHlCeSA9IHRoaXMuc29ydEJ5IHx8IHRoaXMubGFzdFNvcnR5Qnk7XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLnNldFVwT2JzZXJ2ZXIoKTtcbiAgICB0aGlzLnBvcG92ZXJOb2RlLm9wZW4gPSB0cnVlO1xuICAgIC8vIG5lZWQgdGltZW91dCBiZWNhdXNlIG9mIHJlLXJlbmRlclxuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMucGFuZWxFbGVtZW50LnNldEZvY3VzKCkpLCAyMDApO1xuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSB0aGlzLm9ic2VydmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGlzY29ubmVjdCgpO1xuICB9XG4gIC8vIHRlbXA6IGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtY29tcG9uZW50cy9pc3N1ZXMvNDMzM1xuICBjYWxjaXRlRmlsdGVyQ2hhbmdlSGFuZGxlcihldmVudCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3QgZmlsdGVyTm9kZSA9IChfYSA9IGV2ZW50ID09PSBudWxsIHx8IGV2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudC5wYXRoKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluZCgoaXRlbSkgPT4gaXRlbS5ub2RlTmFtZSA9PT0gXCJDQUxDSVRFLUZJTFRFUlwiKTtcbiAgICB0aGlzLmZpbHRlckZpZWxkcyA9IChfYiA9IGZpbHRlck5vZGUgPT09IG51bGwgfHwgZmlsdGVyTm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmlsdGVyTm9kZS5maWx0ZXJlZEl0ZW1zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFwKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9KTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyBQdWJsaWMgTWV0aG9kc1xuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnBhbmVsRWxlbWVudC5zZXRGb2N1cygpKSwgMSk7XG4gIH1cbiAgYXN5bmMgcmVwb3NpdGlvbigpIHtcbiAgICB2YXIgX2E7XG4gICAgKF9hID0gdGhpcy5wb3BvdmVyTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcG9zaXRpb24oKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyBQcml2YXRlIE1ldGhvZHNcbiAgLy9cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgZ2V0U29ydGVkTGlzdCgpIHtcbiAgICBjb25zdCB0ZW1wU29ydGVkID0gWy4uLnRoaXMuZmllbGRzXTtcbiAgICBpZiAodGhpcy5sYXN0U29ydHlCeSA9PT0gTGFzdFNvcnR5QnkuZGlzcGxheSkge1xuICAgICAgdGVtcFNvcnRlZC5zb3J0KChhLCBiKSA9PiBhLmFsaWFzLmxvY2FsZUNvbXBhcmUoYi5hbGlhcykpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmxhc3RTb3J0eUJ5ID09PSBMYXN0U29ydHlCeS5maWVsZCkge1xuICAgICAgdGVtcFNvcnRlZC5zb3J0KChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5sYXN0U29ydHlCeSA9PT0gTGFzdFNvcnR5QnkudHlwZSkge1xuICAgICAgdGVtcFNvcnRlZC5zb3J0KChhLCBiKSA9PiBhLnR5cGUubG9jYWxlQ29tcGFyZShiLnR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXBTb3J0ZWQ7XG4gIH1cbiAgc2hvd0ZpZWxkSW5mb0NoZWNrKGZpZWxkKSB7XG4gICAgaWYgKHRoaXMuc2hvd0ZpZWxkSW5mbykge1xuICAgICAgLy8gZG9udCB3YW50IGluZm8gZm9yIGFyY2FkZSBhbmQgcmVsYXRpb24gZmllbGRzXG4gICAgICBpZiAoZmllbGQubmFtZS5pbmNsdWRlcyhmaWVsZEluZm9QcmVmaXhFbnVtLmV4cHJlc3Npb24pIHx8XG4gICAgICAgIGZpZWxkLm5hbWUuaW5jbHVkZXMoZmllbGRJbmZvUHJlZml4RW51bS5yZWxhdGlvbnNoaXApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIHJldHVybiB0cnVlIGZvciBkZXNlbGVjdCBhbGwsIGZhbHNlIGZvciBzZWxlY3QgYWxsXG4gIHNlbGVjdERlc2VsZWN0KCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IHRoaXMuZmlsdGVyRmllbGRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKVxuICAgICAgPyB0aGlzLmZpbHRlckNvbnRhaW5zQWxsKClcbiAgICAgIDogdGhpcy5zZWxlY3RlZEZpZWxkcy5sZW5ndGggPT09IHRoaXMuZmllbGRzLmxlbmd0aDtcbiAgfVxuICAvLyBjaGVjayBpZiBmaWx0ZXIgaGFzIGFsbCBjdXJyZW50IGZpZWxkIGluZm9cbiAgZmlsdGVyQ29udGFpbnNBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyRmllbGRzLmV2ZXJ5KChmaWx0ZXIpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkRmllbGRzLnNvbWUoKGN1cnIpID0+IHtcbiAgICAgICAgcmV0dXJuIGN1cnIgPT09IGZpbHRlcjtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vIFJlbmRvciAgTWV0aG9kc1xuICAvL1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICByZW5kZXIoKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFkZEJ0biA9IChoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBzbG90OiBcImZvb3RlclwiLCBhcHBlYXJhbmNlOiB0aGlzLnNob3dDYW5jZWwgPyBcInNvbGlkXCIgOiBcIm91dGxpbmUtZmlsbFwiLCB3aWR0aDogdGhpcy5zaG93Q2FuY2VsID8gXCJoYWxmXCIgOiBcImZ1bGxcIiwgc2NhbGU6IFwibVwiLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdERpc21pc3NlZC5lbWl0KHsgc2VsZWN0ZWRGaWVsZHM6IHRoaXMuc2VsZWN0ZWRGaWVsZHMgfSk7XG4gICAgICB9IH0sIHRoaXMub2tCdG5UZXh0IHx8ICh0aGlzLm11bHRpcGxlID8gdGhpcy5zdHJpbmdzLmRvbmUgOiB0aGlzLnN0cmluZ3Mub2spKSk7XG4gICAgY29uc3QgY2FuY2VsQnRuID0gKGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IHNsb3Q6IFwiZm9vdGVyXCIsIGFwcGVhcmFuY2U6IFwib3V0bGluZS1maWxsXCIsIHdpZHRoOiB0aGlzLm11bHRpcGxlID8gXCJoYWxmXCIgOiBcImZ1bGxcIiwgc2NhbGU6IFwibVwiLCBvbkNsaWNrOiAoKSA9PiB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3REaXNtaXNzZWQuZW1pdCgpIH0sIHRoaXMuc3RyaW5ncy5jYW5jZWwpKTtcbiAgICBjb25zdCBoYXNUeXBlID0gdGhpcy5maWVsZHMuZXZlcnkoKGZpZWxkKSA9PiAhIWZpZWxkLnR5cGUpO1xuICAgIGNvbnN0IHNvcnQgPSAoaChcImNhbGNpdGUtZHJvcGRvd25cIiwgeyBzbG90OiBcIm1lbnUtYWN0aW9uc1wiLCBwbGFjZW1lbnQ6IFwiYm90dG9tLWVuZFwiLCBvdmVybGF5UG9zaXRpb25pbmc6IFwiZml4ZWRcIiwgcmVmOiAobm9kZSkgPT4gKHRoaXMuZHJvcGRvd25Ob2RlID0gbm9kZSksIG9uQ2FsY2l0ZURyb3Bkb3duT3BlbjogKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMub2JzZXJ2ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNjb25uZWN0KCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnBvcG92ZXJOb2RlLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgICB9LCBvbkNhbGNpdGVEcm9wZG93bkNsb3NlOiAoKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHRoaXMub2JzZXJ2ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNjb25uZWN0KCk7IH0gfSwgaChcImNhbGNpdGUtYWN0aW9uXCIsIHsgc2xvdDogXCJ0cmlnZ2VyXCIsIHRleHQ6IHRoaXMuc3RyaW5ncy5zb3J0LCB0aXRsZTogdGhpcy5zdHJpbmdzLnNvcnQgfSwgaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogXCJzb3J0RGVzY2VuZGluZ1wiIH0pKSwgaChcImNhbGNpdGUtZHJvcGRvd24tZ3JvdXBcIiwgbnVsbCwgaChcImNhbGNpdGUtZHJvcGRvd24taXRlbVwiLCB7IHNlbGVjdGVkOiB0aGlzLmxhc3RTb3J0eUJ5ID09PSBMYXN0U29ydHlCeS5kZWZhdWx0LCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMubGFzdFNvcnR5QnkgPSBMYXN0U29ydHlCeS5kZWZhdWx0O1xuICAgICAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3RTb3J0QnlDaGFuZ2UuZW1pdCh0aGlzLmxhc3RTb3J0eUJ5KTtcbiAgICAgIH0gfSwgdGhpcy5zdHJpbmdzLmRlZmF1bHQpLCBoKFwiY2FsY2l0ZS1kcm9wZG93bi1pdGVtXCIsIHsgc2VsZWN0ZWQ6IHRoaXMubGFzdFNvcnR5QnkgPT09IExhc3RTb3J0eUJ5LmRpc3BsYXksIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgdGhpcy5sYXN0U29ydHlCeSA9IExhc3RTb3J0eUJ5LmRpc3BsYXk7XG4gICAgICAgIHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdFNvcnRCeUNoYW5nZS5lbWl0KHRoaXMubGFzdFNvcnR5QnkpO1xuICAgICAgfSB9LCB0aGlzLnN0cmluZ3MuZGlzcGxheU5hbWUpLCBoYXNUeXBlICYmIChoKFwiY2FsY2l0ZS1kcm9wZG93bi1pdGVtXCIsIHsgc2VsZWN0ZWQ6IHRoaXMubGFzdFNvcnR5QnkgPT09IExhc3RTb3J0eUJ5LnR5cGUsIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgdGhpcy5sYXN0U29ydHlCeSA9IExhc3RTb3J0eUJ5LnR5cGU7XG4gICAgICAgIHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdFNvcnRCeUNoYW5nZS5lbWl0KHRoaXMubGFzdFNvcnR5QnkpO1xuICAgICAgfSB9LCB0aGlzLnN0cmluZ3MudHlwZSkpLCBoKFwiY2FsY2l0ZS1kcm9wZG93bi1pdGVtXCIsIHsgc2VsZWN0ZWQ6IHRoaXMubGFzdFNvcnR5QnkgPT09IExhc3RTb3J0eUJ5LmZpZWxkLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMubGFzdFNvcnR5QnkgPSBMYXN0U29ydHlCeS5maWVsZDtcbiAgICAgICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0U29ydEJ5Q2hhbmdlLmVtaXQodGhpcy5sYXN0U29ydHlCeSk7XG4gICAgICB9IH0sIHRoaXMuc3RyaW5ncy5maWVsZE5hbWUpKSkpO1xuICAgIGNvbnN0IHNlbGVjdGlvbkJ0biA9IChoKFwiZGl2XCIsIHsgY2xhc3M6IFwic2VsZWN0aW9uLWJ1dHRvbi1kaXZcIiB9LCBoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBhcHBlYXJhbmNlOiBcInRyYW5zcGFyZW50XCIsIHNjYWxlOiBcInNcIiwgd2lkdGg6IFwiZnVsbFwiLCBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdERlc2VsZWN0KCkpIHtcbiAgICAgICAgICAvL2Rlc2VsZWN0IGFsbFxuICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZHMgPSAoKF9hID0gdGhpcy5maWx0ZXJGaWVsZHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpXG4gICAgICAgICAgICA/IHRoaXMuc2VsZWN0ZWRGaWVsZHMuZmlsdGVyKChpdGVtKSA9PiAhdGhpcy5maWx0ZXJGaWVsZHMuaW5jbHVkZXMoaXRlbSkpXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vc2VsZWN0IGFsbFxuICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZHMgPSAoKF9iID0gdGhpcy5maWx0ZXJGaWVsZHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpXG4gICAgICAgICAgICA/IFsuLi5uZXcgU2V0KFsuLi50aGlzLnNlbGVjdGVkRmllbGRzLCAuLi50aGlzLmZpbHRlckZpZWxkc10pXVxuICAgICAgICAgICAgOiB0aGlzLmZpZWxkcy5tYXAoKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBmaWVsZC5uYW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gfSwgdGhpcy5zZWxlY3REZXNlbGVjdCgpID8gdGhpcy5zdHJpbmdzLmRlc2VsZWN0QWxsIDogdGhpcy5zdHJpbmdzLnNlbGVjdEFsbCkpKTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBjbGFzczogXCJqcy1hcHAtZmx5b3V0XCIgfSwgaChcImNhbGNpdGUtcG9wb3ZlclwiLCB7IGRpcjogZ2V0RWxlbWVudERpcih0aGlzLmhvc3RFbGVtZW50KSwgY2xhc3M6IFwicG9wb3ZlclwiLCBwbGFjZW1lbnQ6IHRoaXMucG9wb3ZlclByb3BzLnBsYWNlbWVudCB8fCBcImxlYWRpbmctc3RhcnRcIiwgb3BlbjogZmFsc2UsIHBvaW50ZXJEaXNhYmxlZDogdHJ1ZSwgcmVmZXJlbmNlRWxlbWVudDogdGhpcy5wb3BvdmVyUHJvcHMucmVmRWxlbWVudCwgb2Zmc2V0RGlzdGFuY2U6IHRoaXMucG9wb3ZlclByb3BzLm9mZnNldERpc3RhbmNlIHx8XG4gICAgICAgIC1NYXRoLnJvdW5kKHRoaXMucG9wb3ZlclByb3BzLnJlZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpLCBvZmZzZXRTa2lkZGluZzogdGhpcy5wb3BvdmVyUHJvcHMub2Zmc2V0U2tpZGRpbmcgfHwgMCwgb3ZlcmxheVBvc2l0aW9uaW5nOiB0aGlzLnBvcG92ZXJQcm9wcy5vdmVybGF5UG9zaXRpb25pbmcsIHRyaWdnZXJEaXNhYmxlZDogdGhpcy5wb3BvdmVyUHJvcHMudHJpZ2dlckRpc2FibGVkLCBhdXRvQ2xvc2U6IHRoaXMucG9wb3ZlclByb3BzLmF1dG9DbG9zZSwgbGFiZWw6IHRoaXMuaGVhZGluZyB8fCAodGhpcy5tdWx0aXBsZSA/IHRoaXMuc3RyaW5ncy5oZWFkZXJTZWxlY3QgOiB0aGlzLnN0cmluZ3MuaGVhZGVyKSwgb25DYWxjaXRlUG9wb3ZlckNsb3NlOiAoKSA9PiB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3REaXNtaXNzZWQuZW1pdCgpLCByZWY6IChub2RlKSA9PiAodGhpcy5wb3BvdmVyTm9kZSA9IG5vZGUpIH0sIGgoXCJjYWxjaXRlLWZsb3dcIiwgeyByZWY6IChub2RlKSA9PiB7XG4gICAgICAgIHRoaXMuZmxvd0VsZW1lbnQgPSBub2RlO1xuICAgICAgfSwgc3R5bGU6IHtcbiAgICAgICAgd2lkdGg6IGAke3RoaXMucG9wb3ZlclByb3BzLnBvcG92ZXJXaWR0aCB8fFxuICAgICAgICAgIHRoaXMucG9wb3ZlclByb3BzLnJlZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGh9cHhgXG4gICAgICB9IH0sIGgoXCJjYWxjaXRlLWZsb3ctaXRlbVwiLCB7IHJlZjogKGVsKSA9PiAodGhpcy5wYW5lbEVsZW1lbnQgPSBlbCksIGNsYXNzOiBcInBhbmVsXCIsIGhlYWRpbmc6IHRoaXMuaGVhZGluZyB8fCAodGhpcy5tdWx0aXBsZSA/IHRoaXMuc3RyaW5ncy5oZWFkZXJTZWxlY3QgOiB0aGlzLnN0cmluZ3MuaGVhZGVyKSwgY2xvc2FibGU6IHRydWUsIG9uQ2FsY2l0ZUZsb3dJdGVtQ2xvc2U6ICgpID0+IHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdERpc21pc3NlZC5lbWl0KCkgfSwgdGhpcy5tdWx0aXBsZSAmJiBhZGRCdG4sIHRoaXMuc2hvd0NhbmNlbCAmJiBjYW5jZWxCdG4sIGgoXCJjYWxjaXRlLXBpY2stbGlzdFwiLCB7IG11bHRpcGxlOiB0aGlzLm11bHRpcGxlLCByZWY6IChub2RlKSA9PiB7XG4gICAgICAgIHRoaXMucGlja0xpc3ROb2RlID0gbm9kZTtcbiAgICAgIH0sIGNsYXNzOiBcImNvbnRlbnRcIiwgZmlsdGVyRW5hYmxlZDogdGhpcy5maWVsZHMubGVuZ3RoID49IHRoaXMuc2hvd0ZpbHRlckxlbmd0aCA/IHRydWUgOiBmYWxzZSwgZmlsdGVyUGxhY2Vob2xkZXI6IChfYSA9IHRoaXMuZmlsdGVyUGxhY2Vob2xkZXJUZXh0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnN0cmluZ3MuZmlsdGVyLCBvbkNhbGNpdGVMaXN0Q2hhbmdlOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIGtlZXAgb3JpZ2luYWwgb3JkZXIuIEFkZCBhZGRpb25hbCB2YWx1ZXMgYXQgdGhlIGVuZFxuICAgICAgICBjb25zdCB0ZW1wU2VsZWN0ZWRGaWVsZHMgPSBhd2FpdCB0aGlzLnBpY2tMaXN0Tm9kZS5nZXRTZWxlY3RlZEl0ZW1zKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZHMgPSBbXG4gICAgICAgICAgLi4ubmV3IFNldChbXG4gICAgICAgICAgICAuLi50aGlzLnNlbGVjdGVkRmllbGRzLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gdGVtcFNlbGVjdGVkRmllbGRzLmhhcyhpdGVtKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgLi4udGVtcFNlbGVjdGVkRmllbGRzLmtleXMoKVxuICAgICAgICAgIF0pXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdENoYW5nZS5lbWl0KHsgc2VsZWN0ZWRGaWVsZHM6IHRoaXMuc2VsZWN0ZWRGaWVsZHMgfSk7XG4gICAgICAgIGlmICghdGhpcy5tdWx0aXBsZSkge1xuICAgICAgICAgIHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdERpc21pc3NlZC5lbWl0KHsgc2VsZWN0ZWRGaWVsZHM6IHRoaXMuc2VsZWN0ZWRGaWVsZHMgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gfSwgdGhpcy5maWVsZHMubGVuZ3RoID49IHRoaXMuc2hvd0ZpbHRlckxlbmd0aCAmJiB0aGlzLnNob3dTb3J0ICYmIHNvcnQsIHRoaXMubXVsdGlwbGUgJiYgdGhpcy5zaG93U2VsZWN0aW9uQWxsICYmIHNlbGVjdGlvbkJ0biwgWy4uLnRoaXMuZ2V0U29ydGVkTGlzdCgpXS5tYXAoKGZpZWxkKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxjaXRlVmFsdWVMaXN0KGZpZWxkKTtcbiAgICB9KSkpKSkpKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyBQcml2YXRlICBNZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHNldFVwT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbkxpc3QgLyogLCBvYnNlcnZlciAqLykgPT4ge1xuICAgICAgZm9yIChjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbkxpc3QpIHtcbiAgICAgICAgaWYgKG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgPT09IFwic3R5bGVcIikge1xuICAgICAgICAgIGlmICh0aGlzLnBvcG92ZXJOb2RlLnN0eWxlLnZpc2liaWxpdHkgPT09IFwiaGlkZGVuXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25Ob2RlLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBnZXQgaG9zdEVsZW1lbnQoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzRmllbGRQaWNrTGlzdC5zdHlsZSA9IGFyY2dpc0ZpZWxkUGlja0xpc3RDc3M7XG5cbmV4cG9ydCB7IEFyY2dpc0ZpZWxkUGlja0xpc3QgYXMgYXJjZ2lzX2ZpZWxkX3BpY2tfbGlzdCB9O1xuIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG52YXIgaW1hZ2VDb21wb25lbnRJbnB1dFR5cGVzRW51bTtcbihmdW5jdGlvbiAoaW1hZ2VDb21wb25lbnRJbnB1dFR5cGVzRW51bSkge1xuICBpbWFnZUNvbXBvbmVudElucHV0VHlwZXNFbnVtW1wic291cmNlVXJsXCJdID0gXCJzb3VyY2VVcmxcIjtcbiAgaW1hZ2VDb21wb25lbnRJbnB1dFR5cGVzRW51bVtcInRpdGxlXCJdID0gXCJ0aXRsZVwiO1xuICBpbWFnZUNvbXBvbmVudElucHV0VHlwZXNFbnVtW1wiY2FwdGlvblwiXSA9IFwiY2FwdGlvblwiO1xuICBpbWFnZUNvbXBvbmVudElucHV0VHlwZXNFbnVtW1wibGlua1VybFwiXSA9IFwibGlua1VybFwiO1xuICBpbWFnZUNvbXBvbmVudElucHV0VHlwZXNFbnVtW1wiYWx0VGV4dFwiXSA9IFwiYWx0VGV4dFwiO1xufSkoaW1hZ2VDb21wb25lbnRJbnB1dFR5cGVzRW51bSB8fCAoaW1hZ2VDb21wb25lbnRJbnB1dFR5cGVzRW51bSA9IHt9KSk7XG52YXIgZmllbGRJbmZvUHJlZml4RW51bTtcbihmdW5jdGlvbiAoZmllbGRJbmZvUHJlZml4RW51bSkge1xuICBmaWVsZEluZm9QcmVmaXhFbnVtW1wiZXhwcmVzc2lvblwiXSA9IFwiZXhwcmVzc2lvbi9cIjtcbiAgZmllbGRJbmZvUHJlZml4RW51bVtcInJlbGF0aW9uc2hpcFwiXSA9IFwicmVsYXRpb25zaGlwcy9cIjtcbiAgZmllbGRJbmZvUHJlZml4RW51bVtcInJhc3RlclwiXSA9IFwiUmFzdGVyLlwiO1xufSkoZmllbGRJbmZvUHJlZml4RW51bSB8fCAoZmllbGRJbmZvUHJlZml4RW51bSA9IHt9KSk7XG52YXIgbGF5ZXJEaXNwbGF5VHlwZUVudW07XG4oZnVuY3Rpb24gKGxheWVyRGlzcGxheVR5cGVFbnVtKSB7XG4gIGxheWVyRGlzcGxheVR5cGVFbnVtW1wiZmVhdHVyZVwiXSA9IFwiZmVhdHVyZVwiO1xuICBsYXllckRpc3BsYXlUeXBlRW51bVtcImNsdXN0ZXJcIl0gPSBcImNsdXN0ZXJcIjtcbiAgbGF5ZXJEaXNwbGF5VHlwZUVudW1bXCJtYXBOb3Rlc1wiXSA9IFwibWFwTm90ZXNcIjtcbn0pKGxheWVyRGlzcGxheVR5cGVFbnVtIHx8IChsYXllckRpc3BsYXlUeXBlRW51bSA9IHt9KSk7XG52YXIgc2VydmljZVR5cGVFbnVtO1xuKGZ1bmN0aW9uIChzZXJ2aWNlVHlwZUVudW0pIHtcbiAgc2VydmljZVR5cGVFbnVtW1wiZmVhdHVyZVwiXSA9IFwiZmVhdHVyZVwiO1xuICBzZXJ2aWNlVHlwZUVudW1bXCJtYXBJbWFnZVwiXSA9IFwibWFwLWltYWdlXCI7XG4gIHNlcnZpY2VUeXBlRW51bVtcInNjZW5lXCJdID0gXCJzY2VuZVwiO1xuICBzZXJ2aWNlVHlwZUVudW1bXCJvZ2NGZWF0dXJlXCJdID0gXCJvZ2MtZmVhdHVyZVwiO1xuICBzZXJ2aWNlVHlwZUVudW1bXCJpbWFnZXJ5XCJdID0gXCJpbWFnZXJ5XCI7XG4gIHNlcnZpY2VUeXBlRW51bVtcIndmc1wiXSA9IFwid2ZzXCI7XG4gIHNlcnZpY2VUeXBlRW51bVtcIndtc1wiXSA9IFwid21zXCI7XG4gIHNlcnZpY2VUeXBlRW51bVtcImNzdlwiXSA9IFwiY3N2XCI7XG4gIHNlcnZpY2VUeXBlRW51bVtcImdlb2pzb25cIl0gPSBcImdlb2pzb25cIjtcbiAgc2VydmljZVR5cGVFbnVtW1wic3RyZWFtXCJdID0gXCJzdHJlYW1cIjtcbiAgc2VydmljZVR5cGVFbnVtW1wiaW1hZ2VyeVRpbGVcIl0gPSBcImltYWdlcnktdGlsZVwiO1xuICBzZXJ2aWNlVHlwZUVudW1bXCJ0aWxlXCJdID0gXCJ0aWxlXCI7XG4gIHNlcnZpY2VUeXBlRW51bVtcInN1YnR5cGVcIl0gPSBcInN1YnR5cGVcIjtcbn0pKHNlcnZpY2VUeXBlRW51bSB8fCAoc2VydmljZVR5cGVFbnVtID0ge30pKTtcbi8vIGh0dHBzOi8vZGV2ZWxvcGVycy5hcmNnaXMuY29tL2phdmFzY3JpcHQvbGF0ZXN0L2FwaS1yZWZlcmVuY2UvZXNyaS1sYXllcnMtc3VwcG9ydC1GaWVsZC5odG1sI3R5cGVcbnZhciBmaWVsZFR5cGVzRW51bTtcbihmdW5jdGlvbiAoZmllbGRUeXBlc0VudW0pIHtcbiAgZmllbGRUeXBlc0VudW1bXCJpbnRlZ2VyXCJdID0gXCJpbnRlZ2VyXCI7XG4gIGZpZWxkVHlwZXNFbnVtW1wic21hbGxJbnRlZ2VyXCJdID0gXCJzbWFsbC1pbnRlZ2VyXCI7XG4gIGZpZWxkVHlwZXNFbnVtW1wiYmlnSW50ZWdlclwiXSA9IFwiYmlnLWludGVnZXJcIjtcbiAgZmllbGRUeXBlc0VudW1bXCJzaW5nbGVcIl0gPSBcInNpbmdsZVwiO1xuICBmaWVsZFR5cGVzRW51bVtcImRvdWJsZVwiXSA9IFwiZG91YmxlXCI7XG4gIGZpZWxkVHlwZXNFbnVtW1wibG9uZ1wiXSA9IFwibG9uZ1wiO1xuICBmaWVsZFR5cGVzRW51bVtcInN0cmluZ1wiXSA9IFwic3RyaW5nXCI7XG4gIGZpZWxkVHlwZXNFbnVtW1wiZGF0ZVwiXSA9IFwiZGF0ZVwiO1xuICBmaWVsZFR5cGVzRW51bVtcImRhdGVPbmx5XCJdID0gXCJkYXRlLW9ubHlcIjtcbiAgZmllbGRUeXBlc0VudW1bXCJ0aW1lT25seVwiXSA9IFwidGltZS1vbmx5XCI7XG4gIGZpZWxkVHlwZXNFbnVtW1widGltZXN0YW1wT2Zmc2V0XCJdID0gXCJ0aW1lc3RhbXAtb2Zmc2V0XCI7XG4gIGZpZWxkVHlwZXNFbnVtW1wib2lkXCJdID0gXCJvaWRcIjtcbiAgZmllbGRUeXBlc0VudW1bXCJndWlkXCJdID0gXCJndWlkXCI7XG4gIGZpZWxkVHlwZXNFbnVtW1wiZ2xvYmFsSWRcIl0gPSBcImdsb2JhbC1pZFwiO1xuICBmaWVsZFR5cGVzRW51bVtcIm51bWJlclwiXSA9IFwibnVtYmVyXCI7IC8vIGZvciBhcmNhZGVcbn0pKGZpZWxkVHlwZXNFbnVtIHx8IChmaWVsZFR5cGVzRW51bSA9IHt9KSk7XG52YXIgTGFzdFNvcnR5Qnk7XG4oZnVuY3Rpb24gKExhc3RTb3J0eUJ5KSB7XG4gIExhc3RTb3J0eUJ5W1wiZGVmYXVsdFwiXSA9IFwiZGVmYXVsdFwiO1xuICBMYXN0U29ydHlCeVtcImRpc3BsYXlcIl0gPSBcImRpc3BsYXlcIjtcbiAgTGFzdFNvcnR5QnlbXCJ0eXBlXCJdID0gXCJ0eXBlXCI7XG4gIExhc3RTb3J0eUJ5W1wiZmllbGRcIl0gPSBcImZpZWxkXCI7XG59KShMYXN0U29ydHlCeSB8fCAoTGFzdFNvcnR5QnkgPSB7fSkpO1xuXG5leHBvcnQgeyBMYXN0U29ydHlCeSBhcyBMLCBmaWVsZFR5cGVzRW51bSBhcyBhLCBmaWVsZEluZm9QcmVmaXhFbnVtIGFzIGYsIGltYWdlQ29tcG9uZW50SW5wdXRUeXBlc0VudW0gYXMgaSwgbGF5ZXJEaXNwbGF5VHlwZUVudW0gYXMgbCwgc2VydmljZVR5cGVFbnVtIGFzIHMgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgbCBhcyBsb2FkTW9kdWxlcyB9IGZyb20gJy4vbG9hZE1vZHVsZXMtYWFmMzBiZDYuanMnO1xuaW1wb3J0IHsgYyBhcyBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkgfSBmcm9tICcuL2RvbS0xM2Y1YjAwYy5qcyc7XG5cbmNvbnN0IGxhbmd1YWdlTWFwID0gbmV3IE1hcChbXG4gIFtcImFyXCIsIFwiYXJcIl0sXG4gIFtcImJnXCIsIFwiYmdcIl0sXG4gIFtcImJzXCIsIFwiYnNcIl0sXG4gIFtcImNhXCIsIFwiY2FcIl0sXG4gIFtcImNzXCIsIFwiY3NcIl0sXG4gIFtcImRhXCIsIFwiZGFcIl0sXG4gIFtcImRlXCIsIFwiZGVcIl0sXG4gIFtcImVsXCIsIFwiZWxcIl0sXG4gIFtcImVuXCIsIFwiZW5cIl0sXG4gIFtcImVzXCIsIFwiZXNcIl0sXG4gIFtcImV0XCIsIFwiZXRcIl0sXG4gIFtcImZpXCIsIFwiZmlcIl0sXG4gIFtcImZyXCIsIFwiZnJcIl0sXG4gIFtcImhlXCIsIFwiaGVcIl0sXG4gIFtcImhyXCIsIFwiaHJcIl0sXG4gIFtcImh1XCIsIFwiaHVcIl0sXG4gIFtcImlkXCIsIFwiaWRcIl0sXG4gIFtcIml0XCIsIFwiaXRcIl0sXG4gIFtcImphXCIsIFwiamFcIl0sXG4gIFtcImtvXCIsIFwia29cIl0sXG4gIFtcImx0XCIsIFwibHRcIl0sXG4gIFtcImx2XCIsIFwibHZcIl0sXG4gIFtcIm5iXCIsIFwibmJcIl0sXG4gIFtcIm5sXCIsIFwibmxcIl0sXG4gIFtcInBsXCIsIFwicGxcIl0sXG4gIFtcInB0LWJyXCIsIFwicHQtQlJcIl0sXG4gIFtcInB0LXB0XCIsIFwicHQtUFRcIl0sXG4gIFtcInJvXCIsIFwicm9cIl0sXG4gIFtcInJ1XCIsIFwicnVcIl0sXG4gIFtcInNrXCIsIFwic2tcIl0sXG4gIFtcInNsXCIsIFwic2xcIl0sXG4gIFtcInNyXCIsIFwic3JcIl0sXG4gIFtcInN2XCIsIFwic3ZcIl0sXG4gIFtcInRoXCIsIFwidGhcIl0sXG4gIFtcInRyXCIsIFwidHJcIl0sXG4gIFtcInVrXCIsIFwidWtcIl0sXG4gIFtcInZpXCIsIFwidmlcIl0sXG4gIFtcInpoLWNuXCIsIFwiemgtQ05cIl0sXG4gIFtcInpoLWhrXCIsIFwiemgtSEtcIl0sXG4gIFtcInpoLXR3XCIsIFwiemgtVFdcIl1cbl0pO1xuLy8gcnRsXG5mdW5jdGlvbiBnZXRFbGVtZW50RGlyKGVsKSB7XG4gIHJldHVybiBnZXRFbGVtZW50UHJvcChlbCwgXCJkaXJcIiwgXCJsdHJcIik7XG59XG5mdW5jdGlvbiBnZXRFbGVtZW50UHJvcChlbCwgcHJvcCwgdmFsdWUpIHtcbiAgY29uc3QgY2xvc2VzdFdpdGhQcm9wID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGVsLCBgWyR7cHJvcH1dYCk7XG4gIHJldHVybiBjbG9zZXN0V2l0aFByb3AgPyBjbG9zZXN0V2l0aFByb3AuZ2V0QXR0cmlidXRlKHByb3ApIDogdmFsdWU7XG59XG4vLyBjc3NcbmNvbnN0IENTU19VVElMSVRZID0ge1xuICBydGw6IFwiYXJjZ2lzLS1ydGxcIlxufTtcbmFzeW5jIGZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyBhcGksIHR5cGUsIHBsYWNlcyB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKGFwaSA9PT0gNCkge1xuICAgIGNvbnN0IFtpbnRsXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImVzcmkvaW50bFwiXSk7XG4gICAgY29uc3QgbnVtYmVyRm9ybWF0SW50bE9wdGlvbnMgPSBpbnRsLmNvbnZlcnROdW1iZXJGb3JtYXRUb0ludGxPcHRpb25zKHtcbiAgICAgIHBsYWNlcyxcbiAgICAgIHN0eWxlOiB0eXBlLFxuICAgICAgZGlnaXRTZXBhcmF0b3I6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gaW50bC5mb3JtYXROdW1iZXIobnVtYmVyLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG51bWJlckZvcm1hdEludGxPcHRpb25zKSwgeyBzdHlsZTogdHlwZSB9KSk7XG4gIH1cbiAgY29uc3QgW2Rvam9OdW1iZXJdID0gYXdhaXQgbG9hZE1vZHVsZXMoW1wiZG9qby9udW1iZXJcIl0pO1xuICByZXR1cm4gZG9qb051bWJlci5mb3JtYXQobnVtYmVyLCB7XG4gICAgdHlwZSxcbiAgICBwbGFjZXMsXG4gICAgcGF0dGVybjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBhdHRlcm5cbiAgfSk7XG59XG5jb25zdCBjYWNoZSA9IHt9O1xuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gIGNvbnN0IGxhbmcgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZztcbiAgY29uc3QgZGF5U2hvcnRNb250aFllYXIgPSB7XG4gICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgbW9udGg6IFwic2hvcnRcIixcbiAgICBkYXk6IFwibnVtZXJpY1wiXG4gIH07XG4gIGlmICghY2FjaGVbbGFuZ10pIHtcbiAgICBjYWNoZVtsYW5nXSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nLCBkYXlTaG9ydE1vbnRoWWVhcik7XG4gIH1cbiAgcmV0dXJuIGNhY2hlW2xhbmddLmZvcm1hdChkYXRlKTtcbn1cblxuZXhwb3J0IHsgQ1NTX1VUSUxJVFkgYXMgQywgZm9ybWF0RGF0ZSBhcyBhLCBmb3JtYXROdW1iZXIgYXMgZiwgZ2V0RWxlbWVudERpciBhcyBnLCBsYW5ndWFnZU1hcCBhcyBsIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tMTNmNWIwMGMuanMnO1xuaW1wb3J0IHsgbCBhcyBsYW5ndWFnZU1hcCB9IGZyb20gJy4vbGFuZ3VhZ2VVdGlsLTIyMjU4YzkwLmpzJztcbmltcG9ydCB7IGEgYXMgZ2V0QXNzZXRQYXRoIH0gZnJvbSAnLi9pbmRleC05MmViYjM5Ni5qcyc7XG5cbi8vIGh0dHBzOi8vbWVkaXVtLmNvbS9zdGVuY2lsLXRyaWNrcy9pbXBsZW1lbnRpbmctaW50ZXJuYXRpb25hbGlzYXRpb24taTE4bi13aXRoLXN0ZW5jaWwtNWU2NTU5NTU0MTE3XG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UoZWxlbWVudCkge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgY29uc3QgY2xvc2VzdEVsZW1lbnQgPSAoX2EgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWxlbWVudCwgXCJbbGFuZ11cIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYyA9IChfYiA9IGVsZW1lbnQuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kb2N1bWVudEVsZW1lbnQ7XG4gIC8vIGxhbmd1YWdlIHNldCBieSB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBvciBicm93c2VyLiBkZWZhdWx0cyB0byBlbmdsaXNoLlxuICBjb25zdCBsYW5nID0gKChjbG9zZXN0RWxlbWVudCA9PT0gbnVsbCB8fCBjbG9zZXN0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2VzdEVsZW1lbnQubGFuZykgfHwgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5sYW5ndWFnZSkgfHwgXCJlblwiKS50b0xvd2VyQ2FzZSgpO1xuICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcpKSB7XG4gICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nKTtcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBcInJ1LVJVXCIgbWFwcyB0byBcInJ1XCIgdXNlIGNhc2VcbiAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcuc2xpY2UoMCwgMikpKSB7XG4gICAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcuc2xpY2UoMCwgMikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBcImVuXCI7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2VJbnRsKGVsZW1lbnQpIHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIC8vIGl0J3MgT0sgaWYgd2UgZG9uJ3QgaGF2ZSB0aGUgNCBsZXR0ZXIgbGFuZ3VhZ2UgZmlsZSBmb3IgaXRcbiAgLy8gNCBsZXR0ZXIgbGFuZ3VhZ2UgY29kZSBuZWVkZWQgZm9yIGZvcm1hdHRpbmcgbnVtYmVyc1xuICBjb25zdCBjbG9zZXN0RWxlbWVudCA9IChfYSA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbGVtZW50LCBcIltsYW5nXVwiKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9jID0gKF9iID0gZWxlbWVudC5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub3duZXJEb2N1bWVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmRvY3VtZW50RWxlbWVudDtcbiAgLy8gbGFuZ3VhZ2Ugc2V0IGJ5IHRoZSBjYWxsaW5nIGFwcGxpY2F0aW9uIG9yIGJyb3dzZXIuIGRlZmF1bHRzIHRvIGVuZ2xpc2guXG4gIGNvbnN0IGxhbmcgPSAoKGNsb3Nlc3RFbGVtZW50ID09PSBudWxsIHx8IGNsb3Nlc3RFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zZXN0RWxlbWVudC5sYW5nKSB8fCAobmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLmxhbmd1YWdlKSB8fCBcImVuXCIpLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZykpIHtcbiAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcpO1xuICB9XG4gIGVsc2Uge1xuICAgIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZy5zbGljZSgwLCAyKSkpIHtcbiAgICAgIC8vIHdlIHN1cHBvcnQgdGhlIDIgbGV0dGVyIGNvZGVkIGxhbmd1YWdlXG4gICAgICAvLyBlLmcuIGl0LUNIIHZzIGl0XG4gICAgICByZXR1cm4gbGFuZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gXCJlblwiO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZmV0Y2hMb2NhbGVTdHJpbmdzRm9yQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGxvY2FsZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZldGNoKGdldEFzc2V0UGF0aChgLi4vYXJjZ2lzLWFwcC1hc3NldHMvaTE4bi8ke2NvbXBvbmVudE5hbWV9LmkxOG4uJHtsb2NhbGV9Lmpzb25gKSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0Lm9rKVxuICAgICAgICByZXNvbHZlKHJlc3VsdC5qc29uKCkpO1xuICAgICAgZWxzZVxuICAgICAgICByZWplY3QoKTtcbiAgICB9LCAoKSA9PiByZWplY3QoKSk7XG4gIH0pO1xufVxuY29uc3Qgc3RyaW5nQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGZldGNoTG9jYWxlU3RyaW5nc0Zyb21DYWNoZShjb21wb25lbnROYW1lLCBsb2NhbGUpIHtcbiAgY29uc3QgaWQgPSBgJHtjb21wb25lbnROYW1lfSR7bG9jYWxlfWA7XG4gIGlmICghc3RyaW5nQ2FjaGVbaWRdKSB7XG4gICAgc3RyaW5nQ2FjaGVbaWRdID0gZmV0Y2hMb2NhbGVTdHJpbmdzRm9yQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGxvY2FsZSk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ0NhY2hlW2lkXTtcbn1cbi8qKlxuICogR2V0IHN0cmluZ3MgYW5kIGxhbmd1YWdlIGNvZGVzLlxuICogVGhpcyBtZXRob2QgcmV0dXJucyAyIGxhbmd1YWdlIGNvZGVzLlxuICogVGhlIGZpcnN0IG9uZSByZXR1cm5zIGEgY29kZSB0aGF0J3MgYWxzbyBzdXBwb3J0ZWQgYXMgYSBsYW5ndWFnZSBmaWxlLlxuICogVGhlIHNlY29uZCBvbmUgcmV0dXJucyBhIGNvZGUgd2hlcmUgdGhlcmUgaXMgc3VwcG9ydCBmb3IgdGhlIGZpcnN0IDIgbGV0dGVycyBvZiB0aGUgY29kZSBhcyBwYXJ0IG9mIGEgbGFuZ3VhZ2UgZmlsZSxcbiAqIGJ1dCB3aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgNCBsZXR0ZXIgY29kZSBmcm9tIHRoZSBwYWdlLlxuICogRS5nLiBGb3IgXCJpdC1jaFwiIGl0IHdpbGwgcmV0dXJuIFwiaXRcIiBhcyB0aGUgZmlyc3QgbGFuZ3VhZ2UgY29kZSBhbmQgXCJpdC1jaFwiIGFzIHRoZSBzZWNvbmQuXG4gKiBUaGUgc2Vjb25kIG9uZSBpcyByZXF1aXJlZCBmb3IgZXNyaS5pbnRsLnNldExvY2FsZSgpIHRvIGdldCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nLlxuICpcbiAqIElmIGEgdGFnTmFtZSBpcyBwcm92aWRlZCBpdCB3aWxsIG92ZXJ3aXRlIHRoZSBlbGVtZW50J3MgdGFnTmFtZVxuICpcbiAqICBAcmV0dXJuIFsgc3RyaW5ncywgZmlyc3QgbGFuZ3VhZ2UgY29kZSwgc2Vjb25kIGxhbmd1YWdlIGNvZGVdXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MoZWxlbWVudCwgdGFnTmFtZSkge1xuICBjb25zdCBjb21wb25lbnROYW1lID0gdGFnTmFtZSB8fCBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgY29tcG9uZW50TGFuZ3VhZ2UgPSBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UoZWxlbWVudCk7XG4gIGNvbnN0IGNvbXBvbmVudExhbmd1YWdlSW50bCA9IGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZUludGwoZWxlbWVudCk7XG4gIGxldCBzdHJpbmdzO1xuICB0cnkge1xuICAgIHN0cmluZ3MgPSBhd2FpdCBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgY29tcG9uZW50TGFuZ3VhZ2UpO1xuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgY29uc29sZS53YXJuKGBubyBsb2NhbGUgZm9yICR7Y29tcG9uZW50TmFtZX0gKCR7Y29tcG9uZW50TGFuZ3VhZ2V9KSBsb2FkaW5nIGRlZmF1bHQgbG9jYWxlIGVuLmApO1xuICAgIHN0cmluZ3MgPSBhd2FpdCBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgXCJlblwiKTtcbiAgfVxuICByZXR1cm4gW3N0cmluZ3MsIGNvbXBvbmVudExhbmd1YWdlLCBjb21wb25lbnRMYW5ndWFnZUludGxdO1xufVxuXG5leHBvcnQgeyBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UgYXMgYSwgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=