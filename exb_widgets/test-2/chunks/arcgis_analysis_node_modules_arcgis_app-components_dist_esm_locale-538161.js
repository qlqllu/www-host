"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_locale-538161"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-ba12ebd6.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-ba12ebd6.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fetchItemUserInfo),
/* harmony export */   b: () => (/* binding */ fetchVerified),
/* harmony export */   c: () => (/* binding */ getUserThumbnailURI),
/* harmony export */   d: () => (/* binding */ fetchUserGroups),
/* harmony export */   e: () => (/* binding */ fetchUserItemsTotal),
/* harmony export */   f: () => (/* binding */ fetchUser),
/* harmony export */   g: () => (/* binding */ getFullName)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _query_4f7b7e4d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query-4f7b7e4d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-4f7b7e4d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




async function getOrgProperties(item, orgId, locale, portal, checkOnline) {
  var _a, _b;
  const hostName = ((_a = item.portal) === null || _a === void 0 ? void 0 : _a.portalHostname) || (portal === null || portal === void 0 ? void 0 : portal.portalHostname) || ((_b = portal === null || portal === void 0 ? void 0 : portal.restUrl) === null || _b === void 0 ? void 0 : _b.replace("/sharing/rest", ""));
  const portalUrl = checkOnline
    ? `https://www.arcgis.com/sharing/rest/portals/${orgId}`
    : `https://${hostName}/sharing/rest/portals/${orgId}`;
  if (!hostName && !checkOnline) {
    return null;
  }
  const options = checkOnline ? { disableIdentityLookup: true, addTokenManually: false } : {};
  const self = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(portalUrl, {}, options);
  const { urlKey, thumbnail, customBaseUrl } = self;
  const url = `https://${urlKey}.${customBaseUrl}/`;
  const thumbnailUrl = thumbnail ? `${url}sharing/rest/portals/self/resources/${thumbnail}` : null;
  let name, description;
  try {
    const properties = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${portalUrl}/resources/localizedOrgProperties`, { start: 1, num: 100 }, options);
    if (properties) {
      const localizedOrgProperties = properties[locale] || properties.default;
      name = localizedOrgProperties.name;
      description = localizedOrgProperties.description || properties.description;
    }
  }
  catch (_c) {
    // org doesn't have localized org properties
  }
  return {
    name: name || self.name,
    description: (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.a)(description || self.description),
    url: `${url}home/`,
    thumbnail: thumbnailUrl
  };
}
async function fetchVerified(item, locale, portal, checkOnline) {
  var _a, _b, _c;
  const orgId = (_c = (_a = item.orgId) !== null && _a !== void 0 ? _a : (_b = item.portal) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : portal === null || portal === void 0 ? void 0 : portal.id;
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => getOrgProperties(item, orgId, locale, portal, checkOnline), "verified", orgId);
}

async function fetchUser(username, portal, checkOnline) {
  const restBase = checkOnline ? "https://www.arcgis.com/sharing/rest/" : (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
  const url = `${restBase !== null && restBase !== void 0 ? restBase : (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}community/users/${username}`;
  const onlineFromPortal = (url === null || url === void 0 ? void 0 : url.includes("www.arcgis.com")) && portal.isPortal;
  const options = onlineFromPortal ? { disableIdentityLookup: true, addTokenManually: false } : {};
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.f)(async () => {
    try {
      const result = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, options);
      return result;
    }
    catch (error) {
      // an error fetching the user likely means the user is private
      // return a user-shaped object with just the username
      return { username };
    }
  }, "user", url);
}
async function fetchItemUserInfo(item, portal, lang, checkOnline) {
  if ((item === null || item === void 0 ? void 0 : item.contentStatus) === "public_authoritative") {
    const verifiedInfo = await fetchVerified(item, lang, portal, checkOnline);
    if (!verifiedInfo) {
      return fetchUser(item.owner, portal, checkOnline);
    }
    const { description, name, thumbnail, url } = verifiedInfo;
    return {
      description: description ? (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.s)(description) : "",
      fullName: name,
      username: item.owner,
      thumbnail,
      id: item.orgId,
      url
    };
  }
  return fetchUser(item.owner, portal, checkOnline);
}
async function fetchUserGroups(username, portal, checkOnline) {
  const restBase = checkOnline ? "https://www.arcgis.com/sharing/rest/" : (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
  const options = checkOnline ? { disableIdentityLookup: true, addTokenManually: false } : {};
  const searchGroups = async () => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${restBase}community/groups`, {
    q: `(owner:"${username}")`,
    num: 100
  }, options);
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.f)(searchGroups, "userGroups", username);
}
async function fetchUserItemsTotal(user, portal, checkOnline) {
  const { username } = user;
  const restBase = checkOnline ? "https://www.arcgis.com/sharing/rest/" : (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
  const options = checkOnline ? { disableIdentityLookup: true, addTokenManually: false } : {};
  const searchUserItemTotal = async () => {
    const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${restBase}search`, {
      q: `(owner:"${username}") ${_query_4f7b7e4d_js__WEBPACK_IMPORTED_MODULE_2__.H}`,
      num: 1
    }, options);
    return response.total;
  };
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.f)(searchUserItemTotal, "userItemsTotal", username);
}
function getUserThumbnailURI(user, portal, noToken = false) {
  if (!user.thumbnail) {
    return null;
  }
  // if user begins with a protocol, assume it's already fully qualified
  if (user.thumbnail.startsWith("http")) {
    return user.thumbnail;
  }
  const token = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.h)(portal);
  return `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}community/users/${user.username}/info/${user.thumbnail}${token && !noToken ? `?token=${token}` : ""}`;
}
function getFullName(user, lang) {
  const { fullName, firstName, lastName, username } = user;
  if (!fullName) {
    if (firstName && lastName) {
      return lang === "ja" ? `${user.lastName} ${user.firstName}` : `${user.firstName} ${user.lastName}`;
    }
    return username;
  }
  return fullName;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fbG9jYWxlLTUzODE2MS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNkQ7QUFDYzs7QUFFM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixtREFBaUMsU0FBUyxLQUFLO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxvQkFBb0I7QUFDOUI7QUFDQSx5QkFBeUIsMkRBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsbUVBQW1FLDhCQUE4QixhQUFhO0FBQzlHO0FBQ0EsNkJBQTZCLDJEQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXNHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0Z0RztBQUNBO0FBQ0E7QUFDQTtBQUMyRTtBQUNiO0FBQ047O0FBRXhEO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixtREFBaUM7QUFDaEU7QUFDQTtBQUNBLE1BQU0sd0RBQVc7QUFDakIsV0FBVyx3REFBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxRQUFRLHdEQUFXO0FBQ25CLGFBQWEsd0RBQVc7QUFDeEI7QUFD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QTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sYW5ndWFnZVV0aWwtMjIyNThjOTAuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vbG9jYWxlLTEzZTAwYTc1LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL3VzZXItYmExMmViZDYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyBsIGFzIGxvYWRNb2R1bGVzIH0gZnJvbSAnLi9sb2FkTW9kdWxlcy1hYWYzMGJkNi5qcyc7XG5pbXBvcnQgeyBjIGFzIGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeSB9IGZyb20gJy4vZG9tLTEzZjViMDBjLmpzJztcblxuY29uc3QgbGFuZ3VhZ2VNYXAgPSBuZXcgTWFwKFtcbiAgW1wiYXJcIiwgXCJhclwiXSxcbiAgW1wiYmdcIiwgXCJiZ1wiXSxcbiAgW1wiYnNcIiwgXCJic1wiXSxcbiAgW1wiY2FcIiwgXCJjYVwiXSxcbiAgW1wiY3NcIiwgXCJjc1wiXSxcbiAgW1wiZGFcIiwgXCJkYVwiXSxcbiAgW1wiZGVcIiwgXCJkZVwiXSxcbiAgW1wiZWxcIiwgXCJlbFwiXSxcbiAgW1wiZW5cIiwgXCJlblwiXSxcbiAgW1wiZXNcIiwgXCJlc1wiXSxcbiAgW1wiZXRcIiwgXCJldFwiXSxcbiAgW1wiZmlcIiwgXCJmaVwiXSxcbiAgW1wiZnJcIiwgXCJmclwiXSxcbiAgW1wiaGVcIiwgXCJoZVwiXSxcbiAgW1wiaHJcIiwgXCJoclwiXSxcbiAgW1wiaHVcIiwgXCJodVwiXSxcbiAgW1wiaWRcIiwgXCJpZFwiXSxcbiAgW1wiaXRcIiwgXCJpdFwiXSxcbiAgW1wiamFcIiwgXCJqYVwiXSxcbiAgW1wia29cIiwgXCJrb1wiXSxcbiAgW1wibHRcIiwgXCJsdFwiXSxcbiAgW1wibHZcIiwgXCJsdlwiXSxcbiAgW1wibmJcIiwgXCJuYlwiXSxcbiAgW1wibmxcIiwgXCJubFwiXSxcbiAgW1wicGxcIiwgXCJwbFwiXSxcbiAgW1wicHQtYnJcIiwgXCJwdC1CUlwiXSxcbiAgW1wicHQtcHRcIiwgXCJwdC1QVFwiXSxcbiAgW1wicm9cIiwgXCJyb1wiXSxcbiAgW1wicnVcIiwgXCJydVwiXSxcbiAgW1wic2tcIiwgXCJza1wiXSxcbiAgW1wic2xcIiwgXCJzbFwiXSxcbiAgW1wic3JcIiwgXCJzclwiXSxcbiAgW1wic3ZcIiwgXCJzdlwiXSxcbiAgW1widGhcIiwgXCJ0aFwiXSxcbiAgW1widHJcIiwgXCJ0clwiXSxcbiAgW1widWtcIiwgXCJ1a1wiXSxcbiAgW1widmlcIiwgXCJ2aVwiXSxcbiAgW1wiemgtY25cIiwgXCJ6aC1DTlwiXSxcbiAgW1wiemgtaGtcIiwgXCJ6aC1IS1wiXSxcbiAgW1wiemgtdHdcIiwgXCJ6aC1UV1wiXVxuXSk7XG4vLyBydGxcbmZ1bmN0aW9uIGdldEVsZW1lbnREaXIoZWwpIHtcbiAgcmV0dXJuIGdldEVsZW1lbnRQcm9wKGVsLCBcImRpclwiLCBcImx0clwiKTtcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRQcm9wKGVsLCBwcm9wLCB2YWx1ZSkge1xuICBjb25zdCBjbG9zZXN0V2l0aFByb3AgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWwsIGBbJHtwcm9wfV1gKTtcbiAgcmV0dXJuIGNsb3Nlc3RXaXRoUHJvcCA/IGNsb3Nlc3RXaXRoUHJvcC5nZXRBdHRyaWJ1dGUocHJvcCkgOiB2YWx1ZTtcbn1cbi8vIGNzc1xuY29uc3QgQ1NTX1VUSUxJVFkgPSB7XG4gIHJ0bDogXCJhcmNnaXMtLXJ0bFwiXG59O1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bWJlciwgb3B0aW9ucykge1xuICBjb25zdCB7IGFwaSwgdHlwZSwgcGxhY2VzIH0gPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoYXBpID09PSA0KSB7XG4gICAgY29uc3QgW2ludGxdID0gYXdhaXQgbG9hZE1vZHVsZXMoW1wiZXNyaS9pbnRsXCJdKTtcbiAgICBjb25zdCBudW1iZXJGb3JtYXRJbnRsT3B0aW9ucyA9IGludGwuY29udmVydE51bWJlckZvcm1hdFRvSW50bE9wdGlvbnMoe1xuICAgICAgcGxhY2VzLFxuICAgICAgc3R5bGU6IHR5cGUsXG4gICAgICBkaWdpdFNlcGFyYXRvcjogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBpbnRsLmZvcm1hdE51bWJlcihudW1iZXIsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbnVtYmVyRm9ybWF0SW50bE9wdGlvbnMpLCB7IHN0eWxlOiB0eXBlIH0pKTtcbiAgfVxuICBjb25zdCBbZG9qb051bWJlcl0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJkb2pvL251bWJlclwiXSk7XG4gIHJldHVybiBkb2pvTnVtYmVyLmZvcm1hdChudW1iZXIsIHtcbiAgICB0eXBlLFxuICAgIHBsYWNlcyxcbiAgICBwYXR0ZXJuOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucGF0dGVyblxuICB9KTtcbn1cbmNvbnN0IGNhY2hlID0ge307XG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgY29uc3QgbGFuZyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nO1xuICBjb25zdCBkYXlTaG9ydE1vbnRoWWVhciA9IHtcbiAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICBtb250aDogXCJzaG9ydFwiLFxuICAgIGRheTogXCJudW1lcmljXCJcbiAgfTtcbiAgaWYgKCFjYWNoZVtsYW5nXSkge1xuICAgIGNhY2hlW2xhbmddID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcsIGRheVNob3J0TW9udGhZZWFyKTtcbiAgfVxuICByZXR1cm4gY2FjaGVbbGFuZ10uZm9ybWF0KGRhdGUpO1xufVxuXG5leHBvcnQgeyBDU1NfVVRJTElUWSBhcyBDLCBmb3JtYXREYXRlIGFzIGEsIGZvcm1hdE51bWJlciBhcyBmLCBnZXRFbGVtZW50RGlyIGFzIGcsIGxhbmd1YWdlTWFwIGFzIGwgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgYyBhcyBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkgfSBmcm9tICcuL2RvbS0xM2Y1YjAwYy5qcyc7XG5pbXBvcnQgeyBsIGFzIGxhbmd1YWdlTWFwIH0gZnJvbSAnLi9sYW5ndWFnZVV0aWwtMjIyNThjOTAuanMnO1xuaW1wb3J0IHsgYSBhcyBnZXRBc3NldFBhdGggfSBmcm9tICcuL2luZGV4LTkyZWJiMzk2LmpzJztcblxuLy8gaHR0cHM6Ly9tZWRpdW0uY29tL3N0ZW5jaWwtdHJpY2tzL2ltcGxlbWVudGluZy1pbnRlcm5hdGlvbmFsaXNhdGlvbi1pMThuLXdpdGgtc3RlbmNpbC01ZTY1NTk1NTQxMTdcbmZ1bmN0aW9uIGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZShlbGVtZW50KSB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICBjb25zdCBjbG9zZXN0RWxlbWVudCA9IChfYSA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbGVtZW50LCBcIltsYW5nXVwiKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9jID0gKF9iID0gZWxlbWVudC5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub3duZXJEb2N1bWVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmRvY3VtZW50RWxlbWVudDtcbiAgLy8gbGFuZ3VhZ2Ugc2V0IGJ5IHRoZSBjYWxsaW5nIGFwcGxpY2F0aW9uIG9yIGJyb3dzZXIuIGRlZmF1bHRzIHRvIGVuZ2xpc2guXG4gIGNvbnN0IGxhbmcgPSAoKGNsb3Nlc3RFbGVtZW50ID09PSBudWxsIHx8IGNsb3Nlc3RFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zZXN0RWxlbWVudC5sYW5nKSB8fCAobmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLmxhbmd1YWdlKSB8fCBcImVuXCIpLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZykpIHtcbiAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcpO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIFwicnUtUlVcIiBtYXBzIHRvIFwicnVcIiB1c2UgY2FzZVxuICAgIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZy5zbGljZSgwLCAyKSkpIHtcbiAgICAgIHJldHVybiBsYW5ndWFnZU1hcC5nZXQobGFuZy5zbGljZSgwLCAyKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZW5cIjtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZUludGwoZWxlbWVudCkge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgLy8gaXQncyBPSyBpZiB3ZSBkb24ndCBoYXZlIHRoZSA0IGxldHRlciBsYW5ndWFnZSBmaWxlIGZvciBpdFxuICAvLyA0IGxldHRlciBsYW5ndWFnZSBjb2RlIG5lZWRlZCBmb3IgZm9ybWF0dGluZyBudW1iZXJzXG4gIGNvbnN0IGNsb3Nlc3RFbGVtZW50ID0gKF9hID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGVsZW1lbnQsIFwiW2xhbmddXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2MgPSAoX2IgPSBlbGVtZW50LnNoYWRvd1Jvb3QpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZG9jdW1lbnRFbGVtZW50O1xuICAvLyBsYW5ndWFnZSBzZXQgYnkgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gb3IgYnJvd3Nlci4gZGVmYXVsdHMgdG8gZW5nbGlzaC5cbiAgY29uc3QgbGFuZyA9ICgoY2xvc2VzdEVsZW1lbnQgPT09IG51bGwgfHwgY2xvc2VzdEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsb3Nlc3RFbGVtZW50LmxhbmcpIHx8IChuYXZpZ2F0b3IgPT09IG51bGwgfHwgbmF2aWdhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8IFwiZW5cIikudG9Mb3dlckNhc2UoKTtcbiAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nKSkge1xuICAgIHJldHVybiBsYW5ndWFnZU1hcC5nZXQobGFuZyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nLnNsaWNlKDAsIDIpKSkge1xuICAgICAgLy8gd2Ugc3VwcG9ydCB0aGUgMiBsZXR0ZXIgY29kZWQgbGFuZ3VhZ2VcbiAgICAgIC8vIGUuZy4gaXQtQ0ggdnMgaXRcbiAgICAgIHJldHVybiBsYW5nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBcImVuXCI7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBmZXRjaExvY2FsZVN0cmluZ3NGb3JDb21wb25lbnQoY29tcG9uZW50TmFtZSwgbG9jYWxlKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZmV0Y2goZ2V0QXNzZXRQYXRoKGAuLi9hcmNnaXMtYXBwLWFzc2V0cy9pMThuLyR7Y29tcG9uZW50TmFtZX0uaTE4bi4ke2xvY2FsZX0uanNvbmApKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChyZXN1bHQub2spXG4gICAgICAgIHJlc29sdmUocmVzdWx0Lmpzb24oKSk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlamVjdCgpO1xuICAgIH0sICgpID0+IHJlamVjdCgpKTtcbiAgfSk7XG59XG5jb25zdCBzdHJpbmdDYWNoZSA9IHt9O1xuZnVuY3Rpb24gZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIGxvY2FsZSkge1xuICBjb25zdCBpZCA9IGAke2NvbXBvbmVudE5hbWV9JHtsb2NhbGV9YDtcbiAgaWYgKCFzdHJpbmdDYWNoZVtpZF0pIHtcbiAgICBzdHJpbmdDYWNoZVtpZF0gPSBmZXRjaExvY2FsZVN0cmluZ3NGb3JDb21wb25lbnQoY29tcG9uZW50TmFtZSwgbG9jYWxlKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nQ2FjaGVbaWRdO1xufVxuLyoqXG4gKiBHZXQgc3RyaW5ncyBhbmQgbGFuZ3VhZ2UgY29kZXMuXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIDIgbGFuZ3VhZ2UgY29kZXMuXG4gKiBUaGUgZmlyc3Qgb25lIHJldHVybnMgYSBjb2RlIHRoYXQncyBhbHNvIHN1cHBvcnRlZCBhcyBhIGxhbmd1YWdlIGZpbGUuXG4gKiBUaGUgc2Vjb25kIG9uZSByZXR1cm5zIGEgY29kZSB3aGVyZSB0aGVyZSBpcyBzdXBwb3J0IGZvciB0aGUgZmlyc3QgMiBsZXR0ZXJzIG9mIHRoZSBjb2RlIGFzIHBhcnQgb2YgYSBsYW5ndWFnZSBmaWxlLFxuICogYnV0IHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCA0IGxldHRlciBjb2RlIGZyb20gdGhlIHBhZ2UuXG4gKiBFLmcuIEZvciBcIml0LWNoXCIgaXQgd2lsbCByZXR1cm4gXCJpdFwiIGFzIHRoZSBmaXJzdCBsYW5ndWFnZSBjb2RlIGFuZCBcIml0LWNoXCIgYXMgdGhlIHNlY29uZC5cbiAqIFRoZSBzZWNvbmQgb25lIGlzIHJlcXVpcmVkIGZvciBlc3JpLmludGwuc2V0TG9jYWxlKCkgdG8gZ2V0IHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcuXG4gKlxuICogSWYgYSB0YWdOYW1lIGlzIHByb3ZpZGVkIGl0IHdpbGwgb3ZlcndpdGUgdGhlIGVsZW1lbnQncyB0YWdOYW1lXG4gKlxuICogIEByZXR1cm4gWyBzdHJpbmdzLCBmaXJzdCBsYW5ndWFnZSBjb2RlLCBzZWNvbmQgbGFuZ3VhZ2UgY29kZV1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyhlbGVtZW50LCB0YWdOYW1lKSB7XG4gIGNvbnN0IGNvbXBvbmVudE5hbWUgPSB0YWdOYW1lIHx8IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBjb21wb25lbnRMYW5ndWFnZSA9IGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZShlbGVtZW50KTtcbiAgY29uc3QgY29tcG9uZW50TGFuZ3VhZ2VJbnRsID0gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlSW50bChlbGVtZW50KTtcbiAgbGV0IHN0cmluZ3M7XG4gIHRyeSB7XG4gICAgc3RyaW5ncyA9IGF3YWl0IGZldGNoTG9jYWxlU3RyaW5nc0Zyb21DYWNoZShjb21wb25lbnROYW1lLCBjb21wb25lbnRMYW5ndWFnZSk7XG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oYG5vIGxvY2FsZSBmb3IgJHtjb21wb25lbnROYW1lfSAoJHtjb21wb25lbnRMYW5ndWFnZX0pIGxvYWRpbmcgZGVmYXVsdCBsb2NhbGUgZW4uYCk7XG4gICAgc3RyaW5ncyA9IGF3YWl0IGZldGNoTG9jYWxlU3RyaW5nc0Zyb21DYWNoZShjb21wb25lbnROYW1lLCBcImVuXCIpO1xuICB9XG4gIHJldHVybiBbc3RyaW5ncywgY29tcG9uZW50TGFuZ3VhZ2UsIGNvbXBvbmVudExhbmd1YWdlSW50bF07XG59XG5cbmV4cG9ydCB7IGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZSBhcyBhLCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzIGFzIGcgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgZiBhcyBmcm9tQ2FjaGUsIHIgYXMgcmVxdWVzdCwgZyBhcyBnZXRSZXN0QmFzZVVybCwgaCBhcyBnZXRUb2tlbiB9IGZyb20gJy4vcG9ydGFsLTc5Y2FhZWZmLmpzJztcbmltcG9ydCB7IGEgYXMgc3RyaXBIVE1MLCBzIGFzIHNhbml0aXplSFRNTCB9IGZyb20gJy4vZG9tLTEzZjViMDBjLmpzJztcbmltcG9ydCB7IEggYXMgSElEREVOX0lURU1TX1FVRVJZIH0gZnJvbSAnLi9xdWVyeS00ZjdiN2U0ZC5qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE9yZ1Byb3BlcnRpZXMoaXRlbSwgb3JnSWQsIGxvY2FsZSwgcG9ydGFsLCBjaGVja09ubGluZSkge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCBob3N0TmFtZSA9ICgoX2EgPSBpdGVtLnBvcnRhbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBvcnRhbEhvc3RuYW1lKSB8fCAocG9ydGFsID09PSBudWxsIHx8IHBvcnRhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9ydGFsLnBvcnRhbEhvc3RuYW1lKSB8fCAoKF9iID0gcG9ydGFsID09PSBudWxsIHx8IHBvcnRhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9ydGFsLnJlc3RVcmwpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5yZXBsYWNlKFwiL3NoYXJpbmcvcmVzdFwiLCBcIlwiKSk7XG4gIGNvbnN0IHBvcnRhbFVybCA9IGNoZWNrT25saW5lXG4gICAgPyBgaHR0cHM6Ly93d3cuYXJjZ2lzLmNvbS9zaGFyaW5nL3Jlc3QvcG9ydGFscy8ke29yZ0lkfWBcbiAgICA6IGBodHRwczovLyR7aG9zdE5hbWV9L3NoYXJpbmcvcmVzdC9wb3J0YWxzLyR7b3JnSWR9YDtcbiAgaWYgKCFob3N0TmFtZSAmJiAhY2hlY2tPbmxpbmUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBvcHRpb25zID0gY2hlY2tPbmxpbmUgPyB7IGRpc2FibGVJZGVudGl0eUxvb2t1cDogdHJ1ZSwgYWRkVG9rZW5NYW51YWxseTogZmFsc2UgfSA6IHt9O1xuICBjb25zdCBzZWxmID0gYXdhaXQgcmVxdWVzdChwb3J0YWxVcmwsIHt9LCBvcHRpb25zKTtcbiAgY29uc3QgeyB1cmxLZXksIHRodW1ibmFpbCwgY3VzdG9tQmFzZVVybCB9ID0gc2VsZjtcbiAgY29uc3QgdXJsID0gYGh0dHBzOi8vJHt1cmxLZXl9LiR7Y3VzdG9tQmFzZVVybH0vYDtcbiAgY29uc3QgdGh1bWJuYWlsVXJsID0gdGh1bWJuYWlsID8gYCR7dXJsfXNoYXJpbmcvcmVzdC9wb3J0YWxzL3NlbGYvcmVzb3VyY2VzLyR7dGh1bWJuYWlsfWAgOiBudWxsO1xuICBsZXQgbmFtZSwgZGVzY3JpcHRpb247XG4gIHRyeSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IGF3YWl0IHJlcXVlc3QoYCR7cG9ydGFsVXJsfS9yZXNvdXJjZXMvbG9jYWxpemVkT3JnUHJvcGVydGllc2AsIHsgc3RhcnQ6IDEsIG51bTogMTAwIH0sIG9wdGlvbnMpO1xuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICBjb25zdCBsb2NhbGl6ZWRPcmdQcm9wZXJ0aWVzID0gcHJvcGVydGllc1tsb2NhbGVdIHx8IHByb3BlcnRpZXMuZGVmYXVsdDtcbiAgICAgIG5hbWUgPSBsb2NhbGl6ZWRPcmdQcm9wZXJ0aWVzLm5hbWU7XG4gICAgICBkZXNjcmlwdGlvbiA9IGxvY2FsaXplZE9yZ1Byb3BlcnRpZXMuZGVzY3JpcHRpb24gfHwgcHJvcGVydGllcy5kZXNjcmlwdGlvbjtcbiAgICB9XG4gIH1cbiAgY2F0Y2ggKF9jKSB7XG4gICAgLy8gb3JnIGRvZXNuJ3QgaGF2ZSBsb2NhbGl6ZWQgb3JnIHByb3BlcnRpZXNcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUgfHwgc2VsZi5uYW1lLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpcEhUTUwoZGVzY3JpcHRpb24gfHwgc2VsZi5kZXNjcmlwdGlvbiksXG4gICAgdXJsOiBgJHt1cmx9aG9tZS9gLFxuICAgIHRodW1ibmFpbDogdGh1bWJuYWlsVXJsXG4gIH07XG59XG5hc3luYyBmdW5jdGlvbiBmZXRjaFZlcmlmaWVkKGl0ZW0sIGxvY2FsZSwgcG9ydGFsLCBjaGVja09ubGluZSkge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgY29uc3Qgb3JnSWQgPSAoX2MgPSAoX2EgPSBpdGVtLm9yZ0lkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2IgPSBpdGVtLnBvcnRhbCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlkKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBwb3J0YWwgPT09IG51bGwgfHwgcG9ydGFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3J0YWwuaWQ7XG4gIHJldHVybiBmcm9tQ2FjaGUoKCkgPT4gZ2V0T3JnUHJvcGVydGllcyhpdGVtLCBvcmdJZCwgbG9jYWxlLCBwb3J0YWwsIGNoZWNrT25saW5lKSwgXCJ2ZXJpZmllZFwiLCBvcmdJZCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoVXNlcih1c2VybmFtZSwgcG9ydGFsLCBjaGVja09ubGluZSkge1xuICBjb25zdCByZXN0QmFzZSA9IGNoZWNrT25saW5lID8gXCJodHRwczovL3d3dy5hcmNnaXMuY29tL3NoYXJpbmcvcmVzdC9cIiA6IGdldFJlc3RCYXNlVXJsKHBvcnRhbCk7XG4gIGNvbnN0IHVybCA9IGAke3Jlc3RCYXNlICE9PSBudWxsICYmIHJlc3RCYXNlICE9PSB2b2lkIDAgPyByZXN0QmFzZSA6IGdldFJlc3RCYXNlVXJsKHBvcnRhbCl9Y29tbXVuaXR5L3VzZXJzLyR7dXNlcm5hbWV9YDtcbiAgY29uc3Qgb25saW5lRnJvbVBvcnRhbCA9ICh1cmwgPT09IG51bGwgfHwgdXJsID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1cmwuaW5jbHVkZXMoXCJ3d3cuYXJjZ2lzLmNvbVwiKSkgJiYgcG9ydGFsLmlzUG9ydGFsO1xuICBjb25zdCBvcHRpb25zID0gb25saW5lRnJvbVBvcnRhbCA/IHsgZGlzYWJsZUlkZW50aXR5TG9va3VwOiB0cnVlLCBhZGRUb2tlbk1hbnVhbGx5OiBmYWxzZSB9IDoge307XG4gIHJldHVybiBmcm9tQ2FjaGUoYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXF1ZXN0KHVybCwge30sIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBhbiBlcnJvciBmZXRjaGluZyB0aGUgdXNlciBsaWtlbHkgbWVhbnMgdGhlIHVzZXIgaXMgcHJpdmF0ZVxuICAgICAgLy8gcmV0dXJuIGEgdXNlci1zaGFwZWQgb2JqZWN0IHdpdGgganVzdCB0aGUgdXNlcm5hbWVcbiAgICAgIHJldHVybiB7IHVzZXJuYW1lIH07XG4gICAgfVxuICB9LCBcInVzZXJcIiwgdXJsKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZldGNoSXRlbVVzZXJJbmZvKGl0ZW0sIHBvcnRhbCwgbGFuZywgY2hlY2tPbmxpbmUpIHtcbiAgaWYgKChpdGVtID09PSBudWxsIHx8IGl0ZW0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZW0uY29udGVudFN0YXR1cykgPT09IFwicHVibGljX2F1dGhvcml0YXRpdmVcIikge1xuICAgIGNvbnN0IHZlcmlmaWVkSW5mbyA9IGF3YWl0IGZldGNoVmVyaWZpZWQoaXRlbSwgbGFuZywgcG9ydGFsLCBjaGVja09ubGluZSk7XG4gICAgaWYgKCF2ZXJpZmllZEluZm8pIHtcbiAgICAgIHJldHVybiBmZXRjaFVzZXIoaXRlbS5vd25lciwgcG9ydGFsLCBjaGVja09ubGluZSk7XG4gICAgfVxuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIG5hbWUsIHRodW1ibmFpbCwgdXJsIH0gPSB2ZXJpZmllZEluZm87XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiA/IHNhbml0aXplSFRNTChkZXNjcmlwdGlvbikgOiBcIlwiLFxuICAgICAgZnVsbE5hbWU6IG5hbWUsXG4gICAgICB1c2VybmFtZTogaXRlbS5vd25lcixcbiAgICAgIHRodW1ibmFpbCxcbiAgICAgIGlkOiBpdGVtLm9yZ0lkLFxuICAgICAgdXJsXG4gICAgfTtcbiAgfVxuICByZXR1cm4gZmV0Y2hVc2VyKGl0ZW0ub3duZXIsIHBvcnRhbCwgY2hlY2tPbmxpbmUpO1xufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hVc2VyR3JvdXBzKHVzZXJuYW1lLCBwb3J0YWwsIGNoZWNrT25saW5lKSB7XG4gIGNvbnN0IHJlc3RCYXNlID0gY2hlY2tPbmxpbmUgPyBcImh0dHBzOi8vd3d3LmFyY2dpcy5jb20vc2hhcmluZy9yZXN0L1wiIDogZ2V0UmVzdEJhc2VVcmwocG9ydGFsKTtcbiAgY29uc3Qgb3B0aW9ucyA9IGNoZWNrT25saW5lID8geyBkaXNhYmxlSWRlbnRpdHlMb29rdXA6IHRydWUsIGFkZFRva2VuTWFudWFsbHk6IGZhbHNlIH0gOiB7fTtcbiAgY29uc3Qgc2VhcmNoR3JvdXBzID0gYXN5bmMgKCkgPT4gcmVxdWVzdChgJHtyZXN0QmFzZX1jb21tdW5pdHkvZ3JvdXBzYCwge1xuICAgIHE6IGAob3duZXI6XCIke3VzZXJuYW1lfVwiKWAsXG4gICAgbnVtOiAxMDBcbiAgfSwgb3B0aW9ucyk7XG4gIHJldHVybiBmcm9tQ2FjaGUoc2VhcmNoR3JvdXBzLCBcInVzZXJHcm91cHNcIiwgdXNlcm5hbWUpO1xufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hVc2VySXRlbXNUb3RhbCh1c2VyLCBwb3J0YWwsIGNoZWNrT25saW5lKSB7XG4gIGNvbnN0IHsgdXNlcm5hbWUgfSA9IHVzZXI7XG4gIGNvbnN0IHJlc3RCYXNlID0gY2hlY2tPbmxpbmUgPyBcImh0dHBzOi8vd3d3LmFyY2dpcy5jb20vc2hhcmluZy9yZXN0L1wiIDogZ2V0UmVzdEJhc2VVcmwocG9ydGFsKTtcbiAgY29uc3Qgb3B0aW9ucyA9IGNoZWNrT25saW5lID8geyBkaXNhYmxlSWRlbnRpdHlMb29rdXA6IHRydWUsIGFkZFRva2VuTWFudWFsbHk6IGZhbHNlIH0gOiB7fTtcbiAgY29uc3Qgc2VhcmNoVXNlckl0ZW1Ub3RhbCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYCR7cmVzdEJhc2V9c2VhcmNoYCwge1xuICAgICAgcTogYChvd25lcjpcIiR7dXNlcm5hbWV9XCIpICR7SElEREVOX0lURU1TX1FVRVJZfWAsXG4gICAgICBudW06IDFcbiAgICB9LCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzcG9uc2UudG90YWw7XG4gIH07XG4gIHJldHVybiBmcm9tQ2FjaGUoc2VhcmNoVXNlckl0ZW1Ub3RhbCwgXCJ1c2VySXRlbXNUb3RhbFwiLCB1c2VybmFtZSk7XG59XG5mdW5jdGlvbiBnZXRVc2VyVGh1bWJuYWlsVVJJKHVzZXIsIHBvcnRhbCwgbm9Ub2tlbiA9IGZhbHNlKSB7XG4gIGlmICghdXNlci50aHVtYm5haWwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBpZiB1c2VyIGJlZ2lucyB3aXRoIGEgcHJvdG9jb2wsIGFzc3VtZSBpdCdzIGFscmVhZHkgZnVsbHkgcXVhbGlmaWVkXG4gIGlmICh1c2VyLnRodW1ibmFpbC5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgIHJldHVybiB1c2VyLnRodW1ibmFpbDtcbiAgfVxuICBjb25zdCB0b2tlbiA9IGdldFRva2VuKHBvcnRhbCk7XG4gIHJldHVybiBgJHtnZXRSZXN0QmFzZVVybChwb3J0YWwpfWNvbW11bml0eS91c2Vycy8ke3VzZXIudXNlcm5hbWV9L2luZm8vJHt1c2VyLnRodW1ibmFpbH0ke3Rva2VuICYmICFub1Rva2VuID8gYD90b2tlbj0ke3Rva2VufWAgOiBcIlwifWA7XG59XG5mdW5jdGlvbiBnZXRGdWxsTmFtZSh1c2VyLCBsYW5nKSB7XG4gIGNvbnN0IHsgZnVsbE5hbWUsIGZpcnN0TmFtZSwgbGFzdE5hbWUsIHVzZXJuYW1lIH0gPSB1c2VyO1xuICBpZiAoIWZ1bGxOYW1lKSB7XG4gICAgaWYgKGZpcnN0TmFtZSAmJiBsYXN0TmFtZSkge1xuICAgICAgcmV0dXJuIGxhbmcgPT09IFwiamFcIiA/IGAke3VzZXIubGFzdE5hbWV9ICR7dXNlci5maXJzdE5hbWV9YCA6IGAke3VzZXIuZmlyc3ROYW1lfSAke3VzZXIubGFzdE5hbWV9YDtcbiAgICB9XG4gICAgcmV0dXJuIHVzZXJuYW1lO1xuICB9XG4gIHJldHVybiBmdWxsTmFtZTtcbn1cblxuZXhwb3J0IHsgZmV0Y2hJdGVtVXNlckluZm8gYXMgYSwgZmV0Y2hWZXJpZmllZCBhcyBiLCBnZXRVc2VyVGh1bWJuYWlsVVJJIGFzIGMsIGZldGNoVXNlckdyb3VwcyBhcyBkLCBmZXRjaFVzZXJJdGVtc1RvdGFsIGFzIGUsIGZldGNoVXNlciBhcyBmLCBnZXRGdWxsTmFtZSBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=