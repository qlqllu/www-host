"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-1319a4"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-color-input_7.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-color-input_7.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_color_input: () => (/* binding */ ArcgisColorInput),
/* harmony export */   arcgis_popup_color_popover: () => (/* binding */ ArcgisPopupColorPopover),
/* harmony export */   arcgis_popup_styler_popover: () => (/* binding */ ArcgisPopupStylerPopover),
/* harmony export */   arcgis_symbol_picker_file_upload: () => (/* binding */ ArcgisSymbolStylerFileUpload),
/* harmony export */   arcgis_symbol_styler_color_ramp_input: () => (/* binding */ ArcgisSymbolStylerColorRampInput),
/* harmony export */   arcgis_symbol_styler_section: () => (/* binding */ ArcgisSymbolStylerSection),
/* harmony export */   arcgis_symbol_styler_symbol_preview: () => (/* binding */ ArcgisSymbolStylerSymbolPreview)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage-d7f5822e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./popupStore-a5d93b58.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./colorRampUtils-7e6d2ad8.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorRampUtils-7e6d2ad8.js");
/* harmony import */ var _color_776689e9_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./color-776689e9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-776689e9.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */












const CSS$3 = {
  recent: "recent",
  preview: "preview",
  colorPickerContainer: "color-picker-container"
};
const defaultColor = "#d00b33";

const arcgisColorInputCss = ":host,arcgis-symbol-styler-inline-input{display:block}.color-picker-container{display:flex;flex-direction:column}.color-picker{--calcite-ui-border-1:transparent}[slot=preview] calcite-color-picker-swatch{width:100%;height:24px}.recent{align-items:center;border:1px solid #949494;display:flex;gap:8px;height:32px;padding:0px 6px;transition:outline-offset 100ms ease-in-out, outline-color 100ms ease-in-out}.recent:focus{outline:2px solid var(--calcite-ui-brand);outline-offset:2px}.recent calcite-color-picker-swatch:not([active]){cursor:pointer}.recent calcite-color-picker-swatch:focus{outline:2px solid var(--calcite-ui-brand);outline-offset:2px}.recent calcite-color-picker-swatch:focus[active]{border-radius:100%}.empty-swatch{cursor:default}calcite-tooltip:not([open]){visibility:hidden;pointer-events:none}";

const ArcgisColorInput = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisColorInputChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisColorInputChange", 7);
    this.arcgisInternalColorInputStoredColor = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisInternalColorInputStoredColor", 7);
    this.arcgisColorInputPopoverOpen = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisColorInputPopoverOpen", 7);
    this.arcgisColorInputPopoverClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisColorInputPopoverClose", 7);
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    this.focusHandler = (event) => {
      this.activeEl = event.target;
    };
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.onClose = (event) => {
      var _a;
      this.storeRecentColorToStorage((_a = this.colorPickerEl) === null || _a === void 0 ? void 0 : _a.value);
      event.stopPropagation();
      this.arcgisColorInputPopoverClose.emit();
    };
    this.handleSwatchClickOrKeyUp = (event) => {
      if ("key" in event && event.key !== "Enter" && event.key !== "Space") {
        return;
      }
      const swatch = event.currentTarget;
      const selected = swatch.color;
      this.updateColor(selected);
      setTimeout(() => this.recentColor1El.focus(), 200);
    };
    this.recentColorsKeyDownHandler = (event) => {
      if (this.recentColors.length === 1) {
        return;
      }
      const key = event.key;
      let activeRecentColorIndex;
      if (this.activeEl === this.recentColor1El) {
        activeRecentColorIndex = 1;
      }
      else if (this.activeEl === this.recentColor2El) {
        activeRecentColorIndex = 2;
      }
      else if (this.activeEl === this.recentColor3El) {
        activeRecentColorIndex = 3;
      }
      if (key === "ArrowLeft") {
        if (!activeRecentColorIndex || activeRecentColorIndex === 1) {
          this[`recentColor${this.recentColors.length}El`].focus();
        }
        else {
          this[`recentColor${activeRecentColorIndex - 1}El`].focus();
        }
      }
      if (key === "ArrowRight") {
        if (!activeRecentColorIndex || activeRecentColorIndex === this.recentColors.length) {
          this.recentColor1El.focus();
        }
        else {
          this[`recentColor${activeRecentColorIndex + 1}El`].focus();
        }
      }
    };
    this.setInlineInputRef = (el) => {
      this.inlineInputEl = el;
    };
    this.setColorPickerRef = (el) => {
      if (el) {
        this.colorPickerEl = el;
      }
      // we get a second call of this with el=null e.g. when toggling on background color in Map Viewer
    };
    this.setRecentColorRef1 = (el) => {
      if (el) {
        this.recentColor1El = el;
      }
    };
    this.setRecentColorRef2 = (el) => {
      if (el) {
        this.recentColor2El = el;
      }
    };
    this.setRecentColorRef3 = (el) => {
      if (el) {
        this.recentColor3El = el;
      }
    };
    this.onOpen = () => {
      var _a;
      (_a = this.colorPickerEl) === null || _a === void 0 ? void 0 : _a.setFocus();
      this.arcgisColorInputPopoverOpen.emit();
    };
    this.handleClear = () => {
      this.updateColor(null);
    };
    this.clearable = false;
    this.color = defaultColor;
    this.compact = false;
    this.disabled = false;
    this.placement = "auto";
    this.popoverProps = undefined;
    this.storageId = undefined;
    this.recentColors = [];
  }
  storedColorHandler(event) {
    if (!event.composedPath().includes(this.el)) {
      this.setRecentColorsFromStorage();
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    var _a;
    await ((_a = this.inlineInputEl) === null || _a === void 0 ? void 0 : _a.setFocus());
  }
  async close() {
    await this.inlineInputEl.close();
  }
  updateColor(color, save = true) {
    if (color === this.color) {
      return;
    }
    this.color = color;
    this.arcgisColorInputChange.emit();
    if (save) {
      this.storeRecentColorToStorage(color);
    }
  }
  storeRecentColorToStorage(color) {
    if (!color) {
      return;
    }
    const recentColors = [color, ...this.recentColors.filter((recent) => recent !== color)].slice(0, 3);
    (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_2__.s)(this.storageId, recentColors, true);
    this.recentColors = recentColors;
    this.arcgisInternalColorInputStoredColor.emit();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    [this.strings] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
    this.setRecentColorsFromStorage();
  }
  setRecentColorsFromStorage() {
    const recentColors = (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.storageId, true);
    if (recentColors) {
      this.recentColors = [...recentColors];
    }
  }
  disconnectedCallback() {
    this.removeTooltip();
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { compact, disabled, recentColors, strings } = this;
    const recents = [recentColors[0], recentColors[1]];
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.el) === "rtl";
    if (!compact) {
      recents.push(recentColors[2]);
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-inline-input", { disabled: disabled, intlDone: strings.commitColor, heading: strings.selectColor, label: strings.selectColor, onArcgisSymbolStylerInlineInputClose: this.onClose, onArcgisSymbolStylerInlineInputOpen: this.onOpen, popoverProps: this.popoverProps, ref: this.setInlineInputRef }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.colorPickerContainer, slot: "content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker", { allowEmpty: this.clearable, class: "color-picker", key: `color-picker${compact ? "--compact" : ""}`, onCalciteColorPickerInput: (event) => {
        this.updateColor(this.colorPickerEl.value, false);
        event.stopPropagation();
      }, ref: this.setColorPickerRef, scale: compact ? "s" : "m", storageId: this.storageId, value: this.color })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "preview" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker-swatch", { color: this.color, scale: "s" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-label": strings.recentColors, class: CSS$3.recent, onKeyDown: this.recentColorsKeyDownHandler, slot: "content-end", tabindex: -1 }, recents.map((recent, index) => {
      return recent ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker-swatch", { active: recent === this.color, color: recent, key: recent, onClick: this.handleSwatchClickOrKeyUp, onFocus: this.focusHandler, onKeyUp: this.handleSwatchClickOrKeyUp, ref: this[`setRecentColorRef${index + 1}`], role: "button", scale: "s", tabindex: 0 })) : (this.renderEmptySwatch(`empty-swatch-${index}`));
    })), this.clearable && [
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-end" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "circle-disallowed",
        //id="no-input-button"
        scale: "s", label: strings.clearColor, text: strings.clearColor, ref: (node) => (this.actionEl = node), onClick: this.handleClear, onMouseOver: () => this.addTooltip({
          referenceElement: this.actionEl,
          placement: rtl ? "right-start" : "left-start",
          innerHTML: strings.noColor
        }), onMouseOut: () => this.removeTooltip() }))
    ])));
  }
  renderEmptySwatch(key) {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { class: "empty-swatch", viewBox: "0 0 20 20", xmlns: "http://www.w3.org/2000/svg", width: "20", key: key }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { width: "20", height: "20", fill: "#f8f8f8", stroke: "#000", "stroke-dasharray": "2" })));
  }
  addTooltip(props) {
    this.removeTooltip();
    this.tooltipEl = document.createElement("calcite-tooltip");
    this.tooltipEl.placement = props.placement || "auto";
    this.tooltipEl.referenceElement = props.referenceElement;
    this.tooltipEl.overlayPositioning = "fixed";
    this.tooltipEl.innerHTML = props.innerHTML;
    this.tooltipEl.open = true;
    // it won't show if just added to this.el
    this.el.parentElement.appendChild(this.tooltipEl);
  }
  removeTooltip() {
    var _a;
    if ((_a = this.tooltipEl) === null || _a === void 0 ? void 0 : _a.parentNode) {
      this.tooltipEl.parentNode.removeChild(this.tooltipEl);
      this.tooltipEl = undefined;
    }
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisColorInput.style = arcgisColorInputCss;

const ArcgisPopupColorPopover = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisPopupColorPopoverClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupColorPopoverClose", 7);
    this.arcgisPopupColorPopoverOpen = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupColorPopoverOpen", 7);
    this.arcgisPopupColorPopoverChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupColorPopoverChange", 7);
    this.closedWithEvent = false;
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.handlePanelDismissedChange = (event) => {
      const panel = event.currentTarget;
      if (panel.closed) {
        this.close();
        panel.closed = false;
      }
      event.stopPropagation();
    };
    this.handleDone = () => {
      this.close();
    };
    this.handlePopoverOpen = (event) => {
      this.arcgisPopupColorPopoverOpen.emit();
      event.stopPropagation();
    };
    this.handlePopoverClose = (event) => {
      this.arcgisPopupColorPopoverClose.emit();
      this.closedWithEvent = true;
      event.stopPropagation();
    };
    this.handlePopoverKeyUp = ({ key }) => {
      if (key === "Escape") {
        this.close();
      }
    };
    this.disabled = false;
    this.heading = undefined;
    this.intlDone = undefined;
    this.label = undefined;
    this.hexColor = undefined;
    this.popoverProps = undefined;
    this.open = false;
  }
  disabledChanged(value) {
    if (value && this.open) {
      this.close();
    }
  }
  onInlineInputOpen(event) {
    if (!this.open) {
      return;
    }
    if (!event.composedPath().includes(this.el)) {
      this.open = false;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    var _a;
    (_a = this.panelElement) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  async close() {
    this.open = false;
    this.arcgisPopupColorPopoverClose.emit();
    this.closedWithEvent = true;
  }
  async setOpen(open) {
    this.open = open;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle Methods
  //
  //--------------------------------------------------------------------------
  disconnectedCallback() {
    if (!this.closedWithEvent) {
      this.arcgisPopupColorPopoverClose.emit();
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { popoverProps } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { pointerDisabled: true, onKeyUp: this.handlePopoverKeyUp, label: this.label, offsetDistance: (popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.offsetDistance) || 0, offsetSkidding: (popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.offsetSkidding) || 0, flipDisabled: (popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.flipDisabled) || false, open: this.open, overlayPositioning: (popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.overlayPositioning) || "fixed", referenceElement: (popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.refElement) || this.previewContainerEl, onCalcitePopoverClose: this.handlePopoverClose, onCalcitePopoverOpen: this.handlePopoverOpen, placement: (popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.placement) || "bottom" // setting to bottom (vs auto) to workaround absolute placement issue
      ,
      triggerDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { closable: true, onCalcitePanelClose: this.handlePanelDismissedChange, heading: this.heading, style: (popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.maxHeight) && { maxHeight: popoverProps.maxHeight }, ref: (node) => (this.panelElement = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker", { allowEmpty: false, onCalciteColorPickerInput: (event) => {
        const hexColor = event.target.value;
        this.arcgisPopupColorPopoverChange.emit(hexColor);
        event.stopPropagation();
      }, scale: "m", value: this.hexColor, storageId: "arcgis-symbol-styler-storage-colors" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", scale: "m", slot: "footer", width: "full", label: this.intlDone, onClick: this.handleDone }, this.intlDone)))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "disabled": ["disabledChanged"]
  }; }
};

const arcgisPopupStylerPopoverCss = ".styler-panel{width:328px;min-height:300px}.styler-div{width:100%}";

const ArcgisPopupStylerPopover = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisPopupStylerPopoverClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupStylerPopoverClose", 7);
    this.arcgisPopupStylerPopoverDisconnected = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisPopupStylerPopoverDisconnected", 7);
    // ====================================
    this.documentTabHandler = undefined;
    this.documentClickHandler = undefined;
    this.panelScrollHandler = undefined;
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onOpen = () => {
      requestAnimationFrame(() => this.setFocus());
    };
    this.referenceElement = undefined;
    this.open = false;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  async setFocus() {
    var _a;
    (_a = this.closeActionNode) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  async setOpen(open) {
    var _a;
    if (this.popoverNode) {
      this.popoverNode.open = open;
      if (open) {
        (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
        this.popoverNode.reposition();
      }
    }
  }
  async addStyler(stylerNode) {
    if (this.contentNode) {
      this.contentNode.appendChild(stylerNode);
    }
  }
  async getPopoverRefElement() {
    return this.closeActionNode;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    this.strings = _popupStore_a5d93b58_js__WEBPACK_IMPORTED_MODULE_4__.p.strings;
  }
  componentDidLoad() {
    requestAnimationFrame(() => { var _a; return (_a = this.closeActionNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  disconnectedCallback() {
    // in case popover got removed by just removing node from DOM
    this.arcgisPopupStylerPopoverDisconnected.emit();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { referenceElement, open, strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { open: open, placement: "leading-start", offsetDistance: 0, offsetSkidding: 45, pointerDisabled: true, triggerDisabled: true, label: "", referenceElement: referenceElement, onCalcitePopoverOpen: this.onOpen, ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", {
      // need access to the close button dom to pass to symbol styler as reference element,
      // so can't use closable:true
      closable: false, heading: strings.chartStyle, class: "styler-panel", ref: (node) => (this.panelNode = node), onCalcitePanelClose: () => {
        this.arcgisPopupStylerPopoverClose.emit();
        // focus on info icon; wait so enter key doesn't re-open it
        setTimeout(() => referenceElement.parentElement.focus(), 300);
      }
    }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "symbol-styler-dismiss-button", slot: "header-actions-end", scale: "s", icon: "x", text: strings.close, onClick: () => this.arcgisPopupStylerPopoverClose.emit(), ref: (node) => (this.closeActionNode = node) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "styler-div", ref: (node) => (this.contentNode = node) })))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisPopupStylerPopover.style = arcgisPopupStylerPopoverCss;

const arcgisSymbolPickerFileUploadCss = ":host{display:inline-block;background-color:white;width:100%;padding:20px 5px 15px 5px;border-color:var(--calcite-ui-border-1);border-width:2px;border-style:dashed;box-sizing:border-box}.file-step{text-align:center}.file-step__upload-icon{margin-bottom:0.5rem;margin-top:0.25rem;color:var(--calcite-ui-text-3)}.file-step__upload-icon calcite-icon{width:4rem;height:4rem}.file-step__drag-text{font-size:0.9rem;margin-bottom:0.25rem}.file-step__browse-button{margin-top:1rem}.file-step__file-input{display:none}";

const ArcgisSymbolStylerFileUpload = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisSymbolPickerFileUploadChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolPickerFileUploadChange", 7);
    this.arcgisSymbolPickerFileUploadInvalidFile = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolPickerFileUploadInvalidFile", 7);
    this.arcgisSymbolPickerFileUploadError = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolPickerFileUploadError", 7);
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.handleDragOver = (event) => {
      event.preventDefault();
    };
    this.handleDrop = (event) => {
      event.preventDefault();
      this.processFile(event.dataTransfer.files[0]);
    };
    this.handleFileInputChange = async (event) => {
      await this.processFile(event.target.files[0]);
    };
    this.portal = undefined;
    this.strings = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "file-step", "aria-label": this.strings.fileUpload.dragDrop, onDragOver: this.handleDragOver, onDragEnter: this.handleDragOver, onDrop: this.handleDrop }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "file-step__drag-text", "aria-label": this.strings.fileUpload.dragDrop }, this.strings.fileUpload.dragDrop), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "file-step__browse-button", appearance: "transparent", iconStart: "image", onClick: () => {
        this.fileInput.click();
      } }, this.strings.fileUpload.browse), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { ref: (el) => {
        this.fileInput = el;
      }, onChange: this.handleFileInputChange, class: "file-step__file-input", type: "file", accept: ".jpg,.gif,.png,.svg,image/jpg,image/gif,image/png,image/svg+xml" }))));
  }
  async processFile(file) {
    const { portal } = this;
    if (!file) {
      return;
    }
    if (file) {
      if (!this.isValidFile(file)) {
        this.arcgisSymbolPickerFileUploadInvalidFile.emit();
        return;
      }
      if (this.isSVGFile(file)) {
        const [symbolService] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_5__.l)(["esri/rest/symbolService"]);
        const symbolServiceUrl = portal.helperServices.symbols.url;
        const reader = new FileReader();
        reader.onload = async (event) => {
          const params = { svgImage: event.target.result };
          symbolService.generateSymbol(symbolServiceUrl, params).then((result) => {
            this.arcgisSymbolPickerFileUploadChange.emit({
              cim: result.symbol,
              fileName: file.name || "",
              width: result.symbol.width,
              height: result.symbol.height
            });
          });
        };
        reader.readAsText(file);
      }
      else {
        const reader = new FileReader();
        reader.onload = async (event) => {
          var image = new Image();
          image.src = event.target.result;
          image.onload = () => {
            this.arcgisSymbolPickerFileUploadChange.emit({
              dataURL: event.target.result,
              fileName: file.name || "",
              width: image.width,
              height: image.height
            });
          };
          image.onerror = () => {
            this.arcgisSymbolPickerFileUploadError.emit();
          };
        };
        reader.readAsDataURL(file);
      }
    }
  }
  isValidFile(file) {
    return (file === null || file === void 0 ? void 0 : file.name) && /\.(gif|jpg|jpeg|png|svg)$/i.test(file.name);
  }
  isSVGFile(file) {
    return (file === null || file === void 0 ? void 0 : file.name) && /\.(svg)$/i.test(file.name);
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSymbolStylerFileUpload.style = arcgisSymbolPickerFileUploadCss;

const CSS$2 = {
  recent: "recent",
  preview: "preview",
  colorPickerContainer: "color-picker-container"
};

let rampId = 0;
const CSS$1 = {
  colorRampItem: "color-ramp-item"
};
const ColorRampItem = ({ stops, style = "continuous", name, layout = "vertical", width = 20, height = 70 }) => {
  const id = `${rampId++}-color-ramp-gradient`;
  const gradientTransform = layout === "vertical" ? "rotate(90)" : "";
  return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { title: name, class: CSS$1.colorRampItem },
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { xmlns: "http://www.w3.org/2000/svg", height: height, width: width },
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("defs", null,
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("linearGradient", { id: id, gradientTransform: gradientTransform }, style === "continuous" ? getGradientStops(stops) : getSolidStops(stops))),
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { x: "0", y: "0", fill: `url('#${id}')`, width: "100%", height: "100%" }))));
};
function getGradientStops(stops) {
  const colorOffset = 1 / (stops.length - 1);
  return stops.slice().map(({ r, g, b }, index) => {
    const offset = index * colorOffset * 100;
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("stop", { "stop-color": `rgb(${r}, ${g}, ${b})`, offset: `${offset}%` });
  });
}
function getSolidStops(stops) {
  const colorOffset = 1 / stops.length;
  const colors = [];
  stops.slice().forEach(({ r, g, b }, index) => {
    const offset = index * colorOffset * 100;
    const nextOffset = (index + 1) * colorOffset * 100;
    colors.push((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("stop", { "stop-color": `rgb(${r}, ${g}, ${b})`, offset: `${offset}%` }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("stop", { "stop-color": `rgb(${r}, ${g}, ${b})`, offset: `${nextOffset}%` }));
  });
  return colors;
}

const CSS = {
  colorRampItem: "color-ramp-item"
};
const RelationshipRampColorRampItem = ({ stops, name, opacity = null, size = 48 }) => {
  const { svgUtils } = _color_776689e9_js__WEBPACK_IMPORTED_MODULE_7__.e;
  // rendering logic, types and utils are based on JS API ramp rendering from Legend
  // these will be refactored after some utils are made public: https://devtopia.esri.com/WebGIS/arcgis-js-api/pull/32811/
  const numClasses = Math.sqrt(stops.length);
  const colors = (0,_colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__.E)(stops);
  const rotation = 0;
  const surfaceSize = Math.sqrt(Math.pow(size, 2) + Math.pow(size, 2)) + (0 ); // diagonal length + 5px padding for arrows
  let opacityStyle = null;
  if (opacity != null) {
    opacityStyle = { opacity: `${opacity}` };
  }
  const defs = [];
  const squares = [];
  const bboxes = [];
  const groupSize = size || 75;
  const cellSize = groupSize / numClasses;
  for (let i = 0; i < numClasses; i++) {
    const y = i * cellSize;
    for (let j = 0; j < numClasses; j++) {
      const x = j * cellSize;
      const fillAttrs = generateFillAttributes(colors[i][j]);
      const strokeAttrs = generateStrokeAttributes(null);
      const shape = {
        type: "rect",
        x,
        y,
        width: cellSize,
        height: cellSize
      };
      defs.push(renderDef(fillAttrs));
      squares.push(renderShape(shape, fillAttrs.fill, strokeAttrs, null));
      bboxes.push(svgUtils.getBoundingBox(shape));
    }
  }
  let svgStyle = null;
  const bbox = svgUtils.computeBBox(bboxes);
  const rectMatrix = svgUtils.getTransformMatrix(bbox, surfaceSize, surfaceSize, 0, false, rotation);
  return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { title: name, class: CSS.colorRampItem },
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: opacityStyle },
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { width: surfaceSize, height: surfaceSize, style: svgStyle, xmlns: "http://www.w3.org/2000/svg" },
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("defs", null, defs),
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("g", { transform: rectMatrix }, squares)))));
};
function renderDef(attrs) {
  const { pattern, linearGradient } = attrs;
  if (pattern) {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("pattern", { id: pattern.id, patternUnits: "userSpaceOnUse", x: pattern.x, y: pattern.y, width: pattern.width, height: pattern.height },
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("image", { x: pattern.image.x, y: pattern.image.y, width: pattern.image.width, height: pattern.image.height, href: pattern.image.href })));
  }
  if (linearGradient) {
    const stops = linearGradient.stops.map((stop, index) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("stop", { key: `${index}-stop`, offset: stop.offset, "stop-color": stop.color })));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("linearGradient", { id: linearGradient.id, gradientUnits: "userSpaceOnUse", x1: linearGradient.x1, y1: linearGradient.y1, x2: linearGradient.x2, y2: linearGradient.y2 }, stops));
  }
  return null;
}
function getSvgPathFromCommandObjects(commandObjects) {
  return commandObjects
    .map((commandObj) => `${commandObj.command} ${commandObj.values.join(" ")}`)
    .join(" ")
    .trim();
}
let patternCount = 0;
let linearGradientCount = 0;
function renderShape(shape, fill, stroke, textAttrs) {
  if (shape) {
    if (shape.type === "circle") {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { fill: fill, "fill-rule": "evenodd", stroke: stroke.color, "stroke-width": stroke.width, "stroke-linecap": stroke.cap, "stroke-linejoin": stroke.join, "stroke-dasharray": stroke.dashArray, "stroke-miterlimit": "4", cx: shape.cx, cy: shape.cy, r: shape.r }));
    }
    if (shape.type === "ellipse") {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ellipse", { fill: fill, "fill-rule": "evenodd", stroke: stroke.color, "stroke-width": stroke.width, "stroke-linecap": stroke.cap, "stroke-linejoin": stroke.join, "stroke-dasharray": stroke.dashArray, "stroke-miterlimit": "4", cx: shape.cx, cy: shape.cy, rx: shape.rx, ry: shape.ry }));
    }
    if (shape.type === "rect") {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { fill: fill, "fill-rule": "evenodd", stroke: stroke.color, "stroke-width": stroke.width, "stroke-linecap": stroke.cap, "stroke-linejoin": stroke.join, "stroke-dasharray": stroke.dashArray, "stroke-miterlimit": "4", x: shape.x, y: shape.y, width: shape.width, height: shape.height }));
    }
    if (shape.type === "image") {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("image", { href: shape.src, x: shape.x, y: shape.y, width: shape.width, height: shape.height, preserveAspectRatio: "none" }));
    }
    if (shape.type === "path") {
      const path = typeof shape.path !== "string" ? getSvgPathFromCommandObjects(shape.path) : shape.path;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { fill: fill, "fill-rule": "evenodd", stroke: stroke.color, "stroke-width": stroke.width, "stroke-linecap": stroke.cap, "stroke-linejoin": stroke.join, "stroke-dasharray": stroke.dashArray, "stroke-miterlimit": "4", d: path }));
    }
    if (shape.type === "text") {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("text", { fill: fill, "fill-rule": "evenodd", stroke: stroke.color, "stroke-width": stroke.width, "stroke-linecap": stroke.cap, "stroke-linejoin": stroke.join, "stroke-dasharray": stroke.dashArray, "stroke-miterlimit": "4", "text-anchor": textAttrs.align, "text-decoration": textAttrs.decoration, kerning: textAttrs.kerning, rotate: textAttrs.rotate, "text-rendering": "auto", "font-style": textAttrs.font.style, "font-variant": textAttrs.font.variant, "font-weight": textAttrs.font.weight, "font-size": textAttrs.font.size, "font-family": textAttrs.font.family, x: shape.x, y: shape.y }, shape.text));
    }
  }
  return null;
}
function generateFillAttributes(fill) {
  const attrs = {
    fill: "none",
    pattern: null,
    linearGradient: null
  };
  if (fill) {
    if ("type" in fill && fill.type === "pattern") {
      const id = `patternId-${++patternCount}`;
      attrs.fill = `url(#${id})`;
      attrs.pattern = {
        id,
        x: fill.x,
        y: fill.y,
        width: fill.width,
        height: fill.height,
        image: {
          x: 0,
          y: 0,
          width: fill.width,
          height: fill.height,
          href: fill.src
        }
      };
    }
    else if ("type" in fill && fill.type === "linear") {
      const id = `linearGradientId-${++linearGradientCount}`;
      attrs.fill = `url(#${id})`;
      attrs.linearGradient = {
        id,
        x1: fill.x1,
        y1: fill.y1,
        x2: fill.x2,
        y2: fill.y2,
        stops: fill.colors.map((stop) => ({
          offset: stop.offset,
          color: stop.color && (0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_7__.d)(stop.color).toString()
        }))
      };
    }
    else if (fill) {
      const color = (0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_7__.d)(fill);
      attrs.fill = color.toString();
    }
  }
  return attrs;
}
function generateStrokeAttributes(stroke) {
  const strokeAttrs = {
    color: "none",
    width: 1,
    cap: "butt",
    join: "4",
    dashArray: "none"
  };
  if (stroke) {
    if (stroke.width != null) {
      strokeAttrs.width = stroke.width;
    }
    if (stroke.cap) {
      strokeAttrs.cap = stroke.cap;
    }
    if (stroke.join) {
      strokeAttrs.join = stroke.join.toString();
    }
    if (stroke.color) {
      strokeAttrs.color = (0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_7__.d)(stroke.color).toString();
    }
    if (stroke.style) {
      let da = null;
      if (stroke.style in styleToDashArray) {
        da = styleToDashArray[stroke.style];
      }
      if (Array.isArray(da)) {
        da = da.slice(0);
        for (let i = 0; i < da.length; ++i) {
          da[i] *= stroke.width;
        }
        if (stroke.cap !== "butt") {
          for (let i = 0; i < da.length; i += 2) {
            da[i] -= stroke.width;
            if (da[i] < 1) {
              da[i] = 1;
            }
          }
          for (let i = 1; i < da.length; i += 2) {
            da[i] += stroke.width;
          }
        }
        da = da.join(",");
      }
      strokeAttrs.dashArray = da;
    }
  }
  return strokeAttrs;
}
const styleToDashArray = {
  solid: "none",
  shortdash: [4, 1],
  shortdot: [1, 1],
  shortdashdot: [4, 1, 1, 1],
  shortdashdotdot: [4, 1, 1, 1, 1, 1],
  dot: [1, 3],
  dash: [4, 3],
  longdash: [8, 3],
  dashdot: [4, 3, 1, 3],
  longdashdot: [8, 3, 1, 3],
  longdashdotdot: [8, 3, 1, 3, 1, 3]
};

const arcgisSymbolStylerColorRampInputCss = ".scroller{max-height:var(--scroller-max-height, 200px);overflow-y:auto;min-width:200px;overflow-x:hidden;display:flex;justify-content:center}.color-ramp-item{display:inline-flex;flex-grow:1}.color-ramp-item svg{display:flex}.color-picker-container{display:flex;flex-direction:column}.color-picker-container arcgis-item-palette .palette{gap:20px}calcite-color-picker-swatch{width:200px}.section{display:flex;flex-direction:column;padding:12px;background-color:var(--arcgis-app-background)}.color-ramp-selection{padding:4px 20px 4px 4px;border:1px solid lightgray;border-top:none}.arcgis--rtl .color-ramp-selection{padding:4px 4px 4px 20px;}.color-ramp-flipper calcite-icon{margin:0 0.5rem}[slot=preview] .color-ramp-item{height:24px}";

const ArcgisSymbolStylerColorRampInput = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.setInlineInputRef = (el) => {
      this.inlineInputEl = el;
    };
    this.disabled = false;
    this.options = undefined;
    this.placement = "auto";
    this.popoverProps = undefined;
    this.strings = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    var _a;
    await ((_a = this.inlineInputEl) === null || _a === void 0 ? void 0 : _a.setFocus());
  }
  async close() {
    var _a;
    await ((_a = this.inlineInputEl) === null || _a === void 0 ? void 0 : _a.close());
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { disabled, strings } = this;
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.el);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler-inline-input", { disabled: disabled, intlDone: strings.done, heading: strings.ramp, label: this.options.heading, popoverProps: this.popoverProps, ref: this.setInlineInputRef, class: {
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: dir === "rtl"
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.colorPickerContainer, slot: "content" }, this.renderRampsContent(this.options)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "preview" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(ColorRampItem, { stops: this.options.colorRampStops.slice().reverse(), style: this.options.style, layout: "horizontal", height: "100%", width: "100%" })))));
  }
  renderRampsContent({ activeCategory, colorRamps, isSelected, onCategoryChange, onFlip, onSelect, style }) {
    const { strings } = this;
    const { categories, ramps } = this.getCategoriesAndColorRampsBySelectedCategory(activeCategory, colorRamps);
    const is2D = style === "2d";
    const rampFlipIcon = is2D ? "rotate" : "arrow-up-down";
    const rampFlipLabel = is2D ? strings.rotateColors : strings.flipColors;
    const rampItemRenderer = is2D ? RelationshipRampColorRampItem : ColorRampItem;
    const rampsPerRow = is2D ? 3 : 6;
    return [
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.category, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", label: this.strings.category, onCalciteSelectChange: onCategoryChange }, categories.map((category) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: category, label: strings.categories[category], selected: category === activeCategory }))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: _colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__.C.colorRampFlipper, appearance: "transparent", onClick: (e) => {
          e.preventDefault();
          e.stopImmediatePropagation();
          onFlip();
        }, scale: "s", width: "full" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: rampFlipIcon, scale: "s", style: is2D ? { transform: "rotateY(180deg)" } : null }), rampFlipLabel)),
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [_colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__.C.scroller]: true, [_colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__.C.colorRampSelection]: true } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-palette", { items: ramps, extraItemProps: { style }, ItemRenderer: rampItemRenderer, itemsPerRow: rampsPerRow, selected: isSelected, onArcgisItemSelect: onSelect }))
    ];
  }
  getCategoriesAndColorRampsBySelectedCategory(activeCategory, allRamps) {
    const activeTags = _colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__.F[activeCategory];
    const activeRamps = allRamps.filter((colorRamp) => activeCategory === "all" || activeTags.some((tag) => colorRamp.tags.indexOf(tag) > -1));
    const usedTagsSet = new Set();
    allRamps.forEach((ramp) => ramp.tags.forEach((tag) => usedTagsSet.add(tag)));
    const categories = Object.keys(_colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__.F).filter((category) => category === "all" || _colorRampUtils_7e6d2ad8_js__WEBPACK_IMPORTED_MODULE_6__.F[category].some((tag) => usedTagsSet.has(tag)));
    return {
      categories,
      ramps: activeRamps
    };
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSymbolStylerColorRampInput.style = arcgisSymbolStylerColorRampInputCss;

const arcgisSymbolStylerSectionCss = ":host{display:flex;flex-direction:column;background-color:var(--arcgis-app-background);padding:16px 12px}:host([disabled]){opacity:var(--arcgis-app-disabled-opacity);pointer-events:none}:host([embedded]){padding:0}";

const ArcgisSymbolStylerSection = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.disabled = false;
    this.embedded = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    return (
    /* intentionally using attribute to avoid focusing container when !disabled */
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { tabindex: this.disabled ? -1 : "" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
};
ArcgisSymbolStylerSection.style = arcgisSymbolStylerSectionCss;

const arcgisSymbolStylerSymbolPreviewCss = ":host{display:inline-block}:host(.dark){background-color:#f3f3f3}";

const ArcgisSymbolStylerSymbolPreview = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.updatePreview = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_8__.d)(async () => {
      var _a;
      const { symbol } = this;
      if (!symbol) {
        return;
      }
      const options = Object.assign({}, this.options);
      // we drop size to prevent a known rendering issue – https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/41790
      if (symbol.type === "cim" && symbol.data.symbol.type === "CIMPolygonSymbol") {
        delete options.size;
      }
      const printSymbol = symbol.clone();
      if (printSymbol.type === "picture-marker" && options.size && typeof options.size === "number") {
        // renderPreviewHTML doesn't work well with non-square PMS
        // change symbol to the size we need instead
        printSymbol.width = (printSymbol.width / printSymbol.height) * options.size;
        printSymbol.height = options.size;
      }
      const currentPreviewRender = _color_776689e9_js__WEBPACK_IMPORTED_MODULE_7__.e.symbolUtils.renderPreviewHTML(printSymbol, options);
      this.lastPreviewRender = currentPreviewRender;
      const preview = await currentPreviewRender;
      const previewIsOutdated = this.lastPreviewRender !== currentPreviewRender;
      if (previewIsOutdated) {
        return;
      }
      (_a = this.lastPreview) === null || _a === void 0 ? void 0 : _a.remove();
      this.lastPreview = preview;
      this.el.shadowRoot.append(preview);
      this.backgroundTheme = _color_776689e9_js__WEBPACK_IMPORTED_MODULE_7__.e.previewSymbol2D.getContrastingBackgroundTheme(symbol, 245);
    }, 250);
    this.backgroundTheme = "light";
    this.contrast = false;
    this.options = undefined;
    this.symbol = undefined;
  }
  watchSymbolAndOptions() {
    this.updatePreview();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    await this.updatePreview();
  }
  render() {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: { dark: this.contrast && this.backgroundTheme === "dark" } });
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "symbol": ["watchSymbolAndOptions"],
    "options": ["watchSymbolAndOptions"]
  }; }
};
ArcgisSymbolStylerSymbolPreview.style = arcgisSymbolStylerSymbolPreviewCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorRampUtils-7e6d2ad8.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorRampUtils-7e6d2ad8.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ markerPlacementStepMin),
/* harmony export */   B: () => (/* binding */ markerPlacementRandomnessMax),
/* harmony export */   C: () => (/* binding */ CSS),
/* harmony export */   D: () => (/* binding */ markerPlacementRandomnessMin),
/* harmony export */   E: () => (/* binding */ expand2D),
/* harmony export */   F: () => (/* binding */ categoriesToTags),
/* harmony export */   a: () => (/* binding */ maxWidthInPx),
/* harmony export */   b: () => (/* binding */ supportedStyles),
/* harmony export */   c: () => (/* binding */ defaultVisibleColorSectionParts),
/* harmony export */   d: () => (/* binding */ defaultVisibleMarkerSectionParts),
/* harmony export */   e: () => (/* binding */ defaultVisibleColorRampSectionParts),
/* harmony export */   f: () => (/* binding */ flipColorRampStops),
/* harmony export */   g: () => (/* binding */ defaultVisibleExtraStrokeSectionParts),
/* harmony export */   h: () => (/* binding */ defaultVisibleStrokeSectionParts),
/* harmony export */   i: () => (/* binding */ maxDisplayedSymbolLayers),
/* harmony export */   j: () => (/* binding */ colorStorageId),
/* harmony export */   k: () => (/* binding */ opacityMax),
/* harmony export */   l: () => (/* binding */ rotationMax),
/* harmony export */   m: () => (/* binding */ minWidthInPx),
/* harmony export */   n: () => (/* binding */ sizeMin),
/* harmony export */   o: () => (/* binding */ opacityMin),
/* harmony export */   p: () => (/* binding */ pointPreviewOptions),
/* harmony export */   q: () => (/* binding */ sizeMax),
/* harmony export */   r: () => (/* binding */ rotationMin),
/* harmony export */   s: () => (/* binding */ supportedArrows),
/* harmony export */   t: () => (/* binding */ hatchFillOffsetMax),
/* harmony export */   u: () => (/* binding */ hatchFillOffsetMin),
/* harmony export */   v: () => (/* binding */ hatchFillSeparationMax),
/* harmony export */   w: () => (/* binding */ hatchFillSeparationMin),
/* harmony export */   x: () => (/* binding */ animationDurationMax),
/* harmony export */   y: () => (/* binding */ animationDurationMin),
/* harmony export */   z: () => (/* binding */ markerPlacementStepMax)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const CSS = {
  customSymbolContent: "custom-symbol-content",
  autoAdjustLabel: "auto-adjust-label",
  styleDropdown: "style-dropdown",
  arrowDropdown: "arrow-dropdown",
  iconDropdown: "icon-dropdown",
  iconDropdownSelected: "icon-dropdown--selected",
  iconDropdownItemContent: "icon-dropdown-item-content",
  colorRampFlipper: "color-ramp-flipper",
  scroller: "scroller",
  colorRampSelection: "color-ramp-selection",
  sectionToggleDisabled: "section-toggle--disabled",
  autoAdjustCheckbox: "auto-adjust-checkbox",
  contentGroup: "content-group",
  colorLockedInfo: "color-locked-info",
  message: "message",
  // symbol button
  container: "container",
  label: "label",
  openIcon: "open-icon",
  symbol: "symbol",
  changeSymbolTrigger: "change-symbol-trigger"
};
const categoriesToTags = {
  all: ["*"],
  light: ["light"],
  dark: ["dark"],
  redsAndYellows: ["oranges", "reds", "yellows"],
  greens: ["greens"],
  blues: ["blues"],
  purplesAndPinks: ["purples", "pinks"],
  browns: ["browns"],
  grays: ["grays"],
  bright: ["bright"],
  subdued: ["subdued"],
  colorblindFriendly: ["colorblind-friendly"]
};
const supportedArrows = ["none", "begin", "end", "begin-end"];
const supportedStyles = [
  "solid",
  "dash",
  "dot",
  "dash-dot",
  "long-dash-dot-dot",
  "short-dash",
  "short-dot",
  "short-dash-dot",
  "short-dash-dot-dot",
  "long-dash",
  "long-dash-dot"
];
const defaultVisibleMarkerSectionParts = {
  size: true,
  preview: true,
  rotation: true
};
const defaultVisibleExtraStrokeSectionParts = {
  style: true,
  arrow: true,
  width: true,
  autoStrokeAdjust: false
};
const defaultVisibleColorSectionParts = {
  suggestedColors: true,
  customColor: true,
  transparency: true
};
const defaultVisibleColorRampSectionParts = {
  colorRamps: true,
  transparency: true
};
const defaultVisibleStrokeSectionParts = {
  extra: true
};
const colorStorageId = "arcgis-symbol-styler-storage-colors";
const pointPreviewOptions = {
  size: 24,
  maxSize: 24
};
const opacityMax = 100;
const opacityMin = 0;
const maxWidthInPx = 18;
const minWidthInPx = 0;
const rotationMax = 360;
const rotationMin = 0;
const sizeMax = 150;
const sizeMin = 1;
const markerPlacementStepMax = 200;
const markerPlacementStepMin = 0;
const markerPlacementRandomnessMax = 100;
const markerPlacementRandomnessMin = 0;
const maxDisplayedSymbolLayers = 10;
const hatchFillSeparationMax = 200;
const hatchFillSeparationMin = 0;
const hatchFillOffsetMax = 100;
const hatchFillOffsetMin = 0;
const animationDurationMax = 120;
const animationDurationMin = 0;

function flipColorRampStops(stops, is2d = false) {
  return is2d ? flipFlattened2DRamp(stops) : stops.slice().reverse();
}
function flipFlattened2DRamp(flat2dStops) {
  const numClasses = Math.sqrt(flat2dStops.length);
  const ramp2d = expand2D(flat2dStops);
  const oldRamp = ramp2d.reverse();
  const flippedRamp = [];
  // Flip 2D matrix of colors by 90 degrees in clockwise direction.
  for (let i = 0; i < numClasses; i++) {
    const newRow = [];
    oldRamp.forEach((oldRow) => newRow.push(oldRow[i]));
    flippedRamp.push(newRow);
  }
  return flatten2D(flippedRamp).reverse();
}
function expand2D(stops, focus) {
  let expandedArray = [];
  const numClasses = Math.sqrt(stops.length);
  // Focus decides whether we reverse the outer/inner arrays or not.
  const codes = (focus || "HH").split("");
  const startRowCode = codes[0];
  const startColCode = codes[1];
  const reverseEachRow = startColCode !== "H";
  for (let i = 0; i < numClasses; i++) {
    let row = [];
    for (let j = 0; j < numClasses; j++) {
      const index = i * numClasses + j;
      row.push(stops[index]);
    }
    if (reverseEachRow) {
      row.reverse();
    }
    expandedArray.push(row);
  }
  if (startRowCode === "L") {
    expandedArray.reverse();
  }
  return expandedArray;
}
function flatten2D(array2d, focus) {
  // Returns a flattened array from the given 2d array.
  // array2d is assumed to have the layout structure outlined at:
  // renderers/utils:getClassValuesForRelationship.
  // Order of elements in the output array is determined by "focus".
  // "focus" can be: HH, HL, LH or LL. Default is "HH".
  let flatArray = [];
  // clone to avoid modifying source data
  array2d = array2d.slice().map((colors) => colors.slice());
  // Focus decides whether we reverse the outer/inner arrays or not.
  const codes = (focus || "HH").split(""), startRowCode = codes[0], startColCode = codes[1];
  if (startRowCode === "L") {
    array2d.reverse();
  }
  const reverseEachRow = startColCode === "H";
  array2d.forEach((row) => {
    if (reverseEachRow) {
      row.slice().reverse();
    }
    flatArray = flatArray.concat(row);
  });
  return flatArray;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/popupStore-a5d93b58.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ clearPopupState),
/* harmony export */   p: () => (/* binding */ popupState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const popupStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  layer: null,
  mapView: null,
  portal: null,
  config: null,
  strings: null,
  currentLanguage: null,
  currentLanguageIntl: null,
  serviceType: null,
  popupTemplate: null,
  layerHasAttachment: null,
  layerHasET: null,
  layerHasAttributes: null,
  layerHasCharts: null,
  layerHasImages: null,
  layerHasText: null,
  layerDisplayType: null,
  supportsArcade: null,
  layerHasRelatedRecords: false
});
// workaround for starting a panel with a clean state
function clearPopupState(popupState) {
  popupState.layer = null;
  popupState.mapView = null;
  popupState.portal = null;
  popupState.config = null;
  popupState.strings = null;
  popupState.currentLanguage = null;
  popupState.currentLanguageIntl = null;
  popupState.serviceType = null;
  popupState.popupTemplate = null;
  popupState.layerHasAttachment = null;
  popupState.layerHasET = null;
  popupState.layerHasAttributes = null;
  popupState.layerHasCharts = null;
  popupState.layerHasImages = null;
  popupState.layerHasText = null;
  popupState.layerDisplayType = null;
  popupState.supportsArcade = null;
  popupState.layerHasRelatedRecords = false;
}
const popupState = popupStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getCookie),
/* harmony export */   b: () => (/* binding */ setCookie),
/* harmony export */   c: () => (/* binding */ setSessionStorageItem),
/* harmony export */   d: () => (/* binding */ getSessionStorageItem),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
  writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
  const cookie = readCookie(name);
  return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
  window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
  const item = window.localStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
  window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
  const item = window.sessionStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
  const cookie = document.cookie;
  const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
  const matchedCookies = cookie.match(cookieNameRE);
  return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
  properties = properties || {};
  let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
  if (typeof expires === "number") {
    const expirationDate = new Date();
    const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
    expirationDate.setTime(Date.now() + daysFromTodayInMs);
    expires = properties.expires = expirationDate;
  }
  if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
    properties.expires = expires.toUTCString();
  }
  let cookie = `${name}=${encodeURIComponent(value)}`;
  let property;
  for (property in properties) {
    cookie += `; ${property}`;
    const propertyValue = properties[property];
    if (propertyValue !== true) {
      cookie += `=${propertyValue}`;
    }
  }
  document.cookie = cookie;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,