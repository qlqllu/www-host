"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-24da61"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const addItemStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  typeKeywords: [],
  customParameters: [],
  analyzedLocationTypes: [],
  allowStoredAuth: true,
  isSecured: null,
  checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-58a7e7ab.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-58a7e7ab.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ AppendOverwriteCloudPublishTypes),
/* harmony export */   N: () => (/* binding */ NONE_VALUE),
/* harmony export */   a: () => (/* binding */ appendFileTypes),
/* harmony export */   b: () => (/* binding */ AppendOverwritePublishTypes),
/* harmony export */   c: () => (/* binding */ appendExtensionsForEnterprise),
/* harmony export */   d: () => (/* binding */ appendExtensions),
/* harmony export */   u: () => (/* binding */ uidFields)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const uidFields = ["esriFieldTypeOID", "esriFieldTypeGlobalID"];
const NONE_VALUE = "<None>";
const AppendOverwritePublishTypes = {
  "file geodatabase": "filegeodatabase",
  shapefile: "shapefile",
  geojson: "geojson",
  csv: "CSV",
  "microsoft excel": "excel",
  geopackage: "geoPackage"
};
const appendFileTypes = {
  Shapefile: "shapefile",
  "File Geodatabase": "fileGeodatabase",
  CSV: "csv",
  "Microsoft Excel": "excel",
  GeoJson: "geojson",
  GeoPackage: "geoPackage"
};
const AppendOverwriteCloudPublishTypes = {
  csv: "CSV",
  excel: "Microsoft Excel",
  shapefile: "Shapefile",
  fgdb: "File Geodatabase",
  geojson: "GeoJson",
  googlesheets: "Microsoft Excel"
};
const appendExtensions = ["zip", "csv", "xls", "xlsx", "geojson", "gpkg", "json"];
const appendExtensionsForEnterprise = ["zip", "csv", "xls", "xlsx"];




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-append-key-value-pair.entry.js":
/*!****************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-append-key-value-pair.entry.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_append_key_value_pair: () => (/* binding */ ArcgisNewItemAppendKeyValuePair)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./append-58a7e7ab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-58a7e7ab.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






const arcgisNewItemAppendKeyValuePairCss = ".description{font-size:0.875rem;font-weight:300;margin-bottom:1rem}.header{font-weight:500;font-size:1rem;color:var(--calcite-ui-text-1);margin-bottom:0.5rem}.description-label{font-size:0.75rem;margin-top:0.5rem}.key-pair-select{font-size:0.875rem}.key-pair-page{margin-bottom:1rem}.select-wrapper{display:flex;flex-direction:row;margin-top:0.5rem;margin-bottom:2rem;background-color:var(--calcite-ui-background);padding-top:1rem;padding-bottom:0.75rem}.source-key-pair-select{margin-left:0.75rem;margin-right:1rem;width:100%}.name-key-pair-select{margin-right:0.75rem;margin-left:1rem;width:100%}.select-and-label{display:flex;flex-direction:column}.popover-icon{color:var(--calcite-ui-text-3);cursor:pointer;margin-top:0.125rem;-webkit-margin-start:0.75rem;margin-inline-start:0.75rem}.popover-content{font-size:0.75rem;font-weight:400;margin:0}.original-field,.uploaded-field{display:flex}.original-field-header,.uploaded-field-header{font-weight:500}.original-field-popover,.uploaded-field-popover{margin-top:-0.313rem}";

const ArcgisNewItemAppendKeyValuePair = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.keyPairChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "keyPairChange", 7);
    this.keyPairs = undefined;
    this.i18n = undefined;
    this.sourceValues = undefined;
    this.nameValues = undefined;
    this.selectedKeyPair = undefined;
    this.selectedSource = null;
  }
  async componentWillLoad() {
    var _a;
    const { existingItem, originalFileName } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
    let selectedName = _append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_3__.N;
    this.i18n = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__.u.i18n.appendKeyValuePair;
    if (!!_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.uidPair) {
      selectedName = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.uidPair.name;
      this.selectedSource = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.uidPair.source;
    }
    this.selectedKeyPair = this.keyPairs[selectedName];
    this.sourceValues = (_a = this.selectedKeyPair) === null || _a === void 0 ? void 0 : _a.possibleMatches;
    this.nameValues = Object.keys(this.keyPairs);
    this.originalFieldInfo = this.i18n.originalField.moreInfo.replace("${featureLayerName}", existingItem.title);
    this.uploadedFieldInfo = this.i18n.uploadedField.moreInfo.replace("${uploadedFileName}", originalFileName);
  }
  handleKeyPairChange(ev) {
    const value = ev.target.selectedOption.value;
    this.selectedKeyPair = this.keyPairs[value];
    const possibleMatches = this.selectedKeyPair.possibleMatches.length > 0
      ? [...this.selectedKeyPair.possibleMatches]
      : [_append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_3__.N];
    this.sourceValues = possibleMatches;
    this.selectedSource = possibleMatches[0];
    const payload = Object.assign(Object.assign({}, this.selectedKeyPair), { source: this.selectedSource, initialMatch: this.selectedSource });
    this.keyPairChange.emit(payload);
  }
  handleSourceKeyPairChange(ev) {
    const value = ev.target.selectedOption.value;
    const payload = Object.assign(Object.assign({}, this.selectedKeyPair), { source: value, initialMatch: value });
    this.keyPairChange.emit(payload);
  }
  render() {
    const { originalFieldInfo, uploadedFieldInfo, i18n, selectedKeyPair, selectedSource } = this;
    const names = this.nameValues;
    const sources = this.sourceValues;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "key-pair-page" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "select-and-label" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.selectUniqueIdentifier, content: i18n.selectUniqueIdentifierDescription }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "select-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "name-key-pair-select" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "original-field", role: "columnheader" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "original-field-header" }, i18n.originalField.header), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-information", { class: "original-field-popover", label: originalFieldInfo, placement: "top-start", paddedContent: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "popover-content" }, originalFieldInfo))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", label: i18n.selectUniqueIdentifier, onCalciteSelectChange: this.handleKeyPairChange.bind(this) }, names.map((nameField, idx) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { key: idx, selected: nameField === selectedKeyPair.name }, `${nameField}`));
    }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "source-key-pair-select" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "uploaded-field" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "uploaded-field-header" }, i18n.uploadedField.header), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-information", { class: "uploaded-field-popover", label: uploadedFieldInfo, placement: "top-start", paddedContent: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "popover-content" }, uploadedFieldInfo))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", label: i18n.selectUniqueIdentifier, onCalciteSelectChange: this.handleSourceKeyPairChange.bind(this) }, (sources || []).map((sourceField, idx) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { key: idx, selected: sourceField === selectedSource }, `${sourceField}`));
    })))))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemAppendKeyValuePair.style = arcgisNewItemAppendKeyValuePairCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const uiStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  nextText: "next",
  workflow: "content",
  scale: "m",
  disableScroll: false,
  featureFlags: { tileLayer3dTiles: false }
});
const uiStoreState = uiStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,