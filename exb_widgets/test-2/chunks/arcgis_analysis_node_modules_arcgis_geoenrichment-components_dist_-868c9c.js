"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-868c9c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/arcgis-geoenrichment-databrowser-6ca8ea14.js":
/*!************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/arcgis-geoenrichment-databrowser-6ca8ea14.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ ArcGISGeoEnrichmentDataBrowser),
/* harmony export */   a: () => (/* binding */ getGEMessages),
/* harmony export */   b: () => (/* binding */ c),
/* harmony export */   c: () => (/* binding */ createDeferred),
/* harmony export */   d: () => (/* binding */ h),
/* harmony export */   e: () => (/* binding */ e$1),
/* harmony export */   f: () => (/* binding */ f),
/* harmony export */   g: () => (/* binding */ globalObject),
/* harmony export */   h: () => (/* binding */ has),
/* harmony export */   i: () => (/* binding */ isImmediateResult),
/* harmony export */   j: () => (/* binding */ infographicsConfig),
/* harmony export */   s: () => (/* binding */ substituteString),
/* harmony export */   t: () => (/* binding */ t),
/* harmony export */   w: () => (/* binding */ when)
/* harmony export */ });
/* harmony import */ var _index_4a62c63d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-4a62c63d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/index-4a62c63d.js");


/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const e$1="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:void 0;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var o$1,l,e;let r$1,t$1;const u=null!=(o$1=null==(l=e$1.esriConfig)?void 0:l.locale)?o$1:null==(e=e$1.dojoConfig)?void 0:e.locale;function i$1(){var o,l;return null!=(o=null!=u?u:null==(l=e$1.navigator)?void 0:l.language)?o:"en"}function c(){return void 0===t$1&&(t$1=i$1()),t$1}const d$1=[];function f(n){return d$1.push(n),{remove(){d$1.splice(d$1.indexOf(n),1);}}}const g=[];function h(n){return g.push(n),{remove(){d$1.splice(g.indexOf(n),1);}}}function p(){var n;const o=null!=(n=r$1)?n:i$1();t$1!==o&&(t$1=o,[...g].forEach((n=>{n.call(null,o);})),[...d$1].forEach((n=>{n.call(null,o);})));}null==e$1.addEventListener||e$1.addEventListener("languagechange",p);

/**
 * Safe way to check for global object, which is:
 * - Window in the browser main thread.
 * - WorkerSelf in web workers.
 * - UnitTestsSelf in unit tests.
 */
const globalObject = (() => {
  // the only reliable means to get the global object is
  // `Function('return this')()`
  // However, this causes CSP violations in Chrome apps.
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof __webpack_require__.g !== "undefined") {
    return __webpack_require__.g;
  }
})();

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var d,a;let o;var r,i;null!=(d=e$1.dojoConfig)&&d.has||null!=(a=e$1.esriConfig)&&a.has?o={...null==(r=e$1.dojoConfig)?void 0:r.has,...null==(i=e$1.esriConfig)?void 0:i.has}:o={};function t(d){return "function"==typeof o[d]?o[d]=o[d](e$1):o[d]}t.add=(e,d,a,r)=>((r||void 0===o[e])&&(o[e]=d),a&&t(e)),t.cache=o,t.add("esri-deprecation-warnings",!0),(()=>{t.add("host-webworker",void 0!==e$1.WorkerGlobalScope&&self instanceof e$1.WorkerGlobalScope);const d="undefined"!=typeof window&&"undefined"!=typeof location&&"undefined"!=typeof document&&window.location===location&&window.document===document;if(t.add("host-browser",d),t.add("host-node","object"==typeof e$1.process&&e$1.process.versions&&e$1.process.versions.node&&e$1.process.versions.v8),t.add("dom",d),t("host-browser")){const e=navigator,d=e.userAgent,a=e.appVersion,o=parseFloat(a);if(t.add("wp",parseFloat(d.split("Windows Phone")[1])||void 0),t.add("msapp",parseFloat(d.split("MSAppHost/")[1])||void 0),t.add("khtml",a.indexOf("Konqueror")>=0?o:void 0),t.add("edge",parseFloat(d.split("Edge/")[1])||void 0),t.add("opr",parseFloat(d.split("OPR/")[1])||void 0),t.add("webkit",!t("wp")&&!t("edge")&&parseFloat(d.split("WebKit/")[1])||void 0),t.add("chrome",!t("edge")&&!t("opr")&&parseFloat(d.split("Chrome/")[1])||void 0),t.add("android",!t("wp")&&parseFloat(d.split("Android ")[1])||void 0),t.add("safari",!(a.indexOf("Safari")>=0)||t("wp")||t("chrome")||t("android")||t("edge")||t("opr")?void 0:parseFloat(a.split("Version/")[1])),t.add("mac",a.indexOf("Macintosh")>=0),t.add("quirks","BackCompat"===document.compatMode),!t("wp")&&d.match(/(iPhone|iPod|iPad)/)){const e=RegExp.$1.replace(/P/,"p"),a=d.match(/OS ([\d_]+)/)?RegExp.$1:"1",o=parseFloat(a.replace(/_/,".").replace(/_/g,""));t.add(e,o),t.add("ios",o);}t.add("trident",parseFloat(a.split("Trident/")[1])||void 0),t.add("svg","undefined"!=typeof SVGAngle),t("webkit")||(d.indexOf("Opera")>=0&&t.add("opera",o>=9.8&&parseFloat(d.split("Version/")[1])||o),!(d.indexOf("Gecko")>=0)||t("wp")||t("khtml")||t("trident")||t("edge")||t.add("mozilla",o),t("mozilla")&&t.add("ff",parseFloat(d.split("Firefox/")[1]||d.split("Minefield/")[1])||void 0));}})(),(()=>{if(e$1.navigator){const e=navigator.userAgent,d=e.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini|IEMobile/i),a=e.match(/iPhone/i);d&&t.add("esri-mobile",d),a&&t.add("esri-iPhone",a),t.add("esri-geolocation",!!navigator.geolocation);}t.add("esri-canvas-svg-support",!t("trident")),t.add("esri-wasm","WebAssembly"in e$1),t.add("esri-shared-array-buffer",(()=>{const d="SharedArrayBuffer"in e$1,a=!1===e$1.crossOriginIsolated;return d&&!a})),t.add("esri-atomics","Atomics"in e$1),t.add("esri-workers","Worker"in e$1),t.add("esri-text-decoder","TextDecoder"in e$1),t.add("esri-text-encoder","TextEncoder"in e$1),t.add("featurelayer-snapshot-enabled",!0),t.add("featurelayer-snapshot-point-min-threshold",8e4),t.add("featurelayer-snapshot-point-max-threshold",4e5),t.add("featurelayer-snapshot-point-coverage",.1),t.add("featurelayer-advanced-symbols",!1),t.add("featurelayer-pbf",!0),t.add("featurelayer-pbf-statistics",!1),t.add("feature-layers-workers",!0),t.add("mapview-transitions-duration",200),t.add("mapserver-pbf-enabled",!1),t("host-webworker")||t("host-browser")&&(t.add("csp-restrictions",(()=>{try{new Function;}catch{return !0}return !1})),t.add("esri-image-decode",(()=>{if("decode"in new Image){const e=new Image;return e.src='data:image/svg+xml;charset=UTF-8,<svg version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>',void e.decode().then((()=>{t.add("esri-image-decode",!0,!0,!0);})).catch((()=>{t.add("esri-image-decode",!1,!0,!0);}))}return !1})),t.add("esri-url-encodes-apostrophe",(()=>{const d=e$1.document.createElement("a");return d.href="?'",d.href.indexOf("?%27")>-1})),t.add("vectortilelayer-max-buffers",(()=>t("ff")?160:Number.POSITIVE_INFINITY)));})();

function getGePackage() {
  const require = window.require;
  const packages = require.rawConfig.packages;
  return packages.filter((p) => p.name === "geoenrichment")[0];
}

// esri4.core
//import { createRequire } from "module";
const HTTP_S_RE = /^(http:\/\/|https:\/\/)/i;
/**
 * Checks for esri has features and features that come from defaultConfig.hasCache in build profiles.
 * See build/* for more details.
 *
 * Values:
 * - mac - True for MacOS.
 * - dojo-built - True for any dojo build including report player own builds.
 * - report-player-dist-build - True for this specific build. See build/report-player-dist.profile.js for more details.
 * - report-player-app-build - True for this specific build. See build/report-player-app.profile.js for more details.
 * - report-player-cdn-build - True for this specific build. See build/report-player-cdn.profile.js for more details.
 */
function has(name) {
  if (name === "worker") {
    // put it here to avoid cyclic dependency with WorkerUtil.ts
    return globalObject.isWorker === true;
  }
  if (!!t(name)) {
    return true; // the value is found the esri/core/has
  }
  if (has("worker")) {
    return false; // can't use has check in the worker except for has("worker")
  }
  if (globalObject.require && globalObject.require) {
    const value = !!globalObject.require.has.cache[name];
    if (value) {
      return true; // the value is found in dojo has
    }
  }
  // special case: CDN build
  // check if the package URL is pointing to a remote source
  if (name === "report-player-cdn-build" && HTTP_S_RE.test(getGePackage().location)) {
    return true;
  }
  return false;
}

/**
 * Type guard: tests an object to have 'then' function.
 * @param obj Tested object.
 * @returns The true value if this is a promise-like object.
 */
function isPromiseLike(obj) {
  return obj && typeof obj.then === "function";
}
/**
 * Creates a deferred controller.
 * @returns A new controller.
 */
function createDeferred() {
  let dfd, fulfilled = false;
  const promise = new Promise((resolveCallback, rejectCallback) => {
    dfd = {
      promise: null,
      resolve: (value) => {
        fulfilled = true;
        resolveCallback(value);
      },
      reject: (reason) => {
        fulfilled = true;
        rejectCallback(reason);
      },
      isFulfilled: () => fulfilled
    };
  });
  dfd.promise = promise;
  return dfd;
}
/**
 * Decorates a value with a promise if necessary.
 * @param valueOrPromise A value or promise.
 * @returns An original promise or a new promise wrapping the value.
 */
function when(valueOrPromise) {
  return valueOrPromise instanceof Promise ? valueOrPromise : Promise.resolve(valueOrPromise);
}
/**
 * Tests a value to be an immediate result.
 * @param value A tested value.
 * @returns The true if this result can be got immediatelly.
 */
function isImmediateResult(value) {
  return !isPromiseLike(value) ||
    !!value._isImmediatePromise && isImmediateResult(value._immediateResult);
}
// POLYFILL (for JS API)
if (!Promise.allSettled) {
  Promise.allSettled = (promises) => {
    const mappedPromises = promises.map((p) => p
      .then((value) => ({
      status: "fulfilled",
      value
    }))
      .catch((reason) => ({
      status: "rejected",
      reason
    })));
    return Promise.all(mappedPromises);
  };
}

// geoenrichment.utils
/**
 * Loads a file by path, relative to the origin HTML.
 */
function loadLocalFile(path) {
  let dfd = createDeferred();
  let txtFile = new XMLHttpRequest();
  txtFile.onreadystatechange = () => {
    // don't check for status here, because status can be 0 if the file is loaded via the file system and not https
    if (txtFile.readyState === 4 /* && txtFile.status === 200 */) {
      dfd.resolve(txtFile.responseText);
      dfd = null;
      txtFile = null;
    }
    else if (txtFile.status === 404 /* not found */) {
      dfd.reject(new Error("File not found."));
    }
  };
  txtFile.onerror = (e) => {
    dfd.reject(e);
  };
  txtFile.open("GET", path, true);
  txtFile.send(null);
  return dfd.promise;
}

/**
 * Applies all properites from a source object to a target object. Traverses inner objects.
 * Undefined properties are not written from the source object.
 * Undefined properties in the target object are overwritten.
 *
 * @param targetObject                 Object. Target object (object to write to).
 * @param sourceObject                 Object. Source object (object to write from).
 * @param overwrite                    Boolean. If true, overrides existing non-object properties.
 *
 * @returns targetObject.
 */
function populateObject(targetObject, sourceObject, overwrite = false) {
  function _populateObject(source, target) {
    if (!source || !target) {
      return; // can't proceed
    }
    // check for arrays
    if ((Array.isArray(source) && !Array.isArray(target)) || (Array.isArray(target) && !Array.isArray(source))) {
      return; // can't proceed for objects of different types
    }
    function processSourceId(id) {
      const sourceValue = source[id];
      let targetValue = target[id];
      const isSourceObject = sourceValue && typeof sourceValue === "object";
      const isTargetObject = targetValue && typeof targetValue === "object";
      if (sourceValue === undefined) {
        return; // skip: don't write undefined values
      }
      if (targetValue === undefined) {
        // pass whatever the source value is (except undefined)
        target[id] = sourceValue;
      }
      else if (isTargetObject && isSourceObject) {
        // work with 2 objects
        _populateObject(sourceValue, targetValue);
      }
      else if (overwrite) {
        if (isSourceObject) {
          // we can create a new object in the target object instead of the current value
          targetValue = target[id] = {};
          _populateObject(sourceValue, targetValue);
        }
        // just overrite the existing value
        else {
          target[id] = source[id];
        }
      }
    }
    if (Array.isArray(source)) {
      source.forEach((_item, index) => {
        processSourceId(index);
      });
    }
    else {
      for (const id in source) {
        processSourceId(id);
      }
    }
  }
  _populateObject(sourceObject, targetObject);
  return targetObject;
}
//--------------------------------------------------------------------------
//
// String substitute (replacement for dojo/string.js)
//
//--------------------------------------------------------------------------
const SUBST_RE = /\$\{.+?\}/g;
const SUBST_CLEAN_UP_RE = /^\$\{|\}$/g;
/**
 * @param params.nested Whether to allow nested properties, such as "person.name".
 * @example
 *  substituteString("Name is ${name}", { name: "Tom" }); // => "Name is Tom"
 *  substituteString("Name is ${cat.name}", { cat: { name: "Tom" } }, null, { nested: true }); // => "Name is Tom"
 */
function substituteString(pattern, source, transform, params) {
  return pattern.replace(SUBST_RE, (match) => {
    let value;
    const propName = match.replace(SUBST_CLEAN_UP_RE, "");
    if (params && params.nested && propName.indexOf(".") !== -1) {
      value = source;
      propName.split(".").forEach((subProp) => {
        value = value[subProp];
      });
    }
    else {
      value = source[propName];
    }
    return transform ? transform(value + "") : value + "";
  });
}
// TESTS
//console.log("Current locale number: " + util.formatNumber(100000.123, { places: 3 }));

// esri4.intl
const loadedModules = {};
/**
 * Custom locale set by user to override the browser's current locale.
 */
let userLocale;
/**
 * Current locale of the last loaded messages.
 */
let currentLocale;
const loadedLocalePromises = {};
const SUPPORTED_LOCALES = ["en", "ar", "bg", "bs", "ca", "cs", "de", "el", "es", "et", "fi", "fr", "he", "hr", "hu", "id", "it", "ja", "ko", "lt", "lv", "nb", "nl", "pl", "pt-BR", "pt-PT", "ro", "ru", "sk", "sl", "sr", "sv", "th", "tr", "uk", "vi", "zh-CN", "zh-HK", "zh-TW"];
function getGEMessages(moduleName) {
  const localeData = loadedModules[currentLocale];
  const module = localeData && localeData[moduleName];
  if (!module) {
    throw new Error("Messages are not loaded.");
  }
  return module;
}
/**
 * Specify the locale to load message files for.
 */
function setGELocale(locale) {
  userLocale = locale;
}
function _getModulePaths() {
  if (has("report-player-dist-build")) {
    // this is configured in the grunt file for this particular build
    return {
      infographics: "t9n/infographics",
      ReportPlayer: "t9n/ReportPlayer",
      widgets: "t9n/widgets"
    };
  }
  return {
    DataBrowser: "t9n/DataBrowser",
    infographics: "t9n/infographics",
    ReportPlayer: "t9n/ReportPlayer",
    widgets: "t9n/widgets"
  };
}
/**
 * Loads all messages used in geoenrichment.
 */
function loadGEMessages(assetPath) {
  // Check for full locale match (e.g. pt-BR = pt-BR, if not check for 2 character match (pt = pt))
  const defaultLocale = SUPPORTED_LOCALES[0];
  let locale = (userLocale || c());
  if (SUPPORTED_LOCALES.indexOf(locale) === -1) {
    locale = (userLocale || c()).substr(0, 2);
    if (SUPPORTED_LOCALES.indexOf(locale) === -1) {
      locale = defaultLocale; // common
    }
  }
  currentLocale = locale;
  if (loadedLocalePromises[locale]) {
    return loadedLocalePromises[locale]; // already being loaded
  }
  const promises = [];
  if (!loadedModules[locale]) {
    const localeData = (loadedModules[locale] = {});
    const paths = _getModulePaths();
    for (const moduleName in paths) {
      promises.push(_loadJsonFile(assetPath + `${paths[moduleName]}/${moduleName}_${locale}.json`).then((moduleJson) => {
        localeData[moduleName] = moduleJson;
        // provide missing properties for non-default locale
        if (locale !== defaultLocale) {
          return when((loadedModules[defaultLocale] && loadedModules[defaultLocale][moduleName]) ||
            _loadJsonFile(assetPath + `${paths[moduleName]}/${moduleName}_${defaultLocale}.json`)).then((moduleJson) => {
            populateObject(localeData[moduleName], moduleJson);
          });
        }
        return null;
      }));
    }
  }
  return (loadedLocalePromises[locale] = Promise.all(promises).then(() => { }));
}
function _loadJsonFile(path) {
  if (!globalObject.XMLHttpRequest) {
    return Promise.resolve({}); // in unit tests
  }
  return loadLocalFile(path)
    .then((responseText) => JSON.parse(responseText))
    .catch(() => ({}));
}
//!has("worker") && loadGEMessages(); // kick off the load right away if not in the worker (there may be issues loading JSON files in workers, so we need to initialize this utility using the loadedModulesToJSON() => loadedModulesFromJSON() methods)

// esri4.core
const protocol = "https:"; // always HTTPS
const infographicsConfig = {
  token: "",
  portalUrl: protocol + "//arcgis.com",
  server: protocol + "//geoenrich.arcgis.com/arcgis/rest/services/World/GeoenrichmentServer",
  levels: ["Admin3", "Admin2"],
  highestLevel: "Admin1",
  locatorUrl: protocol + "//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer",
  addressFormat: "${Address}, ${City}, ${Region} ${Postal}",
  prizm5: {
    /**
     * Trick: when using this panel with data coming from the geoenrichment server, attributes may be taken from metadata.xml
     * instead of the original feature attributes. In this case we can only guess by using a loose search.
     *
     * @example
     * Original field name is "PZMD70_HHD"
     * Field from metadata.xml may look like this "FIELD_PZMD70HHD"
     */
    allowLooseAttributesGuess: false
  }
};

/**
 * Locale list (in alphabetical order) adopted from [JSAPI](https://devtopia.esri.com/WebGIS/arcgis-js-api/tree/master/esri/nls)
 * Full forms adopted from [1](https://www.science.co.il/language/Locale-codes.php) and [2](https://saimana.com/list-of-country-locale-code/)
 */
const SupportedLocales = {
  Arabic: "ar",
  Bosnian: "bs",
  Bulgarian: "bg",
  Catalan: "ca",
  Czech: "cs",
  Danish: "da",
  German: "de",
  Greek: "el",
  English: "en",
  EnglishUSA: "en-US",
  Spanish: "es",
  Estonian: "et",
  Finnish: "fi",
  French: "fr",
  Hebrew: "he",
  Croatian: "hr",
  Hungarian: "hu",
  Indonesian: "id",
  Italian: "it",
  Japanese: "ja",
  Korean: "ko",
  Lithuanian: "lt",
  Latvian: "lv",
  NorwegianBokml: "nb",
  Dutch: "nl",
  Polish: "pl",
  PortugueseBrazil: "pt-BR",
  PortuguesePortugal: "pt-PT",
  Romanian: "ro",
  Russian: "ru",
  Serbian: "sr",
  Slovenian: "sl",
  Slovak: "sk",
  Swedish: "sv",
  Thai: "th",
  Turkish: "tr",
  Ukrainian: "uk",
  Vietnamese: "vi",
  ChineseChina: "zh-CN",
  ChineseHongKong: "zh-HK",
  ChineseTaiwan: "zh-TW"
};
/**
 * This is list of locales for supporting different number and date formats ,
 * for cases in UI we may need to use them
 */
const SupportedLocalesForFormats = [
  ...Object.values(SupportedLocales),
  "ar-u-nu-latn",
  "en-AU",
  "en-GB",
  "es-ES",
  "es-MX",
  "de-CH",
  "de-DE",
  "it-CH",
  "it-IT"
];
/**
 * List of supported locales that are RTL
 * Adopted from https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/4master/esri/intl/locale.ts
 */
const RTLLocales = [SupportedLocales.Arabic, SupportedLocales.Hebrew];

/*
https://medium.com/@Cookie_Cookson/hi-lisa-backer-d0ebcdc2ff3e
https://dockyard.com/blog/2019/04/16/lazy-loading-custom-assets-with-stenciljs-part-1
uses the loaded script tag of the component to get the resource url
example:
<script type="module" src="http://127.0.0.1:5500/packages/arcgis-charts-config-components/dist/arcgis-charts-config-components/arcgis-charts-config-components.esm.js"
data-stencil-namespace="arcgis-charts-config-components"></script>
*/
/* Not working
function getPublicPath(componentName: string): string {
  const script: HTMLScriptElement = document.querySelector(
    `script[data-stencil-namespace='${componentName}']`
  ) as HTMLScriptElement;
  return script?.getAttribute("data-resources-url") ?? "";
}
*/
/**
 * Extracts language portion of locale code
 * Reference: https://github.com/meikidd/locale-code/blob/master/src/index.js#L8
 * Examples:
 * - en-US => en
 * - zh-CN => zh
 * - zh-cn => zh
 * - en => en
 * @param locale
 */
function extractLanguageTag(locale) {
  const localeCodeRegex = /^([a-z]{2})-([A-Z]{2})$/;
  const match = locale === null || locale === void 0 ? void 0 : locale.match(localeCodeRegex);
  let output = SupportedLocales.English;
  if (match !== null && match !== undefined && (match === null || match === void 0 ? void 0 : match.length) > 1) {
    output = match[1];
  }
  else if ((locale === null || locale === void 0 ? void 0 : locale.length) === 2 && locale.toLowerCase() === locale) {
    output = locale;
  }
  return output;
}
/**
 * Converts a given locale into a supported locale.
 * In case of an unsupported locale, "en" is returned.
 * Examples:
 * - en-US => en-US
 * - zh-CN => zh-CN
 * - en => en
 * - es-AR => es
 * - en-UK => en
 * @param locale
 */
function convertToSupportedLocale(locale) {
  let output = SupportedLocales.English;
  if (locale !== undefined) {
    const supportedLocales = Object.values(SupportedLocales);
    const hyphenatedSupportedLocales = supportedLocales.filter((ele) => {
      return ele.indexOf("-") !== -1;
    });
    if (locale.indexOf("-") !== -1) {
      const [lang, region] = locale.split("-");
      // To make sure it is valid locale code of form `zh-CN`.
      // In ArcGIS Online user locale codes come with region in lower case `zh-cn`.
      // TODO Remove next Eslint ignore comment.
      locale = `${lang}-${region.toUpperCase()}`;
    }
    if (hyphenatedSupportedLocales.includes(locale) === true) {
      output = locale;
    }
    else {
      const languageTag = extractLanguageTag(locale);
      if (supportedLocales.includes(languageTag) === true) {
        output = languageTag;
      }
    }
  }
  return output;
}
/**
 * Converts a given locale into a supported format locale.
 * In case of an unsupported locale, "en" is returned.
 * Examples:
 * - en-AU => en-AU
 * - zh-CN => zh-CN
 * - en => en
 * - en-GB => en-GB
 * - it-CH => it-CH
 * - it-ch => it-CH
 * @param locale
 */
function convertToSupportedFormatLocale(locale) {
  let formatLocale = SupportedLocalesForFormats.find((item) => item === locale);
  if (formatLocale === undefined) {
    formatLocale = locale;
  }
  if (formatLocale !== undefined && formatLocale.indexOf("-") !== -1) {
    const [lang, region] = formatLocale.split("-");
    formatLocale = `${lang}-${region.toUpperCase()}`;
  }
  // Special handling to maintain latn numbering system for arabic locale
  // https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/4master/esri/intl/number.ts#L11
  if (formatLocale === "ar") {
    formatLocale = "ar-u-nu-latn";
  }
  return formatLocale;
}
/**
 * Helper function to find the closest element crossing multiple (parent) shadowDOM boundaries.
 * The implementation is based on [this](https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd) solution.
 * @param {string} selector
 * @param {Element} base
 */
function getClosestElement(selector, base) {
  function closestFrom(el) {
    let element;
    if (el === undefined || el === document || el === window)
      element = null;
    else {
      const found = el.closest(selector);
      element = found || closestFrom(el.getRootNode().host);
    }
    return element;
  }
  return closestFrom(base);
}
/**
 * Finds the locale of the closest element to the given element.
 * If no element given, and converts `window.navigator.language` into a supported locale.
 * @param element
 */
function getLocaleInfo(element = document.documentElement) {
  var _a;
  const closestElement = getClosestElement("[lang]", element);
  const locale = (_a = closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) !== null && _a !== void 0 ? _a : window.navigator.language;
  const convertedLocale = convertToSupportedLocale(locale);
  const formatLocale = convertToSupportedFormatLocale(locale);
  return { locale: convertedLocale, rtl: RTLLocales.includes(convertedLocale), formatLocale };
}

const ArcGISGeoEnrichmentDataBrowser = class {
  constructor(hostRef) {
    (0,_index_4a62c63d_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.pageLoaded = (0,_index_4a62c63d_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "pageLoaded", 7);
    this.widget = undefined;
    this.allowHierarchies = undefined;
    this.hideApplyButton = false;
    this.applyButton = undefined;
    this.hideBackButton = false;
    this.backButton = undefined;
    this.hideCancelButton = false;
    this.cancelButton = undefined;
    this.hidePageBackButton = false;
    this.pageBackButton = undefined;
    this.countryId = undefined;
    this.geoenrichmentUrl = undefined;
    this.locale = undefined;
    this.displayAllGlobalVariables = false;
  }
  componentWillLoad() {
    // Set GeoenrichmentUrl if it's specified
    if (this.geoenrichmentUrl) {
      infographicsConfig.server = this.geoenrichmentUrl;
    }
    // Pull locale from lang attribute
    const locale = getLocaleInfo(this.el); // this.getComponentClosestLanguage(this.el);
    if (locale) {
      setGELocale(locale.locale);
    }
    loadGEMessages((0,_index_4a62c63d_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")).then(() => {
      __webpack_require__.e(/*! import() */ "vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-e5d173").then(__webpack_require__.bind(__webpack_require__, /*! ./DataBrowser-5ce2ade9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/DataBrowser-5ce2ade9.js")).then(function (n) { return n.dT; }).then(async (DataBrowser) => {
        const databrowserDiv = document.createElement("div");
        if (locale.rtl) {
          this.el.classList.add("esri4GEDataBrowser-rtl");
        }
        this.el.appendChild(databrowserDiv);
        this.widget = new DataBrowser.DataBrowser({
          countryID: this.countryId,
          allowHierarchies: this.allowHierarchies,
          displayAllGlobalVariables: this.displayAllGlobalVariables
        }, databrowserDiv);
        // Apply Button
        if (this.hideApplyButton) {
          this.widget.applyButton = null;
        }
        else if (this.applyButton) {
          this.widget.applyButton = this.applyButton;
        }
        // Back Button
        if (this.hideBackButton) {
          this.widget.backButton = null;
        }
        else if (this.backButton) {
          this.widget.backButton = this.backButton;
        }
        // Cancel Button
        if (this.hideCancelButton) {
          this.widget.cancelButton = null;
        }
        else if (this.cancelButton) {
          this.widget.cancelButton = this.cancelButton;
        }
        // Page Back Button
        if (this.hidePageBackButton) {
          this.widget.pageBackButton = null;
        }
        else if (this.pageBackButton) {
          this.widget.pageBackButton = this.pageBackButton;
        }
        this.widget.on("pageLoaded", (e) => {
          this.pageLoaded.emit(e.pageName);
        });
        this.widget.launch();
      });
    });
  }
  getComponentClosestLanguage(element) {
    let closestElement = element.closest('[lang]');
    return closestElement ? closestElement.lang : '';
  }
  async getSelectedVariables() {
    return this.widget.selection;
  }
  async back() {
    this.widget.back();
  }
  setCountry(countryID) {
    this.widget.countryID = this.countryId;
  }
  static get assetsDirs() { return ["t9n"]; }
  get el() { return (0,_index_4a62c63d_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};



//# sourceMappingURL=arcgis-geoenrichment-databrowser-6ca8ea14.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/arcgis-geoenrichment-databrowser.entry.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/arcgis-geoenrichment-databrowser.entry.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_geoenrichment_databrowser: () => (/* reexport safe */ _arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.A)
/* harmony export */ });
/* harmony import */ var _arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arcgis-geoenrichment-databrowser-6ca8ea14.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/arcgis-geoenrichment-databrowser-6ca8ea14.js");
/* harmony import */ var _index_4a62c63d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-4a62c63d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/index-4a62c63d.js");



//# sourceMappingURL=arcgis-geoenrichment-databrowser.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,