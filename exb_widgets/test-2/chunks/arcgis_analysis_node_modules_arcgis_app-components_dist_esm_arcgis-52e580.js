"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-52e580"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-info.entry.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-info.entry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_field_info: () => (/* binding */ ArcgisFieldInfo)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */








const CSS = {
  container: "container",
  section: "section",
  title: "title",
  missing: "missing",
  data: "data",
  count: "count",
  statisticsRow: "statistics-row",
  statisticsRowTopValues: "statistics-row-top-values"
};

var status;
(function (status) {
  status["MISSING"] = "missing";
  status["IN_PROGRESS"] = "inProgress";
  status["SUCCESS"] = "success";
  status["FAILED"] = "failed";
})(status || (status = {}));
var simpleFieldTypes;
(function (simpleFieldTypes) {
  simpleFieldTypes["NUMBER"] = "number";
  simpleFieldTypes["STRING"] = "string";
  simpleFieldTypes["DATE"] = "date";
  simpleFieldTypes["DATE_ONLY"] = "date-only";
  simpleFieldTypes["TIME_ONLY"] = "time-only";
  simpleFieldTypes["TIMESTAMP_OFFSET"] = "timestamp-offset";
  simpleFieldTypes["OID"] = "oid";
  simpleFieldTypes["GUID"] = "guid";
  simpleFieldTypes["UNKNOWN"] = "unknown";
})(simpleFieldTypes || (simpleFieldTypes = {}));
/**
 * Returns true if the value is defined
 * @param value - value to check
 */
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Returns the URL used for queries.
 * E.g. SceneLayers need to use the FeatureLayer URL for queries.
 * @param value - value to check
 */
function getQueryURL(layer) {
  var _a;
  if (layer.type === "scene") {
    return (_a = layer.associatedLayer) === null || _a === void 0 ? void 0 : _a.url;
  }
  return layer.url;
}

/**
 * Returns additional field information from layer
 * @param props - properties containing layer and fieldName
 */
function getFieldInfo(props) {
  var _a;
  const { layer, fieldName } = props;
  let fieldInfo;
  const { popupTemplate } = layer;
  const popupFieldInfos = popupTemplate ? popupTemplate.fieldInfos : [];
  (layer.type === "imagery-tile"
    ? layer.rasterFields
    : layer.type === "imagery" && ((_a = layer.rasterFields) === null || _a === void 0 ? void 0 : _a.length)
      ? layer.rasterFields
      : layer.fields)
    .filter((layerField) => layerField.name === fieldName)
    .forEach((layerField) => {
    const list = popupFieldInfos
      ? popupFieldInfos.filter((fInfo) => fInfo.fieldName === layerField.name)
      : null;
    const label = (list === null || list === void 0 ? void 0 : list.length) ? list[0].label : null;
    if (/^raster.(item|service)pixelvalue/i.test(fieldName)) {
      // e.g. "Raster.ServicePixelValue" | "Raster.ItemPixelValue" | "Raster.ServicePixelValue.Raw"
      // layer.rasterFields reports them as type "string"
      layerField.type = "double";
    }
    const featureFilterField = {
      layerField: layerField,
      label: label || layerField.alias || layerField.name
    };
    featureFilterField.codedValues = getCodedValues(fieldName, props);
    _getSimpleFieldType(featureFilterField);
    if (featureFilterField.simpleFieldType) {
      fieldInfo = featureFilterField;
    } // else can't use field
  });
  return fieldInfo;
}
/**
 * Returns feature count in layer
 * @param props - properties containing layer and fieldName
 */
async function getFeatureCount(props) {
  props.statisticsStatus = status.IN_PROGRESS;
  const { layer, view } = props;
  if (layer.type === "imagery" || layer.type === "imagery-tile" || layer.type === "stream") {
    throw new Error("could not get feature count");
  }
  try {
    return await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.g)(layer, view);
  }
  catch (error) {
    return;
  }
}
/**
 * Returns summary statistics
 * @param props - properties containing layer and fieldName
 */
async function getStatistics(props) {
  const { layer, view, fieldName, fieldInfo } = props;
  if (layer.type === "imagery" || layer.type === "imagery-tile") {
    throw new Error("could not get statistics for ImageryLayer/ImageryTileLayer");
  }
  if (!fieldInfo ||
    fieldInfo.layerField.type === "oid" ||
    fieldInfo.layerField.type === "guid" ||
    fieldInfo.layerField.type === "global-id") {
    const count = await getFeatureCount(props);
    return Promise.resolve({ totalCount: count, nullcount: 0 });
  }
  try {
    const [summaryStatistics] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/smartMapping/statistics/summaryStatistics"]);
    const result = await summaryStatistics({
      layer,
      view,
      field: fieldName
    });
    if (!isDefined(result.count)) {
      // statistics is unusable
      throw new Error("could not get statistics");
    }
    // if we hit maxRecordCount other stats values are probably not correct either
    const hitMaxRecordCount = "sourceJSON" in layer && layer.sourceJSON.maxRecordCount === result.count;
    // count only contains features with a value (!= null)
    if (isDefined(result.nullcount) && !hitMaxRecordCount) {
      // we can add the feature count without null and the count of nulls
      const stats = Object.assign(Object.assign({}, result), { totalCount: result.count + result.nullcount });
      return stats;
    }
    else {
      // we want the total feature count
      // happens e.g. for SceneLayers with older stats cache
      const count = await getFeatureCount(props);
      const stats = Object.assign(Object.assign({}, result), { totalCount: count });
      return stats;
    }
  }
  catch (error) {
    throw new Error("could not get statistics");
  }
}
/**
 * Returns unique values
 * @param props - properties containing layer and fieldName
 */
async function getUniqueValues(props) {
  const { layer, view, fieldName } = props;
  if (layer.type === "imagery" || layer.type === "imagery-tile") {
    throw new Error("could not get unique values for ImageryLayer/ImageryTileLayer");
  }
  if (layer.type === "feature" && !layer.url) {
    layer.outFields = ["*"];
  }
  const [uniqueValues] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/smartMapping/statistics/uniqueValues"]);
  try {
    const result = await uniqueValues({
      layer,
      view,
      field: fieldName
    });
    return result;
  }
  catch (error) {
    throw new Error("could not get unique values");
  }
}
function _getSimpleFieldType(featureFilterField) {
  switch (featureFilterField.layerField.type) {
    case "string":
      featureFilterField.simpleFieldType = simpleFieldTypes.STRING;
      break;
    case "date":
      featureFilterField.simpleFieldType = simpleFieldTypes.DATE;
      break;
    case "timestamp-offset":
      featureFilterField.simpleFieldType = simpleFieldTypes.TIMESTAMP_OFFSET;
      break;
    case "date-only":
      featureFilterField.simpleFieldType = simpleFieldTypes.DATE_ONLY;
      break;
    case "time-only":
      featureFilterField.simpleFieldType = simpleFieldTypes.TIME_ONLY;
      break;
    case "oid":
      featureFilterField.simpleFieldType = simpleFieldTypes.OID;
      break;
    case "guid":
    case "global-id":
      featureFilterField.simpleFieldType = simpleFieldTypes.GUID;
      break;
    case "small-integer":
    case "big-integer":
    case "integer":
    case "single":
    case "double":
    case "long":
      featureFilterField.simpleFieldType = simpleFieldTypes.NUMBER;
      break;
  }
}
function getCodedValues(fieldName, props) {
  const { layer, modules } = props;
  if (layer.type !== "feature") {
    return;
  }
  const typeIdField = layer.typeIdField;
  const types = layer.types;
  let fieldDomains;
  const field = layer.fields.find((field) => field.name === fieldName);
  const fieldDomain = field.domain;
  if (typeIdField && types) {
    // layer has types
    if (typeIdField === fieldName) {
      // this is the field with the types
      fieldDomains = types.map((type) => {
        // fake coded Values
        return {
          code: type.id,
          name: type.name
        };
      });
    }
    else {
      // field does not have types; look farther inside the types
      fieldDomains = [];
      types.forEach((type) => {
        var _a, _b;
        if (!type.domains || !type.domains[fieldName] || type.domains[fieldName].type === "inherited") {
          const domain = fieldDomain;
          if (domain === null || domain === void 0 ? void 0 : domain.codedValues) {
            domain.codedValues.forEach(async (codedValue) => {
              let found = false;
              fieldDomains.forEach((codedVal) => {
                if (codedVal.code === codedValue.code) {
                  found = true;
                  if (`, ${codedVal.name},`.indexOf(`, ${codedValue.name},`) === -1) {
                    codedVal.name += `, ${codedValue.name}`;
                  }
                }
              });
              if (!found) {
                fieldDomains.push(modules.esriLang.clone(codedValue));
              }
            });
          }
        }
        else if ((_b = (_a = type.domains) === null || _a === void 0 ? void 0 : _a[fieldName]) === null || _b === void 0 ? void 0 : _b.codedValues) {
          type.domains[fieldName].codedValues.forEach(async (codedValue) => {
            let found = false;
            fieldDomains.forEach((codedVal) => {
              if (codedVal.code === codedValue.code) {
                found = true;
                if (`, ${codedVal.name},`.indexOf(`, ${codedValue.name},`) === -1) {
                  codedVal.name += `, ${codedValue.name}`;
                }
              }
            });
            if (!found) {
              fieldDomains.push(modules.esriLang.clone(codedValue));
            }
          });
        }
      });
    }
    if (!(fieldDomains === null || fieldDomains === void 0 ? void 0 : fieldDomains.length) && (fieldDomain === null || fieldDomain === void 0 ? void 0 : fieldDomain.codedValues)) {
      fieldDomains = modules.esriLang.clone(fieldDomain.codedValues);
    }
  }
  else if (fieldDomain === null || fieldDomain === void 0 ? void 0 : fieldDomain.codedValues) {
    // domains directly on the layer field
    fieldDomains = field.domain.codedValues;
  }
  return (fieldDomains === null || fieldDomains === void 0 ? void 0 : fieldDomains.length) ? fieldDomains : null;
}

/**
 * Returns up to 5 features from the layer to get sample data
 * @param props - properties containing layer and view
 */
async function getOneFeature(props) {
  var _a, _b;
  const { view, layer } = props;
  if (layer.type === "imagery" || layer.type === "imagery-tile") {
    throw new Error("could not get feature");
  }
  if ((layer.type === "feature" && !layer.url) || layer.type === "wfs") {
    // feature collection or wfs
    const query = layer.createQuery();
    query.start = 0;
    query.num = 5;
    query.outFields = ["*"];
    const result = await layer.queryFeatures(query);
    if ((_a = result.features) === null || _a === void 0 ? void 0 : _a.length) {
      return result;
    }
    else {
      throw new Error("could not get feature");
    }
  }
  else {
    // service
    if (!view) {
      // get feature from service directly
      return _queryOneFeature(props);
    }
    const layerView = (await view.whenLayerView(layer));
    const hasAllFields = layerView.availableFields.length === layer.fields.length;
    if (hasAllFields || (["stream", "ogc-feature"].indexOf(layer.type) > -1 && layerView.availableFields.length > 0)) {
      // features on client have all fields
      // or we can't make a server query, so we take what we can get
      const query = layer.createQuery();
      query.start = 0;
      query.num = 5;
      query.outFields = ["*"];
      const result = await layerView.queryFeatures(query);
      if ((_b = result.features) === null || _b === void 0 ? void 0 : _b.length) {
        // client side features
        return result;
      }
      else {
        // get feature from service
        return _queryOneFeature(props);
      }
    }
    else {
      // get feature from service
      return _queryOneFeature(props);
    }
  }
}
async function _queryOneFeature(props) {
  const { layer } = props;
  if (["imagery", "imagery-tile", "stream", "ogc-feature"].indexOf(layer.type) > -1) {
    throw new Error("cannot get feature from service");
  }
  const [Query] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/rest/support/Query"]);
  const query = new Query({
    where: "1=1",
    outFields: ["*"],
    returnGeometry: false
  });
  return layer.queryFeatures(query);
}

const arcgisFieldInfoCss = ":host{height:100%}.container{padding:6px;background-color:white}.title{font-weight:bold;padding:5px 0}.missing{color:#a9a9a9}.data{color:#a9a9a9}.count{white-space:nowrap}.section{padding:6px 0}.statistics-row{border-top:1px solid #e0e0e0;padding:6px 0;display:flex;justify-content:space-between}.statistics-row-top-values{border-top:1px solid #e0e0e0;padding:20px 0 6px 0;display:flex;justify-content:space-between}";

const ArcgisFieldInfo = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisFieldInfoComplete = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldInfoComplete", 7);
    this.view = undefined;
    this.layer = undefined;
    this.fieldName = undefined;
    this.hideStatistics = false;
    this.oneFeatureResponse = undefined;
    this.oneFeatureResponseStatus = status.MISSING;
    this.statistics = undefined;
    this.statisticsStatus = status.MISSING;
    this.uniqueValues = undefined;
    this.uniqueValuesStatus = status.MISSING;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [strings, currentLanguage, currentLanguageIntl] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = strings;
    this.locale = currentLanguage;
    this.localIntl = currentLanguageIntl;
    const [esriLang, SqlTimeStampOffset, intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
      "esri/core/lang",
      "esri/core/sql/SqlTimestampOffset",
      "esri/intl"
    ]);
    const { view, layer, fieldName, hideStatistics } = this;
    let sublayerFL;
    if (layer.declaredClass === "esri.layers.support.Sublayer") {
      // need to create a FeatureLayer
      const sublayer = layer;
      const [reactiveUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/core/reactiveUtils"]);
      view && (await reactiveUtils.whenOnce(() => !view.updating));
      sublayerFL = await sublayer.createFeatureLayer();
      await sublayerFL.load();
    }
    this.props = {
      view,
      layer: sublayerFL || layer,
      fieldName,
      hideStatistics,
      modules: { esriLang, SqlTimeStampOffset, intl }
    };
    // required for initial load
    this.props.fieldInfo = getFieldInfo(this.props);
  }
  async componentDidLoad() {
    var _a;
    // once component is visible make other calls
    const { props, hideStatistics } = this;
    const { layer, modules } = props;
    modules.intl.setLocale(this.localIntl);
    // modules.intl.setLocale(this.locale) not returning the correct formatting for e.g. it-ch
    // we don't know if the SceneLayer has an associated FL
    // don't prompt for a login if it's not accessible
    if (layer.type === "scene") {
      const [esriConfig] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/config"]);
      esriConfig.request.interceptors.push({
        urls: getQueryURL(layer) + "/" + layer.layerId,
        before: function (params) {
          params.requestOptions.authMode = "no-prompt";
        }
      });
    }
    this.oneFeatureResponseStatus = status.IN_PROGRESS;
    try {
      const result = await getOneFeature(this.props);
      this.oneFeatureResponse = result;
      this.oneFeatureResponseStatus = status.SUCCESS;
    }
    catch (error) {
      this.oneFeatureResponseStatus = status.FAILED;
    }
    if (layer.type === "stream") {
      this.uniqueValuesStatus = status.FAILED;
      this.statisticsStatus = status.FAILED;
      return;
    }
    if (hideStatistics) {
      this.uniqueValuesStatus = status.FAILED;
    }
    else {
      this.uniqueValuesStatus = status.IN_PROGRESS;
      try {
        const uniqueValues = await getUniqueValues(this.props);
        this.uniqueValues = uniqueValues;
        if ((_a = uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) {
          this.uniqueValuesStatus = status.SUCCESS;
        }
        else {
          this.uniqueValuesStatus = status.FAILED;
        }
      }
      catch (error) {
        this.uniqueValuesStatus = status.FAILED;
      }
    }
    if (hideStatistics) {
      this.statisticsStatus = status.FAILED;
    }
    else {
      this.statisticsStatus = status.IN_PROGRESS;
      try {
        const statistics = await getStatistics(this.props);
        if (!isDefined(statistics.totalCount) &&
          isDefined(statistics.count) &&
          this.uniqueValuesStatus === status.SUCCESS) {
          // take null values count from unique values and add with non-null count from statistics
          const infos = this.uniqueValues.uniqueValueInfos;
          for (let i = 0; i < infos.length; i++) {
            const info = infos[i];
            if (info.value === null) {
              statistics.totalCount = info.count + statistics.count;
              break;
            }
          }
          if (!isDefined(statistics.totalCount)) {
            // no null values
            statistics.totalCount = statistics.count;
          }
        }
        this.statistics = statistics;
        this.statisticsStatus = status.SUCCESS;
      }
      catch (error) {
        this.statisticsStatus = status.FAILED;
      }
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props } = this;
    const { fieldInfo } = props;
    if (!fieldInfo) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.container }, this.renderFieldType(), this.renderFieldAlias(), this.renderFieldDescription(), this.renderFieldValueType(), this.renderFieldSampleValue(), this.renderFieldFormat(), this.renderFieldStatistics())));
  }
  renderFieldType() {
    const { strings, props } = this;
    const { fieldInfo } = props;
    const fieldType = this._getFieldTypeLabel(fieldInfo.layerField.type);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldType), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, fieldType)));
  }
  renderFieldAlias() {
    const { strings, props } = this;
    const { fieldInfo } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldAlias), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, fieldInfo.label)));
  }
  renderFieldDescription() {
    const { strings, props } = this;
    const { layer } = props;
    if (layer.type !== "feature") {
      return null;
    }
    const { fieldInfo } = props;
    const description = fieldInfo.layerField.description;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldDescription), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        [CSS.missing]: !description
      } }, description || strings.fieldDescriptionNotSet)));
  }
  renderFieldValueType() {
    const { strings, props } = this;
    const { layer } = props;
    if (layer.type !== "feature") {
      return null;
    }
    const { fieldInfo } = props;
    const fieldValueType = this._getFieldValueTypeCamelCase(fieldInfo);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldValueType), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: !fieldValueType ? CSS.missing : null }, fieldValueType ? strings.fieldValueTypes[fieldValueType] : strings.fieldValueTypeNotSet)));
  }
  renderFieldSampleValue() {
    var _a, _b, _c, _d, _e;
    const { oneFeatureResponse, oneFeatureResponseStatus, statisticsStatus, statistics, uniqueValuesStatus, uniqueValues, strings, props } = this;
    const { layer, fieldName, fieldInfo } = props;
    const { statistics: statStrings } = strings;
    let value;
    if (["imagery", "imagery-tile"].indexOf(layer.type) > -1) {
      return;
    }
    if (layer.type !== "stream" &&
      [simpleFieldTypes.STRING, simpleFieldTypes.OID, simpleFieldTypes.GUID].indexOf(this._getStatisticsType(fieldInfo)) > -1 &&
      uniqueValuesStatus !== status.FAILED) {
      // we show top values
      return null;
    }
    if (oneFeatureResponseStatus === status.SUCCESS) {
      // find first valid value entry
      oneFeatureResponse.features.forEach((feature) => {
        if (value === undefined || (value === null && feature.attributes[fieldName] !== null)) {
          value = feature.attributes[fieldName];
        }
      });
    }
    else if (statisticsStatus === status.SUCCESS) {
      // use statistics min value
      value = statistics.min;
    }
    else if (uniqueValuesStatus === status.SUCCESS) {
      // use a non-null value
      value =
        ((_b = (_a = uniqueValues.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value) || ((_d = (_c = uniqueValues.uniqueValueInfos) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.value);
    }
    const codedValues = fieldInfo.codedValues;
    if (isDefined(value)) {
      if (codedValues) {
        value = ((_e = codedValues.find((codedValue) => value === codedValue.code)) === null || _e === void 0 ? void 0 : _e.name) || value;
      }
      else {
        value = this._getDisplayString(value);
      }
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldSampleValue), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: (oneFeatureResponseStatus === status.FAILED &&
        statisticsStatus === status.FAILED &&
        uniqueValuesStatus === status.FAILED) ||
        !isDefined(value)
        ? CSS.missing
        : null }, oneFeatureResponseStatus === status.SUCCESS ||
      statisticsStatus === status.SUCCESS ||
      uniqueValuesStatus === status.SUCCESS
      ? !isDefined(value)
        ? statStrings.allNulls
        : `${value}`
      : oneFeatureResponseStatus === status.FAILED &&
        statisticsStatus === status.FAILED &&
        uniqueValuesStatus === status.FAILED
        ? strings.fieldSampleNotAvailable
        : strings.fieldSampleRetrieving)));
  }
  renderFieldFormat() {
    var _a, _b;
    const { strings, props } = this;
    const { fieldName, fieldInfo, layer } = props;
    if (["single", "double", "long"].indexOf(fieldInfo.layerField.type) === -1) {
      return null;
    }
    const popupTemplate = layer.popupTemplate;
    if (popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos) {
      const popFieldInfos = (_a = popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.filter((fieldInfo) => fieldInfo.fieldName === fieldName);
      if (popFieldInfos === null || popFieldInfos === void 0 ? void 0 : popFieldInfos.length) {
        const popFieldInfo = popFieldInfos[0];
        if (isDefined((_b = popFieldInfo === null || popFieldInfo === void 0 ? void 0 : popFieldInfo.format) === null || _b === void 0 ? void 0 : _b.places)) {
          const num = popFieldInfo.format.places;
          return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldDecimalPlaces), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.fieldNumDecimalPlaces.replace("${number}", num.toString()))));
        }
      }
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldDecimalPlaces), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, strings.fieldDecimalPlacesNotAvailable)));
  }
  renderFieldStatistics() {
    const { statisticsStatus, uniqueValuesStatus, hideStatistics, strings, props } = this;
    const { layer, fieldInfo } = props;
    if (hideStatistics) {
      this.arcgisFieldInfoComplete.emit();
      return null;
    }
    if (["stream", "imagery", "imagery-tile"].indexOf(layer.type) > -1 ||
      ["long"].indexOf(fieldInfo.layerField.type) > -1) {
      // can't get statistics
      this.arcgisFieldInfoComplete.emit();
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldStatistics), !statisticsStatus ||
      statisticsStatus === status.MISSING ||
      statisticsStatus === status.IN_PROGRESS ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "field-info-statistics-content", class: CSS.missing }, strings.fieldStatisticsRetrieving)) : statisticsStatus === status.FAILED && uniqueValuesStatus !== status.SUCCESS ? (this.renderNoStatistics()) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "field-info-statistics-content", ref: () => this.arcgisFieldInfoComplete.emit() }, this.renderStatistics()))));
  }
  renderNoStatistics() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "field-info-statistics-content", ref: () => this.arcgisFieldInfoComplete.emit(), class: CSS.missing }, strings.fieldStatisticsNotAvailable));
  }
  renderStatistics() {
    const { props } = this;
    const { fieldInfo } = props;
    switch (this._getStatisticsType(fieldInfo)) {
      case simpleFieldTypes.NUMBER:
        return this.renderNumberStatistics();
      case simpleFieldTypes.STRING:
      case simpleFieldTypes.OID:
      case simpleFieldTypes.GUID:
        return this.renderStringStatistics();
      case simpleFieldTypes.DATE:
      case simpleFieldTypes.DATE_ONLY:
      case simpleFieldTypes.TIME_ONLY:
      case simpleFieldTypes.TIMESTAMP_OFFSET:
        return this.renderDateStatistics();
      default:
        return null;
    }
  }
  renderNumberStatistics() {
    const { statistics, strings } = this;
    if (!statistics) {
      return this.renderNoStatistics();
    }
    const { statistics: statStrings } = strings;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfValues), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.totalCount))), isDefined(statistics.sum) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.sumOfValues), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.sum)))) : null, isDefined(statistics.min) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.minimum), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.min)))) : null, isDefined(statistics.max) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.maximum), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.max)))) : null, isDefined(statistics.avg) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.average), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.avg)))) : null, isDefined(statistics.stddev) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.standardDeviation), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.stddev)))) : null, this.renderNullValues()));
  }
  renderStringStatistics() {
    const { statistics, uniqueValuesStatus, strings } = this;
    const { statistics: statStrings } = strings;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfValues), uniqueValuesStatus !== status.SUCCESS ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, "--")) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics === null || statistics === void 0 ? void 0 : statistics.totalCount)))), this.renderNullValues(), this.renderTopValues()));
  }
  renderDateStatistics() {
    // TODO UTC offset
    const { statistics, view, props, strings } = this;
    const { fieldInfo } = props;
    if (!statistics) {
      return this.renderNoStatistics();
    }
    const { statistics: statStrings } = strings;
    const dateRange = statistics.max - statistics.min;
    const years = Math.floor(dateRange / 31536000000);
    let months = Math.floor((dateRange - years * 31536000000) / 2628000000);
    let days = Math.ceil((dateRange - months * 2628000000) / 86400000);
    if (days >= 30) {
      months += 1;
      days = 0;
    }
    let timeSpan = years === 1
      ? statStrings.timeSpanOptions.year
      : years > 1
        ? statStrings.timeSpanOptions.years.replace("${years}", years.toString())
        : "";
    timeSpan += years > 0 && (months > 0 || days > 0) ? ", " : "";
    timeSpan +=
      months === 1
        ? statStrings.timeSpanOptions.month
        : months > 1
          ? statStrings.timeSpanOptions.months.replace("${months}", months.toString())
          : "";
    timeSpan += months > 0 && days > 0 ? ", " : "";
    timeSpan +=
      days === 1
        ? statStrings.timeSpanOptions.day
        : days > 1
          ? statStrings.timeSpanOptions.days.replace("${days}", days.toString())
          : "";
    const showStats = fieldInfo.simpleFieldType !== simpleFieldTypes.TIMESTAMP_OFFSET ||
      view.timeZone !== "unknown";
    const isTimeOnly = fieldInfo.simpleFieldType === simpleFieldTypes.TIME_ONLY;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfValues), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics === null || statistics === void 0 ? void 0 : statistics.totalCount))), showStats && isDefined(statistics.min) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, isTimeOnly ? statStrings.minimumTime : statStrings.minimumDate), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${this._getDisplayString(statistics.min)}`))) : null, showStats && isDefined(statistics.max) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, isTimeOnly ? statStrings.maximumTime : statStrings.maximumDate), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${this._getDisplayString(statistics.max)}`))) : null, showStats && isDefined(statistics.avg) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, isTimeOnly ? statStrings.averageTime : statStrings.averageDate), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${this._getDisplayString(statistics.avg)}`))) : null, showStats &&
      !isTimeOnly &&
      isDefined(statistics.min) &&
      isDefined(statistics.max) &&
      dateRange > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.timespan), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, timeSpan))) : null, this.renderNullValues()));
  }
  renderTopValues() {
    var _a;
    const { uniqueValues, uniqueValuesStatus, strings, props } = this;
    const { fieldInfo } = props;
    const { statistics: statStrings } = strings;
    if ((_a = uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) {
      const infos = uniqueValues.uniqueValueInfos;
      infos.sort((a, b) => (a.count < b.count ? 1 : a.count > b.count ? -1 : 0));
      const codedValues = fieldInfo.codedValues;
      const values = infos
        .filter((info) => info.value !== null)
        .filter((info, idx) => info && idx < 10)
        .map((info) => {
        let value = info.value;
        if (codedValues) {
          codedValues.forEach((codeValue) => {
            if (value === codeValue.code) {
              value = codeValue.name;
            }
          });
        }
        else {
          value = this._getDisplayString(value);
        }
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${value}`), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${CSS.data} ${CSS.count}` }, this._printNumValue(info.count))));
      });
      if (!values.length) {
        return null;
      }
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRowTopValues }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, infos.length > 10 ? statStrings.topTenValues : statStrings.topValues), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.count)), values));
    }
    else {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRowTopValues }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.topValues), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.count)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, uniqueValuesStatus === status.FAILED
        ? strings.fieldUniqueValuesNotAvailable
        : strings.fieldSampleRetrieving))));
    }
  }
  renderNullValues() {
    const { statistics, uniqueValues, strings } = this;
    const { statistics: statStrings } = strings;
    let count = statistics === null || statistics === void 0 ? void 0 : statistics.nullcount;
    if (!isDefined(count) && uniqueValues) {
      const infos = uniqueValues.uniqueValueInfos;
      for (let i = 0; i < infos.length; i++) {
        const info = infos[i];
        if (info.value === null) {
          count = info.count;
          break;
        }
      }
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfNulls), !isDefined(count) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, "--")) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${new Number(count).toLocaleString()}`))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  _getFieldTypeLabel(fieldType) {
    const { strings } = this;
    const fieldTypes = strings.fieldTypes;
    switch (fieldType) {
      case "small-integer":
        return fieldTypes.smallInteger;
      case "big-integer":
        return fieldTypes.bigInteger;
      case "integer":
        return fieldTypes.integer;
      case "single":
        return fieldTypes.single;
      case "double":
        return fieldTypes.double;
      case "long":
        return fieldTypes.long;
      case "string":
        return fieldTypes.string;
      case "date":
        return fieldTypes.date;
      case "date-only":
        return fieldTypes.dateOnly;
      case "time-only":
        return fieldTypes.timeOnly;
      case "timestamp-offset":
        return fieldTypes.timestampOffset;
      case "oid":
        return fieldTypes.oid;
      case "guid":
        return fieldTypes.guid;
      case "global-id":
        return fieldTypes.globalId;
      default:
        return fieldTypes.string;
    }
  }
  _getStatisticsType(fieldInfo) {
    // "count-or-amount","percentage-or-ratio","measurement","unique-identifier","coordinate","binary"
    // "name-or-title","type-or-category","description","location-or-place-name","ordered-or-ranked","date-and-time"
    switch (fieldInfo.layerField.type) {
      case "small-integer":
      case "big-integer":
      case "integer":
      case "single":
      case "double": {
        if (fieldInfo.codedValues) {
          return simpleFieldTypes.STRING;
        }
        switch (fieldInfo.layerField.valueType) {
          case "name-or-title":
          case "type-or-category":
          case "description":
          case "location-or-place-name":
          case "ordered-or-ranked":
          case "binary":
            //case "date-and-time":
            return simpleFieldTypes.STRING;
          default:
            return simpleFieldTypes.NUMBER;
        }
      }
      case "string":
        return simpleFieldTypes.STRING;
      case "date":
        return simpleFieldTypes.DATE;
      case "timestamp-offset":
        return simpleFieldTypes.TIMESTAMP_OFFSET;
      case "date-only":
        return simpleFieldTypes.DATE_ONLY;
      case "time-only":
        return simpleFieldTypes.TIME_ONLY;
      default:
        return simpleFieldTypes.STRING;
    }
  }
  _getFieldValueTypeCamelCase(field) {
    switch (field.layerField.valueType) {
      case "count-or-amount":
        return "countOrAmount";
      case "percentage-or-ratio":
        return "percentageOrRatio";
      case "unique-identifier":
        return "uniqueIdentifier";
      case "name-or-title":
        return "nameOrTitle";
      case "type-or-category":
        return "typeOrCategory";
      case "location-or-place-name":
        return "locationOrPlaceName";
      case "ordered-or-ranked":
        return "orderedOrRanked";
      case "date-and-time":
        return "dateAndTime";
      default:
        return field.layerField.valueType;
    }
  }
  _getDisplayString(value) {
    const { props } = this;
    const { fieldInfo } = props;
    switch (fieldInfo.simpleFieldType) {
      case simpleFieldTypes.DATE:
        return this._getDateString(value);
      case simpleFieldTypes.TIMESTAMP_OFFSET:
        return this._getTimestampOffsetString(value);
      case simpleFieldTypes.DATE_ONLY:
        return this._getDateOnlyString(value);
      case simpleFieldTypes.TIME_ONLY:
        return this._getTimeOnlyString(value);
      case simpleFieldTypes.NUMBER:
        return this._getNumberString(value);
      case simpleFieldTypes.GUID:
        return this._getGuidString(value);
      default:
        // string, oid, global-id
        return `${value}`;
    }
  }
  _getDateString(value) {
    const { modules, view } = this.props;
    if (view.timeZone === "unknown") {
      return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
    }
    else {
      // known issues with formatting it-CH
      return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: view.timeZone }));
    }
  }
  _getTimestampOffsetString(value) {
    /*
    const timestamp = "2023-03-19T16:00:00.123-01:00";
    console.log("timestamp", timestamp);
    console.log(
      "local Time",
      intl.formatTimestamp(timestamp, intl.convertDateFormatToIntlOptions("short-date-short-time"))
    );
    console.log(
      "mapView Time (except unknown)",
      intl.formatTimestamp(timestamp, {
        ...intl.convertDateFormatToIntlOptions("short-date-short-time"),
        timeZone: view.timeZone,
      })
    );
    console.log(
      "UTC Time (mapView time unknown)",
      intl.formatTimestamp(timestamp, {
        ...intl.convertDateFormatToIntlOptions("short-date-short-time"),
        timeZone: "utc",
        timeZoneName: "shortOffset"
      })
    );
    console.log(
      "Raw",
      intl.formatTimestamp(timestamp, {
        ...intl.convertDateFormatToIntlOptions("short-date-short-time"),
        timeZoneName: "shortOffset"
      })
    );
    */
    const { modules, view } = this.props;
    if (typeof value === "string") {
      // raw value from layer
      if (view.timeZone === "unknown") {
        return modules.intl.formatTimestamp(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
      }
      else {
        return modules.intl.formatTimestamp(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: view.timeZone }));
      }
    }
    else {
      // e.g. UNIX timestamp from statistics call
      return this._getDateString(value);
    }
  }
  _getDateOnlyString(value) {
    const { props } = this;
    const { modules } = props;
    return modules.intl.formatDateOnly(value, modules.intl.convertDateFormatToIntlOptions("short-date"));
  }
  _getTimeOnlyString(value) {
    const { props } = this;
    const { modules } = props;
    if (typeof value === "string") {
      return modules.intl.formatTimeOnly(value, modules.intl.convertDateFormatToIntlOptions("short-date-long-time"));
    }
    else {
      // UNIX timestamp
      return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("long-time")), { timeZone: "utc" }));
    }
  }
  _getGuidString(value) {
    return value.startsWith("{") ? value : `{${value}}`;
  }
  _getNumberString(value) {
    return this.props.modules.intl.formatNumber(value);
  }
  _printNumValue(value) {
    return isDefined(value) ? this._getNumberString(Math.round(value * 100) / 100) : `--`;
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFieldInfo.style = arcgisFieldInfoCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTUyZTU4MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQ3ZDO0FBQ1Q7QUFDVTtBQUM1QztBQUNTO0FBQ0Q7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0JBQXdCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG1CQUFtQjtBQUM3QjtBQUNBLFVBQVUsZ0JBQWdCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxjQUFjO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLCtEQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsb0NBQW9DO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2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ZUFBZSxHQUFHLGtCQUFrQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFNEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9hcmNnaXMtZmllbGQtaW5mby5lbnRyeS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sb2NhbGUtMTNlMDBhNzUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgZCBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC05MmViYjM5Ni5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgfSBmcm9tICcuL2xvY2FsZS0xM2UwMGE3NS5qcyc7XG5pbXBvcnQgeyBsIGFzIGxvYWRNb2R1bGVzIH0gZnJvbSAnLi9sb2FkTW9kdWxlcy1hYWYzMGJkNi5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldEZlYXR1cmVDb3VudCQxIH0gZnJvbSAnLi9jb21tb25GdW5jdGlvbnMtNTI2MmIwOTQuanMnO1xuaW1wb3J0ICcuL2RvbS0xM2Y1YjAwYy5qcyc7XG5pbXBvcnQgJy4vbGFuZ3VhZ2VVdGlsLTIyMjU4YzkwLmpzJztcbmltcG9ydCAnLi9jb21tb25FbnVtcy1mOThhMzIzYy5qcyc7XG5cbmNvbnN0IENTUyA9IHtcbiAgY29udGFpbmVyOiBcImNvbnRhaW5lclwiLFxuICBzZWN0aW9uOiBcInNlY3Rpb25cIixcbiAgdGl0bGU6IFwidGl0bGVcIixcbiAgbWlzc2luZzogXCJtaXNzaW5nXCIsXG4gIGRhdGE6IFwiZGF0YVwiLFxuICBjb3VudDogXCJjb3VudFwiLFxuICBzdGF0aXN0aWNzUm93OiBcInN0YXRpc3RpY3Mtcm93XCIsXG4gIHN0YXRpc3RpY3NSb3dUb3BWYWx1ZXM6IFwic3RhdGlzdGljcy1yb3ctdG9wLXZhbHVlc1wiXG59O1xuXG52YXIgc3RhdHVzO1xuKGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgc3RhdHVzW1wiTUlTU0lOR1wiXSA9IFwibWlzc2luZ1wiO1xuICBzdGF0dXNbXCJJTl9QUk9HUkVTU1wiXSA9IFwiaW5Qcm9ncmVzc1wiO1xuICBzdGF0dXNbXCJTVUNDRVNTXCJdID0gXCJzdWNjZXNzXCI7XG4gIHN0YXR1c1tcIkZBSUxFRFwiXSA9IFwiZmFpbGVkXCI7XG59KShzdGF0dXMgfHwgKHN0YXR1cyA9IHt9KSk7XG52YXIgc2ltcGxlRmllbGRUeXBlcztcbihmdW5jdGlvbiAoc2ltcGxlRmllbGRUeXBlcykge1xuICBzaW1wbGVGaWVsZFR5cGVzW1wiTlVNQkVSXCJdID0gXCJudW1iZXJcIjtcbiAgc2ltcGxlRmllbGRUeXBlc1tcIlNUUklOR1wiXSA9IFwic3RyaW5nXCI7XG4gIHNpbXBsZUZpZWxkVHlwZXNbXCJEQVRFXCJdID0gXCJkYXRlXCI7XG4gIHNpbXBsZUZpZWxkVHlwZXNbXCJEQVRFX09OTFlcIl0gPSBcImRhdGUtb25seVwiO1xuICBzaW1wbGVGaWVsZFR5cGVzW1wiVElNRV9PTkxZXCJdID0gXCJ0aW1lLW9ubHlcIjtcbiAgc2ltcGxlRmllbGRUeXBlc1tcIlRJTUVTVEFNUF9PRkZTRVRcIl0gPSBcInRpbWVzdGFtcC1vZmZzZXRcIjtcbiAgc2ltcGxlRmllbGRUeXBlc1tcIk9JRFwiXSA9IFwib2lkXCI7XG4gIHNpbXBsZUZpZWxkVHlwZXNbXCJHVUlEXCJdID0gXCJndWlkXCI7XG4gIHNpbXBsZUZpZWxkVHlwZXNbXCJVTktOT1dOXCJdID0gXCJ1bmtub3duXCI7XG59KShzaW1wbGVGaWVsZFR5cGVzIHx8IChzaW1wbGVGaWVsZFR5cGVzID0ge30pKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBkZWZpbmVkXG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBjaGVja1xuICovXG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGw7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIFVSTCB1c2VkIGZvciBxdWVyaWVzLlxuICogRS5nLiBTY2VuZUxheWVycyBuZWVkIHRvIHVzZSB0aGUgRmVhdHVyZUxheWVyIFVSTCBmb3IgcXVlcmllcy5cbiAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIGNoZWNrXG4gKi9cbmZ1bmN0aW9uIGdldFF1ZXJ5VVJMKGxheWVyKSB7XG4gIHZhciBfYTtcbiAgaWYgKGxheWVyLnR5cGUgPT09IFwic2NlbmVcIikge1xuICAgIHJldHVybiAoX2EgPSBsYXllci5hc3NvY2lhdGVkTGF5ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51cmw7XG4gIH1cbiAgcmV0dXJuIGxheWVyLnVybDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFkZGl0aW9uYWwgZmllbGQgaW5mb3JtYXRpb24gZnJvbSBsYXllclxuICogQHBhcmFtIHByb3BzIC0gcHJvcGVydGllcyBjb250YWluaW5nIGxheWVyIGFuZCBmaWVsZE5hbWVcbiAqL1xuZnVuY3Rpb24gZ2V0RmllbGRJbmZvKHByb3BzKSB7XG4gIHZhciBfYTtcbiAgY29uc3QgeyBsYXllciwgZmllbGROYW1lIH0gPSBwcm9wcztcbiAgbGV0IGZpZWxkSW5mbztcbiAgY29uc3QgeyBwb3B1cFRlbXBsYXRlIH0gPSBsYXllcjtcbiAgY29uc3QgcG9wdXBGaWVsZEluZm9zID0gcG9wdXBUZW1wbGF0ZSA/IHBvcHVwVGVtcGxhdGUuZmllbGRJbmZvcyA6IFtdO1xuICAobGF5ZXIudHlwZSA9PT0gXCJpbWFnZXJ5LXRpbGVcIlxuICAgID8gbGF5ZXIucmFzdGVyRmllbGRzXG4gICAgOiBsYXllci50eXBlID09PSBcImltYWdlcnlcIiAmJiAoKF9hID0gbGF5ZXIucmFzdGVyRmllbGRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKVxuICAgICAgPyBsYXllci5yYXN0ZXJGaWVsZHNcbiAgICAgIDogbGF5ZXIuZmllbGRzKVxuICAgIC5maWx0ZXIoKGxheWVyRmllbGQpID0+IGxheWVyRmllbGQubmFtZSA9PT0gZmllbGROYW1lKVxuICAgIC5mb3JFYWNoKChsYXllckZpZWxkKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IHBvcHVwRmllbGRJbmZvc1xuICAgICAgPyBwb3B1cEZpZWxkSW5mb3MuZmlsdGVyKChmSW5mbykgPT4gZkluZm8uZmllbGROYW1lID09PSBsYXllckZpZWxkLm5hbWUpXG4gICAgICA6IG51bGw7XG4gICAgY29uc3QgbGFiZWwgPSAobGlzdCA9PT0gbnVsbCB8fCBsaXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0Lmxlbmd0aCkgPyBsaXN0WzBdLmxhYmVsIDogbnVsbDtcbiAgICBpZiAoL15yYXN0ZXIuKGl0ZW18c2VydmljZSlwaXhlbHZhbHVlL2kudGVzdChmaWVsZE5hbWUpKSB7XG4gICAgICAvLyBlLmcuIFwiUmFzdGVyLlNlcnZpY2VQaXhlbFZhbHVlXCIgfCBcIlJhc3Rlci5JdGVtUGl4ZWxWYWx1ZVwiIHwgXCJSYXN0ZXIuU2VydmljZVBpeGVsVmFsdWUuUmF3XCJcbiAgICAgIC8vIGxheWVyLnJhc3RlckZpZWxkcyByZXBvcnRzIHRoZW0gYXMgdHlwZSBcInN0cmluZ1wiXG4gICAgICBsYXllckZpZWxkLnR5cGUgPSBcImRvdWJsZVwiO1xuICAgIH1cbiAgICBjb25zdCBmZWF0dXJlRmlsdGVyRmllbGQgPSB7XG4gICAgICBsYXllckZpZWxkOiBsYXllckZpZWxkLFxuICAgICAgbGFiZWw6IGxhYmVsIHx8IGxheWVyRmllbGQuYWxpYXMgfHwgbGF5ZXJGaWVsZC5uYW1lXG4gICAgfTtcbiAgICBmZWF0dXJlRmlsdGVyRmllbGQuY29kZWRWYWx1ZXMgPSBnZXRDb2RlZFZhbHVlcyhmaWVsZE5hbWUsIHByb3BzKTtcbiAgICBfZ2V0U2ltcGxlRmllbGRUeXBlKGZlYXR1cmVGaWx0ZXJGaWVsZCk7XG4gICAgaWYgKGZlYXR1cmVGaWx0ZXJGaWVsZC5zaW1wbGVGaWVsZFR5cGUpIHtcbiAgICAgIGZpZWxkSW5mbyA9IGZlYXR1cmVGaWx0ZXJGaWVsZDtcbiAgICB9IC8vIGVsc2UgY2FuJ3QgdXNlIGZpZWxkXG4gIH0pO1xuICByZXR1cm4gZmllbGRJbmZvO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZlYXR1cmUgY291bnQgaW4gbGF5ZXJcbiAqIEBwYXJhbSBwcm9wcyAtIHByb3BlcnRpZXMgY29udGFpbmluZyBsYXllciBhbmQgZmllbGROYW1lXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEZlYXR1cmVDb3VudChwcm9wcykge1xuICBwcm9wcy5zdGF0aXN0aWNzU3RhdHVzID0gc3RhdHVzLklOX1BST0dSRVNTO1xuICBjb25zdCB7IGxheWVyLCB2aWV3IH0gPSBwcm9wcztcbiAgaWYgKGxheWVyLnR5cGUgPT09IFwiaW1hZ2VyeVwiIHx8IGxheWVyLnR5cGUgPT09IFwiaW1hZ2VyeS10aWxlXCIgfHwgbGF5ZXIudHlwZSA9PT0gXCJzdHJlYW1cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkIG5vdCBnZXQgZmVhdHVyZSBjb3VudFwiKTtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBnZXRGZWF0dXJlQ291bnQkMShsYXllciwgdmlldyk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgc3VtbWFyeSBzdGF0aXN0aWNzXG4gKiBAcGFyYW0gcHJvcHMgLSBwcm9wZXJ0aWVzIGNvbnRhaW5pbmcgbGF5ZXIgYW5kIGZpZWxkTmFtZVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRTdGF0aXN0aWNzKHByb3BzKSB7XG4gIGNvbnN0IHsgbGF5ZXIsIHZpZXcsIGZpZWxkTmFtZSwgZmllbGRJbmZvIH0gPSBwcm9wcztcbiAgaWYgKGxheWVyLnR5cGUgPT09IFwiaW1hZ2VyeVwiIHx8IGxheWVyLnR5cGUgPT09IFwiaW1hZ2VyeS10aWxlXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZCBub3QgZ2V0IHN0YXRpc3RpY3MgZm9yIEltYWdlcnlMYXllci9JbWFnZXJ5VGlsZUxheWVyXCIpO1xuICB9XG4gIGlmICghZmllbGRJbmZvIHx8XG4gICAgZmllbGRJbmZvLmxheWVyRmllbGQudHlwZSA9PT0gXCJvaWRcIiB8fFxuICAgIGZpZWxkSW5mby5sYXllckZpZWxkLnR5cGUgPT09IFwiZ3VpZFwiIHx8XG4gICAgZmllbGRJbmZvLmxheWVyRmllbGQudHlwZSA9PT0gXCJnbG9iYWwtaWRcIikge1xuICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgZ2V0RmVhdHVyZUNvdW50KHByb3BzKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdG90YWxDb3VudDogY291bnQsIG51bGxjb3VudDogMCB9KTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IFtzdW1tYXJ5U3RhdGlzdGljc10gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL3NtYXJ0TWFwcGluZy9zdGF0aXN0aWNzL3N1bW1hcnlTdGF0aXN0aWNzXCJdKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdW1tYXJ5U3RhdGlzdGljcyh7XG4gICAgICBsYXllcixcbiAgICAgIHZpZXcsXG4gICAgICBmaWVsZDogZmllbGROYW1lXG4gICAgfSk7XG4gICAgaWYgKCFpc0RlZmluZWQocmVzdWx0LmNvdW50KSkge1xuICAgICAgLy8gc3RhdGlzdGljcyBpcyB1bnVzYWJsZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY291bGQgbm90IGdldCBzdGF0aXN0aWNzXCIpO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBoaXQgbWF4UmVjb3JkQ291bnQgb3RoZXIgc3RhdHMgdmFsdWVzIGFyZSBwcm9iYWJseSBub3QgY29ycmVjdCBlaXRoZXJcbiAgICBjb25zdCBoaXRNYXhSZWNvcmRDb3VudCA9IFwic291cmNlSlNPTlwiIGluIGxheWVyICYmIGxheWVyLnNvdXJjZUpTT04ubWF4UmVjb3JkQ291bnQgPT09IHJlc3VsdC5jb3VudDtcbiAgICAvLyBjb3VudCBvbmx5IGNvbnRhaW5zIGZlYXR1cmVzIHdpdGggYSB2YWx1ZSAoIT0gbnVsbClcbiAgICBpZiAoaXNEZWZpbmVkKHJlc3VsdC5udWxsY291bnQpICYmICFoaXRNYXhSZWNvcmRDb3VudCkge1xuICAgICAgLy8gd2UgY2FuIGFkZCB0aGUgZmVhdHVyZSBjb3VudCB3aXRob3V0IG51bGwgYW5kIHRoZSBjb3VudCBvZiBudWxsc1xuICAgICAgY29uc3Qgc3RhdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3VsdCksIHsgdG90YWxDb3VudDogcmVzdWx0LmNvdW50ICsgcmVzdWx0Lm51bGxjb3VudCB9KTtcbiAgICAgIHJldHVybiBzdGF0cztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyB3ZSB3YW50IHRoZSB0b3RhbCBmZWF0dXJlIGNvdW50XG4gICAgICAvLyBoYXBwZW5zIGUuZy4gZm9yIFNjZW5lTGF5ZXJzIHdpdGggb2xkZXIgc3RhdHMgY2FjaGVcbiAgICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgZ2V0RmVhdHVyZUNvdW50KHByb3BzKTtcbiAgICAgIGNvbnN0IHN0YXRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXN1bHQpLCB7IHRvdGFsQ291bnQ6IGNvdW50IH0pO1xuICAgICAgcmV0dXJuIHN0YXRzO1xuICAgIH1cbiAgfVxuICBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZCBub3QgZ2V0IHN0YXRpc3RpY3NcIik7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyB1bmlxdWUgdmFsdWVzXG4gKiBAcGFyYW0gcHJvcHMgLSBwcm9wZXJ0aWVzIGNvbnRhaW5pbmcgbGF5ZXIgYW5kIGZpZWxkTmFtZVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRVbmlxdWVWYWx1ZXMocHJvcHMpIHtcbiAgY29uc3QgeyBsYXllciwgdmlldywgZmllbGROYW1lIH0gPSBwcm9wcztcbiAgaWYgKGxheWVyLnR5cGUgPT09IFwiaW1hZ2VyeVwiIHx8IGxheWVyLnR5cGUgPT09IFwiaW1hZ2VyeS10aWxlXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZCBub3QgZ2V0IHVuaXF1ZSB2YWx1ZXMgZm9yIEltYWdlcnlMYXllci9JbWFnZXJ5VGlsZUxheWVyXCIpO1xuICB9XG4gIGlmIChsYXllci50eXBlID09PSBcImZlYXR1cmVcIiAmJiAhbGF5ZXIudXJsKSB7XG4gICAgbGF5ZXIub3V0RmllbGRzID0gW1wiKlwiXTtcbiAgfVxuICBjb25zdCBbdW5pcXVlVmFsdWVzXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImVzcmkvc21hcnRNYXBwaW5nL3N0YXRpc3RpY3MvdW5pcXVlVmFsdWVzXCJdKTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1bmlxdWVWYWx1ZXMoe1xuICAgICAgbGF5ZXIsXG4gICAgICB2aWV3LFxuICAgICAgZmllbGQ6IGZpZWxkTmFtZVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY291bGQgbm90IGdldCB1bmlxdWUgdmFsdWVzXCIpO1xuICB9XG59XG5mdW5jdGlvbiBfZ2V0U2ltcGxlRmllbGRUeXBlKGZlYXR1cmVGaWx0ZXJGaWVsZCkge1xuICBzd2l0Y2ggKGZlYXR1cmVGaWx0ZXJGaWVsZC5sYXllckZpZWxkLnR5cGUpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICBmZWF0dXJlRmlsdGVyRmllbGQuc2ltcGxlRmllbGRUeXBlID0gc2ltcGxlRmllbGRUeXBlcy5TVFJJTkc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGF0ZVwiOlxuICAgICAgZmVhdHVyZUZpbHRlckZpZWxkLnNpbXBsZUZpZWxkVHlwZSA9IHNpbXBsZUZpZWxkVHlwZXMuREFURTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0aW1lc3RhbXAtb2Zmc2V0XCI6XG4gICAgICBmZWF0dXJlRmlsdGVyRmllbGQuc2ltcGxlRmllbGRUeXBlID0gc2ltcGxlRmllbGRUeXBlcy5USU1FU1RBTVBfT0ZGU0VUO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhdGUtb25seVwiOlxuICAgICAgZmVhdHVyZUZpbHRlckZpZWxkLnNpbXBsZUZpZWxkVHlwZSA9IHNpbXBsZUZpZWxkVHlwZXMuREFURV9PTkxZO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRpbWUtb25seVwiOlxuICAgICAgZmVhdHVyZUZpbHRlckZpZWxkLnNpbXBsZUZpZWxkVHlwZSA9IHNpbXBsZUZpZWxkVHlwZXMuVElNRV9PTkxZO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9pZFwiOlxuICAgICAgZmVhdHVyZUZpbHRlckZpZWxkLnNpbXBsZUZpZWxkVHlwZSA9IHNpbXBsZUZpZWxkVHlwZXMuT0lEO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImd1aWRcIjpcbiAgICBjYXNlIFwiZ2xvYmFsLWlkXCI6XG4gICAgICBmZWF0dXJlRmlsdGVyRmllbGQuc2ltcGxlRmllbGRUeXBlID0gc2ltcGxlRmllbGRUeXBlcy5HVUlEO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNtYWxsLWludGVnZXJcIjpcbiAgICBjYXNlIFwiYmlnLWludGVnZXJcIjpcbiAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgIGNhc2UgXCJzaW5nbGVcIjpcbiAgICBjYXNlIFwiZG91YmxlXCI6XG4gICAgY2FzZSBcImxvbmdcIjpcbiAgICAgIGZlYXR1cmVGaWx0ZXJGaWVsZC5zaW1wbGVGaWVsZFR5cGUgPSBzaW1wbGVGaWVsZFR5cGVzLk5VTUJFUjtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDb2RlZFZhbHVlcyhmaWVsZE5hbWUsIHByb3BzKSB7XG4gIGNvbnN0IHsgbGF5ZXIsIG1vZHVsZXMgfSA9IHByb3BzO1xuICBpZiAobGF5ZXIudHlwZSAhPT0gXCJmZWF0dXJlXCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdHlwZUlkRmllbGQgPSBsYXllci50eXBlSWRGaWVsZDtcbiAgY29uc3QgdHlwZXMgPSBsYXllci50eXBlcztcbiAgbGV0IGZpZWxkRG9tYWlucztcbiAgY29uc3QgZmllbGQgPSBsYXllci5maWVsZHMuZmluZCgoZmllbGQpID0+IGZpZWxkLm5hbWUgPT09IGZpZWxkTmFtZSk7XG4gIGNvbnN0IGZpZWxkRG9tYWluID0gZmllbGQuZG9tYWluO1xuICBpZiAodHlwZUlkRmllbGQgJiYgdHlwZXMpIHtcbiAgICAvLyBsYXllciBoYXMgdHlwZXNcbiAgICBpZiAodHlwZUlkRmllbGQgPT09IGZpZWxkTmFtZSkge1xuICAgICAgLy8gdGhpcyBpcyB0aGUgZmllbGQgd2l0aCB0aGUgdHlwZXNcbiAgICAgIGZpZWxkRG9tYWlucyA9IHR5cGVzLm1hcCgodHlwZSkgPT4ge1xuICAgICAgICAvLyBmYWtlIGNvZGVkIFZhbHVlc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvZGU6IHR5cGUuaWQsXG4gICAgICAgICAgbmFtZTogdHlwZS5uYW1lXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBmaWVsZCBkb2VzIG5vdCBoYXZlIHR5cGVzOyBsb29rIGZhcnRoZXIgaW5zaWRlIHRoZSB0eXBlc1xuICAgICAgZmllbGREb21haW5zID0gW107XG4gICAgICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICghdHlwZS5kb21haW5zIHx8ICF0eXBlLmRvbWFpbnNbZmllbGROYW1lXSB8fCB0eXBlLmRvbWFpbnNbZmllbGROYW1lXS50eXBlID09PSBcImluaGVyaXRlZFwiKSB7XG4gICAgICAgICAgY29uc3QgZG9tYWluID0gZmllbGREb21haW47XG4gICAgICAgICAgaWYgKGRvbWFpbiA9PT0gbnVsbCB8fCBkb21haW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRvbWFpbi5jb2RlZFZhbHVlcykge1xuICAgICAgICAgICAgZG9tYWluLmNvZGVkVmFsdWVzLmZvckVhY2goYXN5bmMgKGNvZGVkVmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZpZWxkRG9tYWlucy5mb3JFYWNoKChjb2RlZFZhbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb2RlZFZhbC5jb2RlID09PSBjb2RlZFZhbHVlLmNvZGUpIHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGlmIChgLCAke2NvZGVkVmFsLm5hbWV9LGAuaW5kZXhPZihgLCAke2NvZGVkVmFsdWUubmFtZX0sYCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGVkVmFsLm5hbWUgKz0gYCwgJHtjb2RlZFZhbHVlLm5hbWV9YDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgZmllbGREb21haW5zLnB1c2gobW9kdWxlcy5lc3JpTGFuZy5jbG9uZShjb2RlZFZhbHVlKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoX2IgPSAoX2EgPSB0eXBlLmRvbWFpbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtmaWVsZE5hbWVdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY29kZWRWYWx1ZXMpIHtcbiAgICAgICAgICB0eXBlLmRvbWFpbnNbZmllbGROYW1lXS5jb2RlZFZhbHVlcy5mb3JFYWNoKGFzeW5jIChjb2RlZFZhbHVlKSA9PiB7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZpZWxkRG9tYWlucy5mb3JFYWNoKChjb2RlZFZhbCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoY29kZWRWYWwuY29kZSA9PT0gY29kZWRWYWx1ZS5jb2RlKSB7XG4gICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChgLCAke2NvZGVkVmFsLm5hbWV9LGAuaW5kZXhPZihgLCAke2NvZGVkVmFsdWUubmFtZX0sYCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICBjb2RlZFZhbC5uYW1lICs9IGAsICR7Y29kZWRWYWx1ZS5uYW1lfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgZmllbGREb21haW5zLnB1c2gobW9kdWxlcy5lc3JpTGFuZy5jbG9uZShjb2RlZFZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIShmaWVsZERvbWFpbnMgPT09IG51bGwgfHwgZmllbGREb21haW5zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZERvbWFpbnMubGVuZ3RoKSAmJiAoZmllbGREb21haW4gPT09IG51bGwgfHwgZmllbGREb21haW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpZWxkRG9tYWluLmNvZGVkVmFsdWVzKSkge1xuICAgICAgZmllbGREb21haW5zID0gbW9kdWxlcy5lc3JpTGFuZy5jbG9uZShmaWVsZERvbWFpbi5jb2RlZFZhbHVlcyk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGZpZWxkRG9tYWluID09PSBudWxsIHx8IGZpZWxkRG9tYWluID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZERvbWFpbi5jb2RlZFZhbHVlcykge1xuICAgIC8vIGRvbWFpbnMgZGlyZWN0bHkgb24gdGhlIGxheWVyIGZpZWxkXG4gICAgZmllbGREb21haW5zID0gZmllbGQuZG9tYWluLmNvZGVkVmFsdWVzO1xuICB9XG4gIHJldHVybiAoZmllbGREb21haW5zID09PSBudWxsIHx8IGZpZWxkRG9tYWlucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmllbGREb21haW5zLmxlbmd0aCkgPyBmaWVsZERvbWFpbnMgOiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdXAgdG8gNSBmZWF0dXJlcyBmcm9tIHRoZSBsYXllciB0byBnZXQgc2FtcGxlIGRhdGFcbiAqIEBwYXJhbSBwcm9wcyAtIHByb3BlcnRpZXMgY29udGFpbmluZyBsYXllciBhbmQgdmlld1xuICovXG5hc3luYyBmdW5jdGlvbiBnZXRPbmVGZWF0dXJlKHByb3BzKSB7XG4gIHZhciBfYSwgX2I7XG4gIGNvbnN0IHsgdmlldywgbGF5ZXIgfSA9IHByb3BzO1xuICBpZiAobGF5ZXIudHlwZSA9PT0gXCJpbWFnZXJ5XCIgfHwgbGF5ZXIudHlwZSA9PT0gXCJpbWFnZXJ5LXRpbGVcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvdWxkIG5vdCBnZXQgZmVhdHVyZVwiKTtcbiAgfVxuICBpZiAoKGxheWVyLnR5cGUgPT09IFwiZmVhdHVyZVwiICYmICFsYXllci51cmwpIHx8IGxheWVyLnR5cGUgPT09IFwid2ZzXCIpIHtcbiAgICAvLyBmZWF0dXJlIGNvbGxlY3Rpb24gb3Igd2ZzXG4gICAgY29uc3QgcXVlcnkgPSBsYXllci5jcmVhdGVRdWVyeSgpO1xuICAgIHF1ZXJ5LnN0YXJ0ID0gMDtcbiAgICBxdWVyeS5udW0gPSA1O1xuICAgIHF1ZXJ5Lm91dEZpZWxkcyA9IFtcIipcIl07XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbGF5ZXIucXVlcnlGZWF0dXJlcyhxdWVyeSk7XG4gICAgaWYgKChfYSA9IHJlc3VsdC5mZWF0dXJlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZCBub3QgZ2V0IGZlYXR1cmVcIik7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIC8vIHNlcnZpY2VcbiAgICBpZiAoIXZpZXcpIHtcbiAgICAgIC8vIGdldCBmZWF0dXJlIGZyb20gc2VydmljZSBkaXJlY3RseVxuICAgICAgcmV0dXJuIF9xdWVyeU9uZUZlYXR1cmUocHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBsYXllclZpZXcgPSAoYXdhaXQgdmlldy53aGVuTGF5ZXJWaWV3KGxheWVyKSk7XG4gICAgY29uc3QgaGFzQWxsRmllbGRzID0gbGF5ZXJWaWV3LmF2YWlsYWJsZUZpZWxkcy5sZW5ndGggPT09IGxheWVyLmZpZWxkcy5sZW5ndGg7XG4gICAgaWYgKGhhc0FsbEZpZWxkcyB8fCAoW1wic3RyZWFtXCIsIFwib2djLWZlYXR1cmVcIl0uaW5kZXhPZihsYXllci50eXBlKSA+IC0xICYmIGxheWVyVmlldy5hdmFpbGFibGVGaWVsZHMubGVuZ3RoID4gMCkpIHtcbiAgICAgIC8vIGZlYXR1cmVzIG9uIGNsaWVudCBoYXZlIGFsbCBmaWVsZHNcbiAgICAgIC8vIG9yIHdlIGNhbid0IG1ha2UgYSBzZXJ2ZXIgcXVlcnksIHNvIHdlIHRha2Ugd2hhdCB3ZSBjYW4gZ2V0XG4gICAgICBjb25zdCBxdWVyeSA9IGxheWVyLmNyZWF0ZVF1ZXJ5KCk7XG4gICAgICBxdWVyeS5zdGFydCA9IDA7XG4gICAgICBxdWVyeS5udW0gPSA1O1xuICAgICAgcXVlcnkub3V0RmllbGRzID0gW1wiKlwiXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxheWVyVmlldy5xdWVyeUZlYXR1cmVzKHF1ZXJ5KTtcbiAgICAgIGlmICgoX2IgPSByZXN1bHQuZmVhdHVyZXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpIHtcbiAgICAgICAgLy8gY2xpZW50IHNpZGUgZmVhdHVyZXNcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBnZXQgZmVhdHVyZSBmcm9tIHNlcnZpY2VcbiAgICAgICAgcmV0dXJuIF9xdWVyeU9uZUZlYXR1cmUocHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGdldCBmZWF0dXJlIGZyb20gc2VydmljZVxuICAgICAgcmV0dXJuIF9xdWVyeU9uZUZlYXR1cmUocHJvcHMpO1xuICAgIH1cbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gX3F1ZXJ5T25lRmVhdHVyZShwcm9wcykge1xuICBjb25zdCB7IGxheWVyIH0gPSBwcm9wcztcbiAgaWYgKFtcImltYWdlcnlcIiwgXCJpbWFnZXJ5LXRpbGVcIiwgXCJzdHJlYW1cIiwgXCJvZ2MtZmVhdHVyZVwiXS5pbmRleE9mKGxheWVyLnR5cGUpID4gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZ2V0IGZlYXR1cmUgZnJvbSBzZXJ2aWNlXCIpO1xuICB9XG4gIGNvbnN0IFtRdWVyeV0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL3Jlc3Qvc3VwcG9ydC9RdWVyeVwiXSk7XG4gIGNvbnN0IHF1ZXJ5ID0gbmV3IFF1ZXJ5KHtcbiAgICB3aGVyZTogXCIxPTFcIixcbiAgICBvdXRGaWVsZHM6IFtcIipcIl0sXG4gICAgcmV0dXJuR2VvbWV0cnk6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gbGF5ZXIucXVlcnlGZWF0dXJlcyhxdWVyeSk7XG59XG5cbmNvbnN0IGFyY2dpc0ZpZWxkSW5mb0NzcyA9IFwiOmhvc3R7aGVpZ2h0OjEwMCV9LmNvbnRhaW5lcntwYWRkaW5nOjZweDtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlfS50aXRsZXtmb250LXdlaWdodDpib2xkO3BhZGRpbmc6NXB4IDB9Lm1pc3Npbmd7Y29sb3I6I2E5YTlhOX0uZGF0YXtjb2xvcjojYTlhOWE5fS5jb3VudHt3aGl0ZS1zcGFjZTpub3dyYXB9LnNlY3Rpb257cGFkZGluZzo2cHggMH0uc3RhdGlzdGljcy1yb3d7Ym9yZGVyLXRvcDoxcHggc29saWQgI2UwZTBlMDtwYWRkaW5nOjZweCAwO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uc3RhdGlzdGljcy1yb3ctdG9wLXZhbHVlc3tib3JkZXItdG9wOjFweCBzb2xpZCAjZTBlMGUwO3BhZGRpbmc6MjBweCAwIDZweCAwO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn1cIjtcblxuY29uc3QgQXJjZ2lzRmllbGRJbmZvID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmFyY2dpc0ZpZWxkSW5mb0NvbXBsZXRlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNGaWVsZEluZm9Db21wbGV0ZVwiLCA3KTtcbiAgICB0aGlzLnZpZXcgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYXllciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZpZWxkTmFtZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhpZGVTdGF0aXN0aWNzID0gZmFsc2U7XG4gICAgdGhpcy5vbmVGZWF0dXJlUmVzcG9uc2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vbmVGZWF0dXJlUmVzcG9uc2VTdGF0dXMgPSBzdGF0dXMuTUlTU0lORztcbiAgICB0aGlzLnN0YXRpc3RpY3MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdGF0aXN0aWNzU3RhdHVzID0gc3RhdHVzLk1JU1NJTkc7XG4gICAgdGhpcy51bmlxdWVWYWx1ZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy51bmlxdWVWYWx1ZXNTdGF0dXMgPSBzdGF0dXMuTUlTU0lORztcbiAgfVxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBMaWZlY3ljbGVcbiAgLy9cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICBjb25zdCBbc3RyaW5ncywgY3VycmVudExhbmd1YWdlLCBjdXJyZW50TGFuZ3VhZ2VJbnRsXSA9IGF3YWl0IGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3ModGhpcy5ob3N0RWxlbWVudCk7XG4gICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB0aGlzLmxvY2FsZSA9IGN1cnJlbnRMYW5ndWFnZTtcbiAgICB0aGlzLmxvY2FsSW50bCA9IGN1cnJlbnRMYW5ndWFnZUludGw7XG4gICAgY29uc3QgW2VzcmlMYW5nLCBTcWxUaW1lU3RhbXBPZmZzZXQsIGludGxdID0gYXdhaXQgbG9hZE1vZHVsZXMoW1xuICAgICAgXCJlc3JpL2NvcmUvbGFuZ1wiLFxuICAgICAgXCJlc3JpL2NvcmUvc3FsL1NxbFRpbWVzdGFtcE9mZnNldFwiLFxuICAgICAgXCJlc3JpL2ludGxcIlxuICAgIF0pO1xuICAgIGNvbnN0IHsgdmlldywgbGF5ZXIsIGZpZWxkTmFtZSwgaGlkZVN0YXRpc3RpY3MgfSA9IHRoaXM7XG4gICAgbGV0IHN1YmxheWVyRkw7XG4gICAgaWYgKGxheWVyLmRlY2xhcmVkQ2xhc3MgPT09IFwiZXNyaS5sYXllcnMuc3VwcG9ydC5TdWJsYXllclwiKSB7XG4gICAgICAvLyBuZWVkIHRvIGNyZWF0ZSBhIEZlYXR1cmVMYXllclxuICAgICAgY29uc3Qgc3VibGF5ZXIgPSBsYXllcjtcbiAgICAgIGNvbnN0IFtyZWFjdGl2ZVV0aWxzXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImVzcmkvY29yZS9yZWFjdGl2ZVV0aWxzXCJdKTtcbiAgICAgIHZpZXcgJiYgKGF3YWl0IHJlYWN0aXZlVXRpbHMud2hlbk9uY2UoKCkgPT4gIXZpZXcudXBkYXRpbmcpKTtcbiAgICAgIHN1YmxheWVyRkwgPSBhd2FpdCBzdWJsYXllci5jcmVhdGVGZWF0dXJlTGF5ZXIoKTtcbiAgICAgIGF3YWl0IHN1YmxheWVyRkwubG9hZCgpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzID0ge1xuICAgICAgdmlldyxcbiAgICAgIGxheWVyOiBzdWJsYXllckZMIHx8IGxheWVyLFxuICAgICAgZmllbGROYW1lLFxuICAgICAgaGlkZVN0YXRpc3RpY3MsXG4gICAgICBtb2R1bGVzOiB7IGVzcmlMYW5nLCBTcWxUaW1lU3RhbXBPZmZzZXQsIGludGwgfVxuICAgIH07XG4gICAgLy8gcmVxdWlyZWQgZm9yIGluaXRpYWwgbG9hZFxuICAgIHRoaXMucHJvcHMuZmllbGRJbmZvID0gZ2V0RmllbGRJbmZvKHRoaXMucHJvcHMpO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgdmFyIF9hO1xuICAgIC8vIG9uY2UgY29tcG9uZW50IGlzIHZpc2libGUgbWFrZSBvdGhlciBjYWxsc1xuICAgIGNvbnN0IHsgcHJvcHMsIGhpZGVTdGF0aXN0aWNzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbGF5ZXIsIG1vZHVsZXMgfSA9IHByb3BzO1xuICAgIG1vZHVsZXMuaW50bC5zZXRMb2NhbGUodGhpcy5sb2NhbEludGwpO1xuICAgIC8vIG1vZHVsZXMuaW50bC5zZXRMb2NhbGUodGhpcy5sb2NhbGUpIG5vdCByZXR1cm5pbmcgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmb3IgZS5nLiBpdC1jaFxuICAgIC8vIHdlIGRvbid0IGtub3cgaWYgdGhlIFNjZW5lTGF5ZXIgaGFzIGFuIGFzc29jaWF0ZWQgRkxcbiAgICAvLyBkb24ndCBwcm9tcHQgZm9yIGEgbG9naW4gaWYgaXQncyBub3QgYWNjZXNzaWJsZVxuICAgIGlmIChsYXllci50eXBlID09PSBcInNjZW5lXCIpIHtcbiAgICAgIGNvbnN0IFtlc3JpQ29uZmlnXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImVzcmkvY29uZmlnXCJdKTtcbiAgICAgIGVzcmlDb25maWcucmVxdWVzdC5pbnRlcmNlcHRvcnMucHVzaCh7XG4gICAgICAgIHVybHM6IGdldFF1ZXJ5VVJMKGxheWVyKSArIFwiL1wiICsgbGF5ZXIubGF5ZXJJZCxcbiAgICAgICAgYmVmb3JlOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgcGFyYW1zLnJlcXVlc3RPcHRpb25zLmF1dGhNb2RlID0gXCJuby1wcm9tcHRcIjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMub25lRmVhdHVyZVJlc3BvbnNlU3RhdHVzID0gc3RhdHVzLklOX1BST0dSRVNTO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRPbmVGZWF0dXJlKHRoaXMucHJvcHMpO1xuICAgICAgdGhpcy5vbmVGZWF0dXJlUmVzcG9uc2UgPSByZXN1bHQ7XG4gICAgICB0aGlzLm9uZUZlYXR1cmVSZXNwb25zZVN0YXR1cyA9IHN0YXR1cy5TVUNDRVNTO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMub25lRmVhdHVyZVJlc3BvbnNlU3RhdHVzID0gc3RhdHVzLkZBSUxFRDtcbiAgICB9XG4gICAgaWYgKGxheWVyLnR5cGUgPT09IFwic3RyZWFtXCIpIHtcbiAgICAgIHRoaXMudW5pcXVlVmFsdWVzU3RhdHVzID0gc3RhdHVzLkZBSUxFRDtcbiAgICAgIHRoaXMuc3RhdGlzdGljc1N0YXR1cyA9IHN0YXR1cy5GQUlMRUQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChoaWRlU3RhdGlzdGljcykge1xuICAgICAgdGhpcy51bmlxdWVWYWx1ZXNTdGF0dXMgPSBzdGF0dXMuRkFJTEVEO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudW5pcXVlVmFsdWVzU3RhdHVzID0gc3RhdHVzLklOX1BST0dSRVNTO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdW5pcXVlVmFsdWVzID0gYXdhaXQgZ2V0VW5pcXVlVmFsdWVzKHRoaXMucHJvcHMpO1xuICAgICAgICB0aGlzLnVuaXF1ZVZhbHVlcyA9IHVuaXF1ZVZhbHVlcztcbiAgICAgICAgaWYgKChfYSA9IHVuaXF1ZVZhbHVlcyA9PT0gbnVsbCB8fCB1bmlxdWVWYWx1ZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHVuaXF1ZVZhbHVlcy51bmlxdWVWYWx1ZUluZm9zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy51bmlxdWVWYWx1ZXNTdGF0dXMgPSBzdGF0dXMuU1VDQ0VTUztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVuaXF1ZVZhbHVlc1N0YXR1cyA9IHN0YXR1cy5GQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLnVuaXF1ZVZhbHVlc1N0YXR1cyA9IHN0YXR1cy5GQUlMRUQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoaWRlU3RhdGlzdGljcykge1xuICAgICAgdGhpcy5zdGF0aXN0aWNzU3RhdHVzID0gc3RhdHVzLkZBSUxFRDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnN0YXRpc3RpY3NTdGF0dXMgPSBzdGF0dXMuSU5fUFJPR1JFU1M7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzdGF0aXN0aWNzID0gYXdhaXQgZ2V0U3RhdGlzdGljcyh0aGlzLnByb3BzKTtcbiAgICAgICAgaWYgKCFpc0RlZmluZWQoc3RhdGlzdGljcy50b3RhbENvdW50KSAmJlxuICAgICAgICAgIGlzRGVmaW5lZChzdGF0aXN0aWNzLmNvdW50KSAmJlxuICAgICAgICAgIHRoaXMudW5pcXVlVmFsdWVzU3RhdHVzID09PSBzdGF0dXMuU1VDQ0VTUykge1xuICAgICAgICAgIC8vIHRha2UgbnVsbCB2YWx1ZXMgY291bnQgZnJvbSB1bmlxdWUgdmFsdWVzIGFuZCBhZGQgd2l0aCBub24tbnVsbCBjb3VudCBmcm9tIHN0YXRpc3RpY3NcbiAgICAgICAgICBjb25zdCBpbmZvcyA9IHRoaXMudW5pcXVlVmFsdWVzLnVuaXF1ZVZhbHVlSW5mb3M7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmZvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGluZm9zW2ldO1xuICAgICAgICAgICAgaWYgKGluZm8udmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgc3RhdGlzdGljcy50b3RhbENvdW50ID0gaW5mby5jb3VudCArIHN0YXRpc3RpY3MuY291bnQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWlzRGVmaW5lZChzdGF0aXN0aWNzLnRvdGFsQ291bnQpKSB7XG4gICAgICAgICAgICAvLyBubyBudWxsIHZhbHVlc1xuICAgICAgICAgICAgc3RhdGlzdGljcy50b3RhbENvdW50ID0gc3RhdGlzdGljcy5jb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0aXN0aWNzID0gc3RhdGlzdGljcztcbiAgICAgICAgdGhpcy5zdGF0aXN0aWNzU3RhdHVzID0gc3RhdHVzLlNVQ0NFU1M7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5zdGF0aXN0aWNzU3RhdHVzID0gc3RhdHVzLkZBSUxFRDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFJlbmRlciBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBmaWVsZEluZm8gfSA9IHByb3BzO1xuICAgIGlmICghZmllbGRJbmZvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChoKEhvc3QsIG51bGwsIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmNvbnRhaW5lciB9LCB0aGlzLnJlbmRlckZpZWxkVHlwZSgpLCB0aGlzLnJlbmRlckZpZWxkQWxpYXMoKSwgdGhpcy5yZW5kZXJGaWVsZERlc2NyaXB0aW9uKCksIHRoaXMucmVuZGVyRmllbGRWYWx1ZVR5cGUoKSwgdGhpcy5yZW5kZXJGaWVsZFNhbXBsZVZhbHVlKCksIHRoaXMucmVuZGVyRmllbGRGb3JtYXQoKSwgdGhpcy5yZW5kZXJGaWVsZFN0YXRpc3RpY3MoKSkpKTtcbiAgfVxuICByZW5kZXJGaWVsZFR5cGUoKSB7XG4gICAgY29uc3QgeyBzdHJpbmdzLCBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IGZpZWxkSW5mbyB9ID0gcHJvcHM7XG4gICAgY29uc3QgZmllbGRUeXBlID0gdGhpcy5fZ2V0RmllbGRUeXBlTGFiZWwoZmllbGRJbmZvLmxheWVyRmllbGQudHlwZSk7XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zZWN0aW9uIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnRpdGxlIH0sIHN0cmluZ3MuZmllbGRUeXBlKSwgaChcImRpdlwiLCBudWxsLCBmaWVsZFR5cGUpKSk7XG4gIH1cbiAgcmVuZGVyRmllbGRBbGlhcygpIHtcbiAgICBjb25zdCB7IHN0cmluZ3MsIHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgZmllbGRJbmZvIH0gPSBwcm9wcztcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnNlY3Rpb24gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MudGl0bGUgfSwgc3RyaW5ncy5maWVsZEFsaWFzKSwgaChcImRpdlwiLCBudWxsLCBmaWVsZEluZm8ubGFiZWwpKSk7XG4gIH1cbiAgcmVuZGVyRmllbGREZXNjcmlwdGlvbigpIHtcbiAgICBjb25zdCB7IHN0cmluZ3MsIHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHByb3BzO1xuICAgIGlmIChsYXllci50eXBlICE9PSBcImZlYXR1cmVcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgZmllbGRJbmZvIH0gPSBwcm9wcztcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGZpZWxkSW5mby5sYXllckZpZWxkLmRlc2NyaXB0aW9uO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc2VjdGlvbiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy50aXRsZSB9LCBzdHJpbmdzLmZpZWxkRGVzY3JpcHRpb24pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IHtcbiAgICAgICAgW0NTUy5taXNzaW5nXTogIWRlc2NyaXB0aW9uXG4gICAgICB9IH0sIGRlc2NyaXB0aW9uIHx8IHN0cmluZ3MuZmllbGREZXNjcmlwdGlvbk5vdFNldCkpKTtcbiAgfVxuICByZW5kZXJGaWVsZFZhbHVlVHlwZSgpIHtcbiAgICBjb25zdCB7IHN0cmluZ3MsIHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHByb3BzO1xuICAgIGlmIChsYXllci50eXBlICE9PSBcImZlYXR1cmVcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgZmllbGRJbmZvIH0gPSBwcm9wcztcbiAgICBjb25zdCBmaWVsZFZhbHVlVHlwZSA9IHRoaXMuX2dldEZpZWxkVmFsdWVUeXBlQ2FtZWxDYXNlKGZpZWxkSW5mbyk7XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zZWN0aW9uIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnRpdGxlIH0sIHN0cmluZ3MuZmllbGRWYWx1ZVR5cGUpLCBoKFwiZGl2XCIsIHsgY2xhc3M6ICFmaWVsZFZhbHVlVHlwZSA/IENTUy5taXNzaW5nIDogbnVsbCB9LCBmaWVsZFZhbHVlVHlwZSA/IHN0cmluZ3MuZmllbGRWYWx1ZVR5cGVzW2ZpZWxkVmFsdWVUeXBlXSA6IHN0cmluZ3MuZmllbGRWYWx1ZVR5cGVOb3RTZXQpKSk7XG4gIH1cbiAgcmVuZGVyRmllbGRTYW1wbGVWYWx1ZSgpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIGNvbnN0IHsgb25lRmVhdHVyZVJlc3BvbnNlLCBvbmVGZWF0dXJlUmVzcG9uc2VTdGF0dXMsIHN0YXRpc3RpY3NTdGF0dXMsIHN0YXRpc3RpY3MsIHVuaXF1ZVZhbHVlc1N0YXR1cywgdW5pcXVlVmFsdWVzLCBzdHJpbmdzLCBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IGxheWVyLCBmaWVsZE5hbWUsIGZpZWxkSW5mbyB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBzdGF0aXN0aWNzOiBzdGF0U3RyaW5ncyB9ID0gc3RyaW5ncztcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKFtcImltYWdlcnlcIiwgXCJpbWFnZXJ5LXRpbGVcIl0uaW5kZXhPZihsYXllci50eXBlKSA+IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChsYXllci50eXBlICE9PSBcInN0cmVhbVwiICYmXG4gICAgICBbc2ltcGxlRmllbGRUeXBlcy5TVFJJTkcsIHNpbXBsZUZpZWxkVHlwZXMuT0lELCBzaW1wbGVGaWVsZFR5cGVzLkdVSURdLmluZGV4T2YodGhpcy5fZ2V0U3RhdGlzdGljc1R5cGUoZmllbGRJbmZvKSkgPiAtMSAmJlxuICAgICAgdW5pcXVlVmFsdWVzU3RhdHVzICE9PSBzdGF0dXMuRkFJTEVEKSB7XG4gICAgICAvLyB3ZSBzaG93IHRvcCB2YWx1ZXNcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAob25lRmVhdHVyZVJlc3BvbnNlU3RhdHVzID09PSBzdGF0dXMuU1VDQ0VTUykge1xuICAgICAgLy8gZmluZCBmaXJzdCB2YWxpZCB2YWx1ZSBlbnRyeVxuICAgICAgb25lRmVhdHVyZVJlc3BvbnNlLmZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgKHZhbHVlID09PSBudWxsICYmIGZlYXR1cmUuYXR0cmlidXRlc1tmaWVsZE5hbWVdICE9PSBudWxsKSkge1xuICAgICAgICAgIHZhbHVlID0gZmVhdHVyZS5hdHRyaWJ1dGVzW2ZpZWxkTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdGF0aXN0aWNzU3RhdHVzID09PSBzdGF0dXMuU1VDQ0VTUykge1xuICAgICAgLy8gdXNlIHN0YXRpc3RpY3MgbWluIHZhbHVlXG4gICAgICB2YWx1ZSA9IHN0YXRpc3RpY3MubWluO1xuICAgIH1cbiAgICBlbHNlIGlmICh1bmlxdWVWYWx1ZXNTdGF0dXMgPT09IHN0YXR1cy5TVUNDRVNTKSB7XG4gICAgICAvLyB1c2UgYSBub24tbnVsbCB2YWx1ZVxuICAgICAgdmFsdWUgPVxuICAgICAgICAoKF9iID0gKF9hID0gdW5pcXVlVmFsdWVzLnVuaXF1ZVZhbHVlSW5mb3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnZhbHVlKSB8fCAoKF9kID0gKF9jID0gdW5pcXVlVmFsdWVzLnVuaXF1ZVZhbHVlSW5mb3MpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY1sxXSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgY29kZWRWYWx1ZXMgPSBmaWVsZEluZm8uY29kZWRWYWx1ZXM7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGlmIChjb2RlZFZhbHVlcykge1xuICAgICAgICB2YWx1ZSA9ICgoX2UgPSBjb2RlZFZhbHVlcy5maW5kKChjb2RlZFZhbHVlKSA9PiB2YWx1ZSA9PT0gY29kZWRWYWx1ZS5jb2RlKSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLm5hbWUpIHx8IHZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5fZ2V0RGlzcGxheVN0cmluZyh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc2VjdGlvbiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy50aXRsZSB9LCBzdHJpbmdzLmZpZWxkU2FtcGxlVmFsdWUpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IChvbmVGZWF0dXJlUmVzcG9uc2VTdGF0dXMgPT09IHN0YXR1cy5GQUlMRUQgJiZcbiAgICAgICAgc3RhdGlzdGljc1N0YXR1cyA9PT0gc3RhdHVzLkZBSUxFRCAmJlxuICAgICAgICB1bmlxdWVWYWx1ZXNTdGF0dXMgPT09IHN0YXR1cy5GQUlMRUQpIHx8XG4gICAgICAgICFpc0RlZmluZWQodmFsdWUpXG4gICAgICAgID8gQ1NTLm1pc3NpbmdcbiAgICAgICAgOiBudWxsIH0sIG9uZUZlYXR1cmVSZXNwb25zZVN0YXR1cyA9PT0gc3RhdHVzLlNVQ0NFU1MgfHxcbiAgICAgIHN0YXRpc3RpY3NTdGF0dXMgPT09IHN0YXR1cy5TVUNDRVNTIHx8XG4gICAgICB1bmlxdWVWYWx1ZXNTdGF0dXMgPT09IHN0YXR1cy5TVUNDRVNTXG4gICAgICA/ICFpc0RlZmluZWQodmFsdWUpXG4gICAgICAgID8gc3RhdFN0cmluZ3MuYWxsTnVsbHNcbiAgICAgICAgOiBgJHt2YWx1ZX1gXG4gICAgICA6IG9uZUZlYXR1cmVSZXNwb25zZVN0YXR1cyA9PT0gc3RhdHVzLkZBSUxFRCAmJlxuICAgICAgICBzdGF0aXN0aWNzU3RhdHVzID09PSBzdGF0dXMuRkFJTEVEICYmXG4gICAgICAgIHVuaXF1ZVZhbHVlc1N0YXR1cyA9PT0gc3RhdHVzLkZBSUxFRFxuICAgICAgICA/IHN0cmluZ3MuZmllbGRTYW1wbGVOb3RBdmFpbGFibGVcbiAgICAgICAgOiBzdHJpbmdzLmZpZWxkU2FtcGxlUmV0cmlldmluZykpKTtcbiAgfVxuICByZW5kZXJGaWVsZEZvcm1hdCgpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHsgc3RyaW5ncywgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBmaWVsZE5hbWUsIGZpZWxkSW5mbywgbGF5ZXIgfSA9IHByb3BzO1xuICAgIGlmIChbXCJzaW5nbGVcIiwgXCJkb3VibGVcIiwgXCJsb25nXCJdLmluZGV4T2YoZmllbGRJbmZvLmxheWVyRmllbGQudHlwZSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcG9wdXBUZW1wbGF0ZSA9IGxheWVyLnBvcHVwVGVtcGxhdGU7XG4gICAgaWYgKHBvcHVwVGVtcGxhdGUgPT09IG51bGwgfHwgcG9wdXBUZW1wbGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zKSB7XG4gICAgICBjb25zdCBwb3BGaWVsZEluZm9zID0gKF9hID0gcG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmlsdGVyKChmaWVsZEluZm8pID0+IGZpZWxkSW5mby5maWVsZE5hbWUgPT09IGZpZWxkTmFtZSk7XG4gICAgICBpZiAocG9wRmllbGRJbmZvcyA9PT0gbnVsbCB8fCBwb3BGaWVsZEluZm9zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3BGaWVsZEluZm9zLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBwb3BGaWVsZEluZm8gPSBwb3BGaWVsZEluZm9zWzBdO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKChfYiA9IHBvcEZpZWxkSW5mbyA9PT0gbnVsbCB8fCBwb3BGaWVsZEluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcEZpZWxkSW5mby5mb3JtYXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5wbGFjZXMpKSB7XG4gICAgICAgICAgY29uc3QgbnVtID0gcG9wRmllbGRJbmZvLmZvcm1hdC5wbGFjZXM7XG4gICAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zZWN0aW9uIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnRpdGxlIH0sIHN0cmluZ3MuZmllbGREZWNpbWFsUGxhY2VzKSwgaChcImRpdlwiLCBudWxsLCBzdHJpbmdzLmZpZWxkTnVtRGVjaW1hbFBsYWNlcy5yZXBsYWNlKFwiJHtudW1iZXJ9XCIsIG51bS50b1N0cmluZygpKSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnNlY3Rpb24gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MudGl0bGUgfSwgc3RyaW5ncy5maWVsZERlY2ltYWxQbGFjZXMpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5taXNzaW5nIH0sIHN0cmluZ3MuZmllbGREZWNpbWFsUGxhY2VzTm90QXZhaWxhYmxlKSkpO1xuICB9XG4gIHJlbmRlckZpZWxkU3RhdGlzdGljcygpIHtcbiAgICBjb25zdCB7IHN0YXRpc3RpY3NTdGF0dXMsIHVuaXF1ZVZhbHVlc1N0YXR1cywgaGlkZVN0YXRpc3RpY3MsIHN0cmluZ3MsIHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbGF5ZXIsIGZpZWxkSW5mbyB9ID0gcHJvcHM7XG4gICAgaWYgKGhpZGVTdGF0aXN0aWNzKSB7XG4gICAgICB0aGlzLmFyY2dpc0ZpZWxkSW5mb0NvbXBsZXRlLmVtaXQoKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoW1wic3RyZWFtXCIsIFwiaW1hZ2VyeVwiLCBcImltYWdlcnktdGlsZVwiXS5pbmRleE9mKGxheWVyLnR5cGUpID4gLTEgfHxcbiAgICAgIFtcImxvbmdcIl0uaW5kZXhPZihmaWVsZEluZm8ubGF5ZXJGaWVsZC50eXBlKSA+IC0xKSB7XG4gICAgICAvLyBjYW4ndCBnZXQgc3RhdGlzdGljc1xuICAgICAgdGhpcy5hcmNnaXNGaWVsZEluZm9Db21wbGV0ZS5lbWl0KCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zZWN0aW9uIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnRpdGxlIH0sIHN0cmluZ3MuZmllbGRTdGF0aXN0aWNzKSwgIXN0YXRpc3RpY3NTdGF0dXMgfHxcbiAgICAgIHN0YXRpc3RpY3NTdGF0dXMgPT09IHN0YXR1cy5NSVNTSU5HIHx8XG4gICAgICBzdGF0aXN0aWNzU3RhdHVzID09PSBzdGF0dXMuSU5fUFJPR1JFU1MgPyAoaChcImRpdlwiLCB7IGtleTogXCJmaWVsZC1pbmZvLXN0YXRpc3RpY3MtY29udGVudFwiLCBjbGFzczogQ1NTLm1pc3NpbmcgfSwgc3RyaW5ncy5maWVsZFN0YXRpc3RpY3NSZXRyaWV2aW5nKSkgOiBzdGF0aXN0aWNzU3RhdHVzID09PSBzdGF0dXMuRkFJTEVEICYmIHVuaXF1ZVZhbHVlc1N0YXR1cyAhPT0gc3RhdHVzLlNVQ0NFU1MgPyAodGhpcy5yZW5kZXJOb1N0YXRpc3RpY3MoKSkgOiAoaChcImRpdlwiLCB7IGtleTogXCJmaWVsZC1pbmZvLXN0YXRpc3RpY3MtY29udGVudFwiLCByZWY6ICgpID0+IHRoaXMuYXJjZ2lzRmllbGRJbmZvQ29tcGxldGUuZW1pdCgpIH0sIHRoaXMucmVuZGVyU3RhdGlzdGljcygpKSkpKTtcbiAgfVxuICByZW5kZXJOb1N0YXRpc3RpY3MoKSB7XG4gICAgY29uc3QgeyBzdHJpbmdzIH0gPSB0aGlzO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGtleTogXCJmaWVsZC1pbmZvLXN0YXRpc3RpY3MtY29udGVudFwiLCByZWY6ICgpID0+IHRoaXMuYXJjZ2lzRmllbGRJbmZvQ29tcGxldGUuZW1pdCgpLCBjbGFzczogQ1NTLm1pc3NpbmcgfSwgc3RyaW5ncy5maWVsZFN0YXRpc3RpY3NOb3RBdmFpbGFibGUpKTtcbiAgfVxuICByZW5kZXJTdGF0aXN0aWNzKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBmaWVsZEluZm8gfSA9IHByb3BzO1xuICAgIHN3aXRjaCAodGhpcy5fZ2V0U3RhdGlzdGljc1R5cGUoZmllbGRJbmZvKSkge1xuICAgICAgY2FzZSBzaW1wbGVGaWVsZFR5cGVzLk5VTUJFUjpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTnVtYmVyU3RhdGlzdGljcygpO1xuICAgICAgY2FzZSBzaW1wbGVGaWVsZFR5cGVzLlNUUklORzpcbiAgICAgIGNhc2Ugc2ltcGxlRmllbGRUeXBlcy5PSUQ6XG4gICAgICBjYXNlIHNpbXBsZUZpZWxkVHlwZXMuR1VJRDpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU3RyaW5nU3RhdGlzdGljcygpO1xuICAgICAgY2FzZSBzaW1wbGVGaWVsZFR5cGVzLkRBVEU6XG4gICAgICBjYXNlIHNpbXBsZUZpZWxkVHlwZXMuREFURV9PTkxZOlxuICAgICAgY2FzZSBzaW1wbGVGaWVsZFR5cGVzLlRJTUVfT05MWTpcbiAgICAgIGNhc2Ugc2ltcGxlRmllbGRUeXBlcy5USU1FU1RBTVBfT0ZGU0VUOlxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJEYXRlU3RhdGlzdGljcygpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJlbmRlck51bWJlclN0YXRpc3RpY3MoKSB7XG4gICAgY29uc3QgeyBzdGF0aXN0aWNzLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgIGlmICghc3RhdGlzdGljcykge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTm9TdGF0aXN0aWNzKCk7XG4gICAgfVxuICAgIGNvbnN0IHsgc3RhdGlzdGljczogc3RhdFN0cmluZ3MgfSA9IHN0cmluZ3M7XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIG51bGwsIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3cgfSwgaChcImRpdlwiLCBudWxsLCBzdGF0U3RyaW5ncy5udW1iZXJPZlZhbHVlcyksIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmRhdGEgfSwgdGhpcy5fcHJpbnROdW1WYWx1ZShzdGF0aXN0aWNzLnRvdGFsQ291bnQpKSksIGlzRGVmaW5lZChzdGF0aXN0aWNzLnN1bSkgPyAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc3RhdGlzdGljc1JvdyB9LCBoKFwiZGl2XCIsIG51bGwsIHN0YXRTdHJpbmdzLnN1bU9mVmFsdWVzKSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MuZGF0YSB9LCB0aGlzLl9wcmludE51bVZhbHVlKHN0YXRpc3RpY3Muc3VtKSkpKSA6IG51bGwsIGlzRGVmaW5lZChzdGF0aXN0aWNzLm1pbikgPyAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc3RhdGlzdGljc1JvdyB9LCBoKFwiZGl2XCIsIG51bGwsIHN0YXRTdHJpbmdzLm1pbmltdW0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5kYXRhIH0sIHRoaXMuX3ByaW50TnVtVmFsdWUoc3RhdGlzdGljcy5taW4pKSkpIDogbnVsbCwgaXNEZWZpbmVkKHN0YXRpc3RpY3MubWF4KSA/IChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zdGF0aXN0aWNzUm93IH0sIGgoXCJkaXZcIiwgbnVsbCwgc3RhdFN0cmluZ3MubWF4aW11bSksIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmRhdGEgfSwgdGhpcy5fcHJpbnROdW1WYWx1ZShzdGF0aXN0aWNzLm1heCkpKSkgOiBudWxsLCBpc0RlZmluZWQoc3RhdGlzdGljcy5hdmcpID8gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3cgfSwgaChcImRpdlwiLCBudWxsLCBzdGF0U3RyaW5ncy5hdmVyYWdlKSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MuZGF0YSB9LCB0aGlzLl9wcmludE51bVZhbHVlKHN0YXRpc3RpY3MuYXZnKSkpKSA6IG51bGwsIGlzRGVmaW5lZChzdGF0aXN0aWNzLnN0ZGRldikgPyAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc3RhdGlzdGljc1JvdyB9LCBoKFwiZGl2XCIsIG51bGwsIHN0YXRTdHJpbmdzLnN0YW5kYXJkRGV2aWF0aW9uKSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MuZGF0YSB9LCB0aGlzLl9wcmludE51bVZhbHVlKHN0YXRpc3RpY3Muc3RkZGV2KSkpKSA6IG51bGwsIHRoaXMucmVuZGVyTnVsbFZhbHVlcygpKSk7XG4gIH1cbiAgcmVuZGVyU3RyaW5nU3RhdGlzdGljcygpIHtcbiAgICBjb25zdCB7IHN0YXRpc3RpY3MsIHVuaXF1ZVZhbHVlc1N0YXR1cywgc3RyaW5ncyB9ID0gdGhpcztcbiAgICBjb25zdCB7IHN0YXRpc3RpY3M6IHN0YXRTdHJpbmdzIH0gPSBzdHJpbmdzO1xuICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zdGF0aXN0aWNzUm93IH0sIGgoXCJkaXZcIiwgbnVsbCwgc3RhdFN0cmluZ3MubnVtYmVyT2ZWYWx1ZXMpLCB1bmlxdWVWYWx1ZXNTdGF0dXMgIT09IHN0YXR1cy5TVUNDRVNTID8gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLm1pc3NpbmcgfSwgXCItLVwiKSkgOiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1MuZGF0YSB9LCB0aGlzLl9wcmludE51bVZhbHVlKHN0YXRpc3RpY3MgPT09IG51bGwgfHwgc3RhdGlzdGljcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RhdGlzdGljcy50b3RhbENvdW50KSkpKSwgdGhpcy5yZW5kZXJOdWxsVmFsdWVzKCksIHRoaXMucmVuZGVyVG9wVmFsdWVzKCkpKTtcbiAgfVxuICByZW5kZXJEYXRlU3RhdGlzdGljcygpIHtcbiAgICAvLyBUT0RPIFVUQyBvZmZzZXRcbiAgICBjb25zdCB7IHN0YXRpc3RpY3MsIHZpZXcsIHByb3BzLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgZmllbGRJbmZvIH0gPSBwcm9wcztcbiAgICBpZiAoIXN0YXRpc3RpY3MpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlck5vU3RhdGlzdGljcygpO1xuICAgIH1cbiAgICBjb25zdCB7IHN0YXRpc3RpY3M6IHN0YXRTdHJpbmdzIH0gPSBzdHJpbmdzO1xuICAgIGNvbnN0IGRhdGVSYW5nZSA9IHN0YXRpc3RpY3MubWF4IC0gc3RhdGlzdGljcy5taW47XG4gICAgY29uc3QgeWVhcnMgPSBNYXRoLmZsb29yKGRhdGVSYW5nZSAvIDMxNTM2MDAwMDAwKTtcbiAgICBsZXQgbW9udGhzID0gTWF0aC5mbG9vcigoZGF0ZVJhbmdlIC0geWVhcnMgKiAzMTUzNjAwMDAwMCkgLyAyNjI4MDAwMDAwKTtcbiAgICBsZXQgZGF5cyA9IE1hdGguY2VpbCgoZGF0ZVJhbmdlIC0gbW9udGhzICogMjYyODAwMDAwMCkgLyA4NjQwMDAwMCk7XG4gICAgaWYgKGRheXMgPj0gMzApIHtcbiAgICAgIG1vbnRocyArPSAxO1xuICAgICAgZGF5cyA9IDA7XG4gICAgfVxuICAgIGxldCB0aW1lU3BhbiA9IHllYXJzID09PSAxXG4gICAgICA/IHN0YXRTdHJpbmdzLnRpbWVTcGFuT3B0aW9ucy55ZWFyXG4gICAgICA6IHllYXJzID4gMVxuICAgICAgICA/IHN0YXRTdHJpbmdzLnRpbWVTcGFuT3B0aW9ucy55ZWFycy5yZXBsYWNlKFwiJHt5ZWFyc31cIiwgeWVhcnMudG9TdHJpbmcoKSlcbiAgICAgICAgOiBcIlwiO1xuICAgIHRpbWVTcGFuICs9IHllYXJzID4gMCAmJiAobW9udGhzID4gMCB8fCBkYXlzID4gMCkgPyBcIiwgXCIgOiBcIlwiO1xuICAgIHRpbWVTcGFuICs9XG4gICAgICBtb250aHMgPT09IDFcbiAgICAgICAgPyBzdGF0U3RyaW5ncy50aW1lU3Bhbk9wdGlvbnMubW9udGhcbiAgICAgICAgOiBtb250aHMgPiAxXG4gICAgICAgICAgPyBzdGF0U3RyaW5ncy50aW1lU3Bhbk9wdGlvbnMubW9udGhzLnJlcGxhY2UoXCIke21vbnRoc31cIiwgbW9udGhzLnRvU3RyaW5nKCkpXG4gICAgICAgICAgOiBcIlwiO1xuICAgIHRpbWVTcGFuICs9IG1vbnRocyA+IDAgJiYgZGF5cyA+IDAgPyBcIiwgXCIgOiBcIlwiO1xuICAgIHRpbWVTcGFuICs9XG4gICAgICBkYXlzID09PSAxXG4gICAgICAgID8gc3RhdFN0cmluZ3MudGltZVNwYW5PcHRpb25zLmRheVxuICAgICAgICA6IGRheXMgPiAxXG4gICAgICAgICAgPyBzdGF0U3RyaW5ncy50aW1lU3Bhbk9wdGlvbnMuZGF5cy5yZXBsYWNlKFwiJHtkYXlzfVwiLCBkYXlzLnRvU3RyaW5nKCkpXG4gICAgICAgICAgOiBcIlwiO1xuICAgIGNvbnN0IHNob3dTdGF0cyA9IGZpZWxkSW5mby5zaW1wbGVGaWVsZFR5cGUgIT09IHNpbXBsZUZpZWxkVHlwZXMuVElNRVNUQU1QX09GRlNFVCB8fFxuICAgICAgdmlldy50aW1lWm9uZSAhPT0gXCJ1bmtub3duXCI7XG4gICAgY29uc3QgaXNUaW1lT25seSA9IGZpZWxkSW5mby5zaW1wbGVGaWVsZFR5cGUgPT09IHNpbXBsZUZpZWxkVHlwZXMuVElNRV9PTkxZO1xuICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zdGF0aXN0aWNzUm93IH0sIGgoXCJkaXZcIiwgbnVsbCwgc3RhdFN0cmluZ3MubnVtYmVyT2ZWYWx1ZXMpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5kYXRhIH0sIHRoaXMuX3ByaW50TnVtVmFsdWUoc3RhdGlzdGljcyA9PT0gbnVsbCB8fCBzdGF0aXN0aWNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0aXN0aWNzLnRvdGFsQ291bnQpKSksIHNob3dTdGF0cyAmJiBpc0RlZmluZWQoc3RhdGlzdGljcy5taW4pID8gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3cgfSwgaChcImRpdlwiLCBudWxsLCBpc1RpbWVPbmx5ID8gc3RhdFN0cmluZ3MubWluaW11bVRpbWUgOiBzdGF0U3RyaW5ncy5taW5pbXVtRGF0ZSksIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmRhdGEgfSwgYCR7dGhpcy5fZ2V0RGlzcGxheVN0cmluZyhzdGF0aXN0aWNzLm1pbil9YCkpKSA6IG51bGwsIHNob3dTdGF0cyAmJiBpc0RlZmluZWQoc3RhdGlzdGljcy5tYXgpID8gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3cgfSwgaChcImRpdlwiLCBudWxsLCBpc1RpbWVPbmx5ID8gc3RhdFN0cmluZ3MubWF4aW11bVRpbWUgOiBzdGF0U3RyaW5ncy5tYXhpbXVtRGF0ZSksIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmRhdGEgfSwgYCR7dGhpcy5fZ2V0RGlzcGxheVN0cmluZyhzdGF0aXN0aWNzLm1heCl9YCkpKSA6IG51bGwsIHNob3dTdGF0cyAmJiBpc0RlZmluZWQoc3RhdGlzdGljcy5hdmcpID8gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3cgfSwgaChcImRpdlwiLCBudWxsLCBpc1RpbWVPbmx5ID8gc3RhdFN0cmluZ3MuYXZlcmFnZVRpbWUgOiBzdGF0U3RyaW5ncy5hdmVyYWdlRGF0ZSksIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmRhdGEgfSwgYCR7dGhpcy5fZ2V0RGlzcGxheVN0cmluZyhzdGF0aXN0aWNzLmF2Zyl9YCkpKSA6IG51bGwsIHNob3dTdGF0cyAmJlxuICAgICAgIWlzVGltZU9ubHkgJiZcbiAgICAgIGlzRGVmaW5lZChzdGF0aXN0aWNzLm1pbikgJiZcbiAgICAgIGlzRGVmaW5lZChzdGF0aXN0aWNzLm1heCkgJiZcbiAgICAgIGRhdGVSYW5nZSA+IDAgPyAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc3RhdGlzdGljc1JvdyB9LCBoKFwiZGl2XCIsIG51bGwsIHN0YXRTdHJpbmdzLnRpbWVzcGFuKSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MuZGF0YSB9LCB0aW1lU3BhbikpKSA6IG51bGwsIHRoaXMucmVuZGVyTnVsbFZhbHVlcygpKSk7XG4gIH1cbiAgcmVuZGVyVG9wVmFsdWVzKCkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB7IHVuaXF1ZVZhbHVlcywgdW5pcXVlVmFsdWVzU3RhdHVzLCBzdHJpbmdzLCBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IGZpZWxkSW5mbyB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBzdGF0aXN0aWNzOiBzdGF0U3RyaW5ncyB9ID0gc3RyaW5ncztcbiAgICBpZiAoKF9hID0gdW5pcXVlVmFsdWVzID09PSBudWxsIHx8IHVuaXF1ZVZhbHVlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdW5pcXVlVmFsdWVzLnVuaXF1ZVZhbHVlSW5mb3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGluZm9zID0gdW5pcXVlVmFsdWVzLnVuaXF1ZVZhbHVlSW5mb3M7XG4gICAgICBpbmZvcy5zb3J0KChhLCBiKSA9PiAoYS5jb3VudCA8IGIuY291bnQgPyAxIDogYS5jb3VudCA+IGIuY291bnQgPyAtMSA6IDApKTtcbiAgICAgIGNvbnN0IGNvZGVkVmFsdWVzID0gZmllbGRJbmZvLmNvZGVkVmFsdWVzO1xuICAgICAgY29uc3QgdmFsdWVzID0gaW5mb3NcbiAgICAgICAgLmZpbHRlcigoaW5mbykgPT4gaW5mby52YWx1ZSAhPT0gbnVsbClcbiAgICAgICAgLmZpbHRlcigoaW5mbywgaWR4KSA9PiBpbmZvICYmIGlkeCA8IDEwKVxuICAgICAgICAubWFwKChpbmZvKSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGluZm8udmFsdWU7XG4gICAgICAgIGlmIChjb2RlZFZhbHVlcykge1xuICAgICAgICAgIGNvZGVkVmFsdWVzLmZvckVhY2goKGNvZGVWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBjb2RlVmFsdWUuY29kZSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGNvZGVWYWx1ZS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdGhpcy5fZ2V0RGlzcGxheVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zdGF0aXN0aWNzUm93IH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmRhdGEgfSwgYCR7dmFsdWV9YCksIGgoXCJkaXZcIiwgeyBjbGFzczogYCR7Q1NTLmRhdGF9ICR7Q1NTLmNvdW50fWAgfSwgdGhpcy5fcHJpbnROdW1WYWx1ZShpbmZvLmNvdW50KSkpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCF2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIG51bGwsIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3dUb3BWYWx1ZXMgfSwgaChcImRpdlwiLCBudWxsLCBpbmZvcy5sZW5ndGggPiAxMCA/IHN0YXRTdHJpbmdzLnRvcFRlblZhbHVlcyA6IHN0YXRTdHJpbmdzLnRvcFZhbHVlcyksIGgoXCJkaXZcIiwgbnVsbCwgc3RhdFN0cmluZ3MuY291bnQpKSwgdmFsdWVzKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIG51bGwsIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3dUb3BWYWx1ZXMgfSwgaChcImRpdlwiLCBudWxsLCBzdGF0U3RyaW5ncy50b3BWYWx1ZXMpLCBoKFwiZGl2XCIsIG51bGwsIHN0YXRTdHJpbmdzLmNvdW50KSksIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnN0YXRpc3RpY3NSb3cgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MubWlzc2luZyB9LCB1bmlxdWVWYWx1ZXNTdGF0dXMgPT09IHN0YXR1cy5GQUlMRURcbiAgICAgICAgPyBzdHJpbmdzLmZpZWxkVW5pcXVlVmFsdWVzTm90QXZhaWxhYmxlXG4gICAgICAgIDogc3RyaW5ncy5maWVsZFNhbXBsZVJldHJpZXZpbmcpKSkpO1xuICAgIH1cbiAgfVxuICByZW5kZXJOdWxsVmFsdWVzKCkge1xuICAgIGNvbnN0IHsgc3RhdGlzdGljcywgdW5pcXVlVmFsdWVzLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgc3RhdGlzdGljczogc3RhdFN0cmluZ3MgfSA9IHN0cmluZ3M7XG4gICAgbGV0IGNvdW50ID0gc3RhdGlzdGljcyA9PT0gbnVsbCB8fCBzdGF0aXN0aWNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0aXN0aWNzLm51bGxjb3VudDtcbiAgICBpZiAoIWlzRGVmaW5lZChjb3VudCkgJiYgdW5pcXVlVmFsdWVzKSB7XG4gICAgICBjb25zdCBpbmZvcyA9IHVuaXF1ZVZhbHVlcy51bmlxdWVWYWx1ZUluZm9zO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmZvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBpbmZvID0gaW5mb3NbaV07XG4gICAgICAgIGlmIChpbmZvLnZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgY291bnQgPSBpbmZvLmNvdW50O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc3RhdGlzdGljc1JvdyB9LCBoKFwiZGl2XCIsIG51bGwsIHN0YXRTdHJpbmdzLm51bWJlck9mTnVsbHMpLCAhaXNEZWZpbmVkKGNvdW50KSA/IChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5taXNzaW5nIH0sIFwiLS1cIikpIDogKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmRhdGEgfSwgYCR7bmV3IE51bWJlcihjb3VudCkudG9Mb2NhbGVTdHJpbmcoKX1gKSkpKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgUHJpdmF0ZSBtZXRob2RzXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIF9nZXRGaWVsZFR5cGVMYWJlbChmaWVsZFR5cGUpIHtcbiAgICBjb25zdCB7IHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgY29uc3QgZmllbGRUeXBlcyA9IHN0cmluZ3MuZmllbGRUeXBlcztcbiAgICBzd2l0Y2ggKGZpZWxkVHlwZSkge1xuICAgICAgY2FzZSBcInNtYWxsLWludGVnZXJcIjpcbiAgICAgICAgcmV0dXJuIGZpZWxkVHlwZXMuc21hbGxJbnRlZ2VyO1xuICAgICAgY2FzZSBcImJpZy1pbnRlZ2VyXCI6XG4gICAgICAgIHJldHVybiBmaWVsZFR5cGVzLmJpZ0ludGVnZXI7XG4gICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICByZXR1cm4gZmllbGRUeXBlcy5pbnRlZ2VyO1xuICAgICAgY2FzZSBcInNpbmdsZVwiOlxuICAgICAgICByZXR1cm4gZmllbGRUeXBlcy5zaW5nbGU7XG4gICAgICBjYXNlIFwiZG91YmxlXCI6XG4gICAgICAgIHJldHVybiBmaWVsZFR5cGVzLmRvdWJsZTtcbiAgICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICAgIHJldHVybiBmaWVsZFR5cGVzLmxvbmc7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHJldHVybiBmaWVsZFR5cGVzLnN0cmluZztcbiAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgIHJldHVybiBmaWVsZFR5cGVzLmRhdGU7XG4gICAgICBjYXNlIFwiZGF0ZS1vbmx5XCI6XG4gICAgICAgIHJldHVybiBmaWVsZFR5cGVzLmRhdGVPbmx5O1xuICAgICAgY2FzZSBcInRpbWUtb25seVwiOlxuICAgICAgICByZXR1cm4gZmllbGRUeXBlcy50aW1lT25seTtcbiAgICAgIGNhc2UgXCJ0aW1lc3RhbXAtb2Zmc2V0XCI6XG4gICAgICAgIHJldHVybiBmaWVsZFR5cGVzLnRpbWVzdGFtcE9mZnNldDtcbiAgICAgIGNhc2UgXCJvaWRcIjpcbiAgICAgICAgcmV0dXJuIGZpZWxkVHlwZXMub2lkO1xuICAgICAgY2FzZSBcImd1aWRcIjpcbiAgICAgICAgcmV0dXJuIGZpZWxkVHlwZXMuZ3VpZDtcbiAgICAgIGNhc2UgXCJnbG9iYWwtaWRcIjpcbiAgICAgICAgcmV0dXJuIGZpZWxkVHlwZXMuZ2xvYmFsSWQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmllbGRUeXBlcy5zdHJpbmc7XG4gICAgfVxuICB9XG4gIF9nZXRTdGF0aXN0aWNzVHlwZShmaWVsZEluZm8pIHtcbiAgICAvLyBcImNvdW50LW9yLWFtb3VudFwiLFwicGVyY2VudGFnZS1vci1yYXRpb1wiLFwibWVhc3VyZW1lbnRcIixcInVuaXF1ZS1pZGVudGlmaWVyXCIsXCJjb29yZGluYXRlXCIsXCJiaW5hcnlcIlxuICAgIC8vIFwibmFtZS1vci10aXRsZVwiLFwidHlwZS1vci1jYXRlZ29yeVwiLFwiZGVzY3JpcHRpb25cIixcImxvY2F0aW9uLW9yLXBsYWNlLW5hbWVcIixcIm9yZGVyZWQtb3ItcmFua2VkXCIsXCJkYXRlLWFuZC10aW1lXCJcbiAgICBzd2l0Y2ggKGZpZWxkSW5mby5sYXllckZpZWxkLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzbWFsbC1pbnRlZ2VyXCI6XG4gICAgICBjYXNlIFwiYmlnLWludGVnZXJcIjpcbiAgICAgIGNhc2UgXCJpbnRlZ2VyXCI6XG4gICAgICBjYXNlIFwic2luZ2xlXCI6XG4gICAgICBjYXNlIFwiZG91YmxlXCI6IHtcbiAgICAgICAgaWYgKGZpZWxkSW5mby5jb2RlZFZhbHVlcykge1xuICAgICAgICAgIHJldHVybiBzaW1wbGVGaWVsZFR5cGVzLlNUUklORztcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGZpZWxkSW5mby5sYXllckZpZWxkLnZhbHVlVHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJuYW1lLW9yLXRpdGxlXCI6XG4gICAgICAgICAgY2FzZSBcInR5cGUtb3ItY2F0ZWdvcnlcIjpcbiAgICAgICAgICBjYXNlIFwiZGVzY3JpcHRpb25cIjpcbiAgICAgICAgICBjYXNlIFwibG9jYXRpb24tb3ItcGxhY2UtbmFtZVwiOlxuICAgICAgICAgIGNhc2UgXCJvcmRlcmVkLW9yLXJhbmtlZFwiOlxuICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgICAgIC8vY2FzZSBcImRhdGUtYW5kLXRpbWVcIjpcbiAgICAgICAgICAgIHJldHVybiBzaW1wbGVGaWVsZFR5cGVzLlNUUklORztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHNpbXBsZUZpZWxkVHlwZXMuTlVNQkVSO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHJldHVybiBzaW1wbGVGaWVsZFR5cGVzLlNUUklORztcbiAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgIHJldHVybiBzaW1wbGVGaWVsZFR5cGVzLkRBVEU7XG4gICAgICBjYXNlIFwidGltZXN0YW1wLW9mZnNldFwiOlxuICAgICAgICByZXR1cm4gc2ltcGxlRmllbGRUeXBlcy5USU1FU1RBTVBfT0ZGU0VUO1xuICAgICAgY2FzZSBcImRhdGUtb25seVwiOlxuICAgICAgICByZXR1cm4gc2ltcGxlRmllbGRUeXBlcy5EQVRFX09OTFk7XG4gICAgICBjYXNlIFwidGltZS1vbmx5XCI6XG4gICAgICAgIHJldHVybiBzaW1wbGVGaWVsZFR5cGVzLlRJTUVfT05MWTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzaW1wbGVGaWVsZFR5cGVzLlNUUklORztcbiAgICB9XG4gIH1cbiAgX2dldEZpZWxkVmFsdWVUeXBlQ2FtZWxDYXNlKGZpZWxkKSB7XG4gICAgc3dpdGNoIChmaWVsZC5sYXllckZpZWxkLnZhbHVlVHlwZSkge1xuICAgICAgY2FzZSBcImNvdW50LW9yLWFtb3VudFwiOlxuICAgICAgICByZXR1cm4gXCJjb3VudE9yQW1vdW50XCI7XG4gICAgICBjYXNlIFwicGVyY2VudGFnZS1vci1yYXRpb1wiOlxuICAgICAgICByZXR1cm4gXCJwZXJjZW50YWdlT3JSYXRpb1wiO1xuICAgICAgY2FzZSBcInVuaXF1ZS1pZGVudGlmaWVyXCI6XG4gICAgICAgIHJldHVybiBcInVuaXF1ZUlkZW50aWZpZXJcIjtcbiAgICAgIGNhc2UgXCJuYW1lLW9yLXRpdGxlXCI6XG4gICAgICAgIHJldHVybiBcIm5hbWVPclRpdGxlXCI7XG4gICAgICBjYXNlIFwidHlwZS1vci1jYXRlZ29yeVwiOlxuICAgICAgICByZXR1cm4gXCJ0eXBlT3JDYXRlZ29yeVwiO1xuICAgICAgY2FzZSBcImxvY2F0aW9uLW9yLXBsYWNlLW5hbWVcIjpcbiAgICAgICAgcmV0dXJuIFwibG9jYXRpb25PclBsYWNlTmFtZVwiO1xuICAgICAgY2FzZSBcIm9yZGVyZWQtb3ItcmFua2VkXCI6XG4gICAgICAgIHJldHVybiBcIm9yZGVyZWRPclJhbmtlZFwiO1xuICAgICAgY2FzZSBcImRhdGUtYW5kLXRpbWVcIjpcbiAgICAgICAgcmV0dXJuIFwiZGF0ZUFuZFRpbWVcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmaWVsZC5sYXllckZpZWxkLnZhbHVlVHlwZTtcbiAgICB9XG4gIH1cbiAgX2dldERpc3BsYXlTdHJpbmcodmFsdWUpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgZmllbGRJbmZvIH0gPSBwcm9wcztcbiAgICBzd2l0Y2ggKGZpZWxkSW5mby5zaW1wbGVGaWVsZFR5cGUpIHtcbiAgICAgIGNhc2Ugc2ltcGxlRmllbGRUeXBlcy5EQVRFOlxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RGF0ZVN0cmluZyh2YWx1ZSk7XG4gICAgICBjYXNlIHNpbXBsZUZpZWxkVHlwZXMuVElNRVNUQU1QX09GRlNFVDpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRpbWVzdGFtcE9mZnNldFN0cmluZyh2YWx1ZSk7XG4gICAgICBjYXNlIHNpbXBsZUZpZWxkVHlwZXMuREFURV9PTkxZOlxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RGF0ZU9ubHlTdHJpbmcodmFsdWUpO1xuICAgICAgY2FzZSBzaW1wbGVGaWVsZFR5cGVzLlRJTUVfT05MWTpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRpbWVPbmx5U3RyaW5nKHZhbHVlKTtcbiAgICAgIGNhc2Ugc2ltcGxlRmllbGRUeXBlcy5OVU1CRVI6XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXROdW1iZXJTdHJpbmcodmFsdWUpO1xuICAgICAgY2FzZSBzaW1wbGVGaWVsZFR5cGVzLkdVSUQ6XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRHdWlkU3RyaW5nKHZhbHVlKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIHN0cmluZywgb2lkLCBnbG9iYWwtaWRcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlfWA7XG4gICAgfVxuICB9XG4gIF9nZXREYXRlU3RyaW5nKHZhbHVlKSB7XG4gICAgY29uc3QgeyBtb2R1bGVzLCB2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICh2aWV3LnRpbWVab25lID09PSBcInVua25vd25cIikge1xuICAgICAgcmV0dXJuIG1vZHVsZXMuaW50bC5mb3JtYXREYXRlKHZhbHVlLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG1vZHVsZXMuaW50bC5jb252ZXJ0RGF0ZUZvcm1hdFRvSW50bE9wdGlvbnMoXCJzaG9ydC1kYXRlLXNob3J0LXRpbWVcIikpLCB7IHRpbWVab25lOiBcInV0Y1wiLCB0aW1lWm9uZU5hbWU6IFwic2hvcnRPZmZzZXRcIiB9KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8ga25vd24gaXNzdWVzIHdpdGggZm9ybWF0dGluZyBpdC1DSFxuICAgICAgcmV0dXJuIG1vZHVsZXMuaW50bC5mb3JtYXREYXRlKHZhbHVlLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG1vZHVsZXMuaW50bC5jb252ZXJ0RGF0ZUZvcm1hdFRvSW50bE9wdGlvbnMoXCJzaG9ydC1kYXRlLXNob3J0LXRpbWVcIikpLCB7IHRpbWVab25lOiB2aWV3LnRpbWVab25lIH0pKTtcbiAgICB9XG4gIH1cbiAgX2dldFRpbWVzdGFtcE9mZnNldFN0cmluZyh2YWx1ZSkge1xuICAgIC8qXG4gICAgY29uc3QgdGltZXN0YW1wID0gXCIyMDIzLTAzLTE5VDE2OjAwOjAwLjEyMy0wMTowMFwiO1xuICAgIGNvbnNvbGUubG9nKFwidGltZXN0YW1wXCIsIHRpbWVzdGFtcCk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBcImxvY2FsIFRpbWVcIixcbiAgICAgIGludGwuZm9ybWF0VGltZXN0YW1wKHRpbWVzdGFtcCwgaW50bC5jb252ZXJ0RGF0ZUZvcm1hdFRvSW50bE9wdGlvbnMoXCJzaG9ydC1kYXRlLXNob3J0LXRpbWVcIikpXG4gICAgKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIFwibWFwVmlldyBUaW1lIChleGNlcHQgdW5rbm93bilcIixcbiAgICAgIGludGwuZm9ybWF0VGltZXN0YW1wKHRpbWVzdGFtcCwge1xuICAgICAgICAuLi5pbnRsLmNvbnZlcnREYXRlRm9ybWF0VG9JbnRsT3B0aW9ucyhcInNob3J0LWRhdGUtc2hvcnQtdGltZVwiKSxcbiAgICAgICAgdGltZVpvbmU6IHZpZXcudGltZVpvbmUsXG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBcIlVUQyBUaW1lIChtYXBWaWV3IHRpbWUgdW5rbm93bilcIixcbiAgICAgIGludGwuZm9ybWF0VGltZXN0YW1wKHRpbWVzdGFtcCwge1xuICAgICAgICAuLi5pbnRsLmNvbnZlcnREYXRlRm9ybWF0VG9JbnRsT3B0aW9ucyhcInNob3J0LWRhdGUtc2hvcnQtdGltZVwiKSxcbiAgICAgICAgdGltZVpvbmU6IFwidXRjXCIsXG4gICAgICAgIHRpbWVab25lTmFtZTogXCJzaG9ydE9mZnNldFwiXG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBcIlJhd1wiLFxuICAgICAgaW50bC5mb3JtYXRUaW1lc3RhbXAodGltZXN0YW1wLCB7XG4gICAgICAgIC4uLmludGwuY29udmVydERhdGVGb3JtYXRUb0ludGxPcHRpb25zKFwic2hvcnQtZGF0ZS1zaG9ydC10aW1lXCIpLFxuICAgICAgICB0aW1lWm9uZU5hbWU6IFwic2hvcnRPZmZzZXRcIlxuICAgICAgfSlcbiAgICApO1xuICAgICovXG4gICAgY29uc3QgeyBtb2R1bGVzLCB2aWV3IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIHJhdyB2YWx1ZSBmcm9tIGxheWVyXG4gICAgICBpZiAodmlldy50aW1lWm9uZSA9PT0gXCJ1bmtub3duXCIpIHtcbiAgICAgICAgcmV0dXJuIG1vZHVsZXMuaW50bC5mb3JtYXRUaW1lc3RhbXAodmFsdWUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbW9kdWxlcy5pbnRsLmNvbnZlcnREYXRlRm9ybWF0VG9JbnRsT3B0aW9ucyhcInNob3J0LWRhdGUtc2hvcnQtdGltZVwiKSksIHsgdGltZVpvbmU6IFwidXRjXCIsIHRpbWVab25lTmFtZTogXCJzaG9ydE9mZnNldFwiIH0pKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbW9kdWxlcy5pbnRsLmZvcm1hdFRpbWVzdGFtcCh2YWx1ZSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBtb2R1bGVzLmludGwuY29udmVydERhdGVGb3JtYXRUb0ludGxPcHRpb25zKFwic2hvcnQtZGF0ZS1zaG9ydC10aW1lXCIpKSwgeyB0aW1lWm9uZTogdmlldy50aW1lWm9uZSB9KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gZS5nLiBVTklYIHRpbWVzdGFtcCBmcm9tIHN0YXRpc3RpY3MgY2FsbFxuICAgICAgcmV0dXJuIHRoaXMuX2dldERhdGVTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgfVxuICBfZ2V0RGF0ZU9ubHlTdHJpbmcodmFsdWUpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgbW9kdWxlcyB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIG1vZHVsZXMuaW50bC5mb3JtYXREYXRlT25seSh2YWx1ZSwgbW9kdWxlcy5pbnRsLmNvbnZlcnREYXRlRm9ybWF0VG9JbnRsT3B0aW9ucyhcInNob3J0LWRhdGVcIikpO1xuICB9XG4gIF9nZXRUaW1lT25seVN0cmluZyh2YWx1ZSkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBtb2R1bGVzIH0gPSBwcm9wcztcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbW9kdWxlcy5pbnRsLmZvcm1hdFRpbWVPbmx5KHZhbHVlLCBtb2R1bGVzLmludGwuY29udmVydERhdGVGb3JtYXRUb0ludGxPcHRpb25zKFwic2hvcnQtZGF0ZS1sb25nLXRpbWVcIikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIFVOSVggdGltZXN0YW1wXG4gICAgICByZXR1cm4gbW9kdWxlcy5pbnRsLmZvcm1hdERhdGUodmFsdWUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbW9kdWxlcy5pbnRsLmNvbnZlcnREYXRlRm9ybWF0VG9JbnRsT3B0aW9ucyhcImxvbmctdGltZVwiKSksIHsgdGltZVpvbmU6IFwidXRjXCIgfSkpO1xuICAgIH1cbiAgfVxuICBfZ2V0R3VpZFN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5zdGFydHNXaXRoKFwie1wiKSA/IHZhbHVlIDogYHske3ZhbHVlfX1gO1xuICB9XG4gIF9nZXROdW1iZXJTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5tb2R1bGVzLmludGwuZm9ybWF0TnVtYmVyKHZhbHVlKTtcbiAgfVxuICBfcHJpbnROdW1WYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gdGhpcy5fZ2V0TnVtYmVyU3RyaW5nKE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwKSA6IGAtLWA7XG4gIH1cbiAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0ZpZWxkSW5mby5zdHlsZSA9IGFyY2dpc0ZpZWxkSW5mb0NzcztcblxuZXhwb3J0IHsgQXJjZ2lzRmllbGRJbmZvIGFzIGFyY2dpc19maWVsZF9pbmZvIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tMTNmNWIwMGMuanMnO1xuaW1wb3J0IHsgbCBhcyBsYW5ndWFnZU1hcCB9IGZyb20gJy4vbGFuZ3VhZ2VVdGlsLTIyMjU4YzkwLmpzJztcbmltcG9ydCB7IGEgYXMgZ2V0QXNzZXRQYXRoIH0gZnJvbSAnLi9pbmRleC05MmViYjM5Ni5qcyc7XG5cbi8vIGh0dHBzOi8vbWVkaXVtLmNvbS9zdGVuY2lsLXRyaWNrcy9pbXBsZW1lbnRpbmctaW50ZXJuYXRpb25hbGlzYXRpb24taTE4bi13aXRoLXN0ZW5jaWwtNWU2NTU5NTU0MTE3XG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UoZWxlbWVudCkge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgY29uc3QgY2xvc2VzdEVsZW1lbnQgPSAoX2EgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWxlbWVudCwgXCJbbGFuZ11cIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYyA9IChfYiA9IGVsZW1lbnQuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kb2N1bWVudEVsZW1lbnQ7XG4gIC8vIGxhbmd1YWdlIHNldCBieSB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBvciBicm93c2VyLiBkZWZhdWx0cyB0byBlbmdsaXNoLlxuICBjb25zdCBsYW5nID0gKChjbG9zZXN0RWxlbWVudCA9PT0gbnVsbCB8fCBjbG9zZXN0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2VzdEVsZW1lbnQubGFuZykgfHwgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5sYW5ndWFnZSkgfHwgXCJlblwiKS50b0xvd2VyQ2FzZSgpO1xuICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcpKSB7XG4gICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nKTtcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBcInJ1LVJVXCIgbWFwcyB0byBcInJ1XCIgdXNlIGNhc2VcbiAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcuc2xpY2UoMCwgMikpKSB7XG4gICAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcuc2xpY2UoMCwgMikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBcImVuXCI7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2VJbnRsKGVsZW1lbnQpIHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIC8vIGl0J3MgT0sgaWYgd2UgZG9uJ3QgaGF2ZSB0aGUgNCBsZXR0ZXIgbGFuZ3VhZ2UgZmlsZSBmb3IgaXRcbiAgLy8gNCBsZXR0ZXIgbGFuZ3VhZ2UgY29kZSBuZWVkZWQgZm9yIGZvcm1hdHRpbmcgbnVtYmVyc1xuICBjb25zdCBjbG9zZXN0RWxlbWVudCA9IChfYSA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbGVtZW50LCBcIltsYW5nXVwiKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9jID0gKF9iID0gZWxlbWVudC5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub3duZXJEb2N1bWVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmRvY3VtZW50RWxlbWVudDtcbiAgLy8gbGFuZ3VhZ2Ugc2V0IGJ5IHRoZSBjYWxsaW5nIGFwcGxpY2F0aW9uIG9yIGJyb3dzZXIuIGRlZmF1bHRzIHRvIGVuZ2xpc2guXG4gIGNvbnN0IGxhbmcgPSAoKGNsb3Nlc3RFbGVtZW50ID09PSBudWxsIHx8IGNsb3Nlc3RFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zZXN0RWxlbWVudC5sYW5nKSB8fCAobmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLmxhbmd1YWdlKSB8fCBcImVuXCIpLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZykpIHtcbiAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcpO1xuICB9XG4gIGVsc2Uge1xuICAgIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZy5zbGljZSgwLCAyKSkpIHtcbiAgICAgIC8vIHdlIHN1cHBvcnQgdGhlIDIgbGV0dGVyIGNvZGVkIGxhbmd1YWdlXG4gICAgICAvLyBlLmcuIGl0LUNIIHZzIGl0XG4gICAgICByZXR1cm4gbGFuZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gXCJlblwiO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZmV0Y2hMb2NhbGVTdHJpbmdzRm9yQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGxvY2FsZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZldGNoKGdldEFzc2V0UGF0aChgLi4vYXJjZ2lzLWFwcC1hc3NldHMvaTE4bi8ke2NvbXBvbmVudE5hbWV9LmkxOG4uJHtsb2NhbGV9Lmpzb25gKSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0Lm9rKVxuICAgICAgICByZXNvbHZlKHJlc3VsdC5qc29uKCkpO1xuICAgICAgZWxzZVxuICAgICAgICByZWplY3QoKTtcbiAgICB9LCAoKSA9PiByZWplY3QoKSk7XG4gIH0pO1xufVxuY29uc3Qgc3RyaW5nQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGZldGNoTG9jYWxlU3RyaW5nc0Zyb21DYWNoZShjb21wb25lbnROYW1lLCBsb2NhbGUpIHtcbiAgY29uc3QgaWQgPSBgJHtjb21wb25lbnROYW1lfSR7bG9jYWxlfWA7XG4gIGlmICghc3RyaW5nQ2FjaGVbaWRdKSB7XG4gICAgc3RyaW5nQ2FjaGVbaWRdID0gZmV0Y2hMb2NhbGVTdHJpbmdzRm9yQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGxvY2FsZSk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ0NhY2hlW2lkXTtcbn1cbi8qKlxuICogR2V0IHN0cmluZ3MgYW5kIGxhbmd1YWdlIGNvZGVzLlxuICogVGhpcyBtZXRob2QgcmV0dXJucyAyIGxhbmd1YWdlIGNvZGVzLlxuICogVGhlIGZpcnN0IG9uZSByZXR1cm5zIGEgY29kZSB0aGF0J3MgYWxzbyBzdXBwb3J0ZWQgYXMgYSBsYW5ndWFnZSBmaWxlLlxuICogVGhlIHNlY29uZCBvbmUgcmV0dXJucyBhIGNvZGUgd2hlcmUgdGhlcmUgaXMgc3VwcG9ydCBmb3IgdGhlIGZpcnN0IDIgbGV0dGVycyBvZiB0aGUgY29kZSBhcyBwYXJ0IG9mIGEgbGFuZ3VhZ2UgZmlsZSxcbiAqIGJ1dCB3aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgNCBsZXR0ZXIgY29kZSBmcm9tIHRoZSBwYWdlLlxuICogRS5nLiBGb3IgXCJpdC1jaFwiIGl0IHdpbGwgcmV0dXJuIFwiaXRcIiBhcyB0aGUgZmlyc3QgbGFuZ3VhZ2UgY29kZSBhbmQgXCJpdC1jaFwiIGFzIHRoZSBzZWNvbmQuXG4gKiBUaGUgc2Vjb25kIG9uZSBpcyByZXF1aXJlZCBmb3IgZXNyaS5pbnRsLnNldExvY2FsZSgpIHRvIGdldCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nLlxuICpcbiAqIElmIGEgdGFnTmFtZSBpcyBwcm92aWRlZCBpdCB3aWxsIG92ZXJ3aXRlIHRoZSBlbGVtZW50J3MgdGFnTmFtZVxuICpcbiAqICBAcmV0dXJuIFsgc3RyaW5ncywgZmlyc3QgbGFuZ3VhZ2UgY29kZSwgc2Vjb25kIGxhbmd1YWdlIGNvZGVdXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MoZWxlbWVudCwgdGFnTmFtZSkge1xuICBjb25zdCBjb21wb25lbnROYW1lID0gdGFnTmFtZSB8fCBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgY29tcG9uZW50TGFuZ3VhZ2UgPSBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UoZWxlbWVudCk7XG4gIGNvbnN0IGNvbXBvbmVudExhbmd1YWdlSW50bCA9IGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZUludGwoZWxlbWVudCk7XG4gIGxldCBzdHJpbmdzO1xuICB0cnkge1xuICAgIHN0cmluZ3MgPSBhd2FpdCBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgY29tcG9uZW50TGFuZ3VhZ2UpO1xuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgY29uc29sZS53YXJuKGBubyBsb2NhbGUgZm9yICR7Y29tcG9uZW50TmFtZX0gKCR7Y29tcG9uZW50TGFuZ3VhZ2V9KSBsb2FkaW5nIGRlZmF1bHQgbG9jYWxlIGVuLmApO1xuICAgIHN0cmluZ3MgPSBhd2FpdCBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgXCJlblwiKTtcbiAgfVxuICByZXR1cm4gW3N0cmluZ3MsIGNvbXBvbmVudExhbmd1YWdlLCBjb21wb25lbnRMYW5ndWFnZUludGxdO1xufVxuXG5leHBvcnQgeyBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UgYXMgYSwgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=