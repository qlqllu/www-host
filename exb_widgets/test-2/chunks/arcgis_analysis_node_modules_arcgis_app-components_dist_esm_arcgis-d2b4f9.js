"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-d2b4f9"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layers-and-tables-summary-popup.entry.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layers-and-tables-summary-popup.entry.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_layers_and_tables_summary_popup: () => (/* binding */ ArcgisLayersAndTablesSummaryPopup)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./telemetry-2874e433.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/telemetry-2874e433.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _services_ce8cb0ef_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services-ce8cb0ef.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-ce8cb0ef.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./url-f3b82cc7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-f3b82cc7.js");
/* harmony import */ var _storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./storage-d7f5822e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js");
/* harmony import */ var _ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ags-68d4ae20.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
















const layersAndTablesStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_2__.c)({});
const layersAndTablesState = layersAndTablesStore.state;

const arcgisLayersAndTablesSummaryPopupCss = ":host{max-width:100%}arcgis-layers-and-tables-summary:not(.hydrated){visibility:hidden}.popover-content{width:380px;min-height:6rem;background-color:var(--calcite-ui-background)}.skeleton{padding:0.5rem;margin:1rem;margin-bottom:3rem;animation:pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;border:1px solid var(--calcite-ui-border-2)}.skeleton-content{display:flex}.skeleton-left,.skeleton-right{width:1rem;height:1rem;background-color:var(--calcite-ui-border-3)}.skeleton-main{flex:1 1 0%;margin-left:1rem;margin-right:1rem}.skeleton-title{height:1rem;background-color:var(--calcite-ui-border-2)}.skeleton-subtitle{height:1rem;margin-top:0.25rem;background-color:var(--calcite-ui-border-3)}@keyframes pulse{0%,100%{opacity:1}50%{opacity:0.5}}.button{transition-property:all;padding:0;outline:2px solid transparent;outline-offset:2px;border-style:none;cursor:pointer;max-width:100%;color:inherit;background:transparent;font-family:inherit;font-size:inherit;line-height:1.5}.button:focus{outline:2px solid var(--calcite-ui-brand);outline-offset:4px}.button--border{padding-left:0.5rem;padding-right:0.5rem;padding-top:0.25rem;padding-bottom:0.25rem;border:1px solid var(--calcite-ui-foreground-3)}.button--border:focus{outline-offset:0}.button-text{pointer-events:none;display:flex}.button--icon{vertical-align:-3px;-webkit-margin-start:0.25rem;margin-inline-start:0.25rem}";

const ArcgisLayersAndTablesSummaryPopup = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.handleClick = async () => {
      var _a;
      const { layers, item } = this;
      (_a = this.button) === null || _a === void 0 ? void 0 : _a.focus();
      if (!layers) {
        this.loading = true;
      }
      if (!layersAndTablesState[item.id]) {
        layersAndTablesState[item.id] = this.fetchServiceInfo();
      }
      const response = await layersAndTablesState[item.id];
      if (response.error) {
        this.error = this.i18n.error;
        if (response.error.code === "serviceNotExist") {
          this.error.message = this.i18n.error.noServiceMessage;
        }
      }
      if (response.result) {
        this.sublayers = (0,_services_ce8cb0ef_js__WEBPACK_IMPORTED_MODULE_6__.s)(response.result, layers);
      }
      else {
        this.sublayers = layers;
      }
      this.loading = false;
      return;
    };
    this.handleWindowClick = ({ target }) => {
      if (this.el.contains(target)) {
        return;
      }
      else {
        this.popoverNode.open = false;
      }
    };
    this.handleKeyPress = ({ key }) => {
      switch (key) {
        case "Esc":
        case "Escape":
          if (this.popoverNode) {
            this.popoverNode.open = false;
          }
          break;
      }
    };
    this.api = 4;
    this.config = undefined;
    this.user = undefined;
    this.item = undefined;
    this.portal = undefined;
    this.layers = undefined;
    this.searchTerm = undefined;
    this.border = undefined;
    this.tooltip = undefined;
    this.telemetry = undefined;
    this.button = undefined;
    this.loading = true;
    this.error = undefined;
    this.sublayers = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
    this.i18n = locale[0];
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_3__.c.api = this.api;
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_3__.c.portal = this.portal;
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_3__.c.config = this.config;
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_3__.c.user = this.user;
    if (!this.layers) {
      this.loading = true;
    }
  }
  async fetchServiceInfo() {
    const { item, portal, layers } = this;
    const response = await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__.m)((0,_services_ce8cb0ef_js__WEBPACK_IMPORTED_MODULE_6__.f)({ item, portal, layers, isSecure: false }), 500);
    return response;
  }
  render() {
    const { i18n, portal, user, item, handleClick, handleKeyPress, loading, searchTerm, error, tooltip, telemetry } = this;
    const layers = this.sublayers || this.layers;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { onFocusout: (e) => {
        if (!e.relatedTarget || this.el.contains(e.relatedTarget)) {
          return;
        }
        else {
          this.popoverNode.open = false;
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover-manager", { autoClose: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", Object.assign({ class: {
        button: true,
        "button--border": this.border
      }, ref: (el) => (this.button = el), onClick: handleClick, onTouchStart: handleClick, onKeyPress: handleKeyPress }, (tooltip ? { title: tooltip } : {})), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "button-text" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "caret-down", scale: "s", class: "button--icon" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { ref: (el) => (this.popoverNode = el), label: i18n.layersAndTables, pointerDisabled: true, referenceElement: this.button, closable: true, class: "popover", placement: "bottom", overlayPositioning: "fixed", heading: i18n.layersAndTables, onCalcitePopoverOpen: () => {
        var _a;
        (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.logEvent({
          category: "preview popup",
          action: "click",
          pageName: (0,_telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_4__.g)(),
          pageUrl: window.location.href
        });
        window.addEventListener("click", this.handleWindowClick);
      }, onCalcitePopoverClose: (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__.d)(() => {
        var _a;
        (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.logEvent({
          category: "preview popup",
          action: "close",
          pageName: (0,_telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_4__.g)(),
          pageUrl: window.location.href
        });
        window.removeEventListener("click", this.handleWindowClick);
      }, 200) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "popover-content" }, loading ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "skeleton" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "skeleton-content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "skeleton-left" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "skeleton-main" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "skeleton-title" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "skeleton-subtitle" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "skeleton-right" })))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layers-and-tables-summary", { portal: portal, user: user, item: item, layers: layers, showMatched: searchTerm && !!this.layers, error: error,
      // @ts-ignore
      loading: !this.sublayers, telemetry: telemetry, onLayersAndTablesFocusEnd: () => {
        this.popoverNode.open = false;
      } })))))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayersAndTablesSummaryPopup.style = arcgisLayersAndTablesSummaryPopupCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-ce8cb0ef.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-ce8cb0ef.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fetchLayer),
/* harmony export */   f: () => (/* binding */ fetchFeatureServiceInfo),
/* harmony export */   s: () => (/* binding */ setMatched)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-f3b82cc7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-f3b82cc7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




function parseSublayer(sublayer, layers, isTable) {
  var _a, _b;
  return {
    description: sublayer.description,
    fieldAliases: (_a = sublayer.fields) === null || _a === void 0 ? void 0 : _a.map((field) => field.alias),
    fields: sublayer.fields,
    geometryType: isTable ? "table" : sublayer.geometryType,
    id: sublayer.id,
    title: sublayer.name,
    type: sublayer.type,
    matched: (_b = layers === null || layers === void 0 ? void 0 : layers.find((layer) => layer.id === sublayer.id)) === null || _b === void 0 ? void 0 : _b.matched
  };
}
function serverRequest(url, isSecure) {
  const { config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  const hosted = (0,_url_f3b82cc7_js__WEBPACK_IMPORTED_MODULE_2__.a)(url);
  const requestOptions = Object.assign(Object.assign({ useProxy: false, timeout: config.isMultiTenant === false ? 60000 : 5000, addSSL: hosted }, (isSecure ? {} : { addTokenManually: false })), { usePost: true, disableIdentityLookup: true });
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, requestOptions, "post");
}
function getErrorCode(error) {
  var _a, _b;
  return (error === null || error === void 0 ? void 0 : error.code) || ((_b = (_a = error === null || error === void 0 ? void 0 : error.details) === null || _a === void 0 ? void 0 : _a.raw) === null || _b === void 0 ? void 0 : _b.code);
}
function serviceDoesNotExist(error) {
  const code = getErrorCode(error);
  return [404, 500].includes(code) || (error === null || error === void 0 ? void 0 : error.message) === "Invalid URL";
}
function shouldRetryWithToken(isSecure, error) {
  const code = getErrorCode(error);
  return !isSecure && ((code === 499 && (error === null || error === void 0 ? void 0 : error.message) === "Token Required") || code === 403) && !!_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
}
async function fetchLayer(portal, id, url, isSecure) {
  const errorResult = { error: { code: "unhandledError" } };
  try {
    try {
      const result = await serverRequest(`${url}/${id}`, isSecure);
      return { result };
    }
    catch (error) {
      if (shouldRetryWithToken(isSecure, error)) {
        return fetchLayer(portal, id, url, true);
      }
      if (serviceDoesNotExist(error)) {
        errorResult.error.code = "serviceNotExist";
      }
      return errorResult;
    }
  }
  catch (error) {
    return errorResult;
  }
}
function filterLayers(layers, matchedLayers, data, isTable) {
  var _a, _b;
  const hasTables = data === null || data === void 0 ? void 0 : data.tables;
  const hasDefinedDataLayers = ((_a = data === null || data === void 0 ? void 0 : data.layers) === null || _a === void 0 ? void 0 : _a.length) > 0 || hasTables;
  const ids = [...((data === null || data === void 0 ? void 0 : data.layers) || []).map((layer) => layer.id), ...(_b = ((data === null || data === void 0 ? void 0 : data.tables) || [])) === null || _b === void 0 ? void 0 : _b.map((table) => table.id)];
  // if data has defined layers, only use layers in data, not the whole service (WebGIS/arcgis-portal-app#39768)
  // if data has defined layers, but no defined tables, allow all tables through (WebGIS/arcgis-portal-app#40067)
  const sublayers = (layers || [])
    .filter(({ id, type }) => !hasDefinedDataLayers || (type === "Table" && !hasTables) || ids.includes(id))
    .map((layer) => parseSublayer(layer, matchedLayers, isTable));
  return sublayers;
}
async function fetchLayers({ serviceInfo, item, layers, isSecure, data }) {
  var _a, _b;
  const { url } = item;
  if (!((_a = serviceInfo.layers) === null || _a === void 0 ? void 0 : _a.length) && !((_b = serviceInfo.tables) === null || _b === void 0 ? void 0 : _b.length) && (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.fields)) {
    return { result: [parseSublayer(serviceInfo, layers)] };
  }
  try {
    const { layers: sublayers, tables } = await serverRequest(`${url}/layers`, isSecure);
    return {
      result: [...filterLayers(sublayers, layers, data), ...filterLayers(tables, layers, data, true)].sort((a, b) => a.id - b.id)
    };
  }
  catch (error) {
    return { error: { code: "unhandledError" } };
  }
}
function setMatched(sublayers, matchedLayers) {
  return sublayers.map((sublayer) => {
    var _a;
    return Object.assign(Object.assign({}, sublayer), { matched: (_a = matchedLayers === null || matchedLayers === void 0 ? void 0 : matchedLayers.find((layer) => layer.id === sublayer.id)) === null || _a === void 0 ? void 0 : _a.matched });
  });
}
async function fetchFeatureServiceInfo({ item, portal, layers, isSecure, data, retry }) {
  var _a;
  const errorResult = { error: { code: "unhandledError" } };
  try {
    if (!data && !retry) {
      try {
        const token = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.h)(portal);
        const tokenParam = token ? `&token=${token}` : "";
        const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${item.id}/data?f=json${tokenParam}`;
        // Use fetch instead of request to stop redirects (WebGIS/arcgis-portal-app#40164)
        const response = await fetch(url);
        const text = await response.text();
        if (text) {
          data = JSON.parse(text);
        }
        if (data === null || data === void 0 ? void 0 : data.error) {
          // Treat this expired account as if the service doesn't exist (WebGIS/arcgis-portal-app#40163)
          if (data.error.code === 403 && ((_a = data.error) === null || _a === void 0 ? void 0 : _a.messageCode) === "SB_0006") {
            errorResult.error.code = "serviceNotExist";
            return errorResult;
          }
        }
      }
      catch (error) {
        // if we can't get item data, just move on
        data = null;
      }
    }
    if (item.type === "Feature Collection") {
      if (data === null || data === void 0 ? void 0 : data.layers) {
        return {
          result: data.layers.map(({ layerDefinition }, id) => {
            var _a;
            return ({
              description: "",
              fields: layerDefinition.fields,
              fieldAliases: (_a = layerDefinition.fields) === null || _a === void 0 ? void 0 : _a.map((field) => field.alias),
              geometryType: layerDefinition.geometryType,
              type: layerDefinition.type,
              id,
              matched: false,
              title: layerDefinition.name
            });
          })
        };
      }
    }
    try {
      const { url } = item;
      const serviceInfo = await serverRequest(url, isSecure);
      return fetchLayers({
        serviceInfo,
        item,
        layers,
        isSecure,
        data
      });
    }
    catch (error) {
      if (shouldRetryWithToken(isSecure, error)) {
        return fetchFeatureServiceInfo({ item, portal, layers, data, isSecure: true });
      }
      if (serviceDoesNotExist(error)) {
        errorResult.error.code = "serviceNotExist";
      }
      return errorResult;
    }
  }
  catch (error) {
    return errorResult;
  }
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/telemetry-2874e433.js":
/*!***************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/telemetry-2874e433.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getPageName)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
function getPageName() {
  const { hash, pathname } = window.location;
  if (pathname.includes("group.html")) {
    return "group page";
  }
  if (pathname.includes("search.html")) {
    return "search result page";
  }
  switch (hash) {
    case "#favorites":
      return "favorites";
    case "#groups":
      return "my groups content";
    case "#organization":
      return "my org content";
    case "#livingAtlas":
      return "living atlas";
    default:
      return "my content";
  }
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,