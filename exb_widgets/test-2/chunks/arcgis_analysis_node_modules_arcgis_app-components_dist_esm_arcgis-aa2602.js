"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-aa2602"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-aggregation_8.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-aggregation_8.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_aggregation: () => (/* binding */ ArcgisAggregation),
/* harmony export */   arcgis_aggregation_binning: () => (/* binding */ ArcgisAggregationBinning),
/* harmony export */   arcgis_aggregation_clustering: () => (/* binding */ ArcgisAggregationClustering),
/* harmony export */   arcgis_aggregation_field: () => (/* binding */ ArcgisAggregationField),
/* harmony export */   arcgis_aggregation_fields: () => (/* binding */ ArcgisAggregationFields),
/* harmony export */   arcgis_aggregation_info_popover: () => (/* binding */ ArcgisAggregationInfoPopover),
/* harmony export */   arcgis_aggregation_symbol_styler_popover: () => (/* binding */ ArcgisAggregationSymbolStylerPopover),
/* harmony export */   arcgis_aggregation_tile: () => (/* binding */ ArcgisAggregationTile)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */









// clustering
const clusteringRadiusMinVal = 9; // 12px
const clusteringRadiusMaxVal = 90; // 120px
const clusteringRadiusInitialVal = 37.5; // 50px
const clusteringSizeMinVal = 9; // 12px
const clusteringSizeMaxVal = 90; // 120px
const clusteringSizeMaxInitialVal = 37.5; // 50px
var AggregationType;
(function (AggregationType) {
  AggregationType["CLUSTERING"] = "clustering";
  AggregationType["CHART_CLUSTERING"] = "chartClustering";
  AggregationType["BINNING"] = "binning";
})(AggregationType || (AggregationType = {}));
/**
 * Returns a parent element with that tag name or class name
 * @param node - starting node
 * @param tagName - tag name to find up the tree
 * @param className - class name to find up the tree
 */
function findParentNode(node, tagName, className) {
  if ((tagName && (node === null || node === void 0 ? void 0 : node.tagName) === tagName.toUpperCase()) || (className && (node === null || node === void 0 ? void 0 : node.classList.contains(className)))) {
    return node;
  }
  else {
    let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
    while (parentNode) {
      if ((tagName && parentNode.tagName === tagName.toUpperCase()) ||
        (className && parentNode.classList.contains(className))) {
        return parentNode;
      }
      else if (parentNode.tagName === "BODY") {
        break;
      }
      else {
        parentNode = parentNode.parentElement;
      }
    }
  }
  return;
}
function getStatsTypeString(statisticType, strings) {
  switch (statisticType) {
    case "sum":
      return strings.fields.sum;
    case "avg":
      return strings.fields.mean;
    case "min":
      return strings.fields.min;
    case "max":
      return strings.fields.max;
    case "stddev":
      return strings.fields.stdDev;
    case "mode":
      return strings.fields.mode;
    case "var":
      return strings.fields.var;
    case "count":
      return strings.fields.count;
    default:
      return "";
  }
}
function getAggregationType(layer) {
  const featureReduction = layer.featureReduction;
  if (!featureReduction) {
    return undefined;
  }
  else if (featureReduction.type === "binning") {
    return "binning";
  }
  else if (featureReduction.type === "cluster") {
    if (isPieChartRenderer(layer)) {
      return "pie-chart";
    }
    return "cluster";
  }
}
function isRendererAutoGenerated(layer) {
  var _a, _b;
  const featureReduction = layer.featureReduction;
  return !(featureReduction === null || featureReduction === void 0 ? void 0 : featureReduction.renderer) || ((_b = (_a = featureReduction === null || featureReduction === void 0 ? void 0 : featureReduction.renderer) === null || _a === void 0 ? void 0 : _a.authoringInfo) === null || _b === void 0 ? void 0 : _b.isAutoGenerated);
}
function isPieChartRenderer(layer) {
  var _a, _b;
  const featureReduction = layer.featureReduction;
  return (featureReduction.renderer &&
    featureReduction.renderer.type === "pie-chart" &&
    !((_b = (_a = featureReduction === null || featureReduction === void 0 ? void 0 : featureReduction.renderer) === null || _a === void 0 ? void 0 : _a.authoringInfo) === null || _b === void 0 ? void 0 : _b.isAutoGenerated));
}

function isSupportedSymbol(sym) {
  return ["simple-fill", "simple-marker", "simple-line", "picture-marker", "cim"].indexOf(sym.type) > -1;
}
function getDefaultSymbol(modules) {
  /*
  "symbol":{
    "type":"esriSMS",
    "color":[227,139,79,255],
    "angle":0,
    "xoffset":0,
    "yoffset":0,
    "size":9,
    "style":"esriSMSCircle",
    "outline":{
      "type":"esriSLS",
      "color":[92,92,92,64],
      "width":0.75,
      "style":"esriSLSSolid"
    }
  }
  */
  const { SimpleLineSymbol, SimpleMarkerSymbol, Color } = modules;
  const outlineSym = new SimpleLineSymbol({
    style: "solid",
    color: new Color([92, 92, 92, 64]),
    width: 1
  });
  const symbol = new SimpleMarkerSymbol({
    style: "circle",
    size: 6.75,
    outline: outlineSym,
    color: new Color([227, 139, 79, 255])
  });
  return symbol;
}
function hasSymbolOutline(sym) {
  var _a;
  return sym.type === "picture-marker" ? false : sym.type === "cim" ? false : !!((_a = sym.outline) === null || _a === void 0 ? void 0 : _a.color);
}
function isPictureMarker(sym, modules) {
  if (sym.type === "picture-marker") {
    return true;
  }
  else if (sym.type === "cim" && !isFillOnlyCIM(sym, modules)) {
    return true;
  }
  return false;
}
function isFillOnlyCIM(sym, modules) {
  const { cimSymbolUtils } = modules;
  return !!cimSymbolUtils.getCIMSymbolColor(sym);
}
function getSymbolColor(symbol, modules) {
  var _a, _b;
  const { cimSymbolUtils, Color } = modules;
  return (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "cim"
    ? Color.fromJSON((_a = cimSymbolUtils.getCIMSymbolColor(symbol)) === null || _a === void 0 ? void 0 : _a.toJSON())
    : (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "simple-marker" && ["x", "cross"].indexOf(symbol === null || symbol === void 0 ? void 0 : symbol.style) > -1
      ? (_b = symbol === null || symbol === void 0 ? void 0 : symbol.outline) === null || _b === void 0 ? void 0 : _b.color
      : symbol === null || symbol === void 0 ? void 0 : symbol.color;
}
function getSymbolSize(sym, modules) {
  const { cimSymbolUtils } = modules;
  if (sym.type === "cim") {
    return cimSymbolUtils.getCIMSymbolSize(sym);
  }
  else if (sym.size) {
    return sym.size;
  }
  return sym.width;
}
function adjustAlpha(color, alpha) {
  color.a = alpha;
  return color;
}

function getLayerNumberOrStringFields(layer) {
  return layer.fields.filter((field) => ["small-integer", "big-integer", "integer", "single", "double", "long", "number", "string"].indexOf(field.type) > -1);
}
function getLayerField(layer, fieldName) {
  return fieldName && layer.fields.find((field) => field.name === fieldName);
}
function hasFieldAlready(layer, fieldName, statisticType) {
  var _a;
  const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
  return !!((_a = featureReduction.fields) === null || _a === void 0 ? void 0 : _a.find((fi /* __esri.AggregateField */) => fi.onStatisticField === fieldName && fi.statisticType === statisticType));
}
/*
 * no more stats options available for this field
 */
function isFieldDone(layer, fieldName) {
  const field = getLayerField(layer, fieldName);
  const types = getStatsTypes(field);
  return !types.find((type) => !hasFieldAlready(layer, fieldName, type));
}
function getStatsTypes(field) {
  return field.type === "string" ? ["mode"] : ["sum", "avg", "min", "max", /* "var", "stddev", */ "mode"];
}
function addPopupField(aggregateField, layer, modules) {
  // don't know where to store the alias for this field otherwise
  /* if (aggregateField.isAutoGenerated && aggregateField.statisticType === "mode") {
    // don't add this field generated for the renderer
    return;
  } */
  const { FieldInfo } = modules;
  const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
  const { popupTemplate } = featureReduction;
  popupTemplate.fieldInfos = popupTemplate.fieldInfos || [];
  const fieldInfo = popupTemplate.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
  if (!fieldInfo) {
    popupTemplate.fieldInfos.push(new FieldInfo({
      fieldName: aggregateField.name,
      label: aggregateField.alias,
      isEditable: false,
      visible: true,
      format: getFormat(aggregateField, layer)
    }));
  } // else fieldInfo is already there
}
function getPopupFieldInfo(layer, fieldName) {
  const featureReduction = layer.featureReduction;
  return featureReduction.popupTemplate.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === fieldName);
}
function getFormat(aggregateField, layer) {
  const statsField = aggregateField.onStatisticField;
  const statsExpr = aggregateField.onStatisticExpression;
  const isSum = aggregateField.statisticType === "sum";
  const isCount = aggregateField.statisticType === "count";
  const field = getLayerField(layer, statsField);
  const isInt = isCount ||
    (statsExpr && isSum) ||
    (field && ["small-integer", "big-integer", "integer", "long", "number"].indexOf(field.type) > -1);
  const isDouble = field && ["single", "double"].indexOf(field.type) > -1;
  return isDouble
    ? {
      digitSeparator: true,
      places: 1
    }
    : isInt
      ? {
        digitSeparator: true
      }
      : undefined;
}

const arcgisAggregationCss = ":host{height:100%}.flow{height:100%}.panel{height:100%}.toggle{background-color:white;padding:15px 10px 5px 10px}";

const ArcgisAggregation = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationStyleClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationStyleClick", 7);
    this.arcgisAggregationClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationClose", 7);
    this.arcgisAggregationChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationChanged", 7);
    this.arcgisAggregationError = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationError", 7);
    this.tileNodes = [];
    this.lastFeatureReduction = [];
    this.view = undefined;
    this.layer = undefined;
    this.portal = undefined;
    this.config = undefined;
    this.hideLayerTitle = false;
    this.options = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Set focus on component
   */
  async setFocus() {
    var _a;
    (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [strings, currentLanguage] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement);
    this.strings = strings;
    this.locale = currentLanguage;
    const [popupClusters, popupUtils, binLevel, clusterLabelCreator, binLabelCreator, AggregateField, FieldInfo, pieChartCreator, colorCreator, SimpleRenderer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/smartMapping/popup/clusters",
      "esri/support/popupUtils",
      "esri/smartMapping/heuristics/binLevel",
      "esri/smartMapping/labels/clusters",
      "esri/smartMapping/labels/bins",
      "esri/layers/support/AggregateField",
      "esri/popup/FieldInfo",
      "esri/smartMapping/renderers/pieChart",
      "esri/smartMapping/renderers/color",
      "esri/renderers/SimpleRenderer"
    ]);
    this.modules = {
      popupClusters,
      popupUtils,
      binLevel,
      clusterLabelCreator,
      binLabelCreator,
      AggregateField,
      FieldInfo,
      pieChartCreator,
      colorCreator,
      SimpleRenderer
    };
    const { view, layer } = this;
    this.props = {
      view,
      layer
    };
  }
  componentDidLoad() {
    var _a;
    const { props, modules } = this;
    const { layer } = props;
    const { AggregateField } = modules;
    const featureReduction = layer.featureReduction;
    if (featureReduction && !((_a = featureReduction.fields) === null || _a === void 0 ? void 0 : _a.length)) {
      // we need at least one field
      const aggregateField = new AggregateField({
        name: "aggregateCount",
        onStatisticField: undefined,
        alias: "aggregateCount",
        statisticType: "count",
        visible: true
      });
      layer.featureReduction.fields = [aggregateField];
    }
    requestAnimationFrame(() => this.flowItemNode.setFocus());
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { layer, options } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: "flow", dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement), ref: (node) => (this.flowNode = node) }, layer.featureEffect ? this.renderMsg() : this.renderContent(), (options === AggregationType.CLUSTERING ||
      options === AggregationType.CHART_CLUSTERING) &&
      this.renderClusteringOptions(), options === AggregationType.BINNING && this.renderBinningOptions())));
  }
  renderContent() {
    var _a, _b, _c;
    const { props, hideLayerTitle, config, flowItemNode, tileNodes, strings } = this;
    const { layer } = props;
    const featureReduction = layer.featureReduction;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    const generalProps = { flowItemNode, strings, config };
    const { renderer } = layer;
    const isUniqueValue = renderer.type === "unique-value";
    const isMultiFieldTypes = isUniqueValue && !!renderer.field2;
    const isHeatmap = renderer.type === "heatmap";
    const usesArcade = !!renderer.valueExpression;
    const isClassedColor = renderer.type === "class-breaks" && ((_a = renderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.type) === "class-breaks-color";
    const infosCount = isUniqueValue
      ? (_b = renderer.uniqueValueInfos) === null || _b === void 0 ? void 0 : _b.length
      : isClassedColor
        ? (_c = renderer.classBreakInfos) === null || _c === void 0 ? void 0 : _c.length
        : 0;
    const allowClustering = !isHeatmap && !isMultiFieldTypes;
    const allowChart = (isUniqueValue || isClassedColor) && infosCount <= 10 && !isMultiFieldTypes && !usesArcade;
    const aggregationType = getAggregationType(layer);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.aggregation, description: !hideLayerTitle ? layer.title : undefined, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.C.rtl]: rtl
      }, closable: true, onCalciteFlowItemClose: () => {
        this.arcgisAggregationClose.emit();
      }, ref: (node) => {
        this.flowItemNode = node;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "toggle" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, strings.enableAggregation, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: !!featureReduction, label: strings.enableAggregation, onCalciteSwitchChange: (event) => this.handleToggleClustering(event), ref: (node) => (this.switchNode = node) }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, allowClustering && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-tile", { props: Object.assign({ title: strings.clustering, imagePath: (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-aggregation-thumbnails/clustering.jpg`), moreInfo: strings.info.clustering, helpId: "120003927" }, generalProps), selected: aggregationType === "cluster", ref: (node) => (tileNodes["cluster"] = node), onArcgisAggregationTileSelect: async () => {
        await this.enableAggregation("cluster");
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      }, onArcgisAggregationTileOptions: () => {
        this.options = AggregationType.CLUSTERING;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } })), allowChart && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-tile", { props: Object.assign({ title: strings.chartClustering, imagePath: (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-aggregation-thumbnails/chartClustering.jpg`), moreInfo: strings.info.chartClustering, helpId: "120003927" }, generalProps), selected: aggregationType === "pie-chart", ref: (node) => (tileNodes["pie-chart"] = node), onArcgisAggregationTileSelect: async () => {
        await this.enableAggregation("pie-chart");
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      }, onArcgisAggregationTileOptions: () => {
        this.options = AggregationType.CHART_CLUSTERING;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } })), ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-tile", { props: Object.assign({ title: strings.binning, imagePath: (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-aggregation-thumbnails/binning.jpg`), moreInfo: strings.info.binning, helpId: "120003926" }, generalProps), selected: aggregationType === "binning", ref: (node) => (tileNodes["binning"] = node), onArcgisAggregationTileSelect: async () => {
        await this.enableAggregation("binning");
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      }, onArcgisAggregationTileOptions: () => {
        this.options = AggregationType.BINNING;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } })))));
  }
  renderMsg() {
    const { layer, hideLayerTitle, strings } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.aggregation, description: !hideLayerTitle ? layer.title : undefined, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.C.rtl]: rtl
      }, closable: true, onCalciteFlowItemClose: () => {
        this.arcgisAggregationClose.emit();
      }, ref: (node) => {
        this.flowItemNode = node;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { "non-dismissible": true }, strings.cluster.leNotSupportedMessage)));
  }
  renderClusteringOptions() {
    const { props, hideLayerTitle, portal, config, flowNode, strings, locale } = this;
    const { layer, view } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-clustering", { view: view, layer: layer, portal: portal, config: config, flowNode: flowNode, hideLayerTitle: hideLayerTitle, strings: strings, currentLanguage: locale, onArcgisAggregationClusteringChange: () => {
        this.arcgisAggregationChanged.emit();
      }, onArcgisAggregationClusteringDismissedChange: () => { }, onCalcitePanelBackClick: () => {
        this.options = undefined;
      } }));
  }
  renderBinningOptions() {
    const { props, hideLayerTitle, portal, config, flowNode, strings, locale } = this;
    const { layer, view } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-binning", { view: view, layer: layer, portal: portal, config: config, flowNode: flowNode, hideLayerTitle: hideLayerTitle, strings: strings, currentLanguage: locale, onArcgisAggregationBinningChange: () => this.arcgisAggregationChanged.emit(), onArcgisAggregationBinningStyleClick: () => this.arcgisAggregationStyleClick.emit(), onArcgisAggregationBinningDismissedChange: () => { }, onCalcitePanelBackClick: () => {
        this.options = undefined;
      } }));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  async handleToggleClustering(event) {
    if (event.currentTarget.checked) {
      await this.enableAggregation("default");
    }
    else {
      this.disableAggregation();
    }
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
  }
  async enableAggregation(type) {
    const { props, flowItemNode } = this;
    const { layer } = props;
    const { renderer } = layer;
    const isUniqueValue = renderer.type === "unique-value";
    const isMultiFieldTypes = isUniqueValue && !!renderer.field2;
    const isHeatmap = renderer.type === "heatmap";
    if (type === "default" &&
      this.lastFeatureReductionType &&
      this.lastFeatureReduction[this.lastFeatureReductionType]) {
      layer.featureReduction = this.lastFeatureReduction[this.lastFeatureReductionType];
      layer.featureReduction = layer.featureReduction.clone();
      this.arcgisAggregationChanged.emit();
    }
    else {
      if (type === "default") {
        if (!isHeatmap && !isMultiFieldTypes) {
          type = "cluster";
        }
        else {
          type = "binning";
        }
      }
      // save what we have now
      const currentType = getAggregationType(layer);
      if (currentType) {
        this.lastFeatureReduction[currentType] = layer.featureReduction;
      }
      if (this.lastFeatureReduction[type]) {
        layer.featureReduction = this.lastFeatureReduction[type];
        layer.featureReduction = layer.featureReduction.clone();
        this.arcgisAggregationChanged.emit();
      }
      else {
        try {
          flowItemNode.loading = true;
          if (type === "binning") {
            await this.createBinning();
          }
          else {
            await this.createCluster(type);
          }
          flowItemNode.loading = false;
          layer.featureReduction = layer.featureReduction.clone();
          this.arcgisAggregationChanged.emit();
        }
        catch (e) {
          flowItemNode.loading = false;
          this.arcgisAggregationError.emit({
            message: "Aggregation style could not be changed.",
            type: "warning"
          });
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      }
    }
  }
  async createCluster(type) {
    var _a, _b;
    const { props, switchNode, tileNodes, modules } = this;
    const { layer, view } = props;
    const { popupClusters, clusterLabelCreator, pieChartCreator } = modules;
    const lastFeatureReduction = layer.featureReduction;
    try {
      const labelSchemes = type === "cluster" &&
        (await clusterLabelCreator.getLabelSchemes({
          layer: layer,
          renderer: layer.renderer,
          view: view
        }));
      layer.featureReduction = {
        type: "cluster",
        clusterMinSize: ((_a = labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.primaryScheme) === null || _a === void 0 ? void 0 : _a.clusterMinSize) || clusteringSizeMinVal,
        clusterMaxSize: clusteringSizeMaxInitialVal,
        clusterRadius: clusteringRadiusInitialVal,
        labelsVisible: type === "cluster",
        labelingInfo: (_b = labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.primaryScheme) === null || _b === void 0 ? void 0 : _b.labelingInfo
      };
      let result;
      if (type === "pie-chart") {
        // for chart clustering create a pie-chart renderer now
        result = await pieChartCreator.createRendererForClustering({ layer });
        layer.featureReduction.renderer = result.renderer;
        layer.featureReduction.fields = layer.featureReduction.fields.concat(result.fields);
      }
      const template = await popupClusters.getTemplates({
        renderer: layer.renderer,
        layer: layer
      });
      if (type === "cluster") {
        const popupTemplate = template.primaryTemplate.value;
        layer.featureReduction.popupTemplate = popupTemplate;
      }
      else {
        // pie-chart
        const popupTemplate = template.secondaryTemplates[0].value;
        layer.featureReduction.popupTemplate = popupTemplate;
        // add the fields from the renderer to the popup as well
        result.fields.forEach((aggregateField) => addPopupField(aggregateField, layer, modules));
      }
      return Promise.resolve();
    }
    catch (e) {
      layer.featureReduction = lastFeatureReduction;
      if (layer.featureReduction) {
        tileNodes[getAggregationType(layer)].setFocus();
      }
      else {
        switchNode.setFocus();
      }
      return Promise.reject();
    }
  }
  async createBinning() {
    var _a, _b;
    const { props, switchNode, tileNodes, modules } = this;
    const { layer, view } = props;
    const { popupUtils, binLevel, binLabelCreator, AggregateField, colorCreator } = modules;
    const lastFeatureReduction = layer.featureReduction;
    try {
      // create the feature reduction with a transparent renderer
      // so we don't see points flashing on the map
      const _binLevel = binLevel;
      const fixedBinLevel = await _binLevel({ view } /* as __esri.binLevelBinLevelParams */);
      layer.featureReduction = {
        type: "binning",
        fixedBinLevel: fixedBinLevel || 1
      };
      if (!((_a = layer.featureReduction.fields) === null || _a === void 0 ? void 0 : _a.length)) {
        // create count field
        const aggregateField = new AggregateField({
          name: "aggregateCount",
          onStatisticField: undefined,
          alias: "aggregateCount",
          statisticType: "count",
          visible: true
        });
        layer.featureReduction.fields = [aggregateField];
      }
      const result = await colorCreator.createContinuousRenderer({
        layer,
        view: view,
        field: "aggregateCount",
        outlineOptimizationEnabled: true,
        sizeOptimizationEnabled: true,
        defaultSymbolEnabled: false,
        forBinning: true
      });
      layer.featureReduction.renderer = result.renderer;
      // layer needs to have the featureReduction + renderer before this can be called
      const labelSchemes = await binLabelCreator.getLabelSchemes({
        layer: layer
      });
      layer.featureReduction.labelingInfo = (_b = labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.primaryScheme) === null || _b === void 0 ? void 0 : _b.labelingInfo;
      layer.featureReduction.labelsVisible = true;
      const fieldNames = layer.featureReduction.fields.map((aggregateField) => aggregateField.onStatisticField);
      const popupTemplate = popupUtils.createPopupTemplateForFeatureReduction({
        featureReduction: layer.featureReduction,
        fields: layer.fields.filter((field) => fieldNames.indexOf(field.name) > -1)
      });
      layer.featureReduction.popupTemplate = popupTemplate;
      return Promise.resolve();
    }
    catch (e) {
      layer.featureReduction = lastFeatureReduction;
      if (layer.featureReduction) {
        tileNodes[getAggregationType(layer)].setFocus();
      }
      else {
        switchNode.setFocus();
      }
      return Promise.reject();
    }
  }
  disableAggregation() {
    const { props } = this;
    const { layer } = props;
    const aggregationType = getAggregationType(layer);
    this.lastFeatureReduction[aggregationType] = layer.featureReduction;
    this.lastFeatureReductionType = aggregationType;
    layer.featureReduction = null;
    this.arcgisAggregationChanged.emit();
  }
  static get assetsDirs() { return ["assets"]; }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregation.style = arcgisAggregationCss;

const arcgisAggregationBinningCss = ".block-section.sc-arcgis-aggregation-binning{padding:0 10px}.block-content.sc-arcgis-aggregation-binning{padding-top:10px}.slider-title-wrapper.sc-arcgis-aggregation-binning{background-color:var(--arcgis-app-background);border-bottom:1px solid var(--arcgis-app-border);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing)}.slider-div.sc-arcgis-aggregation-binning{display:flex;align-items:center;justify-content:space-between;flex-flow:row wrap}.slider-heading.sc-arcgis-aggregation-binning{display:inline-block;padding:var(--arcgis-app-cap-spacing-half) 0;font-size:var(--arcgis-app-font-size-0)}.slider-label.sc-arcgis-aggregation-binning{display:inline-block;padding:var(--arcgis-app-cap-spacing-eighth) 0;font-size:var(--arcgis-app-font-size--1);order:2}.slider-slider.sc-arcgis-aggregation-binning{display:inline-block;width:100%;order:1}.btn-section.sc-arcgis-aggregation-binning{background-color:var(--arcgis-app-background)}.btn.sc-arcgis-aggregation-binning{background:var(--arcgis-app-background-clear);border:none;border-bottom:solid 1px var(--arcgis-app-border);color:var(--arcgis-app-font-color);display:flex;align-items:center;justify-content:space-between;padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing);cursor:pointer;width:100%;transition:background-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function), border-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function)}.btn.sc-arcgis-aggregation-binning:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.btn-text.sc-arcgis-aggregation-binning{font-family:var(--arcgis-app-font-family);font-size:var(--arcgis-app-font-size-0)}.style-button-div.sc-arcgis-aggregation-binning{background-color:white;padding:10px}";

const ArcgisAggregationBinning = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationBinningChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationBinningChange", 7);
    this.arcgisAggregationBinningDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationBinningDismissedChange", 7);
    this.arcgisAggregationBinningStyleClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationBinningStyleClick", 7);
    this.calcitePanelBackClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calcitePanelBackClick", 7);
    this.internalChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalChange", 7);
    this.closeLabelPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeLabelPopovers", 7);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.closeAttributePopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAttributePopovers", 7);
    this.disableSizeSlider = false;
    this.onBinSizeChange = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_6__.d)(async (newValue) => {
      const { layer, view, modules } = this;
      const { colorCreator, AggregateField } = modules;
      const featureReduction = layer.featureReduction;
      featureReduction.fixedBinLevel = newValue;
      // new renderer
      const binning = layer.featureReduction;
      let field = binning.fields.find((aggregateField) => aggregateField.statisticType === "count");
      if (!field) {
        field = new AggregateField({
          name: "aggregateCount",
          onStatisticField: undefined,
          alias: "aggregateCount",
          statisticType: "count",
          visible: true
        });
        layer.featureReduction.fields.push(field);
      }
      const result = await colorCreator.createContinuousRenderer({
        layer,
        view: view,
        field: field.name,
        outlineOptimizationEnabled: true,
        sizeOptimizationEnabled: true,
        defaultSymbolEnabled: false,
        forBinning: true
      });
      layer.featureReduction.renderer = result.renderer;
      this.internalChange.emit();
    }, 300);
    this.view = undefined;
    this.layer = undefined;
    this.portal = undefined;
    this.config = undefined;
    this.flowNode = undefined;
    this.strings = undefined;
    this.currentLanguage = undefined;
    this.hideLayerTitle = false;
  }
  // clone featureReduction to update map
  internalChangeHandler() {
    const { layer } = this;
    const featureReduction = layer.featureReduction;
    layer.featureReduction = featureReduction.clone();
    this.arcgisAggregationBinningChange.emit();
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  // Public Methods
  async done() {
    this.closePopovers();
  }
  async setFocus() {
    this.flowItemNode.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    // only valid for point
    this.layerGeometryType = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.h)(this.layer);
    const [AggregateField, colorCreator] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/layers/support/AggregateField",
      "esri/smartMapping/renderers/color"
    ]);
    this.modules = {
      AggregateField,
      colorCreator
    };
  }
  componentDidLoad() {
    setTimeout(() => requestAnimationFrame(() => this.flowItemNode.setFocus()), 200);
  }
  componentDidUpdate() {
    //this.internalChange.emit();
  }
  disconnectedCallback() {
    this.closePopovers();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { layer, strings, hideLayerTitle } = this;
    //const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.binning, description: !hideLayerTitle ? layer.title : undefined, onCalciteFlowItemBack: () => {
        this.calcitePanelBackClick.emit();
        //this.closePopovers();
      }, ref: (node) => (this.flowItemNode = node) }, this.renderBinSize(), this.renderFieldsBtn(), this.renderLabelBtn(), this.renderPopupBtn(), this.renderGoToStyle())));
  }
  renderBinSize() {
    var _a;
    const { layer, strings } = this;
    // need to switch labels back in rtl
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    const featureReduction = layer.featureReduction;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-heading" }, strings.bin.binSizeTitle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.bin.large : strings.bin.small), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: 1, max: 9, value: 10 - ((_a = featureReduction.fixedBinLevel) !== null && _a !== void 0 ? _a : 3), step: 1, minLabel: strings.bin.binSizeTitle, onCalciteSliderInput: (event) => {
        const slider = event.target;
        this.onBinSizeChange(10 - slider.value);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.bin.small : strings.bin.large))));
  }
  renderFieldsBtn() {
    const { strings } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "btn", onClick: (event) => this.addFieldsPanel(event) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-text" }, strings.bin.editAttributes), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
  }
  renderLabelBtn() {
    const { strings } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "btn", onClick: (event) => this.addLabelPanel(event) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-text" }, strings.bin.editLabel), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
  }
  renderPopupBtn() {
    const { strings } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "btn", onClick: (event) => this.addPopupPanel(event) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-text" }, strings.bin.editPopups), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
  }
  renderGoToStyle() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-button-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "center", appearance: "transparent", scale: "m", width: "full", class: "style-button", onClick: () => this.arcgisAggregationBinningStyleClick.emit() }, strings.bin.editBinStyle)));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  closePopovers() {
    this.closeAttributePopovers.emit();
    this.closeLabelPopovers.emit();
    this.closePopupPopovers.emit();
  }
  addFieldsPanel(event) {
    event.stopPropagation();
    this.closePopovers();
    const { layer, view, currentLanguage, strings, flowNode, hideLayerTitle } = this;
    const fieldsNode = document.createElement("arcgis-aggregation-fields");
    fieldsNode.lang = currentLanguage;
    fieldsNode.layer = layer;
    fieldsNode.mapView = view;
    fieldsNode.strings = strings;
    fieldsNode.currentLanguage = currentLanguage;
    fieldsNode.hideLayerTitle = hideLayerTitle;
    fieldsNode.flowNode = flowNode;
    fieldsNode.addEventListener("arcgisAggregationFieldsChange", () => {
      this.internalChange.emit();
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    });
    flowNode.appendChild(fieldsNode);
  }
  addLabelPanel(event) {
    const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
    event.stopPropagation();
    this.closePopovers();
    const labelFlowItem = document.createElement("calcite-flow-item");
    //labelFlowItem.id = "labelFlowItem_Id";
    labelFlowItem.heading = strings.bin.labelFeaturesHeading;
    labelFlowItem.description = !hideLayerTitle ? layer.title : undefined;
    const calciteFab = document.createElement("calcite-fab");
    calciteFab.icon = "plus";
    calciteFab.slot = "fab";
    calciteFab.scale = "s";
    calciteFab.appearance = "outline-fill";
    calciteFab.kind = "neutral";
    calciteFab.label = strings.bin.labelFab;
    calciteFab.text = strings.bin.labelFab;
    calciteFab.textEnabled = true;
    labelFlowItem.appendChild(calciteFab);
    const labelComponent = document.createElement("arcgis-label");
    labelComponent.lang = currentLanguage;
    labelComponent.layer = layer;
    labelComponent.mapView = view;
    labelComponent.portal = portal;
    labelComponent.config = config;
    labelComponent.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
    labelComponent.calciteFlowProps = { calciteFlowItem: labelFlowItem, calciteFab: calciteFab };
    labelComponent.addEventListener("labelUpdated", () => {
      this.internalChange.emit();
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    });
    labelFlowItem.appendChild(labelComponent);
    flowNode.appendChild(labelFlowItem);
    setTimeout(() => requestAnimationFrame(() => labelFlowItem.setFocus()), 200);
  }
  addPopupPanel(event) {
    const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
    event.stopPropagation();
    this.closePopovers();
    const popupFlowItem = document.createElement("calcite-flow-item");
    popupFlowItem.heading = strings.bin.popupsHeading;
    popupFlowItem.description = !hideLayerTitle ? layer.title : undefined;
    const calciteFab = document.createElement("calcite-fab");
    calciteFab.icon = "plus";
    calciteFab.slot = "fab";
    calciteFab.scale = "s";
    calciteFab.appearance = "outline-fill";
    calciteFab.kind = "neutral";
    calciteFab.label = strings.bin.popupFab;
    calciteFab.text = strings.bin.popupFab;
    calciteFab.textEnabled = true;
    popupFlowItem.appendChild(calciteFab);
    const popupComponent = document.createElement("arcgis-popup");
    popupComponent.lang = currentLanguage;
    popupComponent.layer = layer;
    popupComponent.mapView = view;
    popupComponent.portal = portal;
    popupComponent.config = config;
    popupComponent.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
    popupComponent.calciteFlowProps = {
      flow: flowNode,
      calciteFab: calciteFab,
      calciteFlowItem: popupFlowItem
    };
    popupComponent.addEventListener("popupUpdated", () => {
      this.internalChange.emit();
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    });
    popupFlowItem.appendChild(popupComponent);
    flowNode.appendChild(popupFlowItem);
    popupFlowItem.setFocus();
    setTimeout(() => requestAnimationFrame(() => popupFlowItem.setFocus()), 200);
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationBinning.style = arcgisAggregationBinningCss;

const arcgisAggregationClusteringCss = ".block-section.sc-arcgis-aggregation-clustering{padding:0 10px}.block-content.sc-arcgis-aggregation-clustering{padding-top:10px}.symbol-button.sc-arcgis-aggregation-clustering{border:solid 1px var(--arcgis-app-border);display:flex;justify-content:space-between}.symbol-button.selected.sc-arcgis-aggregation-clustering{border-color:var(--calcite-ui-brand);border-width:1px}.symbol-button.sc-arcgis-aggregation-clustering:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.symbol-button.sc-arcgis-aggregation-clustering:focus{border-color:var(--calcite-ui-brand);border-width:2px}.symbol.sc-arcgis-aggregation-clustering{padding:5px}.symbol-icon.sc-arcgis-aggregation-clustering{padding:6px}.slider-title-wrapper.sc-arcgis-aggregation-clustering{background-color:var(--arcgis-app-background);border-bottom:1px solid var(--arcgis-app-border);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing)}.slider-div.sc-arcgis-aggregation-clustering{display:flex;align-items:center;justify-content:space-between;flex-flow:row wrap}.slider-heading.sc-arcgis-aggregation-clustering{display:inline-block;padding:var(--arcgis-app-cap-spacing-half) 0;font-size:var(--arcgis-app-font-size-0)}.slider-label.sc-arcgis-aggregation-clustering{display:inline-block;padding:var(--arcgis-app-cap-spacing-eighth) 0;font-size:var(--arcgis-app-font-size--1);order:2}.slider-slider.sc-arcgis-aggregation-clustering{display:inline-block;width:100%;order:1}.cluster-btn-section.sc-arcgis-aggregation-clustering{background-color:var(--arcgis-app-background)}.cluster-btn.sc-arcgis-aggregation-clustering{background:var(--arcgis-app-background-clear);border:none;border-bottom:solid 1px var(--arcgis-app-border);color:var(--arcgis-app-font-color);display:flex;align-items:center;justify-content:space-between;padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing);cursor:pointer;width:100%;transition:background-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function), border-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function)}.cluster-btn.sc-arcgis-aggregation-clustering:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.cluster-btn.sc-arcgis-aggregation-clustering:focus{border:2px solid var(--calcite-ui-brand)}.cluster-btn-text.sc-arcgis-aggregation-clustering{font-family:var(--arcgis-app-font-family);font-size:var(--arcgis-app-font-size-0)}";

const ArcgisAggregationClustering = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationClusteringChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationClusteringChange", 7);
    this.arcgisAggregationClusteringDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationClusteringDismissedChange", 7);
    this.calcitePanelBackClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calcitePanelBackClick", 7);
    this.internalChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalChange", 7);
    this.closeLabelPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeLabelPopovers", 7);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.closeAttributePopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAttributePopovers", 7);
    this.disableSizeSlider = false;
    this.view = undefined;
    this.layer = undefined;
    this.portal = undefined;
    this.config = undefined;
    this.flowNode = undefined;
    this.strings = undefined;
    this.currentLanguage = undefined;
    this.hideLayerTitle = false;
    this.symbolSelected = false;
  }
  // clone featureReduction to update map
  internalChangeHandler() {
    const { layer } = this;
    const featureReduction = layer.featureReduction;
    layer.featureReduction = featureReduction.clone();
    this.arcgisAggregationClusteringChange.emit();
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  // Public Methods
  async done() {
    this.closePopovers();
  }
  async setFocus() {
    this.flowItemNode.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    // only valid for point
    this.layerGeometryType = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.h)(this.layer);
    const [popupUtils, symbolUtils, cimSymbolUtils, Color, SimpleMarkerSymbol, SimpleLineSymbol] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/smartMapping/popup/support/utils",
      "esri/symbols/support/symbolUtils",
      "esri/symbols/support/cimSymbolUtils",
      "esri/Color",
      "esri/symbols/SimpleMarkerSymbol",
      "esri/symbols/SimpleLineSymbol"
    ]);
    this.modules = {
      symbolUtils,
      cimSymbolUtils,
      Color,
      SimpleMarkerSymbol,
      SimpleLineSymbol
    };
    // disable size range slider for "size" renderer. undocumented function.
    const visualVariables = popupUtils.getPrimaryVisualVariables(this.layer.renderer);
    this.disableSizeSlider = visualVariables.some((variable) => {
      return (variable === null || variable === void 0 ? void 0 : variable.type) === "size";
    });
  }
  componentDidLoad() {
    setTimeout(() => requestAnimationFrame(() => this.flowItemNode.setFocus()), 200);
  }
  componentDidUpdate() {
    //this.internalChange.emit();
  }
  disconnectedCallback() {
    this.closePopovers();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { layer, strings, hideLayerTitle } = this;
    //const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
    const showSymbol = isRendererAutoGenerated(layer);
    const aggregationType = getAggregationType(layer);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.clustering, description: !hideLayerTitle ? layer.title : undefined, onCalciteFlowItemBack: () => {
        this.calcitePanelBackClick.emit();
        //this.closePopovers();
      }, ref: (node) => (this.flowItemNode = node) }, showSymbol && this.renderSymbol(), aggregationType === "pie-chart" && this.renderShape(), this.renderClusterRadius(), this.renderClusterSize(), this.renderFieldsBtn(), this.renderLabelBtn(), this.renderPopupBtn())));
  }
  renderSymbol() {
    const { layer, strings } = this;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    const hasSymbol = !!featureReduction.symbol;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: strings.cluster.overrideSymbol, open: hasSymbol, "toggle-display": "switch", class: "block-section", onCalciteBlockSectionToggle: (event) => {
        this.handleToggleSymbol(event);
      } }, this.renderSymbolContent()));
  }
  renderSymbolContent() {
    const { layer, symbolSelected, strings } = this;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    if (!featureReduction.symbol) {
      return;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.symbolStyle, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `symbol-button ${symbolSelected ? `selected` : ``}`, tabindex: "0", role: "button", "aria-label": strings.symbolStyle, onClick: (event) => this.openSymbolStylerPopover(event) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol", ref: (node) => this.createSymbolPreview(node) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "pencil", class: "symbol-icon" })))));
  }
  renderShape() {
    var _a;
    const { layer, strings } = this;
    // need to switch labels back in rtl
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, " ", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.cluster.shape, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.donut : strings.cluster.pie), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: 0, max: Math.max(0.9, featureReduction.renderer.holePercentage), value: (_a = featureReduction.renderer.holePercentage) !== null && _a !== void 0 ? _a : 0, step: 0.1, minLabel: strings.cluster.shape, onCalciteSliderInput: (event) => {
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        const slider = event.target;
        featureReduction.renderer.holePercentage = slider.value;
        this.internalChange.emit();
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.pie : strings.cluster.donut)))));
  }
  renderClusterRadius() {
    var _a;
    const { layer, strings } = this;
    // need to switch labels back in rtl
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    const featureReduction = layer.featureReduction;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-heading" }, strings.cluster.radiusTitle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.high : strings.cluster.low), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: clusteringRadiusMinVal, max: clusteringRadiusMaxVal, value: (_a = featureReduction.clusterRadius) !== null && _a !== void 0 ? _a : clusteringRadiusInitialVal, step: 1, minLabel: strings.cluster.radiusTitle, onCalciteSliderInput: (event) => {
        const featureReduction = layer.featureReduction;
        const slider = event.target;
        featureReduction.clusterRadius = slider.value;
        this.internalChange.emit();
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.low : strings.cluster.high))));
  }
  renderClusterSize() {
    var _a, _b;
    const { layer, strings, disableSizeSlider } = this;
    // need to switch labels back in rtl
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    const featureReduction = layer.featureReduction;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-heading" }, strings.cluster.sizeTitle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.max : strings.cluster.min), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: clusteringSizeMinVal, max: clusteringSizeMaxVal, minValue: (_a = featureReduction.clusterMinSize) !== null && _a !== void 0 ? _a : clusteringSizeMinVal, maxValue: (_b = featureReduction.clusterMaxSize) !== null && _b !== void 0 ? _b : clusteringSizeMaxVal, step: 1, disabled: disableSizeSlider, minLabel: `${strings.cluster.min} ${strings.cluster.sizeTitle}`, maxLabel: `${strings.cluster.max} ${strings.cluster.sizeTitle}`, onCalciteSliderInput: (event) => {
        const featureReduction = layer.featureReduction;
        const slider = event.target;
        featureReduction.clusterMinSize = slider.minValue;
        featureReduction.clusterMaxSize = slider.maxValue;
        this.internalChange.emit();
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.min : strings.cluster.max))));
  }
  /* renderScaleThreshold(): VNode {
    /
    World
    Continent    1:50,000,000
    Countries - big    1:25,000,000
    Countries - small    1:12,000,000
    States/Provinces    1:6,000,000
    State/Province    1:3,000,000
    Counties    1:1,500,000
    County    1:750,000
    Metropolitan area    1:320,000
    Cities    1:160,000
    City    1:80,000
    Town    1:40,000
    Neighborhood    1:20,000
    Streets    1:10,000
    Street    1:5,000
    /
    const { layer, strings } = this;
    // need to switch labels back in rtl
    const rtl = getElementDir(this.hostElement) === "rtl";
    const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
    if (
      featureReduction.visibilityInfo &&
      featureReduction.visibilityInfo.thresholdType !== "scale"
    ) {
      return;
    }
    const worldScale = 295828764;
    const threshold = featureReduction.visibilityInfo?.maxScale || worldScale;
    const scaleStops = [
      worldScale,
      50000000,
      25000000,
      12000000,
      6000000,
      3000000,
      1500000,
      750000,
      320000,
      160000,
      80000,
      40000,
      20000,
      10000,
      5000
    ];
    const findStop = (value: number): number => {
      let index = 0;
      scaleStops.forEach((stop: number, idx: number) => {
        if (idx === 0) {
          if (stop < value) {
            index = 0;
          }
        } else if (idx === scaleStops.length - 1) {
          if (stop >= value) {
            index = scaleStops.length - 1;
          }
        } else {
          if (stop <= value && scaleStops[idx - 1] > value) {
            index = idx - 1 + (scaleStops[idx - 1] - value) / (scaleStops[idx - 1] - stop);
          }
        }
      });
      return index;
    };
    return (
      <div class="slider-title-wrapper">
        <label class="slider-heading">{strings.cluster.scaleThreshold}</label>
        <div class="slider-div">
          <label class="slider-label">
            {rtl ? strings.cluster.streetScaleLabel : <span>&nbsp;</span>}
          </label>
          <calcite-slider
            class="slider-slider"
            min={0}
            max={14}
            value={findStop(threshold)}
            step={0.1}
            minLabel={strings.cluster.scaleThreshold}
            onCalciteSliderInput={(event: CustomEvent) => {
              const slider = event.target as HTMLCalciteSliderElement;
              const value = slider.value as number;
              const stopMin = scaleStops[Math.ceil(value)];
              const stopMax = scaleStops[Math.floor(value)];
              let threshold = Math.round(
                stopMin + (value - Math.floor(value)) * (stopMax - stopMin)
              );
              console.log("TODO: set scale threshold to", threshold);
              const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
              featureReduction.visibilityInfo = { maxScale: threshold, thresholdType: "scale" };
              this.internalChange.emit();
            }}
          ></calcite-slider>
          <label class="slider-label">
            {rtl ? <span>&nbsp;</span> : strings.cluster.streetScaleLabel}
          </label>
        </div>
      </div>
    );
  } */
  renderFieldsBtn() {
    const { strings } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cluster-btn-section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "cluster-btn", onClick: (event) => this.addFieldsPanel(event), ref: (node) => (this.fieldsButtonNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-text" }, strings.cluster.editClusterAttributes), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
  }
  renderLabelBtn() {
    const { strings } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cluster-btn-section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "cluster-btn", onClick: (event) => this.addLabelPanel(event), ref: (node) => (this.labelsButtonNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-text" }, strings.cluster.editClusterLabel), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
  }
  renderPopupBtn() {
    const { strings } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cluster-btn-section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "cluster-btn", onClick: (event) => this.addPopupPanel(event), ref: (node) => (this.popupButtonNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-text" }, strings.cluster.editClusterPopups), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  closePopovers() {
    var _a, _b;
    this.closeAttributePopovers.emit();
    this.closeLabelPopovers.emit();
    this.closePopupPopovers.emit();
    (_b = (_a = this.stylerPopoverNode) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.stylerPopoverNode);
    this.stylerPopoverNode = null;
  }
  handleToggleSymbol(event) {
    const { layer, modules } = this;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    const section = event.currentTarget;
    if (section.open) {
      if (this.lastSymbol) {
        featureReduction.symbol = this.lastSymbol;
        this.lastSymbol = undefined;
      }
      else {
        featureReduction.symbol = getDefaultSymbol(modules);
      }
    }
    else {
      this.lastSymbol = featureReduction.symbol;
      featureReduction.symbol = undefined;
    }
    this.internalChange.emit();
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
  }
  createSymbolPreview(containerNode) {
    const { layer, modules } = this;
    const { symbolUtils } = modules;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    if (!featureReduction.symbol) {
      return;
    }
    const symbol = featureReduction.symbol;
    const size = symbol.type === "cim" ? 20 : 14;
    symbolUtils
      .renderPreviewHTML(symbol, {
      size,
      symbolConfig: undefined
    })
      .then((node) => {
      containerNode.childNodes.forEach((child) => containerNode.removeChild(child));
      containerNode.appendChild(node);
    });
  }
  async openSymbolStylerPopover(event) {
    const { layer, portal, strings } = this;
    const refElement = findParentNode(event.target, null, "symbol-button");
    if (this.stylerPopoverNode) {
      this.symbolSelected = false;
      this.closePopovers();
      this.stylerPopoverNode = null;
    }
    else {
      this.closePopovers();
      this.symbolSelected = true;
      this.stylerPopoverNode = document.createElement("arcgis-aggregation-symbol-styler-popover");
      this.stylerPopoverNode.props = { layer, portal, strings };
      this.stylerPopoverNode.referenceElement = this.flowItemNode;
      this.stylerPopoverNode.addEventListener("arcgisAggregationSymbolStylerPopoverClose", () => {
        this.closePopovers();
        this.symbolSelected = false;
        // if we do this too early the enter key executes on the focused div
        setTimeout(() => refElement.focus(), 300);
      });
      this.stylerPopoverNode.addEventListener("arcgisAggregationSymbolStylerChange", () => {
        this.internalChange.emit();
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      });
      document.body.appendChild(this.stylerPopoverNode);
      this.stylerPopoverNode.setOpen(true);
    }
  }
  addFieldsPanel(event) {
    event.stopPropagation();
    this.closePopovers();
    const { layer, view, currentLanguage, strings, flowNode, hideLayerTitle } = this;
    const fieldsNode = document.createElement("arcgis-aggregation-fields");
    fieldsNode.lang = currentLanguage;
    fieldsNode.layer = layer;
    fieldsNode.mapView = view;
    fieldsNode.strings = strings;
    fieldsNode.currentLanguage = currentLanguage;
    fieldsNode.hideLayerTitle = hideLayerTitle;
    fieldsNode.flowNode = flowNode;
    fieldsNode.addEventListener("arcgisAggregationFieldsChange", () => {
      this.internalChange.emit();
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    });
    fieldsNode.addEventListener("arcgisAggregationFieldsBackClick", () => {
      flowNode.removeChild(fieldsNode);
      setTimeout(() => this.fieldsButtonNode.focus(), 300);
    });
    flowNode.appendChild(fieldsNode);
  }
  addLabelPanel(event) {
    const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
    event.stopPropagation();
    this.closePopovers();
    const labelFlowItem = document.createElement("calcite-flow-item");
    //labelFlowItem.id = "labelFlowItem_Id";
    labelFlowItem.heading = strings.cluster.labelFeaturesHeading;
    labelFlowItem.description = !hideLayerTitle ? layer.title : undefined;
    const calciteFab = document.createElement("calcite-fab");
    calciteFab.icon = "plus";
    calciteFab.slot = "fab";
    calciteFab.scale = "s";
    calciteFab.appearance = "outline-fill";
    calciteFab.kind = "neutral";
    calciteFab.label = strings.cluster.labelFab;
    calciteFab.text = strings.cluster.labelFab;
    calciteFab.textEnabled = true;
    labelFlowItem.appendChild(calciteFab);
    const labelComponent = document.createElement("arcgis-label");
    labelComponent.lang = currentLanguage;
    labelComponent.layer = layer;
    labelComponent.mapView = view;
    labelComponent.portal = portal;
    labelComponent.config = config;
    labelComponent.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
    labelComponent.calciteFlowProps = { calciteFlowItem: labelFlowItem, calciteFab: calciteFab };
    labelComponent.addEventListener("labelUpdated", () => {
      this.internalChange.emit();
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    });
    labelFlowItem.appendChild(labelComponent);
    labelFlowItem.addEventListener("calciteFlowItemBack", () => {
      setTimeout(() => this.labelsButtonNode.focus(), 300);
    });
    flowNode.appendChild(labelFlowItem);
    setTimeout(() => requestAnimationFrame(() => labelFlowItem.setFocus()), 200);
  }
  addPopupPanel(event) {
    const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
    event.stopPropagation();
    this.closePopovers();
    const popupFlowItem = document.createElement("calcite-flow-item");
    popupFlowItem.heading = strings.cluster.popupsHeading;
    popupFlowItem.description = !hideLayerTitle ? layer.title : undefined;
    const calciteFab = document.createElement("calcite-fab");
    calciteFab.icon = "plus";
    calciteFab.slot = "fab";
    calciteFab.scale = "s";
    calciteFab.appearance = "outline-fill";
    calciteFab.kind = "neutral";
    calciteFab.label = strings.cluster.popupFab;
    calciteFab.text = strings.cluster.popupFab;
    calciteFab.textEnabled = true;
    popupFlowItem.appendChild(calciteFab);
    const popupComponent = document.createElement("arcgis-popup");
    popupComponent.lang = currentLanguage;
    popupComponent.layer = layer;
    popupComponent.mapView = view;
    popupComponent.portal = portal;
    popupComponent.config = config;
    popupComponent.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
    popupComponent.calciteFlowProps = {
      flow: flowNode,
      calciteFab: calciteFab,
      calciteFlowItem: popupFlowItem
    };
    popupComponent.addEventListener("popupUpdated", () => {
      this.internalChange.emit();
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    });
    popupFlowItem.appendChild(popupComponent);
    popupFlowItem.addEventListener("calciteFlowItemBack", () => {
      setTimeout(() => this.popupButtonNode.focus(), 300);
    });
    flowNode.appendChild(popupFlowItem);
    setTimeout(() => requestAnimationFrame(() => popupFlowItem.setFocus()), 200);
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationClustering.style = arcgisAggregationClusteringCss;

const arcgisAggregationFieldCss = ".section.sc-arcgis-aggregation-field{padding-top:15px}.format.sc-arcgis-aggregation-field{padding-top:20px}";

const ArcgisAggregationField = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationFieldChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldChange", 7);
    this.onFieldSelect = () => {
      // not for autoGenerated fields
      //this.hasFocus = true;
      const { layer, mapView, aggregateField, fieldPickListSortBy, strings } = this;
      //const dir = getElementDir(this.hostElement);
      //this.closeFilterPopoversHandler();
      const flowItemNode = findParentNode(this.hostElement, "calcite-flow-item");
      const nodeWidth = flowItemNode.getBoundingClientRect().width || 215;
      this.arcgisFieldPickList = document.createElement("arcgis-field-pick-list");
      this.arcgisFieldPickList.popoverProps = {
        placement: "auto",
        offsetDistance: -1 * (nodeWidth + 10),
        offsetSkidding: 0,
        pointerDisabled: true,
        popoverWidth: nodeWidth + 30,
        refElement: flowItemNode
      };
      this.arcgisFieldPickList.fields = this.createPickListFields();
      this.arcgisFieldPickList.layer = layer;
      this.arcgisFieldPickList.mapView = mapView;
      this.arcgisFieldPickList.showFieldInfo = true;
      this.arcgisFieldPickList.showFieldName = false;
      this.arcgisFieldPickList.selectedFields = [aggregateField.onStatisticField];
      this.arcgisFieldPickList.sortBy = fieldPickListSortBy;
      this.arcgisFieldPickList.addEventListener("arcgisFieldPickListDismissed", (event) => {
        var _a, _b;
        event.stopPropagation();
        const selectedField = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) === null || _b === void 0 ? void 0 : _b[0];
        flowItemNode.disabled = false;
        if (this.arcgisFieldPickList) {
          document.body.removeChild(this.arcgisFieldPickList);
          this.arcgisFieldPickList = null;
          setTimeout(() => {
            this.fieldNode.setFocus();
          }, 1);
        }
        if (selectedField) {
          const { aggregateField } = this;
          const field = getLayerField(layer, selectedField);
          // check if we have this field already...
          const types = getStatsTypes(field);
          let idxType = 0;
          let hasAlready = hasFieldAlready(layer, field.name, types[idxType]);
          while (idxType < types.length && hasAlready) {
            idxType++;
            if (types[idxType] === aggregateField.statisticType) {
              // skip the current one
              idxType++;
            }
            if (idxType < types.length) {
              hasAlready = hasFieldAlready(layer, field.name, types[idxType]);
            }
          }
          if (hasAlready) {
            // all statisticTypes already exist for this field; can't change to this field
            return;
          }
          const oldFieldName = aggregateField.name;
          const type = types[idxType];
          aggregateField.name = `${field.name}_${type}`;
          aggregateField.onStatisticField = field.name;
          aggregateField.alias = `${field.alias || field.name} ${getStatsTypeString(type, strings).toLowerCase()}`;
          aggregateField.statisticType = type;
          this.replacePopupField(oldFieldName);
          this.arcgisAggregationFieldChange.emit();
        } // else user hit cancel or close
      });
      this.arcgisFieldPickList.addEventListener("arcgisFieldPickListSortByChange", (event) => (this.fieldPickListSortBy = event.detail));
      document.body.appendChild(this.arcgisFieldPickList);
      flowItemNode.disabled = true;
    };
    this.mapView = undefined;
    this.layer = undefined;
    this.aggregateField = undefined;
    this.open = false;
    this.strings = undefined;
    this.currentLanguage = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  // Public Methods
  async done() {
    this.closePopovers();
  }
  async setFocus() {
    this.panelNode.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [FieldInfo, FieldInfoFormat] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/popup/FieldInfo",
      "esri/popup/support/FieldInfoFormat"
    ]);
    this.modules = {
      FieldInfo,
      FieldInfoFormat
    };
    // make sure the field exists in the popup
    const { layer, aggregateField, modules } = this;
    let fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
    if (!fieldInfo) {
      addPopupField(aggregateField, layer, modules);
    }
  }
  disconnectedCallback() {
    this.closePopovers();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    /*
    {
      "name": "FieldName",
      "alias": "The field alias",
      "onStatisticField": "Layer field",
      "onStatisticExpression": {
        "expression": "Arcade expression goes here",
        "returnType": "<string | number>"
      },
      "statisticType": "<count | sum | min | max | mode | avg | stddev | var>",
      "isInferred": <boolean>  // only needed for Online
    }
    */
    const { layer, aggregateField, open } = this;
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
    const alias = (aggregateField.isAutoGenerated ? fieldInfo.label : aggregateField.alias) ||
      aggregateField.name;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { dir: dir }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: alias, open: open, collapsible: true, ref: (node) => (this.blockNode = node), onCalciteBlockToggle: (event) => {
        const node = event.target;
        this.open = node.open;
      } }, this.renderDropdown(), this.renderFieldSelection(), this.renderTypeSelection(), this.renderResultFieldName(), this.renderFieldAlias(), this.renderFormatting())));
  }
  renderDropdown() {
    const { layer, aggregateField, strings } = this;
    const field = getLayerField(layer, aggregateField.onStatisticField);
    if (aggregateField.isAutoGenerated || !field) {
      return null;
    }
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { dir: dir, placement: "bottom-end", scale: "s", overlayPositioning: "fixed" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (node) => (this.dropdownActionNode = node), slot: "trigger", scale: "m", text: strings.delete }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "ellipsis" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { onClick: (event) => {
        event.stopPropagation();
        this.removeField();
      }, onKeyDown: (event) => {
        event.stopPropagation();
        if (event.key === " " || event.key === "Enter") {
          this.removeField();
        }
      } }, strings.delete)))));
  }
  renderFieldSelection() {
    const { aggregateField, strings } = this;
    if (!aggregateField.onStatisticField) {
      // e.g. cluster_count or onStatisticsExpression
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.field), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", scale: "m", alignment: "icon-end-space-between", iconEnd: "chevron-down", disabled: aggregateField.isAutoGenerated, onClick: () => this.onFieldSelect(), ref: (node) => (this.fieldNode = node) }, aggregateField.onStatisticField)));
  }
  renderTypeSelection() {
    const { layer, aggregateField, strings } = this;
    const field = getLayerField(layer, aggregateField.onStatisticField);
    const isString = (field === null || field === void 0 ? void 0 : field.type) === "string";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.statsType), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", scale: "m", label: strings.fields.statsType, disabled: aggregateField.isAutoGenerated || !field, onCalciteSelectChange: (event) => {
        // disabled for autoGenerated fields
        const node = event === null || event === void 0 ? void 0 : event.target;
        const type = node.selectedOption.value;
        const oldFieldName = aggregateField.name;
        aggregateField.name = `${field.name}_${type}`;
        aggregateField.onStatisticField = field.name;
        aggregateField.alias = `${field.alias || field.name} ${getStatsTypeString(type, strings).toLowerCase()}`;
        aggregateField.statisticType = type;
        this.replacePopupField(oldFieldName);
        this.arcgisAggregationFieldChange.emit();
      } }, !isString && this.renderTypeOption("sum"), !isString && this.renderTypeOption("avg"), !isString && this.renderTypeOption("min"), !isString && this.renderTypeOption("max"), this.renderTypeOption("mode"), aggregateField.statisticType === "count" && this.renderTypeOption("count"))));
  }
  renderTypeOption(type) {
    const { layer, aggregateField, strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: type, label: getStatsTypeString(type, strings), disabled: aggregateField.statisticType !== type &&
        hasFieldAlready(layer, aggregateField.onStatisticField, type), selected: aggregateField.statisticType === type }));
  }
  renderResultFieldName() {
    const { aggregateField, strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.resultFieldName), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", disabled: true, value: aggregateField.name, scale: "m", label: strings.fields.resultFieldName })));
  }
  renderFieldAlias() {
    const { layer, aggregateField, strings } = this;
    const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
    const alias = (aggregateField.isAutoGenerated ? fieldInfo.label : aggregateField.alias) ||
      aggregateField.name;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.fieldAlias), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", value: alias, scale: "m", label: strings.fields.fieldAlias, onCalciteInputInput: (event) => {
        const node = event.target;
        let alias = node.value;
        this.blockNode.heading = alias;
        if (!alias) {
          // let's give the user time to fill it in;
          // if not we default to something
          setTimeout(() => {
            const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
            const curAlias = aggregateField.isAutoGenerated
              ? fieldInfo.label
              : aggregateField.alias;
            if (!curAlias) {
              const field = getLayerField(layer, aggregateField.onStatisticField);
              alias = `${field.alias || field.name} ${getStatsTypeString(aggregateField.statisticType, strings).toLocaleLowerCase()}`;
              this.blockNode.heading = alias;
              node.value = alias;
            }
            this.updateAlias(alias);
          }, 2000);
        }
        else {
          this.updateAlias(alias);
        }
      } })));
  }
  renderFormatting() {
    const { layer, aggregateField, modules, strings } = this;
    const { FieldInfoFormat } = modules;
    const featureReduction = layer.featureReduction;
    const popupTemplate = featureReduction.popupTemplate;
    const layerField = getLayerField(layer, aggregateField.onStatisticField);
    if ((!layerField && aggregateField.statisticType !== "count") ||
      (layerField === null || layerField === void 0 ? void 0 : layerField.type) === "string") {
      return null;
    }
    let fieldInfo = popupTemplate.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
    fieldInfo.format =
      fieldInfo.format ||
        new FieldInfoFormat({ dijitSeparator: true, places: 0 });
    const isInt = !layerField || ["integer", "small-integer", "big-integer"].indexOf(layerField.type) > -1;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "format" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "l" }, strings.fields.formatting), !isInt && this.renderSignificantDigits(fieldInfo.format), this.renderThousandSeperator(fieldInfo.format)));
  }
  renderThousandSeperator(format) {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, strings.fields.show1000Separator, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: format.digitSeparator, onCalciteSwitchChange: (event) => {
        const node = event === null || event === void 0 ? void 0 : event.target;
        format.digitSeparator = node.checked;
        this.arcgisAggregationFieldChange.emit();
      } }))));
  }
  renderSignificantDigits(format) {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.significantDigits, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.fields.significantDigits, onCalciteSelectChange: (event) => {
        const node = event.target;
        format.places = Number(node.selectedOption.value) || 0;
        this.arcgisAggregationFieldChange.emit();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "0", selected: format.places === 0 }, strings.fields.decimalPlaces0), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "1", selected: format.places === 1 }, strings.fields.decimalPlaces1), [2, 3, 4, 5, 6, 7, 8].map((x) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: x.toString(), selected: format.places === x }, strings.fields.decimalPlacesN.replace("${num}", `${x}`))))))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  closePopovers() {
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
      this.arcgisFieldPickList = null;
    }
  }
  removeField() {
    const { layer, aggregateField } = this;
    const featureReduction = layer.featureReduction;
    const popupTemplate = featureReduction.popupTemplate;
    let idx = popupTemplate.fieldInfos.findIndex((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
    idx >= 0 && popupTemplate.fieldInfos.splice(idx, 1);
    idx = featureReduction.fields.findIndex((af /* __esri.AggregateField */) => af.name === aggregateField.name);
    featureReduction.fields.splice(idx, 1);
    this.arcgisAggregationFieldChange.emit();
  }
  createPickListFields() {
    const { layer, aggregateField } = this;
    const { fields } = layer;
    const layerFields = fields.filter((field) => ["small-integer", "big-integer", "integer", "single", "double", "long", "number", "string"].indexOf(field.type) > -1);
    return layerFields
      .filter((field) => aggregateField.onStatisticField === field.name || !isFieldDone(layer, field.name))
      .map((field) => {
      return {
        name: field.name,
        alias: field.alias,
        type: field.type
      };
    });
  }
  replacePopupField(oldName) {
    // after changing field or stats types
    // not for autoGenerated fields
    const { layer, aggregateField, modules } = this;
    const { FieldInfo } = modules;
    const featureReduction = layer.featureReduction;
    const { popupTemplate } = featureReduction;
    popupTemplate.fieldInfos = popupTemplate.fieldInfos || [];
    const idxPopup = popupTemplate.fieldInfos.findIndex((fieldInfo) => fieldInfo.fieldName === oldName);
    const field = getLayerField(layer, aggregateField.onStatisticField);
    popupTemplate.fieldInfos.splice(idxPopup, 1, new FieldInfo({
      fieldName: aggregateField.name,
      label: aggregateField.alias,
      isEditable: false,
      visible: true,
      format: field.type === "string"
        ? undefined
        : ["small-integer", "big-integer", "integer", "long", "number"].indexOf(field.type) > -1
          ? {
            digitSeparator: true
          }
          : {
            digitSeparator: true,
            places: 1
          }
    }));
  }
  updateAlias(alias) {
    const { layer, aggregateField } = this;
    const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
    if (aggregateField.isAutoGenerated) {
      // featureReduction.clone() will remove the alias from the aggregation field
      fieldInfo.label = alias;
    }
    else {
      aggregateField.alias = alias;
    }
    this.updatePopupAlias();
    this.arcgisAggregationFieldChange.emit();
  }
  updatePopupAlias() {
    const { layer, aggregateField } = this;
    const featureReduction = layer.featureReduction;
    const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
    const alias = aggregateField.isAutoGenerated ? fieldInfo.label : aggregateField.alias;
    // main fieldInfos
    if (!aggregateField.isAutoGenerated) {
      fieldInfo.label = alias;
    }
    // search fieldInfos under content
    if (Array.isArray(featureReduction.popupTemplate.content) &&
      featureReduction.popupTemplate.content.length) {
      featureReduction.popupTemplate.content.forEach((content) => {
        if (content.type === "fields" && content.fieldInfos) {
          const fieldInfo = content.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
          if (fieldInfo) {
            fieldInfo.label = alias;
          }
        }
      });
    }
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationField.style = arcgisAggregationFieldCss;

const arcgisAggregationFieldsCss = ".fields.sc-arcgis-aggregation-fields{background-color:white}.field-icon.sc-arcgis-aggregation-fields{padding:0 var(--arcgis-app-cap-spacing);display:flex;align-items:center}";

const ArcgisAggregationFields = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationFieldsChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldsChange", 7);
    this.arcgisAggregationFieldsClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldsClose", 7);
    this.arcgisAggregationFieldsBackClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldsBackClick", 7);
    this.allFieldsAdded = false;
    this.mapView = undefined;
    this.layer = undefined;
    this.flowNode = undefined;
    this.strings = undefined;
    this.currentLanguage = undefined;
    this.hideLayerTitle = false;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  // Public Methods
  async done() {
    this.closePopovers();
  }
  async setFocus() {
    this.flowItemNode.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [AggregateField, FieldInfo] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/layers/support/AggregateField",
      "esri/popup/FieldInfo"
    ]);
    this.modules = {
      AggregateField,
      FieldInfo
    };
  }
  componentDidLoad() {
    setTimeout(() => requestAnimationFrame(() => this.flowItemNode.setFocus()), 200);
  }
  disconnectedCallback() {
    this.closePopovers();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    /*
    {
      name: "cluster_count",
      alias: "aggregateCount",
      type: "esriFieldTypeUnsignedInteger", // If this is a valid type...
      statisticType: "count",
      isInferred: true,
    }
    */
    const { layer, strings, hideLayerTitle } = this;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    const statsFields = featureReduction.fields;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.fields.fields, description: !hideLayerTitle ? layer.title : undefined, onCalciteFlowItemBack: () => {
        this.arcgisAggregationFieldsBackClick.emit();
        this.closePopovers();
      }, ref: (node) => (this.flowItemNode = node) }, this.renderTip(statsFields), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "fields" }, statsFields === null || statsFields === void 0 ? void 0 : statsFields.map((aggregateField) => this.renderStatsField(aggregateField))), this.renderAddField())));
  }
  renderTip(statsFields) {
    const { strings } = this;
    if (statsFields === null || statsFields === void 0 ? void 0 : statsFields.length) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { heading: strings.fields.msgTitle, closeDisabled: true }, strings.fields.msg));
  }
  renderStatsField(aggregateField) {
    const { layer, mapView, selectedFieldName, modules, strings } = this;
    // need to have the field in the popup too
    addPopupField(aggregateField, layer, modules);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-field", { layer: layer, mapView: mapView, strings: strings, aggregateField: aggregateField, open: selectedFieldName === aggregateField.name, onArcgisAggregationFieldChange: () => {
        this.selectedFieldName = aggregateField.name;
        this.arcgisAggregationFieldsChange.emit();
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }));
  }
  renderAddField() {
    const { allFieldsAdded, strings } = this;
    if (allFieldsAdded) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { slot: "fab", appearance: "outline-fill", kind: "neutral", scale: "s", icon: "plus", textEnabled: true, text: strings.fields.addField, onClick: () => this.addStatsField(), ref: (node) => (this.fabNode = node) }));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  closePopovers() {
    if (this.attributeFormatter) {
      document.body.removeChild(this.attributeFormatter);
      this.attributeFormatter = null;
    }
  }
  addStatsField() {
    const { layer, strings, modules } = this;
    const { AggregateField } = modules;
    const fields = getLayerNumberOrStringFields(layer);
    let idxField = 0;
    let types = getStatsTypes(fields[idxField]);
    let idxType = 0;
    let hasAlready = hasFieldAlready(layer, fields[idxField].name, types[idxType]);
    while (idxField < fields.length && hasAlready) {
      // next types
      while (idxType < types.length && hasAlready) {
        idxType++;
        if (idxType < types.length) {
          hasAlready = hasFieldAlready(layer, fields[idxField].name, types[idxType]);
        }
      }
      if (hasAlready) {
        // next field
        idxField++;
        if (idxField < fields.length) {
          types = getStatsTypes(fields[idxField]);
          idxType = 0;
          hasAlready = hasFieldAlready(layer, fields[idxField].name, types[idxType]);
        }
      }
    }
    if (hasAlready) {
      this.allFieldsAdded = true;
    }
    else {
      const field = fields[idxField];
      const type = types[idxType];
      const aggregateField /* __esri.AggregateField */ = new AggregateField({
        name: `${field.name}_${type}`,
        onStatisticField: field.name,
        alias: `${field.alias || field.name} ${getStatsTypeString(type, strings).toLocaleLowerCase()}`,
        statisticType: type,
        visible: true
      });
      const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
      featureReduction.fields = featureReduction.fields || [];
      featureReduction.fields.push(aggregateField);
      addPopupField(aggregateField, layer, modules);
      this.selectedFieldName = aggregateField.name;
    }
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationFields.style = arcgisAggregationFieldsCss;

const arcgisAggregationInfoPopoverCss = ".info{padding:10px;background-color:white}.info-popover{max-width:320px}.info-help{padding-top:10px;justify-content:flex-end;display:flex}.info-help-button{display:flex;flex-flow:row-reverse}";

const ArcgisAggregationInfoPopover = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationInfoPopoverClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationInfoPopoverClose", 7);
    this.arcgisAggregationInfoPopoverDisconnected = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationInfoPopoverDisconnected", 7);
    //--------------------------------------------------------------------------
    //
    //  Private Properties
    //
    //--------------------------------------------------------------------------
    this.documentTabHandler = undefined;
    this.documentClickHandler = undefined;
    this.panelScrollHandler = undefined;
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onOpen = () => {
      setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 1);
    };
    this.props = undefined;
    this.referenceElement = undefined;
    this.open = false;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  async setFocus() {
    var _a;
    (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  async setOpen(open) {
    var _a;
    if (this.popoverNode) {
      this.popoverNode.open = open;
      if (open) {
        (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
        this.popoverNode.reposition();
      }
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  disconnectedCallback() {
    // in case popover got removed by just removing node from DOM
    this.arcgisAggregationInfoPopoverDisconnected.emit();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, referenceElement, open } = this;
    const { config, title, moreInfo, helpId, strings } = props;
    const { helpBase, helpMap } = config;
    const header = strings.tile.info.title.replace("${title}", title);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout arcgis-aggregation-popover" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { open: open, placement: "auto", offsetSkidding: 5, label: "", referenceElement: referenceElement, class: "info-popover", onCalcitePopoverOpen: this.onOpen, ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: header, closable: true, ref: (node) => (this.panelNode = node), onCalcitePanelClose: () => {
        this.arcgisAggregationInfoPopoverClose.emit();
        // focus on info icon; wait so enter key doesn't re-open it
        setTimeout(() => referenceElement.parentElement.focus(), 300);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, moreInfo), helpId && helpMap ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-help" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", label: strings.tile.info.learnMore, class: "info-help-button", slot: "footer", onClick: () => {
        window.open(`${helpBase}${helpMap[helpId]}`, "_blank");
      } }, strings.tile.info.learnMore))) : null)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationInfoPopover.style = arcgisAggregationInfoPopoverCss;

const arcgisAggregationSymbolStylerPopoverCss = ".popover{z-index:100}.symbol-styler-div{width:328px;height:100%;overflow-y:auto;overflow-x:hidden}arcgis-symbol-styler{max-height:calc(90vh - 100px);}";

const ArcgisAggregationSymbolStylerPopover = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationSymbolStylerChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationSymbolStylerChange", 7);
    this.arcgisAggregationSymbolStylerPopoverClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationSymbolStylerPopoverClose", 7);
    this.arcgisAggregationSymbolStylerPopoverDisconnected = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationSymbolStylerPopoverDisconnected", 7);
    this.documentTabHandler = undefined;
    this.documentClickHandler = undefined;
    this.panelScrollHandler = undefined;
    this.props = undefined;
    this.referenceElement = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  async setFocus() {
    var _a;
    (_a = this.closeActionNode) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  async setOpen(open) {
    if (this.popoverNode) {
      this.popoverNode.open = open;
      if (open) {
        setTimeout(() => this.closeActionNode.setFocus(), 100);
        //this.popoverNode.reposition();
      }
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [symbolUtils, cimSymbolUtils, Color, SimpleMarkerSymbol, SimpleLineSymbol] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/symbols/support/symbolUtils",
      "esri/symbols/support/cimSymbolUtils",
      "esri/Color",
      "esri/symbols/SimpleMarkerSymbol",
      "esri/symbols/SimpleLineSymbol"
    ]);
    this.modules = {
      symbolUtils,
      cimSymbolUtils,
      Color,
      SimpleMarkerSymbol,
      SimpleLineSymbol
    };
  }
  disconnectedCallback() {
    // in case popover got removed by just removing node from DOM
    this.arcgisAggregationSymbolStylerPopoverDisconnected.emit();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, referenceElement } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout arcgis-aggregation-popover" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { placement: "leading-start", offsetDistance: 0, offsetSkidding: 45, pointerDisabled: true, label: strings.symbolStyle, referenceElement: referenceElement, triggerDisabled: true, class: "popover", open: false,
      //onCalcitePopoverOpen={() => this.onOpen()}
      ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: strings.symbolStyle, closable: false }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, strings.symbolStyle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "header-actions-end", scale: "s", icon: "x", text: "", onClick: () => this.arcgisAggregationSymbolStylerPopoverClose.emit(), ref: (node) => (this.closeActionNode = node) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-styler-div",
      /* class="-symbol-button__symbol-styler-div" */ ref: (node) => this.buildSymbolStyler(node) })))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  async buildSymbolStyler(node) {
    const { props, modules } = this;
    const { layer, portal } = props;
    const { Color } = modules;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    let symbol = featureReduction.symbol;
    if (!isSupportedSymbol(symbol)) {
      symbol = getDefaultSymbol(modules);
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = hasSymbolOutline(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    let stroke;
    if (symbol.type === "simple-marker") {
      const sym = symbol;
      if (sym.outline) {
        stroke = {
          color: sym.outline.color ? sym.outline.color : new Color([0, 0, 0, 0.5]),
          size: sym.outline.width
        };
      }
      else {
        stroke = {
          color: new Color([0, 0, 0, 0.5]),
          size: 1
        };
      }
    }
    else if (symbol.type === "cim") {
      stroke = undefined;
    }
    else {
      stroke = {
        color: new Color([255, 255, 255, 0.5]),
        size: 1
      };
    }
    const symbolStyler = document.createElement("arcgis-symbol-styler");
    symbolStyler.popoverProps = {
      placement: "bottom-end",
      offsetDistance: 10,
      offsetSkidding: rtl ? 3 : -3,
      pointerDisabled: "true",
      popoverWidth: 315,
      //overlayPositioning: "fixed", -- buggy, offset issue
      refElement: this.closeActionNode
    };
    const edit = symbolStyler.edit(symbol.clone(), {
      portal,
      symbolFilter: undefined,
      sections: {
        marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
          ? {
            open: true,
            symbolsOpen: true,
            sizeOpen: true,
            parts: {
              size: false
            },
            markerType: "all"
          }
          : undefined,
        fill: {
          type: "color",
          optional: true,
          open: true,
          suggestedColorsOpen: true,
          transparencyOpen: isPictureMarker(symbol, modules)
        },
        stroke: {
          type: "color",
          optional: true,
          extraParts: {
            style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
            width: true
          }
        }
      },
      fill: {
        color: getSymbolColor(symbol, modules) || adjustAlpha(new Color("#ff8200"), 0.85)
      },
      marker: {
        size: getSymbolSize(symbol, modules)
      },
      stroke,
      fillEnabled,
      strokeEnabled
    });
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", (detail) => this.onChangeSymbol(detail));
    node.appendChild(symbolStyler);
    await edit;
  }
  onChangeSymbol({ detail: { symbol } }) {
    const { props } = this;
    const { layer } = props;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    featureReduction.symbol = symbol;
    this.arcgisAggregationSymbolStylerChange.emit();
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationSymbolStylerPopover.style = arcgisAggregationSymbolStylerPopoverCss;

const arcgisAggregationTileCss = ".tile{background-color:white;position:relative;margin:6px;cursor:pointer;box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px #e0e0e0;transition:box-shadow 125ms ease-in-out}.tile:hover{z-index:5;box-shadow:0 1px 0 2px rgba(0, 0, 0, 0.05), 0 0 0 1px #e0e0e0}.tile:focus{outline:2px solid var(--calcite-ui-brand)}.tile-selected{box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px var(--calcite-ui-brand)}.tile-selected:hover{z-index:5;box-shadow:0 1px 0 2px rgba(0, 0, 0, 0.05), 0 0 0 1px var(--calcite-ui-brand)}.tile-check{position:absolute;top:10px;right:10px}.tile-check.rtl{right:auto;left:10px}.style-link{padding:9px 9px}.style-link-icon{margin-top:-1px}.style-link-text{margin-right:10px}.style-link-text.rtl{margin-right:0;margin-left:10px}.style-link-title{display:flex;font-weight:bold;padding-bottom:5px}.style-link-options{color:#0079c1;display:flex;flex-direction:row nowrap}.style-link-options svg{fill:#0079c1}.tile-image{height:100px;width:100%;background-size:cover;display:flex;align-items:center;justify-content:center}.tile-image-selected{height:68px;background-size:auto 100px}.style-sub-text{font-size:80%;padding:0 0 6px 0}.style-link-info{height:18px}";

const ArcgisAggregationTile = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAggregationTileSelect = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationTileSelect", 7);
    this.arcgisAggregationTileOptions = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationTileOptions", 7);
    //--------------------------------------------------------------------------
    //
    //  Private Properties
    //
    //--------------------------------------------------------------------------
    this.documentClickHandler = undefined;
    this.panelScrollHandler = undefined;
    this.keyupEventHandler = (event) => {
      const { selected } = this;
      if (event.key === " " || event.key === "Enter") {
        event.stopPropagation();
        this.removeInfoPopover();
        // use latest handler on props
        selected ? this.arcgisAggregationTileOptions.emit() : this.arcgisAggregationTileSelect.emit();
        event.preventDefault();
      }
    };
    this.keydownEventHandler = (event) => {
      if (event.key === " ") {
        // don't scroll panel
        event.stopPropagation();
        event.preventDefault();
      }
    };
    this.clickEventHandler = (event) => {
      var _a;
      const { selected } = this;
      if (((_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.nodeName) === "CALCITE-CHECKBOX") {
        // user clicked on checkbox; we handled this below
        return;
      }
      event.stopPropagation();
      this.removeInfoPopover();
      // use latest handler on props
      selected ? this.arcgisAggregationTileOptions.emit() : this.arcgisAggregationTileSelect.emit();
      event.preventDefault();
    };
    this.checkboxChangeHandler = (event) => {
      const { selected } = this;
      event.preventDefault();
      const node = event.target;
      if (!node.checked) {
        // we don't allow users to uncheck the box
        node.checked = true;
      }
      else {
        this.removeInfoPopover();
        // use latest handler on props
        selected ? this.arcgisAggregationTileOptions.emit() : this.arcgisAggregationTileSelect.emit();
      }
    };
    this.props = undefined;
    this.selected = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Set focus on tile
   */
  async setFocus() {
    var _a;
    (_a = this.tileNode) === null || _a === void 0 ? void 0 : _a.focus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  disconnectedCallback() {
    this.removeInfoPopover();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, selected } = this;
    const { title, imagePath, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    const styleTileClasses = {
      tile: true,
      "tile-selected": selected
    };
    const styleTileImageClasses = {
      "tile-image": true,
      "tile-image-selected": selected
    };
    const styleTileCheckClasses = {
      "tile-check": true,
      rtl: rtl
    };
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileClasses, role: "button", tabindex: "0", "aria-label": `${title} ${strings.tile.options}`, "aria-selected": selected, ref: (element) => {
        this.tileNode = element;
        this.addTileListeners(element);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileImageClasses, style: { backgroundImage: `url(${imagePath})` }, "aria-hidden": "true" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileCheckClasses, "aria-label": "", "aria-hidden": "true" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { name: "style-tile-check-name", checked: selected, tabindex: "-1", ref: (element) => this.addCheckboxListener(element) })), this.renderTileLink())));
  }
  renderTileLink() {
    const { props, selected } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
    const styleLinkTextClasses = {
      "style-link-text": true,
      rtl: rtl
    };
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-link", "aria-label": props.title }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-link-title" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleLinkTextClasses, "aria-hidden": "true" }, props.title), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: "style-link-info", tabindex: "0", scale: "s", icon: "information", compact: true, onClick: (event) => this.handleInfoClick(event), text: strings.tile.moreInfo, ref: (element) => {
        this.infoIconNode = element;
        element.addEventListener("keyup", (event) => {
          event.stopPropagation();
          if (event.key === " " || (!this.infoPopoverNode && event.key === "Enter")) {
            this.handleInfoClick(event);
          }
        });
        element.addEventListener("keydown", (event) => {
          if (event.key === " ") {
            // prevent panel from scrolling
            event.stopPropagation();
            event.preventDefault();
          }
        });
      } })), selected && this.renderStyleOptions()));
  }
  renderStyleOptions() {
    const { props } = this;
    const { strings } = props;
    // event handling for button click is handled as tile click
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", width: "full", scale: "s", label: strings.tile.options }, strings.tile.options));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  handleInfoClick(event) {
    // don't execute the event on the entire tile
    event.stopPropagation();
    const { props } = this;
    const { config, title, moreInfo, helpId, flowItemNode, strings } = props;
    this.removeInfoPopover();
    this.infoPopoverNode = document.createElement("arcgis-aggregation-info-popover");
    this.infoPopoverNode.props = {
      title,
      moreInfo,
      helpId,
      config,
      flowItemNode,
      strings
    };
    this.infoPopoverNode.referenceElement = this.infoIconNode;
    this.infoPopoverNode.addEventListener("arcgisAggregationInfoPopoverClose", (event) => {
      event.stopPropagation();
      this.removeInfoPopover();
      setTimeout(() => this.infoIconNode.setFocus(), 200);
    });
    this.infoPopoverNode.addEventListener("arcgisAggregationInfoPopoverDisconnected", (event) => {
      event.stopPropagation();
      this.removeInfoPopover();
    });
    document.body.appendChild(this.infoPopoverNode);
    this.infoPopoverNode.setOpen(true);
    // need to wait until it's all visible
    setTimeout(() => this.infoPopoverNode.setFocus(), 100);
    setTimeout(() => {
      // close popover when clicking outside
      this.documentClickHandler = (event) => {
        if (!this.isInsideInfoPopoverNode(event.target)) {
          this.removeInfoPopover();
          setTimeout(() => this.infoIconNode.setFocus(), 200);
        }
      };
      document.addEventListener("click", this.documentClickHandler);
      // click handler is not called when clicking or scrolling panel scrollbars
      this.panelScrollHandler = () => {
        this.removeInfoPopover();
      };
      flowItemNode === null || flowItemNode === void 0 ? void 0 : flowItemNode.addEventListener("calciteFlowItemScroll", this.panelScrollHandler);
    }, 100);
  }
  removeInfoPopover() {
    const { props } = this;
    const { flowItemNode } = props;
    // close popovers
    document.body
      .querySelectorAll(".arcgis-aggregation-popover")
      .forEach((node) => document.body.removeChild(node));
    this.infoPopoverNode = null;
    if (this.documentClickHandler) {
      document.removeEventListener("click", this.documentClickHandler);
      this.documentClickHandler = undefined;
    }
    if (this.panelScrollHandler) {
      flowItemNode === null || flowItemNode === void 0 ? void 0 : flowItemNode.removeEventListener("calciteFlowItemScroll", this.panelScrollHandler);
      this.panelScrollHandler = undefined;
    }
  }
  isInsideInfoPopoverNode(node) {
    if ((node === null || node === void 0 ? void 0 : node.tagName) === "ARCGIS-AGGREGATION-INFO-POPOVER") {
      return true;
    }
    else {
      let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
      while (parentNode) {
        if (parentNode.tagName === "ARCGIS-AGGREGATION-INFO-POPOVER") {
          return true;
        }
        else {
          parentNode = parentNode.parentElement;
        }
      }
    }
    return false;
  }
  addTileListeners(element) {
    element.addEventListener("keyup", this.keyupEventHandler);
    element.addEventListener("keydown", this.keydownEventHandler);
    element.addEventListener("click", this.clickEventHandler);
  }
  addCheckboxListener(element) {
    element.addEventListener("calciteCheckboxChange", this.checkboxChangeHandler);
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationTile.style = arcgisAggregationTileCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,