"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-72ce2d"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-color-contrast_8.entry.js":
/*!**************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-color-contrast_8.entry.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_color_contrast: () => (/* binding */ ArcgisColorContrast),
/* harmony export */   arcgis_color_edit: () => (/* binding */ ArcgisColorEdit),
/* harmony export */   arcgis_color_swatch: () => (/* binding */ ArcgisColorSwatch),
/* harmony export */   arcgis_color_text_input: () => (/* binding */ ArcgisColorTextInput),
/* harmony export */   arcgis_configure_colors_table: () => (/* binding */ ArcgisConfigureColorsTable),
/* harmony export */   arcgis_contrast_preview: () => (/* binding */ ArcgisContrastPreview),
/* harmony export */   arcgis_preset_colors: () => (/* binding */ ArcgisPresetColors),
/* harmony export */   arcgis_shared_theme_colors: () => (/* binding */ ArcgisSharedThemeColors)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */







function checkContrast(a, b) {
  // complete shorthand hex codes
  a = expandHexAbbr(a);
  b = expandHexAbbr(b);
  const lum = [a, b].map(hexRgb).map(relativeLuminance);
  const contrast = luminance(lum[0], lum[1]);
  return {
    contrast,
    passesDoubleA: contrast >= 4.5
  };
}
function expandHexAbbr(hex) {
  if (hex.length !== 4) {
    return hex;
  }
  const h = hex.split("");
  return `#${h[1]}${h[1]}${h[2]}${h[2]}${h[3]}${h[3]}`;
}
function hexRgb(hex) {
  hex = hex.replace(/^#/, "");
  const alpha = 255;
  const num = parseInt(hex, 16);
  const red = num >> 16;
  const green = (num >> 8) & 255;
  const blue = num & 255;
  return [red, green, blue, alpha];
}
function relativeLuminance(rgb) {
  const rc = 0.2126;
  const gc = 0.7152;
  const bc = 0.0722;
  const lowc = 1 / 12.92;
  const rsrgb = rgb[0] / 255;
  const gsrgb = rgb[1] / 255;
  const bsrgb = rgb[2] / 255;
  const r = rsrgb <= 0.03928 ? rsrgb * lowc : adjustGamma(rsrgb), g = gsrgb <= 0.03928 ? gsrgb * lowc : adjustGamma(gsrgb), b = bsrgb <= 0.03928 ? bsrgb * lowc : adjustGamma(bsrgb);
  return r * rc + g * gc + b * bc;
}
function adjustGamma(x) {
  return Math.pow((x + 0.055) / 1.055, 2.4);
}
function luminance(a, b) {
  const l1 = Math.max(a, b);
  const l2 = Math.min(a, b);
  return (l1 + 0.05) / (l2 + 0.05);
}

const arcgisColorContrastCss = ".color-contrast{--calcite-modal-width:830px}.contrast-warning-modal{--calcite-modal-width:415px}.color-contrast__modal-content{padding:var(--arcgis-app-cap-spacing-half);position:relative;min-height:500px}.color-contrast__container{display:flex}@media screen and (max-width: 640px){.color-contrast__container{flex-direction:column}}.config-color-panel{flex:1 1 auto;min-width:0;margin-right:var(--arcgis-app-side-spacing-double);width:50%}@media screen and (max-width: 640px){.config-color-panel{width:100%}}.color-contrast__preview-panel{width:45%;flex:1 1 auto;min-width:0;display:flex;flex-direction:column}@media screen and (max-width: 640px){.color-contrast__preview-panel{width:100%}}.color-contrast__color-picker-container{position:absolute;left:50%}.hide{display:none}html[dir=rtl] .config-color-panel{margin-right:0;margin-left:var(--arcgis-app-side-spacing-double)}";

const ArcgisColorContrast = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.save = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "save", 7);
    this.cancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "cancel", 7);
    this.handleProceedAnayway = () => {
      this.showWarning = false;
      this.proceedToSave();
    };
    this.handleAcceptWarning = () => {
      this.showWarning = false;
    };
    this.handleSaveClick = () => {
      const hasInvalid = Object.keys(this.colorValues).some((key) => !this.colorValues[key].isBackground && !this.colorValues[key].isValidContrast);
      if (hasInvalid) {
        this.showWarning = true;
        return;
      }
      this.proceedToSave();
    };
    this.proceedToSave = () => {
      const colorResults = {};
      Object.keys(this.colorValues).forEach((key) => {
        colorResults[key] = Object.assign({}, this.colorValues[key]);
        delete colorResults[key].isBackground;
        delete colorResults[key].isLink;
      });
      this.save.emit({
        textResults: Object.assign({}, this.textValues),
        colorResults
      });
    };
    this.handleCancelClick = () => {
      this.cancel.emit();
      this.isActive = false;
    };
    this.handleEditColorClick = async (evt) => {
      this.editingKey = evt.detail;
      this.showColorPicker = true;
      await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_2__.t)(100);
      this.colorPickerEl.setFocus();
    };
    this.handleColorPickerChange = (evt) => {
      if (this.colorValues[this.editingKey].color !== evt.target.value) {
        this.setColorValue(evt.target.value);
      }
    };
    this.handlePresetColorSelect = (evt) => {
      this.setColorValue(evt.detail);
    };
    this.handleTextInputChange = (evt) => {
      const { key, value } = evt.detail;
      this.textValues = Object.assign(Object.assign({}, this.textValues), { [key]: value });
    };
    this.handleModalClose = () => {
      this.isActive = false;
    };
    this.modalTitle = "";
    this.colorConfigs = undefined;
    this.textInputConfigs = undefined;
    this.sharedTheme = undefined;
    this.isActive = true;
    this.showColorPicker = false;
    this.colorValues = {};
    this.textValues = {};
    this.editingKey = "";
    this.showWarning = false;
  }
  // Public Methods
  async open() {
    this.isActive = true;
  }
  async close() {
    this.isActive = false;
  }
  handleBodyClick(evt) {
    if (!this.showColorPicker) {
      return;
    }
    if (!this.colorPickerContainer || evt.path.indexOf(this.colorPickerContainer) === -1) {
      this.showColorPicker = false;
    }
  }
  setColorValue(color) {
    var _a;
    const updateValue = (key, props) => {
      const value = this.colorValues[key];
      this.colorValues = Object.assign(Object.assign({}, this.colorValues), { [key]: Object.assign(Object.assign({}, value), props) });
    };
    const colorValue = this.colorValues[this.editingKey];
    if (colorValue.isBackground) {
      this.colorValues = Object.assign(Object.assign({}, this.colorValues), { [this.editingKey]: Object.assign(Object.assign({}, colorValue), { color }) });
      Object.keys(this.colorValues).forEach((key) => {
        const value = this.colorValues[key];
        if (value.isBackground) {
          return;
        }
        const { contrast, passesDoubleA } = checkContrast(color, value.color);
        updateValue(key, { contrastRatio: +contrast.toFixed(1), isValidContrast: passesDoubleA });
      });
      return;
    }
    const backgroundConfig = this.getBackgroundConfig();
    const backgroundColor = (_a = this.colorValues[backgroundConfig.key]) === null || _a === void 0 ? void 0 : _a.color;
    const { contrast, passesDoubleA } = checkContrast(backgroundColor, color);
    updateValue(this.editingKey, {
      color,
      contrastRatio: +contrast.toFixed(1),
      isValidContrast: passesDoubleA
    });
  }
  getBackgroundConfig() {
    return this.colorConfigs.find((config) => config.isBackground);
  }
  async componentWillLoad() {
    var _a;
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
    this.i18n = locale[0];
    this.colorValues = this.colorConfigs.reduce((acc, { key, defaultColor, isBackground, isLink }) => {
      acc[key] = {
        color: defaultColor,
        isBackground,
        isLink
      };
      return acc;
    }, {});
    const backgroundConfig = this.getBackgroundConfig();
    if (!backgroundConfig) {
      return;
    }
    const backgroundColor = (_a = this.colorValues[backgroundConfig.key]) === null || _a === void 0 ? void 0 : _a.color;
    Object.keys(this.colorValues).forEach((key) => {
      const value = this.colorValues[key];
      if (value.isBackground) {
        return;
      }
      const { contrast, passesDoubleA } = checkContrast(value.color, backgroundColor);
      value.contrastRatio = +contrast.toFixed(1);
      value.isValidContrast = passesDoubleA;
    });
    this.textInputConfigs.forEach((config) => {
      this.textValues[config.key] = config.defaultValue || "";
    });
  }
  render() {
    var _a;
    const backgroundConfig = this.getBackgroundConfig();
    const linkConfig = this.colorConfigs.filter((config) => config.isLink)[0];
    const otherConfigs = this.colorConfigs.filter((config) => !config.isBackground && !config.isLink);
    const backgroundColor = backgroundConfig ? this.colorValues[backgroundConfig.key].color : "";
    if (!backgroundConfig) {
      return;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { open: this.isActive, class: "color-contrast", onCalciteModalClose: this.handleModalClose }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { slot: "header" }, this.modalTitle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "color-contrast__modal-content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-contrast__container" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "config-color-panel" }, this.textInputConfigs.map((config) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-text-input", { key: config.key, keyValue: config.key, label: config.label, defaultValue: config.defaultValue, onInputChange: this.handleTextInputChange }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-configure-colors-table", { i18n: this.i18n, backgroundConfig: backgroundConfig, otherConfigs: otherConfigs, linkConfig: linkConfig, colorValues: this.colorValues, onEditClick: this.handleEditColorClick })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-contrast__preview-panel" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.i18n.preview), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-contrast-preview", { backgroundColor: backgroundColor, textColorConfigs: otherConfigs, linkConfig: linkConfig, colorValues: this.colorValues })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        "color-contrast__color-picker-container": true,
        hide: !this.showColorPicker
      }, ref: (el) => (this.colorPickerContainer = el) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker", { scale: "s", value: (_a = this.colorValues[this.editingKey]) === null || _a === void 0 ? void 0 : _a.color, hideSaved: true, ref: (el) => (this.colorPickerEl = el), onCalciteColorPickerInput: this.handleColorPickerChange }), this.sharedTheme && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-shared-theme-colors", { sharedTheme: this.sharedTheme, i18n: this.i18n, onSelectColor: this.handlePresetColorSelect }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-preset-colors", { i18n: this.i18n, onSelectColor: this.handlePresetColorSelect }))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "outline-fill", onClick: this.handleCancelClick }, this.i18n.cancel), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", onClick: this.handleSaveClick }, this.i18n.save)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { open: this.showWarning, kind: "danger", class: "contrast-warning-modal" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { slot: "header", class: "trailer-0 font-size-1" }, this.i18n.contrastWarning.title), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content" }, this.i18n.contrastWarning.description), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", onClick: this.handleAcceptWarning }, this.i18n.contrastWarning.editColors), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", kind: "danger", appearance: "transparent", onClick: this.handleProceedAnayway }, this.i18n.contrastWarning.proceedAnyway))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisColorContrast.style = arcgisColorContrastCss;

const arcgisColorEditCss = ".color-edit-container{padding:var(--arcgis-app-side-spacing-quarter);display:flex;align-items:center;cursor:pointer}.color-tile{border:1px solid #a9a9a9;width:30px;height:30px;margin-right:var(--arcgis-app-side-spacing-three-quarters)}.color-edit__label-value{flex:1 1 auto;min-width:0;text-align:start}.color-edit-label{font-size:var(--arcgis-app-font-size--2);font-weight:normal}.color-edit-value{font-size:var(--arcgis-app-font-size--1);font-weight:var(--arcgis-app-font-weight-demi)}.color-edit-icon{margin-right:var(--arcgis-app-side-spacing-three-quarters)}html[dir=rtl] .color-tile{margin-right:0;margin-left:var(--arcgis-app-side-spacing-three-quarters)}html[dir=rtl] .color-edit-icon{margin-right:0;margin-left:var(--arcgis-app-side-spacing-three-quarters)}";

const ArcgisColorEdit = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.colorEditClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "colorEditClick", 7);
    this.handleClick = (evt) => {
      evt === null || evt === void 0 ? void 0 : evt.stopPropagation();
      this.colorEditClick.emit(this.editKey);
    };
    this.handleKeyup = (event) => {
      if (event.key === " " || event.key === "Enter") {
        event.preventDefault();
        this.handleClick(event);
      }
    };
    this.editKey = "";
    this.labelText = "";
    this.colorValue = "";
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-edit-container", tabIndex: 0, onClick: this.handleClick, onKeyUp: this.handleKeyup }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-tile", style: { backgroundColor: this.colorValue } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-edit__label-value" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-edit-label" }, this.labelText), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-edit-value " }, this.colorValue)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-edit-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "pencil" }))));
  }
};
ArcgisColorEdit.style = arcgisColorEditCss;

const arcgisColorSwatchCss = ".color-swatch{display:inline-block;height:16px;width:16px;box-sizing:border-box;margin-right:2px;overflow:hidden}";

const ArcgisColorSwatch = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.swatchClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "swatchClick", 7);
    this.handleClick = () => {
      this.swatchClick.emit(this.color);
    };
    this.handleKeyUp = (event) => {
      if (event.key === " " || event.key === "Enter") {
        this.handleClick();
      }
    };
    this.color = "";
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-swatch", onClick: this.handleClick, onKeyUp: this.handleKeyUp, tabIndex: 0 }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { width: "16", height: "16" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { width: "16", height: "16", fill: this.color }))));
  }
};
ArcgisColorSwatch.style = arcgisColorSwatchCss;

const ArcgisColorTextInput = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.inputChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "inputChange", 7);
    this.handleInputChange = (evt) => {
      const node = evt.target;
      this.value = node.value;
      this.inputChange.emit({
        key: this.keyValue,
        value: node.value
      });
    };
    this.keyValue = undefined;
    this.label = undefined;
    this.defaultValue = undefined;
    this.value = "";
  }
  componentWillLoad() {
    if (this.defaultValue) {
      this.value = this.defaultValue;
    }
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.label, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { value: this.value, onCalciteInputInput: this.handleInputChange, scale: "s" })));
  }
};

const ColorRow = ({ key, colorConfig, color, contrastRatio, isValidContrast, i18n, onColorEditClick }) => {
  return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("tr", { "data-key": key },
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", { class: "color-contrast__color-col" },
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-edit", { editKey: colorConfig.key, labelText: colorConfig.label, colorValue: color, onColorEditClick: onColorEditClick })),
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", { class: "color-contrast__ratio-col" }, contrastRatio),
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", { class: "color-contrast__legibility-col" },
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-row__legibility" }, isValidContrast ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null,
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "check-circle-f", class: "color-contrast--valid" }),
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-contrast__legible-label" }, i18n.legible))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null,
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x-circle-f", class: "color-contrast--invalid" }),
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "color-contrast__legible-label" }, i18n.notLegible)))))));
};

const arcgisConfigureColorsTableCss = ".config-color-table{width:100%;border-collapse:collapse}th,td{border:1px solid #dddd;text-align:center;font-size:var(--arcgis-app-font-size--1)}.color-contrast__legibility-col{padding:0.5rem;text-align:start;width:6rem}.color-contrast--valid{color:green}.color-contrast--invalid{color:red}.color-row__legibility{display:flex;align-items:center}.color-contrast__legible-label{margin:0 0.5rem}.contrast-info{font-size:0.8rem}";

const ArcgisConfigureColorsTable = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.editClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "editClick", 7);
    this.handleEditClick = (evt) => {
      this.editClick.emit(evt.detail);
    };
    this.i18n = undefined;
    this.backgroundConfig = undefined;
    this.otherConfigs = undefined;
    this.linkConfig = undefined;
    this.colorValues = {};
  }
  render() {
    var _a;
    const backgroundColor = this.colorValues[this.backgroundConfig.key].color;
    const linkValue = this.colorValues[(_a = this.linkConfig) === null || _a === void 0 ? void 0 : _a.key];
    const linkColor = (linkValue === null || linkValue === void 0 ? void 0 : linkValue.color) || "";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.i18n.configure, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("table", { class: "config-color-table" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("thead", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("tr", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("th", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-edit", { editKey: this.backgroundConfig.key, labelText: this.backgroundConfig.label || this.i18n.background, colorValue: backgroundColor, onColorEditClick: this.handleEditClick })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("th", { class: "color-edit-label" }, this.i18n.contrastRatio), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("th", { class: "color-edit-label" }, this.i18n.legibility))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("tbody", null, this.otherConfigs.map((config) => {
      const { color, contrastRatio, isValidContrast } = this.colorValues[config.key];
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(ColorRow, { key: config.key, colorConfig: config, color: color, contrastRatio: contrastRatio, isValidContrast: isValidContrast, i18n: this.i18n, onColorEditClick: this.handleEditClick }));
    }), this.linkConfig && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(ColorRow, { key: this.linkConfig.key, colorConfig: this.linkConfig, color: linkColor, contrastRatio: linkValue === null || linkValue === void 0 ? void 0 : linkValue.contrastRatio, isValidContrast: linkValue === null || linkValue === void 0 ? void 0 : linkValue.isValidContrast, i18n: this.i18n, onColorEditClick: this.handleEditClick })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "contrast-info" }, this.i18n.contrastInfo)));
  }
};
ArcgisConfigureColorsTable.style = arcgisConfigureColorsTableCss;

const arcgisContrastPreviewCss = ".contrast-preview{padding:1rem;flex:1 1 auto;min-width:0}.contrast-preview h2,.contrast-preview p,.contrast-preview button{margin-bottom:1rem;margin-top:0}";

const ArcgisContrastPreview = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.backgroundColor = "";
    this.textColorConfigs = undefined;
    this.linkConfig = undefined;
    this.colorValues = undefined;
  }
  renderLinkConfig() {
    var _a;
    if (!((_a = this.linkConfig) === null || _a === void 0 ? void 0 : _a.preview)) {
      return;
    }
    const { preview } = this.linkConfig;
    if (preview.isButton) {
      return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", null, preview.text);
    }
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, preview.text);
  }
  render() {
    var _a;
    const linkColor = this.colorValues[(_a = this.linkConfig) === null || _a === void 0 ? void 0 : _a.key].color || "#00a0ff";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("style", { innerHTML: `.contrast-preview a {
          color: ${linkColor || "inherit"};
        } .contrast-preview button {
          color: ${linkColor || "inherit"};
          border: ${linkColor ? `1px solid ${linkColor}` : "inherit"};
          background: ${linkColor ? "none" : "inherit"};
          padding: 0.375rem 1rem;
        }` }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "contrast-preview", style: { backgroundColor: this.backgroundColor } }, this.textColorConfigs.map(({ preview, key }) => {
      const { color } = this.colorValues[key];
      if (!preview) {
        return;
      }
      if (preview.isHeading) {
        return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("h2", { style: { color }, innerHTML: preview.text });
      }
      return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { style: { color }, innerHTML: preview.text });
    }), this.renderLinkConfig())));
  }
};
ArcgisContrastPreview.style = arcgisContrastPreviewCss;

const arcgisPresetColorsCss = ".preset-colors{max-width:160px;padding:8px 16px;background-color:#fff;border:1px solid #ccc;border-top:none;box-sizing:border-box}.preset-colors .preset-colors__title{font-size:0.825rem}.preset-colors .preset-row{max-height:16px;margin-bottom:2px}";

const ArcgisPresetColors = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.selectColor = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "selectColor", 7);
    this.presetColors = {
      brown: ["f2ece6", "7c410a", "3e2105"],
      blue: ["e5f1f9", "0079c1", "003d61"],
      green: ["e9f3ea", "288835", "14441b"],
      yellow: ["fefced", "f9e54e", "7d7327"],
      orange: ["fef5e9", "f89927", "7c4d14"],
      red: ["fbeae8", "d83020", "6c1810"],
      violet: ["efebf5", "633b9b", "321e4e"]
    };
    this.handleSwatchClick = (evt) => {
      this.selectColor.emit(evt.detail);
    };
    this.i18n = undefined;
  }
  render() {
    const colorRows = [];
    for (let i = 2; i >= 0; i--) {
      const row = [];
      Object.keys(this.presetColors).forEach((key) => {
        const colorArr = this.presetColors[key];
        row.push(`#${colorArr[i]}`);
      });
      colorRows.push(row);
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "preset-colors" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "preset-colors__title" }, this.i18n.presetColors), colorRows.map((row) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "preset-row" }, row.map((color) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-swatch", { key: color, color: color, onSwatchClick: this.handleSwatchClick }))))))));
  }
};
ArcgisPresetColors.style = arcgisPresetColorsCss;

const arcgisSharedThemeColorsCss = ".shared-theme{max-width:160px;padding:8px 16px;background-color:#fff;border:1px solid #ccc;border-top:none;box-sizing:border-box}.shared-theme-colors__title{font-size:0.825rem}.shared-theme__row{max-height:16px;margin-bottom:2px}";

const ArcgisSharedThemeColors = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.selectColor = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "selectColor", 7);
    this.handleSwatchClick = (evt) => {
      this.selectColor.emit(evt.detail);
    };
    this.i18n = undefined;
    this.sharedTheme = undefined;
  }
  render() {
    if (!this.sharedTheme) {
      return;
    }
    const colors = {};
    Object.keys(this.sharedTheme).forEach((key) => {
      if (!this.sharedTheme[key]) {
        return;
      }
      const { background, text, link } = this.sharedTheme[key];
      if (background) {
        colors[background] = true;
      }
      if (text) {
        colors[text] = true;
      }
      if (link) {
        colors[link] = true;
      }
    });
    if (!Object.keys(colors).length) {
      return;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "shared-theme" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "shared-theme-colors__title" }, this.i18n.sharedTheme), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "shared-theme__row" }, Object.keys(colors).sort().map((color) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-swatch", { key: color, color: color, onSwatchClick: this.handleSwatchClick }))))));
  }
};
ArcgisSharedThemeColors.style = arcgisSharedThemeColorsCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,