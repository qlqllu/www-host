"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-7b7029"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-browser_10.entry.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-browser_10.entry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_browser: () => (/* binding */ ArcgisBrowser),
/* harmony export */   arcgis_browser_actions: () => (/* binding */ ArcgisBrowserActions),
/* harmony export */   arcgis_browser_filter: () => (/* binding */ ArcgisBrowserFilter),
/* harmony export */   arcgis_browser_filter_date: () => (/* binding */ ArcgisBrowserFilterDate),
/* harmony export */   arcgis_browser_filter_status: () => (/* binding */ ArcgisBrowserFilterStatus),
/* harmony export */   arcgis_browser_filters: () => (/* binding */ ArcgisItemBrowserFilters),
/* harmony export */   arcgis_browser_pagination: () => (/* binding */ ArcgisBrowserPagination),
/* harmony export */   arcgis_browser_search: () => (/* binding */ ArcgisBrowserSearch),
/* harmony export */   arcgis_browser_sort: () => (/* binding */ ArcgisBrowserSort),
/* harmony export */   arcgis_browser_top_bar: () => (/* binding */ ArcgisBrowserTopBar)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resize-55d3c55c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-55d3c55c.js");
/* harmony import */ var _store_ff04ba0a_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./store-ff04ba0a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-ff04ba0a.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _utils_b22dfe9c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils-b22dfe9c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-b22dfe9c.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */










/** Get the human readable number values for a given search pagination result */
function calculatePageBoundaries({ start, num, total }) {
  start = Math.min(start, total);
  total = Math.min(total, 10000);
  const end = Math.min(total, Math.max(start + num - 1, 0));
  return {
    start,
    end,
    total
  };
}

const arcgisBrowserCss = ":host{position:relative;background-color:var(--calcite-ui-background);display:flex;flex-direction:column;height:100%;overflow-y:auto;overflow-x:hidden;--arcgis-browser-max-width:100%;--arcgis-browser-pane-width:18.75rem;--arcgis-browser-pane-z-index:11}:host([height=auto]){min-height:100%;height:auto;flex:1 1 100%}.wrapper{display:flex;flex-direction:column;height:100%;overflow:hidden}.wrapper--fixed{overflow:hidden}.wrapper--auto{flex:1 1 100%}.wrapper--full{transform:translate(0, 0)}.panel{height:100%;overflow:hidden;display:flex;flex-direction:column}.top-bar{top:0;right:0;left:0;position:sticky;z-index:20;flex-grow:0;flex-shrink:0;border-bottom:1px solid var(--calcite-ui-border-3)}.scrolling{display:flex;flex-direction:column;flex:1 1 0%;min-height:0;width:100%;position:relative}.scrolling--full{overflow-y:scroll}.preview-position{position:absolute;width:100%;top:0;right:0;bottom:0;left:0;margin-left:auto;margin-right:auto;max-width:var(--arcgis-browser-max-width)}.preview-position--with-top-bar{top:3rem}.two-up{display:flex;flex-direction:row;margin-left:auto;margin-right:auto;width:100%;flex:1 1 auto;max-width:var(--arcgis-browser-max-width)}.two-up.small{margin-top:-1px}.content{flex:1 1 0%;min-width:0;position:relative;display:flex;overflow:hidden}.content__top{padding-top:1.25rem;padding-bottom:0.75rem;font-size:0.875rem;color:var(--calcite-ui-text-1);display:flex;flex-grow:0;align-items:center;height:1.5rem;position:relative;justify-content:space-between;z-index:10;z-index:2}.content__top__end{-webkit-margin-start:auto;margin-inline-start:auto;display:grid;grid-gap:0.5rem;gap:0.5rem;grid-template-columns:auto auto}.actions{flex:1 1 0%}.filter-status{flex:1 1 0%}.content__view{min-width:0;flex:1 1 0%;-webkit-padding-end:1rem;padding-inline-end:1rem;-webkit-padding-start:1.5rem;padding-inline-start:1.5rem;-webkit-margin-end:0.25rem;margin-inline-end:0.25rem}.content__view--padded-bottom{padding-bottom:1rem}.content__view--no-filters{-webkit-padding-start:1rem;padding-inline-start:1rem;-webkit-margin-start:0.25rem;margin-inline-start:0.25rem}.pane{display:flex;background-color:var(--calcite-ui-background);pointer-events:none;height:100%;visibility:hidden;opacity:0;transition-duration:var(--calcite-internal-animation-timing-medium);transition-property:transform, visibility, opacity;border-left:1px solid var(--calcite-ui-border-3);border-right:1px solid var(--calcite-ui-border-3)}.pane--open{pointer-events:auto;opacity:1;visibility:visible;transform:translate(0);box-shadow:4px 0px 16px 0px rgba(0, 0, 0, 0.06)}.preview{flex-grow:0;flex-shrink:0;width:0;position:absolute;top:0;bottom:0;inset-inline-start:0;transition-duration:var(--calcite-internal-animation-timing-medium);transition-property:width;z-index:var(--arcgis-browser-pane-z-index)}.preview--fixed{position:fixed}.preview--active{overflow:auto;width:var(--arcgis-browser-pane-width);box-shadow:rgba(0, 0, 0, 0.06) 4px 0px 16px 0px}.filter-panel,.preview-panel{height:100%;background-color:var(--calcite-ui-background);position:relative}.filter-panel__content{padding-top:0.75rem;padding-left:1rem;padding-right:1rem;padding-bottom:0}.filter-status--mobile{width:100%}.filter-status--active{display:block}.sheet{position:fixed;top:0;right:0;bottom:0;left:0;pointer-events:none;z-index:110}.sheet__background{position:absolute;top:0;right:0;bottom:0;left:0;opacity:0;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;background-color:rgba(0, 0, 0, 0.2)}.sheet--active .sheet__background{opacity:1}.sheet--active{opacity:1;pointer-events:auto}.sheet__contents{position:absolute;top:0;right:0;bottom:0;left:0;opacity:0;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;top:3rem;transform:translate3d(0, 24px, 0)}.sheet--active .sheet__contents{opacity:1;transform:translate3d(0, 0, 0)}.hide{display:none}.aria-hidden{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0;position:absolute;top:0;bottom:0;width:0;inset-inline-end:0}.content__view--flex{display:flex;flex-direction:column}.cover{flex:1 1 0%;display:flex;justify-content:center;align-items:flex-start;overflow:auto;padding-bottom:1rem;padding-top:0.25rem}.no-results{font-size:0.875rem;color:var(--calcite-ui-text-2);max-width:28rem;margin-left:auto;margin-right:auto;padding-left:1.5rem;padding-right:1.5rem}.results-wrapper{flex:1 1 0%}.loader{--calcite-loader-padding:0}.filters{width:16rem;flex-grow:0;box-sizing:border-box;width:var(--arcgis-browser-pane-width);-webkit-padding-start:1.5rem;padding-inline-start:1.5rem;-webkit-padding-end:0;padding-inline-end:0}.filters--sticky{position:sticky;top:0;height:100%}.filters__content{overflow-y:auto;height:100%;padding-top:1.5rem;box-sizing:border-box;scrollbar-gutter:stable}.filters--empty{display:none}.filters--active{opacity:1;overflow-y:auto;transform:translate3d(0, 0, 0)}.filters__title{font-weight:500;font-size:0.875rem;color:var(--calcite-ui-text-1);padding-bottom:1rem;padding-top:0;margin-bottom:1rem;margin-top:0;margin-left:0;margin-right:0;-webkit-padding-start:0.75rem;padding-inline-start:0.75rem;border-bottom:1px solid var(--calcite-ui-border-3)}.range{color:var(--calcite-ui-text-1);font-size:0.875rem}.small .filters{padding:0}.small .filters__content{padding-left:1rem;padding-right:1rem}.small .content__view{padding-inline:0.5rem;margin-inline:0}.small .content__view--panel{padding-inline:0}@media screen and (max-width: 640px){:host{--arcgis-browser-pane-width:100%}}";

const ArcgisBrowser = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ariaUpdate = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "ariaUpdate", 7);
    this.handleResize = () => requestAnimationFrame(this.updatePreviewPosition);
    this.updatePreviewPosition = () => {
      if (this.formFactor === "small" || this.height !== "auto" || !this.previewContainer) {
        return;
      }
      const rect = this.previewContainer.getBoundingClientRect();
      const { x, y, height } = rect;
      const maxY = height + y;
      this.previewBoundingBox = {
        top: Math.max(y, 0),
        left: x,
        bottom: maxY > window.innerHeight ? 0 : window.innerHeight - maxY
      };
    };
    this.panel = undefined;
    this.preview = undefined;
    this.loading = undefined;
    this.hideContentTop = undefined;
    this.selected = undefined;
    this.alwaysShowSelection = undefined;
    this.alwaysShowContent = undefined;
    this.response = undefined;
    this.store = undefined;
    this.api = 4;
    this.formFactor = undefined;
    this.searchTerm = undefined;
    this.height = "full";
    this.pageRangeText = undefined;
    this.noResults = undefined;
    this.previewBoundingBox = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
    this.i18n = locale[0];
    (0,_store_ff04ba0a_js__WEBPACK_IMPORTED_MODULE_4__.o)(this.store, this.updatePreviewPosition);
    window.addEventListener("scroll", this.handleResize);
    window.addEventListener("resize", this.handleResize);
  }
  disconnectedCallback() {
    window.removeEventListener("resize", this.handleResize);
    window.removeEventListener("scroll", this.handleResize);
  }
  async updatePage(searchResponse) {
    const ranges = await this.updatePageRange(searchResponse);
    this.pageRangeText = ranges[0];
    this.ariaUpdate.emit(ranges[1]);
    this.noResults = (searchResponse === null || searchResponse === void 0 ? void 0 : searchResponse.total) === 0;
  }
  renderPopoverContents(showFilters, showPreview, isSheet) {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: {
        width: isSheet ? "100%" : `${this.store.state.width || 0}px`,
        height: isSheet ? "100%" : `${this.store.state.height || 0}px`
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { hide: !showPreview, "preview-panel": true } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "preview" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { hide: !showFilters, "filter-panel": true } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: this.i18n.browser.filters, closable: true, onCalcitePanelClose: (e) => {
        e.preventDefault();
        e.stopPropagation();
        e.currentTarget.closed = false;
        this.store.state.filtersExpanded = false;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (this.store.state.panel || isSheet) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter-panel__content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sort" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "filters" })), this.formFactor === "small" && this.hasActiveFilter(this.store) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter-status--mobile", slot: "footer" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter-status", { class: "filter-status", filters: this.store.state.filters })))))));
  }
  async updatePageRange(page) {
    const { start, end, total } = calculatePageBoundaries(page);
    const options = { api: this.api, places: 0, type: "decimal" };
    const startString = await (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.f)(start, options);
    const endString = await (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.f)(end, options);
    const totalString = (await (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.f)(total, options)) + (total >= 10000 ? "+" : "");
    if (this.store.state.lang === "en") {
      return [
        `${startString}-${endString} of ${totalString}`,
        `${startString}-${endString} of ${totalString} item${total === 1 ? "" : "s"}`
      ];
    }
    return [
      this.i18n.browser.pageRange
        .replace("${start}", startString)
        .replace("${end}", endString)
        .replace("${total}", totalString),
      this.i18n.browser.pageRangeAria
        .replace("${start}", startString)
        .replace("${end}", endString)
        .replace("${total}", totalString)
    ];
  }
  renderFlow() {
    const { formFactor, loading, noResults, panel } = this;
    const autoHeight = this.height === "auto";
    const showSortInFilters = this.store.state.panel || this.store.state.width < _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__.b.sm;
    const showFilters = this.store.state.filtersExpanded &&
      (!this.store.state.filtersEmpty || (!this.store.state.sortEmpty && showSortInFilters));
    const showPreview = !!this.store.state.preview;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "panel" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { "top-bar": true, "top-bar--small": formFactor === "small" } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top-bar" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        scrolling: true,
        "scrolling--full": !autoHeight || panel
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        "two-up": true,
        [formFactor]: true
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" }), loading && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__view content__view--flex" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cover" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { class: "loader", label: "" })))), noResults && !loading && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__view content__view--flex" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cover" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "no-results" }, this.renderNoResults())))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        hide: loading || noResults,
        content__view: true,
        "content__view--panel": !!this.store.state.panel,
        "content__view--flex": !loading && !noResults
      } }, !this.store.state.panel && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__top" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "range range--space-right" }, this.pageRangeText), !showSortInFilters && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sort" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "flow-content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "pagination" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "scroll-end" })), !this.store.state.panel || window.innerWidth < this.store.state.width * 2 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        sheet: true,
        "sheet--active": showFilters || showPreview
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sheet__background" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sheet__contents" }, this.renderPopoverContents(showFilters, showPreview, true)))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { overlayPositioning: "fixed", open: showPreview || showFilters, label: "filters", referenceElement: this.el, offsetSkidding: 0, offsetDistance: 0, triggerDisabled: true, pointerDisabled: true, placement: this.store.state.panel ? "trailing" : "auto", onCalcitePopoverOpen: (event) => {
        if (!this.store.state.panel || window.innerWidth < this.store.state.width * 2) {
          event.target.style.transform = "none";
        }
      } }, this.renderPopoverContents(showFilters, showPreview)))));
  }
  hasActiveFilter(store) {
    // certain filters should still show empty state, not no results state
    const builtInFilters = ["folder", "group"];
    return Object.values((store === null || store === void 0 ? void 0 : store.state.filters) || {})
      .filter(({ id }) => !builtInFilters.includes(id))
      .some((filter) => filter.value);
  }
  renderNoResults() {
    const showMessage = this.noResults && !this.loading;
    const hasFilters = this.hasActiveFilter(this.store) || !!this.searchTerm;
    if (!showMessage) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { cover: true } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "no-results" }, hasFilters ? (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "no-results" }) : (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "no-content" }))));
  }
  render() {
    const { loading, noResults, formFactor, hideContentTop, alwaysShowContent, panel } = this;
    const autoHeight = this.height === "auto";
    const maxHeight = `${(this.store.state.height || window.innerHeight) - 48}px`;
    const maxHeightStyle = this.height === "auto" ? {} : { maxHeight };
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, formFactor === "small" ? (this.renderFlow()) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        wrapper: true,
        "wrapper--fixed": this.store.state.filtersExpanded,
        "wrapper--auto": autoHeight,
        "wrapper--full": this.height === "full"
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-bar" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top-bar" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        "preview-position": true,
        "preview-position--with-top-bar": !this.store.state.topbarEmpty
      }, ref: (el) => (this.previewContainer = el) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        preview: true,
        "preview--active": !!this.store.state.preview,
        "preview--fixed": autoHeight
      }, style: autoHeight && this.previewBoundingBox
        ? {
          top: `${this.previewBoundingBox.top || 0}px`,
          insetInlineStart: `${this.previewBoundingBox.left || 0}px`,
          bottom: `${this.previewBoundingBox.bottom || 0}px`
        }
        : {} }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        pane: true,
        "pane--open": !!this.store.state.preview
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "preview" })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        scrolling: true,
        "scrolling--full": !autoHeight || panel
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        "two-up": true,
        [formFactor]: true
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        filters: true,
        "filters--sticky": !autoHeight,
        "filters--empty": this.store.state.filtersEmpty && !this.store.state.preview,
        "filters--active": this.store.state.filtersExpanded
      }, style: maxHeightStyle }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filters__content", style: maxHeightStyle }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "filters" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        content__view: true,
        "content__view--no-filters": this.store.state.filtersEmpty && !this.store.state.preview,
        "content__view--flex": true
      } }, !hideContentTop && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__top" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { selection: true, hide: !this.alwaysShowSelection } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "selection" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "range" }, this.pageRangeText), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "actions" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content__top__end" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "view" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sort" })))), loading && !alwaysShowContent && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cover" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { class: "loader", label: this.i18n.browser.loading }))), this.renderNoResults(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        hide: (loading && !alwaysShowContent) || noResults,
        "results-wrapper": true
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        hide: loading || noResults
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "pagination" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" }))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "scroll-end" }))))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "response": ["updatePage"]
  }; }
};
ArcgisBrowser.style = arcgisBrowserCss;

const arcgisBrowserActionsCss = ":host{display:flex;justify-content:flex-end;margin-left:1rem;margin-right:1rem}.wrapper{-webkit-padding-start:0.25rem;padding-inline-start:0.25rem;-webkit-border-start:1px solid var(--calcite-ui-border-1);border-inline-start:1px solid var(--calcite-ui-border-1);-webkit-border-end:1px solid var(--calcite-ui-border-1);border-inline-end:1px solid var(--calcite-ui-border-1)}.button{-webkit-margin-end:0.25rem;margin-inline-end:0.25rem}";

const ArcgisBrowserActions = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.actions = [];
    this.selection = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].actions;
  }
  render() {
    const { actions, selection, i18n } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (selection === null || selection === void 0 ? void 0 : selection.length) && (actions === null || actions === void 0 ? void 0 : actions.length) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("nav", { class: "wrapper" }, actions.map(({ text, icon, onClick, id }) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { key: id !== null && id !== void 0 ? id : `${text}-${icon}`, class: "button", "icon-start": icon, onClick: () => onClick(), appearance: "transparent", kind: "neutral", label: i18n.more }, text))))) : null));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserActions.style = arcgisBrowserActionsCss;

const ArcgisBrowserFilter = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisBrowserFilterRemove = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilterRemove", 7);
    this.expanded = undefined;
    this.heading = undefined;
    this.active = undefined;
    this.noPadding = undefined;
    this.clearDisabled = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].filter;
  }
  componentDidLoad() {
    if (this.accordionItem) {
      if (this.expanded) {
        this.accordionItem.expanded = true;
      }
      const content = this.accordionItem.shadowRoot.querySelector(".content");
      if (content && this.noPadding) {
        content.style.padding = "0";
      }
    }
  }
  componentDidRender() {
    var _a, _b;
    const icon = (_b = (_a = this.accordionItem) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector(".icon-position--end");
    if (icon) {
      icon.classList.remove("icon-position--end");
      icon.classList.add("icon-position--start");
    }
  }
  render() {
    const { active, clearDisabled, heading, i18n } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { position: "relative" } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: heading, ref: (el) => {
        this.accordionItem = el;
        el.iconPosition = "start";
        el.iconType = "chevron";
      }, expanded: this.expanded,
      // @ts-ignore
      onCalciteInternalAccordionItemSelect: (e) => {
        this.expanded = !this.expanded;
      }, style: {
        "--calcite-accordion-item-background": "var(--calcite-ui-background)",
        "--calcite-accordion-item-icon-spacing-start": "0",
        "--calcite-accordion-item-icon-spacing-end": ".5rem",
        "--calcite-accordion-item-padding": ".75rem .5rem",
        "--calcite-accordion-icon-margin": ".5rem",
        borderTop: "1px solid var(--calcite-ui-border-1)"
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-end" }, active && !clearDisabled && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { kind: "neutral", appearance: "transparent", onClick: () => this.arcgisBrowserFilterRemove.emit() }, i18n.clear))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { margin: this.noPadding ? "0" : "0 .75rem" } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const DAY = 1000 * 60 * 60 * 24;
function getStartOfDay(date) {
  const ts = (date || new Date()).valueOf();
  const start = new Date(ts);
  start.setHours(0, 0, 0, 0);
  return start.valueOf();
}

const ArcgisBrowserFilterDate = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisBrowserFilter = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilter", 7);
    this.today = new Date();
    this.resetDatePicker = () => {
      this.range = null;
      this.start = null;
      this.end = null;
    };
    this.renderRange = (key) => {
      const { i18n, range } = this;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-range": key, selected: key === range }, i18n[key]));
    };
    this.property = undefined;
    this.serverProperty = undefined;
    this.range = undefined;
    this.start = undefined;
    this.end = undefined;
    this.store = undefined;
    this.expanded = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].filterDate;
  }
  componentDidLoad() {
    if (this.range && (this.range !== "custom" || (this.start && this.end))) {
      this.arcgisBrowserFilter.emit(this.getEventDetail());
    }
    (0,_store_ff04ba0a_js__WEBPACK_IMPORTED_MODULE_4__.a)(this.property, this.store, () => this.resetDatePicker());
  }
  getValue() {
    const { range, start, end } = this;
    const startOfDay = getStartOfDay();
    const endOfDay = startOfDay + DAY - 1;
    switch (range) {
      case "yesterday":
        return [startOfDay - DAY, startOfDay - 1];
      case "today":
        return [startOfDay, endOfDay];
      case "last7":
        return [startOfDay - DAY * 7, endOfDay];
      case "last30":
        return [startOfDay - DAY * 30, endOfDay];
      case "custom":
        const customStart = getStartOfDay(start);
        const customEnd = getStartOfDay(end);
        return [customStart, customEnd + DAY - 1];
      default:
        return null;
    }
  }
  getEventDetail() {
    const { property, range, i18n, serverProperty } = this;
    const value = this.getValue();
    const serverProp = serverProperty !== null && serverProperty !== void 0 ? serverProperty : (property === "modified" ? property : "uploaded");
    return {
      id: property,
      value: value ? `(${serverProp}:[${value[0]} TO ${value[1]}])` : "",
      range,
      start: (value === null || value === void 0 ? void 0 : value[0]) && new Date(value === null || value === void 0 ? void 0 : value[0]),
      end: (value === null || value === void 0 ? void 0 : value[1]) && new Date(value === null || value === void 0 ? void 0 : value[1]),
      label: this.i18n[property].replace("${date}", i18n[range])
    };
  }
  isActive() {
    return !!this.range && (this.range !== "custom" || !!(this.start && this.end));
  }
  render() {
    const { i18n, property, range, start, end } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: i18n.title[property], expanded: this.expanded, active: this.isActive(), onArcgisBrowserFilterRemove: () => {
        this.resetDatePicker();
        this.arcgisBrowserFilter.emit(this.getEventDetail());
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "children", scale: "m", onCalciteTreeSelect: (event) => {
        var _a, _b;
        const node = event.target;
        const range = (_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.range;
        this.range = this.range === range ? null : range;
        if (this.range === "custom" && !(this.start && this.end)) {
          return;
        }
        this.arcgisBrowserFilter.emit(this.getEventDetail());
      } }, ["today", "yesterday", "last7", "last30", "custom"].map(this.renderRange)), range === "custom" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-date-picker", { onCalciteDatePickerRangeChange: (event) => {
        const node = event.target;
        const startDate = node.valueAsDate[0];
        const endDate = node.valueAsDate[1];
        if (startDate && endDate) {
          this.start = startDate;
          this.end = endDate;
          this.arcgisBrowserFilter.emit(this.getEventDetail());
        }
      }, scale: "s", valueAsDate: [start, end], maxAsDate: this.today, range: true, style: {
        marginTop: ".5rem",
        marginBottom: ".5rem",
        marginInlineStart: "2rem",
        width: "12.75rem"
      } })))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisBrowserFilterStatusCss = ":host{display:flex;align-items:center}calcite-chip{--calcite-ui-foreground-2:var(--calcite-ui-foreground-1)}.filters{-webkit-margin-end:0.25rem;margin-inline-end:0.25rem;-webkit-margin-start:1rem;margin-inline-start:1rem}.link{--calcite-font-size--2:var(--calcite-font-size--1);--calcite-ui-brand:var(--calcite-ui-text-link)}.popover-content{padding:0.75rem}";

const ArcgisBrowserFilterStatus = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisBrowserFilterClear = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilterClear", 7);
    this.arcgisBrowserFilterRemove = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserFilterRemove", 7);
    this.renderChip = (filter) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { scale: "s", value: filter.id, key: filter.id, closable: true, appearance: "outline", onCalciteChipClose: () => {
          this.arcgisBrowserFilterRemove.emit(Object.assign(Object.assign({}, filter), { value: "" }));
        } }, filter.label));
    };
    this.filters = {};
    this.hiddenFilterIds = undefined;
    this.componentWidth = undefined;
    this.browserWidth = undefined;
    this.popoverOpen = false;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].filterStatus;
  }
  getValidFilters() {
    const validFilters = Object.values(this.filters).filter((filter) => {
      // certain filters should not appear in the list of filter chips
      if (["group", "folder"].includes(filter.id)) {
        return false;
      }
      return (filter === null || filter === void 0 ? void 0 : filter.value) && (filter === null || filter === void 0 ? void 0 : filter.label);
    });
    const { componentWidth, browserWidth } = this;
    return validFilters.reduce((acc, filter) => {
      var _a;
      // this is just a heuristic to determine chip width without having to use getClientRect() which would be very slow
      // number of chars * average char width plus chip padding
      const width = (((_a = filter.label) === null || _a === void 0 ? void 0 : _a.length) || 0) * 8 + 32;
      acc.length += width;
      if (!componentWidth || browserWidth < _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__.b.sm || componentWidth - acc.length > 180) {
        acc.inBounds.push(filter);
      }
      else {
        acc.outOfBounds.push(filter);
      }
      return acc;
    }, { length: 0, inBounds: [], outOfBounds: [] });
  }
  render() {
    const { inBounds, outOfBounds } = this.getValidFilters();
    const hasOverflow = !!(outOfBounds === null || outOfBounds === void 0 ? void 0 : outOfBounds.length);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, inBounds.length > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip-group", { label: this.i18n.filters, scale: "s" }, inBounds.map(this.renderChip), hasOverflow && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "popover-button", round: true, kind: "neutral", appearance: "outline", scale: "s" }, "+ ", outOfBounds.length)))), hasOverflow && [
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { label: this.i18n.additional, referenceElement: "popover-button", placement: "bottom-end" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "popover-content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip-group", { label: this.i18n.additional, scale: "s" }, outOfBounds.map(this.renderChip))))
    ]));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserFilterStatus.style = arcgisBrowserFilterStatusCss;

const ArcgisItemBrowserFilters = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.store = undefined;
  }
  render() {
    var _a, _b;
    const addPadding = ((_a = this.store) === null || _a === void 0 ? void 0 : _a.state.panel) || ((_b = this.store) === null || _b === void 0 ? void 0 : _b.state.width) < _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__.b.sm;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { padding: addPadding ? "0 1rem 1rem" : "0" } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { appearance: "transparent", iconType: "chevron", scale: "m", "icon-position": "start", ref: (el) => {
        this.store.state.filterElement = el;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bottom" })));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisBrowserPaginationCss = ".wrapper{padding-left:0.5rem;padding-right:0.5rem;padding-top:2rem;padding-bottom:2rem;justify-content:center;display:flex}.hide{display:none}";

const ArcgisBrowserPagination = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisBrowserPage = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserPage", 7);
    this.total = undefined;
    this.start = undefined;
    this.num = 60;
    this.store = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].pagination;
    const { start, total, num } = this;
    this.arcgisBrowserPage.emit({ start, total, num });
  }
  render() {
    const { start, total, num, i18n } = this;
    const scale = this.store.state.width > _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__.b.sm ? "m" : "s";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pagination", { onCalcitePaginationChange: (event) => {
        const node = event.target;
        this.arcgisBrowserPage.emit({
          start: node.startItem,
          total: node.totalItems,
          num: node.pageSize
        });
      }, startItem: start, totalItems: Math.min(total, 10000 - num), pageSize: num, scale: scale, messageOverrides: { next: i18n.next, previous: i18n.prev }, class: {
        hide: !total || total < num
      } })));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserPagination.style = arcgisBrowserPaginationCss;

const arcgisBrowserSearchCss = ":host{position:relative;display:block}.search{position:absolute;z-index:10;margin-top:1rem;font-size:0.875rem;color:var(--calcite-ui-text-1);pointer-events:none;inset-inline-start:1.5rem}.x{position:absolute;z-index:10;top:0;margin-top:0.25rem;padding:0.5rem;outline:2px solid transparent;outline-offset:2px;border-style:none;cursor:pointer;color:var(--calcite-ui-text-1);inset-inline-end:0.25rem;background:transparent}.input{display:block;width:100%;box-sizing:border-box;padding-top:1rem;padding-bottom:1rem;padding-left:3rem;padding-right:3rem;height:3rem;box-shadow:none;border-style:none;position:relative;z-index:0;transition-property:background-color, border-color, color, fill, stroke, opacity, box-shadow, transform;transition-duration:150ms;color:var(--calcite-ui-text-1);font-size:0.875rem;background-color:transparent;border-bottom:2px solid transparent;font-family:inherit}.input::-webkit-search-cancel-button{display:none}.input::-ms-clear{display:none}.input:focus{box-shadow:none;outline:2px solid transparent;outline-offset:2px;border-bottom-color:var(--calcite-ui-brand)}";

const ArcgisBrowserSearch = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisBrowserSearch = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSearch", 7);
    this.arcgisBrowserSearchInput = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSearchInput", 7);
    this.debouncedInput = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__.d)((term) => {
      const containsWildcard = term.includes("*");
      this.showClear = !!term;
      if (containsWildcard) {
        this.containsWildcard = true;
      }
      else {
        this.containsWildcard = false;
        this.arcgisBrowserSearch.emit(term);
      }
    }, 400);
    this.term = undefined;
    this.placeholder = undefined;
    this.showClear = false;
    this.containsWildcard = false;
  }
  async componentWillLoad() {
    var _a;
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].search;
    if (this.term) {
      this.showClear = true;
    }
    this.containsWildcard = (_a = this.term) === null || _a === void 0 ? void 0 : _a.includes("*");
  }
  async componentDidLoad() {
    this.arcgisBrowserSearch.emit(this.term);
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "search", scale: "s", class: "search" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { class: "input", value: this.term, placeholder: this.placeholder || this.i18n.search, ref: (el) => (this.searchInput = el), "aria-label": this.placeholder || this.i18n.search, onInput: (e) => {
        const term = e.currentTarget.value;
        if (!(term === null || term === void 0 ? void 0 : term.includes("*"))) {
          this.containsWildcard = false;
        }
        this.arcgisBrowserSearchInput.emit(term);
        this.debouncedInput(term);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { open: this.containsWildcard, scale: "m", kind: "danger", icon: "exclamation-mark-triangle", label: this.i18n.wildcard, onCalciteAlertClose: () => {
        this.containsWildcard = false;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.i18n.wildcard)), this.showClear && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "x", "aria-label": this.i18n.clear, onClick: () => {
        this.arcgisBrowserSearchInput.emit("");
        this.arcgisBrowserSearch.emit("");
        this.showClear = false;
        if (this.searchInput) {
          this.searchInput.value = "";
          this.searchInput.focus();
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "x", scale: "m", class: "x--icon" })))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserSearch.style = arcgisBrowserSearchCss;

const arcgisBrowserSortCss = ".dropdown-wrap{display:flex;align-items:center}.medium{font-weight:500}";

const ArcgisBrowserSort = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisBrowserSortFieldChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSortFieldChange", 7);
    this.arcgisBrowserSortOrderChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisBrowserSortOrderChange", 7);
    this.sortOrders = ["asc", "desc"];
    this.options = undefined;
    this.field = undefined;
    this.order = undefined;
    this.store = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].sort;
  }
  renderFieldOption(option, selectedField, i18n) {
    const info = (0,_utils_b22dfe9c_js__WEBPACK_IMPORTED_MODULE_6__.g)(option, i18n);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: selectedField === option, onCalciteDropdownItemSelect: () => this.arcgisBrowserSortFieldChange.emit(option), key: option }, info.label));
  }
  renderDropdown() {
    const { field, order, options, i18n } = this;
    const selectedField = options.includes(field) ? field : options[0];
    const info = (0,_utils_b22dfe9c_js__WEBPACK_IMPORTED_MODULE_6__.g)(selectedField, i18n);
    const selectedOrder = order || info.defaultSortOrder;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-end", scale: "m", overlayPositioning: "fixed", width: "m" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "button", slot: "trigger", scale: "m", appearance: "outline-fill", kind: "neutral", iconStart: "sort-descending", iconFlipRtl: "start", "aria-label": `${i18n.sortBy} ${info.label}` }, info.label), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "single", "group-title": i18n.sortBy }, this.options.map((option) => this.renderFieldOption(option, selectedField, i18n))), info.showSortOrder && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "single", "group-title": i18n.sortDirection }, this.sortOrders.map((order) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { key: order, selected: selectedOrder === order, onCalciteDropdownItemSelect: () => this.arcgisBrowserSortOrderChange.emit(order) }, info.sortOrderLabels[order])))))));
  }
  renderFieldRadio(option, selectedField, i18n) {
    const info = (0,_utils_b22dfe9c_js__WEBPACK_IMPORTED_MODULE_6__.g)(option, i18n);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", alignment: "start" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { value: option, name: "sort_field", checked: selectedField === option }), info.label));
  }
  renderRadioButtons() {
    const { field, order, options, i18n } = this;
    const selectedField = options.includes(field) ? field : options[0];
    const info = (0,_utils_b22dfe9c_js__WEBPACK_IMPORTED_MODULE_6__.g)(selectedField, i18n);
    const selectedOrder = order || info.defaultSortOrder;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "m" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "medium" }, i18n.sortBy), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { name: "sort_field", layout: "vertical", role: "radiogroup", onCalciteRadioButtonGroupChange: (event) => this.arcgisBrowserSortFieldChange.emit(event.target.selectedItem.value) }, this.options.map((option) => this.renderFieldRadio(option, selectedField, i18n)))), info.showSortOrder && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "m" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "medium" }, i18n.sortDirection), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { name: "sort_order", layout: "vertical", role: "radiogroup", onCalciteRadioButtonGroupChange: (event) => this.arcgisBrowserSortOrderChange.emit(event.target.selectedItem.value) }, this.sortOrders.map((order) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", alignment: "start" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { value: order, name: "sort_order", checked: selectedOrder === order }), info.sortOrderLabels[order]))))))));
  }
  render() {
    return this.store.state.panel ||
      (this.store.state.width && this.store.state.width < _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__.b.sm)
      ? this.renderRadioButtons()
      : this.renderDropdown();
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserSort.style = arcgisBrowserSortCss;

const arcgisBrowserTopBarCss = ":host{position:relative;display:block;background-color:var(--arcgis-browser-top-bar-background)}.wrapper{display:flex;margin-left:auto;margin-right:auto;max-width:var(--arcgis-browser-max-width)}.search-and-sort{display:flex;flex:1 1 0%;align-items:center;-webkit-padding-end:1.5rem;padding-inline-end:1.5rem}.search{flex:1 1 0%}.sort{display:flex;align-items:center}.filter{margin-top:0.25rem;margin-bottom:0.25rem;padding-left:0.5rem;padding-right:0.5rem;display:flex;justify-content:center;align-items:center}.filter--left{-webkit-border-end:1px solid var(--calcite-ui-border-3);border-inline-end:1px solid var(--calcite-ui-border-3)}.large .filter{display:none}.rel{position:relative}.bucket--small{text-align:center;border-bottom:1px solid var(--calcite-ui-border-3)}.indicator{width:0.5rem;height:0.5rem;position:absolute;border-radius:50%;top:0;pointer-events:none;z-index:20;background-color:var(--calcite-ui-brand);inset-inline-start:0}.small .search-and-sort{-webkit-padding-end:1rem;padding-inline-end:1rem}";

const ArcgisBrowserTopBar = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.store = undefined;
    this.filtersDisabled = undefined;
    this.width = undefined;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el, "arcgis-browser");
    this.i18n = locale[0].topBar;
    // @ts-ignore
    this.store.onChange("width", (width) => {
      var _a;
      this.width = (_a = this.searchWrapper) === null || _a === void 0 ? void 0 : _a.offsetWidth;
    });
  }
  getFormFactor() {
    const width = this.store.state.width;
    switch (true) {
      case width <= _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__.b.sm:
        return "small";
      case width <= _resize_55d3c55c_js__WEBPACK_IMPORTED_MODULE_3__.b.md:
        return "medium";
      default:
        return "large";
    }
  }
  handleClick() {
    this.store.state.preview = null;
    this.store.state.filtersExpanded = !this.store.state.filtersExpanded;
  }
  render() {
    const formFactor = this.getFormFactor();
    const showFilterButton = formFactor === "small" &&
      (!this.store.state.filtersEmpty || !this.store.state.sortEmpty) &&
      !this.filtersDisabled;
    const hasActiveFilter = Object.values(this.store.state.filters || {}).some((filter) => filter.value);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, formFactor === "small" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "bucket bucket--small" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bucket" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { [formFactor]: true, wrapper: true } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" }), showFilterButton && !this.store.state.panel && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter filter--left" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rel" }, hasActiveFilter && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "indicator" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "filter-toggle", scale: "s", appearance: "transparent", kind: "neutral", iconStart: "sliders", "aria-label": "toggle-filters", onClick: () => this.handleClick(), "aria-expanded": this.store.state.filtersExpanded }, this.i18n.filter)))), formFactor !== "small" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "bucket" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bucket" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "search-and-sort", ref: (el) => {
        this.searchWrapper = el;
        if (!this.width) {
          requestAnimationFrame(() => (this.width = el === null || el === void 0 ? void 0 : el.offsetWidth));
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "search" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "search" })), !showFilterButton && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter-status", { componentWidth: this.width, browserWidth: this.store.state.width, class: "filter-status", filters: this.store.state.filters }))), showFilterButton && this.store.state.panel && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "filter" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rel" }, hasActiveFilter && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "indicator" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "filter-toggle", scale: "s", appearance: "transparent", kind: "neutral", iconStart: "sliders", "aria-label": this.i18n.filter, onClick: () => this.handleClick(), "aria-expanded": this.store.state.filtersExpanded })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" }))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisBrowserTopBar.style = arcgisBrowserTopBarCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-55d3c55c.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-55d3c55c.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ breakpoints),
/* harmony export */   s: () => (/* binding */ setupResizeObserver)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const breakpoints = {
  xxs: 320,
  xs: 480,
  sm: 640,
  md: 768,
  lg: 1024,
  xl: 1280
};
function setupResizeObserver(store) {
  var _a;
  var _b;
  (_a = (_b = store.state).resizeObserver) !== null && _a !== void 0 ? _a : (_b.resizeObserver = new ResizeObserver(resizeHandler));
  return store.state.resizeObserver;
}
/**
 * resize handler will be called when items get resized
 * an event is dispatched on each element, passing the new width and height
 */
function resizeHandler(entries) {
  entries.forEach((entry) => {
    if (entry.contentRect.width > 0) {
      const event = new CustomEvent("arcgisBrowserResize", {
        detail: { width: entry.contentRect.width, height: entry.contentRect.height }
      });
      entry.target.dispatchEvent(event);
    }
  });
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-ff04ba0a.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-ff04ba0a.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ onBrowserFilterRemove),
/* harmony export */   g: () => (/* binding */ getStore),
/* harmony export */   o: () => (/* binding */ onPreviewChange)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const onBrowserFilterRemove = (id, store, callback) => {
  // @ts-ignore
  store.onChange("filters", (filters) => {
    if (!filters[id] || !filters[id].value) {
      callback();
    }
  });
};
const onPreviewChange = (store, callback) => {
  // @ts-ignore
  store.onChange("preview", (preview) => {
    callback();
  });
};
const STORE_LOOKUP = new Map();
function getStore(el, browserTag) {
  const existingStore = STORE_LOOKUP.get(el);
  if (existingStore) {
    return existingStore;
  }
  const browser = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(el, browserTag);
  if (browser) {
    STORE_LOOKUP.set(el, browser.store);
    return browser.store;
  }
  return null;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-b22dfe9c.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-b22dfe9c.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getDefaultSortOrder),
/* harmony export */   g: () => (/* binding */ getSortFieldInfo)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const sortLookup = {
  title: ["asc", "alphabetical"],
  owner: ["asc", "alphabetical"],
  numviews: ["desc", "num"],
  relevance: ["desc"],
  modified: ["desc", "recent"],
  created: ["desc", "recent"]
};
function getSortFieldInfo(field, i18n) {
  const [defaultSortOrder, labelType] = sortLookup[field];
  const sortOrderLabels = {
    asc: i18n[`${labelType}Asc`],
    desc: i18n[`${labelType}Desc`]
  };
  return {
    label: i18n[field],
    showSortOrder: !!labelType,
    defaultSortOrder,
    sortOrderLabels
  };
}
function getDefaultSortOrder(field) {
  const [defaultSortOrder] = sortLookup[field];
  return defaultSortOrder;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTdiNzAyOS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNkc7QUFDdkM7QUFDUDtBQUNQO0FBQytCO0FBQzlCO0FBQ0c7QUFDakM7QUFDUTs7QUFFbkM7QUFDQSxtQ0FBbUMsbUJBQW1CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0Msa0JBQWtCLDhDQUE4QyxhQUFhLHNCQUFzQixZQUFZLGdCQUFnQixrQkFBa0IsZ0NBQWdDLHFDQUFxQyxpQ0FBaUMscUJBQXFCLGdCQUFnQixZQUFZLGNBQWMsU0FBUyxhQUFhLHNCQUFzQixZQUFZLGdCQUFnQixnQkFBZ0IsZ0JBQWdCLGVBQWUsY0FBYyxlQUFlLDBCQUEwQixPQUFPLFlBQVksZ0JBQWdCLGFBQWEsc0JBQXNCLFNBQVMsTUFBTSxRQUFRLE9BQU8sZ0JBQWdCLFdBQVcsWUFBWSxjQUFjLG1EQUFtRCxXQUFXLGFBQWEsc0JBQXNCLFlBQVksYUFBYSxXQUFXLGtCQUFrQixpQkFBaUIsa0JBQWtCLGtCQUFrQixrQkFBa0IsV0FBVyxNQUFNLFFBQVEsU0FBUyxPQUFPLGlCQUFpQixrQkFBa0IsMENBQTBDLGdDQUFnQyxTQUFTLFFBQVEsYUFBYSxtQkFBbUIsaUJBQWlCLGtCQUFrQixXQUFXLGNBQWMsMENBQTBDLGNBQWMsZ0JBQWdCLFNBQVMsWUFBWSxZQUFZLGtCQUFrQixhQUFhLGdCQUFnQixjQUFjLG9CQUFvQix1QkFBdUIsbUJBQW1CLCtCQUErQixhQUFhLFlBQVksbUJBQW1CLGNBQWMsa0JBQWtCLDhCQUE4QixXQUFXLFVBQVUsbUJBQW1CLDBCQUEwQix5QkFBeUIsYUFBYSxnQkFBZ0IsV0FBVyxnQ0FBZ0MsU0FBUyxZQUFZLGVB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MkU7O0FBRTNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1EQUFpQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTJFOzs7Ozs7Ozs7Ozs7Ozs7O0FDbEMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsVUFBVTtBQUMzQixrQkFBa0IsVUFBVTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vYXJjZ2lzLWJyb3dzZXJfMTAuZW50cnkuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vZnVuY3Rpb25hbC1jODJmNWFiOS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sYW5ndWFnZVV0aWwtMjIyNThjOTAuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vbG9jYWxlLTEzZTAwYTc1LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL3Jlc2l6ZS01NWQzYzU1Yy5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9zdG9yZS1mZjA0YmEwYS5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS91dGlscy1iMjJkZmU5Yy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgYyBhcyBjcmVhdGVFdmVudCwgaCwgSCBhcyBIb3N0LCBkIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LTkyZWJiMzk2LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyB9IGZyb20gJy4vbG9jYWxlLTEzZTAwYTc1LmpzJztcbmltcG9ydCB7IGYgYXMgZm9ybWF0TnVtYmVyIH0gZnJvbSAnLi9sYW5ndWFnZVV0aWwtMjIyNThjOTAuanMnO1xuaW1wb3J0IHsgYiBhcyBicmVha3BvaW50cyB9IGZyb20gJy4vcmVzaXplLTU1ZDNjNTVjLmpzJztcbmltcG9ydCB7IG8gYXMgb25QcmV2aWV3Q2hhbmdlLCBhIGFzIG9uQnJvd3NlckZpbHRlclJlbW92ZSB9IGZyb20gJy4vc3RvcmUtZmYwNGJhMGEuanMnO1xuaW1wb3J0IHsgZCBhcyBkZWJvdW5jZSB9IGZyb20gJy4vZnVuY3Rpb25hbC1jODJmNWFiOS5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldFNvcnRGaWVsZEluZm8gfSBmcm9tICcuL3V0aWxzLWIyMmRmZTljLmpzJztcbmltcG9ydCAnLi9kb20tMTNmNWIwMGMuanMnO1xuaW1wb3J0ICcuL2xvYWRNb2R1bGVzLWFhZjMwYmQ2LmpzJztcblxuLyoqIEdldCB0aGUgaHVtYW4gcmVhZGFibGUgbnVtYmVyIHZhbHVlcyBmb3IgYSBnaXZlbiBzZWFyY2ggcGFnaW5hdGlvbiByZXN1bHQgKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBhZ2VCb3VuZGFyaWVzKHsgc3RhcnQsIG51bSwgdG90YWwgfSkge1xuICBzdGFydCA9IE1hdGgubWluKHN0YXJ0LCB0b3RhbCk7XG4gIHRvdGFsID0gTWF0aC5taW4odG90YWwsIDEwMDAwKTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4odG90YWwsIE1hdGgubWF4KHN0YXJ0ICsgbnVtIC0gMSwgMCkpO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0LFxuICAgIGVuZCxcbiAgICB0b3RhbFxuICB9O1xufVxuXG5jb25zdCBhcmNnaXNCcm93c2VyQ3NzID0gXCI6aG9zdHtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNhbGNpdGUtdWktYmFja2dyb3VuZCk7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtoZWlnaHQ6MTAwJTtvdmVyZmxvdy15OmF1dG87b3ZlcmZsb3cteDpoaWRkZW47LS1hcmNnaXMtYnJvd3Nlci1tYXgtd2lkdGg6MTAwJTstLWFyY2dpcy1icm93c2VyLXBhbmUtd2lkdGg6MTguNzVyZW07LS1hcmNnaXMtYnJvd3Nlci1wYW5lLXotaW5kZXg6MTF9Omhvc3QoW2hlaWdodD1hdXRvXSl7bWluLWhlaWdodDoxMDAlO2hlaWdodDphdXRvO2ZsZXg6MSAxIDEwMCV9LndyYXBwZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW59LndyYXBwZXItLWZpeGVke292ZXJmbG93OmhpZGRlbn0ud3JhcHBlci0tYXV0b3tmbGV4OjEgMSAxMDAlfS53cmFwcGVyLS1mdWxse3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwgMCl9LnBhbmVse2hlaWdodDoxMDAlO292ZXJmbG93OmhpZGRlbjtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS50b3AtYmFye3RvcDowO3JpZ2h0OjA7bGVmdDowO3Bvc2l0aW9uOnN0aWNreTt6LWluZGV4OjIwO2ZsZXgtZ3JvdzowO2ZsZXgtc2hyaW5rOjA7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMyl9LnNjcm9sbGluZ3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXg6MSAxIDAlO21pbi1oZWlnaHQ6MDt3aWR0aDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlfS5zY3JvbGxpbmctLWZ1bGx7b3ZlcmZsb3cteTpzY3JvbGx9LnByZXZpZXctcG9zaXRpb257cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvO21heC13aWR0aDp2YXIoLS1hcmNnaXMtYnJvd3Nlci1tYXgtd2lkdGgpfS5wcmV2aWV3LXBvc2l0aW9uLS13aXRoLXRvcC1iYXJ7dG9wOjNyZW19LnR3by11cHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87d2lkdGg6MTAwJTtmbGV4OjEgMSBhdXRvO21heC13aWR0aDp2YXIoLS1hcmNnaXMtYnJvd3Nlci1tYXgtd2lkdGgpfS50d28tdXAuc21hbGx7bWFyZ2luLXRvcDotMXB4fS5jb250ZW50e2ZsZXg6MSAxIDAlO21pbi13aWR0aDowO3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6ZmxleDtvdmVyZmxvdzpoaWRkZW59LmNvbnRlbnRfX3RvcHtwYWRkaW5nLXRvcDoxLjI1cmVtO3BhZGRpbmctYm90dG9tOjAuNzVyZW07Zm9udC1zaXplOjAuODc1cmVtO2NvbG9yOnZhcigtLWNhbGNpdGUtdWktdGV4dC0xKTtkaXNwbGF5OmZsZXg7ZmxleC1ncm93OjA7YWxpZ24taXRlbXM6Y2VudGVyO2hlaWdodDoxLjVyZW07cG9zaXRpb246cmVsYXRpdmU7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47ei1pbmRleDoxMDt6LWluZGV4OjJ9LmNvbnRlbnRfX3RvcF9fZW5key13ZWJraXQtbWFyZ2luLXN0YXJ0OmF1dG87bWFyZ2luLWlubGluZS1zdGFydDphdXRvO2Rpc3BsYXk6Z3JpZDtncmlkLWdhcDowLjVyZW07Z2FwOjAuNXJlbTtncmlkLXRlbXBsYXRlLWNvbHVtbnM6YXV0byBhdXRvfS5hY3Rpb25ze2ZsZXg6MSAxIDAlfS5maWx0ZXItc3RhdHVze2ZsZXg6MSAxIDAlfS5jb250ZW50X192aWV3e21pbi13aWR0aDowO2ZsZXg6MSAxIDAlOy13ZWJraXQtcGFkZGluZy1lbmQ6MXJlbTtwYWRkaW5nLWlubGluZS1lbmQ6MXJlbTstd2Via2l0LXBhZGRpbmctc3RhcnQ6MS41cmVtO3BhZGRpbmctaW5saW5lLXN0YXJ0OjEuNXJlbTstd2Via2l0LW1hcmdpbi1lbmQ6MC4yNXJlbTttYXJnaW4taW5saW5lLWVuZDowLjI1cmVtfS5jb250ZW50X192aWV3LS1wYWRkZWQtYm90dG9te3BhZGRpbmctYm90dG9tOjFyZW19LmNvbnRlbnRfX3ZpZXctLW5vLWZpbHRlcnN7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjFyZW07cGFkZGluZy1pbmxpbmUtc3RhcnQ6MXJlbTstd2Via2l0LW1hcmdpbi1zdGFydDowLjI1cmVtO21hcmdpbi1pbmxpbmUtc3RhcnQ6MC4yNXJlbX0ucGFuZXtkaXNwbGF5OmZsZXg7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJhY2tncm91bmQpO3BvaW50ZXItZXZlbnRzOm5vbmU7aGVpZ2h0OjEwMCU7dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowO3RyYW5zaXRpb24tZHVyYXRpb246dmFyKC0tY2FsY2l0ZS1pbnRlcm5hbC1hbmltYXRpb24tdGltaW5nLW1lZGl1bSk7dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0sIHZpc2liaWxpdHksIG9wYWNpdHk7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkIHZhcigtLWNhbGNpdGUtdWktYm9yZGVyLTMpO2JvcmRlci1yaWdodDoxcHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMyl9LnBhbmUtLW9wZW57cG9pbnRlci1ldmVudHM6YXV0bztvcGFjaXR5OjE7dmlzaWJpbGl0eTp2aXNpYmxlO3RyYW5zZm9ybTp0cmFuc2xhdGUoMCk7Ym94LXNoYWRvdzo0cHggMHB4IDE2cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4wNil9LnByZXZpZXd7ZmxleC1ncm93OjA7ZmxleC1zaHJpbms6MDt3aWR0aDowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2luc2V0LWlubGluZS1zdGFydDowO3RyYW5zaXRpb24tZHVyYXRpb246dmFyKC0tY2FsY2l0ZS1pbnRlcm5hbC1hbmltYXRpb24tdGltaW5nLW1lZGl1bSk7dHJhbnNpdGlvbi1wcm9wZXJ0eTp3aWR0aDt6LWluZGV4OnZhcigtLWFyY2dpcy1icm93c2VyLXBhbmUtei1pbmRleCl9LnByZXZpZXctLWZpeGVke3Bvc2l0aW9uOmZpeGVkfS5wcmV2aWV3LS1hY3RpdmV7b3ZlcmZsb3c6YXV0bzt3aWR0aDp2YXIoLS1hcmNnaXMtYnJvd3Nlci1wYW5lLXdpZHRoKTtib3gtc2hhZG93OnJnYmEoMCwgMCwgMCwgMC4wNikgNHB4IDBweCAxNnB4IDBweH0uZmlsdGVyLXBhbmVsLC5wcmV2aWV3LXBhbmVse2hlaWdodDoxMDAlO2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS11aS1iYWNrZ3JvdW5kKTtwb3NpdGlvbjpyZWxhdGl2ZX0uZmlsdGVyLXBhbmVsX19jb250ZW50e3BhZGRpbmctdG9wOjAuNzVyZW07cGFkZGluZy1sZWZ0OjFyZW07cGFkZGluZy1yaWdodDoxcmVtO3BhZGRpbmctYm90dG9tOjB9LmZpbHRlci1zdGF0dXMtLW1vYmlsZXt3aWR0aDoxMDAlfS5maWx0ZXItc3RhdHVzLS1hY3RpdmV7ZGlzcGxheTpibG9ja30uc2hlZXR7cG9zaXRpb246Zml4ZWQ7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7cG9pbnRlci1ldmVudHM6bm9uZTt6LWluZGV4OjExMH0uc2hlZXRfX2JhY2tncm91bmR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7b3BhY2l0eTowO3RyYW5zaXRpb246YWxsIHZhcigtLWNhbGNpdGUtYW5pbWF0aW9uLXRpbWluZykgZWFzZS1pbi1vdXQgMHMsIG91dGxpbmUgMHMsIG91dGxpbmUtb2Zmc2V0IDBzO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLCAwLCAwLCAwLjIpfS5zaGVldC0tYWN0aXZlIC5zaGVldF9fYmFja2dyb3VuZHtvcGFjaXR5OjF9LnNoZWV0LS1hY3RpdmV7b3BhY2l0eToxO3BvaW50ZXItZXZlbnRzOmF1dG99LnNoZWV0X19jb250ZW50c3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtvcGFjaXR5OjA7dHJhbnNpdGlvbjphbGwgdmFyKC0tY2FsY2l0ZS1hbmltYXRpb24tdGltaW5nKSBlYXNlLWluLW91dCAwcywgb3V0bGluZSAwcywgb3V0bGluZS1vZmZzZXQgMHM7dG9wOjNyZW07dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDI0cHgsIDApfS5zaGVldC0tYWN0aXZlIC5zaGVldF9fY29udGVudHN7b3BhY2l0eToxO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKX0uaGlkZXtkaXNwbGF5Om5vbmV9LmFyaWEtaGlkZGVue3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjFweDtoZWlnaHQ6MXB4O3BhZGRpbmc6MDttYXJnaW46LTFweDtvdmVyZmxvdzpoaWRkZW47Y2xpcDpyZWN0KDAsIDAsIDAsIDApO3doaXRlLXNwYWNlOm5vd3JhcDtib3JkZXItd2lkdGg6MDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDt3aWR0aDowO2luc2V0LWlubGluZS1lbmQ6MH0uY29udGVudF9fdmlldy0tZmxleHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5jb3ZlcntmbGV4OjEgMSAwJTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O292ZXJmbG93OmF1dG87cGFkZGluZy1ib3R0b206MXJlbTtwYWRkaW5nLXRvcDowLjI1cmVtfS5uby1yZXN1bHRze2ZvbnQtc2l6ZTowLjg3NXJlbTtjb2xvcjp2YXIoLS1jYWxjaXRlLXVpLXRleHQtMik7bWF4LXdpZHRoOjI4cmVtO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87cGFkZGluZy1sZWZ0OjEuNXJlbTtwYWRkaW5nLXJpZ2h0OjEuNXJlbX0ucmVzdWx0cy13cmFwcGVye2ZsZXg6MSAxIDAlfS5sb2FkZXJ7LS1jYWxjaXRlLWxvYWRlci1wYWRkaW5nOjB9LmZpbHRlcnN7d2lkdGg6MTZyZW07ZmxleC1ncm93OjA7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOnZhcigtLWFyY2dpcy1icm93c2VyLXBhbmUtd2lkdGgpOy13ZWJraXQtcGFkZGluZy1zdGFydDoxLjVyZW07cGFkZGluZy1pbmxpbmUtc3RhcnQ6MS41cmVtOy13ZWJraXQtcGFkZGluZy1lbmQ6MDtwYWRkaW5nLWlubGluZS1lbmQ6MH0uZmlsdGVycy0tc3RpY2t5e3Bvc2l0aW9uOnN0aWNreTt0b3A6MDtoZWlnaHQ6MTAwJX0uZmlsdGVyc19fY29udGVudHtvdmVyZmxvdy15OmF1dG87aGVpZ2h0OjEwMCU7cGFkZGluZy10b3A6MS41cmVtO2JveC1zaXppbmc6Ym9yZGVyLWJveDtzY3JvbGxiYXItZ3V0dGVyOnN0YWJsZX0uZmlsdGVycy0tZW1wdHl7ZGlzcGxheTpub25lfS5maWx0ZXJzLS1hY3RpdmV7b3BhY2l0eToxO292ZXJmbG93LXk6YXV0bzt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCl9LmZpbHRlcnNfX3RpdGxle2ZvbnQtd2VpZ2h0OjUwMDtmb250LXNpemU6MC44NzVyZW07Y29sb3I6dmFyKC0tY2FsY2l0ZS11aS10ZXh0LTEpO3BhZGRpbmctYm90dG9tOjFyZW07cGFkZGluZy10b3A6MDttYXJnaW4tYm90dG9tOjFyZW07bWFyZ2luLXRvcDowO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjAuNzVyZW07cGFkZGluZy1pbmxpbmUtc3RhcnQ6MC43NXJlbTtib3JkZXItYm90dG9tOjFweCBzb2xpZCB2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci0zKX0ucmFuZ2V7Y29sb3I6dmFyKC0tY2FsY2l0ZS11aS10ZXh0LTEpO2ZvbnQtc2l6ZTowLjg3NXJlbX0uc21hbGwgLmZpbHRlcnN7cGFkZGluZzowfS5zbWFsbCAuZmlsdGVyc19fY29udGVudHtwYWRkaW5nLWxlZnQ6MXJlbTtwYWRkaW5nLXJpZ2h0OjFyZW19LnNtYWxsIC5jb250ZW50X192aWV3e3BhZGRpbmctaW5saW5lOjAuNXJlbTttYXJnaW4taW5saW5lOjB9LnNtYWxsIC5jb250ZW50X192aWV3LS1wYW5lbHtwYWRkaW5nLWlubGluZTowfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDY0MHB4KXs6aG9zdHstLWFyY2dpcy1icm93c2VyLXBhbmUtd2lkdGg6MTAwJX19XCI7XG5cbmNvbnN0IEFyY2dpc0Jyb3dzZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuYXJpYVVwZGF0ZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJpYVVwZGF0ZVwiLCA3KTtcbiAgICB0aGlzLmhhbmRsZVJlc2l6ZSA9ICgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZVByZXZpZXdQb3NpdGlvbik7XG4gICAgdGhpcy51cGRhdGVQcmV2aWV3UG9zaXRpb24gPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5mb3JtRmFjdG9yID09PSBcInNtYWxsXCIgfHwgdGhpcy5oZWlnaHQgIT09IFwiYXV0b1wiIHx8ICF0aGlzLnByZXZpZXdDb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVjdCA9IHRoaXMucHJldmlld0NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHsgeCwgeSwgaGVpZ2h0IH0gPSByZWN0O1xuICAgICAgY29uc3QgbWF4WSA9IGhlaWdodCArIHk7XG4gICAgICB0aGlzLnByZXZpZXdCb3VuZGluZ0JveCA9IHtcbiAgICAgICAgdG9wOiBNYXRoLm1heCh5LCAwKSxcbiAgICAgICAgbGVmdDogeCxcbiAgICAgICAgYm90dG9tOiBtYXhZID4gd2luZG93LmlubmVySGVpZ2h0ID8gMCA6IHdpbmRvdy5pbm5lckhlaWdodCAtIG1heFlcbiAgICAgIH07XG4gICAgfTtcbiAgICB0aGlzLnBhbmVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucHJldmlldyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxvYWRpbmcgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oaWRlQ29udGVudFRvcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNlbGVjdGVkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYWx3YXlzU2hvd1NlbGVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFsd2F5c1Nob3dDb250ZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmVzcG9uc2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdG9yZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFwaSA9IDQ7XG4gICAgdGhpcy5mb3JtRmFjdG9yID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2VhcmNoVGVybSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IFwiZnVsbFwiO1xuICAgIHRoaXMucGFnZVJhbmdlVGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm5vUmVzdWx0cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnByZXZpZXdCb3VuZGluZ0JveCA9IHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICBjb25zdCBsb2NhbGUgPSBhd2FpdCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKHRoaXMuZWwpO1xuICAgIHRoaXMuaTE4biA9IGxvY2FsZVswXTtcbiAgICBvblByZXZpZXdDaGFuZ2UodGhpcy5zdG9yZSwgdGhpcy51cGRhdGVQcmV2aWV3UG9zaXRpb24pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgfVxuICBhc3luYyB1cGRhdGVQYWdlKHNlYXJjaFJlc3BvbnNlKSB7XG4gICAgY29uc3QgcmFuZ2VzID0gYXdhaXQgdGhpcy51cGRhdGVQYWdlUmFuZ2Uoc2VhcmNoUmVzcG9uc2UpO1xuICAgIHRoaXMucGFnZVJhbmdlVGV4dCA9IHJhbmdlc1swXTtcbiAgICB0aGlzLmFyaWFVcGRhdGUuZW1pdChyYW5nZXNbMV0pO1xuICAgIHRoaXMubm9SZXN1bHRzID0gKHNlYXJjaFJlc3BvbnNlID09PSBudWxsIHx8IHNlYXJjaFJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWFyY2hSZXNwb25zZS50b3RhbCkgPT09IDA7XG4gIH1cbiAgcmVuZGVyUG9wb3ZlckNvbnRlbnRzKHNob3dGaWx0ZXJzLCBzaG93UHJldmlldywgaXNTaGVldCkge1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IHN0eWxlOiB7XG4gICAgICAgIHdpZHRoOiBpc1NoZWV0ID8gXCIxMDAlXCIgOiBgJHt0aGlzLnN0b3JlLnN0YXRlLndpZHRoIHx8IDB9cHhgLFxuICAgICAgICBoZWlnaHQ6IGlzU2hlZXQgPyBcIjEwMCVcIiA6IGAke3RoaXMuc3RvcmUuc3RhdGUuaGVpZ2h0IHx8IDB9cHhgXG4gICAgICB9IH0sIGgoXCJkaXZcIiwgeyBjbGFzczogeyBoaWRlOiAhc2hvd1ByZXZpZXcsIFwicHJldmlldy1wYW5lbFwiOiB0cnVlIH0gfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcInByZXZpZXdcIiB9KSksIGgoXCJkaXZcIiwgeyBjbGFzczogeyBoaWRlOiAhc2hvd0ZpbHRlcnMsIFwiZmlsdGVyLXBhbmVsXCI6IHRydWUgfSB9LCBoKFwiY2FsY2l0ZS1wYW5lbFwiLCB7IGhlYWRpbmc6IHRoaXMuaTE4bi5icm93c2VyLmZpbHRlcnMsIGNsb3NhYmxlOiB0cnVlLCBvbkNhbGNpdGVQYW5lbENsb3NlOiAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUuY3VycmVudFRhcmdldC5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdG9yZS5zdGF0ZS5maWx0ZXJzRXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgIH0gfSwgaChcImRpdlwiLCBudWxsLCAodGhpcy5zdG9yZS5zdGF0ZS5wYW5lbCB8fCBpc1NoZWV0KSAmJiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImZpbHRlci1wYW5lbF9fY29udGVudFwiIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJzb3J0XCIgfSkpKSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImZpbHRlcnNcIiB9KSksIHRoaXMuZm9ybUZhY3RvciA9PT0gXCJzbWFsbFwiICYmIHRoaXMuaGFzQWN0aXZlRmlsdGVyKHRoaXMuc3RvcmUpICYmIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZmlsdGVyLXN0YXR1cy0tbW9iaWxlXCIsIHNsb3Q6IFwiZm9vdGVyXCIgfSwgaChcImFyY2dpcy1icm93c2VyLWZpbHRlci1zdGF0dXNcIiwgeyBjbGFzczogXCJmaWx0ZXItc3RhdHVzXCIsIGZpbHRlcnM6IHRoaXMuc3RvcmUuc3RhdGUuZmlsdGVycyB9KSkpKSkpKTtcbiAgfVxuICBhc3luYyB1cGRhdGVQYWdlUmFuZ2UocGFnZSkge1xuICAgIGNvbnN0IHsgc3RhcnQsIGVuZCwgdG90YWwgfSA9IGNhbGN1bGF0ZVBhZ2VCb3VuZGFyaWVzKHBhZ2UpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7IGFwaTogdGhpcy5hcGksIHBsYWNlczogMCwgdHlwZTogXCJkZWNpbWFsXCIgfTtcbiAgICBjb25zdCBzdGFydFN0cmluZyA9IGF3YWl0IGZvcm1hdE51bWJlcihzdGFydCwgb3B0aW9ucyk7XG4gICAgY29uc3QgZW5kU3RyaW5nID0gYXdhaXQgZm9ybWF0TnVtYmVyKGVuZCwgb3B0aW9ucyk7XG4gICAgY29uc3QgdG90YWxTdHJpbmcgPSAoYXdhaXQgZm9ybWF0TnVtYmVyKHRvdGFsLCBvcHRpb25zKSkgKyAodG90YWwgPj0gMTAwMDAgPyBcIitcIiA6IFwiXCIpO1xuICAgIGlmICh0aGlzLnN0b3JlLnN0YXRlLmxhbmcgPT09IFwiZW5cIikge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYCR7c3RhcnRTdHJpbmd9LSR7ZW5kU3RyaW5nfSBvZiAke3RvdGFsU3RyaW5nfWAsXG4gICAgICAgIGAke3N0YXJ0U3RyaW5nfS0ke2VuZFN0cmluZ30gb2YgJHt0b3RhbFN0cmluZ30gaXRlbSR7dG90YWwgPT09IDEgPyBcIlwiIDogXCJzXCJ9YFxuICAgICAgXTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMuaTE4bi5icm93c2VyLnBhZ2VSYW5nZVxuICAgICAgICAucmVwbGFjZShcIiR7c3RhcnR9XCIsIHN0YXJ0U3RyaW5nKVxuICAgICAgICAucmVwbGFjZShcIiR7ZW5kfVwiLCBlbmRTdHJpbmcpXG4gICAgICAgIC5yZXBsYWNlKFwiJHt0b3RhbH1cIiwgdG90YWxTdHJpbmcpLFxuICAgICAgdGhpcy5pMThuLmJyb3dzZXIucGFnZVJhbmdlQXJpYVxuICAgICAgICAucmVwbGFjZShcIiR7c3RhcnR9XCIsIHN0YXJ0U3RyaW5nKVxuICAgICAgICAucmVwbGFjZShcIiR7ZW5kfVwiLCBlbmRTdHJpbmcpXG4gICAgICAgIC5yZXBsYWNlKFwiJHt0b3RhbH1cIiwgdG90YWxTdHJpbmcpXG4gICAgXTtcbiAgfVxuICByZW5kZXJGbG93KCkge1xuICAgIGNvbnN0IHsgZm9ybUZhY3RvciwgbG9hZGluZywgbm9SZXN1bHRzLCBwYW5lbCB9ID0gdGhpcztcbiAgICBjb25zdCBhdXRvSGVpZ2h0ID0gdGhpcy5oZWlnaHQgPT09IFwiYXV0b1wiO1xuICAgIGNvbnN0IHNob3dTb3J0SW5GaWx0ZXJzID0gdGhpcy5zdG9yZS5zdGF0ZS5wYW5lbCB8fCB0aGlzLnN0b3JlLnN0YXRlLndpZHRoIDwgYnJlYWtwb2ludHMuc207XG4gICAgY29uc3Qgc2hvd0ZpbHRlcnMgPSB0aGlzLnN0b3JlLnN0YXRlLmZpbHRlcnNFeHBhbmRlZCAmJlxuICAgICAgKCF0aGlzLnN0b3JlLnN0YXRlLmZpbHRlcnNFbXB0eSB8fCAoIXRoaXMuc3RvcmUuc3RhdGUuc29ydEVtcHR5ICYmIHNob3dTb3J0SW5GaWx0ZXJzKSk7XG4gICAgY29uc3Qgc2hvd1ByZXZpZXcgPSAhIXRoaXMuc3RvcmUuc3RhdGUucHJldmlldztcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJwYW5lbFwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogeyBcInRvcC1iYXJcIjogdHJ1ZSwgXCJ0b3AtYmFyLS1zbWFsbFwiOiBmb3JtRmFjdG9yID09PSBcInNtYWxsXCIgfSB9LCBoKFwic2xvdFwiLCB7IG5hbWU6IFwidG9wLWJhclwiIH0pKSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIHNjcm9sbGluZzogdHJ1ZSxcbiAgICAgICAgXCJzY3JvbGxpbmctLWZ1bGxcIjogIWF1dG9IZWlnaHQgfHwgcGFuZWxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIFwidHdvLXVwXCI6IHRydWUsXG4gICAgICAgIFtmb3JtRmFjdG9yXTogdHJ1ZVxuICAgICAgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY29udGVudFwiIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJjb250ZW50LXN0YXJ0XCIgfSksIGxvYWRpbmcgJiYgKGgoXCJkaXZcIiwgeyBjbGFzczogXCJjb250ZW50X192aWV3IGNvbnRlbnRfX3ZpZXctLWZsZXhcIiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY292ZXJcIiB9LCBoKFwiY2FsY2l0ZS1sb2FkZXJcIiwgeyBjbGFzczogXCJsb2FkZXJcIiwgbGFiZWw6IFwiXCIgfSkpKSksIG5vUmVzdWx0cyAmJiAhbG9hZGluZyAmJiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImNvbnRlbnRfX3ZpZXcgY29udGVudF9fdmlldy0tZmxleFwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJjb3ZlclwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJuby1yZXN1bHRzXCIgfSwgdGhpcy5yZW5kZXJOb1Jlc3VsdHMoKSkpKSksIGgoXCJkaXZcIiwgeyBjbGFzczoge1xuICAgICAgICBoaWRlOiBsb2FkaW5nIHx8IG5vUmVzdWx0cyxcbiAgICAgICAgY29udGVudF9fdmlldzogdHJ1ZSxcbiAgICAgICAgXCJjb250ZW50X192aWV3LS1wYW5lbFwiOiAhIXRoaXMuc3RvcmUuc3RhdGUucGFuZWwsXG4gICAgICAgIFwiY29udGVudF9fdmlldy0tZmxleFwiOiAhbG9hZGluZyAmJiAhbm9SZXN1bHRzXG4gICAgICB9IH0sICF0aGlzLnN0b3JlLnN0YXRlLnBhbmVsICYmIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY29udGVudF9fdG9wXCIgfSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJyYW5nZSByYW5nZS0tc3BhY2UtcmlnaHRcIiB9LCB0aGlzLnBhZ2VSYW5nZVRleHQpLCAhc2hvd1NvcnRJbkZpbHRlcnMgJiYgaChcInNsb3RcIiwgeyBuYW1lOiBcInNvcnRcIiB9KSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZmxvdy1jb250ZW50XCIgfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImNvbnRlbnRcIiB9KSksIGgoXCJzbG90XCIsIHsgbmFtZTogXCJwYWdpbmF0aW9uXCIgfSksIGgoXCJzbG90XCIsIHsgbmFtZTogXCJjb250ZW50LWVuZFwiIH0pKSkpLCBoKFwic2xvdFwiLCB7IG5hbWU6IFwic2Nyb2xsLWVuZFwiIH0pKSwgIXRoaXMuc3RvcmUuc3RhdGUucGFuZWwgfHwgd2luZG93LmlubmVyV2lkdGggPCB0aGlzLnN0b3JlLnN0YXRlLndpZHRoICogMiA/IChoKFwiZGl2XCIsIHsgY2xhc3M6IHtcbiAgICAgICAgc2hlZXQ6IHRydWUsXG4gICAgICAgIFwic2hlZXQtLWFjdGl2ZVwiOiBzaG93RmlsdGVycyB8fCBzaG93UHJldmlld1xuICAgICAgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwic2hlZXRfX2JhY2tncm91bmRcIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInNoZWV0X19jb250ZW50c1wiIH0sIHRoaXMucmVuZGVyUG9wb3ZlckNvbnRlbnRzKHNob3dGaWx0ZXJzLCBzaG93UHJldmlldywgdHJ1ZSkpKSkgOiAoaChcImNhbGNpdGUtcG9wb3ZlclwiLCB7IG92ZXJsYXlQb3NpdGlvbmluZzogXCJmaXhlZFwiLCBvcGVuOiBzaG93UHJldmlldyB8fCBzaG93RmlsdGVycywgbGFiZWw6IFwiZmlsdGVyc1wiLCByZWZlcmVuY2VFbGVtZW50OiB0aGlzLmVsLCBvZmZzZXRTa2lkZGluZzogMCwgb2Zmc2V0RGlzdGFuY2U6IDAsIHRyaWdnZXJEaXNhYmxlZDogdHJ1ZSwgcG9pbnRlckRpc2FibGVkOiB0cnVlLCBwbGFjZW1lbnQ6IHRoaXMuc3RvcmUuc3RhdGUucGFuZWwgPyBcInRyYWlsaW5nXCIgOiBcImF1dG9cIiwgb25DYWxjaXRlUG9wb3Zlck9wZW46IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuc3RvcmUuc3RhdGUucGFuZWwgfHwgd2luZG93LmlubmVyV2lkdGggPCB0aGlzLnN0b3JlLnN0YXRlLndpZHRoICogMikge1xuICAgICAgICAgIGV2ZW50LnRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgICAgfSB9LCB0aGlzLnJlbmRlclBvcG92ZXJDb250ZW50cyhzaG93RmlsdGVycywgc2hvd1ByZXZpZXcpKSkpKTtcbiAgfVxuICBoYXNBY3RpdmVGaWx0ZXIoc3RvcmUpIHtcbiAgICAvLyBjZXJ0YWluIGZpbHRlcnMgc2hvdWxkIHN0aWxsIHNob3cgZW1wdHkgc3RhdGUsIG5vdCBubyByZXN1bHRzIHN0YXRlXG4gICAgY29uc3QgYnVpbHRJbkZpbHRlcnMgPSBbXCJmb2xkZXJcIiwgXCJncm91cFwiXTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RvcmUgPT09IG51bGwgfHwgc3RvcmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0b3JlLnN0YXRlLmZpbHRlcnMpIHx8IHt9KVxuICAgICAgLmZpbHRlcigoeyBpZCB9KSA9PiAhYnVpbHRJbkZpbHRlcnMuaW5jbHVkZXMoaWQpKVxuICAgICAgLnNvbWUoKGZpbHRlcikgPT4gZmlsdGVyLnZhbHVlKTtcbiAgfVxuICByZW5kZXJOb1Jlc3VsdHMoKSB7XG4gICAgY29uc3Qgc2hvd01lc3NhZ2UgPSB0aGlzLm5vUmVzdWx0cyAmJiAhdGhpcy5sb2FkaW5nO1xuICAgIGNvbnN0IGhhc0ZpbHRlcnMgPSB0aGlzLmhhc0FjdGl2ZUZpbHRlcih0aGlzLnN0b3JlKSB8fCAhIXRoaXMuc2VhcmNoVGVybTtcbiAgICBpZiAoIXNob3dNZXNzYWdlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IHsgY292ZXI6IHRydWUgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwibm8tcmVzdWx0c1wiIH0sIGhhc0ZpbHRlcnMgPyBoKFwic2xvdFwiLCB7IG5hbWU6IFwibm8tcmVzdWx0c1wiIH0pIDogaChcInNsb3RcIiwgeyBuYW1lOiBcIm5vLWNvbnRlbnRcIiB9KSkpKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBsb2FkaW5nLCBub1Jlc3VsdHMsIGZvcm1GYWN0b3IsIGhpZGVDb250ZW50VG9wLCBhbHdheXNTaG93Q29udGVudCwgcGFuZWwgfSA9IHRoaXM7XG4gICAgY29uc3QgYXV0b0hlaWdodCA9IHRoaXMuaGVpZ2h0ID09PSBcImF1dG9cIjtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBgJHsodGhpcy5zdG9yZS5zdGF0ZS5oZWlnaHQgfHwgd2luZG93LmlubmVySGVpZ2h0KSAtIDQ4fXB4YDtcbiAgICBjb25zdCBtYXhIZWlnaHRTdHlsZSA9IHRoaXMuaGVpZ2h0ID09PSBcImF1dG9cIiA/IHt9IDogeyBtYXhIZWlnaHQgfTtcbiAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgZm9ybUZhY3RvciA9PT0gXCJzbWFsbFwiID8gKHRoaXMucmVuZGVyRmxvdygpKSA6IChoKFwiZGl2XCIsIHsgY2xhc3M6IHtcbiAgICAgICAgd3JhcHBlcjogdHJ1ZSxcbiAgICAgICAgXCJ3cmFwcGVyLS1maXhlZFwiOiB0aGlzLnN0b3JlLnN0YXRlLmZpbHRlcnNFeHBhbmRlZCxcbiAgICAgICAgXCJ3cmFwcGVyLS1hdXRvXCI6IGF1dG9IZWlnaHQsXG4gICAgICAgIFwid3JhcHBlci0tZnVsbFwiOiB0aGlzLmhlaWdodCA9PT0gXCJmdWxsXCJcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInRvcC1iYXJcIiB9LCBoKFwic2xvdFwiLCB7IG5hbWU6IFwidG9wLWJhclwiIH0pKSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIFwicHJldmlldy1wb3NpdGlvblwiOiB0cnVlLFxuICAgICAgICBcInByZXZpZXctcG9zaXRpb24tLXdpdGgtdG9wLWJhclwiOiAhdGhpcy5zdG9yZS5zdGF0ZS50b3BiYXJFbXB0eVxuICAgICAgfSwgcmVmOiAoZWwpID0+ICh0aGlzLnByZXZpZXdDb250YWluZXIgPSBlbCkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIHByZXZpZXc6IHRydWUsXG4gICAgICAgIFwicHJldmlldy0tYWN0aXZlXCI6ICEhdGhpcy5zdG9yZS5zdGF0ZS5wcmV2aWV3LFxuICAgICAgICBcInByZXZpZXctLWZpeGVkXCI6IGF1dG9IZWlnaHRcbiAgICAgIH0sIHN0eWxlOiBhdXRvSGVpZ2h0ICYmIHRoaXMucHJldmlld0JvdW5kaW5nQm94XG4gICAgICAgID8ge1xuICAgICAgICAgIHRvcDogYCR7dGhpcy5wcmV2aWV3Qm91bmRpbmdCb3gudG9wIHx8IDB9cHhgLFxuICAgICAgICAgIGluc2V0SW5saW5lU3RhcnQ6IGAke3RoaXMucHJldmlld0JvdW5kaW5nQm94LmxlZnQgfHwgMH1weGAsXG4gICAgICAgICAgYm90dG9tOiBgJHt0aGlzLnByZXZpZXdCb3VuZGluZ0JveC5ib3R0b20gfHwgMH1weGBcbiAgICAgICAgfVxuICAgICAgICA6IHt9IH0sIGgoXCJkaXZcIiwgeyBjbGFzczoge1xuICAgICAgICBwYW5lOiB0cnVlLFxuICAgICAgICBcInBhbmUtLW9wZW5cIjogISF0aGlzLnN0b3JlLnN0YXRlLnByZXZpZXdcbiAgICAgIH0gfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcInByZXZpZXdcIiB9KSkpKSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIHNjcm9sbGluZzogdHJ1ZSxcbiAgICAgICAgXCJzY3JvbGxpbmctLWZ1bGxcIjogIWF1dG9IZWlnaHQgfHwgcGFuZWxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIFwidHdvLXVwXCI6IHRydWUsXG4gICAgICAgIFtmb3JtRmFjdG9yXTogdHJ1ZVxuICAgICAgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IHtcbiAgICAgICAgZmlsdGVyczogdHJ1ZSxcbiAgICAgICAgXCJmaWx0ZXJzLS1zdGlja3lcIjogIWF1dG9IZWlnaHQsXG4gICAgICAgIFwiZmlsdGVycy0tZW1wdHlcIjogdGhpcy5zdG9yZS5zdGF0ZS5maWx0ZXJzRW1wdHkgJiYgIXRoaXMuc3RvcmUuc3RhdGUucHJldmlldyxcbiAgICAgICAgXCJmaWx0ZXJzLS1hY3RpdmVcIjogdGhpcy5zdG9yZS5zdGF0ZS5maWx0ZXJzRXhwYW5kZWRcbiAgICAgIH0sIHN0eWxlOiBtYXhIZWlnaHRTdHlsZSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZmlsdGVyc19fY29udGVudFwiLCBzdHlsZTogbWF4SGVpZ2h0U3R5bGUgfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImZpbHRlcnNcIiB9KSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY29udGVudFwiIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJjb250ZW50LXN0YXJ0XCIgfSksIGgoXCJkaXZcIiwgeyBjbGFzczoge1xuICAgICAgICBjb250ZW50X192aWV3OiB0cnVlLFxuICAgICAgICBcImNvbnRlbnRfX3ZpZXctLW5vLWZpbHRlcnNcIjogdGhpcy5zdG9yZS5zdGF0ZS5maWx0ZXJzRW1wdHkgJiYgIXRoaXMuc3RvcmUuc3RhdGUucHJldmlldyxcbiAgICAgICAgXCJjb250ZW50X192aWV3LS1mbGV4XCI6IHRydWVcbiAgICAgIH0gfSwgIWhpZGVDb250ZW50VG9wICYmIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY29udGVudF9fdG9wXCIgfSwgaChcInNwYW5cIiwgeyBjbGFzczogeyBzZWxlY3Rpb246IHRydWUsIGhpZGU6ICF0aGlzLmFsd2F5c1Nob3dTZWxlY3Rpb24gfSB9LCBoKFwic2xvdFwiLCB7IG5hbWU6IFwic2VsZWN0aW9uXCIgfSkpLCBoKFwic3BhblwiLCB7IGNsYXNzOiBcInJhbmdlXCIgfSwgdGhpcy5wYWdlUmFuZ2VUZXh0KSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJhY3Rpb25zXCIgfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImFjdGlvbnNcIiB9KSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJjb250ZW50X190b3BfX2VuZFwiIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJ2aWV3XCIgfSksIGgoXCJzbG90XCIsIHsgbmFtZTogXCJzb3J0XCIgfSkpKSksIGxvYWRpbmcgJiYgIWFsd2F5c1Nob3dDb250ZW50ICYmIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY292ZXJcIiB9LCBoKFwiY2FsY2l0ZS1sb2FkZXJcIiwgeyBjbGFzczogXCJsb2FkZXJcIiwgbGFiZWw6IHRoaXMuaTE4bi5icm93c2VyLmxvYWRpbmcgfSkpKSwgdGhpcy5yZW5kZXJOb1Jlc3VsdHMoKSwgaChcImRpdlwiLCB7IGNsYXNzOiB7XG4gICAgICAgIGhpZGU6IChsb2FkaW5nICYmICFhbHdheXNTaG93Q29udGVudCkgfHwgbm9SZXN1bHRzLFxuICAgICAgICBcInJlc3VsdHMtd3JhcHBlclwiOiB0cnVlXG4gICAgICB9IH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJjb250ZW50XCIgfSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IHtcbiAgICAgICAgaGlkZTogbG9hZGluZyB8fCBub1Jlc3VsdHNcbiAgICAgIH0gfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcInBhZ2luYXRpb25cIiB9KSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImNvbnRlbnQtZW5kXCIgfSkpKSkpLCBoKFwic2xvdFwiLCB7IG5hbWU6IFwic2Nyb2xsLWVuZFwiIH0pKSkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwicmVzcG9uc2VcIjogW1widXBkYXRlUGFnZVwiXVxuICB9OyB9XG59O1xuQXJjZ2lzQnJvd3Nlci5zdHlsZSA9IGFyY2dpc0Jyb3dzZXJDc3M7XG5cbmNvbnN0IGFyY2dpc0Jyb3dzZXJBY3Rpb25zQ3NzID0gXCI6aG9zdHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO21hcmdpbi1sZWZ0OjFyZW07bWFyZ2luLXJpZ2h0OjFyZW19LndyYXBwZXJ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjAuMjVyZW07cGFkZGluZy1pbmxpbmUtc3RhcnQ6MC4yNXJlbTstd2Via2l0LWJvcmRlci1zdGFydDoxcHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMSk7Ym9yZGVyLWlubGluZS1zdGFydDoxcHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMSk7LXdlYmtpdC1ib3JkZXItZW5kOjFweCBzb2xpZCB2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci0xKTtib3JkZXItaW5saW5lLWVuZDoxcHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMSl9LmJ1dHRvbnstd2Via2l0LW1hcmdpbi1lbmQ6MC4yNXJlbTttYXJnaW4taW5saW5lLWVuZDowLjI1cmVtfVwiO1xuXG5jb25zdCBBcmNnaXNCcm93c2VyQWN0aW9ucyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5hY3Rpb25zID0gW107XG4gICAgdGhpcy5zZWxlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgY29uc3QgbG9jYWxlID0gYXdhaXQgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyh0aGlzLmVsLCBcImFyY2dpcy1icm93c2VyXCIpO1xuICAgIHRoaXMuaTE4biA9IGxvY2FsZVswXS5hY3Rpb25zO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGFjdGlvbnMsIHNlbGVjdGlvbiwgaTE4biB9ID0gdGhpcztcbiAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgKHNlbGVjdGlvbiA9PT0gbnVsbCB8fCBzZWxlY3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbGVjdGlvbi5sZW5ndGgpICYmIChhY3Rpb25zID09PSBudWxsIHx8IGFjdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFjdGlvbnMubGVuZ3RoKSA/IChoKFwibmF2XCIsIHsgY2xhc3M6IFwid3JhcHBlclwiIH0sIGFjdGlvbnMubWFwKCh7IHRleHQsIGljb24sIG9uQ2xpY2ssIGlkIH0pID0+IChoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBrZXk6IGlkICE9PSBudWxsICYmIGlkICE9PSB2b2lkIDAgPyBpZCA6IGAke3RleHR9LSR7aWNvbn1gLCBjbGFzczogXCJidXR0b25cIiwgXCJpY29uLXN0YXJ0XCI6IGljb24sIG9uQ2xpY2s6ICgpID0+IG9uQ2xpY2soKSwgYXBwZWFyYW5jZTogXCJ0cmFuc3BhcmVudFwiLCBraW5kOiBcIm5ldXRyYWxcIiwgbGFiZWw6IGkxOG4ubW9yZSB9LCB0ZXh0KSkpKSkgOiBudWxsKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0Jyb3dzZXJBY3Rpb25zLnN0eWxlID0gYXJjZ2lzQnJvd3NlckFjdGlvbnNDc3M7XG5cbmNvbnN0IEFyY2dpc0Jyb3dzZXJGaWx0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuYXJjZ2lzQnJvd3NlckZpbHRlclJlbW92ZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQnJvd3NlckZpbHRlclJlbW92ZVwiLCA3KTtcbiAgICB0aGlzLmV4cGFuZGVkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVhZGluZyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFjdGl2ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm5vUGFkZGluZyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNsZWFyRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgY29uc3QgbG9jYWxlID0gYXdhaXQgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyh0aGlzLmVsLCBcImFyY2dpcy1icm93c2VyXCIpO1xuICAgIHRoaXMuaTE4biA9IGxvY2FsZVswXS5maWx0ZXI7XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICBpZiAodGhpcy5hY2NvcmRpb25JdGVtKSB7XG4gICAgICBpZiAodGhpcy5leHBhbmRlZCkge1xuICAgICAgICB0aGlzLmFjY29yZGlvbkl0ZW0uZXhwYW5kZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgY29udGVudCA9IHRoaXMuYWNjb3JkaW9uSXRlbS5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudFwiKTtcbiAgICAgIGlmIChjb250ZW50ICYmIHRoaXMubm9QYWRkaW5nKSB7XG4gICAgICAgIGNvbnRlbnQuc3R5bGUucGFkZGluZyA9IFwiMFwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb21wb25lbnREaWRSZW5kZXIoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBpY29uID0gKF9iID0gKF9hID0gdGhpcy5hY2NvcmRpb25JdGVtKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnF1ZXJ5U2VsZWN0b3IoXCIuaWNvbi1wb3NpdGlvbi0tZW5kXCIpO1xuICAgIGlmIChpY29uKSB7XG4gICAgICBpY29uLmNsYXNzTGlzdC5yZW1vdmUoXCJpY29uLXBvc2l0aW9uLS1lbmRcIik7XG4gICAgICBpY29uLmNsYXNzTGlzdC5hZGQoXCJpY29uLXBvc2l0aW9uLS1zdGFydFwiKTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYWN0aXZlLCBjbGVhckRpc2FibGVkLCBoZWFkaW5nLCBpMThuIH0gPSB0aGlzO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IHN0eWxlOiB7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIgfSB9LCBoKFwiY2FsY2l0ZS1hY2NvcmRpb24taXRlbVwiLCB7IGhlYWRpbmc6IGhlYWRpbmcsIHJlZjogKGVsKSA9PiB7XG4gICAgICAgIHRoaXMuYWNjb3JkaW9uSXRlbSA9IGVsO1xuICAgICAgICBlbC5pY29uUG9zaXRpb24gPSBcInN0YXJ0XCI7XG4gICAgICAgIGVsLmljb25UeXBlID0gXCJjaGV2cm9uXCI7XG4gICAgICB9LCBleHBhbmRlZDogdGhpcy5leHBhbmRlZCxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIG9uQ2FsY2l0ZUludGVybmFsQWNjb3JkaW9uSXRlbVNlbGVjdDogKGUpID0+IHtcbiAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuICAgICAgfSwgc3R5bGU6IHtcbiAgICAgICAgXCItLWNhbGNpdGUtYWNjb3JkaW9uLWl0ZW0tYmFja2dyb3VuZFwiOiBcInZhcigtLWNhbGNpdGUtdWktYmFja2dyb3VuZClcIixcbiAgICAgICAgXCItLWNhbGNpdGUtYWNjb3JkaW9uLWl0ZW0taWNvbi1zcGFjaW5nLXN0YXJ0XCI6IFwiMFwiLFxuICAgICAgICBcIi0tY2FsY2l0ZS1hY2NvcmRpb24taXRlbS1pY29uLXNwYWNpbmctZW5kXCI6IFwiLjVyZW1cIixcbiAgICAgICAgXCItLWNhbGNpdGUtYWNjb3JkaW9uLWl0ZW0tcGFkZGluZ1wiOiBcIi43NXJlbSAuNXJlbVwiLFxuICAgICAgICBcIi0tY2FsY2l0ZS1hY2NvcmRpb24taWNvbi1tYXJnaW5cIjogXCIuNXJlbVwiLFxuICAgICAgICBib3JkZXJUb3A6IFwiMXB4IHNvbGlkIHZhcigtLWNhbGNpdGUtdWktYm9yZGVyLTEpXCJcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IHNsb3Q6IFwiYWN0aW9ucy1lbmRcIiB9LCBhY3RpdmUgJiYgIWNsZWFyRGlzYWJsZWQgJiYgKGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGtpbmQ6IFwibmV1dHJhbFwiLCBhcHBlYXJhbmNlOiBcInRyYW5zcGFyZW50XCIsIG9uQ2xpY2s6ICgpID0+IHRoaXMuYXJjZ2lzQnJvd3NlckZpbHRlclJlbW92ZS5lbWl0KCkgfSwgaTE4bi5jbGVhcikpKSwgaChcImRpdlwiLCB7IHN0eWxlOiB7IG1hcmdpbjogdGhpcy5ub1BhZGRpbmcgPyBcIjBcIiA6IFwiMCAuNzVyZW1cIiB9IH0sIGgoXCJzbG90XCIsIG51bGwpKSkpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuXG5jb25zdCBEQVkgPSAxMDAwICogNjAgKiA2MCAqIDI0O1xuZnVuY3Rpb24gZ2V0U3RhcnRPZkRheShkYXRlKSB7XG4gIGNvbnN0IHRzID0gKGRhdGUgfHwgbmV3IERhdGUoKSkudmFsdWVPZigpO1xuICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHRzKTtcbiAgc3RhcnQuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBzdGFydC52YWx1ZU9mKCk7XG59XG5cbmNvbnN0IEFyY2dpc0Jyb3dzZXJGaWx0ZXJEYXRlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmFyY2dpc0Jyb3dzZXJGaWx0ZXIgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0Jyb3dzZXJGaWx0ZXJcIiwgNyk7XG4gICAgdGhpcy50b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5yZXNldERhdGVQaWNrZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLnJhbmdlID0gbnVsbDtcbiAgICAgIHRoaXMuc3RhcnQgPSBudWxsO1xuICAgICAgdGhpcy5lbmQgPSBudWxsO1xuICAgIH07XG4gICAgdGhpcy5yZW5kZXJSYW5nZSA9IChrZXkpID0+IHtcbiAgICAgIGNvbnN0IHsgaTE4biwgcmFuZ2UgfSA9IHRoaXM7XG4gICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLXRyZWUtaXRlbVwiLCB7IFwiZGF0YS1yYW5nZVwiOiBrZXksIHNlbGVjdGVkOiBrZXkgPT09IHJhbmdlIH0sIGkxOG5ba2V5XSkpO1xuICAgIH07XG4gICAgdGhpcy5wcm9wZXJ0eSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNlcnZlclByb3BlcnR5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN0b3JlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZXhwYW5kZWQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgY29uc3QgbG9jYWxlID0gYXdhaXQgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyh0aGlzLmVsLCBcImFyY2dpcy1icm93c2VyXCIpO1xuICAgIHRoaXMuaTE4biA9IGxvY2FsZVswXS5maWx0ZXJEYXRlO1xuICB9XG4gIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgaWYgKHRoaXMucmFuZ2UgJiYgKHRoaXMucmFuZ2UgIT09IFwiY3VzdG9tXCIgfHwgKHRoaXMuc3RhcnQgJiYgdGhpcy5lbmQpKSkge1xuICAgICAgdGhpcy5hcmNnaXNCcm93c2VyRmlsdGVyLmVtaXQodGhpcy5nZXRFdmVudERldGFpbCgpKTtcbiAgICB9XG4gICAgb25Ccm93c2VyRmlsdGVyUmVtb3ZlKHRoaXMucHJvcGVydHksIHRoaXMuc3RvcmUsICgpID0+IHRoaXMucmVzZXREYXRlUGlja2VyKCkpO1xuICB9XG4gIGdldFZhbHVlKCkge1xuICAgIGNvbnN0IHsgcmFuZ2UsIHN0YXJ0LCBlbmQgfSA9IHRoaXM7XG4gICAgY29uc3Qgc3RhcnRPZkRheSA9IGdldFN0YXJ0T2ZEYXkoKTtcbiAgICBjb25zdCBlbmRPZkRheSA9IHN0YXJ0T2ZEYXkgKyBEQVkgLSAxO1xuICAgIHN3aXRjaCAocmFuZ2UpIHtcbiAgICAgIGNhc2UgXCJ5ZXN0ZXJkYXlcIjpcbiAgICAgICAgcmV0dXJuIFtzdGFydE9mRGF5IC0gREFZLCBzdGFydE9mRGF5IC0gMV07XG4gICAgICBjYXNlIFwidG9kYXlcIjpcbiAgICAgICAgcmV0dXJuIFtzdGFydE9mRGF5LCBlbmRPZkRheV07XG4gICAgICBjYXNlIFwibGFzdDdcIjpcbiAgICAgICAgcmV0dXJuIFtzdGFydE9mRGF5IC0gREFZICogNywgZW5kT2ZEYXldO1xuICAgICAgY2FzZSBcImxhc3QzMFwiOlxuICAgICAgICByZXR1cm4gW3N0YXJ0T2ZEYXkgLSBEQVkgKiAzMCwgZW5kT2ZEYXldO1xuICAgICAgY2FzZSBcImN1c3RvbVwiOlxuICAgICAgICBjb25zdCBjdXN0b21TdGFydCA9IGdldFN0YXJ0T2ZEYXkoc3RhcnQpO1xuICAgICAgICBjb25zdCBjdXN0b21FbmQgPSBnZXRTdGFydE9mRGF5KGVuZCk7XG4gICAgICAgIHJldHVybiBbY3VzdG9tU3RhcnQsIGN1c3RvbUVuZCArIERBWSAtIDFdO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGdldEV2ZW50RGV0YWlsKCkge1xuICAgIGNvbnN0IHsgcHJvcGVydHksIHJhbmdlLCBpMThuLCBzZXJ2ZXJQcm9wZXJ0eSB9ID0gdGhpcztcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBzZXJ2ZXJQcm9wID0gc2VydmVyUHJvcGVydHkgIT09IG51bGwgJiYgc2VydmVyUHJvcGVydHkgIT09IHZvaWQgMCA/IHNlcnZlclByb3BlcnR5IDogKHByb3BlcnR5ID09PSBcIm1vZGlmaWVkXCIgPyBwcm9wZXJ0eSA6IFwidXBsb2FkZWRcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBwcm9wZXJ0eSxcbiAgICAgIHZhbHVlOiB2YWx1ZSA/IGAoJHtzZXJ2ZXJQcm9wfTpbJHt2YWx1ZVswXX0gVE8gJHt2YWx1ZVsxXX1dKWAgOiBcIlwiLFxuICAgICAgcmFuZ2UsXG4gICAgICBzdGFydDogKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZVswXSkgJiYgbmV3IERhdGUodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlWzBdKSxcbiAgICAgIGVuZDogKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZVsxXSkgJiYgbmV3IERhdGUodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlWzFdKSxcbiAgICAgIGxhYmVsOiB0aGlzLmkxOG5bcHJvcGVydHldLnJlcGxhY2UoXCIke2RhdGV9XCIsIGkxOG5bcmFuZ2VdKVxuICAgIH07XG4gIH1cbiAgaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5yYW5nZSAmJiAodGhpcy5yYW5nZSAhPT0gXCJjdXN0b21cIiB8fCAhISh0aGlzLnN0YXJ0ICYmIHRoaXMuZW5kKSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaTE4biwgcHJvcGVydHksIHJhbmdlLCBzdGFydCwgZW5kIH0gPSB0aGlzO1xuICAgIHJldHVybiAoaChcImFyY2dpcy1icm93c2VyLWZpbHRlclwiLCB7IGhlYWRpbmc6IGkxOG4udGl0bGVbcHJvcGVydHldLCBleHBhbmRlZDogdGhpcy5leHBhbmRlZCwgYWN0aXZlOiB0aGlzLmlzQWN0aXZlKCksIG9uQXJjZ2lzQnJvd3NlckZpbHRlclJlbW92ZTogKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2V0RGF0ZVBpY2tlcigpO1xuICAgICAgICB0aGlzLmFyY2dpc0Jyb3dzZXJGaWx0ZXIuZW1pdCh0aGlzLmdldEV2ZW50RGV0YWlsKCkpO1xuICAgICAgfSB9LCBoKFwiY2FsY2l0ZS10cmVlXCIsIHsgc2VsZWN0aW9uTW9kZTogXCJjaGlsZHJlblwiLCBzY2FsZTogXCJtXCIsIG9uQ2FsY2l0ZVRyZWVTZWxlY3Q6IChldmVudCkgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBub2RlID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBjb25zdCByYW5nZSA9IChfYiA9IChfYSA9IG5vZGUuc2VsZWN0ZWRJdGVtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzBdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGF0YXNldC5yYW5nZTtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHRoaXMucmFuZ2UgPT09IHJhbmdlID8gbnVsbCA6IHJhbmdlO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSA9PT0gXCJjdXN0b21cIiAmJiAhKHRoaXMuc3RhcnQgJiYgdGhpcy5lbmQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXJjZ2lzQnJvd3NlckZpbHRlci5lbWl0KHRoaXMuZ2V0RXZlbnREZXRhaWwoKSk7XG4gICAgICB9IH0sIFtcInRvZGF5XCIsIFwieWVzdGVyZGF5XCIsIFwibGFzdDdcIiwgXCJsYXN0MzBcIiwgXCJjdXN0b21cIl0ubWFwKHRoaXMucmVuZGVyUmFuZ2UpKSwgcmFuZ2UgPT09IFwiY3VzdG9tXCIgJiYgKGgoXCJkaXZcIiwgbnVsbCwgaChcImNhbGNpdGUtZGF0ZS1waWNrZXJcIiwgeyBvbkNhbGNpdGVEYXRlUGlja2VyUmFuZ2VDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBub2RlID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBjb25zdCBzdGFydERhdGUgPSBub2RlLnZhbHVlQXNEYXRlWzBdO1xuICAgICAgICBjb25zdCBlbmREYXRlID0gbm9kZS52YWx1ZUFzRGF0ZVsxXTtcbiAgICAgICAgaWYgKHN0YXJ0RGF0ZSAmJiBlbmREYXRlKSB7XG4gICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0RGF0ZTtcbiAgICAgICAgICB0aGlzLmVuZCA9IGVuZERhdGU7XG4gICAgICAgICAgdGhpcy5hcmNnaXNCcm93c2VyRmlsdGVyLmVtaXQodGhpcy5nZXRFdmVudERldGFpbCgpKTtcbiAgICAgICAgfVxuICAgICAgfSwgc2NhbGU6IFwic1wiLCB2YWx1ZUFzRGF0ZTogW3N0YXJ0LCBlbmRdLCBtYXhBc0RhdGU6IHRoaXMudG9kYXksIHJhbmdlOiB0cnVlLCBzdHlsZToge1xuICAgICAgICBtYXJnaW5Ub3A6IFwiLjVyZW1cIixcbiAgICAgICAgbWFyZ2luQm90dG9tOiBcIi41cmVtXCIsXG4gICAgICAgIG1hcmdpbklubGluZVN0YXJ0OiBcIjJyZW1cIixcbiAgICAgICAgd2lkdGg6IFwiMTIuNzVyZW1cIlxuICAgICAgfSB9KSkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcblxuY29uc3QgYXJjZ2lzQnJvd3NlckZpbHRlclN0YXR1c0NzcyA9IFwiOmhvc3R7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcn1jYWxjaXRlLWNoaXB7LS1jYWxjaXRlLXVpLWZvcmVncm91bmQtMjp2YXIoLS1jYWxjaXRlLXVpLWZvcmVncm91bmQtMSl9LmZpbHRlcnN7LXdlYmtpdC1tYXJnaW4tZW5kOjAuMjVyZW07bWFyZ2luLWlubGluZS1lbmQ6MC4yNXJlbTstd2Via2l0LW1hcmdpbi1zdGFydDoxcmVtO21hcmdpbi1pbmxpbmUtc3RhcnQ6MXJlbX0ubGlua3stLWNhbGNpdGUtZm9udC1zaXplLS0yOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0xKTstLWNhbGNpdGUtdWktYnJhbmQ6dmFyKC0tY2FsY2l0ZS11aS10ZXh0LWxpbmspfS5wb3BvdmVyLWNvbnRlbnR7cGFkZGluZzowLjc1cmVtfVwiO1xuXG5jb25zdCBBcmNnaXNCcm93c2VyRmlsdGVyU3RhdHVzID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmFyY2dpc0Jyb3dzZXJGaWx0ZXJDbGVhciA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQnJvd3NlckZpbHRlckNsZWFyXCIsIDcpO1xuICAgIHRoaXMuYXJjZ2lzQnJvd3NlckZpbHRlclJlbW92ZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQnJvd3NlckZpbHRlclJlbW92ZVwiLCA3KTtcbiAgICB0aGlzLnJlbmRlckNoaXAgPSAoZmlsdGVyKSA9PiB7XG4gICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWNoaXBcIiwgeyBzY2FsZTogXCJzXCIsIHZhbHVlOiBmaWx0ZXIuaWQsIGtleTogZmlsdGVyLmlkLCBjbG9zYWJsZTogdHJ1ZSwgYXBwZWFyYW5jZTogXCJvdXRsaW5lXCIsIG9uQ2FsY2l0ZUNoaXBDbG9zZTogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYXJjZ2lzQnJvd3NlckZpbHRlclJlbW92ZS5lbWl0KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZmlsdGVyKSwgeyB2YWx1ZTogXCJcIiB9KSk7XG4gICAgICAgIH0gfSwgZmlsdGVyLmxhYmVsKSk7XG4gICAgfTtcbiAgICB0aGlzLmZpbHRlcnMgPSB7fTtcbiAgICB0aGlzLmhpZGRlbkZpbHRlcklkcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbXBvbmVudFdpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYnJvd3NlcldpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucG9wb3Zlck9wZW4gPSBmYWxzZTtcbiAgfVxuICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICBjb25zdCBsb2NhbGUgPSBhd2FpdCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKHRoaXMuZWwsIFwiYXJjZ2lzLWJyb3dzZXJcIik7XG4gICAgdGhpcy5pMThuID0gbG9jYWxlWzBdLmZpbHRlclN0YXR1cztcbiAgfVxuICBnZXRWYWxpZEZpbHRlcnMoKSB7XG4gICAgY29uc3QgdmFsaWRGaWx0ZXJzID0gT2JqZWN0LnZhbHVlcyh0aGlzLmZpbHRlcnMpLmZpbHRlcigoZmlsdGVyKSA9PiB7XG4gICAgICAvLyBjZXJ0YWluIGZpbHRlcnMgc2hvdWxkIG5vdCBhcHBlYXIgaW4gdGhlIGxpc3Qgb2YgZmlsdGVyIGNoaXBzXG4gICAgICBpZiAoW1wiZ3JvdXBcIiwgXCJmb2xkZXJcIl0uaW5jbHVkZXMoZmlsdGVyLmlkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGZpbHRlciA9PT0gbnVsbCB8fCBmaWx0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbHRlci52YWx1ZSkgJiYgKGZpbHRlciA9PT0gbnVsbCB8fCBmaWx0ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpbHRlci5sYWJlbCk7XG4gICAgfSk7XG4gICAgY29uc3QgeyBjb21wb25lbnRXaWR0aCwgYnJvd3NlcldpZHRoIH0gPSB0aGlzO1xuICAgIHJldHVybiB2YWxpZEZpbHRlcnMucmVkdWNlKChhY2MsIGZpbHRlcikgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgaGV1cmlzdGljIHRvIGRldGVybWluZSBjaGlwIHdpZHRoIHdpdGhvdXQgaGF2aW5nIHRvIHVzZSBnZXRDbGllbnRSZWN0KCkgd2hpY2ggd291bGQgYmUgdmVyeSBzbG93XG4gICAgICAvLyBudW1iZXIgb2YgY2hhcnMgKiBhdmVyYWdlIGNoYXIgd2lkdGggcGx1cyBjaGlwIHBhZGRpbmdcbiAgICAgIGNvbnN0IHdpZHRoID0gKCgoX2EgPSBmaWx0ZXIubGFiZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpIHx8IDApICogOCArIDMyO1xuICAgICAgYWNjLmxlbmd0aCArPSB3aWR0aDtcbiAgICAgIGlmICghY29tcG9uZW50V2lkdGggfHwgYnJvd3NlcldpZHRoIDwgYnJlYWtwb2ludHMuc20gfHwgY29tcG9uZW50V2lkdGggLSBhY2MubGVuZ3RoID4gMTgwKSB7XG4gICAgICAgIGFjYy5pbkJvdW5kcy5wdXNoKGZpbHRlcik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYWNjLm91dE9mQm91bmRzLnB1c2goZmlsdGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgeyBsZW5ndGg6IDAsIGluQm91bmRzOiBbXSwgb3V0T2ZCb3VuZHM6IFtdIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGluQm91bmRzLCBvdXRPZkJvdW5kcyB9ID0gdGhpcy5nZXRWYWxpZEZpbHRlcnMoKTtcbiAgICBjb25zdCBoYXNPdmVyZmxvdyA9ICEhKG91dE9mQm91bmRzID09PSBudWxsIHx8IG91dE9mQm91bmRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvdXRPZkJvdW5kcy5sZW5ndGgpO1xuICAgIHJldHVybiAoaChIb3N0LCBudWxsLCBpbkJvdW5kcy5sZW5ndGggPiAwICYmIChoKFwiY2FsY2l0ZS1jaGlwLWdyb3VwXCIsIHsgbGFiZWw6IHRoaXMuaTE4bi5maWx0ZXJzLCBzY2FsZTogXCJzXCIgfSwgaW5Cb3VuZHMubWFwKHRoaXMucmVuZGVyQ2hpcCksIGhhc092ZXJmbG93ICYmIChoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBpZDogXCJwb3BvdmVyLWJ1dHRvblwiLCByb3VuZDogdHJ1ZSwga2luZDogXCJuZXV0cmFsXCIsIGFwcGVhcmFuY2U6IFwib3V0bGluZVwiLCBzY2FsZTogXCJzXCIgfSwgXCIrIFwiLCBvdXRPZkJvdW5kcy5sZW5ndGgpKSkpLCBoYXNPdmVyZmxvdyAmJiBbXG4gICAgICBoKFwiY2FsY2l0ZS1wb3BvdmVyXCIsIHsgbGFiZWw6IHRoaXMuaTE4bi5hZGRpdGlvbmFsLCByZWZlcmVuY2VFbGVtZW50OiBcInBvcG92ZXItYnV0dG9uXCIsIHBsYWNlbWVudDogXCJib3R0b20tZW5kXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInBvcG92ZXItY29udGVudFwiIH0sIGgoXCJjYWxjaXRlLWNoaXAtZ3JvdXBcIiwgeyBsYWJlbDogdGhpcy5pMThuLmFkZGl0aW9uYWwsIHNjYWxlOiBcInNcIiB9LCBvdXRPZkJvdW5kcy5tYXAodGhpcy5yZW5kZXJDaGlwKSkpKVxuICAgIF0pKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzQnJvd3NlckZpbHRlclN0YXR1cy5zdHlsZSA9IGFyY2dpc0Jyb3dzZXJGaWx0ZXJTdGF0dXNDc3M7XG5cbmNvbnN0IEFyY2dpc0l0ZW1Ccm93c2VyRmlsdGVycyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5zdG9yZSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBhZGRQYWRkaW5nID0gKChfYSA9IHRoaXMuc3RvcmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGF0ZS5wYW5lbCkgfHwgKChfYiA9IHRoaXMuc3RvcmUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zdGF0ZS53aWR0aCkgPCBicmVha3BvaW50cy5zbTtcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgbnVsbCwgaChcImRpdlwiLCB7IHN0eWxlOiB7IHBhZGRpbmc6IGFkZFBhZGRpbmcgPyBcIjAgMXJlbSAxcmVtXCIgOiBcIjBcIiB9IH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJ0b3BcIiB9KSksIGgoXCJjYWxjaXRlLWFjY29yZGlvblwiLCB7IGFwcGVhcmFuY2U6IFwidHJhbnNwYXJlbnRcIiwgaWNvblR5cGU6IFwiY2hldnJvblwiLCBzY2FsZTogXCJtXCIsIFwiaWNvbi1wb3NpdGlvblwiOiBcInN0YXJ0XCIsIHJlZjogKGVsKSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcmUuc3RhdGUuZmlsdGVyRWxlbWVudCA9IGVsO1xuICAgICAgfSB9LCBoKFwic2xvdFwiLCBudWxsKSksIGgoXCJzbG90XCIsIHsgbmFtZTogXCJib3R0b21cIiB9KSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5cbmNvbnN0IGFyY2dpc0Jyb3dzZXJQYWdpbmF0aW9uQ3NzID0gXCIud3JhcHBlcntwYWRkaW5nLWxlZnQ6MC41cmVtO3BhZGRpbmctcmlnaHQ6MC41cmVtO3BhZGRpbmctdG9wOjJyZW07cGFkZGluZy1ib3R0b206MnJlbTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleH0uaGlkZXtkaXNwbGF5Om5vbmV9XCI7XG5cbmNvbnN0IEFyY2dpc0Jyb3dzZXJQYWdpbmF0aW9uID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmFyY2dpc0Jyb3dzZXJQYWdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNCcm93c2VyUGFnZVwiLCA3KTtcbiAgICB0aGlzLnRvdGFsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5udW0gPSA2MDtcbiAgICB0aGlzLnN0b3JlID0gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIGNvbnN0IGxvY2FsZSA9IGF3YWl0IGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3ModGhpcy5lbCwgXCJhcmNnaXMtYnJvd3NlclwiKTtcbiAgICB0aGlzLmkxOG4gPSBsb2NhbGVbMF0ucGFnaW5hdGlvbjtcbiAgICBjb25zdCB7IHN0YXJ0LCB0b3RhbCwgbnVtIH0gPSB0aGlzO1xuICAgIHRoaXMuYXJjZ2lzQnJvd3NlclBhZ2UuZW1pdCh7IHN0YXJ0LCB0b3RhbCwgbnVtIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHN0YXJ0LCB0b3RhbCwgbnVtLCBpMThuIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5zdG9yZS5zdGF0ZS53aWR0aCA+IGJyZWFrcG9pbnRzLnNtID8gXCJtXCIgOiBcInNcIjtcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJ3cmFwcGVyXCIgfSwgaChcImNhbGNpdGUtcGFnaW5hdGlvblwiLCB7IG9uQ2FsY2l0ZVBhZ2luYXRpb25DaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBub2RlID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICB0aGlzLmFyY2dpc0Jyb3dzZXJQYWdlLmVtaXQoe1xuICAgICAgICAgIHN0YXJ0OiBub2RlLnN0YXJ0SXRlbSxcbiAgICAgICAgICB0b3RhbDogbm9kZS50b3RhbEl0ZW1zLFxuICAgICAgICAgIG51bTogbm9kZS5wYWdlU2l6ZVxuICAgICAgICB9KTtcbiAgICAgIH0sIHN0YXJ0SXRlbTogc3RhcnQsIHRvdGFsSXRlbXM6IE1hdGgubWluKHRvdGFsLCAxMDAwMCAtIG51bSksIHBhZ2VTaXplOiBudW0sIHNjYWxlOiBzY2FsZSwgbWVzc2FnZU92ZXJyaWRlczogeyBuZXh0OiBpMThuLm5leHQsIHByZXZpb3VzOiBpMThuLnByZXYgfSwgY2xhc3M6IHtcbiAgICAgICAgaGlkZTogIXRvdGFsIHx8IHRvdGFsIDwgbnVtXG4gICAgICB9IH0pKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0Jyb3dzZXJQYWdpbmF0aW9uLnN0eWxlID0gYXJjZ2lzQnJvd3NlclBhZ2luYXRpb25Dc3M7XG5cbmNvbnN0IGFyY2dpc0Jyb3dzZXJTZWFyY2hDc3MgPSBcIjpob3N0e3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2t9LnNlYXJjaHtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwO21hcmdpbi10b3A6MXJlbTtmb250LXNpemU6MC44NzVyZW07Y29sb3I6dmFyKC0tY2FsY2l0ZS11aS10ZXh0LTEpO3BvaW50ZXItZXZlbnRzOm5vbmU7aW5zZXQtaW5saW5lLXN0YXJ0OjEuNXJlbX0ueHtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwO3RvcDowO21hcmdpbi10b3A6MC4yNXJlbTtwYWRkaW5nOjAuNXJlbTtvdXRsaW5lOjJweCBzb2xpZCB0cmFuc3BhcmVudDtvdXRsaW5lLW9mZnNldDoycHg7Ym9yZGVyLXN0eWxlOm5vbmU7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6dmFyKC0tY2FsY2l0ZS11aS10ZXh0LTEpO2luc2V0LWlubGluZS1lbmQ6MC4yNXJlbTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fS5pbnB1dHtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7Ym94LXNpemluZzpib3JkZXItYm94O3BhZGRpbmctdG9wOjFyZW07cGFkZGluZy1ib3R0b206MXJlbTtwYWRkaW5nLWxlZnQ6M3JlbTtwYWRkaW5nLXJpZ2h0OjNyZW07aGVpZ2h0OjNyZW07Ym94LXNoYWRvdzpub25lO2JvcmRlci1zdHlsZTpub25lO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MDt0cmFuc2l0aW9uLXByb3BlcnR5OmJhY2tncm91bmQtY29sb3IsIGJvcmRlci1jb2xvciwgY29sb3IsIGZpbGwsIHN0cm9rZSwgb3BhY2l0eSwgYm94LXNoYWRvdywgdHJhbnNmb3JtO3RyYW5zaXRpb24tZHVyYXRpb246MTUwbXM7Y29sb3I6dmFyKC0tY2FsY2l0ZS11aS10ZXh0LTEpO2ZvbnQtc2l6ZTowLjg3NXJlbTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1ib3R0b206MnB4IHNvbGlkIHRyYW5zcGFyZW50O2ZvbnQtZmFtaWx5OmluaGVyaXR9LmlucHV0Ojotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9ue2Rpc3BsYXk6bm9uZX0uaW5wdXQ6Oi1tcy1jbGVhcntkaXNwbGF5Om5vbmV9LmlucHV0OmZvY3Vze2JveC1zaGFkb3c6bm9uZTtvdXRsaW5lOjJweCBzb2xpZCB0cmFuc3BhcmVudDtvdXRsaW5lLW9mZnNldDoycHg7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJyYW5kKX1cIjtcblxuY29uc3QgQXJjZ2lzQnJvd3NlclNlYXJjaCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5hcmNnaXNCcm93c2VyU2VhcmNoID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNCcm93c2VyU2VhcmNoXCIsIDcpO1xuICAgIHRoaXMuYXJjZ2lzQnJvd3NlclNlYXJjaElucHV0ID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNCcm93c2VyU2VhcmNoSW5wdXRcIiwgNyk7XG4gICAgdGhpcy5kZWJvdW5jZWRJbnB1dCA9IGRlYm91bmNlKCh0ZXJtKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluc1dpbGRjYXJkID0gdGVybS5pbmNsdWRlcyhcIipcIik7XG4gICAgICB0aGlzLnNob3dDbGVhciA9ICEhdGVybTtcbiAgICAgIGlmIChjb250YWluc1dpbGRjYXJkKSB7XG4gICAgICAgIHRoaXMuY29udGFpbnNXaWxkY2FyZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5jb250YWluc1dpbGRjYXJkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXJjZ2lzQnJvd3NlclNlYXJjaC5lbWl0KHRlcm0pO1xuICAgICAgfVxuICAgIH0sIDQwMCk7XG4gICAgdGhpcy50ZXJtID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGxhY2Vob2xkZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zaG93Q2xlYXIgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRhaW5zV2lsZGNhcmQgPSBmYWxzZTtcbiAgfVxuICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgbG9jYWxlID0gYXdhaXQgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyh0aGlzLmVsLCBcImFyY2dpcy1icm93c2VyXCIpO1xuICAgIHRoaXMuaTE4biA9IGxvY2FsZVswXS5zZWFyY2g7XG4gICAgaWYgKHRoaXMudGVybSkge1xuICAgICAgdGhpcy5zaG93Q2xlYXIgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5zV2lsZGNhcmQgPSAoX2EgPSB0aGlzLnRlcm0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcyhcIipcIik7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLmFyY2dpc0Jyb3dzZXJTZWFyY2guZW1pdCh0aGlzLnRlcm0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgaChcImNhbGNpdGUtaWNvblwiLCB7IGljb246IFwic2VhcmNoXCIsIHNjYWxlOiBcInNcIiwgY2xhc3M6IFwic2VhcmNoXCIgfSksIGgoXCJpbnB1dFwiLCB7IGNsYXNzOiBcImlucHV0XCIsIHZhbHVlOiB0aGlzLnRlcm0sIHBsYWNlaG9sZGVyOiB0aGlzLnBsYWNlaG9sZGVyIHx8IHRoaXMuaTE4bi5zZWFyY2gsIHJlZjogKGVsKSA9PiAodGhpcy5zZWFyY2hJbnB1dCA9IGVsKSwgXCJhcmlhLWxhYmVsXCI6IHRoaXMucGxhY2Vob2xkZXIgfHwgdGhpcy5pMThuLnNlYXJjaCwgb25JbnB1dDogKGUpID0+IHtcbiAgICAgICAgY29uc3QgdGVybSA9IGUuY3VycmVudFRhcmdldC52YWx1ZTtcbiAgICAgICAgaWYgKCEodGVybSA9PT0gbnVsbCB8fCB0ZXJtID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0ZXJtLmluY2x1ZGVzKFwiKlwiKSkpIHtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5zV2lsZGNhcmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFyY2dpc0Jyb3dzZXJTZWFyY2hJbnB1dC5lbWl0KHRlcm0pO1xuICAgICAgICB0aGlzLmRlYm91bmNlZElucHV0KHRlcm0pO1xuICAgICAgfSB9KSwgaChcImNhbGNpdGUtYWxlcnRcIiwgeyBvcGVuOiB0aGlzLmNvbnRhaW5zV2lsZGNhcmQsIHNjYWxlOiBcIm1cIiwga2luZDogXCJkYW5nZXJcIiwgaWNvbjogXCJleGNsYW1hdGlvbi1tYXJrLXRyaWFuZ2xlXCIsIGxhYmVsOiB0aGlzLmkxOG4ud2lsZGNhcmQsIG9uQ2FsY2l0ZUFsZXJ0Q2xvc2U6ICgpID0+IHtcbiAgICAgICAgdGhpcy5jb250YWluc1dpbGRjYXJkID0gZmFsc2U7XG4gICAgICB9IH0sIGgoXCJkaXZcIiwgeyBzbG90OiBcIm1lc3NhZ2VcIiB9LCB0aGlzLmkxOG4ud2lsZGNhcmQpKSwgdGhpcy5zaG93Q2xlYXIgJiYgKGgoXCJidXR0b25cIiwgeyBjbGFzczogXCJ4XCIsIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmkxOG4uY2xlYXIsIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgdGhpcy5hcmNnaXNCcm93c2VyU2VhcmNoSW5wdXQuZW1pdChcIlwiKTtcbiAgICAgICAgdGhpcy5hcmNnaXNCcm93c2VyU2VhcmNoLmVtaXQoXCJcIik7XG4gICAgICAgIHRoaXMuc2hvd0NsZWFyID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLnNlYXJjaElucHV0KSB7XG4gICAgICAgICAgdGhpcy5zZWFyY2hJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgdGhpcy5zZWFyY2hJbnB1dC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9IH0sIGgoXCJjYWxjaXRlLWljb25cIiwgeyBpY29uOiBcInhcIiwgc2NhbGU6IFwibVwiLCBjbGFzczogXCJ4LS1pY29uXCIgfSkpKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNCcm93c2VyU2VhcmNoLnN0eWxlID0gYXJjZ2lzQnJvd3NlclNlYXJjaENzcztcblxuY29uc3QgYXJjZ2lzQnJvd3NlclNvcnRDc3MgPSBcIi5kcm9wZG93bi13cmFwe2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9Lm1lZGl1bXtmb250LXdlaWdodDo1MDB9XCI7XG5cbmNvbnN0IEFyY2dpc0Jyb3dzZXJTb3J0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmFyY2dpc0Jyb3dzZXJTb3J0RmllbGRDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0Jyb3dzZXJTb3J0RmllbGRDaGFuZ2VcIiwgNyk7XG4gICAgdGhpcy5hcmNnaXNCcm93c2VyU29ydE9yZGVyQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNCcm93c2VyU29ydE9yZGVyQ2hhbmdlXCIsIDcpO1xuICAgIHRoaXMuc29ydE9yZGVycyA9IFtcImFzY1wiLCBcImRlc2NcIl07XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZmllbGQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vcmRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN0b3JlID0gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIGNvbnN0IGxvY2FsZSA9IGF3YWl0IGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3ModGhpcy5lbCwgXCJhcmNnaXMtYnJvd3NlclwiKTtcbiAgICB0aGlzLmkxOG4gPSBsb2NhbGVbMF0uc29ydDtcbiAgfVxuICByZW5kZXJGaWVsZE9wdGlvbihvcHRpb24sIHNlbGVjdGVkRmllbGQsIGkxOG4pIHtcbiAgICBjb25zdCBpbmZvID0gZ2V0U29ydEZpZWxkSW5mbyhvcHRpb24sIGkxOG4pO1xuICAgIHJldHVybiAoaChcImNhbGNpdGUtZHJvcGRvd24taXRlbVwiLCB7IHNlbGVjdGVkOiBzZWxlY3RlZEZpZWxkID09PSBvcHRpb24sIG9uQ2FsY2l0ZURyb3Bkb3duSXRlbVNlbGVjdDogKCkgPT4gdGhpcy5hcmNnaXNCcm93c2VyU29ydEZpZWxkQ2hhbmdlLmVtaXQob3B0aW9uKSwga2V5OiBvcHRpb24gfSwgaW5mby5sYWJlbCkpO1xuICB9XG4gIHJlbmRlckRyb3Bkb3duKCkge1xuICAgIGNvbnN0IHsgZmllbGQsIG9yZGVyLCBvcHRpb25zLCBpMThuIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNlbGVjdGVkRmllbGQgPSBvcHRpb25zLmluY2x1ZGVzKGZpZWxkKSA/IGZpZWxkIDogb3B0aW9uc1swXTtcbiAgICBjb25zdCBpbmZvID0gZ2V0U29ydEZpZWxkSW5mbyhzZWxlY3RlZEZpZWxkLCBpMThuKTtcbiAgICBjb25zdCBzZWxlY3RlZE9yZGVyID0gb3JkZXIgfHwgaW5mby5kZWZhdWx0U29ydE9yZGVyO1xuICAgIHJldHVybiAoaChcImNhbGNpdGUtZHJvcGRvd25cIiwgeyBwbGFjZW1lbnQ6IFwiYm90dG9tLWVuZFwiLCBzY2FsZTogXCJtXCIsIG92ZXJsYXlQb3NpdGlvbmluZzogXCJmaXhlZFwiLCB3aWR0aDogXCJtXCIgfSwgaChcImNhbGNpdGUtYnV0dG9uXCIsIHsgY2xhc3M6IFwiYnV0dG9uXCIsIHNsb3Q6IFwidHJpZ2dlclwiLCBzY2FsZTogXCJtXCIsIGFwcGVhcmFuY2U6IFwib3V0bGluZS1maWxsXCIsIGtpbmQ6IFwibmV1dHJhbFwiLCBpY29uU3RhcnQ6IFwic29ydC1kZXNjZW5kaW5nXCIsIGljb25GbGlwUnRsOiBcInN0YXJ0XCIsIFwiYXJpYS1sYWJlbFwiOiBgJHtpMThuLnNvcnRCeX0gJHtpbmZvLmxhYmVsfWAgfSwgaW5mby5sYWJlbCksIGgoXCJjYWxjaXRlLWRyb3Bkb3duLWdyb3VwXCIsIHsgc2VsZWN0aW9uTW9kZTogXCJzaW5nbGVcIiwgXCJncm91cC10aXRsZVwiOiBpMThuLnNvcnRCeSB9LCB0aGlzLm9wdGlvbnMubWFwKChvcHRpb24pID0+IHRoaXMucmVuZGVyRmllbGRPcHRpb24ob3B0aW9uLCBzZWxlY3RlZEZpZWxkLCBpMThuKSkpLCBpbmZvLnNob3dTb3J0T3JkZXIgJiYgKGgoXCJjYWxjaXRlLWRyb3Bkb3duLWdyb3VwXCIsIHsgc2VsZWN0aW9uTW9kZTogXCJzaW5nbGVcIiwgXCJncm91cC10aXRsZVwiOiBpMThuLnNvcnREaXJlY3Rpb24gfSwgdGhpcy5zb3J0T3JkZXJzLm1hcCgob3JkZXIpID0+IChoKFwiY2FsY2l0ZS1kcm9wZG93bi1pdGVtXCIsIHsga2V5OiBvcmRlciwgc2VsZWN0ZWQ6IHNlbGVjdGVkT3JkZXIgPT09IG9yZGVyLCBvbkNhbGNpdGVEcm9wZG93bkl0ZW1TZWxlY3Q6ICgpID0+IHRoaXMuYXJjZ2lzQnJvd3NlclNvcnRPcmRlckNoYW5nZS5lbWl0KG9yZGVyKSB9LCBpbmZvLnNvcnRPcmRlckxhYmVsc1tvcmRlcl0pKSkpKSkpO1xuICB9XG4gIHJlbmRlckZpZWxkUmFkaW8ob3B0aW9uLCBzZWxlY3RlZEZpZWxkLCBpMThuKSB7XG4gICAgY29uc3QgaW5mbyA9IGdldFNvcnRGaWVsZEluZm8ob3B0aW9uLCBpMThuKTtcbiAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWxhYmVsXCIsIHsgbGF5b3V0OiBcImlubGluZVwiLCBhbGlnbm1lbnQ6IFwic3RhcnRcIiB9LCBoKFwiY2FsY2l0ZS1yYWRpby1idXR0b25cIiwgeyB2YWx1ZTogb3B0aW9uLCBuYW1lOiBcInNvcnRfZmllbGRcIiwgY2hlY2tlZDogc2VsZWN0ZWRGaWVsZCA9PT0gb3B0aW9uIH0pLCBpbmZvLmxhYmVsKSk7XG4gIH1cbiAgcmVuZGVyUmFkaW9CdXR0b25zKCkge1xuICAgIGNvbnN0IHsgZmllbGQsIG9yZGVyLCBvcHRpb25zLCBpMThuIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNlbGVjdGVkRmllbGQgPSBvcHRpb25zLmluY2x1ZGVzKGZpZWxkKSA/IGZpZWxkIDogb3B0aW9uc1swXTtcbiAgICBjb25zdCBpbmZvID0gZ2V0U29ydEZpZWxkSW5mbyhzZWxlY3RlZEZpZWxkLCBpMThuKTtcbiAgICBjb25zdCBzZWxlY3RlZE9yZGVyID0gb3JkZXIgfHwgaW5mby5kZWZhdWx0U29ydE9yZGVyO1xuICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCB7IHNjYWxlOiBcIm1cIiB9LCBoKFwic3BhblwiLCB7IGNsYXNzOiBcIm1lZGl1bVwiIH0sIGkxOG4uc29ydEJ5KSwgaChcImNhbGNpdGUtcmFkaW8tYnV0dG9uLWdyb3VwXCIsIHsgbmFtZTogXCJzb3J0X2ZpZWxkXCIsIGxheW91dDogXCJ2ZXJ0aWNhbFwiLCByb2xlOiBcInJhZGlvZ3JvdXBcIiwgb25DYWxjaXRlUmFkaW9CdXR0b25Hcm91cENoYW5nZTogKGV2ZW50KSA9PiB0aGlzLmFyY2dpc0Jyb3dzZXJTb3J0RmllbGRDaGFuZ2UuZW1pdChldmVudC50YXJnZXQuc2VsZWN0ZWRJdGVtLnZhbHVlKSB9LCB0aGlzLm9wdGlvbnMubWFwKChvcHRpb24pID0+IHRoaXMucmVuZGVyRmllbGRSYWRpbyhvcHRpb24sIHNlbGVjdGVkRmllbGQsIGkxOG4pKSkpLCBpbmZvLnNob3dTb3J0T3JkZXIgJiYgKGgoXCJjYWxjaXRlLWxhYmVsXCIsIHsgc2NhbGU6IFwibVwiIH0sIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwibWVkaXVtXCIgfSwgaTE4bi5zb3J0RGlyZWN0aW9uKSwgaChcImNhbGNpdGUtcmFkaW8tYnV0dG9uLWdyb3VwXCIsIHsgbmFtZTogXCJzb3J0X29yZGVyXCIsIGxheW91dDogXCJ2ZXJ0aWNhbFwiLCByb2xlOiBcInJhZGlvZ3JvdXBcIiwgb25DYWxjaXRlUmFkaW9CdXR0b25Hcm91cENoYW5nZTogKGV2ZW50KSA9PiB0aGlzLmFyY2dpc0Jyb3dzZXJTb3J0T3JkZXJDaGFuZ2UuZW1pdChldmVudC50YXJnZXQuc2VsZWN0ZWRJdGVtLnZhbHVlKSB9LCB0aGlzLnNvcnRPcmRlcnMubWFwKChvcmRlcikgPT4gKGgoXCJjYWxjaXRlLWxhYmVsXCIsIHsgbGF5b3V0OiBcImlubGluZVwiLCBhbGlnbm1lbnQ6IFwic3RhcnRcIiB9LCBoKFwiY2FsY2l0ZS1yYWRpby1idXR0b25cIiwgeyB2YWx1ZTogb3JkZXIsIG5hbWU6IFwic29ydF9vcmRlclwiLCBjaGVja2VkOiBzZWxlY3RlZE9yZGVyID09PSBvcmRlciB9KSwgaW5mby5zb3J0T3JkZXJMYWJlbHNbb3JkZXJdKSkpKSkpKSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnN0YXRlLnBhbmVsIHx8XG4gICAgICAodGhpcy5zdG9yZS5zdGF0ZS53aWR0aCAmJiB0aGlzLnN0b3JlLnN0YXRlLndpZHRoIDwgYnJlYWtwb2ludHMuc20pXG4gICAgICA/IHRoaXMucmVuZGVyUmFkaW9CdXR0b25zKClcbiAgICAgIDogdGhpcy5yZW5kZXJEcm9wZG93bigpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNCcm93c2VyU29ydC5zdHlsZSA9IGFyY2dpc0Jyb3dzZXJTb3J0Q3NzO1xuXG5jb25zdCBhcmNnaXNCcm93c2VyVG9wQmFyQ3NzID0gXCI6aG9zdHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JhY2tncm91bmQtY29sb3I6dmFyKC0tYXJjZ2lzLWJyb3dzZXItdG9wLWJhci1iYWNrZ3JvdW5kKX0ud3JhcHBlcntkaXNwbGF5OmZsZXg7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bzttYXgtd2lkdGg6dmFyKC0tYXJjZ2lzLWJyb3dzZXItbWF4LXdpZHRoKX0uc2VhcmNoLWFuZC1zb3J0e2Rpc3BsYXk6ZmxleDtmbGV4OjEgMSAwJTthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1wYWRkaW5nLWVuZDoxLjVyZW07cGFkZGluZy1pbmxpbmUtZW5kOjEuNXJlbX0uc2VhcmNoe2ZsZXg6MSAxIDAlfS5zb3J0e2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9LmZpbHRlcnttYXJnaW4tdG9wOjAuMjVyZW07bWFyZ2luLWJvdHRvbTowLjI1cmVtO3BhZGRpbmctbGVmdDowLjVyZW07cGFkZGluZy1yaWdodDowLjVyZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5maWx0ZXItLWxlZnR7LXdlYmtpdC1ib3JkZXItZW5kOjFweCBzb2xpZCB2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci0zKTtib3JkZXItaW5saW5lLWVuZDoxcHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMyl9LmxhcmdlIC5maWx0ZXJ7ZGlzcGxheTpub25lfS5yZWx7cG9zaXRpb246cmVsYXRpdmV9LmJ1Y2tldC0tc21hbGx7dGV4dC1hbGlnbjpjZW50ZXI7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMyl9LmluZGljYXRvcnt3aWR0aDowLjVyZW07aGVpZ2h0OjAuNXJlbTtwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXItcmFkaXVzOjUwJTt0b3A6MDtwb2ludGVyLWV2ZW50czpub25lO3otaW5kZXg6MjA7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJyYW5kKTtpbnNldC1pbmxpbmUtc3RhcnQ6MH0uc21hbGwgLnNlYXJjaC1hbmQtc29ydHstd2Via2l0LXBhZGRpbmctZW5kOjFyZW07cGFkZGluZy1pbmxpbmUtZW5kOjFyZW19XCI7XG5cbmNvbnN0IEFyY2dpc0Jyb3dzZXJUb3BCYXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuc3RvcmUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5maWx0ZXJzRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICBjb25zdCBsb2NhbGUgPSBhd2FpdCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKHRoaXMuZWwsIFwiYXJjZ2lzLWJyb3dzZXJcIik7XG4gICAgdGhpcy5pMThuID0gbG9jYWxlWzBdLnRvcEJhcjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGhpcy5zdG9yZS5vbkNoYW5nZShcIndpZHRoXCIsICh3aWR0aCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgdGhpcy53aWR0aCA9IChfYSA9IHRoaXMuc2VhcmNoV3JhcHBlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9mZnNldFdpZHRoO1xuICAgIH0pO1xuICB9XG4gIGdldEZvcm1GYWN0b3IoKSB7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLnN0b3JlLnN0YXRlLndpZHRoO1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSB3aWR0aCA8PSBicmVha3BvaW50cy5zbTpcbiAgICAgICAgcmV0dXJuIFwic21hbGxcIjtcbiAgICAgIGNhc2Ugd2lkdGggPD0gYnJlYWtwb2ludHMubWQ6XG4gICAgICAgIHJldHVybiBcIm1lZGl1bVwiO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFwibGFyZ2VcIjtcbiAgICB9XG4gIH1cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdGhpcy5zdG9yZS5zdGF0ZS5wcmV2aWV3ID0gbnVsbDtcbiAgICB0aGlzLnN0b3JlLnN0YXRlLmZpbHRlcnNFeHBhbmRlZCA9ICF0aGlzLnN0b3JlLnN0YXRlLmZpbHRlcnNFeHBhbmRlZDtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZm9ybUZhY3RvciA9IHRoaXMuZ2V0Rm9ybUZhY3RvcigpO1xuICAgIGNvbnN0IHNob3dGaWx0ZXJCdXR0b24gPSBmb3JtRmFjdG9yID09PSBcInNtYWxsXCIgJiZcbiAgICAgICghdGhpcy5zdG9yZS5zdGF0ZS5maWx0ZXJzRW1wdHkgfHwgIXRoaXMuc3RvcmUuc3RhdGUuc29ydEVtcHR5KSAmJlxuICAgICAgIXRoaXMuZmlsdGVyc0Rpc2FibGVkO1xuICAgIGNvbnN0IGhhc0FjdGl2ZUZpbHRlciA9IE9iamVjdC52YWx1ZXModGhpcy5zdG9yZS5zdGF0ZS5maWx0ZXJzIHx8IHt9KS5zb21lKChmaWx0ZXIpID0+IGZpbHRlci52YWx1ZSk7XG4gICAgcmV0dXJuIChoKEhvc3QsIG51bGwsIGZvcm1GYWN0b3IgPT09IFwic21hbGxcIiAmJiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImJ1Y2tldCBidWNrZXQtLXNtYWxsXCIgfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImJ1Y2tldFwiIH0pKSksIGgoXCJkaXZcIiwgeyBjbGFzczogeyBbZm9ybUZhY3Rvcl06IHRydWUsIHdyYXBwZXI6IHRydWUgfSB9LCBoKFwic2xvdFwiLCB7IG5hbWU6IFwiY29udGVudC1zdGFydFwiIH0pLCBzaG93RmlsdGVyQnV0dG9uICYmICF0aGlzLnN0b3JlLnN0YXRlLnBhbmVsICYmIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZmlsdGVyIGZpbHRlci0tbGVmdFwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJyZWxcIiB9LCBoYXNBY3RpdmVGaWx0ZXIgJiYgaChcInNwYW5cIiwgeyBjbGFzczogXCJpbmRpY2F0b3JcIiB9KSwgaChcImNhbGNpdGUtYnV0dG9uXCIsIHsgY2xhc3M6IFwiZmlsdGVyLXRvZ2dsZVwiLCBzY2FsZTogXCJzXCIsIGFwcGVhcmFuY2U6IFwidHJhbnNwYXJlbnRcIiwga2luZDogXCJuZXV0cmFsXCIsIGljb25TdGFydDogXCJzbGlkZXJzXCIsIFwiYXJpYS1sYWJlbFwiOiBcInRvZ2dsZS1maWx0ZXJzXCIsIG9uQ2xpY2s6ICgpID0+IHRoaXMuaGFuZGxlQ2xpY2soKSwgXCJhcmlhLWV4cGFuZGVkXCI6IHRoaXMuc3RvcmUuc3RhdGUuZmlsdGVyc0V4cGFuZGVkIH0sIHRoaXMuaTE4bi5maWx0ZXIpKSkpLCBmb3JtRmFjdG9yICE9PSBcInNtYWxsXCIgJiYgKGgoXCJkaXZcIiwgeyBjbGFzczogXCJidWNrZXRcIiB9LCBoKFwic2xvdFwiLCB7IG5hbWU6IFwiYnVja2V0XCIgfSkpKSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInNlYXJjaC1hbmQtc29ydFwiLCByZWY6IChlbCkgPT4ge1xuICAgICAgICB0aGlzLnNlYXJjaFdyYXBwZXIgPSBlbDtcbiAgICAgICAgaWYgKCF0aGlzLndpZHRoKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+ICh0aGlzLndpZHRoID0gZWwgPT09IG51bGwgfHwgZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsLm9mZnNldFdpZHRoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInNlYXJjaFwiIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJzZWFyY2hcIiB9KSksICFzaG93RmlsdGVyQnV0dG9uICYmIChoKFwiYXJjZ2lzLWJyb3dzZXItZmlsdGVyLXN0YXR1c1wiLCB7IGNvbXBvbmVudFdpZHRoOiB0aGlzLndpZHRoLCBicm93c2VyV2lkdGg6IHRoaXMuc3RvcmUuc3RhdGUud2lkdGgsIGNsYXNzOiBcImZpbHRlci1zdGF0dXNcIiwgZmlsdGVyczogdGhpcy5zdG9yZS5zdGF0ZS5maWx0ZXJzIH0pKSksIHNob3dGaWx0ZXJCdXR0b24gJiYgdGhpcy5zdG9yZS5zdGF0ZS5wYW5lbCAmJiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImZpbHRlclwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJyZWxcIiB9LCBoYXNBY3RpdmVGaWx0ZXIgJiYgaChcInNwYW5cIiwgeyBjbGFzczogXCJpbmRpY2F0b3JcIiB9KSwgaChcImNhbGNpdGUtYnV0dG9uXCIsIHsgY2xhc3M6IFwiZmlsdGVyLXRvZ2dsZVwiLCBzY2FsZTogXCJzXCIsIGFwcGVhcmFuY2U6IFwidHJhbnNwYXJlbnRcIiwga2luZDogXCJuZXV0cmFsXCIsIGljb25TdGFydDogXCJzbGlkZXJzXCIsIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmkxOG4uZmlsdGVyLCBvbkNsaWNrOiAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKCksIFwiYXJpYS1leHBhbmRlZFwiOiB0aGlzLnN0b3JlLnN0YXRlLmZpbHRlcnNFeHBhbmRlZCB9KSkpKSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImNvbnRlbnQtZW5kXCIgfSkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0Jyb3dzZXJUb3BCYXIuc3R5bGUgPSBhcmNnaXNCcm93c2VyVG9wQmFyQ3NzO1xuXG5leHBvcnQgeyBBcmNnaXNCcm93c2VyIGFzIGFyY2dpc19icm93c2VyLCBBcmNnaXNCcm93c2VyQWN0aW9ucyBhcyBhcmNnaXNfYnJvd3Nlcl9hY3Rpb25zLCBBcmNnaXNCcm93c2VyRmlsdGVyIGFzIGFyY2dpc19icm93c2VyX2ZpbHRlciwgQXJjZ2lzQnJvd3NlckZpbHRlckRhdGUgYXMgYXJjZ2lzX2Jyb3dzZXJfZmlsdGVyX2RhdGUsIEFyY2dpc0Jyb3dzZXJGaWx0ZXJTdGF0dXMgYXMgYXJjZ2lzX2Jyb3dzZXJfZmlsdGVyX3N0YXR1cywgQXJjZ2lzSXRlbUJyb3dzZXJGaWx0ZXJzIGFzIGFyY2dpc19icm93c2VyX2ZpbHRlcnMsIEFyY2dpc0Jyb3dzZXJQYWdpbmF0aW9uIGFzIGFyY2dpc19icm93c2VyX3BhZ2luYXRpb24sIEFyY2dpc0Jyb3dzZXJTZWFyY2ggYXMgYXJjZ2lzX2Jyb3dzZXJfc2VhcmNoLCBBcmNnaXNCcm93c2VyU29ydCBhcyBhcmNnaXNfYnJvd3Nlcl9zb3J0LCBBcmNnaXNCcm93c2VyVG9wQmFyIGFzIGFyY2dpc19icm93c2VyX3RvcF9iYXIgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuLyoqXG4gKiBDYWxsIGEgZnVuY3Rpb24gb25seSBhZnRlciBpdCBoYXMgbm90IGJlZW4gY2FsbGVkIGZvciBuIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIGZuICAgIC0gZnVuY3Rpb24gdG8gY2FsbFxuICogQHBhcmFtIGRlbGF5IC0gZGVsYXkgaW4gbWlsbGlzZWNvbmRzXG4gKi9cbmNvbnN0IGRlYm91bmNlID0gKGZuLCBkZWxheSkgPT4ge1xuICBsZXQgdGltZW91dDtcbiAgbGV0IHN0YXR1cyA9IFwiaWRsZVwiO1xuICBmdW5jdGlvbiBmbHVzaCguLi5hcmdzKSB7XG4gICAgc3RhdHVzID0gXCJmbHVzaGVkXCI7XG4gICAgcmV0dXJuIGRlYm91bmNlZCguLi5hcmdzKTtcbiAgfVxuICBmdW5jdGlvbiBpbnZva2UoLi4uYXJncykge1xuICAgIHN0YXR1cyA9IFwiaW52b2tlZFwiO1xuICAgIHJldHVybiBkZWJvdW5jZWQoLi4uYXJncyk7XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsKC4uLmFyZ3MpIHtcbiAgICBzdGF0dXMgPSBcImNhbmNlbGxlZFwiO1xuICAgIHJldHVybiBkZWJvdW5jZWQoLi4uYXJncyk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U3RhdHVzKCkge1xuICAgIHJldHVybiBzdGF0dXM7XG4gIH1cbiAgY29uc3QgZGVib3VuY2VkID0gKC4uLmFyZ3MpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgIGNhc2UgXCJmbHVzaGVkXCI6XG4gICAgICAgIHN0YXR1cyA9IFwiaWRsZVwiO1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICByZXNvbHZlKGZuKC4uLmFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImludm9rZWRcIjpcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICBzdGF0dXMgPSBcImlkbGVcIjtcbiAgICAgICAgcmVzb2x2ZShmbiguLi5hcmdzKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNhbmNlbGxlZFwiOlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHN0YXR1cyA9IFwiaWRsZVwiO1xuICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc3RhdHVzID0gXCJpZGxlXCI7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZm4oLi4uYXJncykpO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICBkZWJvdW5jZWQuaW52b2tlID0gaW52b2tlO1xuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZ2V0U3RhdHVzID0gZ2V0U3RhdHVzO1xuICByZXR1cm4gZGVib3VuY2VkO1xufTtcbi8qKlxuICogQ2FsbCBhIGZ1bmN0aW9uIG9ubHkgYWZ0ZXIgbiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkXG4gKiBAcGFyYW0gZm4gICAgLSBmdW5jdGlvbiB0byBjYWxsXG4gKiBAcGFyYW0gZGVsYXkgLSBkZWxheSBpbiBtaWxsaXNlY29uZHNcbiAqL1xuY29uc3QgdGhyb3R0bGUgPSAoZm4sIGRlbGF5KSA9PiB7XG4gIGxldCB0aW1lb3V0O1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgIHJlc29sdmUoZm4oLi4uYXJncykpO1xuICAgIH0sIGRlbGF5KTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCBcIlxcXFwkJlwiKTsgLy8gJCYgbWVhbnMgdGhlIHdob2xlIG1hdGNoZWQgc3RyaW5nXG59XG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGw7XG59XG4vKipcbiAqIFNldCBhIG1pbmltdW0gdGltZSBmb3IgYSBwcm9taXNlIHRvIHJlc29sdmUgKHVzZWZ1bCBmb3IgcHJldmVudGluZyBmbGFzaCBvZiBsb2FkZXJzKVxuICovXG5hc3luYyBmdW5jdGlvbiBtaW5EZWxheShwcm9taXNlLCBtaW5EZWxheSkge1xuICBhd2FpdCBQcm9taXNlLmFsbChbcHJvbWlzZSwgdGltZW91dChtaW5EZWxheSldKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gaW5saW5lIHNldFRpbWVvdXQgYXMgYW4gYXdhaXQgaW4gYXN5bmMgZnVuY3Rpb25zXG4gKi9cbmZ1bmN0aW9uIHRpbWVvdXQobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5jb25zdCBhcnJheVRvTG9va3VwTWFwID0gKGRhdGFBcnIsIGdldEtleUFuZEl0ZW0pID0+IE9iamVjdC5mcm9tRW50cmllcygoZGF0YUFyciB8fCBbXSkubWFwKChpdGVtKSA9PiB7XG4gIGNvbnN0IHsga2V5LCBkYXRhIH0gPSBnZXRLZXlBbmRJdGVtKGl0ZW0pO1xuICByZXR1cm4gW2tleSwgZGF0YV07XG59KSk7XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdHdvIGFycmF5cyBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50c1xuICogYW5kIHdoZXRoZXIgdGhleSBjb250YWluIHRoZSBzYW1lIGVsZW1lbnRzXG4gKiByZWdhcmRsZXNzIG9mIG9yZGVyXG4gKi9cbmNvbnN0IGFycmF5c0FyZUVxdWl2YWxlbnQgPSAoYXJyMSwgYXJyMikgPT4gYXJyMS5sZW5ndGggPT09IGFycjIubGVuZ3RoICYmIGFycjEucmVkdWNlKChtZW1vLCBzdHIpID0+IG1lbW8gJiYgYXJyMi5pbmRleE9mKHN0cikgPiAtMSwgdHJ1ZSk7XG5mdW5jdGlvbiB1bmlxdWVCeShteUFyciwgZ2V0SXRlbUlkKSB7XG4gIGNvbnN0IHJlc3VsdEFyciA9IFtdO1xuICBjb25zdCBsb29rdXBNYXAgPSB7fTtcbiAgbXlBcnIuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGNvbnN0IGlkID0gZ2V0SXRlbUlkKGl0ZW0pO1xuICAgIGlmIChsb29rdXBNYXBbaWRdID09IG51bGwpIHtcbiAgICAgIGxvb2t1cE1hcFtpZF0gPSBpdGVtO1xuICAgICAgcmVzdWx0QXJyLnB1c2goaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdEFycjtcbn1cbmZ1bmN0aW9uIHVuaXF1ZShteUFycikge1xuICBjb25zdCBwcmltaXRpdmVzID0geyBib29sZWFuOiB7fSwgbnVtYmVyOiB7fSwgc3RyaW5nOiB7fSB9O1xuICBjb25zdCBvYmpzID0gW107XG4gIHJldHVybiBteUFyci5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICBsZXQgdHlwZSA9IHR5cGVvZiBpdGVtO1xuICAgIGlmICh0eXBlIGluIHByaW1pdGl2ZXMpIHtcbiAgICAgIHJldHVybiBwcmltaXRpdmVzW3R5cGVdLmhhc093blByb3BlcnR5KGl0ZW0pID8gZmFsc2UgOiAocHJpbWl0aXZlc1t0eXBlXVtpdGVtXSA9IHRydWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBvYmpzLmluZGV4T2YoaXRlbSkgPj0gMCA/IGZhbHNlIDogb2Jqcy5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfSk7XG59XG5jb25zdCBjaHVuayA9IChhcnIsIHNpemUpID0+IFsuLi5BcnJheShNYXRoLmNlaWwoYXJyLmxlbmd0aCAvIHNpemUpKV0ubWFwKChfLCBpKSA9PiBhcnIuc2xpY2Uoc2l6ZSAqIGksIHNpemUgKyBzaXplICogaSkpO1xuXG5leHBvcnQgeyBhcnJheVRvTG9va3VwTWFwIGFzIGEsIHVuaXF1ZSBhcyBiLCB0aHJvdHRsZSBhcyBjLCBkZWJvdW5jZSBhcyBkLCBlc2NhcGVSZWdFeHAgYXMgZSwgYXJyYXlzQXJlRXF1aXZhbGVudCBhcyBmLCBjaHVuayBhcyBnLCBpc0RlZmluZWQgYXMgaSwgbWluRGVsYXkgYXMgbSwgdGltZW91dCBhcyB0LCB1bmlxdWVCeSBhcyB1IH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGwgYXMgbG9hZE1vZHVsZXMgfSBmcm9tICcuL2xvYWRNb2R1bGVzLWFhZjMwYmQ2LmpzJztcbmltcG9ydCB7IGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tMTNmNWIwMGMuanMnO1xuXG5jb25zdCBsYW5ndWFnZU1hcCA9IG5ldyBNYXAoW1xuICBbXCJhclwiLCBcImFyXCJdLFxuICBbXCJiZ1wiLCBcImJnXCJdLFxuICBbXCJic1wiLCBcImJzXCJdLFxuICBbXCJjYVwiLCBcImNhXCJdLFxuICBbXCJjc1wiLCBcImNzXCJdLFxuICBbXCJkYVwiLCBcImRhXCJdLFxuICBbXCJkZVwiLCBcImRlXCJdLFxuICBbXCJlbFwiLCBcImVsXCJdLFxuICBbXCJlblwiLCBcImVuXCJdLFxuICBbXCJlc1wiLCBcImVzXCJdLFxuICBbXCJldFwiLCBcImV0XCJdLFxuICBbXCJmaVwiLCBcImZpXCJdLFxuICBbXCJmclwiLCBcImZyXCJdLFxuICBbXCJoZVwiLCBcImhlXCJdLFxuICBbXCJoclwiLCBcImhyXCJdLFxuICBbXCJodVwiLCBcImh1XCJdLFxuICBbXCJpZFwiLCBcImlkXCJdLFxuICBbXCJpdFwiLCBcIml0XCJdLFxuICBbXCJqYVwiLCBcImphXCJdLFxuICBbXCJrb1wiLCBcImtvXCJdLFxuICBbXCJsdFwiLCBcImx0XCJdLFxuICBbXCJsdlwiLCBcImx2XCJdLFxuICBbXCJuYlwiLCBcIm5iXCJdLFxuICBbXCJubFwiLCBcIm5sXCJdLFxuICBbXCJwbFwiLCBcInBsXCJdLFxuICBbXCJwdC1iclwiLCBcInB0LUJSXCJdLFxuICBbXCJwdC1wdFwiLCBcInB0LVBUXCJdLFxuICBbXCJyb1wiLCBcInJvXCJdLFxuICBbXCJydVwiLCBcInJ1XCJdLFxuICBbXCJza1wiLCBcInNrXCJdLFxuICBbXCJzbFwiLCBcInNsXCJdLFxuICBbXCJzclwiLCBcInNyXCJdLFxuICBbXCJzdlwiLCBcInN2XCJdLFxuICBbXCJ0aFwiLCBcInRoXCJdLFxuICBbXCJ0clwiLCBcInRyXCJdLFxuICBbXCJ1a1wiLCBcInVrXCJdLFxuICBbXCJ2aVwiLCBcInZpXCJdLFxuICBbXCJ6aC1jblwiLCBcInpoLUNOXCJdLFxuICBbXCJ6aC1oa1wiLCBcInpoLUhLXCJdLFxuICBbXCJ6aC10d1wiLCBcInpoLVRXXCJdXG5dKTtcbi8vIHJ0bFxuZnVuY3Rpb24gZ2V0RWxlbWVudERpcihlbCkge1xuICByZXR1cm4gZ2V0RWxlbWVudFByb3AoZWwsIFwiZGlyXCIsIFwibHRyXCIpO1xufVxuZnVuY3Rpb24gZ2V0RWxlbWVudFByb3AoZWwsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IGNsb3Nlc3RXaXRoUHJvcCA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbCwgYFske3Byb3B9XWApO1xuICByZXR1cm4gY2xvc2VzdFdpdGhQcm9wID8gY2xvc2VzdFdpdGhQcm9wLmdldEF0dHJpYnV0ZShwcm9wKSA6IHZhbHVlO1xufVxuLy8gY3NzXG5jb25zdCBDU1NfVVRJTElUWSA9IHtcbiAgcnRsOiBcImFyY2dpcy0tcnRsXCJcbn07XG5hc3luYyBmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgYXBpLCB0eXBlLCBwbGFjZXMgfSA9IG9wdGlvbnMgfHwge307XG4gIGlmIChhcGkgPT09IDQpIHtcbiAgICBjb25zdCBbaW50bF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL2ludGxcIl0pO1xuICAgIGNvbnN0IG51bWJlckZvcm1hdEludGxPcHRpb25zID0gaW50bC5jb252ZXJ0TnVtYmVyRm9ybWF0VG9JbnRsT3B0aW9ucyh7XG4gICAgICBwbGFjZXMsXG4gICAgICBzdHlsZTogdHlwZSxcbiAgICAgIGRpZ2l0U2VwYXJhdG9yOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGludGwuZm9ybWF0TnVtYmVyKG51bWJlciwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBudW1iZXJGb3JtYXRJbnRsT3B0aW9ucyksIHsgc3R5bGU6IHR5cGUgfSkpO1xuICB9XG4gIGNvbnN0IFtkb2pvTnVtYmVyXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImRvam8vbnVtYmVyXCJdKTtcbiAgcmV0dXJuIGRvam9OdW1iZXIuZm9ybWF0KG51bWJlciwge1xuICAgIHR5cGUsXG4gICAgcGxhY2VzLFxuICAgIHBhdHRlcm46IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wYXR0ZXJuXG4gIH0pO1xufVxuY29uc3QgY2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICBjb25zdCBsYW5nID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lmxhbmc7XG4gIGNvbnN0IGRheVNob3J0TW9udGhZZWFyID0ge1xuICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgIG1vbnRoOiBcInNob3J0XCIsXG4gICAgZGF5OiBcIm51bWVyaWNcIlxuICB9O1xuICBpZiAoIWNhY2hlW2xhbmddKSB7XG4gICAgY2FjaGVbbGFuZ10gPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZywgZGF5U2hvcnRNb250aFllYXIpO1xuICB9XG4gIHJldHVybiBjYWNoZVtsYW5nXS5mb3JtYXQoZGF0ZSk7XG59XG5cbmV4cG9ydCB7IENTU19VVElMSVRZIGFzIEMsIGZvcm1hdERhdGUgYXMgYSwgZm9ybWF0TnVtYmVyIGFzIGYsIGdldEVsZW1lbnREaXIgYXMgZywgbGFuZ3VhZ2VNYXAgYXMgbCB9O1xuIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyBjIGFzIGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeSB9IGZyb20gJy4vZG9tLTEzZjViMDBjLmpzJztcbmltcG9ydCB7IGwgYXMgbGFuZ3VhZ2VNYXAgfSBmcm9tICcuL2xhbmd1YWdlVXRpbC0yMjI1OGM5MC5qcyc7XG5pbXBvcnQgeyBhIGFzIGdldEFzc2V0UGF0aCB9IGZyb20gJy4vaW5kZXgtOTJlYmIzOTYuanMnO1xuXG4vLyBodHRwczovL21lZGl1bS5jb20vc3RlbmNpbC10cmlja3MvaW1wbGVtZW50aW5nLWludGVybmF0aW9uYWxpc2F0aW9uLWkxOG4td2l0aC1zdGVuY2lsLTVlNjU1OTU1NDExN1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlKGVsZW1lbnQpIHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIGNvbnN0IGNsb3Nlc3RFbGVtZW50ID0gKF9hID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGVsZW1lbnQsIFwiW2xhbmddXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2MgPSAoX2IgPSBlbGVtZW50LnNoYWRvd1Jvb3QpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZG9jdW1lbnRFbGVtZW50O1xuICAvLyBsYW5ndWFnZSBzZXQgYnkgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gb3IgYnJvd3Nlci4gZGVmYXVsdHMgdG8gZW5nbGlzaC5cbiAgY29uc3QgbGFuZyA9ICgoY2xvc2VzdEVsZW1lbnQgPT09IG51bGwgfHwgY2xvc2VzdEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsb3Nlc3RFbGVtZW50LmxhbmcpIHx8IChuYXZpZ2F0b3IgPT09IG51bGwgfHwgbmF2aWdhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8IFwiZW5cIikudG9Mb3dlckNhc2UoKTtcbiAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nKSkge1xuICAgIHJldHVybiBsYW5ndWFnZU1hcC5nZXQobGFuZyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gXCJydS1SVVwiIG1hcHMgdG8gXCJydVwiIHVzZSBjYXNlXG4gICAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nLnNsaWNlKDAsIDIpKSkge1xuICAgICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nLnNsaWNlKDAsIDIpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gXCJlblwiO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlSW50bChlbGVtZW50KSB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICAvLyBpdCdzIE9LIGlmIHdlIGRvbid0IGhhdmUgdGhlIDQgbGV0dGVyIGxhbmd1YWdlIGZpbGUgZm9yIGl0XG4gIC8vIDQgbGV0dGVyIGxhbmd1YWdlIGNvZGUgbmVlZGVkIGZvciBmb3JtYXR0aW5nIG51bWJlcnNcbiAgY29uc3QgY2xvc2VzdEVsZW1lbnQgPSAoX2EgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWxlbWVudCwgXCJbbGFuZ11cIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYyA9IChfYiA9IGVsZW1lbnQuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kb2N1bWVudEVsZW1lbnQ7XG4gIC8vIGxhbmd1YWdlIHNldCBieSB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBvciBicm93c2VyLiBkZWZhdWx0cyB0byBlbmdsaXNoLlxuICBjb25zdCBsYW5nID0gKChjbG9zZXN0RWxlbWVudCA9PT0gbnVsbCB8fCBjbG9zZXN0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2VzdEVsZW1lbnQubGFuZykgfHwgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5sYW5ndWFnZSkgfHwgXCJlblwiKS50b0xvd2VyQ2FzZSgpO1xuICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcpKSB7XG4gICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nKTtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcuc2xpY2UoMCwgMikpKSB7XG4gICAgICAvLyB3ZSBzdXBwb3J0IHRoZSAyIGxldHRlciBjb2RlZCBsYW5ndWFnZVxuICAgICAgLy8gZS5nLiBpdC1DSCB2cyBpdFxuICAgICAgcmV0dXJuIGxhbmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZW5cIjtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGZldGNoTG9jYWxlU3RyaW5nc0ZvckNvbXBvbmVudChjb21wb25lbnROYW1lLCBsb2NhbGUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmZXRjaChnZXRBc3NldFBhdGgoYC4uL2FyY2dpcy1hcHAtYXNzZXRzL2kxOG4vJHtjb21wb25lbnROYW1lfS5pMThuLiR7bG9jYWxlfS5qc29uYCkpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5vaylcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQuanNvbigpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgfSwgKCkgPT4gcmVqZWN0KCkpO1xuICB9KTtcbn1cbmNvbnN0IHN0cmluZ0NhY2hlID0ge307XG5mdW5jdGlvbiBmZXRjaExvY2FsZVN0cmluZ3NGcm9tQ2FjaGUoY29tcG9uZW50TmFtZSwgbG9jYWxlKSB7XG4gIGNvbnN0IGlkID0gYCR7Y29tcG9uZW50TmFtZX0ke2xvY2FsZX1gO1xuICBpZiAoIXN0cmluZ0NhY2hlW2lkXSkge1xuICAgIHN0cmluZ0NhY2hlW2lkXSA9IGZldGNoTG9jYWxlU3RyaW5nc0ZvckNvbXBvbmVudChjb21wb25lbnROYW1lLCBsb2NhbGUpO1xuICB9XG4gIHJldHVybiBzdHJpbmdDYWNoZVtpZF07XG59XG4vKipcbiAqIEdldCBzdHJpbmdzIGFuZCBsYW5ndWFnZSBjb2Rlcy5cbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgMiBsYW5ndWFnZSBjb2Rlcy5cbiAqIFRoZSBmaXJzdCBvbmUgcmV0dXJucyBhIGNvZGUgdGhhdCdzIGFsc28gc3VwcG9ydGVkIGFzIGEgbGFuZ3VhZ2UgZmlsZS5cbiAqIFRoZSBzZWNvbmQgb25lIHJldHVybnMgYSBjb2RlIHdoZXJlIHRoZXJlIGlzIHN1cHBvcnQgZm9yIHRoZSBmaXJzdCAyIGxldHRlcnMgb2YgdGhlIGNvZGUgYXMgcGFydCBvZiBhIGxhbmd1YWdlIGZpbGUsXG4gKiBidXQgd2lsbCByZXR1cm4gdGhlIG9yaWdpbmFsIDQgbGV0dGVyIGNvZGUgZnJvbSB0aGUgcGFnZS5cbiAqIEUuZy4gRm9yIFwiaXQtY2hcIiBpdCB3aWxsIHJldHVybiBcIml0XCIgYXMgdGhlIGZpcnN0IGxhbmd1YWdlIGNvZGUgYW5kIFwiaXQtY2hcIiBhcyB0aGUgc2Vjb25kLlxuICogVGhlIHNlY29uZCBvbmUgaXMgcmVxdWlyZWQgZm9yIGVzcmkuaW50bC5zZXRMb2NhbGUoKSB0byBnZXQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZy5cbiAqXG4gKiBJZiBhIHRhZ05hbWUgaXMgcHJvdmlkZWQgaXQgd2lsbCBvdmVyd2l0ZSB0aGUgZWxlbWVudCdzIHRhZ05hbWVcbiAqXG4gKiAgQHJldHVybiBbIHN0cmluZ3MsIGZpcnN0IGxhbmd1YWdlIGNvZGUsIHNlY29uZCBsYW5ndWFnZSBjb2RlXVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKGVsZW1lbnQsIHRhZ05hbWUpIHtcbiAgY29uc3QgY29tcG9uZW50TmFtZSA9IHRhZ05hbWUgfHwgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGNvbXBvbmVudExhbmd1YWdlID0gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlKGVsZW1lbnQpO1xuICBjb25zdCBjb21wb25lbnRMYW5ndWFnZUludGwgPSBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2VJbnRsKGVsZW1lbnQpO1xuICBsZXQgc3RyaW5ncztcbiAgdHJ5IHtcbiAgICBzdHJpbmdzID0gYXdhaXQgZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudExhbmd1YWdlKTtcbiAgfVxuICBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2Fybihgbm8gbG9jYWxlIGZvciAke2NvbXBvbmVudE5hbWV9ICgke2NvbXBvbmVudExhbmd1YWdlfSkgbG9hZGluZyBkZWZhdWx0IGxvY2FsZSBlbi5gKTtcbiAgICBzdHJpbmdzID0gYXdhaXQgZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIFwiZW5cIik7XG4gIH1cbiAgcmV0dXJuIFtzdHJpbmdzLCBjb21wb25lbnRMYW5ndWFnZSwgY29tcG9uZW50TGFuZ3VhZ2VJbnRsXTtcbn1cblxuZXhwb3J0IHsgZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlIGFzIGEsIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgYXMgZyB9O1xuIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5jb25zdCBicmVha3BvaW50cyA9IHtcbiAgeHhzOiAzMjAsXG4gIHhzOiA0ODAsXG4gIHNtOiA2NDAsXG4gIG1kOiA3NjgsXG4gIGxnOiAxMDI0LFxuICB4bDogMTI4MFxufTtcbmZ1bmN0aW9uIHNldHVwUmVzaXplT2JzZXJ2ZXIoc3RvcmUpIHtcbiAgdmFyIF9hO1xuICB2YXIgX2I7XG4gIChfYSA9IChfYiA9IHN0b3JlLnN0YXRlKS5yZXNpemVPYnNlcnZlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9iLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHJlc2l6ZUhhbmRsZXIpKTtcbiAgcmV0dXJuIHN0b3JlLnN0YXRlLnJlc2l6ZU9ic2VydmVyO1xufVxuLyoqXG4gKiByZXNpemUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZCB3aGVuIGl0ZW1zIGdldCByZXNpemVkXG4gKiBhbiBldmVudCBpcyBkaXNwYXRjaGVkIG9uIGVhY2ggZWxlbWVudCwgcGFzc2luZyB0aGUgbmV3IHdpZHRoIGFuZCBoZWlnaHRcbiAqL1xuZnVuY3Rpb24gcmVzaXplSGFuZGxlcihlbnRyaWVzKSB7XG4gIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICBpZiAoZW50cnkuY29udGVudFJlY3Qud2lkdGggPiAwKSB7XG4gICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudChcImFyY2dpc0Jyb3dzZXJSZXNpemVcIiwge1xuICAgICAgICBkZXRhaWw6IHsgd2lkdGg6IGVudHJ5LmNvbnRlbnRSZWN0LndpZHRoLCBoZWlnaHQ6IGVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodCB9XG4gICAgICB9KTtcbiAgICAgIGVudHJ5LnRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgeyBicmVha3BvaW50cyBhcyBiLCBzZXR1cFJlc2l6ZU9ic2VydmVyIGFzIHMgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgYyBhcyBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkgfSBmcm9tICcuL2RvbS0xM2Y1YjAwYy5qcyc7XG5cbmNvbnN0IG9uQnJvd3NlckZpbHRlclJlbW92ZSA9IChpZCwgc3RvcmUsIGNhbGxiYWNrKSA9PiB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgc3RvcmUub25DaGFuZ2UoXCJmaWx0ZXJzXCIsIChmaWx0ZXJzKSA9PiB7XG4gICAgaWYgKCFmaWx0ZXJzW2lkXSB8fCAhZmlsdGVyc1tpZF0udmFsdWUpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9KTtcbn07XG5jb25zdCBvblByZXZpZXdDaGFuZ2UgPSAoc3RvcmUsIGNhbGxiYWNrKSA9PiB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgc3RvcmUub25DaGFuZ2UoXCJwcmV2aWV3XCIsIChwcmV2aWV3KSA9PiB7XG4gICAgY2FsbGJhY2soKTtcbiAgfSk7XG59O1xuY29uc3QgU1RPUkVfTE9PS1VQID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0U3RvcmUoZWwsIGJyb3dzZXJUYWcpIHtcbiAgY29uc3QgZXhpc3RpbmdTdG9yZSA9IFNUT1JFX0xPT0tVUC5nZXQoZWwpO1xuICBpZiAoZXhpc3RpbmdTdG9yZSkge1xuICAgIHJldHVybiBleGlzdGluZ1N0b3JlO1xuICB9XG4gIGNvbnN0IGJyb3dzZXIgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWwsIGJyb3dzZXJUYWcpO1xuICBpZiAoYnJvd3Nlcikge1xuICAgIFNUT1JFX0xPT0tVUC5zZXQoZWwsIGJyb3dzZXIuc3RvcmUpO1xuICAgIHJldHVybiBicm93c2VyLnN0b3JlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBvbkJyb3dzZXJGaWx0ZXJSZW1vdmUgYXMgYSwgZ2V0U3RvcmUgYXMgZywgb25QcmV2aWV3Q2hhbmdlIGFzIG8gfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuY29uc3Qgc29ydExvb2t1cCA9IHtcbiAgdGl0bGU6IFtcImFzY1wiLCBcImFscGhhYmV0aWNhbFwiXSxcbiAgb3duZXI6IFtcImFzY1wiLCBcImFscGhhYmV0aWNhbFwiXSxcbiAgbnVtdmlld3M6IFtcImRlc2NcIiwgXCJudW1cIl0sXG4gIHJlbGV2YW5jZTogW1wiZGVzY1wiXSxcbiAgbW9kaWZpZWQ6IFtcImRlc2NcIiwgXCJyZWNlbnRcIl0sXG4gIGNyZWF0ZWQ6IFtcImRlc2NcIiwgXCJyZWNlbnRcIl1cbn07XG5mdW5jdGlvbiBnZXRTb3J0RmllbGRJbmZvKGZpZWxkLCBpMThuKSB7XG4gIGNvbnN0IFtkZWZhdWx0U29ydE9yZGVyLCBsYWJlbFR5cGVdID0gc29ydExvb2t1cFtmaWVsZF07XG4gIGNvbnN0IHNvcnRPcmRlckxhYmVscyA9IHtcbiAgICBhc2M6IGkxOG5bYCR7bGFiZWxUeXBlfUFzY2BdLFxuICAgIGRlc2M6IGkxOG5bYCR7bGFiZWxUeXBlfURlc2NgXVxuICB9O1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiBpMThuW2ZpZWxkXSxcbiAgICBzaG93U29ydE9yZGVyOiAhIWxhYmVsVHlwZSxcbiAgICBkZWZhdWx0U29ydE9yZGVyLFxuICAgIHNvcnRPcmRlckxhYmVsc1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNvcnRPcmRlcihmaWVsZCkge1xuICBjb25zdCBbZGVmYXVsdFNvcnRPcmRlcl0gPSBzb3J0TG9va3VwW2ZpZWxkXTtcbiAgcmV0dXJuIGRlZmF1bHRTb3J0T3JkZXI7XG59XG5cbmV4cG9ydCB7IGdldERlZmF1bHRTb3J0T3JkZXIgYXMgYSwgZ2V0U29ydEZpZWxkSW5mbyBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=