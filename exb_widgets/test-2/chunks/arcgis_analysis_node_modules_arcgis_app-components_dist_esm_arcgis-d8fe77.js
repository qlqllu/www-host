"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-d8fe77"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-filter_4.entry.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-filter_4.entry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_filter: () => (/* binding */ ArcgisFilter),
/* harmony export */   arcgis_filter_condition: () => (/* binding */ ArcgisFilterCondition),
/* harmony export */   arcgis_filter_expression: () => (/* binding */ ArcgisFilterExpression),
/* harmony export */   arcgis_filter_unique_list: () => (/* binding */ ArcgisFilterUniqueList)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */









const CSS$3 = {
  panel: "panel",
  hook: "hook",
  removeFilter: "remove-filter",
  matchExpressionMsg: "match-expression-msg",
  matchExpressionDropdown: "match-expression-dropdown",
  logicalOperator: "match-type"
};

var logicalOperators;
(function (logicalOperators) {
  logicalOperators["AND"] = "and";
  logicalOperators["OR"] = "or";
})(logicalOperators || (logicalOperators = {}));
var simpleFieldTypes;
(function (simpleFieldTypes) {
  simpleFieldTypes["NUMBER"] = "number";
  simpleFieldTypes["STRING"] = "string";
  simpleFieldTypes["DATE"] = "date";
  simpleFieldTypes["DATE_ONLY"] = "date-only";
  simpleFieldTypes["OID"] = "oid";
  simpleFieldTypes["GUID"] = "guid";
  simpleFieldTypes["DOMAIN"] = "domain";
})(simpleFieldTypes || (simpleFieldTypes = {}));
var status;
(function (status) {
  status["MISSING"] = "missing";
  status["IN_PROGRESS"] = "inProgress";
  status["SUCCESS"] = "success";
  status["FAILED"] = "failed";
})(status || (status = {}));
var timeUnits;
(function (timeUnits) {
  timeUnits["MINUTE"] = "minute";
  timeUnits["HOUR"] = "hour";
  timeUnits["DAY"] = "day";
  timeUnits["WEEK"] = "week";
  timeUnits["MONTH"] = "month";
  timeUnits["YEAR"] = "year";
})(timeUnits || (timeUnits = {}));
var timeRange;
(function (timeRange) {
  timeRange[timeRange["MINUTE"] = 60000] = "MINUTE";
  timeRange[timeRange["HOUR"] = 3600000] = "HOUR";
  timeRange[timeRange["DAY"] = 86400000] = "DAY";
  timeRange[timeRange["WEEK"] = 604800000] = "WEEK";
  timeRange[timeRange["MONTH"] = 2592000000] = "MONTH";
  timeRange[timeRange["YEAR"] = 31104000000] = "YEAR";
})(timeRange || (timeRange = {}));
var scales;
(function (scales) {
  scales["SMALL"] = "s";
  scales["MEDIUM"] = "m";
  scales["LARGE"] = "l";
})(scales || (scales = {}));
/**
 * Returns true if the value is defined
 * @param value - value to check
 */
function isDefined(value) {
  return value !== undefined && value !== null;
}
function isEffectEmpty(featureEffect) {
  if (!featureEffect || !featureEffect.filter) {
    return true;
  }
  const checkProps = ["geometry", "objectIds", "timeExtent", "where"];
  return !checkProps.some((prop) => featureEffect.filter.hasOwnProperty(prop) && !!featureEffect.filter[prop]);
}
function checkConfig(props) {
  var _a, _b;
  const { layer, mapImageSublayer } = props;
  const url = layer.url;
  props.supportsStandardizedQuery =
    "version" in layer && layer.version >= 10.2 && !!((_b = (_a = layer.capabilities) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.supportsStandardizedQueriesOnly);
  props.supportedSqlParserVersion =
    layer.type === "feature" &&
      props.supportsStandardizedQuery &&
      layer.sourceJSON.sqlParserVersion &&
      layer.sourceJSON.sqlParserVersion !== "ES_10.6.1";
  if (!url || mapImageSublayer) {
    props.isHosted = false;
    return;
  }
  // hosted feature service: http://services.arcgis.com/f7ee40282cbc40998572834591021976/arcgis/rest/services/StateCapitals/FeatureServer
  // new amazon hosted feature service: http://features.arcgis.com/e2ea3c31dd80478689ce70c4fb3380c5/arcgis/rest/services/santaclara_fs/FeatureServer
  // hosted tiled service: https://tilesdevext.arcgis.com/tiles/fa019fbbfbb845d08cc9f0acde6dd8af/arcgis/rest/services/States/MapServer
  // uploaded KML service: http://www.arcgis.com/sharing/content/items/ecddddaf6b174d7ca94816ac397d9b48/data
  // secure service: http://www.arcgis.com/sharing/rest/services/aee2a3d9d15f406cb21576d92ea1316e/MapServer
  const arcgis = ".arcgis.com/", services = "//services", tiles = "//tiles", features = "//features", locationservices = "//locationservices", velocityUs = "//us-iot", velocityEu = "//eu-iot";
  //sharing = (new dojo._Url(esriGeowConfig.restBaseUrl)).authority,
  //isSingleTenant = false; //(false === esriGeowConfig.isMultiTenant);
  // CR #238,732 - only consider locally hosted if the restBaseUrl is on same domain as url
  // and esriGeowConfig.self.supportsHostedServices flag is enabled
  const isAGOL = url.indexOf(arcgis) !== -1, isHostedServer = url.indexOf(services) !== -1 ||
    url.indexOf(tiles) !== -1 ||
    url.indexOf(features) !== -1 ||
    url.indexOf(locationservices) !== -1 ||
    url.indexOf(velocityUs) !== -1 ||
    url.indexOf(velocityEu) !== -1, isLocallyHosted = false; //((isDefined(esriGeowConfig.self) && esriGeowConfig.self.supportsHostedServices) && (url.indexOf(sharing) !== -1 && !isSingleTenant));
  //isProxyService = !isHostedServer && arcgis; // if the service requires non-AGOL credentials
  props.isHosted = (isAGOL && isHostedServer) || (!isAGOL && isLocallyHosted);
}
function fixUIDs(expressions) {
  if (!expressions || !expressions.length) {
    return expressions;
  }
  return expressions.map((expression, idx) => {
    if (expression.uid === `expression-${idx}`) {
      // no change to uid
      return Object.assign(Object.assign({}, expression), { conditions: expression.conditions.map((condition, idx2) => {
          const newUid = `condition-${idx}-${idx2}`;
          if (condition.uid === newUid) {
            return condition;
          }
          else {
            return Object.assign(Object.assign({}, condition), { uid: newUid });
          }
        }) });
    }
    else {
      return Object.assign(Object.assign({}, expression), { uid: `expression-${idx}`, expressionIndex: idx, conditions: expression.conditions.map((condition, idx2) => {
          const newUid = `condition-${idx}-${idx2}`;
          if (condition.uid === newUid) {
            return condition;
          }
          else {
            return Object.assign(Object.assign({}, condition), { uid: newUid });
          }
        }) });
    }
  });
}

function utcToDatePicker(value, timeZone) {
  // date is in UTC
  // we need a map timezone
  let str;
  if (!timeZone || timeZone === "system") {
    const diff = new Date().getTimezoneOffset();
    str = new Date(value - diff * 60000).toISOString();
  }
  else if (timeZone === "unknown") {
    str = new Date(value).toISOString();
  }
  else {
    const diff = new Date().getTimezoneOffset();
    const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
    str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
  }
  //console.log("utcToDatePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
  return str;
}
function datePickerToUTC(date, timeZone) {
  // date is in map timezone
  // we need a UTC UNIX timestamp
  let value;
  if (!timeZone || timeZone === "system") {
    // add difference between local time and UTC
    value = date.getTime() + date.getTimezoneOffset() * 60000;
  }
  else if (timeZone === "unknown") {
    // take what you get
    value = date.getTime();
  }
  else {
    // add difference between map time and UTC
    const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
      new Date(date.toLocaleString("en-US", { timeZone })).getTime();
    value = date.getTime() + diff;
  }
  //console.log("datePickerToUTC", date.toISOString(), " -> ", new Date(value).toISOString());
  return value;
}
function mapTZToUTC(value, timeZone) {
  if (!value) {
    return value;
  }
  // value is in map timezone
  // we need a UTC timestamp
  let newValue;
  if (!timeZone || timeZone === "system") {
    // add difference between local time and UTC
    const date = new Date();
    newValue = value + date.getTimezoneOffset() * 60000;
  }
  else if (timeZone === "unknown") {
    // take what you get
    newValue = value;
  }
  else {
    // add difference between map time and UTC
    const date = new Date();
    const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
      new Date(date.toLocaleString("en-US", { timeZone })).getTime();
    newValue = value + diff;
  }
  //console.log("mapTZToUTC", value, " - ", new Date(value).toISOString(), " - ", new Date(newValue).toISOString());
  return newValue;
}
function getDateDisplayString(value, timeZone, intl, dateFormat) {
  let str;
  if (timeZone === "unknown") {
    str = intl.formatDate(value, Object.assign(Object.assign({}, intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
  }
  else {
    // known issues with formatting it-CH
    str = intl.formatDate(value, Object.assign(Object.assign({}, intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone }));
  }
  //console.log("getDateDisplayString", value, " - ", new Date(value).toISOString(), " -> ", str);
  return str;
}

//import Domain from "esri/layers/support/Domain";
async function collectFieldDomains(props) {
  // we do not support subTypes ...
  const { layer, fields } = props;
  if (layer.type !== "feature") {
    return;
  }
  const typeIdField = layer.typeIdField;
  const types = layer.types;
  fields.forEach(async (featureField) => {
    const fieldName = featureField.layerField.name;
    const fieldDomain = featureField.layerField.domain;
    const filterField = getFieldInfo(fieldName, props);
    if (!filterField) {
      // maybe geometry field
      return;
    }
    if (typeIdField && types) {
      // layer has types
      if (typeIdField === fieldName) {
        // this is the field with the types
        filterField.fieldDomains = types.map((type) => {
          // fake coded Values
          return {
            code: type.id,
            name: type.name
          };
        });
        getSimpleFieldType(props, filterField);
      }
      else {
        // field does not have types; look farther inside the types
        filterField.fieldDomains = [];
        types.forEach((type) => {
          var _a, _b;
          if (!type.domains || !type.domains[fieldName] || type.domains[fieldName].type === "inherited") {
            const domain /*Domain*/ = fieldDomain;
            if (domain === null || domain === void 0 ? void 0 : domain.codedValues) {
              domain.codedValues.forEach(async (codedValue) => {
                let found = false;
                filterField.fieldDomains.forEach((codedVal) => {
                  if (codedVal.code === codedValue.code) {
                    found = true;
                    if (`, ${codedVal.name},`.indexOf(`, ${codedValue.name},`) === -1) {
                      codedVal.name += `, ${codedValue.name}`;
                    }
                  }
                });
                if (!found) {
                  const [esriLang] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/core/lang"]);
                  filterField.fieldDomains.push(esriLang.clone(codedValue));
                }
              });
            }
          }
          else if ((_b = (_a = type.domains) === null || _a === void 0 ? void 0 : _a[fieldName]) === null || _b === void 0 ? void 0 : _b.codedValues) {
            type.domains[fieldName].codedValues.forEach(async (codedValue) => {
              let found = false;
              filterField.fieldDomains.forEach((codedVal) => {
                if (codedVal.code === codedValue.code) {
                  found = true;
                  if (`, ${codedVal.name},`.indexOf(`, ${codedValue.name},`) === -1) {
                    codedVal.name += `, ${codedValue.name}`;
                  }
                }
              });
              if (!found) {
                const [esriLang] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/core/lang"]);
                filterField.fieldDomains.push(esriLang.clone(codedValue));
              }
            });
            //filterField.fieldDomains = filterField.fieldDomains.concat(type.domains[field.name].codedValues);
            //} else {
            /* ... wrong, it's not the typeIdField ...
              // fake coded values
              filterField.fieldDomains.push({
                code: type.id,
                name: type.name
              });
            */
            // field has no domains
            // delete filterField.fieldDomains;
          }
        });
      }
      if (!hasFieldDomains(filterField) && (fieldDomain === null || fieldDomain === void 0 ? void 0 : fieldDomain.codedValues)) {
        const [esriLang] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/core/lang"]);
        filterField.fieldDomains = esriLang.clone(fieldDomain.codedValues);
      }
    }
    else if (fieldDomain === null || fieldDomain === void 0 ? void 0 : fieldDomain.codedValues) {
      // domains directly on the layer field
      filterField.fieldDomains = fieldDomain.codedValues;
    }
    // update in case it has changed
    getSimpleFieldType(props, filterField);
  });
}
function getDecodedValue(value, filterField) {
  const codedValues = filterField.fieldDomains;
  if (codedValues) {
    let label = "";
    for (let i = 0; i < codedValues.length; i++) {
      const codedValue = codedValues[i];
      if (codedValue.code == value) {
        label += (label.length ? " | " : "") + codedValue.name;
      }
    }
    return label;
  }
  // did not find it
  return value;
}
function hasFieldDomains(filterField) {
  var _a;
  return (_a = filterField.fieldDomains) === null || _a === void 0 ? void 0 : _a.length;
}

async function buildFilterFields(props) {
  const { layer, mapImageSublayer, featureReduction } = props;
  if (!layer) {
    return;
  }
  if (featureReduction) {
    return buildFeatureReductionFields(props);
  }
  let layerFields = layer.fields;
  // https://demographics9dev.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2019/MapServer
  if (mapImageSublayer &&
    mapImageSublayer.layer.portalItem &&
    mapImageSublayer.layer.url.indexOf("https://demographics") > -1 &&
    mapImageSublayer.layer.url.indexOf(".arcgis.com") > -1) {
    const portalItem = mapImageSublayer.layer.portalItem;
    try {
      const response = await portalItem.fetchData();
      if (response === null || response === void 0 ? void 0 : response.thematicGroup) {
        const fieldNames = response.thematicGroup.fieldNames;
        if (fieldNames) {
          layerFields = layerFields.filter((layerField) => fieldNames.indexOf(layerField.name) > -1);
        }
      }
      return buildFeatureFilterFieldsAfterThematicGroupCheck(props, layerFields);
    }
    catch (error) {
      // assume there is none
      return buildFeatureFilterFieldsAfterThematicGroupCheck(props, layerFields);
    }
  }
  else {
    return buildFeatureFilterFieldsAfterThematicGroupCheck(props, layerFields);
  }
}
function buildFeatureFilterFieldsAfterThematicGroupCheck(props, layerFields) {
  if (!props.fields || !props.fields.length) {
    props.fields = [];
    props.stringFieldsCount = 0;
    props.dateFieldsCount = 0;
    props.numberFieldsCount = 0;
    if (!props.supportsStandardizedQuery) {
      // NOTE: client side filter effect only supports sql92 and needs the timestamp in the query
      // therfore we disable data fields for services without standardizedQuery support
      layerFields = layerFields.filter((layerField) => ["date", "date-only"].indexOf(layerField.type) === -1);
    }
    let fieldInfos = [];
    if (props.layer.type !== "subtype-group") {
      const { popupTemplate } = props.layer;
      fieldInfos = popupTemplate ? popupTemplate.fieldInfos : [];
    }
    layerFields.forEach((layerField) => {
      const list = fieldInfos
        ? fieldInfos.filter((fieldInfo) => fieldInfo.fieldName === layerField.name)
        : null;
      const label = (list === null || list === void 0 ? void 0 : list.length) ? list[0].label : null;
      const filterField = {
        layerField: layerField,
        statisticsStatus: status.MISSING,
        histogramStatus: status.MISSING,
        uniqueValuesStatus: status.MISSING,
        partialUniqueValues: false,
        label: label || layerField.alias || layerField.name
      };
      getSimpleFieldType(props, filterField);
      if (filterField.simpleFieldType) {
        props.fields.push(filterField);
      } // else can't use field for filter
    });
    collectFieldDomains(props);
  }
}
async function buildFeatureReductionFields(props) {
  var _a;
  const { layer, view } = props;
  if (layer.type === "imagery" || layer.type === "subtype-group") {
    return;
  }
  if (!((_a = props.fields) === null || _a === void 0 ? void 0 : _a.length)) {
    props.fields = [];
    props.stringFieldsCount = 0;
    props.dateFieldsCount = 0;
    props.numberFieldsCount = 1;
    let count = 5000;
    let avg = 10;
    let featureCount = 0;
    try {
      featureCount = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.g)(layer, view);
      count = featureCount ? Math.min(Math.max(10, Math.ceil(featureCount / 4)), 5000) : 5000;
      avg = featureCount && featureCount >= 1000 ? 100 : 10;
    }
    catch (_b) { }
    const [Field] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/layers/support/Field"]);
    const featureReduction = layer.featureReduction;
    props.fields = [];
    featureReduction.fields.forEach((aggregateField) => {
      const isCount = aggregateField.statisticType === "count";
      const layerField = aggregateField.onStatisticField &&
        layer.fields.find((field) => field.name === aggregateField.onStatisticField);
      if ((!aggregateField.onStatisticField && isCount) || layerField) {
        const filterField = {
          layerField: new Field({
            name: aggregateField.name,
            alias: aggregateField.alias || aggregateField.name,
            type: (layerField === null || layerField === void 0 ? void 0 : layerField.type) || "integer"
          }),
          statisticsStatus: isCount ? status.SUCCESS : status.MISSING,
          statistics: isCount ? { min: 1, max: count, avg } : undefined,
          histogramStatus: isCount ? status.FAILED : status.MISSING,
          uniqueValuesStatus: status.MISSING,
          partialUniqueValues: false,
          label: aggregateField.alias || aggregateField.name
          //simpleFieldType: ...
        };
        getSimpleFieldType(props, filterField);
        props.fields.push(filterField);
      }
    });
  }
}
function getFieldInfo(fieldName, props) {
  const { fields } = props;
  for (let i = 0; i < fields.length; i++) {
    const filterField = fields[i];
    if (filterField.layerField.name === fieldName) {
      return filterField;
    }
  }
  return undefined;
}
function getDefaultField(props) {
  const { fields, defaultFieldName } = props;
  if (defaultFieldName) {
    const defaultField = fields.find((field) => field.layerField.name === defaultFieldName);
    if (defaultField) {
      return defaultField;
    }
  }
  let firstNumberField;
  for (let i = 0; i < fields.length; i++) {
    const field = fields[i];
    if (field.simpleFieldType &&
      [simpleFieldTypes.OID, simpleFieldTypes.GUID, simpleFieldTypes.DATE].indexOf(field.simpleFieldType) === -1) {
      if (field.simpleFieldType === simpleFieldTypes.NUMBER && !firstNumberField) {
        firstNumberField = field;
      }
      else {
        // string field
        return field;
      }
    }
  }
  // we didn't find a string field
  if (firstNumberField) {
    return firstNumberField;
  }
  return fields[0];
}
function getDefaultValues(props, filterField, operator) {
  var _a;
  const { strings } = props;
  const result = {};
  const statistics = filterField.statistics;
  if (!statistics) {
    if (filterField.simpleFieldType === simpleFieldTypes.STRING &&
      filterField.uniqueValuesStatus === status.SUCCESS &&
      ((_a = filterField.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) &&
      [strings.operators.stringOperatorIs, strings.operators.stringOperatorIsNot].indexOf(operator) > -1) {
      result.value = filterField.uniqueValueInfos[0].value;
    }
    return result;
  }
  if (isInTheLastOperator(props, operator)) {
    const now = new Date().getTime();
    const range = Math.abs(now - statistics.avg);
    if (range > 2 * timeRange.YEAR) {
      result.value = Math.round(range / timeRange.YEAR);
      result.unit = timeUnits.YEAR;
    }
    else {
      if (range > 2 * timeRange.MONTH) {
        result.value = Math.round(range / timeRange.MONTH);
        result.unit = timeUnits.MONTH;
      }
      else {
        if (range > 2 * timeRange.WEEK) {
          result.value = Math.round(range / timeRange.WEEK);
          result.unit = timeUnits.WEEK;
        }
        else {
          if (range > 2 * timeRange.DAY) {
            result.value = Math.round(range / timeRange.DAY);
            result.unit = timeUnits.DAY;
          }
          else {
            if (range > 2 * timeRange.HOUR) {
              result.value = Math.round(range / timeRange.HOUR);
              result.unit = timeUnits.HOUR;
            }
            else {
              result.value = Math.round(range / timeRange.MINUTE);
              result.unit = timeUnits.MINUTE;
            }
          }
        }
      }
    }
  }
  else if (isBetweenOperator(props, operator)) {
    result.value = fieldTypeRound(statistics.avg, props, filterField);
    result.value2 = fieldTypeRound(statistics.max, props, filterField);
  }
  else {
    result.value = fieldTypeRound(statistics.avg, props, filterField);
  }
  return result;
}
function getSignificantDigits(props, filterField) {
  const { layer } = props;
  let significantDigits = 2;
  const popupTemplate = layer.type !== "subtype-group" && layer.popupTemplate;
  if (popupTemplate) {
    const popFieldInfos = popupTemplate.fieldInfos.filter((fieldInfo) => fieldInfo.fieldName === filterField.layerField.name);
    if (popFieldInfos === null || popFieldInfos === void 0 ? void 0 : popFieldInfos.length) {
      const popFieldInfo = popFieldInfos[0];
      if (popFieldInfo.format && isDefined(popFieldInfo.format.places)) {
        significantDigits = popFieldInfo.format.places;
      }
    }
  }
  return significantDigits;
}
function roundToSignificantDigits(value, props, filterField) {
  const significantDigits = getSignificantDigits(props, filterField);
  const factor = Math.pow(10, significantDigits);
  return isDefined(value) && Math.round(value * factor) / factor;
}
function fieldTypeRound(value, props, filterField) {
  return (isDefined(value) &&
    (isIntegerType(filterField) ? Math.round(value) : roundToSignificantDigits(value, props, filterField)));
}
function getSimpleFieldType(props, featureFilterField) {
  switch (featureFilterField.layerField.type) {
    case "string":
      featureFilterField.simpleFieldType = simpleFieldTypes.STRING;
      props.stringFieldsCount++;
      break;
    case "date":
      if (hasFieldDomains(featureFilterField)) {
        featureFilterField.simpleFieldType = simpleFieldTypes.STRING;
        props.stringFieldsCount++;
      }
      else {
        featureFilterField.simpleFieldType = simpleFieldTypes.DATE;
        props.dateFieldsCount++;
      }
      break;
    case "date-only":
      featureFilterField.simpleFieldType = simpleFieldTypes.DATE_ONLY;
      break;
    case "oid":
      featureFilterField.simpleFieldType = simpleFieldTypes.OID;
      break;
    case "guid":
      featureFilterField.simpleFieldType = simpleFieldTypes.GUID;
      break;
    case "small-integer":
    case "big-integer":
    case "integer":
    case "single":
    case "double":
    case "long":
      if (hasFieldDomains(featureFilterField)) {
        featureFilterField.simpleFieldType = simpleFieldTypes.STRING;
        props.stringFieldsCount++;
      }
      else {
        featureFilterField.simpleFieldType = simpleFieldTypes.NUMBER;
        props.numberFieldsCount++;
      }
      break;
  }
}
function isNumberType(featureFilterField) {
  return (["small-integer", "big-integer", "integer", "single", "double", "long"].indexOf(featureFilterField.layerField.type) > -1);
}
function isIntegerType(featureFilterField) {
  return ["small-integer", "big-integer", "integer", "long"].indexOf(featureFilterField.layerField.type) > -1;
}
function isFloatType(featureFilterField) {
  return ["single", "double"].indexOf(featureFilterField.layerField.type) > -1;
}
function isDateType(featureFilterField) {
  return ["date"].indexOf(featureFilterField.layerField.type) > -1;
}
function isDateOnlyType(featureFilterField) {
  return ["date-only"].indexOf(featureFilterField.layerField.type) > -1;
}
function supportsHistogram(fieldName, operator, props) {
  const { strings } = props;
  const filterField = getFieldInfo(fieldName, props);
  // TODO - also check field value type ?
  if (filterField &&
    filterField.simpleFieldType &&
    filterField.statisticsStatus !== "failed" &&
    (([simpleFieldTypes.NUMBER, simpleFieldTypes.DATE, simpleFieldTypes.DATE_ONLY].indexOf(filterField.simpleFieldType) > -1 &&
      [
        strings.operators.numberOperatorIs,
        strings.operators.dateOperatorIsOn,
        // don't remember the reason we hid isNotOn for date fields in the past, so enabling it again
        strings.operators.dateOperatorIsNotOn,
        strings.operators.numberOperatorIsNot,
        strings.operators.numberOperatorIsLessThan,
        strings.operators.dateOperatorIsBefore,
        strings.operators.numberOperatorIsGreaterThan,
        strings.operators.dateOperatorIsAfter,
        strings.operators.numberOperatorIsAtMost,
        strings.operators.numberOperatorIsAtLeast,
        strings.operators.numberOperatorIsBetween,
        strings.operators.dateOperatorIsBetween,
        strings.operators.numberOperatorIsNotBetween,
        strings.operators.dateOperatorIsNotBetween
      ].indexOf(operator) > -1))) {
    return true;
  }
  return false;
}
function createIndexes(props) {
  const { layer, expressions, strings } = props;
  if (layer.type !== "feature") {
    return;
  }
  const { portalItem, sourceJSON } = layer;
  if (!portalItem) {
    return;
  }
  const { typeKeywords, itemControl, portal } = portalItem;
  const isPortal = portal.isPortal;
  const isHosted = (typeKeywords === null || typeKeywords === void 0 ? void 0 : typeKeywords.indexOf("Hosted Service")) > -1;
  const isOnlineLocationTrackingService = !isPortal && (typeKeywords === null || typeKeywords === void 0 ? void 0 : typeKeywords.indexOf("Location Tracking Service")) > -1;
  if (!isHosted || isOnlineLocationTrackingService) {
    return;
  }
  if (portal.user && itemControl && ["admin", "update"].indexOf(itemControl) > -1) {
    const i18nOps = strings.operators;
    const invalidOperators = [
      i18nOps.stringOperatorEndsWith,
      i18nOps.stringOperatorContains,
      i18nOps.stringOperatorDoesNotContain
    ];
    const fieldNames = [];
    const addFieldToList = (condition) => {
      const fieldName = condition.fieldName;
      if (!fieldName) {
        return;
      }
      const filterField = getFieldInfo(fieldName, props);
      const isValidField = !(((filterField === null || filterField === void 0 ? void 0 : filterField.simpleFieldType) === simpleFieldTypes.STRING ||
        (filterField === null || filterField === void 0 ? void 0 : filterField.simpleFieldType) === simpleFieldTypes.GUID) &&
        (filterField.layerField.length > 4000 || invalidOperators.indexOf(condition.operator) > -1));
      if (isValidField && fieldNames.indexOf(fieldName) === -1) {
        fieldNames.push(fieldName);
      }
    };
    expressions === null || expressions === void 0 ? void 0 : expressions.forEach((expression) => expression.conditions.forEach((condition) => addFieldToList(condition)));
    const json = {
      indexes: []
    };
    sourceJSON.indexes = sourceJSON.indexes || [];
    fieldNames.forEach((fieldName) => {
      if (!sourceJSON.indexes.some((index) => index.fields === fieldName)) {
        // index doesn't exist yet
        json.indexes.push({
          name: `${fieldName}_Index`,
          fields: fieldName,
          isUnique: false,
          isAscending: true,
          description: `${fieldName}_Index`
        });
      }
    });
    if (json.indexes.length) {
      executeCreateIndexes(json, props);
    }
  }
}
async function executeCreateIndexes(json, props) {
  var _a, _b;
  const { layer, parentServiceUrl } = props;
  if (layer.type !== "feature") {
    return;
  }
  const { portalItem, sourceJSON } = layer;
  const { typeKeywords, portal } = portalItem;
  const isView = typeKeywords.includes("View Service");
  const [IdentityManager, esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/identity/IdentityManager", "esri/request"]);
  if (isView && !parentServiceUrl) {
    // need to use the original service url
    var relatedUrl = `${portal.restUrl}/content/items/${portalItem.id}/relatedItems?relationshipType=Service2Service&direction=reverse`;
    const credential = await IdentityManager.getCredential(portal.restUrl, { prompt: false });
    const result = await esriRequest(relatedUrl, { query: { f: "json", token: credential.token } });
    if ((_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.total) {
      result.data.relatedItems
        .filter((item) => item.typeKeywords.includes("Hosted Service"))
        .forEach((item) => {
        props.parentServiceUrl = item.url;
        executeCreateIndexes(json, props);
      });
    }
    return;
  }
  const adminUrl = (parentServiceUrl || layer.url).replace("/rest/services", "/rest/admin/services");
  const url = `${adminUrl}/${layer.layerId}/addToDefinition`;
  const credential = await IdentityManager.getCredential(layer.url, { prompt: false });
  const content = {
    f: "json",
    addToDefinition: JSON.stringify(json),
    async: !portal.isPortal,
    token: credential.token
  };
  const result = await esriRequest(url, {
    query: content,
    method: "post"
  });
  if (portal.isPortal) {
    sourceJSON.indexes = sourceJSON.indexes || [];
    sourceJSON.indexes = sourceJSON.indexes.concat(json.indexes);
  }
  else {
    try {
      await pollForStatus((_b = result === null || result === void 0 ? void 0 : result.data) === null || _b === void 0 ? void 0 : _b.statusURL, {
        f: "json",
        token: credential.token
      }, esriRequest);
      sourceJSON.indexes = sourceJSON.indexes || [];
      sourceJSON.indexes = sourceJSON.indexes.concat(json.indexes);
    }
    catch (e) {
      // not a big problem if it didn't work
    }
  }
}
const pollForStatus = async (url, params, esriRequest) => {
  var _a;
  if (!url) {
    throw new Error("pollForStatus: no status URL");
  }
  const pendingStatuses = ["processing", "partial", "Pending", "InProgress"];
  const successStatuses = ["completed", "Completed"];
  // Keep polling status until either completed or failed
  try {
    // Do failures report as success (status 200)? May need to manually throw error on status check failure
    const statusResponse = await esriRequest(url, { query: params });
    const status = (_a = statusResponse === null || statusResponse === void 0 ? void 0 : statusResponse.data) === null || _a === void 0 ? void 0 : _a.status;
    if (pendingStatuses.includes(status)) {
      await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__.t)(500);
      return pollForStatus(url, params, esriRequest);
    }
    else if (successStatuses.includes(status)) {
      return statusResponse;
    }
    else {
      throw statusResponse;
    }
  }
  catch (e) {
    console.error(e);
    throw e;
  }
};

function buildOperatorsList(props) {
  const { layer, featureReduction, strings } = props;
  const isStreamLayer = layer.declaredClass === "esri.layers.StreamLayer";
  const isImageryLayer = layer.declaredClass === "esri.layers.ImageryLayer";
  if (!props.operators) {
    props.operators = {};
    props.operators[simpleFieldTypes.STRING] = [];
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorIs
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorIsNot
    });
    if (!isStreamLayer && !isImageryLayer) {
      props.operators[simpleFieldTypes.STRING].push({
        name: strings.operators.stringOperatorIncludes
      });
      props.operators[simpleFieldTypes.STRING].push({
        name: strings.operators.stringOperatorExcludes
      });
    }
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorStartsWith
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorEndsWith
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorContains
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorDoesNotContain
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorIsBlank
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorIsNotBlank
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorIsEmpty
    });
    props.operators[simpleFieldTypes.STRING].push({
      name: strings.operators.stringOperatorIsNotEmpty
    });
    props.operators[simpleFieldTypes.DATE] = [];
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsOn
    });
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsNotOn
    });
    /* if (!isStreamLayer) {
      props.operators[simpleFieldTypes.DATE].push({
        name: strings.operators.numberOperatorIncludes
      });
      props.operators[simpleFieldTypes.DATE].push({
        name: strings.operators.numberOperatorExcludes
      });
    } */
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsBefore
    });
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsAfter
    });
    if (props.isHosted || props.supportedSqlParserVersion) {
      // || layer.version >= 10.21) {
      // We don't know if CURRENT_TIMESTAMP is in UTC for other databases.
      props.operators[simpleFieldTypes.DATE].push({
        name: strings.operators.dateOperatorInTheLast
      });
      props.operators[simpleFieldTypes.DATE].push({
        name: strings.operators.dateOperatorNotInTheLast
      });
    }
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsBetween
    });
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsNotBetween
    });
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsBlank
    });
    props.operators[simpleFieldTypes.DATE].push({
      name: strings.operators.dateOperatorIsNotBlank
    });
    props.operators[simpleFieldTypes.DATE_ONLY] = [];
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsOn
    });
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsNotOn
    });
    /* if (!isStreamLayer) {
      props.operators[simpleFieldTypes.DATE_ONLY].push({
        name: strings.operators.dateOperatorIncludes
      });
      props.operators[simpleFieldTypes.DATE_ONLY].push({
        name: strings.operators.dateOperatorExcludes
      });
    } */
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsBefore
    });
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsAfter
    });
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsBetween
    });
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsNotBetween
    });
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsBlank
    });
    props.operators[simpleFieldTypes.DATE_ONLY].push({
      name: strings.operators.dateOperatorIsNotBlank
    });
    props.operators[simpleFieldTypes.NUMBER] = [];
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIs
    });
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIsNot
    });
    if (!featureReduction && !isStreamLayer && !isImageryLayer) {
      props.operators[simpleFieldTypes.NUMBER].push({
        name: strings.operators.numberOperatorIncludes
      });
      props.operators[simpleFieldTypes.NUMBER].push({
        name: strings.operators.numberOperatorExcludes
      });
    }
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIsAtLeast
    });
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIsLessThan
    });
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIsAtMost
    });
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIsGreaterThan
    });
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIsBetween
    });
    props.operators[simpleFieldTypes.NUMBER].push({
      name: strings.operators.numberOperatorIsNotBetween
    });
    if (!featureReduction) {
      props.operators[simpleFieldTypes.NUMBER].push({
        name: strings.operators.numberOperatorIsBlank
      });
      props.operators[simpleFieldTypes.NUMBER].push({
        name: strings.operators.numberOperatorIsNotBlank
      });
    }
    props.operators[simpleFieldTypes.DOMAIN] = [];
    props.operators[simpleFieldTypes.DOMAIN].push({
      name: strings.operators.stringOperatorIs
    });
    props.operators[simpleFieldTypes.DOMAIN].push({
      name: strings.operators.stringOperatorIsNot
    });
    if (!isStreamLayer && !isImageryLayer && !isImageryLayer) {
      props.operators[simpleFieldTypes.DOMAIN].push({
        name: strings.operators.stringOperatorIncludes
      });
      props.operators[simpleFieldTypes.DOMAIN].push({
        name: strings.operators.stringOperatorExcludes
      });
    }
    props.operators[simpleFieldTypes.DOMAIN].push({
      name: strings.operators.stringOperatorIsBlank
    });
    props.operators[simpleFieldTypes.DOMAIN].push({
      name: strings.operators.stringOperatorIsNotBlank
    });
    props.operators[simpleFieldTypes.DOMAIN].push({
      name: strings.operators.stringOperatorIsEmpty
    });
    props.operators[simpleFieldTypes.DOMAIN].push({
      name: strings.operators.stringOperatorIsNotEmpty
    });
  }
}
function getDefaultOperator(props, featureFilterField) {
  const { strings, defaultOperator } = props;
  if (featureFilterField.layerField.name === "cluster_count") {
    return strings.operators.numberOperatorIsGreaterThan;
  }
  switch (featureFilterField.layerField.type) {
    case "string":
      return strings.operators.stringOperatorIs;
    case "date":
    case "date-only":
      if (hasFieldDomains(featureFilterField)) {
        return strings.operators.stringOperatorIs;
      }
      else if (defaultOperator) {
        switch (defaultOperator) {
          case ">":
          case ">=":
            return strings.operators.dateOperatorIsAfter;
          case "<":
          case "<=":
            return strings.operators.dateOperatorIsBefore;
          default:
            return strings.operators.dateOperatorIsOn;
        }
      }
      else {
        return strings.operators.dateOperatorIsBefore;
      }
    case "oid":
      return strings.operators.numberOperatorIs;
    case "guid":
      return strings.operators.numberOperatorIs;
    case "small-integer":
    case "big-integer":
    case "integer":
    case "single":
      if (hasFieldDomains(featureFilterField)) {
        return strings.operators.stringOperatorIs;
      }
      else if (defaultOperator) {
        switch (defaultOperator) {
          case ">":
            return strings.operators.numberOperatorIsGreaterThan;
          case ">=":
            return strings.operators.numberOperatorIsAtLeast;
          case "<":
            return strings.operators.numberOperatorIsLessThan;
          case "<=":
            return strings.operators.numberOperatorIsAtMost;
          default:
            return strings.operators.numberOperatorIs;
        }
      }
      else {
        return strings.operators.numberOperatorIs;
      }
    case "double":
    case "long":
      if (hasFieldDomains(featureFilterField)) {
        return strings.operators.stringOperatorIs;
      }
      else if (defaultOperator) {
        switch (defaultOperator) {
          case ">":
            return strings.operators.numberOperatorIsGreaterThan;
          case ">=":
            return strings.operators.numberOperatorIsAtLeast;
          case "<":
            return strings.operators.numberOperatorIsLessThan;
          case "<=":
            return strings.operators.numberOperatorIsAtMost;
          default:
            return strings.operators.numberOperatorIs;
        }
      }
      else {
        return strings.operators.numberOperatorIsAtLeast;
      }
    default:
      return strings.operators.stringOperatorIs;
  }
}
function isBetweenOperator(props, operator) {
  const { strings } = props;
  if (operator &&
    [
      strings.operators.numberOperatorIsBetween,
      strings.operators.numberOperatorIsNotBetween,
      strings.operators.dateOperatorIsBetween,
      strings.operators.dateOperatorIsNotBetween
    ].indexOf(operator) > -1) {
    return true;
  }
  return false;
}
function isBlankOperator(props, operator) {
  const { strings } = props;
  if (operator &&
    [
      strings.operators.stringOperatorIsBlank,
      strings.operators.stringOperatorIsNotBlank,
      strings.operators.numberOperatorIsBlank,
      strings.operators.numberOperatorIsNotBlank,
      strings.operators.dateOperatorIsBlank,
      strings.operators.dateOperatorIsNotBlank
    ].indexOf(operator) > -1) {
    return true;
  }
  return false;
}
function isEmptyOperator(props, operator) {
  const { strings } = props;
  if (operator &&
    [strings.operators.stringOperatorIsEmpty, strings.operators.stringOperatorIsNotEmpty].indexOf(operator) > -1) {
    return true;
  }
  return false;
}
function isListOperator(props, operator) {
  const { strings } = props;
  if (operator &&
    [
      strings.operators.stringOperatorIncludes,
      strings.operators.stringOperatorExcludes,
      strings.operators.numberOperatorIncludes,
      strings.operators.numberOperatorExcludes
    ].indexOf(operator) > -1) {
    return true;
  }
  return false;
}
function isIncludesOperator(props, operator) {
  const { strings } = props;
  if (operator &&
    [strings.operators.stringOperatorIncludes, strings.operators.numberOperatorIncludes].indexOf(operator) > -1) {
    return true;
  }
  return false;
}
function isExcludesOperator(props, operator) {
  const { strings } = props;
  if (operator &&
    [strings.operators.stringOperatorExcludes, strings.operators.numberOperatorExcludes].indexOf(operator) > -1) {
    return true;
  }
  return false;
}
function isInTheLastOperator(props, operator) {
  const { strings } = props;
  if (operator &&
    [strings.operators.dateOperatorInTheLast, strings.operators.dateOperatorNotInTheLast].indexOf(operator) > -1) {
    return true;
  }
  return false;
}
function getIncludesOperator(props, filterField) {
  const { strings } = props;
  switch (filterField.simpleFieldType) {
    case "string":
    case "domain":
      return strings.operators.stringOperatorIncludes;
    case "number":
    case "oid":
    case "guid":
      return strings.operators.numberOperatorIncludes;
    default:
      return strings.operators.stringOperatorIncludes;
  }
}
function getExcludesOperator(props, filterField) {
  const { strings } = props;
  switch (filterField.simpleFieldType) {
    case "string":
      return strings.operators.stringOperatorExcludes;
    case "number":
    case "oid":
    case "guid":
      return strings.operators.numberOperatorExcludes;
    //case "date":
    //case "date-only":
    //  return strings.operators.dateOperatorExcludes;
    default:
      return strings.operators.stringOperatorExcludes;
  }
}
function getOperator$1(props, oldFilterField, newFilterField, oldOperator) {
  if (oldFilterField.simpleFieldType !== newFilterField.simpleFieldType) {
    if (isIncludesOperator(props, oldOperator) && newFilterField.simpleFieldType !== simpleFieldTypes.DATE) {
      return getIncludesOperator(props, newFilterField);
    }
    else if (isExcludesOperator(props, oldOperator)) {
      return getExcludesOperator(props, newFilterField);
    }
    else {
      return getDefaultOperator(props, newFilterField);
    }
  }
  return oldOperator;
}

//import * as number from "dojo/number";
//import * as locale from "dojo/date/locale";
const dayInMS = 24 * 60 * 60 * 1000 - 1000;
function createWhereClause(props) {
  let whereClause = "";
  if (!props.expressions || !props.expressions.length) {
    return null;
  }
  let join = "";
  let successfulExpressions = 0;
  for (let i = 0; i < props.expressions.length; i++) {
    const expr = props.expressions[i];
    const str = createExpressionWhereClause(expr, props);
    if (str.length) {
      if (successfulExpressions === 0) {
        whereClause = str;
      }
      else if (successfulExpressions === 1) {
        join = ` ${props.logicalOperatorForExpressions === logicalOperators.OR ? "OR" : "AND"} `;
        whereClause = `(${whereClause})${join}(${str})`;
      }
      else {
        whereClause += `${join}(${str})`;
      }
      successfulExpressions++;
    }
  }
  return whereClause.length ? whereClause : null;
}
function createExpressionWhereClause(expression, props) {
  let exprWhereClause = "";
  if (expression.conditions.length === 1) {
    exprWhereClause = createConditionWhereClause(expression.conditions[0], props);
  }
  else {
    let join = "";
    for (let i = 0; i < expression.conditions.length; i++) {
      const cond = expression.conditions[i];
      const condWhereClause = createConditionWhereClause(cond, props);
      if (condWhereClause.length) {
        exprWhereClause += join + condWhereClause;
        join = ` ${expression.logicalOperatorForConditions === logicalOperators.OR ? "OR" : "AND"} `;
      }
    }
  }
  return exprWhereClause;
}
function createConditionWhereClause(condition, props) {
  const { strings } = props;
  const fieldName = condition.fieldName;
  const operator = condition.operator;
  let value = condition.value;
  let value2 = condition.value2;
  let values = condition.values || [];
  const unit = condition.unit;
  const fieldObject = getFieldInfo(fieldName, props);
  if (!fieldObject) {
    return "";
  }
  if (isBetweenOperator(props, operator) && !isDefined(value2)) {
    return "";
  }
  else if (isListOperator(props, operator) && !values.length) {
    return "";
  }
  else if (isInTheLastOperator(props, operator) && !isDefined(value)) {
    return "";
  }
  else if (!isDefined(value) &&
    !values.length &&
    !isBlankOperator(props, operator) &&
    !isEmptyOperator(props, operator)) {
    return "";
  }
  /* if (isListOperator(operator) && fieldObject.simpleFieldType === simpleFieldTypes.DATE) {
    // max one value; we can't support IN
    value = values?.[0];
  } */
  let whereClause = "";
  if (fieldObject.simpleFieldType === simpleFieldTypes.STRING ||
    fieldObject.simpleFieldType === simpleFieldTypes.GUID) {
    let prefix = "";
    if (isDefined(value) && props.isHosted) {
      if (containsNonLatinCharacter(value)) {
        prefix = "N";
      }
    }
    // e.g. coded value domains
    const isNumber = isNumberType(fieldObject);
    const str = value === null || value === void 0 ? void 0 : value.toString().replace(/\'/g, "''");
    switch (condition.operator) {
      case strings.operators.stringOperatorIs: {
        const pStr = `${prefix}'${str}'`;
        whereClause = `${fieldName} = ${isNumber ? value : pStr}`;
        break;
      }
      case strings.operators.stringOperatorIsNot: {
        const pStr = `${prefix}'${str}'`;
        whereClause = `${fieldName} <> ${isNumber ? value : pStr}`;
        break;
      }
      case strings.operators.stringOperatorStartsWith:
        whereClause = `${fieldName} LIKE ${prefix}'${str}%'`;
        break;
      case strings.operators.stringOperatorEndsWith:
        whereClause = `${fieldName} LIKE ${prefix}'%${str}'`;
        break;
      case strings.operators.stringOperatorContains:
        whereClause = `${fieldName} LIKE ${prefix}'%${str}%'`;
        break;
      case strings.operators.stringOperatorDoesNotContain:
        whereClause = `${fieldName} NOT LIKE ${prefix}'%${str}%'`;
        break;
      case strings.operators.stringOperatorIncludes: {
        whereClause = `${fieldName} IN (${values
          .map((value) => isNumber
          ? value
          : `${containsNonLatinCharacter(value) ? "N" : ""}'${value === null || value === void 0 ? void 0 : value.toString().replace(/\'/g, "''")}'`)
          .toString()})`;
        break;
      }
      case strings.operators.stringOperatorExcludes: {
        whereClause = `${fieldName} NOT IN (${values
          .map((value) => isNumber
          ? value
          : `${containsNonLatinCharacter(value) ? "N" : ""}'${value === null || value === void 0 ? void 0 : value.toString().replace(/\'/g, "''")}'`)
          .toString()})`;
        break;
      }
      case strings.operators.stringOperatorIsBlank:
        whereClause = `${fieldName} IS NULL`;
        break;
      case strings.operators.stringOperatorIsNotBlank:
        whereClause = `${fieldName} IS NOT NULL`;
        break;
      case strings.operators.stringOperatorIsEmpty:
        whereClause = `${fieldName} = ''`;
        break;
      case strings.operators.stringOperatorIsNotEmpty:
        //whereClause = `${fieldName} <> '' OR ${fieldName} IS NULL`;
        whereClause = `${fieldName} <> ''`; // not returning NULL values
        break;
    }
  }
  else if (fieldObject.simpleFieldType === simpleFieldTypes.NUMBER ||
    fieldObject.simpleFieldType === simpleFieldTypes.OID) {
    switch (operator) {
      case strings.operators.numberOperatorIs:
        whereClause = `${fieldName} = ${value}`;
        break;
      case strings.operators.numberOperatorIsNot:
        whereClause = `${fieldName} <> ${value}`;
        break;
      case strings.operators.numberOperatorIsAtLeast:
        whereClause = `${fieldName} >= ${value}`;
        break;
      case strings.operators.numberOperatorIsLessThan:
        whereClause = `${fieldName} < ${value}`;
        break;
      case strings.operators.numberOperatorIsAtMost:
        whereClause = `${fieldName} <= ${value}`;
        break;
      case strings.operators.numberOperatorIsGreaterThan:
        whereClause = `${fieldName} > ${value}`;
        break;
      case strings.operators.numberOperatorIsBetween:
        whereClause = `${fieldName} BETWEEN ${value} AND ${value2}`;
        break;
      case strings.operators.numberOperatorIsNotBetween:
        whereClause = `${fieldName} NOT BETWEEN ${value} AND ${value2}`;
        break;
      case strings.operators.numberOperatorIncludes:
        whereClause = `${fieldName} IN (${values.toString()})`;
        break;
      case strings.operators.numberOperatorExcludes:
        whereClause = `${fieldName} NOT IN (${values.toString()})`;
        break;
      case strings.operators.numberOperatorIsBlank:
        whereClause = `${fieldName} IS NULL`;
        break;
      case strings.operators.numberOperatorIsNotBlank:
        whereClause = `${fieldName} IS NOT NULL`;
        break;
    }
  }
  else if (fieldObject.simpleFieldType === simpleFieldTypes.DATE_ONLY) {
    // date
    // NOTE: client side filter effect only supports sql92 and needs the date in the query
    // therfore we disable data fields for services without standardizedQuery support
    const datestmp = !props.supportsStandardizedQuery ? "" : "DATE ";
    if (typeof value === "number") {
      const date = new Date(value);
      value = `${date.getFullYear()}-${date.getMonth() < 9 ? "0" : ""}${date.getMonth() + 1}-${date.getDate() < 10 ? "0" : ""}${date.getDate()}`;
    }
    if (isDefined(value2) && typeof value2 === "number") {
      const date = new Date(value2);
      value2 = `${date.getFullYear()}-${date.getMonth() < 9 ? "0" : ""}${date.getMonth() + 1}-${date.getDate() < 10 ? "0" : ""}${date.getDate()}`;
    }
    switch (operator) {
      case strings.operators.dateOperatorIsOn:
      case strings.operators.numberOperatorIncludes:
        whereClause = `${fieldName} = ${datestmp}'${value}'`;
        break;
      case strings.operators.dateOperatorIsNotOn:
      case strings.operators.numberOperatorExcludes:
        whereClause = `${fieldName} <> ${datestmp}'${value}'`;
        break;
      case strings.operators.dateOperatorIsBefore:
        whereClause = `${fieldName} < ${datestmp}'${value}'`;
        break;
      case strings.operators.dateOperatorIsAfter:
        whereClause = `${fieldName} > ${datestmp}'${value}'`;
        break;
      case strings.operators.dateOperatorIsBetween:
        whereClause = `${fieldName} BETWEEN ${datestmp}'${value}' AND ${datestmp}'${value2}'`;
        break;
      case strings.operators.dateOperatorIsNotBetween:
        whereClause = `${fieldName} NOT BETWEEN ${datestmp}'${value}' AND ${datestmp}'${value2}'`;
        break;
      /* case strings.operators.numberOperatorIncludes:
      case strings.operators.numberOperatorExcludes:
        let dateValuesString = "";
        let comma = "";
        dateValues.forEach((dateValue: string) => {
          dateValuesString += `${comma}${datestmp}'${dateValue}'`;
          comma = ",";
        });
        if (operator === strings.operators.numberOperatorIncludes) {
          whereClause = `${fieldName} IN (${dateValuesString})`;
        } else {
          whereClause = `${fieldName} NOT IN (${dateValuesString})`;
        }
        break; */
      case strings.operators.dateOperatorIsBlank:
        whereClause = `${fieldName} IS NULL`;
        break;
      case strings.operators.dateOperatorIsNotBlank:
        whereClause = `${fieldName} IS NOT NULL`;
        break;
    }
  }
  else {
    // date
    // NOTE: client side filter effect only supports sql92 and needs the timestamp in the query
    // therfore we disable data fields for services without standardizedQuery support
    let dateValue = getDateObject(value);
    let dateValue2 = getDateObject(value2);
    /* const dateValues =
      values &&
      values.map((value: string | number | Date) => {
        return formatDate(getDateObject(value));
      }); */
    const tmstmp = !props.supportsStandardizedQuery ? "" : "timestamp ";
    const dateStr = formatDate(dateValue);
    const datePlusOneStr = formatDate(addDay(dateValue));
    const date2PlusOneStr = formatDate(addDay(dateValue2));
    switch (operator) {
      case strings.operators.dateOperatorIsOn:
        whereClause = `${fieldName} BETWEEN ${tmstmp}'${dateStr}' AND ${tmstmp}'${datePlusOneStr}'`;
        break;
      case strings.operators.dateOperatorIsNotOn:
        whereClause = `${fieldName} NOT BETWEEN ${tmstmp}'${dateStr}' AND ${tmstmp}'${datePlusOneStr}'`;
        break;
      case strings.operators.dateOperatorIsBefore:
        whereClause = `${fieldName} < ${tmstmp}'${dateStr}'`;
        break;
      case strings.operators.dateOperatorIsAfter:
        whereClause = `${fieldName} > ${tmstmp}'${datePlusOneStr}'`;
        break;
      case strings.operators.dateOperatorInTheLast:
        whereClause = `${fieldName} BETWEEN ${createInTheLastQueryPart(props, value, unit)}`;
        break;
      case strings.operators.dateOperatorNotInTheLast:
        whereClause = `${fieldName} NOT BETWEEN ${createInTheLastQueryPart(props, value, unit)}`;
        break;
      case strings.operators.dateOperatorIsBetween:
        whereClause = `${fieldName} BETWEEN ${tmstmp}'${dateStr}' AND ${tmstmp}'${date2PlusOneStr}'`;
        break;
      case strings.operators.dateOperatorIsNotBetween:
        whereClause = `${fieldName} NOT BETWEEN ${tmstmp}'${dateStr}' AND ${tmstmp}'${date2PlusOneStr}'`;
        break;
      /* case strings.operators.dateOperatorIncludes:
      case strings.operators.dateOperatorExcludes:
        let dateValuesString = "";
        let comma = "";
        dateValues.forEach((dateValue: string) => {
          dateValuesString += `${comma}${tmstmp}'${dateValue}'`;
          comma = ",";
        });
        if (operator === strings.operators.dateOperatorIncludes) {
          whereClause = `${fieldName} IN (${dateValuesString})`;
        } else {
          whereClause = `${fieldName} NOT IN (${dateValuesString})`;
        }
        break; */
      case strings.operators.dateOperatorIsBlank:
        whereClause = `${fieldName} IS NULL`;
        break;
      case strings.operators.dateOperatorIsNotBlank:
        whereClause = `${fieldName} IS NOT NULL`;
        break;
    }
  }
  return whereClause;
}
function getDateObject(value) {
  if (typeof value === "number") {
    // value is a UTC timestamp; returns a date object in local time
    return new Date(value);
  }
  else if (typeof value === "string") {
    // from date picker...
    // e.g. "7/7/2010 12:00:00 AM" returned by generateRenderer
    // in DE value is "02.03.12" for March second; new Date(value) then returns Feb 3rd
    //        value = new Date(value);
    return parseFriendlyDate(value);
  }
  else if (value) {
    // Date object; in local time
    return value;
  }
}
function formatDate(date) {
  // service needs UTC time, but the user looks at local time in the UI
  // date is in local time
  // returns the string in UTC time
  // e.g. 2017-07-07 09:05:19
  if (!date) {
    return "";
  }
  const yearStr = `${date.getUTCFullYear()}`;
  let monthStr = `${date.getUTCMonth() + 1}`;
  if (monthStr.length === 1) {
    monthStr = `0${monthStr}`;
  }
  let dateStr = `${date.getUTCDate()}`;
  if (dateStr.length === 1) {
    dateStr = `0${dateStr}`;
  }
  let hoursStr = `${date.getUTCHours()}`;
  if (hoursStr.length === 1) {
    hoursStr = `0${hoursStr}`;
  }
  let minStr = `${date.getUTCMinutes()}`;
  if (minStr.length === 1) {
    minStr = `0${minStr}`;
  }
  let secStr = `${date.getSeconds()}`;
  if (secStr.length === 1) {
    secStr = `0${secStr}`;
  }
  return `${yearStr}-${monthStr}-${dateStr} ${hoursStr}:${minStr}:${secStr}`;
}
function createInTheLastQueryPart(props, value, unit) {
  if (props.supportedSqlParserVersion) {
    let days = 0;
    if (unit === "year") {
      // not accurate ...
      days = value * 365;
      return `CURRENT_TIMESTAMP - INTERVAL '${days}' DAY AND CURRENT_TIMESTAMP`;
    }
    else if (unit === "month") {
      // not accurate ...
      days = value * 30;
      return `CURRENT_TIMESTAMP - INTERVAL '${days}' DAY AND CURRENT_TIMESTAMP`;
    }
    else if (unit === "week") {
      days = value * 7;
      return `CURRENT_TIMESTAMP - INTERVAL '${days}' DAY AND CURRENT_TIMESTAMP`;
    }
    else if (unit === "day") {
      days = value;
      return `CURRENT_TIMESTAMP - INTERVAL '${days}' DAY AND CURRENT_TIMESTAMP`;
    }
    else if (unit === "hour") {
      return `CURRENT_TIMESTAMP - INTERVAL '${value}' HOUR AND CURRENT_TIMESTAMP`;
    }
    else {
      // minutes
      return `CURRENT_TIMESTAMP - INTERVAL '${value}' MINUTE AND CURRENT_TIMESTAMP`;
    }
  }
  else {
    let days = 0;
    if (unit === "year") {
      // not accurate ...
      days = value * 365;
    }
    else if (unit === "month") {
      // not accurate ...
      days = value * 30;
    }
    else if (unit === "week") {
      days = value * 7;
    }
    else if (unit === "day") {
      days = value;
    }
    else if (unit === "hour") {
      days = value / 24;
    }
    else {
      // minute
      days = value / (24 * 60);
    }
    return `CURRENT_TIMESTAMP - ${days} AND CURRENT_TIMESTAMP`;
  }
}
function parseFriendlyDate(value) {
  // en: 3/2/15 de: 02.03.15 - for march second
  /* return locale.parse(value, {
    formatLength: "short",
    selector: "date"
  }); */
  return new Date(value);
}
function parseDate(strValue) {
  // strValue is in UTC time, but the user looks at local time in the UI
  // we know strValue looks like this 'yyyy-MM-dd HH:mm:ss' (e.g. '2013-03-01 00:00:00')
  /*
  var date = new Date();
  date.setUTCFullYear(Number(strValue.substring(0, 4)));
  date.setUTCMonth(parseInt(strValue.substring(5, 7)) - 1);
  date.setUTCDate(Number(strValue.substring(8, 10)));
  date.setUTCHours(Number(strValue.substring(11, 13)));
  date.setUTCMinutes(Number(strValue.substring(14, 16)));
  date.setSeconds(Number(strValue.substring(17, 19)));
  return date;
  */
  let date = new Date(strValue);
  let utcDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
  //console.log("parseDate", strValue, " - ", utcDate);
  return utcDate;
}
function addDay(date) {
  if (date) {
    return new Date(date.getTime() + dayInMS);
  }
}
function subtractDay(date) {
  return new Date(date.getTime() - dayInMS);
}
function containsNonLatinCharacter(value) {
  if (typeof value === "number") {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    if (value.charCodeAt(i) > 255) {
      return true;
    }
  }
  return false;
}

//import * as WhereClause from "esri/core/sql/WhereClause";
//const dayInMS: number = 24 * 60 * 60 * 1000 - 1000; // 1 sec less than 1 day
async function parseWhereClause(whereClause, props) {
  const { layer } = props;
  // does not call reject()
  if (!whereClause || !whereClause.length) {
    /* const defaultField = getDefaultField(state);
    state.expressions = [
      {
        conditions: [
          {
            fieldName: defaultField.layerField.name,
            operator: getDefaultOperator(defaultField),
            value: null
          }
        ]
      }
    ];
    state.expressions = fixUIDs(state.expressions); */
    return true;
  }
  else {
    const [esriSQL] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/core/sql"]);
    // ImageryLayer has fieldsIndex too, it's not documented yet. Casting as any for now.
    return esriSQL.parseWhereClause(whereClause, layer.fieldsIndex).then((clause /* WhereClause */) => {
      if (!clause.isStandardized) {
        // uses some non standard functions. invalid
        return false;
      }
      props.expressions = [
        {
          conditions: []
        }
      ];
      const success = parseClause(clause.parseTree, props);
      props.expressions = fixUIDs(props.expressions);
      /*
        console.log(
          "SQLParser:",
          success,
          whereClause,
          clause,
          props.logicalOperatorForExpressions,
          props.expressions
        );
      */
      return success;
    }, (error) => {
      console.error("SQLParser - error:", error);
      return false;
    });
  }
}
function parseClause(parseTree, props) {
  if (!props.expressions) {
    return false;
  }
  if (isCondition(parseTree)) {
    return parseBinaryExpr(parseTree, props.expressions[0].conditions, props);
  }
  else {
    props.logicalOperatorForExpressions = getLogicalOperator(parseTree);
    return parseBinaryExpr(parseTree, props.expressions[0], props);
  }
}
function parseBinaryExpr(obj, stateObj, props) {
  var _a;
  const { strings } = props;
  // left, operator, right, type
  if (isCondition(obj)) {
    // stateObj is list of conditions
    if (obj.left.type === "column-reference") {
      const fieldObject = getFieldInfo(obj.left.column, props);
      const operator = fieldObject ? getOperator(props, obj.operator, fieldObject, obj.right) : undefined;
      if (fieldObject && operator) {
        let condition;
        if (obj.right.type === "null") {
          // IS NULL / IS NOT NULL
          condition = {
            fieldName: fieldObject.layerField.name,
            operator: operator
          };
        }
        else if (obj.right.type === "column-reference") {
          // we no longer support field to field filters
          // -> error
          return false;
        }
        else if (obj.right.type === "expression-list" && isListOperator(props, operator)) {
          // IN, NOT IN
          condition = {
            fieldName: fieldObject.layerField.name,
            operator,
            values: obj.right.value.map((val) => val.value)
          };
        }
        else if (obj.right.type === "expression-list" && isInTheLastOperator(props, operator)) {
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - <days> AND CURRENT_TIMESTAMP";
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <days> DAY AND CURRENT_TIMESTAMP";
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <hours> HOUR AND CURRENT_TIMESTAMP";
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <minutes> MINUTE AND CURRENT_TIMESTAMP";
          const result = parseInTheLast(obj);
          if (!result) {
            return false;
          }
          condition = {
            fieldName: fieldObject.layerField.name,
            operator,
            value: result.value,
            unit: result.unit
          };
        }
        else if (obj.right.type === "expression-list" && isBetweenOperator(props, operator)) {
          // BETWEEN, NOT BETWEEN
          if (isDateType(fieldObject)) {
            // value: "2000-09-14 06:26:36"
            const date1 = parseDate(obj.right.value[0].value);
            const date2 = parseDate(obj.right.value[1].value);
            const date2Sub = subtractDay(date2);
            if (Math.abs(date2Sub.getTime() - date1.getTime()) < 1000) {
              // within 1 day
              condition = {
                fieldName: fieldObject.layerField.name,
                operator: operator === strings.operators.dateOperatorIsBetween
                  ? strings.operators.dateOperatorIsOn
                  : strings.operators.dateOperatorIsNotOn,
                value: date1.getTime()
              };
            }
            else {
              condition = {
                fieldName: fieldObject.layerField.name,
                operator,
                value: date1.getTime(),
                value2: date2.getTime()
              };
            }
          }
          else if (isDateOnlyType(fieldObject)) {
            // value: "2000-09-14"
            const date1 = parseDate(obj.right.value[0].value);
            const date2 = parseDate(obj.right.value[1].value);
            const offset = date1.getTimezoneOffset() * 60000;
            condition = {
              fieldName: fieldObject.layerField.name,
              operator,
              // the parser already substracts the offset to local time
              value: date1.getTime() + 2 * offset,
              value2: date2.getTime() + 2 * offset
            };
          }
          else {
            condition = {
              fieldName: fieldObject.layerField.name,
              operator,
              value: obj.right.value[0].value,
              value2: obj.right.value[1].value
            };
          }
        }
        else if (obj.right.type === "timestamp") {
          condition = {
            fieldName: fieldObject.layerField.name,
            operator,
            value: parseDate(obj.right.value).getTime()
          };
        }
        else if (obj.right.type === "date") {
          if (fieldObject.simpleFieldType === simpleFieldTypes.DATE_ONLY) {
            // convert date string to UNIX timestamp (without timestamp offset shift)
            const date = parseDate(obj.right.value);
            const offset = date.getTimezoneOffset() * 60000;
            condition = {
              fieldName: fieldObject.layerField.name,
              operator,
              // the parser already substracts the offset to local time
              value: date.getTime() + 2 * offset
            };
          }
          else {
            condition = {
              fieldName: fieldObject.layerField.name,
              operator,
              value: parseDate(obj.right.value).getTime()
            };
          }
        }
        else {
          // type: "string" | "number" |...
          condition = {
            fieldName: fieldObject.layerField.name,
            operator,
            value: obj.right.value
          };
        }
        stateObj.push(condition);
      }
      else {
        // field or operator not found
        // -> error
        return false;
      }
      return true;
    }
    else {
      return false;
    }
  }
  else {
    // stateObj is expression
    props.expressions = props.expressions || [];
    let success;
    if (isCondition(obj.left) && isCondition(obj.right)) {
      stateObj.logicalOperatorForConditions = getLogicalOperator(obj);
      success = parseBinaryExpr(obj.left, stateObj.conditions, props);
      success = success && parseBinaryExpr(obj.right, stateObj.conditions, props);
    }
    else if (isCondition(obj.left)) {
      if (obj.operator === obj.right.operator && isCondition(obj.right.left) && isCondition(obj.right.right)) {
        // same expression
        stateObj.logicalOperatorForConditions = getLogicalOperator(obj);
        success = parseBinaryExpr(obj.left, stateObj.conditions, props);
        success = success && parseBinaryExpr(obj.right, stateObj, props);
      }
      else {
        // start a new expression
        success = parseBinaryExpr(obj.left, stateObj.conditions, props);
        const expression = {
          conditions: []
        };
        props.expressions.push(expression);
        success = success && parseBinaryExpr(obj.right, expression, props);
      }
    }
    else if (isCondition(obj.right)) {
      if (obj.operator === obj.left.operator &&
        isCondition(obj.left.right) &&
        (isCondition(obj.left.left) || obj.left.operator === ((_a = obj.left.left) === null || _a === void 0 ? void 0 : _a.operator))) {
        // same expression
        stateObj.logicalOperatorForConditions = getLogicalOperator(obj);
        success = parseBinaryExpr(obj.left, stateObj, props);
        success = success && parseBinaryExpr(obj.right, stateObj.conditions, props);
      }
      else {
        // start a new expression
        success = parseBinaryExpr(obj.left, stateObj, props);
        const expression = {
          conditions: []
        };
        props.expressions.push(expression);
        success = success && parseBinaryExpr(obj.right, expression.conditions, props);
      }
    }
    else {
      // no 'leaf'
      if (obj.operator === obj.right.operator && obj.operator === obj.left.operator) {
        // same expression
        stateObj.logicalOperatorForConditions = getLogicalOperator(obj);
        success = parseBinaryExpr(obj.left, stateObj, props);
        success = success && parseBinaryExpr(obj.right, stateObj, props);
      }
      else {
        // start new expressions; first one is still empty...
        success = parseBinaryExpr(obj.left, stateObj, props);
        const expression = {
          conditions: []
        };
        props.expressions.push(expression);
        success = success && parseBinaryExpr(obj.right, expression, props);
      }
    }
    return success;
  }
}
function isCondition(obj) {
  if (obj.type === "binary-expression" && (obj.operator === "OR" || obj.operator === "AND")) {
    return false;
  }
  return true;
}
function getLogicalOperator(obj) {
  return obj.operator.toUpperCase() === "OR" ? logicalOperators.OR : logicalOperators.AND;
}
function getOperator(props, operator, fieldObject, objRight) {
  var _a, _b, _c, _d;
  const { strings } = props;
  if (!fieldObject) {
    return "";
  }
  if (fieldObject.simpleFieldType === simpleFieldTypes.STRING) {
    switch (operator) {
      case "=":
        if (objRight.value === "") {
          return strings.operators.stringOperatorIsEmpty;
        }
        else {
          return strings.operators.stringOperatorIs;
        }
      case "<>": {
        if (objRight.value === "") {
          return strings.operators.stringOperatorIsNotEmpty;
        }
        else {
          return strings.operators.stringOperatorIsNot;
        }
      }
      case "LIKE":
        if (objRight.value.startsWith("%") && objRight.value.endsWith("%")) {
          objRight.value = objRight.value.substring(1, objRight.value.length - 1);
          return strings.operators.stringOperatorContains;
        }
        else if (objRight.value.endsWith("%")) {
          objRight.value = objRight.value.substring(0, objRight.value.length - 1);
          return strings.operators.stringOperatorStartsWith;
        }
        else if (objRight.value.startsWith("%")) {
          objRight.value = objRight.value.substring(1);
          return strings.operators.stringOperatorEndsWith;
        }
        else {
          return strings.operators.stringOperatorIs;
        }
      case "NOT LIKE":
        if (objRight.value.startsWith("%") && objRight.value.endsWith("%")) {
          objRight.value = objRight.value.substring(1, objRight.value.length - 1);
        }
        else if (objRight.value.endsWith("%")) {
          objRight.value = objRight.value.substring(0, objRight.value.length - 1);
        }
        else if (objRight.value.startsWith("%")) {
          objRight.value = objRight.value.substring(1);
        }
        return strings.operators.stringOperatorDoesNotContain;
      case "IS":
        if (objRight.type === "null") {
          return strings.operators.stringOperatorIsBlank;
        }
        return strings.operators.stringOperatorIs;
      case "ISNOT":
      case "IS NOT":
        if (objRight.type === "null") {
          return strings.operators.stringOperatorIsNotBlank;
        }
        return strings.operators.stringOperatorIs;
      case "IN":
        return strings.operators.stringOperatorIncludes;
      case "NOT IN":
      case "NOTIN":
        return strings.operators.stringOperatorExcludes;
    }
  }
  else if (fieldObject.simpleFieldType === "number" || fieldObject.simpleFieldType === "oid") {
    switch (operator) {
      case "=":
        return strings.operators.numberOperatorIs;
      case "<>":
        return strings.operators.numberOperatorIsNot;
      case ">=":
        return strings.operators.numberOperatorIsAtLeast;
      case "<":
        return strings.operators.numberOperatorIsLessThan;
      case "<=":
        return strings.operators.numberOperatorIsAtMost;
      case ">":
        return strings.operators.numberOperatorIsGreaterThan;
      case "BETWEEN":
        return strings.operators.numberOperatorIsBetween;
      case "NOT BETWEEN":
      case "NOTBETWEEN":
        return strings.operators.numberOperatorIsNotBetween;
      case "IS":
        if (objRight.type === "null") {
          return strings.operators.numberOperatorIsBlank;
        }
        return strings.operators.numberOperatorIs;
      case "ISNOT":
      case "IS NOT":
        if (objRight.type === "null") {
          return strings.operators.numberOperatorIsNotBlank;
        }
        return strings.operators.numberOperatorIs;
      case "IN":
        return strings.operators.numberOperatorIncludes;
      case "NOT IN":
      case "NOTIN":
        return strings.operators.numberOperatorExcludes;
    }
  }
  else {
    // date
    switch (operator) {
      case "=":
        // we don't really create this where clause
        return strings.operators.dateOperatorIsOn;
      case "<>":
        return strings.operators.dateOperatorIsNotOn;
      case "<":
        return strings.operators.dateOperatorIsBefore;
      case ">":
        return strings.operators.dateOperatorIsAfter;
      case "BETWEEN":
        if (((_b = (_a = objRight.value[0]) === null || _a === void 0 ? void 0 : _a.left) === null || _b === void 0 ? void 0 : _b.type) === "current-time") {
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - <days> AND CURRENT_TIMESTAMP";
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <days> DAY AND CURRENT_TIMESTAMP";
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <hours> HOUR AND CURRENT_TIMESTAMP";
          // whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <minutes> MINUTE AND CURRENT_TIMESTAMP";
          return strings.operators.dateOperatorInTheLast;
        }
        else {
          return strings.operators.dateOperatorIsBetween;
        }
      case "NOT BETWEEN":
      case "NOTBETWEEN":
        if (((_d = (_c = objRight.value[0]) === null || _c === void 0 ? void 0 : _c.left) === null || _d === void 0 ? void 0 : _d.type) === "current-time") {
          // whereClause = "<fieldName> NOT BETWEEN CURRENT_TIMESTAMP - <days> AND CURRENT_TIMESTAMP";
          return strings.operators.dateOperatorNotInTheLast;
        }
        else {
          return strings.operators.dateOperatorIsNotBetween;
        }
      case "IS":
        if (objRight.type === "null") {
          return strings.operators.dateOperatorIsBlank;
        } // else not supported
      case "ISNOT":
      case "IS NOT":
        if (objRight.type === "null") {
          return strings.operators.dateOperatorIsNotBlank;
        } // else not supported
    }
  }
  return "";
}
function parseInTheLast(obj) {
  const right = obj.right.value[0].right;
  let count = right.value;
  if (right.type === "interval") {
    //whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <days> DAY AND CURRENT_TIMESTAMP";
    //whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <hours> HOUR AND CURRENT_TIMESTAMP";
    //whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - INTERVAL <minutes> MINUTE AND CURRENT_TIMESTAMP";
    count = right.value.type === "string" ? parseFloat(right.value.value) : right.value.value;
    if (right.qualifier.period === "day") {
      if (count % 365 === 0) {
        return { value: count / 365, unit: "year" };
      }
      else if (count % 30 === 0) {
        return { value: count / 30, unit: "month" };
      }
      else if (count % 7 === 0) {
        return { value: count / 7, unit: "week" };
      }
      else if (count % 1 === 0) {
        return { value: count, unit: "day" };
      }
    }
    else if (right.qualifier.period === "hour") {
      return { value: count, unit: "hour" };
    }
    else if (right.qualifier.period === "minute") {
      return { value: count, unit: "minute" };
    }
  }
  else if (!isNaN(count)) {
    //whereClause = "<fieldName> BETWEEN CURRENT_TIMESTAMP - <days> AND CURRENT_TIMESTAMP"
    if (count % 365 === 0) {
      return { value: count / 365, unit: "year" };
    }
    else if (count % 30 === 0) {
      return { value: count / 30, unit: "month" };
    }
    else if (count % 7 === 0) {
      return { value: count / 7, unit: "week" };
    }
    else if (count % 1 === 0) {
      return { value: count, unit: "day" };
    }
    else {
      const minutes = Math.round(count * 24 * 60);
      if (minutes % 60 === 0) {
        return { value: Math.round(count * 24), unit: "hour" };
      }
      else {
        return { value: minutes, unit: "minute" };
      }
    }
  }
  else {
    return null;
  }
}

const arcgisFilterCss = ".sc-arcgis-filter-h{display:flex;flex:1 1 auto;overflow:hidden}.fab-padding.sc-arcgis-filter{padding-bottom:1rem}.hook.sc-arcgis-filter{width:100%;height:1px}.remove-filter.sc-arcgis-filter{margin-bottom:5px;background-color:white;padding-left:15px}.match-expression-dropdown.sc-arcgis-filter{width:100%}.match-expression-msg.sc-arcgis-filter{padding:12px;background-color:white}.match-type.sc-arcgis-filter{display:flex;justify-content:center;margin:6px 0}.arcgis--rtl.sc-arcgis-filter .remove-filter.sc-arcgis-filter{padding-left:0;padding-right:15px}.no-space.sc-arcgis-filter{--calcite-label-margin-bottom:0}";

const ArcgisFilter = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisFilterWhereChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterWhereChange", 7);
    this.arcgisFilterSave = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterSave", 7);
    this.arcgisFilterCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterCancel", 7);
    this.arcgisFilterDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterDismissedChange", 7);
    this.arcgisFilterDone = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterDone", 7);
    this.arcgisFilterPanelBackClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterPanelBackClick", 7);
    this.closeFilterPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeFilterPopovers", 7);
    this.arcgisFilterExpressionChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterExpressionChanged", 7);
    this.layerViewWaitHandler = null;
    this.layerHasFeatureEffect = false;
    this.properClose = false;
    this.applyFilter = () => {
      const { props, mode } = this;
      const { layerView, layer, labelClassIdx, labelClass, originalLayer } = props;
      this.closeFilterPopovers.emit();
      if (isDefined(labelClassIdx) || isDefined(labelClass)) {
        // we passed the where clause when it changed
        this.arcgisFilterSave.emit();
      }
      else if (mode === "layer-view") {
        const whereClause = createWhereClause(props);
        // keep effect on layerView to avoid flickering
        this.arcgisFilterSave.emit(whereClause);
      }
      else if (mode === "effects") ;
      else if (layer) {
        const whereClause = createWhereClause(props);
        (originalLayer || layer).definitionExpression = whereClause;
        //console.log("definitionExpression:", whereClause);
        if (this.isAllowedFeatureEffect()) {
          layer.featureEffect = null;
        }
        else {
          if (layerView && "filter" in layerView) {
            layerView.filter = null;
          }
        }
        createIndexes(props);
        this.properClose = true;
        this.arcgisFilterSave.emit();
        // switched to definitionExpression from effect/layerView.filter
        this.componentStateInvalid = true;
      }
    };
    this.cancelFilter = () => {
      this.revertFilter();
      this.closeFilterPopovers.emit();
      this.properClose = true;
      this.arcgisFilterCancel.emit();
    };
    this.closeFilter = () => {
      // save on close
      this.applyFilter();
      this.closeFilterPopovers.emit();
      this.properClose = true;
      this.arcgisFilterDismissedChange.emit();
    };
    this.onAddExpression = () => {
      const { props } = this;
      const { expressions } = props;
      const defaultField = getDefaultField(props);
      if (!defaultField) {
        // not ready yet
        return;
      }
      const defaultOperator = getDefaultOperator(props, defaultField);
      const defaultValues = getDefaultValues(props, defaultField, defaultOperator);
      const newExpression = {
        conditions: [
          Object.assign(Object.assign({ fieldName: defaultField.layerField.name, operator: defaultOperator }, defaultValues), { hasFocus: true })
        ]
      };
      props.expressions = expressions
        ? fixUIDs([
          ...expressions.map((expression) => {
            return Object.assign(Object.assign({}, expression), { conditions: expression.conditions.map((cond) => {
                return Object.assign(Object.assign({}, cond), { hasFocus: false });
              }) });
          }),
          newExpression
        ])
        : fixUIDs([newExpression]);
      if (isDefined(defaultValues.value)) {
        this.arcgisFilterExpressionChanged.emit({ type: "replace", expression: newExpression });
      }
      this.reRender = !this.reRender;
    };
    this.onMatchSelect = (event) => {
      const { props } = this;
      const select = event.target;
      props.logicalOperatorForExpressions = select.selectedOption.value;
      this.reRender = !this.reRender;
      this.applyFilterToLayer();
    };
    this.onRemoveFilter = () => {
      const { props } = this;
      props.invalidFilter = false;
      props.expressions = undefined;
      this.reRender = !this.reRender;
      this.applyFilterToLayer();
    };
    this.focusByClass = () => {
      // set focus back for keyboard users
      const node = this.hostElement.querySelector("arcgis-filter .autofocus");
      if (node) {
        if (node.nodeName.startsWith("CALCITE-")) {
          node.setFocus();
        }
        else {
          node.focus();
        }
      }
    };
    this.view = undefined;
    this.layer = undefined;
    this.labelClassIdx = undefined;
    this.labelClass = undefined;
    this.mode = undefined;
    this.viewFilter = undefined;
    this.featureReduction = undefined;
    this.hideLayerTitle = false;
    this.panelHeading = undefined;
    this.tipHeading = undefined;
    this.tipMsg = undefined;
    this.invalidHeading = undefined;
    this.invalidMsg = undefined;
    this.newButtonLabel = undefined;
    this.clearText = undefined;
    this.defaultFieldName = undefined;
    this.defaultOperator = undefined;
    this.defaultExpression = false;
    this.hideButtons = false;
    this.panelMaxHeight = undefined;
    this.dismissible = false;
    this.props = undefined;
    this.reRender = false;
    this.componentStateInvalid = false;
  }
  arcgisFilterExpressionChangeHandler(event) {
    var _a;
    const { props } = this;
    const { expressions } = props;
    const { detail } = event;
    if (detail.type === "copy") {
      // replace + copy expression
      const expr = event.detail.expression;
      props.expressions = props.expressions.map((expression) => (expression.uid === expr.uid ? expr : expression) //{ ...expression }
      );
      let copyExpression;
      props.expressions = expressions.map((expression) => {
        return Object.assign(Object.assign({}, expression), { conditions: expression.conditions.map((cond) => {
            return Object.assign(Object.assign({}, cond), { hasFocus: false });
          }) });
      });
      props.expressions.forEach((expr) => {
        if (expr.uid === detail.uid) {
          copyExpression = this.esriLang.clone(Object.assign({}, expr));
          copyExpression.conditions[0].hasFocus = true;
        }
      });
      props.expressions = fixUIDs([...props.expressions, copyExpression]);
      this.reRender = !this.reRender;
    }
    else if (detail.type === "delete") {
      // delete expression
      let removedIdx = 0;
      expressions.forEach((expression, idx) => {
        if (expression.uid === detail.uid) {
          removedIdx = idx;
        }
        else {
          expression.conditions.forEach((cond) => (cond.hasFocus = false));
        }
      });
      props.expressions = expressions.filter((expression) => expression.uid !== detail.uid);
      if ((_a = props.expressions) === null || _a === void 0 ? void 0 : _a.length) {
        props.expressions[Math.max(0, removedIdx - 1)].conditions[0].hasFocus = true;
        props.expressions = fixUIDs([...props.expressions]);
        // wait until rendering is done
        setTimeout(() => this.focusByClass(), 500);
      }
      else {
        // wait until rendering is done
        setTimeout(() => this.fabNode.setFocus(), 500);
      }
      this.reRender = !this.reRender;
    }
    else {
      // type="replace"
      // replace expression
      const replaceExpr = event.detail.expression;
      props.expressions = props.expressions.map((expression) => expression.uid === replaceExpr.uid ? Object.assign({}, replaceExpr) : expression);
    }
    this.applyFilterToLayer();
  }
  disableFilterPanelHandler(event) {
    this.panelNode.disabled = event.detail;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    this.panelNode.setFocus();
  }
  async done() {
    if (!this.componentStateInvalid) {
      // save on done
      this.applyFilter();
      this.closeFilterPopovers.emit();
      this.properClose = true;
      this.arcgisFilterDone.emit();
    }
  }
  async closePopovers() {
    this.closeFilterPopovers.emit();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [strings, currentLanguage, currentLanguageIntl] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    // build FilterProps
    this.props = {
      expressions: undefined,
      logicalOperatorForExpressions: "and",
      fields: [],
      operators: undefined,
      invalidFilter: false,
      stringFieldsCount: 0,
      dateFieldsCount: 0,
      numberFieldsCount: 0,
      isHosted: false,
      supportsStandardizedQuery: false,
      supportedSqlParserVersion: false,
      layer: {},
      view: this.view,
      labelClassIdx: this.labelClassIdx,
      labelClass: this.labelClass,
      featureReduction: this.featureReduction,
      strings,
      locale: currentLanguage,
      localeIntl: currentLanguageIntl,
      inputDefinitionExpression: null,
      backgroundTheme: "light",
      lastWhere: undefined,
      defaultFieldName: this.defaultFieldName,
      defaultOperator: this.defaultOperator
    };
    const [reactiveUtils, colorUtils, ImageryLayer, FeatureLayer, FeatureEffect, esriLang] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
      "esri/core/reactiveUtils",
      "esri/views/support/colorUtils",
      "esri/layers/ImageryLayer",
      "esri/layers/FeatureLayer",
      "esri/layers/support/FeatureEffect",
      "esri/core/lang"
    ]);
    this.reactiveUtils = reactiveUtils;
    this.colorUtils = colorUtils;
    this.ImageryLayer = ImageryLayer;
    this.FeatureLayer = FeatureLayer;
    this.FeatureEffect = FeatureEffect;
    this.esriLang = esriLang;
    const { view, layer } = this;
    let { props } = this;
    const propLayer = layer; // issue with type prop
    if (propLayer.declaredClass === "esri.layers.support.Sublayer") {
      // need to create a FeatureLayer
      const mapImageSublayer = propLayer;
      //delete this.layer;
      view && (await this.reactiveUtils.whenOnce(() => !view.updating));
      const sublayerFL = await mapImageSublayer.createFeatureLayer();
      await sublayerFL.load();
      this.props = Object.assign(Object.assign({}, props), { layer: sublayerFL, mapImageSublayer });
    }
    else if (propLayer.type === "imagery" || propLayer.type === "subtype-group") {
      this.props = Object.assign(Object.assign({}, props), { layer: propLayer });
    }
    else if (!view || (propLayer.type === "feature" && propLayer.isTable)) {
      // we need a layer without a filter for statistics, histogram, and uniqueValues
      let nonFilteredLayer;
      nonFilteredLayer = new this.FeatureLayer({
        url: propLayer.url,
        layerId: propLayer.layerId,
        popupTemplate: propLayer.popupTemplate
      });
      await nonFilteredLayer.load();
      this.props = Object.assign(Object.assign({}, props), { layer: nonFilteredLayer, originalLayer: propLayer });
    }
    else {
      this.props = Object.assign(Object.assign({}, props), { layer: propLayer });
    }
    const { labelClassIdx, labelClass, featureReduction } = this.props;
    const labelingInfo = featureReduction
      ? layer.featureReduction.labelingInfo
      : layer.labelingInfo;
    if ((isDefined(labelClassIdx) && (!labelingInfo || !labelingInfo[labelClassIdx])) ||
      (isDefined(labelClass) && (!labelingInfo || !labelingInfo.length))) {
      // error
      console.log("can't find labelClass");
      return;
    }
    this.processLayer();
  }
  componentDidLoad() {
    var _a;
    const { props, defaultExpression } = this;
    if (!((_a = props.expressions) === null || _a === void 0 ? void 0 : _a.length) && defaultExpression) {
      this.onAddExpression();
    }
    requestAnimationFrame(() => this.panelNode.setFocus());
  }
  disconnectedCallback() {
    if (this.properClose) {
      // user left the panel via Save, Cancel, or Close
      // just close popovers
      this.closeFilterPopovers.emit();
    }
    else {
      // user left the panel without clicking on Save, Cancel, or Close
      // e.g. also panel back button
      this.applyFilter();
      if (this.mode === "layer-view") {
        createIndexes(this.props);
      }
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, hideLayerTitle, mode, panelHeading, componentStateInvalid, dismissible, hostElement, panelMaxHeight } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(hostElement) === "rtl";
    const { layer, mapImageSublayer, invalidFilter, strings } = props;
    const title = mapImageSublayer ? mapImageSublayer.title : layer.title;
    if (componentStateInvalid) {
      // we removed the effect and created a definitionExpression
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null)));
    }
    if (!layer) {
      return this.renderLoading();
    }
    if (invalidFilter) {
      return this.renderInvalidFilter();
    }
    if (hostElement.parentElement.tagName === "CALCITE-FLOW" ||
      hostElement.parentElement.parentElement.tagName === "CALCITE-FLOW") {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { id: "filter-panel", loading: false, heading: panelHeading || strings.title, description: !hideLayerTitle ? title : undefined, class: {
          [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: rtl
        }, style: panelMaxHeight && { maxHeight: panelMaxHeight }, closable: dismissible, ref: (node) => (this.panelNode = node), onCalciteFlowItemBack: () => {
          if (mode === "layer-view") {
            const whereClause = createWhereClause(props);
            this.arcgisFilterPanelBackClick.emit(whereClause);
            // create indexes on disconnect call
          }
          else {
            this.arcgisFilterPanelBackClick.emit();
          }
        }, onCalciteFlowItemClose: () => this.closeFilter() }, this.renderContent())));
    }
    else {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { id: "filter-panel", loading: false, heading: panelHeading || strings.title, description: !hideLayerTitle ? title : undefined, class: {
          [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: rtl
        }, style: panelMaxHeight && { maxHeight: panelMaxHeight }, closable: dismissible, ref: (node) => (this.panelNode = node), onCalcitePanelClose: () => this.closeFilter() }, this.renderContent())));
    }
  }
  renderContent() {
    const { props, mode, hideButtons } = this;
    const { labelClassIdx, labelClass } = props;
    const isLabelFilter = isDefined(labelClassIdx) || isDefined(labelClass);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, !isLabelFilter && mode !== "layer-view" && !hideButtons ? this.renderSaveButton() : null, !isLabelFilter && mode !== "layer-view" && !hideButtons ? this.renderCancelButton() : null, this.renderPopoverHook(), this.renderRemoveFilter(), this.renderMatchExpressionMsg(), this.renderExpressions(), this.renderAddExpression(), this.renderTip()));
  }
  renderSaveButton() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.applyFilter, appearance: "solid", width: "half", label: strings.save }, strings.save));
  }
  renderCancelButton() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.cancelFilter, appearance: "outline-fill", width: "half", label: strings.cancel }, strings.cancel));
  }
  renderPopoverHook() {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "arcgis-filter-hook", class: CSS$3.hook });
  }
  renderRemoveFilter() {
    const { props, clearText } = this;
    const { strings, expressions } = props;
    if (!expressions || !expressions.length) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.removeFilter }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "no-space", layout: "inline-space-between", scale: "m" }, clearText || strings.removeFilter, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: clearText || strings.removeFilter, scale: "m", onClick: this.onRemoveFilter }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "trash" })))));
  }
  renderLoading() {
    const { props, hideLayerTitle, panelHeading } = this;
    const { layer, mapImageSublayer, strings } = props;
    const title = mapImageSublayer ? mapImageSublayer.title : layer.title;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { id: "filter-panel", heading: panelHeading || strings.title, description: !hideLayerTitle ? title : undefined, loading: true, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: rtl
      } })));
  }
  renderInvalidFilter() {
    const { props, hideLayerTitle, dismissible, mode, hideButtons, panelHeading } = this;
    const { layer, mapImageSublayer, labelClassIdx, labelClass, strings } = props;
    const title = mapImageSublayer ? mapImageSublayer.title : layer.title;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement) === "rtl";
    const isLabelFilter = isDefined(labelClassIdx) || isDefined(labelClass);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { id: "filter-panel", heading: panelHeading || strings.title, description: !hideLayerTitle ? title : undefined, loading: false, closable: dismissible, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: rtl
      }, ref: this.focusByClass, onCalcitePanelClose: () => this.closeFilter() }, !isLabelFilter && mode !== "layer-view" && !hideButtons ? this.renderSaveButton() : null, !isLabelFilter && mode !== "layer-view" && !hideButtons
      ? this.renderCancelButton()
      : null, this.renderInvalidFilterMsg(), this.renderCreateNewFilter())));
  }
  renderInvalidFilterMsg() {
    // helpId = 120001736 for LearnMore
    const { invalidHeading, invalidMsg, props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { heading: invalidHeading || strings.errors.problemDisplayingFilter, closeDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, invalidMsg || strings.errors.problemDisplayingFilterMsg)));
  }
  renderCreateNewFilter() {
    const { props, newButtonLabel, hideButtons } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { class: {
        autofocus: true,
        "fab-padding": hideButtons
      }, slot: "fab", appearance: "outline-fill", kind: "neutral", scale: "m", textEnabled: true, label: newButtonLabel || strings.createNewFilter, text: newButtonLabel || strings.createNewFilter, onClick: this.onRemoveFilter }));
  }
  renderMatchExpressionMsg() {
    const { props } = this;
    const { expressions, logicalOperatorForExpressions, strings } = props;
    if (!expressions || !expressions.length) {
      return null;
    }
    const isAnd = logicalOperatorForExpressions === logicalOperators.AND;
    return expressions.length === 1 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.matchExpressionMsg }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "m", class: "no-space" }, strings.oneExpressionMsg))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.matchExpressionMsg }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "no-space", scale: "m" }, strings.manyExpressionsMsg, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", scale: "m", label: strings.accessibility.matchExpressions, class: CSS$3.matchExpressionDropdown, onCalciteSelectChange: this.onMatchSelect }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: logicalOperators.AND, label: strings.matchAllExpressions, selected: isAnd }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: logicalOperators.OR, label: strings.matchAtLeastOneExpression, selected: !isAnd })))));
  }
  renderExpressions() {
    const { props } = this;
    const { expressions } = props;
    if (!expressions || !expressions.length) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, expressions.map((expressionProps, idx) => this.renderExpression(expressionProps, idx))));
  }
  renderExpression(expressionProps, expressionIndex) {
    const { props } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderLogicalOperatorExpression(expressionIndex), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-filter-expression", Object.assign({ props: props, ref: this.focusByClass }, expressionProps))));
  }
  renderLogicalOperatorExpression(expressionIndex) {
    const { props } = this;
    const { logicalOperatorForExpressions, strings } = props;
    if (expressionIndex === 0) {
      return null;
    }
    else {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.logicalOperator }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, logicalOperatorForExpressions === logicalOperators.OR ? strings.or : strings.and)));
    }
  }
  renderAddExpression() {
    const { props, hideButtons } = this;
    const { expressions, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { class: {
        autofocus: !expressions || !expressions.length,
        "fab-padding": hideButtons
      }, slot: "fab", appearance: "outline-fill", kind: "neutral", scale: "m", icon: "plus", textEnabled: true, text: strings.addExpression, onClick: this.onAddExpression, ref: (node) => (this.fabNode = node) }));
  }
  renderTip() {
    const { props, mode, tipHeading, tipMsg } = this;
    const { mapImageSublayer, expressions, labelClassIdx, labelClass, strings } = props;
    if (expressions === null || expressions === void 0 ? void 0 : expressions.length) {
      return null;
    }
    const forLabels = isDefined(labelClassIdx) || isDefined(labelClass);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { heading: tipHeading || strings.tips.emptyMsgTitle, closeDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, tipMsg ||
      (forLabels
        ? strings.tips.emptyMsgLabels
        : mapImageSublayer || mode === "layer-view"
          ? strings.tips.emptyMsgMS
          : strings.tips.emptyMsg))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  async processLayer() {
    var _a;
    const { props, mode, viewFilter, hideButtons } = this;
    const { layer, mapImageSublayer, originalLayer, view, labelClassIdx, labelClass, featureReduction } = props;
    const labelingInfo = layer.type === "feature" &&
      (featureReduction
        ? layer.featureReduction.labelingInfo
        : layer.labelingInfo);
    if (view &&
      !mapImageSublayer &&
      layer.type !== "imagery" &&
      layer.type !== "subtype-group" &&
      !(layer.type === "feature" && layer.isTable)) {
      props.layerView = (await view.whenLayerView(layer));
    }
    checkConfig(props);
    await buildFilterFields(props);
    buildOperatorsList(props);
    props.backgroundTheme = view && (await this.colorUtils.getBackgroundColorTheme(view));
    this.layerHasFeatureEffect = layer.featureEffect;
    if (isDefined(labelClassIdx) && labelingInfo[labelClassIdx].where) {
      props.inputDefinitionExpression = labelingInfo[labelClassIdx].where;
      const success = await parseWhereClause(props.inputDefinitionExpression, props);
      props.invalidFilter = !success;
      this.reRender = !this.reRender;
    }
    else if (isDefined(labelClass) && labelClass.where) {
      props.inputDefinitionExpression = labelClass.where;
      props.lastWhere = props.inputDefinitionExpression;
      const success = await parseWhereClause(props.inputDefinitionExpression, this.props);
      props.invalidFilter = !success;
      this.reRender = !this.reRender;
    }
    else if (mode === "layer-view") {
      // keep definitionExpression on FL, the new filter is an add-on
      if (viewFilter) {
        const success = await parseWhereClause(viewFilter, props);
        props.invalidFilter = !success;
        if (success) {
          this.applyFilterToLayer(true);
        }
        this.reRender = !this.reRender;
      }
    }
    else if (mode === "effects") {
      props.invalidFilter = false;
      if (layer.featureEffect) {
        props.inputDefinitionExpression = (_a = layer.featureEffect.filter) === null || _a === void 0 ? void 0 : _a.where;
        props.lastWhere = props.inputDefinitionExpression;
        const success = await parseWhereClause(props.inputDefinitionExpression, props);
        props.invalidFilter = !success;
        this.reRender = !this.reRender;
      }
    }
    else if (!isDefined(labelClassIdx) &&
      !isDefined(labelClass) &&
      (isDefined(layer.definitionExpression) || isDefined(originalLayer === null || originalLayer === void 0 ? void 0 : originalLayer.definitionExpression))) {
      props.inputDefinitionExpression = (originalLayer || layer).definitionExpression;
      // apply FeatureFilter to layer
      const success = await parseWhereClause(props.inputDefinitionExpression, props);
      props.invalidFilter = !success;
      if (success) {
        this.applyFilterToLayer(true);
      }
      this.reRender = !this.reRender;
      if (view &&
        layer.type !== "imagery" &&
        layer.type !== "subtype-group" &&
        !(layer.type === "feature" && layer.isTable) &&
        !(mode === "effects" && this.layerHasFeatureEffect)) {
        // remove definitionExpression from layer
        // we use effect instead
        layer.definitionExpression = null;
      }
    }
    else if (hideButtons) {
      props.inputDefinitionExpression = layer.definitionExpression;
      props.lastWhere = props.inputDefinitionExpression;
      const success = await parseWhereClause(props.inputDefinitionExpression, this.props);
      props.invalidFilter = !success;
      this.reRender = !this.reRender;
    }
    else {
      props.invalidFilter = false;
    }
  }
  revertFilter() {
    var _a, _b, _c, _d;
    const { props, mode, viewFilter } = this;
    const { layer, layerView, featureReduction, labelClassIdx, labelClass, inputDefinitionExpression, mapImageSublayer, originalLayer, backgroundTheme } = props;
    const index = this.getLabelClassIndex();
    // apply original expression
    if (layer.type !== "imagery" && layer.type !== "subtype-group" && isDefined(labelClassIdx)) {
      const labelingInfo = featureReduction
        ? layer.featureReduction.labelingInfo
        : layer.labelingInfo;
      labelingInfo[labelClassIdx].where = inputDefinitionExpression;
      // refresh layer
      if (featureReduction) {
        layer.featureReduction = this.esriLang.clone(layer.featureReduction);
        props.labelClass = layer.featureReduction.labelingInfo[index];
      }
      else {
        layer.labelingInfo = layer.labelingInfo;
      }
      if (mapImageSublayer) {
        mapImageSublayer.labelingInfo = layer.labelingInfo;
      }
    }
    else if (layer.type !== "imagery" &&
      layer.type !== "subtype-group" &&
      isDefined(labelClass)) {
      labelClass.where = inputDefinitionExpression;
      // refresh layer
      if (featureReduction) {
        layer.featureReduction = this.esriLang.clone(layer.featureReduction);
        props.labelClass = layer.featureReduction.labelingInfo[index];
      }
      else {
        layer.labelingInfo = layer.labelingInfo;
      }
      if (mapImageSublayer) {
        mapImageSublayer.labelingInfo = layer.labelingInfo;
      }
    }
    else if (mode === "layer-view") {
      // set back to passed in viewFilter
      if (layer.type === "feature") {
        if (viewFilter) {
          if (!isEffectEmpty(layer.featureEffect)) {
            layer.featureEffect.filter.where = viewFilter;
          }
          else {
            const brightness = backgroundTheme === "light" ? 100 : 65;
            layer.featureEffect = new this.FeatureEffect({
              filter: {
                where: viewFilter
              },
              excludedEffect: `grayscale(100%) opacity(30%) brightness(${brightness}%)`
            });
          }
        }
        else {
          if ((_b = (_a = layer.featureEffect) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.where) {
            layer.featureEffect.filter.where = null;
            if (isEffectEmpty(layer.featureEffect)) {
              layer.featureEffect = null;
            }
          }
          else {
            layer.featureEffect = null;
          }
        }
      }
    }
    else if (mode === "effects") ;
    else if (layer) {
      if (mapImageSublayer) {
        mapImageSublayer.definitionExpression = inputDefinitionExpression;
      }
      else {
        (originalLayer || layer).definitionExpression = inputDefinitionExpression;
      }
      if (this.isAllowedFeatureEffect()) {
        const anyLayer = layer;
        if ((_d = (_c = anyLayer.featureEffect) === null || _c === void 0 ? void 0 : _c.filter) === null || _d === void 0 ? void 0 : _d.where) {
          anyLayer.featureEffect.filter.where = null;
          if (isEffectEmpty(anyLayer.featureEffect)) {
            anyLayer.featureEffect = null;
          }
        }
      }
      else {
        if (layerView && "filter" in layerView) {
          layerView.filter = null;
        }
      }
      // switched to definitionExpression from effect/layerView.filter
      this.componentStateInvalid = true;
    }
  }
  applyFilterToLayer(isInit) {
    var _a, _b;
    const { props, layerViewWaitHandler, hideButtons } = this;
    const { backgroundTheme, labelClass, layer, labelClassIdx, view, layerView, mapImageSublayer, originalLayer, featureReduction, lastWhere } = props;
    const where = createWhereClause(props) || undefined;
    if (!isInit && where !== lastWhere) {
      this.arcgisFilterWhereChange.emit(where);
    }
    props.lastWhere = where;
    if (layer.type === "feature" && isDefined(labelClassIdx)) {
      const index = this.getLabelClassIndex();
      const labelingInfo = featureReduction
        ? layer.featureReduction.labelingInfo
        : layer.labelingInfo;
      labelingInfo[labelClassIdx].where = where;
      // refresh layer
      if (featureReduction) {
        layer.featureReduction = this.esriLang.clone(layer.featureReduction);
        props.labelClass = layer.featureReduction.labelingInfo[index];
      }
      else {
        layer.labelingInfo = layer.labelingInfo;
      }
      if (mapImageSublayer) {
        mapImageSublayer.labelingInfo = layer.labelingInfo;
      }
      //console.log("apply", where, layer.labelingInfo);
      return;
    }
    else if (isDefined(labelClass)) {
      // we don't update the layer at all
      return;
    }
    else if (layer.type === "imagery" || layer.type === "subtype-group") {
      layer.definitionExpression = where;
      return;
    }
    else if (hideButtons) {
      // we don't update the layer at all
      return;
    }
    if (mapImageSublayer) {
      mapImageSublayer.definitionExpression = where;
      return;
    }
    else if (!view || (layer.type === "feature" && layer.isTable)) {
      originalLayer.definitionExpression = createWhereClause(props);
      return;
    }
    // use effect
    if (layerViewWaitHandler) {
      clearTimeout(layerViewWaitHandler);
      this.layerViewWaitHandler = undefined;
    }
    if (!layerView) {
      // we need to wait and try later
      this.layerViewWaitHandler = setTimeout(() => {
        this.applyFilterToLayer();
      }, 500);
      return;
    }
    //console.log("FeatureEffect.filter:", whereClause);
    if (where === null || where === void 0 ? void 0 : where.length) {
      if (this.isAllowedFeatureEffect()) {
        if (!isEffectEmpty(layer.featureEffect)) {
          layer.featureEffect.filter = layer.featureEffect.filter || {};
          layer.featureEffect.filter.where = where;
        }
        else {
          const brightness = backgroundTheme === "light" ? 100 : 65;
          layer.featureEffect = new this.FeatureEffect({
            filter: {
              where
            },
            excludedEffect: `grayscale(100%) opacity(30%) brightness(${brightness}%)`
          });
        }
      }
      else if ("filter" in layerView) {
        layerView.filter = {
          where
        };
      }
    }
    else {
      if (this.isAllowedFeatureEffect()) {
        if ((_b = (_a = layer.featureEffect) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.where) {
          layer.featureEffect.filter.where = null;
          if (isEffectEmpty(layer.featureEffect)) {
            layer.featureEffect = null;
          }
        }
      }
      else if ("filter" in layerView) {
        layerView.filter = null;
      }
    }
  }
  isAllowedFeatureEffect() {
    // Ideally we want to filter out features via layer.featureEffect
    // so that filtered out features show dimmed.
    // But if this is not possible use layerView.filter
    // so filtered out features are hidden.
    // Layer.definitionExpression affects the server queries
    // so only apply this when leaving the component
    const { props, layerHasFeatureEffect, mode } = this;
    const { layer } = props;
    return (["feature", "geojson", "ogc-feature", "wfs", "csv", "stream"].indexOf(layer.type) > -1 &&
      !layer.featureReduction &&
      mode !== "effects" &&
      (!layerHasFeatureEffect || mode === "layer-view"));
  }
  getLabelClassIndex() {
    const { props } = this;
    const { layer, labelClass, featureReduction } = props;
    let index = -1;
    const labelingInfo = layer.type === "feature" &&
      (featureReduction
        ? layer.featureReduction.labelingInfo
        : layer.labelingInfo);
    if (labelClass) {
      labelingInfo.forEach((lClass, idx) => {
        if (JSON.stringify(lClass.toJSON()) === JSON.stringify(labelClass.toJSON())) {
          index = idx;
        }
      });
    }
    return index;
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFilter.style = arcgisFilterCss;

const CSS$2 = {
  condition: "filter-condition",
  operatorDropdown: "operator-dropdown",
  inputPlusUnique: "input-plus-unique",
  input: "input",
  blankButton: "blank-button",
  selectUniqueButton: "select-unique-button",
  betweenValuesInput: "between-values-input",
  selectValues: "select-values",
  pickList: "pick-list",
  uniqueValuesContentListMsg: "unique-values-content-list-msg",
  inTheLast: "in-the-last",
  inTheLastCount: "in-the-last-count",
  inTheLastUnit: "in-the-last-unit",
  datePicker: "date-picker",
  histogramContent: "histogram-content",
  histogramContentSlim: "histogram-content-slim",
  smallLoader: "small-loader"
};

const arcgisFilterConditionCss = ".filter-condition.sc-arcgis-filter-condition{padding:0 6px}.operator-dropdown.sc-arcgis-filter-condition{width:100%;margin:5px 0}.input-plus-unique.sc-arcgis-filter-condition{display:flex;flex-direction:row;width:100%}.input.sc-arcgis-filter-condition{width:100%}.blank-button.sc-arcgis-filter-condition{height:22px;border:var(--calcite-ui-border-input) 1px solid}.blank-button.active.sc-arcgis-filter-condition{cursor:pointer}.blank-button.inactive.sc-arcgis-filter-condition:focus{outline:none}.select-unique-button.sc-arcgis-filter-condition{height:32px;border-top:var(--calcite-ui-border-input) 1px solid;border-bottom:var(--calcite-ui-border-input) 1px solid;border-right:var(--calcite-ui-border-input) 1px solid}.arcgis--rtl.sc-arcgis-filter-condition .select-unique-button.sc-arcgis-filter-condition{border-right:none;border-left:var(--calcite-ui-border-input) 1px solid}.between-values-input.first.sc-arcgis-filter-condition{margin-bottom:5px}.select-values.sc-arcgis-filter-condition{margin-bottom:4px}.pick-list.sc-arcgis-filter-condition{max-height:200px;overflow-y:auto}.unique-values-content-list-msg.sc-arcgis-filter-condition{font-size:90%;margin-top:5px;margin-bottom:5px}.in-the-last.sc-arcgis-filter-condition{display:flex}.in-the-last-count.sc-arcgis-filter-condition{width:50%}.in-the-last-unit.sc-arcgis-filter-condition{width:50%}.date-picker.sc-arcgis-filter-condition{width:100%}.date-picker.first.sc-arcgis-filter-condition{margin-bottom:5px}.histogram-content.sc-arcgis-filter-condition{height:120px;margin-top:5px}.histogram-content-slim.sc-arcgis-filter-condition{height:40px;margin-top:5px}.small-loader.sc-arcgis-filter-condition{margin-left:calc((100% - 16px) / 2);margin-top:10px}html[dir=rtl].sc-arcgis-filter-condition .small-loader.sc-arcgis-filter-condition{margin-left:auto;margin-right:8px}";

const ArcgisFilterCondition = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisFilterConditionChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterConditionChanged", 7);
    this.disableFilterPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disableFilterPanel", 7);
    this.arcgisFilterUniqueValuesReturned = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterUniqueValuesReturned", 7);
    this.histogramSlider = undefined;
    this.afterCreateSliderDiv = (element) => {
      const { fieldName, props, histogramSlider } = this;
      if (!element) {
        // not sure why that happens
        return;
      }
      setTimeout(() => {
        if (!histogramSlider) {
          // should not happen
          return;
        }
        const divNode = document.createElement("div");
        element.appendChild(divNode);
        if (!histogramSlider.container) {
          histogramSlider.container = divNode;
        }
        else {
          // need to recreate the slider
          const filterField = getFieldInfo(fieldName, props);
          if (!filterField) {
            return;
          }
          const { bins, average, min, max, values, precision, rangeType } = histogramSlider;
          const config = {
            container: divNode,
            bins,
            average,
            //standardDeviation,
            min,
            max,
            values,
            precision,
            rangeType
          };
          if ([simpleFieldTypes.DATE, simpleFieldTypes.DATE_ONLY].indexOf(filterField.simpleFieldType) >
            -1) {
            config.hasTimeData = true;
            this.addDateFormatFunctions(config);
          }
          //console.log("re-create HistogramRangeSlider", config);
          histogramSlider.destroy();
          this.histogramSlider = new this.HistogramRangeSlider(config);
          this.createSliderChangeEvents(filterField);
        }
      }, 1);
    };
    this.onFieldSelect = () => {
      this.hasFocus = true;
      this.openFieldPickList();
    };
    this.onOperatorSelect = (event) => {
      var _a, _b, _c, _d;
      const { props, fieldName, operator, value, value2 } = this;
      const select = event.target;
      const newOperator = select.selectedOption.value;
      const filterField = getFieldInfo(fieldName, props);
      const oldInTheLast = isInTheLastOperator(props, operator);
      const newInTheLast = isInTheLastOperator(props, newOperator);
      const oneInTheLast = oldInTheLast || newInTheLast;
      const bothInTheLast = oldInTheLast && newInTheLast;
      const oldBetween = isBetweenOperator(props, operator);
      const newBetween = isBetweenOperator(props, newOperator);
      const bothBetween = oldBetween && newBetween;
      //const oldInExclude = isIncludesOperator(props, operator) || isExcludesOperator(props, operator);
      //const newInExclude =
      //  isIncludesOperator(props, newOperator) || isExcludesOperator(props, newOperator);
      //const bothInExclude = oldInExclude && newInExclude;
      const old = {
        value,
        value2,
        operator
      };
      this.value =
        oneInTheLast && !bothInTheLast
          ? null
          : filterField.statistics && !isDefined(value)
            ? filterField.statistics.avg
            : value;
      this.value2 = newBetween
        ? value2 !== null && value2 !== void 0 ? value2 : (isIntegerType(filterField)
          ? Math.round((_a = filterField.statistics) === null || _a === void 0 ? void 0 : _a.max)
          : (_b = filterField.statistics) === null || _b === void 0 ? void 0 : _b.max)
        : oneInTheLast || !bothBetween
          ? null
          : value2;
      this.operator = newOperator;
      const defaultValues = this.checkDefaultValues(filterField);
      const updates = {
        value: (_c = this.value) !== null && _c !== void 0 ? _c : defaultValues.value,
        value2: (_d = this.value2) !== null && _d !== void 0 ? _d : (newBetween ? defaultValues.value2 : null),
        operator: this.operator
      };
      // set it back - TODO, need to find a better way after 9.1
      // if I modify local props the component won't re-render with emitChangeEvent()
      this.value = old.value;
      this.value2 = old.value2;
      this.operator = old.operator;
      this.emitChangeEvent(updates);
    };
    this.onValueChangeMaybe = (event) => {
      const { props, operator, value2 } = this;
      const newValue = this.getNewValue(event);
      if (isDefined(newValue) && isBetweenOperator(props, operator) && newValue >= value2) {
        // we assume the user is in the middle of typing
        return;
      }
      this.onValueChange(event, newValue);
    };
    this.onValueChange = (event, newValue) => {
      const { props, fieldName, operator, value, value2 } = this;
      const { view } = props;
      const { timeZone } = view;
      const filterField = getFieldInfo(fieldName, props);
      const node = event === null || event === void 0 ? void 0 : event.target;
      newValue = event ? this.getNewValue(event) : newValue;
      if (!isDefined(newValue)) {
        // we need to have a value
        // fall back to default values
        const defaultValues = getDefaultValues(props, filterField, operator);
        newValue = defaultValues.value;
        if (node) {
          if (filterField.simpleFieldType === simpleFieldTypes.DATE) {
            node.value = utcToDatePicker(newValue, timeZone);
          }
          else {
            node.value = newValue;
          }
        }
      }
      if (value === newValue) {
        return;
      }
      if (isDefined(newValue) && isBetweenOperator(props, operator) && newValue >= value2) {
        // user finished typing, let's fix the values
        if (node) {
          if (filterField.simpleFieldType === simpleFieldTypes.DATE) {
            newValue = value2 - 1;
            node.value = utcToDatePicker(newValue, timeZone);
          }
          else if (filterField.simpleFieldType === simpleFieldTypes.DATE_ONLY) {
            const prevDay = new Date(new Date(value2).getTime() - 86400000 + new Date().getTimezoneOffset() * 60000);
            newValue = `${prevDay.getFullYear()}-${prevDay.getMonth() < 9 ? "0" : ""}${prevDay.getMonth() + 1}-${prevDay.getDate() < 10 ? "0" : ""}${prevDay.getDate()}`;
            node.value = newValue;
          }
          else {
            newValue = value2 - 1;
            node.value = newValue;
          }
        }
      }
      if ((node === null || node === void 0 ? void 0 : node.tagName) === "CALCITE-INPUT-DATE-PICKER" ||
        ((node === null || node === void 0 ? void 0 : node.tagName) === "CALCITE-INPUT" && (node === null || node === void 0 ? void 0 : node.type) === "number")) {
        this.adjustHistogramMinMax(newValue);
      }
      this.changeValues(newValue, value2);
    };
    this.onValue2ChangeMaybe = (event) => {
      const { props, operator, value } = this;
      const newValue = this.getNewValue(event);
      if (isDefined(newValue) && isBetweenOperator(props, operator) && newValue <= value) {
        // we assume the user is in the middle of typing
        return;
      }
      this.onValue2Change(event, newValue);
    };
    this.onValue2Change = (event, newValue) => {
      const { value, props, fieldName, operator } = this;
      const { view } = props;
      const { timeZone } = view;
      const filterField = getFieldInfo(fieldName, props);
      const node = event.target;
      newValue = newValue !== null && newValue !== void 0 ? newValue : this.getNewValue(event);
      if (!isDefined(newValue)) {
        // we need to have a value
        // fall back to default values
        const defaultValues = getDefaultValues(props, filterField, operator);
        newValue = defaultValues.value2;
        if (filterField.simpleFieldType === simpleFieldTypes.DATE) {
          node.value = utcToDatePicker(newValue, timeZone);
        }
        else {
          node.value = newValue;
        }
      }
      // we're using between operator
      if (newValue <= value) {
        // user finished typing, let's fix the values
        if (filterField.simpleFieldType === simpleFieldTypes.DATE) {
          newValue = value + 1;
          node.value = utcToDatePicker(newValue, timeZone);
        }
        else if (filterField.simpleFieldType === simpleFieldTypes.DATE_ONLY) {
          const nextDay = new Date(new Date(value).getTime() + 86400000 + new Date().getTimezoneOffset() * 60000);
          newValue = `${nextDay.getFullYear()}-${nextDay.getMonth() < 9 ? "0" : ""}${nextDay.getMonth() + 1}-${nextDay.getDate() < 10 ? "0" : ""}${nextDay.getDate()}`;
          node.value = newValue;
        }
        else {
          newValue = value + 1;
          node.value = newValue;
        }
      }
      if (node.tagName === "CALCITE-INPUT-DATE-PICKER" ||
        (node.tagName === "CALCITE-INPUT" && node.type === "number")) {
        this.adjustHistogramMinMax(newValue);
      }
      this.changeValues(value, newValue);
    };
    this.onUnitSelect = (event) => {
      const select = event.target;
      //this.unit = select.selectedOption.value as timeUnits;
      this.emitChangeEvent({ unit: select.selectedOption.value });
    };
    this.onSelectUniqueValue = () => {
      this.onSelectUnique(false);
    };
    this.onSelectUniqueValues = () => {
      const { props, fieldName, operator } = this;
      const filterField = getFieldInfo(fieldName, props);
      const fieldDomains = hasFieldDomains(filterField);
      const listOperator = isListOperator(props, operator);
      const isDomainSingle = fieldDomains && !listOperator;
      this.onSelectUnique(!isDomainSingle);
    };
    this.onDocumentClick = (event) => {
      const target = event.target;
      const isTargetInsidePopover = target.closest(`#arcgis-filter-unique-popover_${this.uid}`);
      if (!isTargetInsidePopover) {
        this.removeUniquePopover();
      }
    };
    this.onRemoveSelectedValue = (value) => {
      const { values, esriLang } = this;
      const idx = values.indexOf(value);
      values.splice(idx, 1);
      //this.values = values.length ? esriLang.clone(values) : undefined;
      this.emitChangeEvent({ values: values.length ? esriLang.clone(values) : null });
    };
    this.afterCreateList = (element) => {
      if (!element) {
        return;
      }
      this.scrollExprIntoView(element);
    };
    this.onHistogramBlockToggle = (event) => {
      if (event.currentTarget.open) {
        this.onHistogramOpen();
      }
      else {
        this.onHistogramClose();
      }
    };
    this.fieldPickListChanges = (event) => {
      var _a, _b;
      event.stopPropagation();
      const selectedField = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) === null || _b === void 0 ? void 0 : _b[0];
      this.removeFieldsPickList();
      if (selectedField) {
        this.afterFieldSelect(selectedField);
      } // else user hit cancel or close
    };
    this.props = undefined;
    this.uid = undefined;
    this.fieldName = undefined;
    this.operator = undefined;
    this.uniqueValuesSortBy = undefined;
    this.value = undefined;
    this.value2 = undefined;
    this.values = undefined;
    this.unit = undefined;
    this.histogramOpen = undefined;
    this.hasFocus = undefined;
    this.invalidValue = undefined;
    this.reRender = false;
  }
  arcgisFilterUniqueValuesReturnedHandler(event) {
    const fieldName = event.detail;
    if (this.fieldName === fieldName) {
      this.checkDefaultValues(getFieldInfo(fieldName, this.props));
      this.reRender = !this.reRender;
    }
  }
  arcgisFilterUniqueListChangedHandler(event) {
    var _a;
    const { detail } = event;
    const uid = detail.uid;
    if (uid === this.uid) {
      const selectedValues = detail.selectedValues;
      if (!detail.multiple) {
        this.uniqueValuesSortBy = detail.sortBy;
        this.onValueChange(null, (selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.length) ? selectedValues[0] : undefined);
        this.removeUniquePopover();
        (_a = this.uniqueActionNode) === null || _a === void 0 ? void 0 : _a.setFocus();
      }
      else {
        this.emitChangeEvent({ values: selectedValues, uniqueValuesSortBy: detail.sortBy });
      }
    }
  }
  arcgisFilterUniqueListSortByChanged(event) {
    const { detail } = event;
    const uid = detail.uid;
    if (uid === this.uid) {
      this.uniqueValuesSortBy = detail.sortBy;
    }
  }
  arcgisFilterUniqueListDoneHandler(event) {
    var _a;
    const { detail } = event;
    if (detail === this.uid) {
      this.removeUniquePopover();
      (_a = this.uniqueActionNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
  }
  calcitePopoverCloseHandler() {
    var _a;
    if (this.uniquePopoverNode) {
      this.removeUniquePopover();
      (_a = this.uniqueActionNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    } // else something else removed the popover
  }
  closeFilterPopoversHandler() {
    this.removeFieldsPickList();
    this.removeUniquePopover();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const defaultField = getDefaultField({
      fields: this.props.fields
    });
    this.fieldName = this.fieldName || defaultField.layerField.name;
    this.operator = this.operator || getDefaultOperator(this.props, defaultField);
    this.hasFocus = !!this.hasFocus;
    const [esriLang, intl, 
    //smartMappingUtils,
    summaryStatistics, histogram, uniqueValues, HistogramRangeSlider] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
      "esri/core/lang",
      "esri/intl",
      //"esri/widgets/smartMapping/support/utils",
      "esri/smartMapping/statistics/summaryStatistics",
      "esri/smartMapping/statistics/histogram",
      "esri/smartMapping/statistics/uniqueValues",
      "esri/widgets/HistogramRangeSlider"
    ]);
    this.esriLang = esriLang;
    this.intl = intl;
    //this.smartMappingUtils = smartMappingUtils;
    this.summaryStatistics = summaryStatistics;
    this.histogram = histogram;
    this.uniqueValues = uniqueValues;
    this.HistogramRangeSlider = HistogramRangeSlider;
    this.onDocumentClickBind = this.onDocumentClick.bind(this);
  }
  componentDidLoad() {
    this.setFocus();
  }
  disconnectedCallback() {
    this.removeFieldsPickList();
    this.removeUniquePopover();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { fieldName, props } = this;
    const filterField = getFieldInfo(fieldName, props);
    /* console.log(
      "** render condition **",
      "uid",
      this.uid,
      "fieldName",
      this.fieldName,
      "operator",
      this.operator,
      "uniqueValuesSortBy",
      this.uniqueValuesSortBy,
      "value",
      this.value,
      "value2",
      this.value2,
      "values",
      this.values,
      "unit",
      this.unit,
      "histogramOpen",
      this.histogramOpen,
      "hasFocus",
      this.hasFocus,
      "histogramStatus",
      filterField.histogramStatus,
      "uniqueValuesStatus",
      filterField.uniqueValuesStatus,
      "reRender",
      this.reRender
    ); */
    if (!filterField || !filterField.simpleFieldType) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null)));
    }
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { dir: dir }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        [CSS$2.condition]: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: dir === "rtl"
      } }, this.renderFieldSelection(), this.renderOperatorSelection(filterField), this.renderValueInput(filterField), this.renderHistogram(filterField))));
  }
  renderFieldSelection() {
    const { hasFocus, fieldName, props } = this;
    const { fields } = props;
    const field = getFieldInfo(fieldName, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", scale: "m", alignment: "icon-end-space-between", disabled: fields.length <= 1, iconEnd: "chevron-down", class: `${hasFocus ? "autofocus" : ""}`, onClick: fields.length > 1 ? this.onFieldSelect : null, ref: (node) => (this.fieldNode = node) }, (field === null || field === void 0 ? void 0 : field.label) || ""));
  }
  renderOperatorSelection(filterField) {
    const { props } = this;
    const { operators, strings } = props;
    // TODO - also check field value type ?
    let type = filterField.simpleFieldType;
    if (!type) {
      return null;
    }
    if (type === simpleFieldTypes.GUID) {
      type = simpleFieldTypes.STRING;
    }
    if (type === simpleFieldTypes.OID) {
      type = simpleFieldTypes.NUMBER;
    }
    if (hasFieldDomains(filterField)) {
      type = simpleFieldTypes.DOMAIN;
    }
    const optionNodes = operators[type].map((operator) => this.renderOperatorOption(operator.name));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", scale: "m", label: strings.accessibility.operator, class: CSS$2.operatorDropdown, onCalciteSelectChange: this.onOperatorSelect }, optionNodes));
  }
  renderOperatorOption(rendererOperator) {
    const { operator } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: rendererOperator, label: rendererOperator, selected: rendererOperator === operator }));
  }
  renderValueInput(filterField) {
    const { props, operator, invalidValue } = this;
    const status = invalidValue ? "invalid" : undefined;
    let contentNode = null;
    if (isBlankOperator(props, operator) || isEmptyOperator(props, operator)) {
      contentNode = null;
    }
    else if (isListOperator(props, operator)) {
      contentNode = this.renderUniqueValues(filterField);
    }
    else if (isInTheLastOperator(props, operator)) {
      contentNode = this.renderInTheLast();
    }
    else if (filterField.simpleFieldType === simpleFieldTypes.STRING ||
      filterField.simpleFieldType === simpleFieldTypes.GUID ||
      hasFieldDomains(filterField)) {
      contentNode = this.renderValueInputString(filterField, { status });
    }
    else if (filterField.simpleFieldType === simpleFieldTypes.NUMBER) {
      contentNode = this.renderValueInputNumber(filterField, { status });
    }
    else if ([simpleFieldTypes.DATE, simpleFieldTypes.DATE_ONLY].indexOf(filterField.simpleFieldType) > -1) {
      contentNode = this.renderValueInputDate(filterField);
    }
    else if (filterField.simpleFieldType === simpleFieldTypes.OID) {
      contentNode = this.renderValueInputOid(filterField, { status });
    }
    return invalidValue ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, contentNode, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-message", { icon: true, status: status }, invalidValue))) : (contentNode);
  }
  renderUniqueButton(supportsUnique, disabled, loading) {
    const { props } = this;
    const { layer, strings } = props;
    if (!supportsUnique || layer.type === "imagery" || layer.type === "subtype-group") {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: CSS$2.selectUniqueButton, disabled: disabled, loading: !!loading, text: strings.chooseFromUnique, scale: "s", icon: "chevron-down", onClick: !disabled ? this.onSelectUniqueValue : null, ref: (node) => {
        if (node) {
          this.uniqueActionNode = node;
        } // else no idea why this happens - TODO (set of 3 + 1 expr)
      } }));
  }
  renderValueInputString(filterField, inputOptions) {
    const { props, value, operator } = this;
    const { strings } = props;
    const uvStatus = filterField.uniqueValuesStatus;
    const uniqueValues = filterField.uniqueValueInfos;
    const supportsUnique = [strings.operators.stringOperatorIs, strings.operators.stringOperatorIsNot].indexOf(operator) > -1;
    const disabledUnique = supportsUnique &&
      (uvStatus === status.FAILED || (uvStatus === status.SUCCESS && !(uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length)));
    const hasDomains = hasFieldDomains(filterField);
    const val = hasDomains ? getDecodedValue(value, filterField) : value;
    const loadingUnique = uvStatus === status.MISSING || uvStatus === status.IN_PROGRESS;
    if (uvStatus === status.MISSING) {
      this.onDisplayUniqueValues(filterField.layerField.name);
    }
    return hasDomains ? (isDefined(val) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-string" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { key: val, appearance: "outline-fill", kind: "neutral", width: "full", scale: "m", alignment: "icon-end-space-between", iconEnd: loadingUnique ? "spinner" : disabledUnique ? undefined : "chevron-down", disabled: disabledUnique, onClick: !disabledUnique ? this.onSelectUniqueValue : undefined, ref: (node) => {
        if (node) {
          this.uniqueActionNode = node;
        } // else no idea why this happens - TODO (set of 3 + 1 expr)
      } }, val ? `${val}` : ``))) : (
    // calcite-button must have text or icon, otherwise width is too small,
    // so use a div instead
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-string", class: CSS$2.inputPlusUnique }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-string-button", class: `${CSS$2.input} ${CSS$2.blankButton} ${uvStatus === status.SUCCESS ? `active` : `inactive`}`, tabIndex: -1, onClick: uvStatus === status.SUCCESS ? this.onSelectUniqueValue : undefined }), this.renderUniqueButton(supportsUnique, disabledUnique, loadingUnique)))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-string", class: CSS$2.inputPlusUnique }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", Object.assign({ type: "text", value: val ? `${val}` : ``, class: CSS$2.input, scale: "m", label: strings.accessibility.value, onCalciteInputInput: this.onValueChange }, inputOptions)), this.renderUniqueButton(supportsUnique, disabledUnique, loadingUnique)));
  }
  renderValueInputNumber(filterField, inputOptions) {
    var _a;
    const { props, value, value2, operator } = this;
    const { strings } = props;
    const isFloat = isFloatType(filterField);
    if ([
      strings.operators.numberOperatorIsBetween,
      strings.operators.numberOperatorIsNotBetween
    ].indexOf(operator) > -1) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", Object.assign({ type: "number", value: isDefined(value) ? `${value}` : ``, scale: "m", step: isFloat ? "any" : 1, label: strings.accessibility.fromValue, onCalciteInputInput: (event) => this.waitOnUser(event, this.onValueChangeMaybe) }, inputOptions)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${CSS$2.betweenValuesInput} first` }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", Object.assign({ type: "number", value: isDefined(value2) ? `${value2}` : ``, scale: "m", step: isFloat ? "any" : 1, class: CSS$2.betweenValuesInput, label: strings.accessibility.toValue, onCalciteInputInput: (event) => this.waitOnUser(event, this.onValue2ChangeMaybe) }, inputOptions))));
    }
    else {
      const uvStatus = filterField.uniqueValuesStatus;
      const uniqueValues = filterField.uniqueValueInfos;
      const supportsUnique = [
        strings.operators.numberOperatorIs,
        strings.operators.numberOperatorIsNot,
        strings.operators.numberOperatorIsAtLeast,
        strings.operators.numberOperatorIsAtMost,
        strings.operators.numberOperatorIsGreaterThan,
        strings.operators.numberOperatorIsLessThan
      ].indexOf(operator) > -1;
      const inputNode = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", Object.assign({ class: CSS$2.input, type: "number", value: isDefined(value) ? `${value}` : ``, scale: "m", step: isFloat ? "any" : 1, label: strings.accessibility.value, onCalciteInputInput: (event) => this.waitOnUser(event, this.onValueChange) }, inputOptions)));
      if (uvStatus === status.FAILED ||
        (uvStatus === status.SUCCESS && !(uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length)) ||
        !supportsUnique) {
        return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-number" }, inputNode);
      }
      else if (uvStatus === status.MISSING || uvStatus === status.IN_PROGRESS) {
        if (uvStatus === status.MISSING) {
          this.onDisplayUniqueValues(filterField.layerField.name);
        }
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-number", class: CSS$2.inputPlusUnique }, inputNode, this.renderUniqueButton(supportsUnique, true, true)));
      }
      else {
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-number", class: CSS$2.inputPlusUnique }, inputNode, this.renderUniqueButton(supportsUnique, !((_a = filterField.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length))));
      }
    }
  }
  renderValueInputDate(filterField) {
    var _a;
    const { props, value, value2, operator } = this;
    const { view, strings } = props;
    const { timeZone } = view;
    const dateString = typeof value === "number" ? utcToDatePicker(value, timeZone) : value;
    if ([strings.operators.dateOperatorIsBetween, strings.operators.dateOperatorIsNotBetween].indexOf(operator) > -1) {
      const dateString2 = typeof value2 === "number" ? utcToDatePicker(value2, timeZone) : value2;
      // not using range option, because there is no equivalent for number fields
      // and 'not in between' might be weird if the between area is highlighted in the calendar
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-date-picker", { class: `${CSS$2.datePicker} first`, scale: "m", value: dateString, overlayPositioning: "fixed", onCalciteInputDatePickerChange: this.onValueChange }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-date-picker", { class: CSS$2.datePicker, scale: "m", value: dateString2, overlayPositioning: "fixed", onCalciteInputDatePickerChange: this.onValue2Change })));
    }
    else {
      const uvStatus = filterField.uniqueValuesStatus;
      const uniqueValues = filterField.uniqueValueInfos;
      const supportsUnique = [
        strings.operators.dateOperatorIsOn,
        strings.operators.dateOperatorIsNotOn,
        strings.operators.dateOperatorIsAfter,
        strings.operators.dateOperatorIsBefore
      ].indexOf(operator) > -1;
      const inputNode = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-date-picker", { class: `${CSS$2.datePicker} ${CSS$2.input}`, scale: "m", value: dateString, overlayPositioning: "fixed", onCalciteInputDatePickerChange: this.onValueChange }));
      if (uvStatus === status.FAILED ||
        (uvStatus === status.SUCCESS && !(uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length)) ||
        !supportsUnique) {
        return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-date" }, inputNode);
      }
      else if (uvStatus === status.MISSING || uvStatus === status.IN_PROGRESS) {
        if (uvStatus === status.MISSING) {
          this.onDisplayUniqueValues(filterField.layerField.name);
        }
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-date", class: CSS$2.inputPlusUnique }, inputNode, this.renderUniqueButton(supportsUnique, true, true)));
      }
      else {
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-date", class: CSS$2.inputPlusUnique }, inputNode, this.renderUniqueButton(supportsUnique, !((_a = filterField.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length))));
      }
    }
  }
  renderValueInputOid(filterField, inputOptions) {
    var _a;
    const { props, value, value2, operator } = this;
    const { strings } = props;
    if (filterField.simpleFieldType === simpleFieldTypes.OID) {
      // we don't allow decimals
      if (isDefined(value) && isDefined(value2)) {
        const roundedVal = Math.round(value);
        const roundedVal2 = Math.round(value2);
        if (roundedVal !== value || roundedVal2 !== value2) {
          this.changeValues(roundedVal, roundedVal2);
        }
      }
      else if (isDefined(value)) {
        const roundedVal = Math.round(value);
        if (roundedVal !== value) {
          this.changeValues(roundedVal, value2);
        }
      }
      else if (isDefined(value2)) {
        const roundedVal = Math.round(value2);
        if (roundedVal !== value2) {
          this.changeValues(value, roundedVal);
        }
      }
    }
    if ([
      strings.operators.numberOperatorIsBetween,
      strings.operators.numberOperatorIsNotBetween
    ].indexOf(operator) > -1) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", Object.assign({ type: "number", value: isDefined(value) ? `${value}` : ``, scale: "m", min: 0, step: 1, label: strings.accessibility.fromValue, onCalciteInputInput: this.onValueChangeMaybe }, inputOptions)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${CSS$2.betweenValuesInput} first` }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", Object.assign({ type: "number", value: isDefined(value2) ? `${value2}` : ``, scale: "m", min: 0, step: 1, class: CSS$2.betweenValuesInput, label: strings.accessibility.toValue, onCalciteInputInput: this.onValue2ChangeMaybe }, inputOptions))));
    }
    else {
      const uvStatus = filterField.uniqueValuesStatus;
      const uniqueValues = filterField.uniqueValueInfos;
      const supportsUnique = [
        strings.operators.numberOperatorIs,
        strings.operators.numberOperatorIsNot,
        strings.operators.numberOperatorIsAtLeast,
        strings.operators.numberOperatorIsAtMost,
        strings.operators.numberOperatorIsGreaterThan,
        strings.operators.numberOperatorIsLessThan
      ].indexOf(operator) > -1;
      const inputNode = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", Object.assign({ class: CSS$2.input, type: "number", value: isDefined(value) ? `${value}` : ``, scale: "m", min: 0, step: 1, label: strings.accessibility.value, onCalciteInputInput: this.onValueChange }, inputOptions)));
      if (uvStatus === status.FAILED ||
        (uvStatus === status.SUCCESS && !(uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length)) ||
        !supportsUnique) {
        return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-oid" }, inputNode);
      }
      else if (uvStatus === status.MISSING || uvStatus === status.IN_PROGRESS) {
        if (uvStatus === status.MISSING) {
          this.onDisplayUniqueValues(filterField.layerField.name);
        }
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-oid", class: CSS$2.inputPlusUnique }, inputNode, this.renderUniqueButton(supportsUnique, true, true)));
      }
      else {
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "value-input-oid", class: CSS$2.inputPlusUnique }, inputNode, this.renderUniqueButton(supportsUnique, !((_a = filterField.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length))));
      }
    }
  }
  renderUniqueValues(filterField) {
    const { props, values, fieldName } = this;
    const { strings } = props;
    const uvStatus = filterField.uniqueValuesStatus;
    const uniqueValues = filterField.uniqueValueInfos;
    if (uvStatus === status.MISSING || uvStatus === status.IN_PROGRESS) {
      if (uvStatus === status.MISSING) {
        this.onDisplayUniqueValues(filterField.layerField.name);
      }
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { class: CSS$2.smallLoader, inline: true, label: "" })));
    }
    else if (uvStatus === status.FAILED) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.uniqueValuesContentListMsg }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", width: "full", scale: "m", alignment: "center", class: CSS$2.selectValues, disabled: true, label: strings.selectValues }, strings.selectValues), strings.errors.errorUniqueValues));
    }
    else {
      const msg1Node = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.uniqueValuesContentListMsg }, !(values === null || values === void 0 ? void 0 : values.length) && (uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length) ? strings.selectOneValue : ""));
      let msg2Node;
      if (!(uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length)) {
        msg2Node = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.uniqueValuesContentListMsg }, strings.errors.noUniqueValues));
      }
      const list = values === null || values === void 0 ? void 0 : values.map((value) => this.renderSelectedUniqueValue(value, filterField));
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, msg1Node, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", width: "full", scale: "m", alignment: "center", class: CSS$2.selectValues, disabled: !(uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length), onClick: (uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.length) > 0 ? this.onSelectUniqueValues : null, ref: (node) => (this.uniqueSelectNode = node), label: strings.selectValues }, strings.selectValues), msg2Node, (values === null || values === void 0 ? void 0 : values.length) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { key: `unique-values-value-list-${fieldName}`, class: CSS$2.pickList, ref: this.afterCreateList }, list)) : null));
    }
  }
  renderSelectedUniqueValue(value, filterField) {
    const { intl, props } = this;
    const { view, strings } = props;
    const { timeZone } = view;
    const val = hasFieldDomains(filterField)
      ? getDecodedValue(value, filterField)
      : isDateType(filterField)
        ? getDateDisplayString(value, timeZone, intl) //intl.formatDate(new Date(value), intl.convertDateFormatToIntlOptions("short-date"))
        : isDateOnlyType(filterField)
          ? intl.formatDateOnly(value, intl.convertDateFormatToIntlOptions("short-date"))
          : isNumberType(filterField)
            ? intl.formatNumber(value)
            : value;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { label: `${val}`, value: `${value}` }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: strings.remove, icon: "x", onClick: this.onRemoveSelectedValue.bind(this, value) })));
  }
  renderInTheLast() {
    const { props, value, unit } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.inTheLast }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", min: 1, step: 1, value: isDefined(value) ? `${value}` : ``, scale: "m", class: CSS$2.inTheLastCount, label: strings.accessibility.value, onCalciteInputInput: this.onValueChange }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", scale: "m", label: strings.accessibility.units, class: CSS$2.inTheLastUnit, onCalciteSelectChange: this.onUnitSelect }, this.renderInTheLastOption(timeUnits.MINUTE, unit === timeUnits.MINUTE), this.renderInTheLastOption(timeUnits.HOUR, unit === timeUnits.HOUR), this.renderInTheLastOption(timeUnits.DAY, unit === timeUnits.DAY), this.renderInTheLastOption(timeUnits.WEEK, unit === timeUnits.WEEK), this.renderInTheLastOption(timeUnits.MONTH, unit === timeUnits.MONTH), this.renderInTheLastOption(timeUnits.YEAR, unit === timeUnits.YEAR))));
  }
  renderInTheLastOption(unit, isSelected) {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: unit, label: strings.units[unit], selected: isSelected }));
  }
  renderHistogram(filterField) {
    const { props, histogramOpen, operator, fieldName } = this;
    const { layer, strings } = props;
    if (layer.type === "imagery" || layer.type === "subtype-group") {
      return null;
    }
    if (!filterField || !filterField.simpleFieldType) {
      return null;
    }
    if (filterField.statisticsStatus === status.FAILED) {
      return null;
    }
    if (!supportsHistogram(fieldName, operator, props)) {
      return null;
    }
    if (histogramOpen === undefined ||
      (histogramOpen && filterField.histogramStatus === status.MISSING)) {
      // open histogram block by default; or get info we need
      this.onHistogramOpen();
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { open: histogramOpen !== false, text: filterField.histogramStatus === status.FAILED ? strings.valueRange : strings.histogram, onCalciteBlockSectionToggle: this.onHistogramBlockToggle }, this.renderHistogramContent(filterField)));
  }
  renderHistogramContent(filterField) {
    const { histogramOpen } = this;
    const fieldName = filterField.layerField.name;
    if (histogramOpen === false) {
      return null;
    }
    if (!filterField.statistics || filterField.histogramStatus === status.IN_PROGRESS) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: `histogram-content-${fieldName}-${filterField.statistics}`, class: filterField.histogram ? CSS$2.histogramContent : CSS$2.histogramContentSlim }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { class: CSS$2.smallLoader, inline: true, label: "" })));
    }
    else {
      const ok = this.prepareSlider(filterField);
      if (ok) {
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: `histogram-content-${fieldName}-${filterField.statistics}`, class: `${filterField.histogram ? CSS$2.histogramContent : CSS$2.histogramContentSlim}`, ref: this.afterCreateSliderDiv }));
      }
      else {
        // don't have a slider yet, need to wait a little longer
        return null;
      }
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  setFocus() {
    setTimeout(() => {
      const node = this.hostElement.querySelector(".autofocus");
      if (node) {
        node.setFocus();
      }
    }, 500);
  }
  onSelectUnique(multiple) {
    var _a;
    const { props, value, values, fieldName, uid, uniqueValuesSortBy, esriLang } = this;
    const { strings, localeIntl } = props;
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
    if (this.uniquePopoverNode) {
      this.closeFilterPopoversHandler();
      // just close the popover
      return;
    }
    this.closeFilterPopoversHandler();
    const filterField = getFieldInfo(fieldName, props);
    if (!filterField) {
      return;
    }
    const nodeWidth = (_a = this.fieldNode) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width;
    const width = nodeWidth ? nodeWidth + 2 : 204;
    // we can't use a panel because we don't want a header
    const panelNode = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.q)(this.hostElement, "calcite-panel");
    const nodeHeight = panelNode === null || panelNode === void 0 ? void 0 : panelNode.clientHeight;
    const maxHeight = nodeHeight ? Math.max(Math.min(nodeHeight / 3, 400), 240) : 400;
    const popoverUnique = document.createElement("calcite-popover");
    popoverUnique.id = `arcgis-filter-unique-popover_${uid}`;
    popoverUnique.placement = dir === "rtl" ? "bottom-start" : "bottom-end";
    popoverUnique.offsetDistance = 0;
    popoverUnique.offsetSkidding = 0;
    popoverUnique.pointerDisabled = true;
    popoverUnique.style = `width: ${width}px;`;
    popoverUnique.referenceElement = multiple ? this.uniqueSelectNode : this.uniqueActionNode;
    const uniqueList = document.createElement("arcgis-filter-unique-list");
    uniqueList.uid = uid;
    uniqueList.props = props;
    uniqueList.uniqueValues = esriLang.clone(filterField.uniqueValueInfos);
    uniqueList.selectedValues = multiple ? values : value ? [value] : [];
    uniqueList.fieldDomains = filterField.fieldDomains;
    uniqueList.layerFieldType = filterField.layerField.type;
    uniqueList.isDate =
      [simpleFieldTypes.DATE, simpleFieldTypes.DATE_ONLY].indexOf(filterField.simpleFieldType) > -1;
    uniqueList.multiple = multiple;
    uniqueList.sortBy = uniqueValuesSortBy;
    uniqueList.partialUniqueValues = filterField.partialUniqueValues;
    uniqueList.maxHeight = maxHeight;
    uniqueList.strings = strings;
    uniqueList.locale = localeIntl;
    // otherwise there's an issue with the width of the list...
    uniqueList.style = `min-width: ${width}px`;
    popoverUnique.appendChild(uniqueList);
    document.body.appendChild(popoverUnique);
    popoverUnique.open = true;
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(uniqueList);
    uniqueList.setFocus();
    popoverUnique.reposition();
    this.uniquePopoverNode = popoverUnique;
    setTimeout(() => {
      document.addEventListener("click", this.onDocumentClickBind);
    }, 50);
  }
  scrollExprIntoView(node) {
    setTimeout(() => {
      if (node) {
        node = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.q)(node, ".filter-expression");
        node === null || node === void 0 ? void 0 : node.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "start"
        });
      }
    }, 100);
  }
  removeUniquePopover() {
    var _a;
    document.removeEventListener("click", this.onDocumentClickBind);
    if (this.uniquePopoverNode) {
      /* const popover = this.uniquePopoverNode?.childNodes?.[0] as HTMLCalcitePopoverElement;
      if (popover) {
        popover.open = false;
      } */
      this.uniquePopoverNode.open = false;
      // need the ? here...
      (_a = this.uniquePopoverNode) === null || _a === void 0 ? void 0 : _a.parentElement.removeChild(this.uniquePopoverNode);
      this.uniquePopoverNode = undefined;
    }
  }
  async onDisplayUniqueValues(fieldName) {
    var _a;
    const { props, uniqueValues } = this;
    const { layer, view, featureReduction } = props;
    const filterField = getFieldInfo(fieldName, props);
    if (!filterField || layer.type === "imagery" || layer.type === "subtype-group") {
      return;
    }
    if (filterField.uniqueValuesStatus === status.MISSING && layer) {
      filterField.uniqueValuesStatus = status.IN_PROGRESS;
      try {
        const uniqueValuesResult = await uniqueValues({
          layer,
          view,
          field: fieldName,
          forBinning: featureReduction && ["binning", "cluster"].indexOf((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) > -1
        });
        // uniqueValueInfos: [{value, count},...]
        //console.log("success-uniqueValues", uniqueValuesResult);
        // e.g. coded value domains
        const isNumber = isNumberType(filterField);
        const uniqueValueInfos = uniqueValuesResult.uniqueValueInfos.filter((info) => {
          // value is always a string, because we read it from the renderer
          if (!isDefined(info.value)) {
            return false;
          }
          else if ((filterField.simpleFieldType === "string" && !isNumber) ||
            filterField.simpleFieldType === "guid") {
            return info.value !== "<Null>" && `${info.value}`.trim() !== ""; // we don't allow empty strings
          }
          else if (filterField.simpleFieldType === "number" ||
            filterField.simpleFieldType === "oid" ||
            isNumber) {
            return info.value !== "<Null>" && info.value !== "";
          }
          else {
            // "date"
            return info.value !== "<Null>" && info.value !== "";
          }
        });
        // sort by count
        uniqueValueInfos.sort((a, b) => a.count > b.count ? -1 : a.count < b.count ? 1 : 0);
        if (hasFieldDomains(filterField)) {
          // add domains that are not used in any feature
          filterField.fieldDomains.forEach((fieldDomain) => {
            if (!uniqueValueInfos.find((obj) => obj.value === fieldDomain.code)) {
              uniqueValueInfos.push({
                value: fieldDomain.code,
                count: 0
              });
            }
          });
        }
        // TODO partialData
        const partialUniqueValues = uniqueValuesResult.uniqueValueInfos.length === 2000;
        props.fields = props.fields.map((field) => field.layerField.name === fieldName
          ? Object.assign(Object.assign({}, field), { uniqueValueInfos, uniqueValuesStatus: status.SUCCESS, partialUniqueValues }) : field);
        this.arcgisFilterUniqueValuesReturned.emit(filterField.layerField.name);
      }
      catch (error) {
        console.error("error-uniqueValues", error);
        if (hasFieldDomains(filterField)) {
          // use domains from layer
          const uniqueValueInfos = [];
          filterField.fieldDomains.forEach((fieldDomain) => {
            if (!uniqueValueInfos.find((obj) => obj.value === fieldDomain.code)) {
              uniqueValueInfos.push({
                value: fieldDomain.code,
                count: undefined
              });
            }
          });
          props.fields = props.fields.map((field) => field.layerField.name === fieldName
            ? Object.assign(Object.assign({}, field), { uniqueValueInfos, uniqueValuesStatus: status.SUCCESS, partialUniqueValues: false }) : field);
        }
        else {
          props.fields = props.fields.map((field) => field.layerField.name === fieldName
            ? Object.assign(Object.assign({}, field), { uniqueValuesStatus: status.FAILED }) : field);
        }
        this.reRender = !this.reRender;
      }
    }
  }
  async onHistogramOpen() {
    var _a, _b;
    const { props, fieldName, summaryStatistics, histogram } = this;
    const { layer, view, featureReduction } = props;
    const filterField = getFieldInfo(fieldName, props);
    if (!layer || layer.type === "imagery" || layer.type === "subtype-group" || !filterField) {
      return;
    }
    if (filterField.statistics) {
      this.checkDefaultValues(filterField);
      this.histogramOpen = true;
    }
    else if (!filterField.statistics) {
      props.fields = props.fields.map((field) => field.layerField.name === fieldName
        ? Object.assign(Object.assign({}, field), { statisticsStatus: status.IN_PROGRESS }) : field);
      try {
        const statistics = await summaryStatistics({
          layer,
          view,
          field: fieldName,
          forBinning: featureReduction && ["binning", "cluster"].indexOf((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) > -1
        });
        //console.log("success-statistics", fieldName, statistics);
        if (!isDefined(statistics.avg) ||
          !isDefined(statistics.min) ||
          !isDefined(statistics.max)) {
          // field has maybe no values; statistics is unusable
          props.fields = props.fields.map((field) => field.layerField.name === fieldName
            ? Object.assign(Object.assign({}, field), { statisticsStatus: status.FAILED }) : field);
          this.histogramOpen = false;
          return;
        }
        if (statistics.min === statistics.max) {
          if (statistics.min > 0) {
            statistics.min = statistics.min - 0.1 * statistics.min;
            statistics.max = statistics.max + 0.1 * statistics.max;
          }
          else if (statistics.min < 0) {
            statistics.min = statistics.min + 0.1 * statistics.min;
            statistics.max = statistics.max - 0.1 * statistics.max;
          }
          else {
            statistics.min = -1;
            statistics.max = 1;
          }
        }
        props.fields = props.fields.map((field) => field.layerField.name === fieldName
          ? Object.assign(Object.assign({}, field), { statistics, statisticsStatus: status.SUCCESS }) : field);
        this.checkDefaultValues(filterField);
        try {
          const result = await histogram({
            layer,
            view,
            field: fieldName,
            numBins: 30,
            minValue: statistics.min,
            maxValue: statistics.max,
            forBinning: featureReduction && ["binning", "cluster"].indexOf((_b = layer.featureReduction) === null || _b === void 0 ? void 0 : _b.type) > -1
          });
          //console.log("success-histogram", fieldName, result);
          props.fields = props.fields.map((field) => field.layerField.name === fieldName
            ? Object.assign(Object.assign({}, field), { histogram: result, histogramStatus: status.SUCCESS }) : field);
          this.reRender = !this.reRender;
        }
        catch (error) {
          console.error("error-histogram", error);
          props.fields = props.fields.map((field) => field.layerField.name === fieldName
            ? Object.assign(Object.assign({}, field), { histogramStatus: status.FAILED }) : field);
          this.reRender = !this.reRender;
        }
      }
      catch (error) {
        console.error("error-summaryStatistics", error);
        props.fields = props.fields.map((field) => field.layerField.name === fieldName
          ? Object.assign(Object.assign({}, field), { statisticsStatus: status.FAILED, histogramStatus: status.FAILED }) : field);
        this.histogramOpen = false;
        this.reRender = !this.reRender;
      }
    }
  }
  onHistogramClose() {
    this.histogramOpen = false;
  }
  async onMinMaxChange(min, max, fieldName) {
    var _a;
    const { props, value, value2, histogram } = this;
    const { layer, view, featureReduction } = props;
    const filterField = getFieldInfo(fieldName, props);
    if (!filterField || layer.type === "imagery" || layer.type === "subtype-group") {
      return;
    }
    this.value = Math.min(Math.max(value, min), max);
    if (isDefined(value2)) {
      this.value2 = Math.min(Math.max(value2, min), max);
    }
    this.histogramOpen = true;
    props.fields = props.fields.map((field) => field.layerField.name === fieldName
      ? Object.assign(Object.assign({}, field), { histogramStatus: status.IN_PROGRESS }) : field);
    try {
      const result = await histogram({
        layer,
        view,
        field: filterField.layerField.name,
        numBins: 30,
        minValue: min,
        maxValue: max,
        forBinning: featureReduction && ["binning", "cluster"].indexOf((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) > -1
      });
      //console.log("success-histogram", result);
      props.fields = props.fields.map((field) => field.layerField.name === fieldName
        ? Object.assign(Object.assign({}, field), { histogram: result, histogramStatus: status.SUCCESS }) : field);
      this.reRender = !this.reRender;
    }
    catch (error) {
      console.error("error-histogram", error);
      props.fields = props.fields.map((field) => field.layerField.name === fieldName
        ? Object.assign(Object.assign({}, field), { histogramStatus: status.FAILED }) : field);
    }
  }
  adjustHistogramMinMax(value) {
    const { histogramSlider } = this;
    if (histogramSlider) {
      if (histogramSlider.min > value) {
        histogramSlider.set({ min: value });
      }
      if (histogramSlider.max < value) {
        histogramSlider.set({ max: value });
      }
    }
  }
  prepareSlider(filterField) {
    var _a, _b;
    const { histogramSliderFieldName: sliderFieldName } = this;
    let { value, value2, histogramSlider: slider } = this;
    const statistics = filterField.statistics;
    if (filterField.histogramStatus === status.IN_PROGRESS) {
      // no updates to the slider
      //console.log("no slider updates");
      return false;
    }
    // string values are wrong here
    if (isDefined(value) && typeof value !== "number") {
      value = undefined;
    }
    if (isDefined(value2) && typeof value2 !== "number") {
      value2 = undefined;
    }
    this.checkDefaultValues(filterField);
    // refresh
    value = this.value;
    value2 = this.value2;
    // make sure we have the correct number of values
    const values = [];
    values.push(value);
    if (isDefined(value2)) {
      values.push(value2);
    }
    if (isIntegerType(filterField)) {
      if (isDefined(values[0])) {
        const roundedVal = Math.round(values[0]);
        if (roundedVal !== values[0]) {
          this.changeValues(roundedVal, value2);
        }
        values[0] = roundedVal;
      }
      if (isDefined(values[1])) {
        const roundedVal = Math.round(values[1]);
        if (roundedVal !== values[1]) {
          this.changeValues(value, roundedVal);
        }
        values[1] = roundedVal;
      }
    }
    // adjust the slider if values are outside of range
    let min = filterField.histogram ? filterField.histogram.minValue : statistics.min;
    let max = filterField.histogram ? filterField.histogram.maxValue : statistics.max;
    if (isDefined(values[0]) && isDefined(values[1])) {
      min = Math.min(min, values[0]);
      max = Math.max(max, values[1]);
    }
    else if (isDefined(values[0])) {
      min = Math.min(min, values[0]);
      max = Math.max(max, values[0]);
    }
    if (slider && sliderFieldName !== filterField.layerField.name) {
      // change maybe because of a deleted expression or condition
      slider.destroy();
      slider = undefined;
    }
    if (!slider) {
      // new histogram
      const config = {
        bins: (_a = filterField.histogram) === null || _a === void 0 ? void 0 : _a.bins,
        average: Math.round(statistics.avg * 10) / 10,
        //standardDeviation: filterField.statistics.stddev,
        min: min,
        max: max,
        values: (values === null || values === void 0 ? void 0 : values[0]) === undefined ? undefined : values,
        rangeType: this.getSliderRangeType(),
        precision: isIntegerType(filterField) ? 0 : 4
      };
      if ([simpleFieldTypes.DATE, simpleFieldTypes.DATE_ONLY].indexOf(filterField.simpleFieldType) >
        -1) {
        config.hasTimeData = true;
        this.addDateFormatFunctions(config);
      }
      this.histogramSliderFieldName = filterField.layerField.name;
      this.histogramSlider = new this.HistogramRangeSlider(config);
      //console.log("new HistogramRangeSlider", config);
      this.createSliderChangeEvents(filterField);
    }
    else {
      // update histogram slider
      const config = {
        bins: (_b = filterField.histogram) === null || _b === void 0 ? void 0 : _b.bins,
        average: Math.round(statistics.avg * 10) / 10,
        min: min,
        max: max,
        values: (values === null || values === void 0 ? void 0 : values[0]) === undefined ? undefined : values,
        rangeType: this.getSliderRangeType()
      };
      //console.log("update HistogramRangeSlider", config, values);
      slider.set(config);
    }
    return true;
  }
  createSliderChangeEvents(filterField) {
    const { histogramSlider } = this;
    if (!histogramSlider) {
      return;
    }
    histogramSlider.on("min-change", (event /*ValueChangeEvent*/) => {
      const slider = histogramSlider;
      this.onMinMaxChange(event.value, slider.max, filterField.layerField.name);
    });
    histogramSlider.on("max-change", (event /*ValueChangeEvent*/) => {
      const slider = histogramSlider;
      this.onMinMaxChange(slider.min, event.value, filterField.layerField.name);
    });
    histogramSlider.watch("values", ( /* values: number[] */) => {
      var _a, _b;
      const slider = histogramSlider;
      let value = (_a = slider.values) === null || _a === void 0 ? void 0 : _a[0];
      let value2 = (_b = slider.values) === null || _b === void 0 ? void 0 : _b[1];
      if ([simpleFieldTypes.DATE, simpleFieldTypes.DATE_ONLY].indexOf(filterField.simpleFieldType) >
        -1) {
        value = Math.round(value);
      }
      if (isIntegerType(filterField)) {
        if (value2 || value === 0) {
          value = Math.floor(value);
          value2 = Math.ceil(value2);
        }
        else {
          value = Math.round(value);
        }
      }
      this.changeValues(value, value2);
    });
    histogramSlider.on("segment-drag", ( /*event: any SegmentDragEvent*/) => {
      const slider = histogramSlider;
      let value = slider.values[0];
      let value2 = slider.values[1];
      if (isIntegerType(filterField)) {
        if (value2 || value === 0) {
          value = Math.floor(value);
          value2 = Math.ceil(value2);
        }
        else {
          value = Math.round(value);
        }
      }
      this.changeValues(value, value2);
    });
  }
  getSliderRangeType() {
    const { props, operator } = this;
    const { strings } = props;
    switch (operator) {
      case strings.operators.numberOperatorIs:
      case strings.operators.dateOperatorIsOn:
        return "equal";
      case strings.operators.numberOperatorIsNot:
      case strings.operators.dateOperatorIsNotOn:
        return "not-equal";
      case strings.operators.numberOperatorIsLessThan:
      case strings.operators.dateOperatorIsBefore:
        return "less-than";
      case strings.operators.numberOperatorIsGreaterThan:
      case strings.operators.dateOperatorIsAfter:
        return "greater-than";
      case strings.operators.numberOperatorIsAtMost:
        return "at-most";
      case strings.operators.numberOperatorIsAtLeast:
        return "at-least";
      case strings.operators.numberOperatorIsBetween:
      case strings.operators.dateOperatorIsBetween:
        return "between";
      case strings.operators.numberOperatorIsNotBetween:
      case strings.operators.dateOperatorIsNotBetween:
        return "not-between";
      default:
        return "";
    }
  }
  getNewValue(event) {
    const { view } = this.props;
    const { timeZone } = view;
    const node = event === null || event === void 0 ? void 0 : event.target;
    let newValue;
    if ((node === null || node === void 0 ? void 0 : node.tagName) === "CALCITE-INPUT-DATE-PICKER") {
      newValue = node.value; //valueAsDate; -> valueAsDate seems to have a time offset
      if (!newValue) {
        return;
      }
      newValue = datePickerToUTC(new Date(newValue), timeZone);
    }
    else if ((node === null || node === void 0 ? void 0 : node.tagName) === "CALCITE-INPUT" && node.type === "number") {
      newValue = node.value;
      if (!newValue) {
        return;
      }
      newValue = parseFloat(newValue);
    }
    else if ((node === null || node === void 0 ? void 0 : node.tagName) === "CALCITE-INPUT") {
      // text
      newValue = node.value;
      if (!(newValue === null || newValue === void 0 ? void 0 : newValue.length)) {
        newValue = undefined;
      }
    }
    return newValue;
  }
  addDateFormatFunctions(config) {
    const { intl, props } = this;
    const { view } = props;
    const { timeZone } = view;
    config.labelFormatFunction = (value) => {
      //return this.smartMappingUtils.formatDateLabel(utcToMapTZ(value, timeZone));
      return getDateDisplayString(value, timeZone, intl, "short-date");
    };
    config.inputFormatFunction = (value) => {
      //return this.smartMappingUtils.formatDateLabel(utcToMapTZ(value, timeZone));
      return getDateDisplayString(value, timeZone, intl, "short-date");
    };
    config.inputParseFunction = (value /* , type: string, index: number */) => {
      return mapTZToUTC(Date.parse(value), timeZone);
    };
  }
  changeValues(value, value2) {
    const { props, fieldName } = this;
    const filterField = getFieldInfo(fieldName, props);
    const newValue = filterField.simpleFieldType &&
      [simpleFieldTypes.NUMBER, simpleFieldTypes.DATE, simpleFieldTypes.OID].indexOf(filterField.simpleFieldType) > -1
      ? isNaN(value)
        ? null
        : value
      : value;
    const newValue2 = filterField.simpleFieldType &&
      [simpleFieldTypes.NUMBER, simpleFieldTypes.DATE, simpleFieldTypes.OID].indexOf(filterField.simpleFieldType) > -1
      ? isNaN(value2)
        ? null
        : value2
      : value2;
    if (this.value !== newValue || this.value2 !== newValue2) {
      //this.value = newValue;
      //this.value2 = newValue2;
      this.emitChangeEvent({
        value: newValue !== null && newValue !== void 0 ? newValue : null,
        value2: newValue2 !== null && newValue2 !== void 0 ? newValue2 : null
      });
    }
  }
  checkDefaultValues(filterField) {
    const { props, operator, value, value2, histogramSlider: slider } = this;
    const statistics = filterField.statistics;
    const defaultValues = getDefaultValues(props, filterField, operator);
    if (isInTheLastOperator(props, operator)) {
      if (!isDefined(value)) {
        const now = new Date().getTime();
        const range = Math.abs(now - statistics.avg);
        let value, unit;
        if (range > 2 * timeRange.YEAR) {
          value = Math.round(range / timeRange.YEAR);
          unit = timeUnits.YEAR;
        }
        else {
          if (range > 2 * timeRange.MONTH) {
            value = Math.round(range / timeRange.MONTH);
            unit = timeUnits.MONTH;
          }
          else {
            if (range > 2 * timeRange.WEEK) {
              value = Math.round(range / timeRange.WEEK);
              unit = timeUnits.WEEK;
            }
            else {
              if (range > 2 * timeRange.DAY) {
                value = Math.round(range / timeRange.DAY);
                unit = timeUnits.DAY;
              }
              else {
                if (range > 2 * timeRange.HOUR) {
                  value = Math.round(range / timeRange.HOUR);
                  unit = timeUnits.HOUR;
                }
                else {
                  value = Math.round(range / timeRange.MINUTE);
                  unit = timeUnits.MINUTE;
                }
              }
            }
          }
        }
        //this.value = value;
        //this.unit = unit;
        this.emitChangeEvent({ value, unit });
      }
    }
    else if (isBetweenOperator(props, operator)) {
      if (isDefined(value)) {
        if (isDefined(value2)) {
          if (value2 < value) {
            // let's correct the one that was changed last
            if (slider && slider.values[0] === value) {
              this.changeValues(value, value);
            }
            else {
              this.changeValues(value2, value2);
            }
          }
        }
        else {
          // need a second value
          const val = isIntegerType(filterField) ? Math.round(statistics.max) : statistics.max;
          this.changeValues(value, val);
        }
      }
      else {
        // need values
        if (isDefined(value2)) {
          const val = fieldTypeRound(statistics === null || statistics === void 0 ? void 0 : statistics.avg, props, filterField);
          this.changeValues(val, value2);
        }
        else {
          this.changeValues(defaultValues.value, defaultValues.value2);
        }
      }
    }
    else {
      if (!isDefined(value)) {
        this.changeValues(defaultValues.value, defaultValues.value2);
      }
    }
    // most of the times don't need this return
    return defaultValues;
  }
  openFieldPickList() {
    const { props, fieldName, fieldPickListSortBy } = this;
    const { layer, view, featureReduction } = props;
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
    this.closeFilterPopoversHandler();
    const panelNode = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.q)(this.hostElement, "#filter-panel");
    const closeNode = panelNode.querySelector("#arcgis-filter-close");
    const nodeWidth = panelNode === null || panelNode === void 0 ? void 0 : panelNode.getBoundingClientRect().width;
    this.arcgisFieldPickList = document.createElement("arcgis-field-pick-list");
    this.arcgisFieldPickList.popoverProps = closeNode
      ? {
        placement: dir === "rtl" ? "bottom-start" : "bottom-end",
        offsetDistance: 20,
        offsetSkidding: 15,
        pointerDisabled: true,
        popoverWidth: nodeWidth ? nodeWidth + 30 : 280,
        refElement: closeNode
      }
      : {
        placement: "auto",
        // we don't have an action bar in layer view where it is used without a close button
        offsetDistance: -1 * (nodeWidth ? nodeWidth - 5 : 215),
        offsetSkidding: 0,
        pointerDisabled: true,
        popoverWidth: nodeWidth ? nodeWidth + 30 : 280,
        refElement: panelNode
      };
    this.arcgisFieldPickList.fields = this.createPickListFields();
    this.arcgisFieldPickList.layer = layer;
    this.arcgisFieldPickList.mapView = view;
    this.arcgisFieldPickList.showFieldInfo = true;
    this.arcgisFieldPickList.showFieldName = false;
    this.arcgisFieldPickList.selectedFields = [fieldName];
    this.arcgisFieldPickList.sortBy = fieldPickListSortBy;
    this.arcgisFieldPickList.showFieldInfo = !featureReduction;
    this.arcgisFieldPickList.addEventListener("arcgisFieldPickListDismissed", this.fieldPickListChanges);
    this.arcgisFieldPickList.addEventListener("arcgisFieldPickListSortByChange", (event) => (this.fieldPickListSortBy = event.detail));
    document.body.appendChild(this.arcgisFieldPickList);
    this.disableFilterPanel.emit(true);
  }
  createPickListFields() {
    const { props } = this;
    const { fields } = props;
    return fields.map((field) => {
      return {
        name: field.layerField.name,
        alias: field.label,
        type: field.simpleFieldType
      };
    });
  }
  removeFieldsPickList() {
    this.disableFilterPanel.emit(false);
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
      this.arcgisFieldPickList = null;
      setTimeout(() => {
        this.fieldNode.setFocus();
      }, 1);
    }
  }
  afterFieldSelect(newFieldName) {
    var _a;
    const { props, fieldName, operator, histogramOpen } = this;
    const { strings } = props;
    const oldFilterField = getFieldInfo(fieldName, props);
    const newFilterField = getFieldInfo(newFieldName, props);
    /* this.hasFocus = true;
    this.fieldName = newFieldName;
    this.operator = getOperator(props, oldFilterField!, newFilterField!, operator!);
    this.value = undefined;
    this.value2 = undefined;
    this.values = undefined;
    this.uniqueValuesSortBy = undefined;
    this.histogramOpen =
      (newFilterField!.simpleFieldType &&
        [simpleFieldTypes.NUMBER, simpleFieldTypes.DATE].indexOf(
          newFilterField!.simpleFieldType
        ) === -1) ||
      newFilterField!.statisticsStatus === status.FAILED
        ? undefined
        : histogramOpen === false && oldFilterField!.statisticsStatus !== status.FAILED
        ? false
        : undefined; // when undefined then open by default
    */
    let value = null;
    const newOperator = getOperator$1(props, oldFilterField, newFilterField, operator);
    const filterField = getFieldInfo(newFieldName, props);
    if (filterField.simpleFieldType === simpleFieldTypes.STRING &&
      filterField.uniqueValuesStatus === status.SUCCESS &&
      ((_a = filterField.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) &&
      [strings.operators.stringOperatorIs, strings.operators.stringOperatorIsNot].indexOf(newOperator) > -1) {
      // default value
      value = filterField.uniqueValueInfos[0].value;
    }
    this.emitChangeEvent({
      hasFocus: true,
      fieldName: newFieldName,
      operator: newOperator,
      value,
      value2: null,
      values: null,
      uniqueValuesSortBy: null,
      histogramOpen: (newFilterField.simpleFieldType &&
        [simpleFieldTypes.NUMBER, simpleFieldTypes.DATE, simpleFieldTypes.DATE_ONLY].indexOf(newFilterField.simpleFieldType) === -1) ||
        newFilterField.statisticsStatus === status.FAILED
        ? null
        : histogramOpen === false && oldFilterField.statisticsStatus !== status.FAILED
          ? false
          : null // when undefined then open by default
    });
  }
  emitChangeEvent(overwrites) {
    var _a, _b;
    const { uid, fieldName, operator, uniqueValuesSortBy, value, value2, values, unit, histogramOpen, hasFocus } = this;
    const newCondition = {
      uid,
      fieldName: overwrites.fieldName || fieldName,
      operator: overwrites.operator || operator,
      uniqueValuesSortBy: overwrites.uniqueValuesSortBy === null
        ? undefined
        : overwrites.uniqueValuesSortBy || uniqueValuesSortBy,
      value: overwrites.value === null ? undefined : (_a = overwrites.value) !== null && _a !== void 0 ? _a : value,
      value2: overwrites.value2 === null ? undefined : (_b = overwrites.value2) !== null && _b !== void 0 ? _b : value2,
      values: overwrites.values === null ? undefined : overwrites.values || values,
      unit: overwrites.unit || unit,
      histogramOpen: overwrites.histogramOpen === null ? undefined : overwrites.histogramOpen || histogramOpen,
      hasFocus: overwrites.hasFocus || hasFocus
    };
    this.arcgisFilterConditionChanged.emit(newCondition);
  }
  waitOnUser(event, doChange) {
    // for number fields we don't want to allow an empty value
    // but the user might shortly use an empty input box
    // while typing a new value
    if (this.typingHndl) {
      clearTimeout(this.typingHndl);
      this.typingHndl = undefined;
    }
    const node = event.target;
    const val = node.value;
    const parsedVal = parseFloat(val);
    if (!val) {
      // undefined or empty string
      // user might be in the middle of typing
      // give the user 2 seconds to fill in empty entry
      // otherwise go back to default value
      this.typingHndl = setTimeout(() => {
        this.typingHndl = undefined;
        doChange(event);
      }, 2000);
    }
    else if (val[0] !== "-" || (parsedVal !== 0 && !isNaN(parsedVal))) {
      // not '-', '-0', '-0.', '-0.0', ...
      doChange(event);
    } // else don't update anything; it's still keeping last value
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFilterCondition.style = arcgisFilterConditionCss;

const CSS$1 = {
  addConditionButton: "add-condition-button",
  content: "content",
  conditionHeader: "condition-header",
  matchTypeText: "match-type-text",
  matchCondition: "match-condition",
  matchConditionDropdown: "match-condition-dropdown"
};

const arcgisFilterExpressionCss = ".content.sc-arcgis-filter-expression{padding-bottom:6px}.condition-header.sc-arcgis-filter-expression{display:flex;justify-content:flex-end;align-items:center;margin:0 6px}.match-type-text.sc-arcgis-filter-expression{margin:0 auto}.match-condition.sc-arcgis-filter-expression{margin:0 6px}.match-condition-dropdown.sc-arcgis-filter-expression{width:100%}.add-condition-button.sc-arcgis-filter-expression{display:flex}";

const ArcgisFilterExpression = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisFilterExpressionChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterExpressionChanged", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onAddCondition = () => {
      const { props, conditions } = this;
      const defaultField = getDefaultField(props);
      const defaultOperator = getDefaultOperator(props, defaultField);
      const defaultValues = getDefaultValues(props, defaultField, defaultOperator);
      const newCondition = Object.assign(Object.assign({ fieldName: defaultField.layerField.name, operator: getDefaultOperator(props, defaultField) }, defaultValues), { hasFocus: true });
      conditions.forEach((cond) => (cond.hasFocus = false));
      this.conditions = [...conditions, newCondition];
      props.expressions = props.expressions.map((expression) => expression.uid === this.uid
        ? Object.assign(Object.assign({}, expression), { conditions: this.conditions }) : Object.assign({}, expression));
      this.fixUIDsForExpression();
      this.menuNode.open = false;
      this.emitChangeEvent();
    };
    this.onRemoveCondition = (event) => {
      const { props, conditions } = this;
      const action = event.target;
      const conditionIdx = parseInt(action.getAttribute("data-value"));
      conditions.forEach((cond) => (cond.hasFocus = false));
      let removedIdx = 0;
      this.conditions = conditions.filter((cond, idx2) => {
        if (cond && idx2 === conditionIdx) {
          removedIdx = idx2;
          return false;
        }
        return true;
      });
      this.conditions[Math.max(0, removedIdx - 1)].hasFocus = true;
      props.expressions = props.expressions.map((expression) => expression.uid === this.uid
        ? Object.assign(Object.assign({}, expression), { conditions: this.conditions }) : Object.assign({}, expression));
      this.fixUIDsForExpression();
      this.emitChangeEvent();
    };
    this.onMatchSelect = (event) => {
      const select = event.target;
      const newMatch = select.selectedOption.value;
      this.logicalOperatorForConditions = newMatch;
      this.emitChangeEvent();
    };
    this.onCopyExpression = () => {
      const { uid, conditions, logicalOperatorForConditions } = this;
      const currentExpression = {
        uid,
        conditions,
        logicalOperatorForConditions
      };
      this.menuNode.open = false;
      this.arcgisFilterExpressionChanged.emit({
        type: "copy",
        uid: this.uid,
        expression: currentExpression
      });
    };
    this.onRemoveExpression = () => {
      this.arcgisFilterExpressionChanged.emit({ type: "delete", uid: this.uid });
    };
    this.props = undefined;
    this.uid = undefined;
    this.conditions = undefined;
    this.logicalOperatorForConditions = undefined;
    this.canRemove = true;
    this.canDuplicate = true;
    this.showAddConditionButton = false;
  }
  arcgisFilterConditionChangeHandler(event) {
    const { conditions } = this;
    const { detail: newCondition } = event;
    this.conditions = conditions.map((condition) => condition.uid === newCondition.uid ? newCondition : condition //{ ...condition }
    );
    this.emitChangeEvent();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    this.conditions = this.conditions || [];
    const [esriLang] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/core/lang"]);
    this.esriLang = esriLang;
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, conditions } = this;
    const { strings } = props;
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: {
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: dir === "rtl"
      }, dir: dir }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: conditions.length === 1 ? strings.expression : strings.expressionSet, open: true }, this.renderMenu(), this.renderMatchCondition(), this.renderConditions(), this.renderAddConditionButton())));
  }
  renderMenu() {
    const { props, canDuplicate, canRemove, conditions } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-menu", { slot: "control", placement: "bottom-end", overlayPositioning: "fixed", label: strings.accessibility.moreOptions, ref: (node) => (this.menuNode = node) }, canRemove && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: conditions.length === 1 ? strings.deleteExpression : strings.deleteSet, textEnabled: true, "data-value": "remove", onClick: this.onRemoveExpression })), canDuplicate && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.duplicate, textEnabled: true, "data-value": "copy", onClick: this.onCopyExpression })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.addCondition, textEnabled: true, "data-value": "add", onClick: this.onAddCondition })));
  }
  renderMatchCondition() {
    const { conditions, logicalOperatorForConditions, props } = this;
    const { strings } = props;
    if (!conditions || !conditions.length || conditions.length === 1) {
      return null;
    }
    const isAnd = logicalOperatorForConditions !== logicalOperators.OR;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.matchCondition }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", scale: "m", label: strings.accessibility.matchConditions, class: CSS$1.matchConditionDropdown, onCalciteSelectChange: this.onMatchSelect }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: logicalOperators.AND, label: strings.matchAllConditions, selected: isAnd }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: logicalOperators.OR, label: strings.matchAtLeastOneCondition, selected: !isAnd }))));
  }
  renderConditions() {
    const { conditions } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.content }, conditions.map((conditionProps, idx) => this.renderCondition(conditionProps, idx))));
  }
  renderCondition(conditionProps, conditionIndex) {
    const { props } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderConditionHeader(conditionIndex), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-filter-condition", Object.assign({ props: props }, conditionProps))));
  }
  renderAddConditionButton() {
    return (this.showAddConditionButton && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "center", appearance: "transparent", class: CSS$1.addConditionButton, "icon-start": "plus", scale: "s", onClick: this.onAddCondition }, this.props.strings.addCondition)));
  }
  renderConditionHeader(conditionIndex) {
    const { props, logicalOperatorForConditions, conditions } = this;
    const { strings } = props;
    if (conditions.length < 2) {
      return null;
    }
    const isAnd = logicalOperatorForConditions !== logicalOperators.OR;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.conditionHeader }, conditionIndex > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS$1.matchTypeText }, isAnd ? strings.and : strings.or)) : null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { label: strings.remove, text: "", icon: "x", compact: true, "data-value": `${conditionIndex}`, onClick: this.onRemoveCondition })));
  }
  fixUIDsForExpression() {
    const { props } = this;
    props.expressions = fixUIDs(props.expressions);
    this.conditions = props.expressions.filter((expression) => expression.uid === this.uid)[0].conditions;
  }
  emitChangeEvent() {
    const { uid, conditions, logicalOperatorForConditions } = this;
    const newExpression = {
      uid,
      conditions,
      logicalOperatorForConditions
    };
    this.arcgisFilterExpressionChanged.emit({ type: "replace", expression: newExpression });
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFilterExpression.style = arcgisFilterExpressionCss;

const CSS = {
  container: "container",
  pickList: "popover-unique-pick-list",
  uniqueValuesContentListMsg: "unique-values-content-list-msg",
  count: "count",
  uniqueValuesDone: "unique-values-done"
};

const arcgisFilterUniqueListCss = ".sc-arcgis-filter-unique-list-h{width:100%}.container.sc-arcgis-filter-unique-list{min-height:30px}.popover-unique-pick-list.sc-arcgis-filter-unique-list{width:100%;overflow-y:auto}.unique-values-content-list-msg.sc-arcgis-filter-unique-list{font-size:75%;margin:5px}.count.sc-arcgis-filter-unique-list{padding:12px 6px}.unique-values-done.sc-arcgis-filter-unique-list{padding:0.5rem}";

const ArcgisFilterUniqueList = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisFilterUniqueListDone = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterUniqueListDone", 7);
    this.arcgisFilterUniqueListChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterUniqueListChanged", 7);
    this.arcgisFilterUniqueListSortByChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterUniqueListSortByChanged", 7);
    this.onSortMenuSelect = (event) => {
      var _a;
      const dropdown = event.currentTarget;
      const type = (_a = dropdown.selectedItems) === null || _a === void 0 ? void 0 : _a[0].getAttribute("data-value");
      this.sortBy = type;
      this.arcgisFilterUniqueListSortByChanged.emit({ uid: this.uid, sortBy: type });
    };
    this.done = () => {
      this.arcgisFilterUniqueListDone.emit(this.uid);
    };
    this.uid = undefined;
    this.props = undefined;
    this.uniqueValues = undefined;
    this.selectedValues = undefined;
    this.fieldDomains = undefined;
    this.layerFieldType = undefined;
    this.isDate = undefined;
    this.sortBy = undefined;
    this.multiple = undefined;
    this.partialUniqueValues = undefined;
    this.maxHeight = undefined;
    this.strings = undefined;
    this.locale = undefined;
  }
  // --------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  async setFocus() {
    var _a;
    (_a = this.pickListNode) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/intl"]);
    this.intl = intl;
    this.intl.setLocale(this.locale);
  }
  componentDidLoad() {
    //this.setFocus();
  }
  disconnectedCallback() {
    //this.removeFieldsPickList();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { uid, uniqueValues, selectedValues, layerFieldType, fieldDomains, sortBy, multiple, partialUniqueValues, maxHeight, strings } = this;
    const sortByCount = (list) => {
      list.sort((a, b) => {
        return a.count <= b.count ? 1 : -1;
      });
    };
    const sortAlphabetically = (list) => {
      const hasDomains = fieldDomains === null || fieldDomains === void 0 ? void 0 : fieldDomains.length;
      list.sort((a, b) => {
        const valueA = hasDomains ? this.getDecodedValue(a.value) : a.value;
        const valueB = hasDomains ? this.getDecodedValue(b.value) : b.value;
        return `${valueA}`.charAt(0) === "_"
          ? 1
          : `${valueB}`.charAt(0) === "_"
            ? -1
            : `${valueA}`.localeCompare(`${valueB}`);
      });
    };
    const sortSelected = (list, values) => {
      list.sort((a, b) => {
        var _a, _b;
        const posA = (_a = values === null || values === void 0 ? void 0 : values.indexOf(a.value)) !== null && _a !== void 0 ? _a : -1;
        const posB = (_b = values === null || values === void 0 ? void 0 : values.indexOf(b.value)) !== null && _b !== void 0 ? _b : -1;
        return posA === posB || (posA > -1 && posB > -1) ? 0 : posA > posB ? -1 : 1;
      });
    };
    sortAlphabetically(uniqueValues);
    if (!sortBy || sortBy === "count") {
      sortByCount(uniqueValues);
    }
    else if (sortBy === "selected") {
      sortSelected(uniqueValues, selectedValues);
    }
    const list = uniqueValues.map((info) => this.renderUniqueValue(info));
    let msgNode;
    if (partialUniqueValues) {
      msgNode = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.uniqueValuesContentListMsg }, strings.errors.tooManyUniqueValues));
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.container }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { class: CSS.pickList, filterEnabled: uniqueValues.length > 10, multiple: multiple, "filter-placeholder": strings.searchValues, onCalciteListChange: async (event) => {
        const node = event.target;
        let selectedValues = [...(await node.getSelectedItems()).keys()];
        if (layerFieldType === "date-only") {
          selectedValues = selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map((value) => {
            // convert date string to UNIX timestamp (without timestamp offset shift)
            const date = new Date(value);
            const offset = date.getTimezoneOffset() * 60000;
            return date.getTime() + offset;
          });
        }
        else if (["date", "oid", "guid", "small-integer", "big-integer", "integer", "long"].indexOf(layerFieldType) > -1) {
          selectedValues = selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map((value) => parseInt(value));
        }
        else if (["single", "double"].indexOf(layerFieldType) > -1) {
          selectedValues = selectedValues === null || selectedValues === void 0 ? void 0 : selectedValues.map((value) => parseFloat(value));
        }
        this.selectedValues = selectedValues;
        this.arcgisFilterUniqueListChanged.emit({
          uid,
          multiple,
          selectedValues,
          sortBy
        });
      }, ref: (node) => {
        this.pickListNode = node;
        if (maxHeight) {
          node.setAttribute("style", `max-height: ${maxHeight || 400}px`);
        }
      } }, uniqueValues.length > 10 ? this.renderSort() : null, list), msgNode, this.renderDone())));
  }
  renderSort() {
    const { sortBy, strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { slot: "menu-actions", placement: "bottom-end", overlayPositioning: "fixed", width: "s", onCalciteDropdownSelect: this.onSortMenuSelect }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", label: strings.sortValues, text: "" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: sortBy === "count" || !isDefined(sortBy), "data-value": "count" }, strings.sortByCount), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: sortBy === "name", "data-value": "name" }, strings.sortAlphabetical), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: sortBy === "selected", "data-value": "selected" }, strings.sortSelected))));
  }
  renderUniqueValue(info) {
    const { selectedValues, fieldDomains, layerFieldType, isDate, intl, props } = this;
    const { view } = props;
    const { timeZone } = view;
    const value = (fieldDomains === null || fieldDomains === void 0 ? void 0 : fieldDomains.length)
      ? this.getDecodedValue(info.value)
      : isDate
        ? layerFieldType === "date-only"
          ? this.getDateOnlyString(info.value)
          : getDateDisplayString(info.value, timeZone, intl)
        : typeof info.value === "number"
          ? intl.formatNumber(info.value)
          : info.value;
    const isSelected = selectedValues ? selectedValues.indexOf(info.value) > -1 : false;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: `pick-list-item_${info.value}`, label: `${value}`, value: `${info.value}`, selected: isSelected }, isDefined(info.count) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.count, slot: "actions-end" }, `${info.count}`)) : null));
  }
  renderDone() {
    const { multiple, strings } = this;
    if (!multiple) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.uniqueValuesDone }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", width: "full", onClick: this.done, label: strings.done }, strings.done)));
  }
  getDecodedValue(value) {
    const { fieldDomains } = this;
    const codedValues = fieldDomains;
    if (codedValues) {
      let label = "";
      for (let i = 0; i < codedValues.length; i++) {
        const codedValue = codedValues[i];
        if (codedValue.code == value) {
          label += (label.length ? " | " : "") + codedValue.name;
        }
      }
      return label;
    }
    // did not find it
    return value;
  }
  getDateOnlyString(value) {
    const { intl } = this;
    return value ? intl.formatDateOnly(value) : "";
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFilterUniqueList.style = arcgisFilterUniqueListCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,