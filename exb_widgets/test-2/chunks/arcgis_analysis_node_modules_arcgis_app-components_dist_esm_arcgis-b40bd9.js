"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-b40bd9"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const addItemStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  typeKeywords: [],
  customParameters: [],
  analyzedLocationTypes: [],
  allowStoredAuth: true,
  isSecured: null,
  checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-data-store-select-nosql-credentials.entry.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-data-store-select-nosql-credentials.entry.js ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_data_store_select_nosql_credentials: () => (/* binding */ ArcgisNewItemPagesDataStoreSelectNosqlCredentials)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _i18n_6685247f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./i18n-6685247f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/i18n-6685247f.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






const arcgisNewItemPagesDataStoreSelectNosqlCredentialsCss = ".noSql-connection-credential{margin-top:1.5rem}.noSql-credential-input{margin-top:0.25rem}.noSql-credential-text{margin:0}.noSql-footer-padding{margin-bottom:2rem}";

const ArcgisNewItemPagesDataStoreSelectNosqlCredentials = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.newItemUpdatePage = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
    this.inputFields = [
      "connectionUri",
      "fallBackServers",
      "username",
      "password",
      "database"
    ];
    this.renderError = false;
    this.connectionUri = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.connectionUri || "";
    this.fallBackServers = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.fallBackServers || "";
    this.username = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.username || "";
    this.password = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.password || "";
    this.database = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.database || "";
    this.error = [];
  }
  async componentWillLoad() {
    this.provider = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.noSqlProvider;
    this.i18n = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__.u.i18n.dataStoreSelectNoSql;
  }
  validateInputs() {
    const { i18n } = this;
    const error = [];
    if (!this.connectionUri) {
      error.push(i18n.connectionUri);
    }
    if (!this.username) {
      error.push(i18n.username);
    }
    if (!this.password) {
      error.push(i18n.password);
    }
    if (!this.database) {
      error.push(i18n.database);
    }
    this.error = error;
  }
  renderErrorItem() {
    if (this.error !== null) {
      const errorMessage = this.i18n.errorMessage;
      const errorDescription = (0,_i18n_6685247f_js__WEBPACK_IMPORTED_MODULE_2__.r)(errorMessage, this.error.join(", "), "missingFields")
        .replace(/([^,]*)$/, " " + this.i18n.and + "$1")
        .replace(/:/g, "");
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { heading: this.i18n.error, description: errorDescription, active: this.error !== null, onAlertDismiss: () => {
          this.error = null;
        } }));
    }
  }
  handleNext() {
    this.validateInputs();
    if (this.error.length) {
      this.renderError = true;
      return;
    }
    this.renderError = false;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.connectionUri = this.connectionUri;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.fallBackServers = this.fallBackServers;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.username = this.username;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.password = this.password;
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.database = this.database;
    this.newItemUpdatePage.emit("dataStoreSelectServerList");
  }
  render() {
    const { provider, i18n, inputFields } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.credentialDescription }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "noSql-connection-credential" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "noSql-credential-text" }, i18n.provider), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "noSql-credential-input", value: provider, disabled: true })), inputFields.map((type, index) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: type }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "noSql-credential-text" }, i18n[type]), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: {
          "noSql-credential-input": true,
          "noSql-footer-padding": index === inputFields.length - 1
        }, value: this[type], type: type === "password" ? "password" : "text", onCalciteInputChange: (e) => {
          const newValue = e.target.value;
          this[type] = newValue;
        } }), i18n[`${type}Example`] ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "noSql-credential-text" }, i18n[`${type}Example`])) : null)));
    })), this.renderError ? this.renderErrorItem() : null));
  }
};
ArcgisNewItemPagesDataStoreSelectNosqlCredentials.style = arcgisNewItemPagesDataStoreSelectNosqlCredentialsCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/i18n-6685247f.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/i18n-6685247f.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ replaceI18NString)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const regexLookupMap = {
  fileName: /\$\{fileName\}/g,
  fileType: /\$\{type\}/g,
  typeList: /\$\{typeList\}/g,
  missingFields: /\$\{\missingFields\}/g
};
const replaceI18NString = (str, replacementString, type) => {
  const typeRegEx = new RegExp(regexLookupMap[type]);
  return str === null || str === void 0 ? void 0 : str.replace(typeRegEx, replacementString);
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const uiStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  nextText: "next",
  workflow: "content",
  scale: "m",
  disableScroll: false,
  featureFlags: { tileLayer3dTiles: false }
});
const uiStoreState = uiStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,