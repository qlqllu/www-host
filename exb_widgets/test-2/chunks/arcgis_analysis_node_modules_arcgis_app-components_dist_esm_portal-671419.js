"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_portal-671419"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const configStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  portal: null,
  user: null,
  api: 4,
  scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getPortalRestInfo),
/* harmony export */   b: () => (/* binding */ getPortalRestInfoFromUrl),
/* harmony export */   c: () => (/* binding */ clearCache),
/* harmony export */   d: () => (/* binding */ getPortalToken),
/* harmony export */   e: () => (/* binding */ formRequest),
/* harmony export */   f: () => (/* binding */ fromCache),
/* harmony export */   g: () => (/* binding */ getRestBaseUrl),
/* harmony export */   h: () => (/* binding */ getToken),
/* harmony export */   i: () => (/* binding */ isPortalBackedBySDS),
/* harmony export */   j: () => (/* binding */ inCache),
/* harmony export */   k: () => (/* binding */ getPortalRestBaseUrl),
/* harmony export */   l: () => (/* binding */ getFederatedServers),
/* harmony export */   p: () => (/* binding */ pollForStatus),
/* harmony export */   q: () => (/* binding */ queryGroups),
/* harmony export */   r: () => (/* binding */ request)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */





function getToken(portal) {
  var _a, _b, _c, _d;
  portal !== null && portal !== void 0 ? portal : (portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal);
  return (((_a = portal === null || portal === void 0 ? void 0 : portal.credential) === null || _a === void 0 ? void 0 : _a.token) || (portal === null || portal === void 0 ? void 0 : portal.token) || ((_c = (_b = portal === null || portal === void 0 ? void 0 : portal.user) === null || _b === void 0 ? void 0 : _b.credential) === null || _c === void 0 ? void 0 : _c.token) || ((_d = portal === null || portal === void 0 ? void 0 : portal.portalUser) === null || _d === void 0 ? void 0 : _d.token) || "");
}

function useSSL(url) {
  var _a;
  const { config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  // if user logged in via pop-up in viewer, the page might still be under http but the self response might have allSSL
  if (window.location.protocol === "https:" || ((_a = config === null || config === void 0 ? void 0 : config.self) === null || _a === void 0 ? void 0 : _a.allSSL) === true) {
    return url.replace("http:", "https:");
  }
  return url;
}
async function formRequest(url, form, options = {}, method) {
  const [esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/request"]);
  const { api } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  if (!url.includes("f=")) {
    form.append("f", "json");
  }
  const token = getToken();
  if (token && !form.has("token")) {
    form.append("token", token);
  }
  return new Promise((resolve, reject) => {
    if (api === 3) {
      const request = { url: options.addSSL === false ? url : useSSL(url), form, timeout: options.timeout || 0 };
      const v3Options = method === "post" ? Object.assign({ usePost: true }, options) : options;
      esriRequest(request, v3Options).then(resolve, reject);
    }
    else {
      esriRequest(url, Object.assign(Object.assign({ body: form }, options), { timeout: options.timeout || 0, method: method || "auto" }))
        .then((response) => {
        resolve(response.data);
      })
        .catch((error) => reject(error));
    }
  });
}
async function request(url, params = {}, options = {}, method, extraOption) {
  const [esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/request"]);
  // TODO: refactor this dude out
  const { api, portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  const content = Object.assign({}, params);
  if (!url.includes("f=") && (extraOption === null || extraOption === void 0 ? void 0 : extraOption.excludeJson) !== true) {
    content.f = "json";
  }
  if (options.addTokenManually !== false) {
    const token = await getPortalToken(portal, api);
    content.token = token;
  }
  const requestUrl = options.addSSL === false ? url : useSSL(url);
  if (api === 3) {
    const v3Request = Object.assign({ url: requestUrl, content, timeout: options.timeout || 0, withCredentials: options.withCredentials }, extraOption === null || extraOption === void 0 ? void 0 : extraOption.v3Request);
    const v3Options = method === "post" ? Object.assign({ usePost: true }, options) : options;
    return esriRequest(v3Request, v3Options);
  }
  else {
    const v4Options = Object.assign(Object.assign(Object.assign({ query: content, method: method || "auto" }, options), { timeout: options.timeout || 0 }), ((options === null || options === void 0 ? void 0 : options.disableIdentityLookup) ? { authMode: "anonymous" } : {}));
    const response = await esriRequest(requestUrl, v4Options);
    return response.data;
  }
}
// https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/pages/item/widgets/typeOptions/featureSupport.ts#L37-L66
const ASYNC_INTERVALS = [
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 120
];
function asyncIntervalTimerFunction(callCount) {
  // if call count out of bounds, use last interval, otherwise use interval at callCount
  const index = callCount > -1 && callCount < ASYNC_INTERVALS.length - 1 ? callCount : ASYNC_INTERVALS.length - 1;
  // ASYNC_INTERVALS defined in seconds, convert to milliseconds on return
  return ASYNC_INTERVALS[index] * 1000;
}
const pollForStatus = async (url, options, method) => {
  var _a, _b;
  const pendingStatuses = (_a = options === null || options === void 0 ? void 0 : options.pendingStatuses) !== null && _a !== void 0 ? _a : ["processing", "partial", "Pending", "InProgress", "EXECUTING"];
  const successStatuses = (_b = options === null || options === void 0 ? void 0 : options.successStatuses) !== null && _b !== void 0 ? _b : ["completed", "Completed", "COMPLETED"];
  let pollCount = 0;
  const poll = async () => {
    // Keep polling status until either completed or failed
    // Do failures report as success (status 200)? May need to manually throw error on status check failure
    const statusResponse = await request(url, options === null || options === void 0 ? void 0 : options.requestParams, {}, method);
    const status = statusResponse.status || statusResponse.jobStatus;
    if (pendingStatuses.includes(status)) {
      await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__.t)(asyncIntervalTimerFunction(pollCount++));
      return poll();
    }
    else if (successStatuses.includes(status)) {
      return statusResponse;
    }
    else {
      throw statusResponse;
    }
  };
  try {
    return poll();
  }
  catch (e) {
    console.error(e);
    throw e;
  }
};

const cache = {};
const requestCache = {};
const cacheMetadata = {};
/**
 * Allows memory caching of requests which are expected to be called multiple times
 * @param requester - function which fetches the data to be cached
 * @param key - unique global name for this cache type - see {@link CacheType}
 * @param id - unique id for this result inside this particular cache
 */
async function fromCache(requester, key, id, cacheOption) {
  var _a, _b, _c, _d;
  const cacheExpirationTime = (_b = (_a = cacheMetadata[key]) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b.expireAt;
  const isExpired = !!cacheExpirationTime && new Date().getTime() > cacheExpirationTime;
  if (((_c = cache[key]) === null || _c === void 0 ? void 0 : _c[id]) && !isExpired) {
    return cache[key][id];
  }
  if (!requestCache[key]) {
    requestCache[key] = {};
  }
  // If it's expired, we want to re-run the entire request again, not just using the old promise
  // else we'll use the outdated data
  if (!requestCache[key][id] || isExpired) {
    requestCache[key][id] = requester();
  }
  const result = (await requestCache[key][id]);
  if (!cache[key]) {
    cache[key] = {};
  }
  if (!cacheMetadata[key]) {
    cacheMetadata[key] = {};
  }
  cache[key][id] = result;
  if (cacheOption) {
    const { expireAfter, getExpireAfterFromResult } = cacheOption;
    const expireAt = getExpireAfterFromResult || expireAfter
      ? new Date().getTime() + ((_d = getExpireAfterFromResult === null || getExpireAfterFromResult === void 0 ? void 0 : getExpireAfterFromResult(result)) !== null && _d !== void 0 ? _d : expireAfter)
      : null;
    cacheMetadata[key][id] = Object.assign(Object.assign({}, cacheMetadata[key][id]), { expireAt });
  }
  return result;
}
/**
 * Checks for a value in the cache and returns if there
 * If missing, no requests will be performed
 * @param key - unique global name for this cache type - see {@link CacheType}
 * @param id - unique id for this result inside this particular cache, will clear all entries if not provided
 * @example
 * inCache("serviceInfo", "uniqueitemid");
 */
function inCache(key, id) {
  var _a;
  return (_a = cache === null || cache === void 0 ? void 0 : cache[key]) === null || _a === void 0 ? void 0 : _a[id];
}
/**
 * Clear a particular cache entry or all entries for a particular cache type
 * @param key - unique global name for this cache type - see {@link CacheType}
 * @param id - unique id for this result inside this particular cache, will clear all entries if not provided
 * @example
 * clearCache("userGroups", "unique");
 * clearCache("userGroups");
 */
const clearCache = (key, id) => {
  var _a, _b;
  if (id) {
    (_a = cache[key]) === null || _a === void 0 ? true : delete _a[id];
    (_b = requestCache[key]) === null || _b === void 0 ? true : delete _b[id];
  }
  else {
    delete cache[key];
    delete requestCache[key];
  }
};

function getRestBaseUrl(portal) {
  var _a;
  const { portal: configPortal, config } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c || {};
  return (_a = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.d)(config === null || config === void 0 ? void 0 : config.restBaseUrl)) !== null && _a !== void 0 ? _a : getPortalRestBaseUrl(portal || configPortal);
}
function getPortalRestBaseUrl(portal) {
  var _a;
  return (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.d)((_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl);
}
/**
 * Get the portal's token and also handle web-tier authentication Enterprise case
 */
const getPortalToken = async (portal, api) => {
  var _a, _b;
  // `portal` can be unexpectedly undefined
  // https://devtopia.esri.com/WebGIS/arcgis-app-components/pull/5113
  if (!(portal === null || portal === void 0 ? void 0 : portal.isPortal) || !portal.isWebTierAuth) {
    return getToken(portal);
  }
  const { token } = await fromCache(() => getPlatformSelf(portal, api !== null && api !== void 0 ? api : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.api), "platformSelf", (_b = (_a = portal.user) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : portal.id, { getExpireAfterFromResult: (result) => result.expires_in });
  return token;
};
/**
 * Get the active client id. Defaults to "arcgisonline".
 */
const getClientId = async (portal, api) => {
  var _a, _b, _c, _d;
  const is3x = api === 3;
  const [IdentityManager] = await _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.e.loadModules([is3x ? "esri/IdentityManager" : "esri/identity/IdentityManager"]);
  const credential = await fromCache(() => IdentityManager.getCredential(getRestBaseUrl(portal), { oAuthPopupConfirmation: false }), "credential", (_a = portal.user) === null || _a === void 0 ? void 0 : _a.id);
  return ((_d = (is3x
    ? (_b = credential._oAuthCred) === null || _b === void 0 ? void 0 : _b.appId
    : (_c = credential.oAuthState) === null || _c === void 0 ? void 0 : _c.appId)) !== null && _d !== void 0 ? _d : "arcgisonline");
};
/**
 * Useful to get the token in web-tier authenticated Enterprise portals
 * Based on https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/master/esri/IdentityManagerBase.js#L1952-L1966
 */
const getPlatformSelf = async (portal, apiVersion) => {
  const appId = await getClientId(portal, apiVersion);
  const headers = {
    "X-Esri-Auth-Client-Id": appId,
    "X-Esri-Auth-Redirect-Uri": window.location.href.replace(/#.*$/, "")
  };
  return request(`${getRestBaseUrl(portal)}/oauth2/platformSelf`, {}, {
    disableIdentityLookup: true,
    headers: apiVersion === 4 ? headers : undefined,
    // To avoid infinite loop since `request` will call this again
    addTokenManually: false,
    withCredentials: true
  }, "post", { v3Request: { headers } });
};
/**
 * `portal.queryGroups` expects slightly different formats in 3.x vs 4.x
 * This is a version-agnostic replacement
 **/
async function queryGroups(params = {}, portal) {
  return request(`${getRestBaseUrl(portal)}/community/groups`, params);
}
/**
 * Get the on premise portals federated servers (must be signed in user to make this call)
 */
const getFederatedServers = async (user, portal) => {
  var _a;
  // Since the user must be signed in to make the call, this is required
  if (!user) {
    return [];
  }
  const restBaseUrl = `${(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.d)((_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl)}portals/self/servers`;
  const result = await request(restBaseUrl);
  return result === null || result === void 0 ? void 0 : result.servers;
};
const getPortalRestInfo = (portal) => {
  return getPortalRestInfoFromUrl(getPortalRestBaseUrl(portal));
};
const getPortalRestInfoFromUrl = (url) => {
  var _a;
  // Sometimes serviceUrl/info will return nothing so we need to extract the `rest` out
  const infoUrl = `${(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.d)((_a = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.l)(url)) !== null && _a !== void 0 ? _a : url)}info`;
  // Most likely this info won't change so it's safe to use `fromCache`
  return fromCache(() => request(infoUrl, {}, { addTokenManually: false }), "portalInfo", infoUrl);
};
const isPortalBackedBySDS = async (portal, user) => {
  if (portal.isBackedBySDS) {
    return { result: true };
  }
  // Only full admin or specific admin privileges on a custom role are
  // allowed to access the server admin endpoint
  const isAdmin = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.e)(user) ||
    (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.f)(user) ||
    (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.g)(user) ||
    (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.h)(user) ||
    (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.j)(user);
  if (portal.isPortal && user && (isAdmin || (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.k)(user))) {
    try {
      // Only on-premise portals need to be checked if they support sds
      // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/3112
      // Get the hosted managed federated Servers (this call requires a signed in user)
      const managedServers = await getManagedServers(user, portal);
      return { result: !!(managedServers === null || managedServers === void 0 ? void 0 : managedServers[0]) };
    }
    catch (error) {
      console.error(error);
      return { error: { code: "unhandledError", message: JSON.stringify(error) }, result: false };
    }
  }
  // If not portal then it will always supports everything SDS supports
  return { result: true };
};
/**
 * Get the on premise portals managed servers
 */
const getManagedServers = async (user, portal) => {
  const hostedServer = await getHostedFederatedServer(user, portal);
  if (!hostedServer) {
    return null;
  }
  // Find managed servers
  const findItemsUrl = `${hostedServer.adminUrl}/admin/data/findItems`;
  const managedServers = await request(findItemsUrl, { managed: true });
  // where provider is "ArcGIS Data Store"
  return managedServers.items.filter((managedServer) => { var _a; return ((_a = managedServer.provider) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "arcgis data store"; });
};
/**
 * Get the on premise portals hosted federated servers
 */
const getHostedFederatedServer = async (user, portal) => {
  var _a;
  const federatedServers = (_a = (await getFederatedServers(user, portal))) !== null && _a !== void 0 ? _a : [];
  return federatedServers.filter((server) => server.isHosted)[0];
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,