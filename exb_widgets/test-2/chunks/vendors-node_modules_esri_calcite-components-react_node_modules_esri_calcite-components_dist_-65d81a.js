"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_esri_calcite-components-react_node_modules_esri_calcite-components_dist_-65d81a"],{

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/calcite-headless.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/calcite-headless.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CoreSizing15),
/* harmony export */   a: () => (/* binding */ CoreBreakpointWidthDefaultMd),
/* harmony export */   b: () => (/* binding */ CoreBreakpointWidthDefaultSm),
/* harmony export */   c: () => (/* binding */ CoreBreakpointWidthDefaultXs),
/* harmony export */   d: () => (/* binding */ CoreBreakpointWidthDefaultXxs),
/* harmony export */   e: () => (/* binding */ CoreBreakpointWidthDefaultLg)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */
/**
 * Do not edit directly
 * Generated on Tue, 21 Nov 2023 22:52:13 GMT
 */
const CoreSizing15 = "48px";
const CoreBreakpointWidthDefaultXxs = "320px";
const CoreBreakpointWidthDefaultXs = "476px";
const CoreBreakpointWidthDefaultSm = "768px";
const CoreBreakpointWidthDefaultMd = "1152px";
const CoreBreakpointWidthDefaultLg = "1440px";




/***/ }),

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/combobox.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/combobox.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ Combobox),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@esri/calcite-components-react/node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _filter2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter2.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/filter2.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/dom.js");
/* harmony import */ var _floating_ui_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./floating-ui.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/floating-ui.js");
/* harmony import */ var _form_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./form.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/form.js");
/* harmony import */ var _guid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./guid.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/guid.js");
/* harmony import */ var _interactive_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./interactive.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/interactive.js");
/* harmony import */ var _label2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./label2.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/label2.js");
/* harmony import */ var _loadable_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loadable.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/loadable.js");
/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./locale.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/locale.js");
/* harmony import */ var _observers_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./observers.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/observers.js");
/* harmony import */ var _openCloseComponent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./openCloseComponent.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/openCloseComponent.js");
/* harmony import */ var _t9n_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./t9n.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/t9n.js");
/* harmony import */ var _utils2_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils2.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/utils2.js");
/* harmony import */ var _component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./component.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/component.js");
/* harmony import */ var _calcite_headless_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./calcite-headless.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/calcite-headless.js");
/* harmony import */ var _chip_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./chip.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/chip.js");
/* harmony import */ var _icon_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./icon.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/icon.js");
/* harmony import */ var _debounce_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./debounce.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/debounce.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */




















const CSS = {
  button: "x-button",
};
function XButton({ disabled, key, label, onClick, ref, scale, }) {
  return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("button", { "aria-label": label, class: CSS.button, disabled: disabled, key: key, onClick: onClick, tabIndex: -1, type: "button", 
    // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
    ref: ref },
    (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-icon", { icon: "x", scale: (0,_component_js__WEBPACK_IMPORTED_MODULE_13__.g)(scale) })));
}

const comboboxCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:block}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}:host([scale=s]) .x-button{inline-size:1rem;block-size:1rem}:host([scale=m]) .x-button{inline-size:1.5rem;block-size:1.5rem}:host([scale=l]) .x-button{inline-size:2rem;block-size:2rem}.x-button{margin:0px;display:flex;cursor:pointer;appearance:none;align-content:center;align-items:center;justify-content:center;align-self:center;border-width:2px;background-color:transparent;color:var(--calcite-ui-text-3);outline-color:transparent;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;border-radius:50%;border-color:transparent;background-color:var(--calcite-ui-foreground-2)}.x-button:active,.x-button:hover{color:var(--calcite-ui-text-1);background-color:var(--calcite-ui-foreground-3)}.x-button:active{border-style:solid;border-color:var(--calcite-ui-brand)}.x-button calcite-icon{color:inherit}:host([scale=s]){font-size:var(--calcite-font-size--2);--calcite-combobox-item-spacing-unit-l:0.5rem;--calcite-combobox-item-spacing-unit-s:0.25rem;--calcite-combobox-input-height:1rem;--calcite-internal-combobox-input-margin-block:calc(0.25rem - 1px)}:host([scale=s]) .x-button{margin-inline:0.5rem}:host([scale=m]){font-size:var(--calcite-font-size--1);--calcite-combobox-item-spacing-unit-l:0.75rem;--calcite-combobox-item-spacing-unit-s:0.5rem;--calcite-combobox-input-height:1rem;--calcite-internal-combobox-input-margin-block:calc(0.5rem - 1px)}:host([scale=m]) .x-button{margin-inline-end:0.75rem}:host([scale=l]){font-size:var(--calcite-font-size-0);--calcite-combobox-item-spacing-unit-l:1rem;--calcite-combobox-item-spacing-unit-s:0.75rem;--calcite-combobox-input-height:1.5rem;--calcite-internal-combobox-input-margin-block:calc(0.625rem - 1px)}:host([scale=l]) .x-button{margin-inline-end:1rem}.wrapper{display:flex;border-width:1px;border-style:solid;border-color:var(--calcite-ui-border-input);background-color:var(--calcite-ui-foreground-1);color:var(--calcite-ui-text-1);outline-color:transparent;padding-block:calc(var(--calcite-combobox-item-spacing-unit-s) / 4);padding-inline:var(--calcite-combobox-item-spacing-unit-l)}:host(:focus-within) .wrapper,.wrapper--active{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-ui-brand));outline-offset:calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-ui-focus-offset-invert),\n                1\n              )\n            )\n          )}.wrapper--single{padding-block:0;padding-inline:var(--calcite-combobox-item-spacing-unit-l);cursor:pointer;flex-wrap:nowrap}.grid-input{position:relative;display:flex;flex-grow:1;flex-wrap:wrap;align-items:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:0px;gap:var(--calcite-combobox-item-spacing-unit-s)}.grid-input.selection-display-fit,.grid-input.selection-display-single{flex-wrap:nowrap;overflow:hidden}.input{flex-grow:1;appearance:none;text-overflow:ellipsis;border-style:none;background-color:transparent;padding:0px;font-family:inherit;color:var(--calcite-ui-text-1);font-size:inherit;block-size:var(--calcite-combobox-input-height);line-height:var(--calcite-combobox-input-height);inline-size:100%;margin-block-end:var(--calcite-combobox-item-spacing-unit-s);min-inline-size:4.8125rem}.input:focus{outline:2px solid transparent;outline-offset:2px}.input:placeholder-shown{text-overflow:ellipsis}.input--transparent{opacity:0}.input--single{padding:0px;margin-block:var(--calcite-internal-combobox-input-margin-block)}.wrapper--active .input-single{cursor:text}.input--hidden{pointer-events:none;inline-size:0px;min-inline-size:0px;opacity:0}.input--icon{padding-block:0;padding-inline:var(--calcite-combobox-item-spacing-unit-s)}:host([scale=m]) .input--icon,:host([scale=l]) .input--icon{padding-inline:0.25rem}.input-wrap{display:flex;flex-grow:1;align-items:center}.input-wrap--single{flex:1 1 0%;overflow:hidden}.label{pointer-events:none;display:flex;max-inline-size:100%;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:0px;font-weight:var(--calcite-font-weight-normal);block-size:var(--calcite-combobox-input-height);line-height:var(--calcite-combobox-input-height)}.label--icon{padding-inline:var(--calcite-combobox-item-spacing-unit-l)}.icon-end,.icon-start{display:flex;cursor:pointer;align-items:center}.icon-end{flex:none}.floating-ui-container{--calcite-floating-ui-z-index:var(--calcite-app-z-index-dropdown);display:block;position:absolute;z-index:var(--calcite-floating-ui-z-index);visibility:hidden}.floating-ui-container .calcite-floating-ui-anim{position:relative;transition:var(--calcite-floating-ui-transition);transition-property:transform, visibility, opacity;opacity:0;box-shadow:0 0 16px 0 rgba(0, 0, 0, 0.16);z-index:var(--calcite-app-z-index);border-radius:0.25rem}.floating-ui-container[data-placement^=bottom] .calcite-floating-ui-anim{transform:translateY(-5px)}.floating-ui-container[data-placement^=top] .calcite-floating-ui-anim{transform:translateY(5px)}.floating-ui-container[data-placement^=left] .calcite-floating-ui-anim{transform:translateX(5px)}.floating-ui-container[data-placement^=right] .calcite-floating-ui-anim{transform:translateX(-5px)}.floating-ui-container[data-placement] .calcite-floating-ui-anim--active{opacity:1;transform:translate(0)}.floating-ui-container--active{visibility:visible}@media (forced-colors: active){.wrapper,.floating-ui-container--active{border:1px solid canvasText}}.screen-readers-only{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.list-container{max-block-size:45vh;overflow-y:auto;background-color:var(--calcite-ui-foreground-1);inline-size:var(--calcite-dropdown-width)}.list{margin:0px;display:block;padding:0px}.list--hide{block-size:0px;overflow:hidden}calcite-chip{--calcite-animation-timing:0}.chip{margin-block:calc(var(--calcite-combobox-item-spacing-unit-s) / 4);max-inline-size:100%}.chip--active{background-color:var(--calcite-ui-foreground-3)}.chip--invisible{visibility:hidden;position:absolute}.item{display:block}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}:host([hidden]){display:none}[hidden]{display:none}::slotted(calcite-combobox-item-group:not(:first-child)){padding-block-start:var(--calcite-combobox-item-spacing-unit-l)}";

const isGroup = (el) => el.tagName === _utils2_js__WEBPACK_IMPORTED_MODULE_12__.f;
const itemUidPrefix = "combobox-item-";
const chipUidPrefix = "combobox-chip-";
const labelUidPrefix = "combobox-label-";
const listboxUidPrefix = "combobox-listbox-";
const inputUidPrefix = "combobox-input-";
const Combobox = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteComboboxChange = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.createEvent)(this, "calciteComboboxChange", 6);
    this.calciteComboboxFilterChange = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.createEvent)(this, "calciteComboboxFilterChange", 6);
    this.calciteComboboxChipClose = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.createEvent)(this, "calciteComboboxChipClose", 6);
    this.calciteComboboxBeforeClose = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.createEvent)(this, "calciteComboboxBeforeClose", 6);
    this.calciteComboboxClose = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.createEvent)(this, "calciteComboboxClose", 6);
    this.calciteComboboxBeforeOpen = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.createEvent)(this, "calciteComboboxBeforeOpen", 6);
    this.calciteComboboxOpen = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.createEvent)(this, "calciteComboboxOpen", 6);
    this.placement = _floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.d;
    this.internalValueChangeFlag = false;
    this.textInput = null;
    this.mutationObserver = (0,_observers_js__WEBPACK_IMPORTED_MODULE_9__.c)("mutation", () => this.updateItems());
    this.resizeObserver = (0,_observers_js__WEBPACK_IMPORTED_MODULE_9__.c)("resize", () => {
      this.setMaxScrollerHeight();
      this.refreshSelectionDisplay();
    });
    this.guid = (0,_guid_js__WEBPACK_IMPORTED_MODULE_4__.g)();
    this.inputHeight = 0;
    this.ignoreSelectedEventsFlag = false;
    this.openTransitionProp = "opacity";
    this.setFilteredPlacements = () => {
      const { el, flipPlacements } = this;
      this.filteredFlipPlacements = flipPlacements
        ? (0,_floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.f)(flipPlacements, el)
        : null;
    };
    this.getValue = () => {
      const items = this.selectedItems.map((item) => item?.value?.toString());
      return items?.length ? (items.length > 1 ? items : items[0]) : "";
    };
    this.onLabelClick = () => {
      this.setFocus();
    };
    this.keyDownHandler = (event) => {
      const { key } = event;
      switch (key) {
        case "Tab":
          this.activeChipIndex = -1;
          this.activeItemIndex = -1;
          if (this.allowCustomValues && this.text) {
            this.addCustomChip(this.text, true);
            event.preventDefault();
          }
          else if (this.open) {
            this.open = false;
            event.preventDefault();
          }
          else if (!this.allowCustomValues && this.text) {
            this.clearInputValue();
            this.filterItems("");
            this.updateActiveItemIndex(-1);
          }
          break;
        case "ArrowLeft":
          this.previousChip();
          event.preventDefault();
          break;
        case "ArrowRight":
          this.nextChip();
          event.preventDefault();
          break;
        case "ArrowUp":
          event.preventDefault();
          if (this.open) {
            this.shiftActiveItemIndex(-1);
          }
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case "ArrowDown":
          event.preventDefault();
          if (this.open) {
            this.shiftActiveItemIndex(1);
          }
          else {
            this.open = true;
            this.ensureRecentSelectedItemIsActive();
          }
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case " ":
          if (!this.textInput.value) {
            if (!this.open) {
              this.open = true;
              this.shiftActiveItemIndex(1);
            }
            event.preventDefault();
          }
          break;
        case "Home":
          if (!this.open) {
            return;
          }
          event.preventDefault();
          this.updateActiveItemIndex(0);
          this.scrollToActiveItem();
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case "End":
          if (!this.open) {
            return;
          }
          event.preventDefault();
          this.updateActiveItemIndex(this.filteredItems.length - 1);
          this.scrollToActiveItem();
          if (!this.comboboxInViewport()) {
            this.el.scrollIntoView();
          }
          break;
        case "Escape":
          if (!this.clearDisabled && !this.open) {
            this.clearValue();
          }
          this.open = false;
          event.preventDefault();
          break;
        case "Enter":
          if (this.activeItemIndex > -1) {
            this.toggleSelection(this.filteredItems[this.activeItemIndex]);
            event.preventDefault();
          }
          else if (this.activeChipIndex > -1) {
            this.removeActiveChip();
            event.preventDefault();
          }
          else if (this.allowCustomValues && this.text) {
            this.addCustomChip(this.text, true);
            event.preventDefault();
          }
          else if (!event.defaultPrevented) {
            if ((0,_form_js__WEBPACK_IMPORTED_MODULE_3__.s)(this)) {
              event.preventDefault();
            }
          }
          break;
        case "Delete":
        case "Backspace":
          if (this.activeChipIndex > -1) {
            event.preventDefault();
            this.removeActiveChip();
          }
          else if (!this.text && this.isMulti()) {
            event.preventDefault();
            this.removeLastChip();
          }
          break;
      }
    };
    this.toggleCloseEnd = () => {
      this.open = false;
      this.el.removeEventListener("calciteComboboxClose", this.toggleCloseEnd);
    };
    this.toggleOpenEnd = () => {
      this.open = false;
      this.el.removeEventListener("calciteComboboxOpen", this.toggleOpenEnd);
    };
    this.setMaxScrollerHeight = async () => {
      const { listContainerEl, open, referenceEl } = this;
      if (!listContainerEl || !open) {
        return;
      }
      await this.reposition(true);
      const maxScrollerHeight = this.getMaxScrollerHeight();
      listContainerEl.style.maxHeight = maxScrollerHeight > 0 ? `${maxScrollerHeight}px` : "";
      listContainerEl.style.minWidth = `${referenceEl.clientWidth}px`;
      await this.reposition(true);
    };
    this.calciteChipCloseHandler = (comboboxItem) => {
      this.open = false;
      const selection = this.items.find((item) => item === comboboxItem);
      if (selection) {
        this.toggleSelection(selection, false);
      }
      this.calciteComboboxChipClose.emit();
    };
    this.clickHandler = (event) => {
      const composedPath = event.composedPath();
      if (composedPath.some((node) => node.tagName === "CALCITE-CHIP")) {
        this.open = false;
        event.preventDefault();
        return;
      }
      if (composedPath.some((node) => node.classList?.contains(CSS.button))) {
        this.clearValue();
        event.preventDefault();
        return;
      }
      this.open = !this.open;
      this.ensureRecentSelectedItemIsActive();
    };
    this.refreshSelectionDisplay = async () => {
      await (0,_loadable_js__WEBPACK_IMPORTED_MODULE_7__.b)(this);
      if ((0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.i)(this.selectionMode)) {
        return;
      }
      if (!this.textInput) {
        return;
      }
      const { allSelectedIndicatorChipEl, chipContainerEl, selectionDisplay, placeholder, selectedIndicatorChipEl, textInput, } = this;
      const chipContainerElGap = parseInt(getComputedStyle(chipContainerEl).gap.replace("px", ""));
      const chipContainerElWidth = (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.u)(chipContainerEl);
      const { fontSize, fontFamily } = getComputedStyle(textInput);
      const inputTextWidth = (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.v)(placeholder, `${fontSize} ${fontFamily}`);
      const inputWidth = (inputTextWidth || parseInt(_calcite_headless_js__WEBPACK_IMPORTED_MODULE_14__.C)) + chipContainerElGap;
      const allSelectedIndicatorChipElWidth = (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.u)(allSelectedIndicatorChipEl);
      const selectedIndicatorChipElWidth = (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.u)(selectedIndicatorChipEl);
      const largestSelectedIndicatorChipWidth = Math.max(allSelectedIndicatorChipElWidth, selectedIndicatorChipElWidth);
      this.setCompactSelectionDisplay({
        chipContainerElGap,
        chipContainerElWidth,
        inputWidth,
        largestSelectedIndicatorChipWidth,
      });
      if (selectionDisplay === "fit") {
        const chipEls = Array.from(this.el.shadowRoot.querySelectorAll("calcite-chip")).filter((chipEl) => chipEl.closable);
        const availableHorizontalChipElSpace = Math.round(chipContainerElWidth -
          ((this.selectedHiddenChipsCount > 0 ? selectedIndicatorChipElWidth : 0) +
            chipContainerElGap +
            inputWidth +
            chipContainerElGap));
        this.refreshChipDisplay({ availableHorizontalChipElSpace, chipContainerElGap, chipEls });
        this.setVisibleAndHiddenChips(chipEls);
      }
    };
    this.setFloatingEl = (el) => {
      this.floatingEl = el;
      (0,_floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.c)(this, this.referenceEl, this.floatingEl);
    };
    this.setContainerEl = (el) => {
      this.resizeObserver.observe(el);
      this.listContainerEl = el;
      this.transitionEl = el;
    };
    this.setChipContainerEl = (el) => {
      this.resizeObserver.observe(el);
      this.chipContainerEl = el;
    };
    this.setReferenceEl = (el) => {
      this.referenceEl = el;
      (0,_floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.c)(this, this.referenceEl, this.floatingEl);
    };
    this.setAllSelectedIndicatorChipEl = (el) => {
      this.allSelectedIndicatorChipEl = el;
    };
    this.setSelectedIndicatorChipEl = (el) => {
      this.selectedIndicatorChipEl = el;
    };
    this.inputHandler = (event) => {
      const value = event.target.value;
      this.text = value;
      this.filterItems(value);
      if (value) {
        this.activeChipIndex = -1;
      }
    };
    this.filterItems = (() => {
      const find = (item, filteredData) => item &&
        filteredData.some(({ label, value }) => isGroup(item) ? label === item.label : value === item.value && label === item.textLabel);
      return (0,_debounce_js__WEBPACK_IMPORTED_MODULE_17__.d)((text) => {
        const filteredData = (0,_filter2_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.data, text);
        const itemsAndGroups = this.getItemsAndGroups();
        itemsAndGroups.forEach((item) => {
          const hidden = !find(item, filteredData);
          item.hidden = hidden;
          const [parent, grandparent] = item.ancestors;
          if (find(parent, filteredData) || find(grandparent, filteredData)) {
            item.hidden = false;
          }
          if (!hidden) {
            item.ancestors.forEach((ancestor) => (ancestor.hidden = false));
          }
        });
        this.filteredItems = this.getFilteredItems();
        this.calciteComboboxFilterChange.emit();
      }, 100);
    })();
    this.internalComboboxChangeEvent = () => {
      this.calciteComboboxChange.emit();
    };
    this.emitComboboxChange = (0,_debounce_js__WEBPACK_IMPORTED_MODULE_17__.d)(this.internalComboboxChangeEvent, 0);
    this.getSelectedItems = () => {
      if (!this.isMulti()) {
        const match = this.items.find(({ selected }) => selected);
        return match ? [match] : [];
      }
      return (this.items
        .filter((item) => item.selected && (this.selectionMode !== "ancestors" || !(0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.h)(item)))
        /** Preserve order of entered tags */
        .sort((a, b) => {
        const aIdx = this.selectedItems.indexOf(a);
        const bIdx = this.selectedItems.indexOf(b);
        if (aIdx > -1 && bIdx > -1) {
          return aIdx - bIdx;
        }
        return bIdx - aIdx;
      }));
    };
    this.updateItems = () => {
      this.items = this.getItems();
      this.groupItems = this.getGroupItems();
      this.data = this.getData();
      this.selectedItems = this.getSelectedItems();
      this.filteredItems = this.getFilteredItems();
      this.needsIcon = this.getNeedsIcon();
      this.items.forEach((item) => {
        item.selectionMode = this.selectionMode;
        item.scale = this.scale;
      });
      if (!this.allowCustomValues) {
        this.setMaxScrollerHeight();
      }
      this.groupItems.forEach((groupItem, index, items) => {
        if (index === 0) {
          groupItem.afterEmptyGroup = false;
        }
        const nextGroupItem = items[index + 1];
        if (nextGroupItem) {
          nextGroupItem.afterEmptyGroup = groupItem.children.length === 0;
        }
      });
    };
    this.scrollToActiveItem = () => {
      const activeItem = this.filteredItems[this.activeItemIndex];
      if (!activeItem) {
        return;
      }
      const height = this.calculateSingleItemHeight(activeItem);
      const { offsetHeight, scrollTop } = this.listContainerEl;
      if (offsetHeight + scrollTop < activeItem.offsetTop + height) {
        this.listContainerEl.scrollTop = activeItem.offsetTop - offsetHeight + height;
      }
      else if (activeItem.offsetTop < scrollTop) {
        this.listContainerEl.scrollTop = activeItem.offsetTop;
      }
    };
    this.comboboxFocusHandler = () => {
      if (this.disabled) {
        return;
      }
      this.textInput?.focus();
    };
    this.clearDisabled = false;
    this.selectionDisplay = "all";
    this.open = false;
    this.disabled = false;
    this.form = undefined;
    this.label = undefined;
    this.placeholder = undefined;
    this.placeholderIcon = undefined;
    this.placeholderIconFlipRtl = false;
    this.maxItems = 0;
    this.name = undefined;
    this.allowCustomValues = undefined;
    this.overlayPositioning = "absolute";
    this.required = false;
    this.selectionMode = "multiple";
    this.scale = "m";
    this.value = null;
    this.flipPlacements = undefined;
    this.messages = undefined;
    this.messageOverrides = undefined;
    this.selectedItems = [];
    this.filteredItems = [];
    this.items = [];
    this.groupItems = [];
    this.needsIcon = undefined;
    this.activeItemIndex = -1;
    this.activeChipIndex = -1;
    this.activeDescendant = "";
    this.compactSelectionDisplay = false;
    this.selectedHiddenChipsCount = 0;
    this.selectedVisibleChipsCount = 0;
    this.text = "";
    this.effectiveLocale = undefined;
    this.defaultMessages = undefined;
  }
  openHandler() {
    (0,_openCloseComponent_js__WEBPACK_IMPORTED_MODULE_10__.o)(this);
    if (this.disabled) {
      this.open = false;
      return;
    }
    this.setMaxScrollerHeight();
  }
  handleDisabledChange(value) {
    if (!value) {
      this.open = false;
    }
  }
  maxItemsHandler() {
    this.setMaxScrollerHeight();
  }
  overlayPositioningHandler() {
    this.reposition(true);
  }
  handlePropsChange() {
    this.updateItems();
  }
  valueHandler(value) {
    if (!this.internalValueChangeFlag) {
      const items = this.getItems();
      if (Array.isArray(value)) {
        items.forEach((item) => (item.selected = value.includes(item.value)));
      }
      else if (value) {
        items.forEach((item) => (item.selected = value === item.value));
      }
      else {
        items.forEach((item) => (item.selected = false));
      }
      this.updateItems();
    }
  }
  onMessagesChange() {
    /*  wired up by t9n util */
  }
  flipPlacementsHandler() {
    this.setFilteredPlacements();
    this.reposition(true);
  }
  selectedItemsHandler() {
    this.internalValueChangeFlag = true;
    this.value = this.getValue();
    this.internalValueChangeFlag = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  documentClickHandler(event) {
    if (this.disabled || !(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
      return;
    }
    const composedPath = event.composedPath();
    if (composedPath.includes(this.el) || composedPath.includes(this.referenceEl)) {
      return;
    }
    if (!this.allowCustomValues && this.textInput.value) {
      this.clearInputValue();
      this.filterItems("");
      this.updateActiveItemIndex(-1);
    }
    if (this.allowCustomValues && this.text.trim().length) {
      this.addCustomChip(this.text);
    }
    this.open = false;
  }
  calciteComboboxItemChangeHandler(event) {
    if (this.ignoreSelectedEventsFlag) {
      return;
    }
    const target = event.target;
    const newIndex = this.filteredItems.indexOf(target);
    this.updateActiveItemIndex(newIndex);
    this.toggleSelection(target, target.selected);
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Updates the position of the component.
   *
   * @param delayed Reposition the component after a delay
   * @returns Promise
   */
  async reposition(delayed = false) {
    const { floatingEl, referenceEl, placement, overlayPositioning, filteredFlipPlacements } = this;
    return (0,_floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.r)(this, {
      floatingEl,
      referenceEl,
      overlayPositioning,
      placement,
      flipPlacements: filteredFlipPlacements,
      type: "menu",
    }, delayed);
  }
  /** Sets focus on the component. */
  async setFocus() {
    await (0,_loadable_js__WEBPACK_IMPORTED_MODULE_7__.c)(this);
    this.textInput?.focus();
    this.activeChipIndex = -1;
    this.activeItemIndex = -1;
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  connectedCallback() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_5__.c)(this);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_8__.c)(this);
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_11__.c)(this);
    (0,_label2_js__WEBPACK_IMPORTED_MODULE_6__.c)(this);
    (0,_form_js__WEBPACK_IMPORTED_MODULE_3__.c)(this);
    this.internalValueChangeFlag = true;
    this.value = this.getValue();
    this.internalValueChangeFlag = false;
    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
    this.updateItems();
    this.setFilteredPlacements();
    this.reposition(true);
    if (this.open) {
      this.openHandler();
      (0,_openCloseComponent_js__WEBPACK_IMPORTED_MODULE_10__.o)(this);
    }
  }
  async componentWillLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_7__.a)(this);
    this.updateItems();
    await (0,_t9n_js__WEBPACK_IMPORTED_MODULE_11__.s)(this);
  }
  componentDidLoad() {
    (0,_form_js__WEBPACK_IMPORTED_MODULE_3__.a)(this, this.getValue());
    this.reposition(true);
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_7__.s)(this);
  }
  componentDidRender() {
    if (this.el.offsetHeight !== this.inputHeight) {
      this.reposition(true);
      this.inputHeight = this.el.offsetHeight;
    }
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_5__.u)(this);
  }
  componentDidUpdate() {
    this.refreshSelectionDisplay();
  }
  disconnectedCallback() {
    this.mutationObserver?.disconnect();
    this.resizeObserver?.disconnect();
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_5__.d)(this);
    (0,_label2_js__WEBPACK_IMPORTED_MODULE_6__.d)(this);
    (0,_form_js__WEBPACK_IMPORTED_MODULE_3__.d)(this);
    (0,_floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.a)(this, this.referenceEl, this.floatingEl);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_8__.d)(this);
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_11__.d)(this);
  }
  /** when search text is cleared, reset active to  */
  textHandler() {
    this.updateActiveItemIndex(-1);
  }
  effectiveLocaleChange() {
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_11__.u)(this, this.effectiveLocale);
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  clearValue() {
    this.ignoreSelectedEventsFlag = true;
    this.items.forEach((el) => (el.selected = false));
    this.ignoreSelectedEventsFlag = false;
    this.selectedItems = [];
    this.emitComboboxChange();
    this.open = false;
    this.updateActiveItemIndex(-1);
    this.resetText();
    this.filterItems("");
    this.setFocus();
  }
  clearInputValue() {
    this.textInput.value = "";
    this.text = "";
  }
  comboboxInViewport() {
    const bounding = this.el.getBoundingClientRect();
    return (bounding.top >= 0 &&
      bounding.left >= 0 &&
      bounding.right <= (window.innerWidth || document.documentElement.clientWidth) &&
      bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight));
  }
  onBeforeOpen() {
    this.scrollToActiveItem();
    this.calciteComboboxBeforeOpen.emit();
  }
  onOpen() {
    this.calciteComboboxOpen.emit();
  }
  onBeforeClose() {
    this.calciteComboboxBeforeClose.emit();
  }
  onClose() {
    this.calciteComboboxClose.emit();
  }
  ensureRecentSelectedItemIsActive() {
    const { selectedItems } = this;
    const targetIndex = selectedItems.length === 0 ? 0 : this.items.indexOf(selectedItems[selectedItems.length - 1]);
    this.updateActiveItemIndex(targetIndex);
  }
  hideChip(chipEl) {
    chipEl.classList.add(_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.chipInvisible);
  }
  showChip(chipEl) {
    chipEl.classList.remove(_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.chipInvisible);
  }
  refreshChipDisplay({ chipEls, availableHorizontalChipElSpace, chipContainerElGap, }) {
    chipEls.forEach((chipEl) => {
      if (!chipEl.selected) {
        this.hideChip(chipEl);
      }
      else {
        const chipElWidth = (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.u)(chipEl);
        if (chipElWidth && chipElWidth < availableHorizontalChipElSpace) {
          availableHorizontalChipElSpace -= chipElWidth + chipContainerElGap;
          this.showChip(chipEl);
          return;
        }
      }
      this.hideChip(chipEl);
    });
  }
  setCompactSelectionDisplay({ chipContainerElGap, chipContainerElWidth, inputWidth, largestSelectedIndicatorChipWidth, }) {
    const newCompactBreakpoint = Math.round(largestSelectedIndicatorChipWidth + chipContainerElGap + inputWidth);
    if (!this.maxCompactBreakpoint || this.maxCompactBreakpoint < newCompactBreakpoint) {
      this.maxCompactBreakpoint = newCompactBreakpoint;
    }
    this.compactSelectionDisplay = chipContainerElWidth < this.maxCompactBreakpoint;
  }
  setVisibleAndHiddenChips(chipEls) {
    let newSelectedVisibleChipsCount = 0;
    chipEls.forEach((chipEl) => {
      if (chipEl.selected && !chipEl.classList.contains(_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.chipInvisible)) {
        newSelectedVisibleChipsCount++;
      }
    });
    if (newSelectedVisibleChipsCount !== this.selectedVisibleChipsCount) {
      this.selectedVisibleChipsCount = newSelectedVisibleChipsCount;
    }
    const newSelectedHiddenChipsCount = this.getSelectedItems().length - newSelectedVisibleChipsCount;
    if (newSelectedHiddenChipsCount !== this.selectedHiddenChipsCount) {
      this.selectedHiddenChipsCount = newSelectedHiddenChipsCount;
    }
  }
  getMaxScrollerHeight() {
    const items = this.getItemsAndGroups().filter((item) => !item.hidden);
    const { maxItems } = this;
    let itemsToProcess = 0;
    let maxScrollerHeight = 0;
    if (items.length > maxItems) {
      items.forEach((item) => {
        if (itemsToProcess < maxItems && maxItems > 0) {
          const height = this.calculateSingleItemHeight(item);
          if (height > 0) {
            maxScrollerHeight += height;
            itemsToProcess++;
          }
        }
      });
    }
    return maxScrollerHeight;
  }
  calculateSingleItemHeight(item) {
    if (!item) {
      return;
    }
    let height = item.offsetHeight;
    // if item has children items, don't count their height twice
    const children = Array.from(item.querySelectorAll(_utils2_js__WEBPACK_IMPORTED_MODULE_12__.b));
    children
      .map((child) => child?.offsetHeight)
      .forEach((offsetHeight) => {
      height -= offsetHeight;
    });
    return height;
  }
  getItemsAndGroups() {
    return [...this.groupItems, ...this.items];
  }
  toggleSelection(item, value = !item.selected) {
    if (!item ||
      (this.selectionMode === "single-persist" && item.selected && item.value === this.value)) {
      return;
    }
    if (this.isMulti()) {
      item.selected = value;
      this.updateAncestors(item);
      this.selectedItems = this.getSelectedItems();
      this.emitComboboxChange();
      this.resetText();
      this.filterItems("");
    }
    else {
      this.ignoreSelectedEventsFlag = true;
      this.items.forEach((el) => (el.selected = el === item ? value : false));
      this.ignoreSelectedEventsFlag = false;
      this.selectedItems = this.getSelectedItems();
      this.emitComboboxChange();
      if (this.textInput) {
        this.textInput.value = item.textLabel;
      }
      this.open = false;
      this.updateActiveItemIndex(-1);
      this.resetText();
      this.filterItems("");
    }
  }
  updateAncestors(item) {
    if (this.selectionMode !== "ancestors") {
      return;
    }
    const ancestors = (0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.c)(item);
    const children = (0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.d)(item);
    if (item.selected) {
      ancestors.forEach((el) => {
        el.selected = true;
      });
    }
    else {
      children.forEach((el) => (el.selected = false));
      [...ancestors].forEach((el) => {
        if (!(0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.h)(el)) {
          el.selected = false;
        }
      });
    }
  }
  getFilteredItems() {
    return this.items.filter((item) => !item.hidden);
  }
  getData() {
    return this.items.map((item) => ({
      filterDisabled: item.filterDisabled,
      value: item.value,
      label: item.textLabel,
    }));
  }
  getNeedsIcon() {
    return (0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.i)(this.selectionMode) && this.items.some((item) => item.icon);
  }
  resetText() {
    if (this.textInput) {
      this.textInput.value = "";
    }
    this.text = "";
  }
  getItems() {
    const items = Array.from(this.el.querySelectorAll(_utils2_js__WEBPACK_IMPORTED_MODULE_12__.e));
    return items.filter((item) => !item.disabled);
  }
  getGroupItems() {
    return Array.from(this.el.querySelectorAll(_utils2_js__WEBPACK_IMPORTED_MODULE_12__.f));
  }
  addCustomChip(value, focus) {
    const existingItem = this.items.find((el) => el.textLabel === value);
    if (existingItem) {
      this.toggleSelection(existingItem, true);
    }
    else {
      if (!this.isMulti()) {
        this.toggleSelection(this.selectedItems[this.selectedItems.length - 1], false);
      }
      const item = document.createElement(_utils2_js__WEBPACK_IMPORTED_MODULE_12__.e);
      item.value = value;
      item.textLabel = value;
      item.selected = true;
      this.el.appendChild(item);
      this.resetText();
      if (focus) {
        this.setFocus();
      }
      this.updateItems();
      this.filterItems("");
      this.emitComboboxChange();
    }
  }
  removeActiveChip() {
    this.toggleSelection(this.selectedItems[this.activeChipIndex], false);
    this.setFocus();
  }
  removeLastChip() {
    this.toggleSelection(this.selectedItems[this.selectedItems.length - 1], false);
    this.setFocus();
  }
  previousChip() {
    if (this.text) {
      return;
    }
    const length = this.selectedItems.length - 1;
    const active = this.activeChipIndex;
    this.activeChipIndex = active === -1 ? length : Math.max(active - 1, 0);
    this.updateActiveItemIndex(-1);
    this.focusChip();
  }
  nextChip() {
    if (this.text || this.activeChipIndex === -1) {
      return;
    }
    const last = this.selectedItems.length - 1;
    const newIndex = this.activeChipIndex + 1;
    if (newIndex > last) {
      this.activeChipIndex = -1;
      this.setFocus();
    }
    else {
      this.activeChipIndex = newIndex;
      this.focusChip();
    }
    this.updateActiveItemIndex(-1);
  }
  focusChip() {
    const guid = this.selectedItems[this.activeChipIndex]?.guid;
    const chip = guid
      ? this.referenceEl.querySelector(`#${chipUidPrefix}${guid}`)
      : null;
    chip?.setFocus();
  }
  shiftActiveItemIndex(delta) {
    const { length } = this.filteredItems;
    const newIndex = (this.activeItemIndex + length + delta) % length;
    this.updateActiveItemIndex(newIndex);
    this.scrollToActiveItem();
  }
  updateActiveItemIndex(index) {
    this.activeItemIndex = index;
    let activeDescendant = null;
    this.filteredItems.forEach((el, i) => {
      if (i === index) {
        el.active = true;
        activeDescendant = `${itemUidPrefix}${el.guid}`;
      }
      else {
        el.active = false;
      }
    });
    this.activeDescendant = activeDescendant;
    if (this.activeItemIndex > -1) {
      this.activeChipIndex = -1;
    }
  }
  isAllSelected() {
    return this.getItems().length === this.getSelectedItems().length;
  }
  isMulti() {
    return !(0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.i)(this.selectionMode);
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  renderChips() {
    const { activeChipIndex, scale, selectionMode, messages } = this;
    return this.selectedItems.map((item, i) => {
      const chipClasses = {
        chip: true,
        "chip--active": activeChipIndex === i,
      };
      const ancestors = [...(0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.c)(item)].reverse();
      const pathLabel = [...ancestors, item].map((el) => el.textLabel);
      const label = selectionMode !== "ancestors" ? item.textLabel : pathLabel.join(" / ");
      return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-chip", { class: chipClasses, closable: true, icon: item.icon, iconFlipRtl: item.iconFlipRtl, id: item.guid ? `${chipUidPrefix}${item.guid}` : null, key: item.textLabel, messageOverrides: { dismissLabel: messages.removeTag }, onCalciteChipClose: () => this.calciteChipCloseHandler(item), scale: scale, selected: item.selected, title: label, value: item.value }, label));
    });
  }
  renderAllSelectedIndicatorChip() {
    const { compactSelectionDisplay, scale, selectedVisibleChipsCount, setAllSelectedIndicatorChipEl, } = this;
    const label = this.messages.allSelected;
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-chip", { class: {
        chip: true,
        [_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.chipInvisible]: !(this.isAllSelected() &&
          !selectedVisibleChipsCount &&
          !compactSelectionDisplay),
      }, scale: scale, title: label, value: "",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setAllSelectedIndicatorChipEl }, label));
  }
  renderAllSelectedIndicatorChipCompact() {
    const { compactSelectionDisplay, scale, selectedVisibleChipsCount } = this;
    const label = this.messages.all || "All";
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-chip", { class: {
        chip: true,
        [_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.chipInvisible]: !(this.isAllSelected() &&
          !selectedVisibleChipsCount &&
          compactSelectionDisplay),
      }, scale: scale, title: label, value: "" }, label));
  }
  renderSelectedIndicatorChip() {
    const { compactSelectionDisplay, selectionDisplay, getSelectedItems, scale, selectedHiddenChipsCount, selectedVisibleChipsCount, setSelectedIndicatorChipEl, } = this;
    let chipInvisible;
    let label;
    if (compactSelectionDisplay) {
      chipInvisible = true;
    }
    else {
      if (selectionDisplay === "single") {
        const selectedItemsCount = getSelectedItems().length;
        if (this.isAllSelected()) {
          chipInvisible = true;
        }
        else if (selectedItemsCount > 0) {
          chipInvisible = false;
        }
        else {
          chipInvisible = true;
        }
        label = `${selectedItemsCount} ${this.messages.selected}`;
      }
      else if (selectionDisplay === "fit") {
        chipInvisible = !!((this.isAllSelected() && selectedVisibleChipsCount === 0) ||
          selectedHiddenChipsCount === 0);
        label =
          selectedVisibleChipsCount > 0
            ? `+${selectedHiddenChipsCount}`
            : `${selectedHiddenChipsCount} ${this.messages.selected}`;
      }
    }
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-chip", { class: {
        chip: true,
        [_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.chipInvisible]: chipInvisible,
      }, scale: scale, title: label, value: "",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setSelectedIndicatorChipEl }, label));
  }
  renderSelectedIndicatorChipCompact() {
    const { compactSelectionDisplay, selectionDisplay, getSelectedItems, scale, selectedHiddenChipsCount, } = this;
    let chipInvisible;
    let label;
    if (compactSelectionDisplay) {
      const selectedItemsCount = getSelectedItems().length;
      if (this.isAllSelected()) {
        chipInvisible = true;
      }
      else if (selectionDisplay === "fit") {
        chipInvisible = !(selectedHiddenChipsCount > 0);
        label = `${selectedHiddenChipsCount || 0}`;
      }
      else if (selectionDisplay === "single") {
        chipInvisible = !(selectedItemsCount > 0);
        label = `${selectedItemsCount}`;
      }
    }
    else {
      chipInvisible = true;
    }
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-chip", { class: {
        chip: true,
        [_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.chipInvisible]: chipInvisible,
      }, scale: scale, title: label, value: "" }, label));
  }
  renderInput() {
    const { guid, disabled, placeholder, selectionMode, selectedItems, open } = this;
    const single = (0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.i)(selectionMode);
    const selectedItem = selectedItems[0];
    const showLabel = !open && single && !!selectedItem;
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("span", { class: {
        "input-wrap": true,
        "input-wrap--single": single,
      } }, showLabel && ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("span", { class: {
        label: true,
        "label--icon": !!selectedItem?.icon,
      }, key: "label" }, selectedItem.textLabel)), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("input", { "aria-activedescendant": this.activeDescendant, "aria-autocomplete": "list", "aria-controls": `${listboxUidPrefix}${guid}`, "aria-label": (0,_label2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this), class: {
        input: true,
        "input--single": true,
        "input--transparent": this.activeChipIndex > -1,
        "input--hidden": showLabel,
        "input--icon": !!this.placeholderIcon,
      }, disabled: disabled, id: `${inputUidPrefix}${guid}`, key: "input", onFocus: this.comboboxFocusHandler, onInput: this.inputHandler, placeholder: placeholder, type: "text",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.textInput = el) })));
  }
  renderListBoxOptions() {
    return this.filteredItems.map((item) => ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("li", { "aria-selected": (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.t)(item.selected), id: item.guid ? `${itemUidPrefix}${item.guid}` : null, role: "option", tabindex: "-1" }, item.textLabel)));
  }
  renderFloatingUIContainer() {
    const { setFloatingEl, setContainerEl, open } = this;
    const classes = {
      [_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.listContainer]: true,
      [_floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.F.animation]: true,
      [_floating_ui_js__WEBPACK_IMPORTED_MODULE_2__.F.animationActive]: open,
    };
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("div", { "aria-hidden": "true", class: {
        "floating-ui-container": true,
        "floating-ui-container--active": open,
      },
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setFloatingEl }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("div", { class: classes,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: setContainerEl }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("ul", { class: { list: true, "list--hide": !open } }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("slot", null)))));
  }
  renderIconStart() {
    const { selectedItems, placeholderIcon, selectionMode, placeholderIconFlipRtl } = this;
    const selectedItem = selectedItems[0];
    const selectedIcon = selectedItem?.icon;
    const singleSelectionMode = (0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.i)(selectionMode);
    const iconAtStart = !this.open && selectedItem
      ? !!selectedIcon && singleSelectionMode
      : !!this.placeholderIcon && (!selectedItem || singleSelectionMode);
    return (iconAtStart && ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("span", { class: "icon-start" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-icon", { class: "selected-icon", flipRtl: this.open && selectedItem ? selectedItem.iconFlipRtl : placeholderIconFlipRtl, icon: !this.open && selectedItem ? selectedIcon : placeholderIcon, scale: (0,_component_js__WEBPACK_IMPORTED_MODULE_13__.g)(this.scale) }))));
  }
  renderIconEnd() {
    const { open } = this;
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("span", { class: "icon-end" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("calcite-icon", { icon: open ? "chevron-up" : "chevron-down", scale: (0,_component_js__WEBPACK_IMPORTED_MODULE_13__.g)(this.scale) })));
  }
  render() {
    const { selectionDisplay, guid, label, open } = this;
    const singleSelectionMode = (0,_utils2_js__WEBPACK_IMPORTED_MODULE_12__.i)(this.selectionMode);
    const allSelectionDisplay = selectionDisplay === "all";
    const singleSelectionDisplay = selectionDisplay === "single";
    const fitSelectionDisplay = !singleSelectionMode && selectionDisplay === "fit";
    const isClearable = !this.clearDisabled && this.value?.length > 0;
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)(_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.Host, { onClick: this.comboboxFocusHandler }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("div", { "aria-autocomplete": "list", "aria-controls": `${listboxUidPrefix}${guid}`, "aria-expanded": (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.t)(open), "aria-haspopup": "listbox", "aria-label": (0,_label2_js__WEBPACK_IMPORTED_MODULE_6__.g)(this), "aria-live": "polite", "aria-owns": `${listboxUidPrefix}${guid}`, class: {
        wrapper: true,
        "wrapper--single": singleSelectionMode || !this.selectedItems.length,
        "wrapper--active": open,
      }, onClick: this.clickHandler, onKeyDown: this.keyDownHandler, role: "combobox",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setReferenceEl }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("div", { class: {
        "grid-input": true,
        [_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.selectionDisplayFit]: fitSelectionDisplay,
        [_utils2_js__WEBPACK_IMPORTED_MODULE_12__.C.selectionDisplaySingle]: singleSelectionDisplay,
      }, ref: this.setChipContainerEl }, this.renderIconStart(), !singleSelectionMode && !singleSelectionDisplay && this.renderChips(), !singleSelectionMode &&
      !allSelectionDisplay && [
      this.renderSelectedIndicatorChip(),
      this.renderSelectedIndicatorChipCompact(),
      this.renderAllSelectedIndicatorChip(),
      this.renderAllSelectedIndicatorChipCompact(),
    ], (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("label", { class: "screen-readers-only", htmlFor: `${inputUidPrefix}${guid}`, id: `${labelUidPrefix}${guid}` }, label), this.renderInput()), isClearable ? ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)(XButton, { disabled: this.disabled, key: "close-button", label: this.messages.clear, scale: this.scale })) : null, this.renderIconEnd()), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)("ul", { "aria-labelledby": `${labelUidPrefix}${guid}`, "aria-multiselectable": "true", class: "screen-readers-only", id: `${listboxUidPrefix}${guid}`, role: "listbox", tabIndex: -1 }, this.renderListBoxOptions()), this.renderFloatingUIContainer(), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_18__.h)(_form_js__WEBPACK_IMPORTED_MODULE_3__.H, { component: this })));
  }
  static get assetsDirs() { return ["assets"]; }
  get el() { return this; }
  static get watchers() { return {
    "open": ["openHandler"],
    "disabled": ["handleDisabledChange"],
    "maxItems": ["maxItemsHandler"],
    "overlayPositioning": ["overlayPositioningHandler"],
    "selectionMode": ["handlePropsChange"],
    "scale": ["handlePropsChange"],
    "value": ["valueHandler"],
    "messageOverrides": ["onMessagesChange"],
    "flipPlacements": ["flipPlacementsHandler"],
    "selectedItems": ["selectedItemsHandler"],
    "text": ["textHandler"],
    "effectiveLocale": ["effectiveLocaleChange"]
  }; }
  static get style() { return comboboxCss; }
}, [1, "calcite-combobox", {
    "clearDisabled": [516, "clear-disabled"],
    "selectionDisplay": [513, "selection-display"],
    "open": [1540],
    "disabled": [516],
    "form": [513],
    "label": [1],
    "placeholder": [1],
    "placeholderIcon": [513, "placeholder-icon"],
    "placeholderIconFlipRtl": [516, "placeholder-icon-flip-rtl"],
    "maxItems": [514, "max-items"],
    "name": [513],
    "allowCustomValues": [516, "allow-custom-values"],
    "overlayPositioning": [513, "overlay-positioning"],
    "required": [516],
    "selectionMode": [513, "selection-mode"],
    "scale": [513],
    "value": [1025],
    "flipPlacements": [16],
    "messages": [1040],
    "messageOverrides": [1040],
    "selectedItems": [1040],
    "filteredItems": [1040],
    "items": [32],
    "groupItems": [32],
    "needsIcon": [32],
    "activeItemIndex": [32],
    "activeChipIndex": [32],
    "activeDescendant": [32],
    "compactSelectionDisplay": [32],
    "selectedHiddenChipsCount": [32],
    "selectedVisibleChipsCount": [32],
    "text": [32],
    "effectiveLocale": [32],
    "defaultMessages": [32],
    "reposition": [64],
    "setFocus": [64]
  }, [[5, "pointerdown", "documentClickHandler"], [0, "calciteComboboxItemChange", "calciteComboboxItemChangeHandler"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-combobox", "calcite-chip", "calcite-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-combobox":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Combobox);
      }
      break;
    case "calcite-chip":
      if (!customElements.get(tagName)) {
        (0,_chip_js__WEBPACK_IMPORTED_MODULE_15__.d)();
      }
      break;
    case "calcite-icon":
      if (!customElements.get(tagName)) {
        (0,_icon_js__WEBPACK_IMPORTED_MODULE_16__.d)();
      }
      break;
  } });
}
defineCustomElement();




/***/ }),

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/utils2.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/utils2.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS),
/* harmony export */   a: () => (/* binding */ getDepth),
/* harmony export */   b: () => (/* binding */ ComboboxChildSelector),
/* harmony export */   c: () => (/* binding */ getItemAncestors),
/* harmony export */   d: () => (/* binding */ getItemChildren),
/* harmony export */   e: () => (/* binding */ ComboboxItem),
/* harmony export */   f: () => (/* binding */ ComboboxItemGroup),
/* harmony export */   g: () => (/* binding */ getAncestors),
/* harmony export */   h: () => (/* binding */ hasActiveChildren),
/* harmony export */   i: () => (/* binding */ isSingleLike)
/* harmony export */ });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/dom.js");
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@esri/calcite-components-react/node_modules/@stencil/core/internal/client/index.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */



const ComboboxItem = "CALCITE-COMBOBOX-ITEM";
const ComboboxItemGroup = "CALCITE-COMBOBOX-ITEM-GROUP";
const ComboboxChildSelector = `${ComboboxItem}, ${ComboboxItemGroup}`;
const CSS = {
  chipInvisible: "chip--invisible",
  selectionDisplayFit: "selection-display-fit",
  selectionDisplaySingle: "selection-display-single",
  listContainer: "list-container",
};

function getAncestors(element) {
  const parent = element.parentElement?.closest(ComboboxChildSelector);
  const grandparent = parent?.parentElement?.closest(ComboboxChildSelector);
  return [parent, grandparent].filter((el) => el);
}
function getItemAncestors(item) {
  return (item.ancestors?.filter((el) => el.nodeName === "CALCITE-COMBOBOX-ITEM") || []);
}
function getItemChildren(item) {
  return (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.o)(item.querySelectorAll("calcite-combobox-item"));
}
function hasActiveChildren(node) {
  const items = (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.o)(node.querySelectorAll("calcite-combobox-item"));
  return items.filter((item) => item.selected).length > 0;
}
function getDepth(element) {
  if (!_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.Build.isBrowser) {
    return 0;
  }
  const result = document.evaluate("ancestor::calcite-combobox-item | ancestor::calcite-combobox-item-group", element, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
  return result.snapshotLength;
}
function isSingleLike(selectionMode) {
  return selectionMode.includes("single");
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,