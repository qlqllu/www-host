"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-49445a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layers-and-tables-summary.entry.js":
/*!***********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layers-and-tables-summary.entry.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_layers_and_tables_summary: () => (/* binding */ ArcgisLayersAndTablesSummary)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./telemetry-2874e433.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/telemetry-2874e433.js");
/* harmony import */ var _type_to_icon_5b71edbc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type-to-icon-5b71edbc.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-to-icon-5b71edbc.js");
/* harmony import */ var _utils_69e56978_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-69e56978.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-69e56978.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */











const arcgisLayersAndTablesSummaryCss = ":host{max-width:100%;width:380px}.bg{background-color:var(--calcite-ui-background)}.layers{background-color:var(--calcite-ui-background);padding-top:0.75rem;padding-bottom:0.75rem;padding-left:0.5rem;padding-right:0.5rem;white-space:normal}.field-aliases{padding-top:0.5rem;padding-bottom:0.5rem;-webkit-padding-start:1.75rem;padding-inline-start:1.75rem}.field-aliases-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:-8px}.field-aliases-title{font-weight:400;font-size:0.75rem;color:var(--calcite-ui-text-2);text-decoration:underline;margin:0;padding-left:0;padding-right:0;padding-top:0.5rem;padding-bottom:0.5rem;flex:1 1 0%}.field-aliases-list{list-style-type:none;margin:0;padding:0;overflow:auto;max-height:200px}.field-alias{font-weight:400;font-size:0.75rem;color:var(--calcite-ui-text-2);padding-top:0.5rem;padding-left:0;padding-right:0;margin:0;display:flex}.icon{-webkit-padding-end:0.5rem;padding-inline-end:0.5rem}.post{display:flex;padding-bottom:0.75rem;padding-left:0.5rem;padding-right:0.5rem;justify-content:flex-end;font-size:0.875rem}.page-number{display:inline-block;flex:1 1 0%;color:var(--calcite-ui-text-2)}.pagination{background-color:var(--calcite-ui-foreground-1);display:flex;align-items:center;justify-content:center;padding-top:0.75rem;padding-bottom:1rem;border-top:1px solid var(--calcite-ui-border-1)}.notice{padding-top:1rem;padding-bottom:1rem}.screen-readers-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.no-layers{padding:0.75rem 1rem 0 1rem;color:var(--calcite-ui-text-2)}";

const ArcgisLayersAndTablesSummary = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.layersAndTablesFocusEnd = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "layersAndTablesFocusEnd", 7);
    this.expanded = {};
    this.handleTabChage = ({ detail }) => {
      var _a;
      this.activeTab = detail.tab;
      (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.logEvent({
        category: "preview popup",
        action: "switch tab",
        label: detail.tab ? "matched" : "all",
        pageName: (0,_telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_3__.g)(),
        pageUrl: window.location.href
      });
    };
    this.renderLayer = (layer, matched) => {
      const { i18n, telemetry } = this;
      const { icon, type } = (0,_utils_69e56978_js__WEBPACK_IMPORTED_MODULE_5__.g)({ geometry: layer.geometryType, type: layer.type });
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: layer.title, description: i18n.layerTypes[type], iconStart: icon, class: "layer", onClick: (e) => {
          if (e.currentTarget.expanded &&
            !this.expanded[layer.id]) {
            telemetry === null || telemetry === void 0 ? void 0 : telemetry.logEvent({
              category: "preview popup",
              action: "expand layer",
              label: matched ? "matched" : "all",
              pageName: (0,_telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_3__.g)(),
              pageUrl: window.location.href
            });
            this.expanded[layer.id] = true;
          }
        } }, this.renderAliases(layer, matched)));
    };
    this.user = undefined;
    this.item = undefined;
    this.portal = undefined;
    this.layers = [];
    this.showMatched = undefined;
    this.error = undefined;
    this.loading = undefined;
    this.telemetry = undefined;
    this.currentStart = 1;
    this.activeTab = 1;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
    this.i18n = locale[0];
  }
  closeAccordion() {
    this.el.shadowRoot
      .querySelectorAll(".layer")
      .forEach((item) => {
      item.expanded = false;
    });
  }
  checkAlias(alias) {
    const blacklist = [
      // exact
      /^fnode_$/i,
      /^tnode_$/i,
      /^lpoly_$/i,
      /^rpoly_$/i,
      /^poly_$/i,
      /^subclass$/i,
      /^subclass_$/i,
      /^rings_ok$/i,
      /^rings_nok$/i,
      // partial
      /shape/i,
      /perimeter/i,
      /objectid/i,
      // ending
      /_i$/i
    ];
    return !blacklist.find((re) => re.test(alias));
  }
  renderAliases(layer, matched) {
    var _a;
    const { config, user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const mapViewerUrl = config.newMapViewerUrl;
    const oldMapViewerUrl = `${config.baseUrl}webmap/viewer.html`;
    const sceneViewerUrl = `${config.baseUrl}webscene/viewer.html`;
    const oldViewer = (user === null || user === void 0 ? void 0 : user.defaultMapViewer) === "classic";
    const { i18n, loading, checkAlias, telemetry } = this;
    const { id } = this.item;
    const fields = (_a = layer.fields) === null || _a === void 0 ? void 0 : _a.filter((field) => checkAlias(field.alias || field.name));
    return loading ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { scale: "s", label: i18n.loading })) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "field-aliases" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "field-aliases-header" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("h5", { class: "field-aliases-title" }, i18n.fields), this.item.type === "Feature Service" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-end", width: "m", type: "click", class: "field-aliases-dropdown", onCalciteDropdownOpen: () => {
        telemetry === null || telemetry === void 0 ? void 0 : telemetry.logEvent({
          category: "preview popup",
          action: "open actions",
          label: matched ? "matched" : "all",
          pageName: (0,_telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_3__.g)(),
          pageUrl: window.location.href
        });
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", scale: "s", label: "layer actions", appearance: "transparent", icon: "ellipsis", text: "" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "single" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { href: `${config.baseUrl}item.html?id=${id}&sublayer=${layer.id}`, target: "_blank" }, i18n.viewDetails), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { href: `${mapViewerUrl}?layers=${id}&layerId=${layer.id}`, target: "_blank" }, i18n.openInMapViewer), oldViewer && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { href: `${oldMapViewerUrl}?useExisting=1&layers=${id}&layerId=${layer.id}`, target: "_blank" }, i18n.openInMapViewerClassic), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { href: `${oldMapViewerUrl}?layers=${id}&layerId=${layer.id}`, target: "_blank" }, i18n.addToNewMap))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { href: `${sceneViewerUrl}?layers=${id}&layerId=${layer.id}`, target: "_blank" }, i18n.addToSceneViewer))))), (fields === null || fields === void 0 ? void 0 : fields.length) > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: "field-aliases-list" }, fields.map((field) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { class: "field-alias" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: _type_to_icon_5b71edbc_js__WEBPACK_IMPORTED_MODULE_4__.f[field.type] || "string", scale: "s", class: "icon" }), field.alias || field.name))))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "field-alias" }, i18n.noAliasFound))));
  }
  renderPageNumberText() {
    const start = this.currentStart;
    const total = this.layers.length;
    const end = Math.min(start + 5, total);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "page-number" }, this.i18n.paginationRange
      .replace("${start}", `${start}`)
      .replace("${end}", `${end}`)
      .replace("${total}", `${total}`)));
  }
  render() {
    var _a;
    const { i18n, renderLayer, error, handleTabChage, item, activeTab } = this;
    const sublayers = this.layers || [];
    const matched = (this.layers || []).filter((layer) => layer.matched);
    const layers = sublayers.slice(this.currentStart - 1, this.currentStart + 5);
    const showMatched = this.showMatched && (matched === null || matched === void 0 ? void 0 : matched.length) > 0;
    const showPagination = ((_a = (activeTab && showMatched ? matched : sublayers)) === null || _a === void 0 ? void 0 : _a.length) > 6;
    if (error) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "layers" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { icon: true, open: true, scale: "s", width: "full", kind: "warning", class: "notice" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, error.title), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, error.message)))));
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "bg" }, !sublayers || (sublayers.length === 0 && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "no-layers" }, this.i18n.noLayers)), showMatched ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tabs", { layout: "center" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-nav", { slot: "title-group", onCalciteTabChange: handleTabChage }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-title", { selected: activeTab === 0 }, i18n.all.replace("${number}", `${sublayers.length}`)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-title", { selected: activeTab === 1 }, i18n.matched.replace("${number}", `${matched.length}`))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab", { class: "layers", selected: activeTab === 0 }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { selectionMode: "single", scale: "m", iconPosition: "end", iconType: "chevron" }, layers.map((layer) => renderLayer(layer)))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab", { class: "layers", selected: activeTab === 1 }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { selectionMode: "single", scale: "m", iconPosition: "end", iconType: "chevron" }, matched.map((layer) => renderLayer(layer, true)))))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "layers" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { selectionMode: "single", scale: "m", iconPosition: "end", iconType: "chevron" }, layers.map((layer) => renderLayer(layer))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "post" }, showPagination && this.renderPageNumberText(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { href: `item.html?id=${item.id}`, class: "details-link", target: "_blank", rel: "noopener noreferrer", onClick: () => {
        var _a;
        (_a = this.telemetry) === null || _a === void 0 ? void 0 : _a.logEvent({
          category: "preview popup",
          action: "view item details",
          pageName: (0,_telemetry_2874e433_js__WEBPACK_IMPORTED_MODULE_3__.g)(),
          pageUrl: window.location.href
        });
      } }, i18n.viewItemDetails)), showPagination && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "pagination" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pagination", { scale: "m", totalItems: sublayers.length, pageSize: 6, startItem: this.currentStart, onCalcitePaginationChange: (e) => {
        this.currentStart = e.target.startItem;
        this.closeAccordion();
      } }))))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayersAndTablesSummary.style = arcgisLayersAndTablesSummaryCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const configStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  portal: null,
  user: null,
  api: 4,
  scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/telemetry-2874e433.js":
/*!***************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/telemetry-2874e433.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getPageName)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
function getPageName() {
  const { hash, pathname } = window.location;
  if (pathname.includes("group.html")) {
    return "group page";
  }
  if (pathname.includes("search.html")) {
    return "search result page";
  }
  switch (hash) {
    case "#favorites":
      return "favorites";
    case "#groups":
      return "my groups content";
    case "#organization":
      return "my org content";
    case "#livingAtlas":
      return "living atlas";
    default:
      return "my content";
  }
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-to-icon-5b71edbc.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-to-icon-5b71edbc.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ featureLayerIconInfo),
/* harmony export */   e: () => (/* binding */ esriGeometryIcons),
/* harmony export */   f: () => (/* binding */ fieldTypeIcons)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const featureLayerIconInfo = {
  point: "point",
  line: "line",
  polygon: "polygon",
  multipatch: "cube",
  table: "table",
  multipoint: "layer-points"
};
const esriGeometryIcons = {
  esriGeometryPoint: "point",
  esriGeometryPolyline: "line",
  esriGeometryPolygon: "polygon",
  esriGeometryMultiPatch: "cube",
  esriGeometryMultipoint: "point",
  none: "table"
};
const fieldTypeIcons = {
  esriFieldTypeOID: "key",
  esriFieldTypeBoolean: "boolean",
  esriFieldTypeString: "string",
  esriFieldTypeSingle: "number",
  esriFieldTypeDouble: "number",
  esriFieldTypeInteger: "integer",
  esriFieldTypeSmallInteger: "integer",
  esriFieldTypeGlobalID: "key",
  esriFieldTypeDate: "date-time",
  esriFieldTypeBigInteger: "integer",
  esriFieldTypeDateOnly: "calendar",
  esriFieldTypeTimeOnly: "clock",
  esriFieldTypeTimestampOffset: "time-zone"
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-69e56978.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-69e56978.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getSublayerTypeInfo)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/** Get the correct geometry icon based on layer/table type and geometry type
 * will handles types used by the jsapi, the esri types used on the server,
 * and the types returned by the Search API
 */
function getSublayerTypeInfo({ geometry, type }) {
  switch (type) {
    case "Catalog Layer":
      return {
        icon: "catalog-dataset",
        type: "catalog",
        isGeometry: false
      };
    case "Parcel Layer":
      return {
        icon: "parcel-layer",
        type: "parcel",
        isGeometry: false
      };
    case "Oriented Imagery Layer":
      return {
        icon: "oriented-imagery-layer",
        type: "oriented imagery",
        isGeometry: false
      };
    case "Table":
      return {
        icon: "table",
        type: "table",
        isGeometry: true
      };
  }
  switch (geometry) {
    case "point":
    case "esriGeometryPoint":
      return {
        type: "point",
        icon: "point",
        isGeometry: true
      };
    case "esriGeometryMultipoint":
    case "multipoint":
      return {
        type: "multipoint",
        icon: "layer-points",
        isGeometry: true
      };
    case "line":
    case "polyline":
    case "esriGeometryPolyline":
      return {
        type: "line",
        icon: "line",
        isGeometry: true
      };
    case "polygon":
    case "esriGeometryPolygon":
      return {
        type: "polygon",
        icon: "polygon",
        isGeometry: true
      };
    case "multipatch":
    case "esriGeometryMultiPatch":
      return {
        type: "multipatch",
        icon: "cube",
        isGeometry: true
      };
    default:
      return {
        type: "table",
        icon: "table",
        isGeometry: true
      };
  }
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,