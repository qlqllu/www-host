"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_geocod-af2d29"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-7eb7c0df.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-7eb7c0df.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getAnalyzedLayerInfo),
/* harmony export */   b: () => (/* binding */ getGeocoderInfo),
/* harmony export */   c: () => (/* binding */ countryCodes),
/* harmony export */   d: () => (/* binding */ getSourceCountry),
/* harmony export */   e: () => (/* binding */ getLocationPublishParameters),
/* harmony export */   f: () => (/* binding */ findGeocoder),
/* harmony export */   g: () => (/* binding */ getAllowedFieldTypes),
/* harmony export */   i: () => (/* binding */ isEsriWorldGeocoder)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _privileges_35590eb4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./privileges-35590eb4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-35590eb4.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */





const countryCodes = {
  WORLD: "World",
  EU: "Europe",
  AD: "Andorra",
  AE: "United Arab Emirates",
  AF: "Afghanistan",
  AG: "Antigua and Barbuda",
  AI: "Anguilla",
  AL: "Albania",
  AM: "Armenia",
  AO: "Angola",
  AQ: "Antarctica",
  AR: "Argentina",
  AS: "American Samoa",
  AT: "Austria",
  AU: "Australia",
  AW: "Aruba",
  AZ: "Azerbaijan",
  BA: "Bosnia and Herzegovina",
  BB: "Barbados",
  BD: "Bangladesh",
  BE: "Belgium",
  BF: "Burkina Faso",
  BG: "Bulgaria",
  BH: "Bahrain",
  BI: "Burundi",
  BJ: "Benin",
  BL: "Saint Barthélemy",
  BM: "Bermuda",
  BN: "Brunei Darussalam",
  BO: "Bolivia, Plurinational State of",
  BQ: "Bonaire, Sint Eustatius and Saba",
  BR: "Brazil",
  BS: "Bahamas",
  BT: "Bhutan",
  BV: "Bouvet Island",
  BW: "Botswana",
  BY: "Belarus",
  BZ: "Belize",
  CA: "Canada",
  CD: "Congo, the Democratic Republic of the",
  CF: "Central African Republic",
  CG: "Congo",
  CH: "Switzerland",
  CI: "Côte d'Ivoire",
  CK: "Cook Islands",
  CL: "Chile",
  CM: "Cameroon",
  CN: "China",
  CO: "Colombia",
  CR: "Costa Rica",
  CU: "Cuba",
  CV: "Cape Verde",
  CW: "Curaçao",
  CY: "Cyprus",
  CZ: "Czech Republic",
  DE: "Germany",
  DJ: "Djibouti",
  DK: "Denmark",
  DM: "Dominica",
  DO: "Dominican Republic",
  DZ: "Algeria",
  EC: "Ecuador",
  EE: "Estonia",
  EG: "Egypt",
  EH: "Western Sahara",
  ER: "Eritrea",
  ES: "Spain",
  ET: "Ethiopia",
  FI: "Finland",
  FJ: "Fiji",
  FK: "Falkland Islands (Malvinas)",
  FM: "Micronesia, Federated States of",
  FO: "Faroe Islands",
  FR: "France",
  GA: "Gabon",
  GB: "United Kingdom",
  GD: "Grenada",
  GE: "Georgia",
  GF: "French Guiana",
  GG: "Guernsey",
  GH: "Ghana",
  GI: "Gibraltar",
  GL: "Greenland",
  GM: "Gambia",
  GN: "Guinea",
  GP: "Guadeloupe",
  GQ: "Equatorial Guinea",
  GR: "Greece",
  GS: "South Georgia and the South Sandwich Islands",
  GT: "Guatemala",
  GW: "Guinea-Bissau",
  GY: "Guyana",
  HK: "Hong Kong",
  HM: "Heard Island and McDonald Islands",
  HN: "Honduras",
  HR: "Croatia",
  HT: "Haiti",
  HU: "Hungary",
  ID: "Indonesia",
  IE: "Ireland",
  IL: "Israel",
  IM: "Isle of Man",
  IN: "India",
  IO: "British Indian Ocean Territory",
  IQ: "Iraq",
  IR: "Iran, Islamic Republic of",
  IS: "Iceland",
  IT: "Italy",
  JE: "Jersey",
  JM: "Jamaica",
  JO: "Jordan",
  JP: "Japan",
  KE: "Kenya",
  KG: "Kyrgyzstan",
  KH: "Cambodia",
  KI: "Kiribati",
  KM: "Comoros",
  KN: "Saint Kitts and Nevis",
  KP: "Korea, Democratic People's Republic of",
  KR: "Korea, Republic of",
  KW: "Kuwait",
  KY: "Cayman Islands",
  KZ: "Kazakhstan",
  LA: "Lao People's Democratic Republic",
  LB: "Lebanon",
  LC: "Saint Lucia",
  LI: "Liechtenstein",
  LK: "Sri Lanka",
  LR: "Liberia",
  LS: "Lesotho",
  LT: "Lithuania",
  LU: "Luxembourg",
  LV: "Latvia",
  LY: "Libya",
  MA: "Morocco",
  MC: "Monaco",
  MD: "Moldova, Republic of",
  ME: "Montenegro",
  MF: "Saint Martin (French part)",
  MG: "Madagascar",
  MH: "Marshall Islands",
  MK: "Macedonia, the former Yugoslav Republic of",
  ML: "Mali",
  MM: "Myanmar",
  MN: "Mongolia",
  MO: "Macao",
  MP: "Northern Mariana Islands",
  MQ: "Martinique",
  MR: "Mauritania",
  MS: "Montserrat",
  MT: "Malta",
  MU: "Mauritius",
  MV: "Maldives",
  MW: "Malawi",
  MX: "Mexico",
  MY: "Malaysia",
  MZ: "Mozambique",
  NA: "Namibia",
  NC: "New Caledonia",
  NE: "Niger",
  NG: "Nigeria",
  NI: "Nicaragua",
  NL: "Netherlands",
  NO: "Norway",
  NP: "Nepal",
  NR: "Nauru",
  NU: "Niue",
  NZ: "New Zealand",
  OM: "Oman",
  PA: "Panama",
  PE: "Peru",
  PF: "French Polynesia",
  PG: "Papua New Guinea",
  PH: "Philippines",
  PK: "Pakistan",
  PL: "Poland",
  PM: "Saint Pierre and Miquelon",
  PN: "Pitcairn",
  PS: "Palestine, State of",
  PT: "Portugal",
  PW: "Palau",
  PY: "Paraguay",
  QA: "Qatar",
  RE: "Réunion",
  RO: "Romania",
  RS: "Serbia",
  RU: "Russian Federation",
  RW: "Rwanda",
  SA: "Saudi Arabia",
  SB: "Solomon Islands",
  SC: "Seychelles",
  SD: "Sudan",
  SE: "Sweden",
  SG: "Singapore",
  SH: "Saint Helena, Ascension and Tristan da Cunha",
  SI: "Slovenia",
  SJ: "Svalbard and Jan Mayen",
  SK: "Slovakia",
  SL: "Sierra Leone",
  SM: "San Marino",
  SN: "Senegal",
  SO: "Somalia",
  SR: "Suriname",
  SS: "South Sudan",
  ST: "Sao Tome and Principe",
  SV: "El Salvador",
  SX: "Sint Maarten (Dutch part)",
  SY: "Syrian Arab Republic",
  SZ: "Swaziland",
  TC: "Turks and Caicos Islands",
  TD: "Chad",
  TF: "French Southern Territories",
  TG: "Togo",
  TH: "Thailand",
  TJ: "Tajikistan",
  TK: "Tokelau",
  TL: "Timor-Leste",
  TM: "Turkmenistan",
  TN: "Tunisia",
  TO: "Tonga",
  TR: "Turkey",
  TT: "Trinidad and Tobago",
  TV: "Tuvalu",
  TW: "Taiwan, Province of China",
  TZ: "Tanzania, United Republic of",
  UA: "Ukraine",
  UG: "Uganda",
  UM: "United States Minor Outlying Islands",
  US: "United States",
  UY: "Uruguay",
  UZ: "Uzbekistan",
  VA: "Holy See (Vatican City State)",
  VC: "Saint Vincent and the Grenadines",
  VE: "Venezuela, Bolivarian Republic of",
  VG: "Virgin Islands, British",
  VN: "Vietnam",
  VU: "Vanuatu",
  WF: "Wallis and Futuna",
  WS: "Samoa",
  XK: "Republic of Kosovo",
  YE: "Yemen",
  YT: "Mayotte",
  ZA: "South Africa",
  ZM: "Zambia",
  ZW: "Zimbabwe"
};

/**
 * Forms publishParameters correctly for publish tasks involving geocoding
 */
function getLocationPublishParameters(addressType, appendWorkflow) {
  const { sourceCountry, locationType, analyzeResults, candidateFieldsType, coordinateFieldType, type, standardizedFieldNames, selectedFields } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__.a;
  const layerInfo = getAnalyzedLayerInfo();
  const fields = !appendWorkflow ? Object.values(selectedFields) : _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__.a.backupLayerFields;
  const locationPublishParams = Object.assign(Object.assign({ locationType: locationType || "address", sourceCountry,
    candidateFieldsType }, (locationType === "coordinates" && getCoordinateFields(fields, coordinateFieldType))), (locationType === "address" && { addressFields: getAddressFields(fields, addressType, standardizedFieldNames) }));
  let publishParameters;
  if (!appendWorkflow && type === "Microsoft Excel") {
    publishParameters = Object.assign(Object.assign({}, analyzeResults.publishParameters), { layers: [Object.assign(Object.assign({}, layerInfo), locationPublishParams)], hasStaticData: true, maxRecordCount: 2000, layerInfo: { capabilities: "Query" } });
  }
  else {
    publishParameters = Object.assign(Object.assign({}, analyzeResults.publishParameters), locationPublishParams);
  }
  return publishParameters;
}
function getAddressFields(fields, addressType, standardizedFieldNames) {
  if (addressType === "Single") {
    const singleLineAddressField = Object.keys(standardizedFieldNames)[0] || "Address";
    const addressField = fields.find(({ locationType }) => locationType === singleLineAddressField || (locationType === null || locationType === void 0 ? void 0 : locationType.toLowerCase()) === "address");
    return { [singleLineAddressField]: (addressField === null || addressField === void 0 ? void 0 : addressField.name) || "" };
  }
  return fields.reduce((acc, field) => {
    if (field.locationType !== "unknown") {
      acc[field.locationType] = field.name;
    }
    return acc;
  }, {});
}
/**
 * Fetch the correct layerInfo from the current CSV/Excel analyzeResults
 */
function getAnalyzedLayerInfo(customAnalyzeResults, analyzeSelectedLayer) {
  var _a, _b, _c, _d, _e, _f, _g;
  const { type, analyzeResults = customAnalyzeResults, selectedSheet } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_2__.a; //set selectedSheet
  const publishParameters = analyzeResults === null || analyzeResults === void 0 ? void 0 : analyzeResults.publishParameters;
  if (!!analyzeSelectedLayer) {
    if (type === "CSV") {
      return publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layerInfo;
    }
    else {
      return (_b = (_a = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _a === void 0 ? void 0 : _a[selectedSheet]) !== null && _b !== void 0 ? _b : (_c = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _c === void 0 ? void 0 : _c[0];
    }
  }
  else {
    switch (type) {
      case "Microsoft Excel":
        return (_e = (_d = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _d === void 0 ? void 0 : _d[selectedSheet]) !== null && _e !== void 0 ? _e : (_f = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _f === void 0 ? void 0 : _f[0];
      case "GeoJson":
        return (_g = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _g === void 0 ? void 0 : _g[0];
      default:
        return publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layerInfo;
    }
  }
}
/**
 * Given a field type, find which other field types can be successfully selected
 * https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/43974#issuecomment-4067420
 */
function getAllowedFieldTypes(fieldType) {
  switch (fieldType) {
    case "esriFieldTypeBigInteger":
      return ["esriFieldTypeBigInteger", "esriFieldTypeDouble", "esriFieldTypeString"];
    case "esriFieldTypeSmallInteger":
      return [
        "esriFieldTypeSmallInteger",
        "esriFieldTypeInteger",
        "esriFieldTypeSingle",
        "esriFieldTypeDouble",
        "esriFieldTypeString"
      ];
    case "esriFieldTypeInteger":
      return ["esriFieldTypeInteger", "esriFieldTypeSingle", "esriFieldTypeDouble", "esriFieldTypeString"];
    case "esriFieldTypeSingle":
      return ["esriFieldTypeSingle", "esriFieldTypeDouble", "esriFieldTypeString"];
    case "esriFieldTypeDouble":
      return ["esriFieldTypeDouble", "esriFieldTypeString"];
    case "esriFieldTypeDate":
      return ["esriFieldTypeDate", "esriFieldTypeString"];
    case "esriFieldTypeDateOnly":
      return ["esriFieldTypeDateOnly", "esriFieldTypeString"];
    case "esriFieldTypeTimeOnly":
      return ["esriFieldTypeTimeOnly", "esriFieldTypeString"];
    case "esriFieldTypeTimestampOffset":
      return ["esriFieldTypeTimestampOffset", "esriFieldTypeString"];
    case "esriFieldTypeOID":
      return ["esriFieldTypeOID", "esriFieldTypeInteger", "esriFieldTypeString"];
    case "esriFieldTypeString":
    default:
      return ["esriFieldTypeString"];
  }
}
function getCoordinateFields(fields, coordinateFieldType) {
  return fields.reduce((acc, field) => {
    switch (field.locationType) {
      case "latitude":
        acc.latitudeFieldName = field.name;
        if (!coordinateFieldType) {
          acc.coordinateFieldType = "LatitudeAndLongitude";
        }
        break;
      case "longitude":
        acc.longitudeFieldName = field.name;
        if (!coordinateFieldType) {
          acc.coordinateFieldType = "LatitudeAndLongitude";
        }
        break;
      case "mgrs":
        if (coordinateFieldType === "MGRS") {
          acc.coordinateFieldName = field.name;
          if (!coordinateFieldType) {
            acc.coordinateFieldType = "MGRS";
          }
        }
        break;
      case "usng":
        if (coordinateFieldType === "USNG") {
          acc.coordinateFieldName = field.name;
          if (!coordinateFieldType) {
            acc.coordinateFieldType = "USNG";
          }
        }
        break;
    }
    return acc;
  }, { coordinateFieldType });
}
function findGeocoder(geocodeServiceUrl, geocodeServers) {
  const matching = geocodeServers === null || geocodeServers === void 0 ? void 0 : geocodeServers.filter((geocoder) => geocoder.url === geocodeServiceUrl);
  return (matching === null || matching === void 0 ? void 0 : matching.length) ? matching.shift() : null;
}
/**
 * Get a list of geocoders that support batch geocoding
 */
function filterBatchGeocoders(geocoders, cantBatchGeocode, isPortal) {
  // retrieve only the batch geocoders from the list of geocoders
  return geocoders.filter((oldGeocoder) => {
    // Spread to avoid mutating the original array
    const geocoder = Object.assign({}, oldGeocoder);
    const isWorldGeocodeServer = isEsriWorldGeocoderNoProxy(geocoder === null || geocoder === void 0 ? void 0 : geocoder.url);
    const isWorldGeocodeServerProxy = isEsriWorldGeocoderThroughProxy(geocoder === null || geocoder === void 0 ? void 0 : geocoder.url);
    // if name not set and is Esri World Geocoder, set name
    if (isWorldGeocodeServer || isWorldGeocodeServerProxy) {
      if (!(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.i)(geocoder.name)) {
        geocoder.name = "ArcGIS World Geocoding Service"; // always use official Esri geocoder name
      }
      else {
        if (geocoder.name === "Esri World Geocoder") {
          geocoder.name = "ArcGIS World Geocoding Service"; // use official Esri geocoder name
        } // else keep it; might be the translated old name though
      }
    }
    if (isWorldGeocodeServer && (isPortal || cantBatchGeocode)) {
      return false; // AGO World Geocode server (without service proxy) can't be used for batch geocoding in portal
    }
    else if ((0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.i)(geocoder.batch)) {
      return !!geocoder.batch;
    }
    else {
      return isWorldGeocodeServer || isWorldGeocodeServerProxy;
    }
  });
}
function isEsriWorldGeocoderThroughProxy(url = "") {
  return !!(url === null || url === void 0 ? void 0 : url.match(/(arcgis\.com.*\/servers\/[\da-z\.-]+\/rest\/services\/world\/geocodeserver).*/gi));
}
function isEsriWorldGeocoderNoProxy(url = "") {
  return !!(url === null || url === void 0 ? void 0 : url.match(/(arcgis\.com\/arcgis\/rest\/services\/world\/geocodeserver).*/gi));
}
function isEsriWorldGeocoder(url) {
  return !!url && (isEsriWorldGeocoderNoProxy(url) || isEsriWorldGeocoderThroughProxy(url));
}
/**
 * Update source country in state
 * based on user region and portal country code
 */
function getSourceCountry(region, ipCntryCode, code) {
  let sourceCountry = code || region || ipCntryCode || "";
  sourceCountry = (sourceCountry === null || sourceCountry === void 0 ? void 0 : sourceCountry.toLowerCase()) === "wo" ? "world" : sourceCountry;
  // #35564 - If a user or org-defined country code is not a valid geocode region, default to `world`
  if (!countryCodes[sourceCountry.toUpperCase()]) {
    sourceCountry = "world";
  }
  return sourceCountry;
}
/**
 * Get flags based on user's ability to geocode, etc.
 */
function getGeocoderInfo(geocodingServices, user, isPortal) {
  var _a;
  let roleCanUseGeocode = (0,_privileges_35590eb4_js__WEBPACK_IMPORTED_MODULE_3__.l)(user) && (0,_privileges_35590eb4_js__WEBPACK_IMPORTED_MODULE_3__.m)(user);
  const geocodeServers = filterBatchGeocoders(geocodingServices, !roleCanUseGeocode, isPortal);
  const geocodeServiceUrl = (_a = geocodeServers[0]) === null || _a === void 0 ? void 0 : _a.url;
  if (geocodeServers === null || geocodeServers === void 0 ? void 0 : geocodeServers.length) {
    // we filter out the world geocoder if the user does not have geocode privileges
    // if there was still at least one more geocoder in the list it must be a custom
    // geocoder, so the user can use that one.
    roleCanUseGeocode = true;
    const geocoder = findGeocoder(geocodeServers[0].url, geocodeServers);
    const isAgoWorldGeocodeServer = isEsriWorldGeocoderNoProxy(geocoder === null || geocoder === void 0 ? void 0 : geocoder.url);
    const isServiceProxyAgoWorldGeocodeServer = isEsriWorldGeocoderThroughProxy(geocoder === null || geocoder === void 0 ? void 0 : geocoder.url);
    const isWorldGeocodeServer = isAgoWorldGeocodeServer || isServiceProxyAgoWorldGeocodeServer;
    // ! Note: seems like there is no way `supportsBatch` can be false if the code reaches this point`
    let supportsBatch = isWorldGeocodeServer || !!geocoder.batch;
    const allowGeocode = (!(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.t)(user) || roleCanUseGeocode) &&
      ((!isPortal && supportsBatch) ||
        (isPortal && (!isAgoWorldGeocodeServer || isServiceProxyAgoWorldGeocodeServer) && supportsBatch));
    return {
      allowGeocode,
      isAgoWorldGeocodeServer,
      isServiceProxyAgoWorldGeocodeServer,
      isWorldGeocodeServer,
      geocodeServers,
      geocodeServiceUrl
    };
  }
  return null;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,