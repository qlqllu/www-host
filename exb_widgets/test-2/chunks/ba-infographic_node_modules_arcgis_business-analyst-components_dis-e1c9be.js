"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_ba-infographic_node_modules_arcgis_business-analyst-components_dis-e1c9be"],{

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/base-util-b7db69f0.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/base-util-b7db69f0.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ BaseUtil)
/* harmony export */ });
/* harmony import */ var _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ElementIds-a2c40592.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-a2c40592.js");


class ACLUtils {
  static announceVersion() {
    if (!ACLUtils.hasAnnounced) {
      ACLUtils.hasAnnounced = true;
      _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_0__.L.show('%gl', '> business-analyst-components - v' + ACLUtils.VERSION);
    }
  }
  // Utility functions
  static notDef(obj) {
    return typeof obj === 'undefined' || obj === null;
  }
  static isDef(obj) {
    return !ACLUtils.notDef(obj);
  }
  static hasText(str) {
    return (ACLUtils.isDef(str) &&
      typeof str === 'string' &&
      str.length > 0 &&
      str.trim().length > 0);
  }
  static getKeys(obj) {
    var k, keys = [];
    for (k in obj) {
      if (obj.hasOwnProperty(k)) {
        keys.push(k);
      }
    }
    return keys;
  }
  ;
  static isNumber(n) {
    return !isNaN(parseFloat(n)) && !isNaN(n - 0);
  }
  static _hasProperty(c, p) {
    return ACLUtils.hasText(c[p]);
  }
  // Returns an ID string containing the '#'
  static fixId(id) {
    if (!id || id.length <= 0) {
      return '';
    }
    return (id[0] === '#') ? id : '#' + id;
  }
  /** applyCss - applies css to elements in shadow dom of current component (context = this)
   *
   * NOTE: This function should be executed with 'call()' to pass the instance of the component
   *
   * @param css => array of css values [[prop,value]]
   * @param opt
   * {
   *  selector?:string,     //query selector for current shadow elements
   *  id?:string,           //query using element id in shadow dom
   *  subSelector?:string   //query selector for elements inside the shadow dom of the containing element (in a higher shadow)
   *  isClassname?:boolean  //flag indicating the css string is actually a class name
   *  }
   */
  // css => [[prop,value]]
  static applyCss(css, opt) {
    if (!css || !opt)
      return;
    const self = this;
    // if (opt.verbose)
    //   console.log("%c applyCss()...", ACLUtils.flagText, css, opt);
    function _doCss(obj) {
      if (obj && obj.style) {
        for (let m = 0; m < css.length; m++) {
          // if (opt.verbose)
          //   console.log("%c _doCss applying " + css[m][0], ACLUtils.flagText);
          if (obj.style)
            obj.style[css[m][0]] = css[m][1];
          else if (ACLUtils._verbose)
            console.log("%cWarn: missing style for ", ACLUtils.flagText, obj);
        }
      }
    }
    let arr = [];
    if (opt && opt.id) {
      let elem = ACLUtils.queryElementById.call(self, opt.id);
      if (elem) {
        arr.push(elem);
      }
    }
    else if (opt.selector) {
      let items = ACLUtils.queryElementAll.call(self, opt.selector);
      // if (opt.verbose)
      //   console.log("%c applyCss selector results=", ACLUtils.flagText, items);
      if (items && items.length > 0) {
        if (!opt.subSelector)
          arr.push(items);
        else {
          // if (opt.verbose)
          //   console.log("%c applyCss foreach item look for subselector", ACLUtils.flagText);
          items.forEach((i) => {
            let sub = ACLUtils.queryElementAll.call(self, opt.subSelector, i);
            arr.push(sub);
          });
        }
      }
    }
    if (opt.isClassname) {
      arr.forEach((a) => {
        let classname = css[0][0];
        if (!a.classList.contains(classname))
          a.classList.toggle(classname);
      });
    }
    else {
      // if (opt.verbose)
      //   console.log("%c applyCss doCss for array=", ACLUtils.flagText, arr);
      arr.forEach((a) => {
        if (NodeList.prototype.isPrototypeOf(a)) {
          for (let jj = 0; jj < a.length; jj++) {
            _doCss(a[jj]);
          }
        }
        else {
          _doCss(a);
        }
      });
    }
  }
  static getShadowRoot(context) {
    let root;
    if (context) {
      if (context.shadowRoot)
        root = context.shadowRoot;
      else if (context.el && context.el.shadowRoot)
        root = context.el.shadowRoot;
    }
    if (!root) {
      ACLUtils._rootCounter++;
    }
    return root;
  }
  /**
   * queryElement - this query searches the shadow dom of the component (if available) for
   * the first matching element (context = this)
   *
   * NOTE: These query functions should be executed with 'call()' to pass the instance of the component
   *
   *  - query:  standard CSS selector
   *  - elem: (optional) If not specified, the shadow dom used is this component's shadow dom.
   *                     If specified, we use the shadow dom of the element passed in
   */
  static queryElement(query, elem) {
    let self = this;
    let result, subRoot;
    if (!query || !ACLUtils.hasText(query)) {
      return result;
    }
    const root = ACLUtils.getShadowRoot(self);
    function _checkRoot() {
      let v;
      if (root)
        v = root.querySelector(query);
      if (!v)
        v = document.querySelector(query);
      return v;
    }
    if (elem) {
      subRoot = ACLUtils.getShadowRoot(elem);
      if (subRoot)
        result = subRoot.querySelector(query);
      if (!result)
        result = _checkRoot();
    }
    else {
      result = _checkRoot();
    }
    const r = result || undefined;
    // console.log("%cQueryElement final return=", (result) ? ACLUtils.greenText : ACLUtils.flagText, r);
    return r;
  }
  // query the shadow dom of the component for all matching elements (context = this)
  // use this doing a 'call' with the top element whose shadow dom will be searched
  // static queryElementAll(query: string, elem?: any): HTMLElement {
  //   // if (ACLUtils._verbose) console.log("%c queryElementAll("+query+','+elem+')', 'color:red');
  //   let self: any = this;
  //   let result: any, subRoot:any;
  //   const root:any = ACLUtils.getShadowRoot(self);
  //   // if (ACLUtils._verbose) console.log('%c queryElementAll self=', 'color:red', self);
  //   function _checkRoot() {
  //     let v;
  //     // if (ACLUtils._verbose) console.log('%c queryElementAll using shadow=', 'color:red', root);
  //     if (root) {
  //       v = root.querySelectorAll(query)
  //       // if (ACLUtils._verbose) console.log("%c queryElementAll -queried shadow for "+query, 'color:red', v);
  //     }
  //     if (!v)
  //       v = document.querySelectorAll(query);
  //     return v;
  //   }
  //   if (elem) {
  //     subRoot = ACLUtils.getShadowRoot(elem);
  //     if (subRoot)
  //       result = subRoot.querySelectorAll(query);
  //     if (!result)
  //       result = _checkRoot();
  //   }
  //   else {
  //     result = _checkRoot();
  //   }
  //   const r = result || undefined;
  //   // console.log("%cQueryElementAll final return=", (result) ? ACLUtils.greenText : ACLUtils.flagText, r);
  //   return r;
  // }
  static queryElementAll(query, elem) {
    let self = this;
    const allResults = [];
    function recursiveQueryShadow(root) {
      const results = root.querySelectorAll(query);
      results.forEach((result) => {
        allResults.push(result);
        const shadowRoot = ACLUtils.getShadowRoot(result);
        if (shadowRoot) {
          recursiveQueryShadow(shadowRoot);
        }
      });
    }
    if (elem) {
      const subRoot = ACLUtils.getShadowRoot(elem);
      if (subRoot) {
        recursiveQueryShadow(subRoot);
      }
      else {
        recursiveQueryShadow(elem);
      }
    }
    else {
      const primaryRoot = ACLUtils.getShadowRoot(self) || document;
      recursiveQueryShadow(primaryRoot);
    }
    return allResults;
  }
  // query the shadow dom of the component for the matching element (context = this)
  static queryElementById(id) {
    let result;
    if (!id || !ACLUtils.hasText(id)) {
      console.log('%c Error: queryElementById invoked with invalid id', 'color:red;font-size;8pt');
    }
    else {
      result = ACLUtils.queryElement.call(this, ACLUtils.fixId(id));
    }
    return result;
  }
  /*

* ACL Theme contains the following:
* {
* background: <main background color in the hex/alpha format #ffe0e0e0> default=#fff
* text: <main text color in the hex format #e0e0e0> default= #333
* darkBackground: <main background when in dark mode in hex format> default=#252526
* darkText: <main text color when in dark mode in hex> default=#C5C5C5
* headerBackground: <main header background color (if applies)> default= #2C78D4
* headerText: <main header text color (if applies)> default= #fff
* displayHeader: < visibility is true or false> default= true
* displayDarkMode: < dark mode is true or false> default= false
* }
*
* parseThemeString - expects a string representing the theme object. Parses the string and validates.
*
* return = Theme object
*/
  static parseThemeString(s) {
    if (this.hasText(s)) {
      return JSON.parse(s);
    }
    else {
      return {}; // no theme
    }
  }
  static parseBufferSizes(s) {
    if (typeof s == undefined) {
      return [1];
    }
    let result = [];
    try {
      if (this.hasText(s)) {
        let arr = s.split(',');
        for (let ii = 0; ii < arr.length; ii++) {
          if (ii >= 3)
            continue;
          let v = parseFloat(arr[ii]);
          result.push(v);
        }
      }
      else {
        return [1]; // default to 1 unit
      }
    }
    catch (ex) {
      console.log(ex);
      return [1]; // default to 1 unit
    }
    return result;
  }
}
ACLUtils.VERSION = '1.2.194';
ACLUtils.hasAnnounced = false;
ACLUtils._verbose = false;
ACLUtils._rootCounter = 0;
ACLUtils.noteStyle = 'background-color:#e1ebd4;color:#222;padding:3px;border-radius:2px;';
ACLUtils.errorStyle = 'background-color:red;color:white;padding:4px;border-radius:3px';
ACLUtils.grayStyle = 'background-color:#7890ad;color:#444;padding:3px;border-radius:2px;';
ACLUtils.flagStyle = 'background-color:yellow;color:#000;padding:5px;border-radius:2px;';
ACLUtils.blueStyle = 'background-color:blue;color:#eee;padding:1px 5px;border-radius:2px;';
ACLUtils.flagText = 'color:yellow;';
ACLUtils.blueText = 'color:#4d88ff;';
ACLUtils.greenText = 'color:#277711;';

var ThemeType;
(function (ThemeType) {
  ThemeType[ThemeType["light"] = 1] = "light";
  ThemeType[ThemeType["dark"] = 2] = "dark";
})(ThemeType || (ThemeType = {}));
// Since Stencil Components don't allow extending base classes, this
// class will stand-in as a way to provide common functionality across
// all components without duplicated code in each component.
//
class BaseUtil {
  // Provide stencil component instance as context
  constructor(name, context, callback) {
    this._dbg = false;
    // default colors
    this.defaultColors = {
      brand: '#007ac2',
      brandHover: '#00619b',
      brandPress: '#004874',
      background: '#f8f8f8',
      foreground: '#ffffff',
      text: '#151515',
      textInverse: '#ffffff',
      border: '#cacaca',
      scrollbar: '#232323',
      scrollbarBG: '#ffffff'
    };
    this._subComponents = {};
    this._context = context;
    if (callback) {
      this._updateCallback = callback;
    }
    if (!this._context.theme) {
      this._context.theme = ThemeType.light;
    }
    //this._color = { primary: "#fff", secondary: "#000", text: "blue", background: "transparent", foreground: "transparent" };
    this._theme = ThemeType.light;
    this.resetConfig();
    this.configInstanceId = BaseUtil.registerComponent(name, this);
    this.updateLocaleSettings();
  }
  static registerComponent(name, config) {
    const id = BaseUtil._getUniqueName(name);
    BaseUtil.ComponentRegistry[id] = config;
    return id;
  }
  static _getUniqueName(name) { return name + '-' + BaseUtil._componentIndex++; }
  //
  hasSubComponents() {
    const keys = Object.keys(this._subComponents);
    const v = (keys && keys.length > 0);
    return v;
  }
  addToParent(parentId) {
    if (parentId) {
      // Register myself with my parent config
      const parentCfg = BaseUtil.ComponentRegistry[parentId];
      if (parentCfg) {
        parentCfg.addSubComponent(this.configInstanceId);
      }
    }
  }
  addSubComponent(id) {
    this._subComponents[id] = true;
    //this.updateSubcomponentConfigs()
  }
  resetConfig() {
    const defaultConfig = {
      id: '',
      env: 'en-us',
      geoenrichmentUrl: null,
      username: null,
      token: null,
      langCode: 'en-us',
      theme: ThemeType.light
    };
    this.config = {
      id: '',
      env: 'en-us',
      geoenrichmentUrl: null,
      username: null,
      token: null,
      langCode: 'en-us',
      theme: ThemeType.light
    };
    this.updateConfig(defaultConfig, null);
  }
  /*
   * updateLocaleSettings
   *
   * use this to update any locale setting, or to revert to defaults
   *    obj = null or undefined: reset to defaults
   *    otherwise >> obj properties will overwrite exiting properties.  All other
   *    properties will remain as they were
   */
  updateLocaleSettings(obj) {
    if (!this._localeSettings || !obj) {
      // defaults
      this._localeSettings = {
        language: 'en-US',
        country: 'US',
        location: '-117.196,34.056',
        geocodeOutFields: 'Subregion,Region,PlaceName,Match_addr,Country,Addr_type,City,Place_addr,Phone,URL'
      };
    }
    else {
      const keys = ACLUtils.getKeys(obj);
      for (let ii = 0; ii < keys.length; ii++) {
        let k = keys[ii];
        if (ACLUtils.hasText(k)) {
          this._localeSettings[k] = obj[k];
        }
      }
    }
  }
  syncConfigFromProps() {
    // does nothing at this point
  }
  // Sets theme to dark or light
  //
  //    themeType = 1   standard calcite light theme (default)
  //              = 2   dark theme
  //
  setTheme(themeType = 1, updateComponentProp) {
    const self = this;
    const owner = self._context;
    // assign theme Prop to ThemeType
    let t = ThemeType.light;
    switch (themeType) {
      case (ThemeType.light):
      case ('light'):
      case ('1'):
      case (1): {
        t = ThemeType.light;
        break;
      }
      case (ThemeType.dark):
      case ('2'):
      case (2):
      case ('dark'): {
        t = ThemeType.dark;
        break;
      }
      default: t = ThemeType.light;
    }
    if (updateComponentProp) {
      // Update component theme Prop
      owner.theme = t;
    }
  }
  async updateSubcomponentConfigs() {
    if (this._dbg) {
      console.log('%c CONFIG updating subs', 'color:orange;font-size:11pt', this._subComponents);
    }
    if (this._subComponents) {
      const keys = Object.keys(this._subComponents);
      if (keys && keys.length > 0) {
        for (let ii = 0; ii < keys.length; ii++) {
          const subId = keys[ii];
          // look up config in global registry
          const config = BaseUtil.ComponentRegistry[subId];
          if (config) {
            config.updateConfig(this.config, null);
          }
        }
      }
    }
  }
  // base-util function to trigger component's registered callback (normally is onUpdateUI)
  onComponentHasRendered() {
    if (this._updateCallback && this._context?.el) {
      try {
        this._updateCallback.call(this._context);
      }
      catch (ex) {
        console.log('onComponentHasRendered error', ex);
      }
    }
  }
  // checks object for required colors, and sets defaults where needed
  _validateColors(existing, proposedColors) {
    // apply default to empty obj
    if (!existing) {
      existing = {};
    }
    const incoming = proposedColors || {};
    // Apply default colors
    const merged = Object.assign(this.defaultColors, existing, incoming);
    // Remode undefined properties
    const mKeys = ACLUtils.getKeys(merged);
    for (let ii = 0; ii < mKeys.length; ii++) {
      let k = mKeys[ii];
      if (!merged[k]) {
        delete merged[k];
      }
    }
    // update existing object
    return merged;
  }
  /* updateConfig
   *  Call this when the component config changes.  It will update essential Props,
   *  and return a list of property names that changed.  Changes overwrite properties, but
   *  leave other properties in the config as-is (unchanged)
   *
   * configs are passed in as objects (not strings)
   */
  updateConfig(newConfig, oldConfig) {
    if (this._dbg) {
      console.log('%c CONFIG update', 'color:yellow;font-size:11pt', this._context);
    }
    if (this._dbg) {
      console.log('%c CONFIG update running for ID=', 'color:yellow;font-size:11pt', this.configInstanceId);
    }
    const changedKeys = [];
    if (!newConfig || ACLUtils.getKeys(newConfig).length <= 0) {
      return changedKeys;
    }
    const self = this;
    const owner = self._context;
    try {
      // create a copy of the current config and return a list of what has changed
      // find the newConfig CHANGES
      const newKeys = ACLUtils.getKeys(newConfig);
      for (let ii = 0; ii < newKeys.length; ii++) {
        const key = newKeys[ii];
        try {
          if (newConfig.hasOwnProperty(key)) {
            if (!oldConfig && key != 'colors') {
              if (typeof newConfig[key] !== 'undefined') {
                changedKeys.push(key);
              }
            }
            else if (key == 'colors') {
              if (ACLUtils.getKeys(newConfig[key]).length > 0) {
                if (!oldConfig || !oldConfig.colors) {
                  changedKeys.push(key);
                }
                else {
                  // test individual properties belonging to colors
                  const colorKeys = ACLUtils.getKeys(newConfig.colors);
                  for (let kk = 0; kk < colorKeys.length; kk++) {
                    let colorKey = colorKeys[kk];
                    const colorName = colorKey;
                    if (newConfig.colors.hasOwnProperty(colorName)) {
                      if (newConfig.colors[colorName] != oldConfig.colors[colorName]) {
                        if (!changedKeys.includes(key)) {
                          changedKeys.push(key);
                        }
                      }
                    }
                  }
                }
              }
              else {
                if (!changedKeys.includes(key)) {
                  changedKeys.push(key);
                }
              }
            }
            else if (newConfig[key] != oldConfig[key]) {
              changedKeys.push(key);
            }
          }
        }
        catch (ex) {
          console.log('baseConfig error:', ex);
        }
      }
      if (this._dbg) {
        console.log('%c ...CONFIG changed=', 'color:yellow;font-size:11pt', changedKeys);
      }
      // COLORS
      //
      // Make sure colors exists
      if (!this.config.colors) {
        this.config.colors = {};
      }
      // apply incoming changes to our colors object
      if (changedKeys.includes('colors')) {
        this.config.colors = this._validateColors(this.config.colors, newConfig.colors);
      }
      //
      // THEME
      if (changedKeys.includes('theme')) {
        this.setTheme(newConfig.theme);
      }
      //
      // update base-util config object with changes (except for colors which is already done above)
      if (!this.config) {
        this.config = {};
      }
      for (let jj = 0; jj < changedKeys.length; jj++) {
        let k = changedKeys[jj];
        if (k != 'colors') {
          this.config[k] = newConfig[k];
        }
      }
      // sync owner component props @@ may trigger endless loop @@
      // AUTHENTICATION
      if (changedKeys.includes('username')) {
        owner.username = newConfig.username;
      }
      if (changedKeys.includes('token')) {
        owner.token = newConfig.token;
      }
      //
      // MISC
      if (changedKeys.includes('env')) {
        owner.env = newConfig.env;
      }
      if (changedKeys.includes('geoenrichmentUrl')) {
        owner.geoenrichmentUrl = newConfig.geoenrichmentUrl;
      }
      if (changedKeys.includes('langCode')) {
        owner.langCode = newConfig.langCode;
      }
      // Use passed in langCode if set
      if (changedKeys.includes('langCode')) {
        if (!owner._localeSettings) {
          owner._localeSettings = {};
        }
        owner._localeSettings.language = newConfig.langCode;
        owner.langCode = newConfig.langCode || 'en-us';
        _ElementIds_a2c40592_js__WEBPACK_IMPORTED_MODULE_0__.B._initialize(owner.langCode);
        owner.setLocaleStrings();
      }
      if (changedKeys.includes('sourceCountry')) {
        this.config.sourceCountry = owner.sourceCountry = newConfig.sourceCountry || 'US';
      }
      self.updateSubcomponentConfigs();
      if (newConfig._parentConfigId && changedKeys.includes('_parentConfigId')) {
        this.addToParent(newConfig._parentConfigId);
      }
      self.onComponentHasRendered();
    }
    catch (ex2) {
      console.log('updateConfig error', ex2);
    }
    return changedKeys;
  }
  getConfigString() {
    let obj = { ...this.config, _parentConfigId: this.configInstanceId };
    return JSON.stringify(obj);
  }
}
// index of all subcomponents related to any base-util instance
//   { <subcomponentId>: <config ref>, ... }
BaseUtil.ComponentRegistry = {};
BaseUtil._componentIndex = 1;



//# sourceMappingURL=base-util-b7db69f0.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,