"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_index--95a50e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-eb224d3c.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-eb224d3c.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getResourceIdentifier),
/* harmony export */   b: () => (/* binding */ cloudFileNames),
/* harmony export */   c: () => (/* binding */ cloudFileIcons),
/* harmony export */   d: () => (/* binding */ getCloudOption),
/* harmony export */   e: () => (/* binding */ getProviderOption),
/* harmony export */   f: () => (/* binding */ getDownloadUrl),
/* harmony export */   g: () => (/* binding */ getProvider),
/* harmony export */   h: () => (/* binding */ getOneDriveDownloadUrl),
/* harmony export */   i: () => (/* binding */ getDropBoxDownloadUrl)
/* harmony export */ });
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


function externalRequest(method, contentUrl, body, authorization, contentType) {
  return new Promise((resolve, reject) => {
    const xhttp = new XMLHttpRequest();
    xhttp.open(method, contentUrl, false);
    if (authorization) {
      xhttp.setRequestHeader("Authorization", authorization);
    }
    if (contentType) {
      xhttp.setRequestHeader("Content-type", contentType);
    }
    if (body) {
      xhttp.send(body);
    }
    else {
      xhttp.send();
    }
    const response = JSON.parse(xhttp.responseText);
    //status more than 400 is error
    if (xhttp.status >= 400) {
      reject(JSON.parse(xhttp.responseText));
    }
    resolve(response);
  });
}
function getTokenFromUrl(url, name) {
  return new Promise((resolve, reject) => {
    name = name.replace(/[[]/, "[").replace(/[]]/, "]");
    const regexS = `[?&#]${name}=([^&#]*)`;
    const regex = new RegExp(regexS);
    const results = regex.exec(url);
    if (results == null) {
      reject("InvalidToken");
    }
    else {
      resolve(results[1]);
    }
  });
}
function oauthSignIn(url, portalHostName) {
  return new Promise((resolve, reject) => {
    const currentSourceUrl = `${window.location.protocol}//${window.location.hostname}`;
    const queryString = `?cloudUrl=${url}&currentSourceUrl=${currentSourceUrl}&portalHostName=${portalHostName}`;
    const source = `https://${portalHostName}/home/cloudDriveOauth-callback.html${queryString}`;
    const ifrm = document.createElement("iframe");
    ifrm.src = source;
    ifrm.className = "hide";
    document.body.appendChild(ifrm);
    const eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
    const eventer = window[eventMethod];
    const messageEvent = eventMethod === "attachEvent" ? "onmessage" : "message";
    // Listen to message from child window
    eventer(messageEvent, (e) => {
      if (e.origin !== `https://${portalHostName}`) {
        return;
      }
      if (e.data === "popupBlocked" || e.data === "windowClosed") {
        reject(e.data);
      }
      resolve(e.data);
    }, false);
  });
}
const cloudFileIcons = {
  csv: "file-csv",
  excel: "file-excel",
  zip: "file-zip",
  geojson: "file-code",
  sheet: "file-report",
  cad: "file-cad",
  gpx: "file-gpx",
  png: "file-image",
  jpg: "file-image",
  jpeg: "file-image",
  tiff: "file-image",
  gif: "file-image",
  pdf: "file-pdf",
  docx: "file-word"
};
const cloudFileNames = {
  csv: "CSV",
  excel: "Excel",
  zip: "Zip File",
  geojson: "GeoJSON",
  googlesheets: "Google Sheets",
  cad: "CAD",
  gpx: "GPX",
  png: "Image",
  jpg: "Image",
  jpeg: "Image",
  tiff: "Image",
  gif: "Image",
  pdf: "PDF",
  docx: "Microsoft Word",
  pptx: "Microsoft PowerPoint"
};
const cloudFileExtensions = {
  csv: ".csv",
  excel: ".xls",
  zip: ".zip",
  geojson: ".geojson",
  googlesheets: ""
};
function getMimeType(fileName) {
  const parts = fileName.split(".");
  const extension = parts[parts.length - 1].toLowerCase();
  const extensionLookup = {
    xls: "excel",
    xlsx: "excel",
    csv: "csv",
    zip: "zip",
    geojson: "geojson",
    json: "geojson"
  };
  return extensionLookup[extension] || extension;
}

function getDropBoxDownloadUrl(id, token) {
  return `https://content.dropboxapi.com/2/files/download?httpHeaders={"Authorization":"Bearer&#32;${token}","Dropbox-API-Arg":"{\\"path\\":\\"${id}\\"}"}`;
}
class Dropbox {
  constructor() {
    this.nextStart = 0;
  }
  async connect() {
    const { config, portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
    const stateValue = `dropbox${Math.floor(Date.now() / 1000)}`;
    const locale = document.documentElement.lang || "en-US";
    const dropboxOauthUrl = "https://www.dropbox.com/oauth2/authorize";
    const cloudStorageOAuthRedirectUri = `https://${portal.portalHostname}/home/cloudDriveOauth-callback2.html`;
    const url = `${dropboxOauthUrl}?redirect_uri=${cloudStorageOAuthRedirectUri}&response_type=token&client_id=${config.dropboxClientId}&locale=${locale}&state=${stateValue}`;
    return new Promise(async (resolve, reject) => {
      try {
        const signInUrl = await oauthSignIn(url, portal.portalHostname);
        const stateFromUrl = await getTokenFromUrl(signInUrl, "state");
        if (stateValue !== stateFromUrl) {
          reject("invalidState");
        }
        const accessToken = await getTokenFromUrl(signInUrl, "access_token");
        this.token = accessToken;
        resolve(accessToken);
      }
      catch (e) {
        reject(e);
      }
    });
  }
  search(filterValues = {}) {
    const { token } = this;
    return new Promise(async (resolve) => {
      const { searchText, dropdownFilter, next } = filterValues;
      const authorization = `Bearer ${token}`;
      const contentType = "application/json";
      const contentUrl = "https://api.dropboxapi.com/2/files/search";
      const searchInput = searchText ? ` ${searchText}` : "";
      const start = next ? this.nextStart : 0;
      let typeQuery = cloudFileExtensions[dropdownFilter];
      if (dropdownFilter === "excel") {
        typeQuery = "xls";
      }
      const bodyDropboxRequest = `{"path":"","query":"${searchInput} ${typeQuery}","mode": "filename","max_results":10,"start":${start}}`;
      const result = await externalRequest("POST", contentUrl, bodyDropboxRequest, authorization, contentType);
      this.nextStart = result.start;
      const files = result.matches
        .filter((file) => { var _a; return ((_a = file.metadata) === null || _a === void 0 ? void 0 : _a[".tag"]) === "file"; })
        .map(({ metadata: { id, name, size } }) => ({
        id,
        name,
        mimeType: getMimeType(name),
        downloadUrl: `https://content.dropboxapi.com/2/files/download?httpHeaders={"Authorization":"Bearer&#32;${token}","Dropbox-API-Arg":"{\\"path\\":\\"${id}\\"}"}`,
        size
      }));
      resolve({ files, next: !!result.more });
    });
  }
}

/** Google returns an actual mimetype, not just a filename, so we can check and convert to our types */
function lookupMimeType(mimeType) {
  if (mimeType.indexOf("spreadsheetml.sheet") > -1 || mimeType.indexOf("ms-excel") > -1) {
    return "excel";
  }
  if (mimeType.indexOf("application/zip") > -1) {
    return "zip";
  }
  if (mimeType.indexOf("application/octet-stream") > -1 || mimeType.indexOf("application/json") > -1) {
    return "geojson";
  }
  if (mimeType.indexOf("google-apps.spreadsheet") > -1) {
    return "googlesheets";
  }
  if (mimeType.indexOf("text/csv") > -1) {
    return "csv";
  }
  return "zip";
}
const queries = {
  csv: '(mimeType="text/csv")',
  excel: '(mimeType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"ormimeType="application/vnd.ms-excel")',
  zip: '(mimeType="application/x-zip-compressed"ormimeType="application/zip")',
  geojson: '(name contains "json" or name contains "geojson")and(mimeType="application/octet-stream"ormimeType="application/json")',
  googlesheets: `(mimeType="application/vnd.google-apps.spreadsheet")`
};
function getDownloadUrl(id, mimeType, token) {
  const baseUrl = `https://www.googleapis.com/drive/v3/files/${id}`;
  const headers = `&httpHeaders={"Authorization":"Bearer&#32;${token}"}`;
  const sheet = `${baseUrl}/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet${headers}`;
  const file = `${baseUrl}?alt=media${headers}`;
  return mimeType.indexOf("google-apps") > -1 || mimeType.indexOf("googlesheets") > -1 ? sheet : file;
}
class GoogleDrive {
  async connect() {
    return new Promise(async (resolve, reject) => {
      const { config, portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
      const portalHostname = portal.portalHostname;
      const locale = document.documentElement.lang || "en-US";
      const stateValue = `google${Math.floor(Date.now() / 1000)}`;
      const googleOauthUrl = "https://accounts.google.com/o/oauth2/v2/auth";
      const googleScope = "https://www.googleapis.com/auth/drive.readonly";
      const cloudStorageOAuthRedirectUri = `https://${portalHostname}/home/cloudDriveOauth-callback2.html`;
      const url = `${googleOauthUrl}?scope=${googleScope}&redirect_uri=${cloudStorageOAuthRedirectUri}&response_type=token&client_id=${config.googleClientId}&hl=${locale}&state=${stateValue}`;
      try {
        const oauthSignInUrl = await oauthSignIn(url, portalHostname);
        const state = await getTokenFromUrl(oauthSignInUrl, "state");
        if (stateValue !== state) {
          reject("invalidState");
        }
        this.token = await getTokenFromUrl(oauthSignInUrl, "access_token");
        resolve(this.token);
      }
      catch (error) {
        reject(error);
      }
    });
  }
  async search(filterValues = {}) {
    return new Promise(async (resolve) => {
      const { searchText, next, dropdownFilter } = filterValues;
      const contentType = "application/json";
      const baseUrl = `https://www.googleapis.com/drive/v3/files?access_token=${this.token}&pageSize=10&fields=incompleteSearch,nextPageToken,files(id,kind,mimeType,name)`;
      const search = searchText ? `name contains '${searchText}' and trashed = false and` : "trashed = false and";
      const filter = queries[dropdownFilter];
      const nextToken = next ? `&pageToken=${this.nextToken}` : "";
      const url = `${baseUrl}&q=${search}${filter}${nextToken}`;
      const result = await externalRequest("GET", url, null, null, contentType);
      this.nextToken = result.nextPageToken;
      const files = result.files.map(({ id, name, mimeType }) => ({
        id,
        name,
        mimeType: lookupMimeType(mimeType),
        downloadUrl: getDownloadUrl(id, mimeType, this.token)
      }));
      resolve({ files, next: !!result.nextPageToken });
    });
  }
}

function getOneDriveDownloadUrl(id, token) {
  const url = `https://graph.microsoft.com/v1.0/me/drive/items/${id}/content?httpHeaders={"Authorization":"Bearer&#32;${token}"}`;
  return url;
}
class OneDrive {
  async connect() {
    return new Promise(async (resolve, reject) => {
      const { config, portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c;
      const portalHostname = portal.portalHostname;
      const locale = document.documentElement.lang || "en-US";
      const stateValue = `onedrive${Math.floor(Date.now() / 1000)}`;
      const oneDriveOauthUrl = "https://login.microsoftonline.com/common/oauth2/v2.0/authorize";
      const oneDriveScope = "files.read";
      const cloudStorageOAuthRedirectUri = `https://${portalHostname}/home/cloudDriveOauth-callback2.html`;
      const url = `${oneDriveOauthUrl}?scope=${oneDriveScope}&redirect_uri=${cloudStorageOAuthRedirectUri}&response_type=token&client_id=${config.oneDriveClientId}&locale=${locale}&state=${stateValue}`;
      try {
        const oauthSignInUrl = await oauthSignIn(url, portalHostname);
        const state = await getTokenFromUrl(oauthSignInUrl, "state");
        if (stateValue !== state) {
          reject("invalidState");
        }
        this.token = await getTokenFromUrl(oauthSignInUrl, "access_token");
        resolve(this.token);
      }
      catch (error) {
        reject(error);
      }
    });
  }
  search(filterValues = {}) {
    return new Promise(async (resolve) => {
      const { searchText, dropdownFilter, next } = filterValues;
      const authorization = `Bearer ${this.token}`;
      const contentType = "application/json";
      const ext = cloudFileExtensions[dropdownFilter] || "";
      const search = searchText || "";
      const query = `https://graph.microsoft.com/v1.0/me/drive/root/search(q='${search} ${ext}')?select=name,id,file,size&top=10`;
      const url = next ? this.nextLink : query;
      const result = await externalRequest("GET", url, null, authorization, contentType);
      this.nextLink = result["@odata.nextLink"];
      const files = result.value.map(({ size, id, name }) => ({
        size,
        id,
        name,
        mimeType: getMimeType(name),
        downloadUrl: `https://graph.microsoft.com/v1.0/me/drive/items/${id}/content?httpHeaders={"Authorization":"Bearer ${this.token}"}`
      }));
      resolve({ files, next: !!result["@odata.nextLink"] });
    });
  }
}

function getProvider(option) {
  const providers = {
    dropbox: Dropbox,
    "google drive": GoogleDrive,
    onedrive: OneDrive
  };
  return new providers[option]();
}
function getResourceIdentifier(option) {
  const resourceMap = {
    dropbox: "dropBoxConnect",
    "google drive": "googleConnect",
    onedrive: "oneDriveConnect"
  };
  return resourceMap[option];
}
function getProviderOption(option) {
  const providers = {
    dropBoxConnect: Dropbox,
    googleConnect: GoogleDrive,
    oneDriveConnect: OneDrive
  };
  return new providers[option]();
}
function getCloudOption(option) {
  const resourceMap = {
    dropBoxConnect: "dropbox",
    googleConnect: "google drive",
    oneDriveConnect: "onedrive"
  };
  return resourceMap[option];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,