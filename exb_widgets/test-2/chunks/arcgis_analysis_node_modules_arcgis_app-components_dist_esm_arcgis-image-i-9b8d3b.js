"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-image-i-9b8d3b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-item-preview.entry.js":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-item-preview.entry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_image_item_preview: () => (/* binding */ ArcgisImageItemPreview)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layer-ee0d645e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/layer-ee0d645e.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */





const arcgisImageItemPreviewCss = ".from-map-wrapper{position:relative;padding:0.5rem}.loader-container{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.map-container{width:100%;height:100%}.esri-zoom{position:absolute;top:1px;left:1px}.is-rtl .esri-zoom{left:0}";

const ArcgisImageItemPreview = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.jsapiUrl = undefined;
    this.previewLayerUrl = undefined;
    this.previewImageItemObjectId = undefined;
    this.loading = true;
  }
  async componentDidLoad() {
    // add JSAPI CSS link element before the component <style> tag
    this.el.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${this.jsapiUrl}/themes/light/main.css" />`);
    this.initMapView();
  }
  handleRefreshImageItemPreviewLayer() {
    this.refreshImageItemPreviewLayer(this.previewImageItemObjectId);
  }
  async initMapView() {
    try {
      const { previewLayerUrl, previewImageItemObjectId } = this;
      const [Map, MapView, ImageryLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)([
        "esri/Map",
        "esri/views/MapView",
        "esri/layers/ImageryLayer"
      ]);
      this.previewLayer = new ImageryLayer({ url: previewLayerUrl, visible: false });
      const map = new Map({
        layers: [this.previewLayer]
      });
      this.mapView = new MapView({
        map,
        container: this.container
      });
      this.mapView.ui.remove(["attribution"]);
      this.mapView.when(() => {
        this.refreshImageItemPreviewLayer(previewImageItemObjectId);
        this.loading = false;
      });
    }
    catch (e) { }
  }
  async refreshImageItemPreviewLayer(imageItemObjectId) {
    const [MosaicRule] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/layers/support/MosaicRule"]);
    const mosaicRule = new MosaicRule({
      method: "lock-raster",
      lockRasterIds: [imageItemObjectId]
    });
    this.previewLayer.mosaicRule = mosaicRule;
    const imageItemGeometry = await (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_2__.m)(this.previewLayer, imageItemObjectId);
    this.mapView.goTo({ target: imageItemGeometry });
    this.previewLayer.visible = true;
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "map-container", ref: (el) => (this.container = el) })));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "previewImageItemObjectId": ["handleRefreshImageItemPreviewLayer"]
  }; }
};
ArcgisImageItemPreview.style = arcgisImageItemPreviewCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWltYWdlLWktOWI4ZDNiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDMkY7QUFDOUI7QUFDRztBQUM5Qjs7QUFFbEMscURBQXFELGtCQUFrQixlQUFlLGtCQUFrQixrQkFBa0IsUUFBUSxTQUFTLGdDQUFnQyxlQUFlLFdBQVcsWUFBWSxXQUFXLGtCQUFrQixRQUFRLFNBQVMsbUJBQW1CLE9BQU87O0FBRXpSO0FBQ0E7QUFDQSxJQUFJLHFEQUFnQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJHQUEyRyxjQUFjO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw0Q0FBNEM7QUFDMUQsaURBQWlELDJEQUFXO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHNDQUFzQztBQUNuRjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyREFBVztBQUMxQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxvQ0FBb0MscURBQW9CO0FBQ3hELHdCQUF3QiwyQkFBMkI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxREFBQyxDQUFDLGlEQUFJLFFBQVEscURBQUMsVUFBVSw0REFBNEQ7QUFDakc7QUFDQSxhQUFhLE9BQU8scURBQVU7QUFDOUIsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUUrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FyY2dpcy1pbWFnZS1pdGVtLXByZXZpZXcuZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjMuMC45OVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGgsIEggYXMgSG9zdCwgZCBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC05MmViYjM5Ni5qcyc7XG5pbXBvcnQgeyBsIGFzIGxvYWRNb2R1bGVzIH0gZnJvbSAnLi9sb2FkTW9kdWxlcy1hYWYzMGJkNi5qcyc7XG5pbXBvcnQgeyBtIGFzIGdldEltYWdlSXRlbUdlb21ldHJ5IH0gZnJvbSAnLi9sYXllci1lZTBkNjQ1ZS5qcyc7XG5pbXBvcnQgJy4vZnVuY3Rpb25hbC1jODJmNWFiOS5qcyc7XG5cbmNvbnN0IGFyY2dpc0ltYWdlSXRlbVByZXZpZXdDc3MgPSBcIi5mcm9tLW1hcC13cmFwcGVye3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MC41cmVtfS5sb2FkZXItY29udGFpbmVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtNTAlKX0ubWFwLWNvbnRhaW5lcnt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5lc3JpLXpvb217cG9zaXRpb246YWJzb2x1dGU7dG9wOjFweDtsZWZ0OjFweH0uaXMtcnRsIC5lc3JpLXpvb217bGVmdDowfVwiO1xuXG5jb25zdCBBcmNnaXNJbWFnZUl0ZW1QcmV2aWV3ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmpzYXBpVXJsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucHJldmlld0xheWVyVXJsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucHJldmlld0ltYWdlSXRlbU9iamVjdElkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICAvLyBhZGQgSlNBUEkgQ1NTIGxpbmsgZWxlbWVudCBiZWZvcmUgdGhlIGNvbXBvbmVudCA8c3R5bGU+IHRhZ1xuICAgIHRoaXMuZWwuc2hhZG93Um9vdC5maXJzdEVsZW1lbnRDaGlsZC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmViZWdpblwiLCBgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIke3RoaXMuanNhcGlVcmx9L3RoZW1lcy9saWdodC9tYWluLmNzc1wiIC8+YCk7XG4gICAgdGhpcy5pbml0TWFwVmlldygpO1xuICB9XG4gIGhhbmRsZVJlZnJlc2hJbWFnZUl0ZW1QcmV2aWV3TGF5ZXIoKSB7XG4gICAgdGhpcy5yZWZyZXNoSW1hZ2VJdGVtUHJldmlld0xheWVyKHRoaXMucHJldmlld0ltYWdlSXRlbU9iamVjdElkKTtcbiAgfVxuICBhc3luYyBpbml0TWFwVmlldygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBwcmV2aWV3TGF5ZXJVcmwsIHByZXZpZXdJbWFnZUl0ZW1PYmplY3RJZCB9ID0gdGhpcztcbiAgICAgIGNvbnN0IFtNYXAsIE1hcFZpZXcsIEltYWdlcnlMYXllcl0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXG4gICAgICAgIFwiZXNyaS9NYXBcIixcbiAgICAgICAgXCJlc3JpL3ZpZXdzL01hcFZpZXdcIixcbiAgICAgICAgXCJlc3JpL2xheWVycy9JbWFnZXJ5TGF5ZXJcIlxuICAgICAgXSk7XG4gICAgICB0aGlzLnByZXZpZXdMYXllciA9IG5ldyBJbWFnZXJ5TGF5ZXIoeyB1cmw6IHByZXZpZXdMYXllclVybCwgdmlzaWJsZTogZmFsc2UgfSk7XG4gICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKHtcbiAgICAgICAgbGF5ZXJzOiBbdGhpcy5wcmV2aWV3TGF5ZXJdXG4gICAgICB9KTtcbiAgICAgIHRoaXMubWFwVmlldyA9IG5ldyBNYXBWaWV3KHtcbiAgICAgICAgbWFwLFxuICAgICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyXG4gICAgICB9KTtcbiAgICAgIHRoaXMubWFwVmlldy51aS5yZW1vdmUoW1wiYXR0cmlidXRpb25cIl0pO1xuICAgICAgdGhpcy5tYXBWaWV3LndoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnJlZnJlc2hJbWFnZUl0ZW1QcmV2aWV3TGF5ZXIocHJldmlld0ltYWdlSXRlbU9iamVjdElkKTtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHsgfVxuICB9XG4gIGFzeW5jIHJlZnJlc2hJbWFnZUl0ZW1QcmV2aWV3TGF5ZXIoaW1hZ2VJdGVtT2JqZWN0SWQpIHtcbiAgICBjb25zdCBbTW9zYWljUnVsZV0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXCJlc3JpL2xheWVycy9zdXBwb3J0L01vc2FpY1J1bGVcIl0pO1xuICAgIGNvbnN0IG1vc2FpY1J1bGUgPSBuZXcgTW9zYWljUnVsZSh7XG4gICAgICBtZXRob2Q6IFwibG9jay1yYXN0ZXJcIixcbiAgICAgIGxvY2tSYXN0ZXJJZHM6IFtpbWFnZUl0ZW1PYmplY3RJZF1cbiAgICB9KTtcbiAgICB0aGlzLnByZXZpZXdMYXllci5tb3NhaWNSdWxlID0gbW9zYWljUnVsZTtcbiAgICBjb25zdCBpbWFnZUl0ZW1HZW9tZXRyeSA9IGF3YWl0IGdldEltYWdlSXRlbUdlb21ldHJ5KHRoaXMucHJldmlld0xheWVyLCBpbWFnZUl0ZW1PYmplY3RJZCk7XG4gICAgdGhpcy5tYXBWaWV3LmdvVG8oeyB0YXJnZXQ6IGltYWdlSXRlbUdlb21ldHJ5IH0pO1xuICAgIHRoaXMucHJldmlld0xheWVyLnZpc2libGUgPSB0cnVlO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgaChcImRpdlwiLCB7IGNsYXNzOiBcIm1hcC1jb250YWluZXJcIiwgcmVmOiAoZWwpID0+ICh0aGlzLmNvbnRhaW5lciA9IGVsKSB9KSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcInByZXZpZXdJbWFnZUl0ZW1PYmplY3RJZFwiOiBbXCJoYW5kbGVSZWZyZXNoSW1hZ2VJdGVtUHJldmlld0xheWVyXCJdXG4gIH07IH1cbn07XG5BcmNnaXNJbWFnZUl0ZW1QcmV2aWV3LnN0eWxlID0gYXJjZ2lzSW1hZ2VJdGVtUHJldmlld0NzcztcblxuZXhwb3J0IHsgQXJjZ2lzSW1hZ2VJdGVtUHJldmlldyBhcyBhcmNnaXNfaW1hZ2VfaXRlbV9wcmV2aWV3IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=