"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-20bfff"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const addItemStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  typeKeywords: [],
  customParameters: [],
  analyzedLocationTypes: [],
  allowStoredAuth: true,
  isSecured: null,
  checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-58a7e7ab.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-58a7e7ab.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ AppendOverwriteCloudPublishTypes),
/* harmony export */   N: () => (/* binding */ NONE_VALUE),
/* harmony export */   a: () => (/* binding */ appendFileTypes),
/* harmony export */   b: () => (/* binding */ AppendOverwritePublishTypes),
/* harmony export */   c: () => (/* binding */ appendExtensionsForEnterprise),
/* harmony export */   d: () => (/* binding */ appendExtensions),
/* harmony export */   u: () => (/* binding */ uidFields)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const uidFields = ["esriFieldTypeOID", "esriFieldTypeGlobalID"];
const NONE_VALUE = "<None>";
const AppendOverwritePublishTypes = {
  "file geodatabase": "filegeodatabase",
  shapefile: "shapefile",
  geojson: "geojson",
  csv: "CSV",
  "microsoft excel": "excel",
  geopackage: "geoPackage"
};
const appendFileTypes = {
  Shapefile: "shapefile",
  "File Geodatabase": "fileGeodatabase",
  CSV: "csv",
  "Microsoft Excel": "excel",
  GeoJson: "geojson",
  GeoPackage: "geoPackage"
};
const AppendOverwriteCloudPublishTypes = {
  csv: "CSV",
  excel: "Microsoft Excel",
  shapefile: "Shapefile",
  fgdb: "File Geodatabase",
  geojson: "GeoJson",
  googlesheets: "Microsoft Excel"
};
const appendExtensions = ["zip", "csv", "xls", "xlsx", "geojson", "gpkg", "json"];
const appendExtensionsForEnterprise = ["zip", "csv", "xls", "xlsx"];




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-63c5ce83.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-63c5ce83.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ canMatchField),
/* harmony export */   g: () => (/* binding */ getAppendParameters)
/* harmony export */ });
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./append-58a7e7ab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-58a7e7ab.js");
/* harmony import */ var _geocode_7eb7c0df_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./geocode-7eb7c0df.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-7eb7c0df.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */





var __rest = ( false) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function canMatchField(field, matchField) {
  var _a;
  const fieldType = (field === null || field === void 0 ? void 0 : field.type) || null;
  const matchFieldType = (matchField === null || matchField === void 0 ? void 0 : matchField.type) || null;
  const matchFields = {
    esriFieldTypeSmallInteger: ["esriFieldTypeSmallInteger"],
    esriFieldTypeInteger: ["esriFieldTypeInteger", "esriFieldTypeSmallInteger"],
    esriFieldTypeSingle: ["esriFieldTypeSingle", "esriFieldTypeDouble"],
    esriFieldTypeDouble: [
      "esriFieldTypeDouble",
      "esriFieldTypeSingle",
      "esriFieldTypeInteger",
      "esriFieldTypeSmallInteger"
    ],
    esriFieldTypeDate: ["esriFieldTypeDate"],
    esriFieldTypeString: [
      "esriFieldTypeString",
      "esriFieldTypeSmallInteger",
      "esriFieldTypeInteger",
      "esriFieldTypeSingle",
      "esriFieldTypeDouble",
      "esriFieldTypeDate",
      "esriFieldTypeGUID"
    ],
    esriFieldTypeGUID: ["esriFieldTypeGUID", "esriFieldTypeString"],
    esriFieldTypeOID: ["esriFieldTypeOID", "esriFieldTypeSmallInteger", "esriFieldTypeInteger"],
    esriFieldTypeGlobalID: ["esriFieldTypeGlobalID", "esriFieldTypeGUID", "esriFieldTypeString"],
    esriFieldTypeDateOnly: ["esriFieldTypeDateOnly"],
    esriFieldTypeTimeOnly: ["esriFieldTypeTimeOnly"],
    esriFieldTypeTimestampOffset: ["esriFieldTypeTimestampOffset"],
    esriFieldTypeBigInteger: ["esriFieldTypeBigInteger"]
  };
  return matchFieldType && (matchFieldType === fieldType || ((_a = matchFields[fieldType]) === null || _a === void 0 ? void 0 : _a.indexOf(matchFieldType)) > -1);
}
function getAppendParameters(addItemProps) {
  var _a;
  const { timezone, analyzeResults, type, fieldMappings, dataLayer, id, uidPair, addAppendSelectOption, sourceDataLayer } = addItemProps;
  let finalAppendParameters, appendSourceInfo;
  const { publishParameters } = analyzeResults, rest = __rest(analyzeResults, ["publishParameters"]);
  const upsert = addAppendSelectOption === "upsert" || addAppendSelectOption === "update";
  const finalFieldMappings = formatFieldMappings(fieldMappings);
  const appendFields = createAppendFields(finalFieldMappings);
  const timezoneInfo = {
    dateFieldsTimeReference: {
      timeZone: timezone || "UTC",
      respectsDaylightSaving: true
    }
  };
  const defaultAppendParams = {
    sourceTableName: dataLayer.name,
    fieldMappings: (finalFieldMappings === null || finalFieldMappings === void 0 ? void 0 : finalFieldMappings.length) ? JSON.stringify(finalFieldMappings) : null,
    upsert,
    skipInserts: addAppendSelectOption === "update",
    skipUpdates: false,
    useGlobalIds: upsert && (uidPair === null || uidPair === void 0 ? void 0 : uidPair.type) === "esriFieldTypeGlobalID",
    updateGeometry: upsert ? _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_0__.a.addAppendSelectUpdateTypeOption === "attributeAndGeometry" : true,
    appendFields: appendFields.length ? JSON.stringify(appendFields) : null,
    appendItemId: id,
    appendUploadFormat: _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_3__.a[_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_0__.a.type].appendUploadFormat,
    rollbackOnFailure: true
  };
  const publishInfo = __rest(publishParameters, ["layers"]);
  if (type === "CSV") {
    publishParameters.layerInfo.dateFieldsTimeReference = timezoneInfo.dateFieldsTimeReference;
    appendSourceInfo = Object.assign(Object.assign(Object.assign({}, timezoneInfo), publishParameters), rest);
  }
  else if (type === "Microsoft Excel") {
    const layerInfo = (0,_geocode_7eb7c0df_js__WEBPACK_IMPORTED_MODULE_2__.a)({}, true);
    const formattedLayerInfo = getLayerToAppend(layerInfo, publishInfo); //Updated info needs to be added to the layers [] rather than the root for excel
    formattedLayerInfo.dateFieldsTimeReference = timezoneInfo.dateFieldsTimeReference;
    publishInfo.name = dataLayer.name;
    appendSourceInfo = Object.assign(Object.assign(Object.assign(Object.assign({}, timezoneInfo), { layers: [formattedLayerInfo] }), publishInfo), rest);
  }
  else {
    appendSourceInfo = Object.assign(Object.assign(Object.assign({}, timezoneInfo), publishParameters), rest);
  }
  finalAppendParameters = Object.assign(Object.assign({}, defaultAppendParams), { appendSourceInfo: JSON.stringify(appendSourceInfo) });
  if (addAppendSelectOption === "add") {
    finalAppendParameters.upsertMatchingField = sourceDataLayer.objectIdField || ((_a = sourceDataLayer.uniqueField) === null || _a === void 0 ? void 0 : _a.name);
  }
  else {
    if (upsert && (uidPair === null || uidPair === void 0 ? void 0 : uidPair.isUniqueIndex)) {
      finalAppendParameters.upsertMatchingField = uidPair === null || uidPair === void 0 ? void 0 : uidPair.name;
    }
  }
  return finalAppendParameters;
}
function getLayerToAppend(layerInfo, updatedInfo) {
  const formattedLayer = Object.assign({}, layerInfo);
  formattedLayer.locationType = updatedInfo.locationType;
  if (formattedLayer.locationType === "address") {
    formattedLayer.addressFields = updatedInfo.addressFields;
    formattedLayer.sourceCountry = updatedInfo.sourceCountry;
  }
  else if (formattedLayer.locationType === "coordinates") {
    formattedLayer.coordinateFieldType = updatedInfo.coordinateFieldType;
    if (formattedLayer.coordinateFieldType === "LatitudeAndLongitude") {
      formattedLayer.latitudeFieldName = updatedInfo.latitudeFieldName;
      formattedLayer.longitudeFieldName = updatedInfo.longitudeFieldName;
    }
    else {
      formattedLayer.coordinateFieldName = updatedInfo.coordinateFieldName;
    }
  }
  return formattedLayer;
}
function formatFieldMappings(fieldMappings) {
  const fields = fieldMappings.filter((fieldMapping) => {
    return fieldMapping.source !== _append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_1__.N;
  });
  const finalFieldMappings = fields.map(({ source, name }) => {
    return { source, name };
  });
  return finalFieldMappings;
}
function createAppendFields(fieldMappings) {
  const appendFields = fieldMappings.map((mapping) => {
    return mapping.name;
  });
  return appendFields;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-append-key-pair-select.entry.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-append-key-pair-select.entry.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_append_key_pair_select: () => (/* binding */ ArcgisNewItemPagesAppendKeyPairSelect)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./append-58a7e7ab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-58a7e7ab.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _append_63c5ce83_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./append-63c5ce83.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-63c5ce83.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _geocode_7eb7c0df_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./geocode-7eb7c0df.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-7eb7c0df.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _privileges_35590eb4_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./privileges-35590eb4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-35590eb4.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */















const arcgisNewItemPagesAppendKeyPairSelectCss = ".timezone-wrapper{background-color:var(--calcite-ui-background);padding-left:1rem}.timezone{display:block;margin-bottom:0.75rem;-webkit-margin-end:2.5rem;margin-inline-end:2.5rem}.timezone-header{color:var(--calcite-ui-text-1);font-size:1rem;font-weight:500}";

const ArcgisNewItemPagesAppendKeyPairSelect = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.newItemUpdatePage = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
    this.newItemPrevPage = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemPrevPage", 7);
    this.workflowComplete = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowComplete", 7);
    this.handleTimezoneChange = (event) => {
      this.selectedTimezone = event.detail;
    };
    this.handleKeyPairChange = (event) => {
      this.selectedKeyPair = event.detail;
    };
    this.i18n = undefined;
    this.selectedKeyPair = undefined;
    this.selectedTimezone = undefined;
    this.error = undefined;
  }
  handleNext() {
    if (_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.addAppendSelectOption !== "add") {
      if (Object.values(this.selectedKeyPair).includes(_append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_2__.N)) {
        this.error = { title: _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__.u.i18n.error, message: this.i18n.noKeyPair }; //Key pair must be selected to update data.
        return;
      }
      _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.uidPair = this.selectedKeyPair;
    }
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.timezone = this.selectedTimezone;
    this.newItemUpdatePage.emit("appendMatchFields");
  }
  async handlePrev(event) {
    var _a;
    if (!(((_a = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.analyzeResults.publishParameters.layers) === null || _a === void 0 ? void 0 : _a.length) > 1)) {
      //item is deleted on appendSelectLayer
      event.preventDefault();
      _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.uidPair = null;
      this.newItemPrevPage.emit();
    }
  }
  componentWillLoad() {
    var _a;
    const { existingItem, dateFieldsTimeReference, originalFileName } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
    this.i18n = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_3__.u.i18n.appendKeyValuePair;
    this.serviceLayer = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.sourceDataLayer;
    this.selectedTimezone = (_a = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.timezone) !== null && _a !== void 0 ? _a : "UTC";
    this.timezoneDescription = this.i18n.timezoneDescription
      .replace("${uploadedFileName}", originalFileName)
      .replace("${featureLayerName}", existingItem.title)
      .replace("${featureLayerTimezone}", dateFieldsTimeReference.timeZone);
    this.isEnterprise = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_5__.c.portal.isPortal;
    this.findKeyPairs();
  }
  findKeyPairs() {
    var _a;
    const keyPairs = {};
    const serviceLayerFields = this.serviceLayer.fields || [];
    const indexes = this.serviceLayer.indexes || [];
    const dataLayerFields = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.backupLayerFields;
    indexes
      .filter((idx) => idx === null || idx === void 0 ? void 0 : idx.isUnique)
      .forEach((index) => {
      var _a;
      (((_a = index.fields) === null || _a === void 0 ? void 0 : _a.split(",")) || []).forEach((fieldName) => {
        serviceLayerFields.some((field) => {
          if (field.name.toLowerCase() === fieldName.toLowerCase()) {
            field.isUniqueIndex = true;
            return true;
          }
          else {
            return false;
          }
        });
      });
    });
    this.serviceUIDFields = serviceLayerFields
      .filter((field) => (field.type && _append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_2__.u.includes(field.type)) || field.isUniqueIndex)
      .sort((a, b) => a.name.localeCompare(b.name));
    //Generate matched fields with serviceMatchFields
    this.serviceUIDFields.forEach((serviceFieldInfo) => {
      const matches = [];
      dataLayerFields.forEach((dataFieldInfo) => {
        if ((0,_append_63c5ce83_js__WEBPACK_IMPORTED_MODULE_4__.c)(serviceFieldInfo, dataFieldInfo)) {
          matches.push(dataFieldInfo.name);
        }
      });
      keyPairs[serviceFieldInfo.name] = {
        name: serviceFieldInfo.name,
        type: serviceFieldInfo.type,
        idx: 0,
        isUniqueIndex: serviceFieldInfo === null || serviceFieldInfo === void 0 ? void 0 : serviceFieldInfo.isUniqueIndex,
        possibleMatches: [_append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_2__.N, ...matches],
        disabled: true
      };
    });
    this.finalKeyPairs = Object.assign({ "<None>": { name: _append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_2__.N, type: "None", possibleMatches: [_append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_2__.N] } }, keyPairs);
    this.selectedKeyPair = (_a = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.uidPair) !== null && _a !== void 0 ? _a : this.finalKeyPairs[_append_58a7e7ab_js__WEBPACK_IMPORTED_MODULE_2__.N];
    _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.serviceUIDFields = this.serviceUIDFields; //Do not include these fields in following match-fields table.
  }
  render() {
    const { error, i18n, isEnterprise, timezoneDescription } = this;
    const { addAppendSelectOption, backupLayerFields } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
    const isAddWorkflow = addAppendSelectOption === "add";
    const hasDate = backupLayerFields === null || backupLayerFields === void 0 ? void 0 : backupLayerFields.some((field) => field.type === "esriFieldTypeDate");
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, !isAddWorkflow && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-append-key-value-pair", { class: "key-value-pair", keyPairs: this.finalKeyPairs, onKeyPairChange: this.handleKeyPairChange })), hasDate && !isEnterprise && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "timezone-header" }, i18n.timezoneHeader), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "timezone-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-timezone-dropdown", { class: "timezone", onTimezoneChange: this.handleTimezoneChange, defaultTimezone: this.selectedTimezone, subTitle: timezoneDescription })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { heading: error === null || error === void 0 ? void 0 : error.title, description: error === null || error === void 0 ? void 0 : error.message, active: !!error, kind: "danger", onAlertDismiss: () => (this.error = null) })));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemPagesAppendKeyPairSelect.style = arcgisNewItemPagesAppendKeyPairSelectCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,