"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-224140"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-and-drop.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-and-drop.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_drag_and_drop: () => (/* binding */ ArcgisDragAndDrop)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _file_f36193e9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file-f36193e9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-f36193e9.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _item_types_054054c6_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./item-types-054054c6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-054054c6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./guid-4f4176ba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */














const helpMapNumbers = {
  append: 120001300,
  default: 120000456
};
function validateAddedFile(files, isFolder, user, fileConstraints, uiInfo) {
  var _a, _b;
  // Check if unzipped shapefile, then
  // Check if multiple files uploaded, then
  // Check if file extension is supported
  // If it passes all those tests, update the page
  const { helpBase, helpMap, i18n, helpIdType } = uiInfo;
  const { extension } = (0,_file_f36193e9_js__WEBPACK_IMPORTED_MODULE_2__.s)(files[0]);
  const { maxFileSize, allowedExtensions } = fileConstraints;
  let valid = false;
  let errorMessage;
  const validExtension = (_a = allowedExtensions === null || allowedExtensions === void 0 ? void 0 : allowedExtensions.includes(extension)) !== null && _a !== void 0 ? _a : true;
  const foundShapefile = Object.keys(files).some((key) => {
    const { extension } = (0,_file_f36193e9_js__WEBPACK_IMPORTED_MODULE_2__.s)(files[key]);
    const shapefileExtensions = ["shp", "shx", "dbf", "prj"];
    return shapefileExtensions.includes(extension);
  });
  const validationTypes = (_b = fileConstraints.validationTypes) !== null && _b !== void 0 ? _b : null;
  const possibleType = (0,_item_types_054054c6_js__WEBPACK_IMPORTED_MODULE_4__.f)((0,_file_f36193e9_js__WEBPACK_IMPORTED_MODULE_2__.s)(files[0]).extension, validationTypes)[0];
  const validFileType = possibleType &&
    (possibleType.appendUploadFormat || possibleType.allowAddDirect || !possibleType.orgOnly || !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_3__.n)(user));
  if (foundShapefile) {
    errorMessage = {
      title: i18n.error.shapefileErrorTitle,
      message: i18n.error.shapefileErrorMessage,
      link: {
        text: i18n.error.shapefileErrorLink,
        path: `${helpBase}${helpMap["120002804"]}`
      }
    };
  }
  else if (files.length > 1) {
    errorMessage = {
      title: i18n.error.multipleFilesErrorTitle,
      message: i18n.error.multipleFilesErrorMessage
    };
  }
  else if (maxFileSize != null && files[0].size > maxFileSize) {
    const sizeInMB = maxFileSize / 1000000;
    errorMessage = { message: i18n.error.maxSize.replace("${size}", sizeInMB.toString()) };
  }
  else if (!validFileType || !validExtension) {
    const helpMapNumber = helpMapNumbers[helpIdType];
    isFolder
      ? (errorMessage = {
        message: i18n.error.folderError
      })
      : (errorMessage = {
        title: i18n.error.unsupportedFileTypeTitle,
        link: {
          text: i18n.error.unsupportedFileTypeMessage,
          path: `${helpBase}${helpMap[helpMapNumber]}`
        }
      });
  }
  else {
    valid = true;
  }
  return { success: valid, errorMessage };
}

const arcgisDragAndDropCss = ".drag-and-drop-well{position:relative}.drag-and-drop-well ::slotted(*){position:relative;transition:all 200ms ease-in-out;position:relative;border:2px dashed transparent}.drag-and-drop-well ::slotted(*):before{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;background-color:rgba(0, 121, 193, 0) !important;pointer-events:none;transition:background-color 200ms ease-in-out !important;z-index:2}.dragging ::slotted(*){border-color:#007ac2 !important}.dragging ::slotted(*):before{border-color:#007ac2 !important;background-color:rgba(0, 121, 193, 0.05) !important}.notice-container{display:flex;justify-content:center;align-items:center;position:absolute;top:0;left:0;right:0;pointer-events:none;z-index:10}.alert__message{display:block;line-height:1.375}.alert__link{display:inline}.full-height{height:100%}";

const ArcgisDragAndDrop = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisDropSuccess = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDropSuccess", 7);
    this.arcgisAlertActive = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAlertActive", 7);
    this.arcgisDragOver = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDragOver", 7);
    this.config = undefined;
    this.user = undefined;
    this.active = true;
    this.alertMessage = { title: "" };
    this.alertActive = false;
    this.error = false;
    this.files = undefined;
    this.allowedExtensions = null;
    this.validTypes = null;
    this.dragOverNoticeMessage = undefined;
    this.insideModal = undefined;
    this.fullHeight = undefined;
    this.showHelpLinkOnError = true;
    this.maxFileSize = undefined;
    this.helpIdType = "default";
    this.isFolder = false;
    this.dragOver = undefined;
  }
  handleAlertChange() {
    var _a, _b;
    const { alertActive } = this;
    if (alertActive) {
      window.dispatchEvent(new CustomEvent("calciteInternalAlertSync", { detail: { queue: [] } }));
      (_a = this.el.shadowRoot.querySelector("#new-item-alert")) === null || _a === void 0 ? void 0 : _a.setAttribute("active", "");
    }
    else {
      (_b = this.el.shadowRoot.querySelector("#new-item-alert")) === null || _b === void 0 ? void 0 : _b.removeAttribute("active");
    }
    this.arcgisAlertActive.emit(alertActive);
  }
  handleFileUpdate() {
    const { files, i18n, isFolder, user, config, validTypes, helpIdType } = this;
    const { success, errorMessage } = validateAddedFile(files, isFolder, user, {
      allowedExtensions: this.allowedExtensions,
      maxFileSize: this.maxFileSize,
      validationTypes: validTypes
    }, { helpIdType, i18n, helpBase: config.helpBase, helpMap: config.helpMap });
    if (success) {
      this.arcgisDropSuccess.emit(files[0]);
    }
    else {
      this.alertMessage = errorMessage;
      this.alertActive = true;
    }
  }
  handleDragOver(e) {
    if (e.dataTransfer.types.includes("Files")) {
      if (this.wellRef) {
        // * Make sure the notice is visible on screen
        const windowHeight = window.innerHeight;
        const { y: wellOffsetTop, bottom } = this.wellRef.getBoundingClientRect();
        const topBoundary = Math.max(wellOffsetTop, 0);
        const bottomBoundary = Math.min(windowHeight, bottom);
        this.noticeRef.style.height = `${bottomBoundary - topBoundary}px`;
        // -Math.min(0, wellOffsetTop) because:
        //  --- when the well's top is NOT visible, we'll have wellOffsetTop < 0
        //  => we'll offset `top` of the notice's container by that amount
        //  --- when the well's top is visible, we'll have wellOffsetTop > 0
        //  => we'll use 0 for the top of the notice's container
        const relativeTop = -Math.min(0, wellOffsetTop);
        this.noticeRef.style.top = `${relativeTop}px`;
      }
      e.preventDefault();
      this.dragOver = true;
      this.arcgisDragOver.emit(this.dragOver);
    }
    return false;
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
    this.i18n = locale[0];
  }
  render() {
    const { title, message, link } = this.alertMessage;
    const { text, path } = Object.assign({}, link);
    const { active, dragOverNoticeMessage, dragOver, insideModal, fullHeight, showHelpLinkOnError } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (ele) => (this.wellRef = ele), class: {
        hide: !active,
        "drag-and-drop-well": true,
        dragging: this.dragOver,
        "full-height": fullHeight
      }, onDragOver: active && this.handleDragOver.bind(this), onDragLeave: () => {
        this.dragOver = false;
      }, onDrop: (e) => {
        var _a, _b, _c, _d;
        if (!active) {
          return;
        }
        e.preventDefault();
        this.alertActive = false;
        this.dragOver = false;
        const { files, items } = e.dataTransfer;
        const item = items === null || items === void 0 ? void 0 : items[0];
        this.isFolder =
          ((_d = ((_b = (_a = item.webkitGetAsEntry) === null || _a === void 0 ? void 0 : _a.call(item)) !== null && _b !== void 0 ? _b : (_c = item === null || item === void 0 ? void 0 : item.getAsEntry) === null || _c === void 0 ? void 0 : _c.call(item))) === null || _d === void 0 ? void 0 : _d.isDirectory) || false;
        this.files = files;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null), insideModal ? (
    // TODO: consider having this component return an error code rather than a full alert
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { id: "new-item-alert", kind: "danger", onAlertDismiss: () => {
        this.alertActive = false;
      }, active: !!this.alertActive, heading: title, description: message, link: { href: link === null || link === void 0 ? void 0 : link.path, title: link === null || link === void 0 ? void 0 : link.text } })) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { label: "", id: "new-item-alert", icon: true, kind: "danger", onCalciteAlertClose: () => {
        this.alertActive = false;
      }, open: !!this.alertActive, tabIndex: !this.alertActive ? -1 : null, ref: (el) => {
        // here, we hide the queue as it takes up too much room on mobile and we're not using it
        const queue = el.shadowRoot.querySelector(".alert-queue-count");
        if (queue) {
          queue.style.display = "none";
        }
      } }, title && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, title), message && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message", class: "alert__message" }, message)), showHelpLinkOnError && link && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", target: "_blank", href: path, class: "alert__link" }, text)))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "notice-container", ref: (ele) => (this.noticeRef = ele) }, dragOverNoticeMessage && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { icon: "upload-to", open: dragOver, scale: "m", width: "auto" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, dragOverNoticeMessage))))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "alertActive": ["handleAlertChange"],
    "files": ["handleFileUpdate"]
  }; }
};
ArcgisDragAndDrop.style = arcgisDragAndDropCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-f36193e9.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-f36193e9.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ sanitizeFileName),
/* harmony export */   f: () => (/* binding */ formatFileSize),
/* harmony export */   g: () => (/* binding */ getItemInfoByType),
/* harmony export */   s: () => (/* binding */ sanitizeFileInput),
/* harmony export */   v: () => (/* binding */ validateOverwriteFileName)
/* harmony export */ });
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/* harmony import */ var _guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./guid-4f4176ba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



function sanitizeFileName(name, addGUID) {
  //TODO: add new param to spec file.
  const expression = /(?:\.([^.]+))?$/;
  const invalidTitleCharacters = /\.|-/g;
  let fileName = name.replace(/^.*(\\|\/|:)/, "");
  let extension = (fileName && expression.exec(fileName)[1] ? expression.exec(fileName)[1].toLowerCase() : "");
  let title = "";
  if (fileName.indexOf(".rft.") > -1) {
    const [name, suffix] = fileName.split(".rft.");
    extension = `rft.${suffix}`;
    title = name;
  }
  if (fileName && !title) {
    title = fileName.lastIndexOf(".") === -1 ? fileName : fileName.substring(0, fileName.lastIndexOf("."));
  }
  // Replace any invalid characters with an underscore
  title = title.replace(invalidTitleCharacters, "_");
  // Allow file upload of existing item's file name // currently used in append
  if (addGUID) {
    title = makeUniqueFileName(title);
    fileName = `${title}.${extension}`;
  }
  return { title, fileName, extension };
}
// Helper method that takes in a file & returns the cleaned up file name as is and in title form, and the detected file extension
function sanitizeFileInput(file, addGUID) {
  return sanitizeFileName(file.name, !!addGUID);
}
function makeUniqueFileName(name) {
  return `${name}_${(0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_1__.g)()}`;
}
function validateOverwriteFileName(uploadedFileName, sourceFileName) {
  let fileName = uploadedFileName;
  const position = uploadedFileName.lastIndexOf("\\");
  if (position > -1) {
    fileName = fileName.substring(position + 1, fileName.length);
  }
  return fileName.replace(/\ /g, "_") === sourceFileName.replace(/\ /g, "_");
}
function getItemInfoByType(type) {
  if (_item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[type]) {
    return _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[type];
  }
  else {
    return _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[Object.keys(_item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a).find((fileType) => _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_0__.a[fileType].type === type)];
  }
}
function formatFileSize(size) {
  if (!size) {
    return "0 B";
  }
  const i = Math.floor(Math.log(size) / Math.log(1024));
  const adjustedSize = Math.round(size / Math.pow(1024, i));
  const unit = ["B", "KB", "MB", "GB", "TB"][i];
  return `${adjustedSize} ${unit}`;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ guid)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
function generateId(counts) {
  return counts
    .map((count) => {
    let out = "";
    for (let i = 0; i < count; i++) {
      out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return out;
  })
    .join("-");
}
const guid = () => generateId([2, 1, 1, 1, 3]);




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-054054c6.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-054054c6.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isLargeCSV),
/* harmony export */   f: () => (/* binding */ findPossibleItemTypesByExtension),
/* harmony export */   i: () => (/* binding */ isLargeGeoJSON),
/* harmony export */   m: () => (/* binding */ mapItemTypesToFileExtensions)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



function findPossibleItemTypesByExtension(extension, validationTypes) {
  // Search item types extensions for the one imported
  let itemTypes;
  if (validationTypes) {
    itemTypes = validationTypes.map((value) => {
      return value.type;
    });
  }
  else {
    itemTypes = Object.keys(_item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_1__.a);
  }
  let possibleItemTypes = [];
  itemTypes.forEach((type) => {
    var _a;
    if (((_a = _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_1__.a[type].fileExt) === null || _a === void 0 ? void 0 : _a.indexOf(extension)) >= 0) {
      possibleItemTypes.push(_item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_1__.a[type]);
    }
  });
  return possibleItemTypes;
}
function mapItemTypesToFileExtensions(types) {
  if (!types) {
    return null;
  }
  return (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.b)(types.flatMap((type) => { var _a; return (_a = _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_1__.a[type]) === null || _a === void 0 ? void 0 : _a.fileExt; }).filter((valid) => !!valid));
}
const isLargeGeoJSON = (sizeInBytes) => {
  const sizeInMB = sizeInBytes / 1024 / 1024;
  // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2553#issuecomment-3645404
  return sizeInMB > 50; // 50MB
};
const isLargeCSV = (sizeInBytes) => {
  const sizeInMB = sizeInBytes / 1024 / 1024;
  // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2875#issuecomment-3748913
  return sizeInMB > 20; // 20MB
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,