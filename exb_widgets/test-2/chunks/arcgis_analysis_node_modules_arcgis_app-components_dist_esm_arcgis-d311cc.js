"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-d311cc"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-symbol-order.entry.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-symbol-order.entry.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_symbol_order: () => (/* binding */ ArcgisSymbolOrder)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






const CSS = {
  container: "container",
  section: "section",
  title: "title",
  missing: "missing"
};

var SortDirectionIcon;
(function (SortDirectionIcon) {
  SortDirectionIcon["Ascending"] = "sort-ascending-arrow";
  SortDirectionIcon["Descending"] = "sort-descending-arrow";
})(SortDirectionIcon || (SortDirectionIcon = {}));
var SortDirectionTooltip;
(function (SortDirectionTooltip) {
  SortDirectionTooltip["AscendingDate"] = "sortLeastRecent";
  SortDirectionTooltip["AscendingNumber"] = "smallToLarge";
  SortDirectionTooltip["DescendingDate"] = "sortMostRecent";
  SortDirectionTooltip["DescendingNumber"] = "largeToSmall";
})(SortDirectionTooltip || (SortDirectionTooltip = {}));

const arcgisSymbolOrderCss = "article{display:flex;align-items:center;flex-direction:row;grid-gap:0.5rem;gap:0.5rem}article calcite-action{margin-top:0.7em}article calcite-label{width:100%}.infoPopover{width:340px;font-size:12px}.information{margin:0 0 1em 0}";

const ArcgisSymbolOrder = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisSymbolOrderChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolOrderChange", 7);
    this.fieldPickListChanges = (event) => {
      var _a, _b;
      event.stopPropagation();
      const fieldName = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) === null || _b === void 0 ? void 0 : _b[0];
      if (fieldName && fieldName !== this.selectedField.name) {
        this.selectedField =
          fieldName !== this.getRendererFieldName()
            ? this.toPickListFieldInfo(this.findField(fieldName))
            : this.getRendererFieldInfo();
      }
      this.onHideFieldPickList();
    };
    this.view = undefined;
    this.layer = undefined;
    this.open = true;
    this.disabled = false;
    this.fieldTypes = [
      "integer",
      "small-integer",
      "big-integer",
      "single",
      "double",
      "long",
      "date"
    ];
    this.objectIdFieldName = "oid";
    this.ascending = false;
    this.selectedField = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    var _a;
    const [strings] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = strings;
    const { view, layer, pickListFields } = this;
    this.props = {
      view,
      layer
    };
    const fields = pickListFields || this.createPickListFields();
    if (!this.isRendererOrder()) {
      const { orderBy } = layer;
      const orderByInfo = (orderBy === null || orderBy === void 0 ? void 0 : orderBy.length) ? orderBy[0] : orderBy;
      this.ascending = (orderByInfo === null || orderByInfo === void 0 ? void 0 : orderByInfo.mode) === "ascending";
      const orderByField = (this.orderByField =
        (orderByInfo === null || orderByInfo === void 0 ? void 0 : orderByInfo.field) || ((_a = this.findOIDField(fields)) === null || _a === void 0 ? void 0 : _a.name) || fields[0]);
      this.selectedField = this.toPickListFieldInfo(this.findField(orderByField));
    }
    else {
      this.selectedField = this.getRendererFieldInfo();
    }
  }
  async componentDidLoad() {
    // once component is visible make other calls
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/intl"]);
    this.intl = intl;
    this.intl.setLocale(document.documentElement.lang);
  }
  disconnectedCallback() {
    this.destroyFieldsPickList();
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Cleans up component, closes popovers
   */
  async done() {
    this.disableContainer(false);
    this.destroyFieldsPickList();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { strings, open, disabled } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: CSS.container, heading: strings.heading, collapsible: true, disabled: disabled, open: open && !disabled }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "information" }, strings.orderByTooltip), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("article", null, this.renderFieldSelectionButton(), this.renderSortOrderAction())), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { "reference-element": "sort-action", placement: "bottom-start", label: "", ref: (node) => (this.tooltipNode = node) }, this.getSortDirectionTooltip())));
  }
  renderFieldSelectionButton() {
    const { selectedField, strings } = this;
    const fields = this.createPickListFields();
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.orderBy, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { key: "selected-field-button", appearance: "outline-fill", kind: "neutral", width: "full", alignment: "icon-end-space-between", scale: "s", disabled: fields.length <= 1, iconEnd: "chevron-down", onClick: (e) => this.onShowFieldPickList(e), ref: (node) => (this.fieldSelectionNode = node) }, (selectedField === null || selectedField === void 0 ? void 0 : selectedField.alias) || fields[0].alias)));
  }
  renderSortOrderAction() {
    const { selectedField } = this;
    const disabled = selectedField.type === "oid" || selectedField.type === "renderer";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", id: "sort-action", appearance: "transparent", alignment: "start", icon: this.getSortDirectionIcon(), onClick: (e) => this.onToggleSortDirection(e), onMouseOver: () => this.onShowTooltip(true), onMouseOut: () => this.onShowTooltip(false), text: "", disabled: disabled })));
  }
  // --------------------------------------------------------------------------
  //
  //  Event Handlers
  //
  //---------------------------------------------------------------------------
  onChange() {
    const value = this.getValue();
    const isOrderByClasses = value === "renderer";
    this.layer.orderBy = !isOrderByClasses ? value : undefined;
    this.layer.renderer.orderByClassesEnabled = isOrderByClasses || undefined;
    this.arcgisSymbolOrderChange.emit();
  }
  async onShowFieldPickList(e) {
    e.stopPropagation();
    this.disableContainer(true);
    this.createFieldPickList();
  }
  async onHideFieldPickList() {
    this.disableContainer(false);
    this.destroyFieldsPickList();
    await this.fieldSelectionNode.setFocus();
    this.onChange();
  }
  onToggleSortDirection(e) {
    e.stopPropagation();
    this.ascending = !this.ascending;
    this.onChange();
  }
  onShowTooltip(open) {
    this.tooltipNode.open = open;
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  createFieldPickList() {
    const { layer, pickListFields, view, strings } = this;
    const fields = pickListFields || this.createPickListFields();
    const refElement = this.fieldSelectionNode;
    const popoverProps = this.createPopoverProps(refElement);
    const selectedField = this.selectedField || (this.isRendererOrder() ? this.getRendererFieldInfo() : fields[0]);
    const fieldPickList = (this.fieldPickList =
      document.createElement("arcgis-field-pick-list"));
    fieldPickList.heading = strings.orderBy;
    fieldPickList.multiple = false;
    fieldPickList.showFieldInfo = false;
    fieldPickList.showFieldName = true;
    fieldPickList.mapView = view;
    fieldPickList.layer = layer;
    fieldPickList.fields = fields;
    fieldPickList.selectedFields = [selectedField.name];
    fieldPickList.popoverProps = popoverProps;
    fieldPickList.addEventListener("arcgisFieldPickListDismissed", this.fieldPickListChanges);
    document.body.appendChild(fieldPickList);
    return fieldPickList;
  }
  destroyFieldsPickList() {
    if (this.fieldPickList) {
      document.body.removeChild(this.fieldPickList);
      this.fieldPickList = null;
    }
  }
  createPopoverProps(refElement) {
    return {
      placement: "bottom-end",
      offsetDistance: 5,
      offsetSkidding: 0,
      pointerDisabled: true,
      popoverWidth: this.getPopoverWidth(),
      refElement: refElement
    };
  }
  createPickListFields() {
    let { pickListFields } = this;
    if (!pickListFields) {
      const { layer, fieldTypes } = this;
      const { fields } = layer;
      pickListFields = this.pickListFields = fields
        .filter((field) => fieldTypes.indexOf(field === null || field === void 0 ? void 0 : field.type) > -1)
        .map((field) => this.toPickListFieldInfo(field));
      // Add oidField to the list
      const objectIdFieldInfo = this.toPickListFieldInfo(this.getOIDField());
      pickListFields.unshift(objectIdFieldInfo);
      // Add sortByStyles to the beginning of the the list
      if (this.hasTypesOrPredominanceRenderer()) {
        const sortRendererFieldInfo = this.getRendererFieldInfo();
        pickListFields.unshift(sortRendererFieldInfo);
      }
    }
    return pickListFields;
  }
  toPickListFieldInfo(field) {
    return {
      name: field.name,
      alias: this.getFieldAlias(field),
      type: field.type
    };
  }
  getPopoverWidth() {
    var _a;
    const buffer = 30;
    const nodeWidth = (_a = this.hostElement) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width;
    return nodeWidth + buffer || 280;
  }
  getFieldAlias(field) {
    const { strings } = this;
    if (field.type === "oid") {
      return strings.defaultDataOrder;
    }
    else {
      const fieldInfo = this.findFieldInfoFromPopup(field);
      return (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.label) || field.alias || field.name;
    }
  }
  findFieldInfoFromPopup(field) {
    const { popupTemplate } = this.layer;
    const fieldInfos = popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos;
    return (fieldInfos || []).find((fieldInfo) => fieldInfo.fieldName === field.name);
  }
  getOIDField() {
    const { layer } = this;
    const { fields } = layer;
    return fields.find((field) => field.name === layer.objectIdField || field.type === "oid");
  }
  findOIDField(fieldInfos) {
    const { layer } = this;
    return fieldInfos.find((field) => field.name === layer.objectIdField || field.type === "oid");
  }
  findField(name) {
    const { layer } = this;
    const { fields } = layer;
    const field = fields.find((field) => field.name === name);
    return field || fields[0];
  }
  getSortDirectionIcon() {
    return this.ascending ? SortDirectionIcon.Ascending : SortDirectionIcon.Descending;
  }
  getSortDirectionTooltip() {
    const { ascending, selectedField, strings } = this;
    const selectedFeldType = selectedField === null || selectedField === void 0 ? void 0 : selectedField.type;
    let stringKey = "sortLeastRecent";
    if (selectedFeldType === "date") {
      stringKey = ascending
        ? SortDirectionTooltip.AscendingDate
        : SortDirectionTooltip.DescendingDate;
    }
    else {
      stringKey = ascending
        ? SortDirectionTooltip.AscendingNumber
        : SortDirectionTooltip.DescendingNumber;
    }
    return strings[stringKey];
  }
  hasTypesOrPredominanceRenderer() {
    var _a, _b;
    const { layer } = this;
    const { renderer } = layer;
    return ((renderer === null || renderer === void 0 ? void 0 : renderer.type) === "unique-value" &&
      (!((_a = renderer === null || renderer === void 0 ? void 0 : renderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.type) || ((_b = renderer === null || renderer === void 0 ? void 0 : renderer.authoringInfo) === null || _b === void 0 ? void 0 : _b.type) === "predominance"));
  }
  isRendererOrder() {
    const { layer } = this;
    const renderer = layer.renderer;
    return this.hasTypesOrPredominanceRenderer() && (renderer === null || renderer === void 0 ? void 0 : renderer.orderByClassesEnabled) === true;
  }
  getRendererFieldName() {
    const { layer } = this;
    const renderer = layer.renderer;
    return ((this.hasTypesOrPredominanceRenderer() &&
      (renderer.field || renderer.valueExpressionTitle)) ||
      null);
  }
  getRendererFieldInfo() {
    return {
      name: this.getRendererFieldName(),
      alias: this.strings.styleOrder,
      type: "renderer"
    };
  }
  disableContainer(disable) {
    const container = this.hostElement.closest("calcite-flow-item");
    if (container) {
      container.disabled = disable;
    }
  }
  getValue() {
    const { selectedField } = this;
    if (selectedField.type === "oid") {
      return null;
    }
    else if (selectedField.type === "renderer") {
      return "renderer";
    }
    else {
      return [
        {
          order: this.ascending ? "ascending" : "descending",
          field: this.selectedField.name
        }
      ];
    }
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSymbolOrder.style = arcgisSymbolOrderCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,