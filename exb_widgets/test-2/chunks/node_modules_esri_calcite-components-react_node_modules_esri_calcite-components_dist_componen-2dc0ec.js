"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["node_modules_esri_calcite-components-react_node_modules_esri_calcite-components_dist_componen-2dc0ec"],{

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/index4.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/index4.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateEngine: () => (/* binding */ NativeDateEngine)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */
class NativeDateEngine {
    constructor() {
        this._formatterCache = new Map();
        this._commonDateTimeFormatterOptions = {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            timeZoneName: 'shortOffset',
        };
    }
    get name() {
        return 'native';
    }
    create(date) {
        return new Date(date);
    }
    increase(date) {
        const oneDayInMs = 86400000;
        return new Date(date.getTime() + oneDayInMs);
    }
    formatToIsoDateString(date) {
        const year = date.getFullYear();
        const month = date.getMonth() + 1;
        const day = date.getDate();
        return `${year}-${month.toString().padStart(2, '0')}-${day
            .toString()
            .padStart(2, '0')}`;
    }
    isoToTimeZone(isoDate, tz) {
        const date = this._toDate(isoDate);
        const formatter = this._getFormatter(tz);
        const parts = formatter.formatToParts(date);
        const [offset] = parts
            .filter(({ type }) => type === 'timeZoneName')
            .map(({ value }) => value);
        const tzOffset = this._getTimeZoneOffsetInMins(offset);
        const tzOffsetMinutes = date.getMinutes() - (date.getTimezoneOffset() - tzOffset);
        date.setMinutes(tzOffsetMinutes);
        return date;
    }
    same(date1, date2) {
        return date1.getTime() === date2.getTime();
    }
    _toDate(isoDate) {
        return new Date(isoDate);
    }
    _getFormatter(tz) {
        let formatter = this._formatterCache.get(tz);
        if (!formatter) {
            formatter = new Intl.DateTimeFormat('en-US', {
                timeZone: tz,
                ...this._commonDateTimeFormatterOptions,
            });
            this._formatterCache.set(tz, formatter);
        }
        return formatter;
    }
    _getTimeZoneOffsetInMins(gmtTimeZone) {
        const [sign, ...hoursMinutes] = gmtTimeZone.slice(3);
        const [hours, minutes] = hoursMinutes.join('').split(':');
        const signMultiplier = sign === '+' ? 1 : -1;
        return signMultiplier * (Number(hours) * 60 + Number(minutes || 0));
    }
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3Mvbm9kZV9tb2R1bGVzX2VzcmlfY2FsY2l0ZS1jb21wb25lbnRzLXJlYWN0X25vZGVfbW9kdWxlc19lc3JpX2NhbGNpdGUtY29tcG9uZW50c19kaXN0X2NvbXBvbmVuLTJkYzBlYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixLQUFLLEdBQUcsa0NBQWtDLEdBQUc7QUFDL0Q7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE1BQU07QUFDN0Isb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzLXJlYWN0L25vZGVfbW9kdWxlcy9AZXNyaS9jYWxjaXRlLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL2luZGV4NC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjEuMTEuMFxuICovXG5jbGFzcyBOYXRpdmVEYXRlRW5naW5lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fZm9ybWF0dGVyQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2NvbW1vbkRhdGVUaW1lRm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgIG1vbnRoOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgIHRpbWVab25lTmFtZTogJ3Nob3J0T2Zmc2V0JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbmF0aXZlJztcbiAgICB9XG4gICAgY3JlYXRlKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xuICAgIH1cbiAgICBpbmNyZWFzZShkYXRlKSB7XG4gICAgICAgIGNvbnN0IG9uZURheUluTXMgPSA4NjQwMDAwMDtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpICsgb25lRGF5SW5Ncyk7XG4gICAgfVxuICAgIGZvcm1hdFRvSXNvRGF0ZVN0cmluZyhkYXRlKSB7XG4gICAgICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgICAgICAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgICAgIHJldHVybiBgJHt5ZWFyfS0ke21vbnRoLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX0tJHtkYXlcbiAgICAgICAgICAgIC50b1N0cmluZygpXG4gICAgICAgICAgICAucGFkU3RhcnQoMiwgJzAnKX1gO1xuICAgIH1cbiAgICBpc29Ub1RpbWVab25lKGlzb0RhdGUsIHR6KSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLl90b0RhdGUoaXNvRGF0ZSk7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHRoaXMuX2dldEZvcm1hdHRlcih0eik7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gZm9ybWF0dGVyLmZvcm1hdFRvUGFydHMoZGF0ZSk7XG4gICAgICAgIGNvbnN0IFtvZmZzZXRdID0gcGFydHNcbiAgICAgICAgICAgIC5maWx0ZXIoKHsgdHlwZSB9KSA9PiB0eXBlID09PSAndGltZVpvbmVOYW1lJylcbiAgICAgICAgICAgIC5tYXAoKHsgdmFsdWUgfSkgPT4gdmFsdWUpO1xuICAgICAgICBjb25zdCB0ek9mZnNldCA9IHRoaXMuX2dldFRpbWVab25lT2Zmc2V0SW5NaW5zKG9mZnNldCk7XG4gICAgICAgIGNvbnN0IHR6T2Zmc2V0TWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpIC0gKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHR6T2Zmc2V0KTtcbiAgICAgICAgZGF0ZS5zZXRNaW51dGVzKHR6T2Zmc2V0TWludXRlcyk7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICBzYW1lKGRhdGUxLCBkYXRlMikge1xuICAgICAgICByZXR1cm4gZGF0ZTEuZ2V0VGltZSgpID09PSBkYXRlMi5nZXRUaW1lKCk7XG4gICAgfVxuICAgIF90b0RhdGUoaXNvRGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoaXNvRGF0ZSk7XG4gICAgfVxuICAgIF9nZXRGb3JtYXR0ZXIodHopIHtcbiAgICAgICAgbGV0IGZvcm1hdHRlciA9IHRoaXMuX2Zvcm1hdHRlckNhY2hlLmdldCh0eik7XG4gICAgICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZW4tVVMnLCB7XG4gICAgICAgICAgICAgICAgdGltZVpvbmU6IHR6LFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2NvbW1vbkRhdGVUaW1lRm9ybWF0dGVyT3B0aW9ucyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZm9ybWF0dGVyQ2FjaGUuc2V0KHR6LCBmb3JtYXR0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZXI7XG4gICAgfVxuICAgIF9nZXRUaW1lWm9uZU9mZnNldEluTWlucyhnbXRUaW1lWm9uZSkge1xuICAgICAgICBjb25zdCBbc2lnbiwgLi4uaG91cnNNaW51dGVzXSA9IGdtdFRpbWVab25lLnNsaWNlKDMpO1xuICAgICAgICBjb25zdCBbaG91cnMsIG1pbnV0ZXNdID0gaG91cnNNaW51dGVzLmpvaW4oJycpLnNwbGl0KCc6Jyk7XG4gICAgICAgIGNvbnN0IHNpZ25NdWx0aXBsaWVyID0gc2lnbiA9PT0gJysnID8gMSA6IC0xO1xuICAgICAgICByZXR1cm4gc2lnbk11bHRpcGxpZXIgKiAoTnVtYmVyKGhvdXJzKSAqIDYwICsgTnVtYmVyKG1pbnV0ZXMgfHwgMCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTmF0aXZlRGF0ZUVuZ2luZSBhcyBEYXRlRW5naW5lIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=