"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-f81c2f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-dependency-check_3.entry.js":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-dependency-check_3.entry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_dependency_check: () => (/* binding */ ArcgisDependencyCheck),
/* harmony export */   arcgis_item_share_group: () => (/* binding */ ArcgisItemShareGroup),
/* harmony export */   arcgis_item_share_group_card: () => (/* binding */ ArcgisItemShareGroupCard)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _services_adddeef9_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services-adddeef9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-adddeef9.js");
/* harmony import */ var _utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-fba8960d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-fba8960d.js");
/* harmony import */ var _item_d9d70416_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./item-d9d70416.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-d9d70416.js");
/* harmony import */ var _user_e3dedc4a_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./user-e3dedc4a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-e3dedc4a.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./server-item-f12153e6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-f12153e6.js");
/* harmony import */ var _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./item-properties-e6412a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-e6412a9a.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./functional-9f648bee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */





















const arcgisDependencyCheckCss = ".stage{height:100%;overflow:hidden;transform:translate(0, 0)}@media screen and (min-width: 1080px){.stage{height:min(700px, 60vh)}}calcite-modal{--calcite-modal-content-padding:0;--calcite-modal-width:1080px}.top-bar{font-weight:500;padding-top:1.5rem;padding-bottom:0.5rem;padding-left:1rem;padding-right:1rem;font-size:0.875rem}@media screen and (min-width: 1080px){.top-bar{padding-left:0;padding-right:0}}.top-notice{padding-bottom:0.75rem;margin-bottom:0.75rem;border-bottom:1px solid var(--calcite-ui-border-1)}.open-item{-webkit-margin-start:0.25rem;margin-inline-start:0.25rem;-webkit-border-start:1px solid var(--calcite-ui-border-1);border-inline-start:1px solid var(--calcite-ui-border-1);-webkit-padding-start:0.25rem;padding-inline-start:0.25rem}.status-banner{display:flex;align-items:center;padding-left:1rem;padding-right:1rem;padding-top:0.25rem;padding-bottom:0.25rem;font-size:0.75rem;border-bottom:1px solid var(--calcite-ui-border-2)}.status-banner>calcite-icon{color:var(--calcite-ui-danger);-webkit-margin-end:0.5rem;margin-inline-end:0.5rem}.status-banner>span{margin-top:2px}.status-banner--info>calcite-icon{color:var(--calcite-ui-info)}.compact-grid-content{--arcgis-item-browser-content-spacing:0.5rem}.preview-notice{margin-bottom:1rem}";

const ArcgisDependencyCheck = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.workflowCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowCancel", 7);
    this.workflowComplete = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowComplete", 7);
    this.analyzeSharingDetail = async () => {
      let { preProcessedSharingDetail: newShareDetail, items, portal, i18n } = this;
      this.loadingText = "loadingInfo";
      let errorCode;
      if (!this.preProcessedSharingDetail) {
        const analyzeResults = await Promise.all(items.map(({ item, overrideLayers }) => (0,_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_4__.a)(item, portal, overrideLayers, // TODO: remove this assertion when we have a proper type for layerType
        { clearDataCacheOnDone: false })));
        _services_adddeef9_js__WEBPACK_IMPORTED_MODULE_4__.e.forEach((type) => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.c)(type));
        newShareDetail = analyzeResults.reduce((acc, { error, result }) => {
          // TODO: hair splitting this maybe
          errorCode = error === null || error === void 0 ? void 0 : error.code;
          if (result) {
            Object.keys(result).forEach((key) => {
              acc[key] = [...acc[key], ...result[key]];
            });
          }
          return acc;
        }, {
          needEditableLayers: [],
          needPubliclyEditableLayers: [],
          needDataCollectionLayers: [],
          needsShareLevelUpdateLayers: [],
          premiumLayers: [],
          notEditableLayers: []
        });
      }
      this.sharingDetail = newShareDetail;
      if (!this.sharingDetail || errorCode === "dataNotAvailable") {
        this.errorMessage = i18n.unableToGetItem;
        return [];
      }
      return this.filterAndGetSharingDetails();
    };
    this.filterAndGetSharingDetails = () => {
      const { sharingDetail } = this;
      if (Object.keys(sharingDetail).every((key) => { var _a; return !((_a = sharingDetail[key]) === null || _a === void 0 ? void 0 : _a.length); })) {
        // No error to show
        return;
      }
      const { needEditableLayers, needsShareLevelUpdateLayers } = sharingDetail;
      this.needsShareLevelUpdateLayers = needsShareLevelUpdateLayers;
      this.needEditableLayers = needEditableLayers;
      this.shareableItemCount = [...needsShareLevelUpdateLayers, ...needEditableLayers].length;
      const displayItems = Object.keys(sharingDetail).reduce((acc, key) => {
        var _a;
        (_a = sharingDetail[key]) === null || _a === void 0 ? void 0 : _a.forEach((layer) => {
          acc.push({ item: layer.sourceItem, state: key });
        });
        return acc;
      }, []);
      this.displayItems = displayItems;
      return displayItems;
    };
    this.closeDialog = () => {
      this.workflowCancel.emit();
    };
    this.updateSharing = async () => {
      const { needsShareLevelUpdateLayers, needEditableLayers, portal, items } = this;
      this.isLoading = true;
      this.loadingText = "updatingSharing";
      const needsUpdateLayerInfo = [...needsShareLevelUpdateLayers, ...needEditableLayers];
      const updatedSourceItems = needsUpdateLayerInfo.map(({ sourceItem }) => sourceItem);
      const shouldUpdateShareLevel = needsUpdateLayerInfo.some(({ detail }) => detail.needsShareLevelUpdate);
      const newShareLevel = shouldUpdateShareLevel
        ? // ! This assume all items have the same level of access because that's the only use case right now
          items[0].item.access
        : null;
      const shouldUpdateGroup = needsUpdateLayerInfo.some(({ detail }) => detail.needsGroupUpdate) &&
        // people in groups can already see the item shared to org or public
        //  so there is no need to share to groups which can cause noises
        newShareLevel !== "public";
      if (!shouldUpdateShareLevel && !shouldUpdateGroup) {
        // The update button shouldn't even show up if there is nothing to update
        console.warn("Unexpected state: no need to update share level or group");
      }
      else {
        await (0,_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_4__.s)(updatedSourceItems, items.map(({ item }) => item), newShareLevel, portal, shouldUpdateGroup);
      }
      this.isLoading = false;
      this.workflowComplete.emit({ updatedSourceItems, oldSharingDetail: this.sharingDetail });
    };
    this.getStatusInfoForLayerState = (state) => {
      switch (state) {
        case "needEditableLayers":
          return {
            i18nKey: "sharingPDCEnabled",
            kind: "info"
          };
        case "needPubliclyEditableLayers":
        case "needDataCollectionLayers":
          return {
            i18nKey: "pdc",
            kind: "danger",
            link: "https://doc.arcgis.com/en/arcgis-online/manage-data/manage-editing-hfl.htm#ESRI_SECTION2_82D598D7970A4A97923EED07CEB4A6A2"
          };
        case "premiumLayers":
          return {
            i18nKey: "premium",
            kind: "info",
            link: "https://doc.arcgis.com/en/arcgis-online/reference/faq.htm#SHARE_SUBSCR_LYR"
          };
        case "notEditableLayers":
          return { i18nKey: "noPermission", kind: "danger" };
        default:
          return null;
      }
    };
    this.renderPreviewItemNotice = () => {
      const { previewItemState, getStatusInfoForLayerState, i18n } = this;
      const previewItemStatusInfo = previewItemState
        ? getStatusInfoForLayerState(previewItemState)
        : null;
      if (!previewItemStatusInfo) {
        return null;
      }
      const { i18nKey, kind, link } = previewItemStatusInfo;
      const needShareI18N = i18n.needShare;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { open: true, closable: false, scale: "m", kind: kind, slot: "preview-summary-top", class: "preview-notice" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, needShareI18N[i18nKey].panel), link && i18nKey !== "noPermission" && i18nKey !== "sharingPDCEnabled" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", href: link, target: "_blank", rel: "noopener" }, needShareI18N[i18nKey].learnMore))));
    };
    this.user = undefined;
    this.portal = undefined;
    this.config = undefined;
    this.api = undefined;
    this.isActive = true;
    this.items = undefined;
    this.preProcessedSharingDetail = undefined;
    this.isLoading = undefined;
    this.sharingDetail = undefined;
    this.sections = [];
    this.needsShareLevelUpdateLayers = [];
    this.needEditableLayers = [];
    this.displayItems = [];
    this.previewItemState = null;
    this.loadingText = "loadingInfo";
    this.errorMessage = null;
    this.shareableItemCount = 0;
  }
  async componentWillLoad() {
    this.items = this.items.map((itemInfo) => {
      var _a;
      return (Object.assign(Object.assign({}, itemInfo), { item: (_a = itemInfo.item.sourceJSON) !== null && _a !== void 0 ? _a : itemInfo.item }));
    });
    const { el } = this;
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_3__.g)(el);
    this.i18n = locale[0];
  }
  handleNewPreProcessedSharingDetail() {
    var _a;
    (_a = this.itemBrowserRef) === null || _a === void 0 ? void 0 : _a.refresh();
  }
  componentDidLoad() {
    // Data processing will be handled by item browser on load below
  }
  render() {
    const { updateSharing, isActive, api, closeDialog, i18n, isLoading, loadingText, shareableItemCount, errorMessage, portal, user, config, analyzeSharingDetail, getStatusInfoForLayerState, displayItems, renderPreviewItemNotice } = this;
    const canUpdate = shareableItemCount > 0;
    const hasError = !!errorMessage;
    const needShareI18N = i18n.needShare;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { onCalciteModalClose: closeDialog, open: isActive, outsideCloseDisabled: true, escapeDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header", class: "header" }, i18n.updateSharing), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "stage" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { icon: true, open: hasError, label: errorMessage, kind: "danger", onCalciteAlertClose: () => (this.errorMessage = null) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, errorMessage)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-loader", { active: isLoading, text: i18n[loadingText] }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser", { fetch: async () => {
        var _a;
        const displayItems = (_a = (await analyzeSharingDetail())) !== null && _a !== void 0 ? _a : [];
        return {
          total: displayItems.length,
          nextStart: 0,
          num: displayItems.length,
          start: 0,
          results: displayItems.map(({ item }) => item)
        };
      }, onArcgisItemBrowserPreview: ({ detail: previewItem }) => {
        var _a, _b;
        if (!previewItem) {
          this.previewItemState = null;
        }
        this.previewItemState =
          (_b = (_a = displayItems.find(({ item }) => item.id === previewItem.id)) === null || _a === void 0 ? void 0 : _a.state) !== null && _b !== void 0 ? _b : null;
      }, hideContentTop: true, contentPaddedBottom: true, hidePreviewFooters: true, portal: portal, user: user, config: config, selection: "none", api: api, num: 99999, ref: (ele) => (this.itemBrowserRef = ele) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-content", { class: "compact-grid-content", slot: "content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-bar" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-notice", innerHTML: i18n[portal.isPortal ? "noticeEnterprise" : "notice"] }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, i18n.canBeShared
      .replace("${count}", shareableItemCount.toString())
      .replace("${total}", displayItems.length.toString()))), displayItems.map(({ item, state }) => {
      const statusInfo = getStatusInfoForLayerState(state);
      const isInfoStatus = (statusInfo === null || statusInfo === void 0 ? void 0 : statusInfo.kind) === "info";
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card", { key: item.id, item: item, portal: portal, user: user, baseUrl: config.baseUrl, preview: "top", showOwner: true, showDateUpdated: true, showItemType: true, showSummary: true, showBadges: true }, statusInfo && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-top", class: {
          "status-banner": true,
          "status-banner--info": isInfoStatus
        } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: isInfoStatus ? "information" : "exclamationMarkTriangle", scale: "s" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, needShareI18N[statusInfo.i18nKey].notice))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-end", class: "open-item" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "s", appearance: "transparent", kind: "neutral", onClick: () => window.open((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.m)(item.id, config.baseUrl), "_blank", "noopener") }, i18n.goToItem))));
    })), renderPreviewItemNotice())), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: canUpdate ? "outline" : "solid", kind: "brand", "data-id": "cancelButton", onClick: () => (this.isActive = false), width: "full" }, i18n[canUpdate ? "cancel" : "ok"]), canUpdate && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "solid", kind: "brand", "data-id": "nextButton", onClick: updateSharing, width: "full", disabled: isLoading }, i18n.update))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "preProcessedSharingDetail": ["handleNewPreProcessedSharingDetail"]
  }; }
};
ArcgisDependencyCheck.style = arcgisDependencyCheckCss;

const getUserGroups = async ({ items, portal, shareMode, user }) => {
  try {
    const itemOwner = await getItemOwner({ user, items, portal });
    // Useful in case we're admin trying to change the owner's item
    const allUsers = user.username === itemOwner.username ? [user] : [user, itemOwner];
    const userGroupLookup = await queryUserDetails({
      portal,
      user,
      shareMode,
      itemOwner
    });
    const groupResults = await Promise.all(allUsers.map((currentUser) => getAllGroupsForUser({ user: currentUser, portalUser: user, portal, shareMode, userGroupLookup, items })));
    const flattenedGroups = groupResults.flatMap((result) => result.result);
    const groupIds = flattenedGroups.map(({ id }) => id);
    const uniqueGroups = flattenedGroups.filter((group, i) => groupIds.indexOf(group.id) === i);
    return {
      result: {
        uniqueGroups,
        userGroupLookup,
        allUsers,
        searchUsername: user.username === itemOwner.username ? user.username : itemOwner.username
      }
    };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
const MAX_GROUP_SEARCH = 100;
/** Fetch the group for the item that the user is also a part of */
const getItemGroups = async (itemIds, userGroupIds, portal) => {
  try {
    const itemGroupResponses = await Promise.all((0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_8__.g)(userGroupIds, MAX_GROUP_SEARCH).map(async (groupIds) => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.r)(`${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}/content/itemsgroups`, {
      items: itemIds.join(","),
      groups: groupIds.join(",")
    })));
    const result = {};
    itemGroupResponses.forEach((response) => {
      Object.keys(response).forEach((groupId) => {
        const group = response[groupId];
        if (!result[groupId]) {
          result[groupId] = group;
        }
        else {
          result[groupId].items = [...result[groupId].items, ...group.items];
        }
      });
    });
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
/**
 * Given a user, get all of their groups using the groups search endpoint
 *
 * pseudocode:
 * get the first 100 groups (the max allowed by groups search endpoint)
 * if that accounts for all of a user's groups, return them
 * else, get all the other groups
 * (in parallel batched requests based on response.nextStart)
 * and return them
 */
const getAllGroupsForUser = async ({ user, portalUser, portal, shareMode, userGroupLookup, items }) => {
  var _a;
  const params = {
    q: (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_5__.a)({
      shareMode,
      currentUsername: portalUser.username,
      user,
      userGroupLookup,
      isPrivate: ((_a = items[0]) === null || _a === void 0 ? void 0 : _a.access) === "private"
    }),
    num: 100,
    searchUserAccess: "groupMember",
    searchUserName: user.username
  };
  try {
    const firstGroupSearchResult = await fetchGroups(portal, params);
    // if nextStart is -1, we've got all the groups.
    if (firstGroupSearchResult.nextStart === -1) {
      return { result: firstGroupSearchResult.results };
    }
    // if not, we'll have to make n more requests
    // we can do these in parallel, and concatenate them with Promise.all()
    const requestsNeeded = Math.ceil(firstGroupSearchResult.total / 100) - 1;
    const groupSearchPromises = [];
    for (let i = 0; i < requestsNeeded; i++) {
      groupSearchPromises.push(new Promise(async (innerResolve) => {
        const start = (i + 1) * 100 + 1;
        const innerResponse = await fetchGroups(portal, Object.assign(Object.assign({}, params), { start }));
        innerResolve(innerResponse.results);
      }));
    }
    const otherGroupSearchResults = (await Promise.all(groupSearchPromises)).flat();
    return { result: [...firstGroupSearchResult.results, ...otherGroupSearchResults] };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
const fetchGroups = (portal, params) => (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_6__.r)(`${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.k)(portal)}/community/groups`, portal, {
  body: params,
  usePost: true
});
const getItemOwner = async ({ user, items, portal }) => {
  var _a;
  if ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.F)(items, user) &&
    (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.E)({ items, user, portal }) &&
    (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.G)(user)) {
    const firstItem = items[0];
    return (_a = firstItem.itemOwner) !== null && _a !== void 0 ? _a : (await (0,_user_e3dedc4a_js__WEBPACK_IMPORTED_MODULE_7__.f)(firstItem.owner, portal));
  }
  return user;
};
const queryUserDetails = async ({ user, portal, shareMode, itemOwner }) => {
  const userDetailResults = await Promise.all([
    (0,_user_e3dedc4a_js__WEBPACK_IMPORTED_MODULE_7__.f)(user.username, portal),
    // for admin case, we also fetch the item owner's group
    shareMode === "admin" && itemOwner.username !== user.username ? (0,_user_e3dedc4a_js__WEBPACK_IMPORTED_MODULE_7__.f)(itemOwner.username, portal) : null
  ]);
  return Object.assign({ [user.username]: userDetailResults[0].groups }, (!!userDetailResults[1] && { [itemOwner.username]: userDetailResults[1].groups }));
};

const arcgisItemShareGroupCss = ".content{display:flex;justify-content:space-between;align-items:center;margin-top:1rem}.information-text{font-size:0.875rem;margin-top:0;margin-bottom:0}.text-padding{margin-top:0.5rem}";

const ArcgisItemShareGroup = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.editGroupClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "editGroupClick", 7);
    this.dirtyChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dirtyChange", 7);
    this.analyzeUserGroupComplete = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "analyzeUserGroupComplete", 7);
    this.removeClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "removeClick", 7);
    this.revertClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "revertClick", 7);
    this.hasGroups = false;
    this.user = undefined;
    this.portal = undefined;
    this.config = undefined;
    this.items = undefined;
    this.shareMode = undefined;
    this.isLoading = undefined;
    this.i18n = undefined;
    this.selectedGroupData = [];
    this.initialSelectedGroups = [];
    this.canShareItemToGroup = false;
    this.isDirty = false;
    this.isSharingMixed = false;
  }
  handleSelectedGroupsChange(newList) {
    const { user, initialSelectedGroups, items } = this;
    this.canShareItemToGroup = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_5__.k)(newList, user);
    this.isDirty = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_5__.i)(newList, initialSelectedGroups);
    this.isSharingMixed = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_5__.l)(items, newList);
    this.dirtyChange.emit(this.isDirty);
  }
  async componentDidLoad() {
    const { user, portal, items, shareMode } = this;
    this.isLoading = true;
    // TODO: handle error
    const { result } = await getUserGroups({
      user,
      portal,
      items,
      shareMode
    });
    const { uniqueGroups: userGroups, userGroupLookup, searchUsername, allUsers } = result;
    const { result: itemGroupInfo } = await getItemGroups(items.map((item) => item.id), userGroups.map((group) => group.id), portal);
    const initialGroups = userGroups
      // Find the intersect of the groups that the user is a member of
      //  and the groups that the item is shared to
      .filter(({ id }) => !!itemGroupInfo[id])
      .map((group) => ({
      group,
      selectedByItemIds: items
        .filter(({ id }) => !!itemGroupInfo[group.id].items.find((item) => item.itemId === id))
        .map((item) => item.id)
    }));
    this.hasGroups = userGroups.length > 0;
    this.canShareItemToGroup = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_5__.k)(initialGroups, user);
    this.initialSelectedGroups = initialGroups;
    this.isLoading = false;
    this.analyzeUserGroupComplete.emit({
      allUsers,
      initialSelectedGroups: initialGroups,
      userGroupLookup,
      searchUsername
    });
  }
  render() {
    const { i18n, isLoading, canShareItemToGroup, removeClick, revertClick, selectedGroupData, hasGroups, isDirty, isSharingMixed } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.title, headerSideContent: isDirty ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", iconStart: "reset", disabled: isLoading, onClick: () => revertClick.emit() }, i18n.revert)) : (selectedGroupData.length > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", iconStart: "x", disabled: isLoading, onClick: () => removeClick.emit() }, i18n.remove))) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-container" }, selectedGroupData.length > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-thumbnail-stack", { groups: selectedGroupData.map(({ group }) => group) })) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "information-text" }, i18n[hasGroups ? "noneYet" : "noGroup"]))), hasGroups && canShareItemToGroup && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { iconStart: "group", appearance: "outline-fill", disabled: isLoading, onClick: () => this.editGroupClick.emit() }, i18n.edit))), !isLoading && isSharingMixed && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "information-text text-padding" }, i18n.mixedGroupSharing))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "selectedGroupData": ["handleSelectedGroupsChange"]
  }; }
};
ArcgisItemShareGroup.style = arcgisItemShareGroupCss;

const arcgisItemShareGroupCardCss = ":host{display:contents}";

const ArcgisItemShareGroupCard = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.revertClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "revertClick", 7);
    this.user = undefined;
    this.portal = undefined;
    this.group = undefined;
    this.groupCount = undefined;
    this.initialSelectedGroupDataLookup = undefined;
    this.selectedGroupDataLookup = undefined;
    this.totalItemCount = undefined;
    this.i18n = undefined;
  }
  render() {
    const { group, groupCount, totalItemCount, initialSelectedGroupDataLookup, selectedGroupDataLookup, revertClick, portal, user, i18n } = this;
    const totalItemCountStr = totalItemCount.toString();
    const groupId = group.id;
    const curGroupCount = groupCount[group.id];
    let selectionType = "none";
    switch (true) {
      case curGroupCount < totalItemCount:
        selectionType = "indeterminate";
        break;
      case curGroupCount === totalItemCount:
        selectionType = "all";
        break;
    }
    const initialSelectionType = initialSelectedGroupDataLookup[groupId];
    /**
     * We can't just do initialSelectionType !== selectionType because
     *  initialSelectionType can be undefined if a group is not selected initially
     *  since we construct `initialSelectedGroupDataLookup` based on the pre-selected group
     *  and don't have the knowledge about other groups since they're from the API
     * So it will still show the revert button even if the group is not selected initially and selectionType === "none"
     *  without that condition
     */
    const isGroupSelectionChanged = (!!initialSelectionType || selectionType !== "none") &&
      initialSelectionType !== selectionType;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-card", { group: group, portal: portal, user: user, name: group.title, selected: !!selectedGroupDataLookup[groupId], indeterminate: selectionType === "indeterminate", selection: "multiple", preview: "action", view: "compact", showOwner: true, showDateUpdated: true, showSummary: true, key: groupId }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { slot: "content-end" }, curGroupCount && curGroupCount > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "group-item-counter" }, i18n[isGroupSelectionChanged ? "willShareCountHint" : "sharedCountHint"]
      .replace("${numItem}", curGroupCount.toLocaleString())
      .replace("${totalItem}", totalItemCountStr))), isGroupSelectionChanged && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "revert-single-group-cta", appearance: "transparent", onClick: (event) => {
        event.stopPropagation();
        revertClick.emit();
      } }, i18n.revert)))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemShareGroupCard.style = arcgisItemShareGroupCardCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-e3dedc4a.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-e3dedc4a.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getSignedInUsersGroups),
/* harmony export */   b: () => (/* binding */ getSignedInUsersFavoritesGroup),
/* harmony export */   c: () => (/* binding */ createFolder),
/* harmony export */   d: () => (/* binding */ getFolderFromId),
/* harmony export */   e: () => (/* binding */ getHomeFolderForUser),
/* harmony export */   f: () => (/* binding */ fetchUser),
/* harmony export */   g: () => (/* binding */ getFolders)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



async function fetchUser(username, portal) {
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}/community/users/${username}`);
}
async function fetchSelf() {
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}/community/self`);
}
async function getSignedInUsersGroups() {
  var _a;
  const user = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
  if (!user) {
    return [];
  }
  const self = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => fetchSelf(), "communitySelf", user.username);
  return (_a = self === null || self === void 0 ? void 0 : self.groups) !== null && _a !== void 0 ? _a : [];
}
async function getSignedInUsersFavoritesGroup() {
  const user = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
  if (!user) {
    return null;
  }
  const self = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => fetchSelf(), "communitySelf", user.username);
  return self.favGroupId;
}
async function getUserContent(portalUser) {
  var _a, _b;
  const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal;
  (_b = user.userContentUrl) !== null && _b !== void 0 ? _b : (user.userContentUrl = (portal === null || portal === void 0 ? void 0 : portal.restUrl) + "/content/users/" + portalUser.username);
  const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(user.userContentUrl, { num: 1 });
  return Promise.resolve(response);
}
async function getFolders(portalUser) {
  var _a;
  const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
  const { folders } = await getUserContent(user);
  const { username } = user;
  // add the home folder as if it's in the list
  return [{ username, id: username, title: username, created: "now" }, ...folders];
}
async function getFolderFromId(folderId, portalUser) {
  var _a;
  const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
  const folders = await getFolders(user);
  return folders.find((folder) => folder.id === folderId);
}
function getHomeFolderForUser(username) {
  return { username, id: username, title: username, created: "now" };
}
async function createFolder(folderName, portalUser) {
  var _a;
  const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
  const url = `${user.userContentUrl}/createFolder`;
  const folderResponse = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { title: folderName }, {}, "post");
  return folderResponse;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,