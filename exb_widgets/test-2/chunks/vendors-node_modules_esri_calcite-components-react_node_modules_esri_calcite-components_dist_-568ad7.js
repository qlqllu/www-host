"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-node_modules_esri_calcite-components-react_node_modules_esri_calcite-components_dist_-568ad7"],{

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/calcite-color-picker.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/calcite-color-picker.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CalciteColorPicker: () => (/* binding */ CalciteColorPicker),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@esri/calcite-components-react/node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/index2.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/dom.js");
/* harmony import */ var _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./color-picker-hex-input.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/color-picker-hex-input.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/utils.js");
/* harmony import */ var _interactive_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interactive.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/interactive.js");
/* harmony import */ var _key_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./key.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/key.js");
/* harmony import */ var _loadable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadable.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/loadable.js");
/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locale.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/locale.js");
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./math.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/math.js");
/* harmony import */ var _t9n_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./t9n.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/t9n.js");
/* harmony import */ var _button_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./button.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/button.js");
/* harmony import */ var _color_picker_swatch_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./color-picker-swatch.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/color-picker-swatch.js");
/* harmony import */ var _icon_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./icon.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/icon.js");
/* harmony import */ var _input_number_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./input-number.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/input-number.js");
/* harmony import */ var _input_text_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./input-text.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/input-text.js");
/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./loader.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/loader.js");
/* harmony import */ var _progress_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./progress.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/progress.js");
/* harmony import */ var _tab_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tab.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tab.js");
/* harmony import */ var _tab_nav_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./tab-nav.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tab-nav.js");
/* harmony import */ var _tab_title_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tab-title.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tab-title.js");
/* harmony import */ var _tabs_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./tabs.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tabs.js");
/* harmony import */ var _throttle_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./throttle.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/throttle.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */
























const colorPickerCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:inline-block;font-size:var(--calcite-font-size--2);line-height:1rem;font-weight:var(--calcite-font-weight-normal)}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}:host([scale=s]){--calcite-color-picker-spacing:8px}:host([scale=s]) .container{inline-size:160px}:host([scale=s]) .saved-colors{gap:0.25rem;grid-template-columns:repeat(auto-fill, 20px)}:host([scale=m]){--calcite-color-picker-spacing:12px}:host([scale=m]) .container{inline-size:272px}:host([scale=l]){--calcite-color-picker-spacing:16px;font-size:var(--calcite-font-size--1);line-height:1rem}:host([scale=l]) .container{inline-size:464px}:host([scale=l]) .section:first-of-type{padding-block-start:var(--calcite-color-picker-spacing)}:host([scale=l]) .saved-colors{grid-template-columns:repeat(auto-fill, 32px)}:host([scale=l]) .control-section{flex-wrap:nowrap;align-items:baseline;flex-wrap:wrap}:host([scale=l]) .color-hex-options{display:flex;flex-shrink:1;flex-direction:column;justify-content:space-around}:host([scale=l]) .color-mode-container{flex-shrink:3}.container{background-color:var(--calcite-ui-foreground-1);display:inline-block;border:1px solid var(--calcite-ui-border-1)}.control-and-scope{position:relative;display:flex;cursor:pointer;touch-action:none}.scope{pointer-events:none;position:absolute;z-index:var(--calcite-app-z-index);block-size:1px;inline-size:1px;border-radius:9999px;background-color:transparent;font-size:var(--calcite-font-size--1);outline-color:transparent}.scope:focus{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-ui-brand));outline-offset:calc(\n            2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-ui-focus-offset-invert),\n                1\n              )\n            )\n          );outline-offset:11px}.hex-and-channels-group{inline-size:100%}.hex-and-channels-group,.control-section{display:flex;flex-direction:row;flex-wrap:wrap}.section{padding-block:0 var(--calcite-color-picker-spacing);padding-inline:var(--calcite-color-picker-spacing)}.section:first-of-type{padding-block-start:var(--calcite-color-picker-spacing)}.sliders{display:flex;flex-direction:column;justify-content:space-between;margin-inline-start:var(--calcite-color-picker-spacing)}.preview-and-sliders{display:flex;align-items:center;padding:var(--calcite-color-picker-spacing)}.color-hex-options,.section--split{flex-grow:1}.header{display:flex;align-items:center;justify-content:space-between;color:var(--calcite-ui-text-1)}.color-mode-container{padding-block-start:var(--calcite-color-picker-spacing)}.channels{display:flex;row-gap:0.125rem}.channel[data-channel-index=\"3\"]{inline-size:159px}:host([scale=s]) .channels{flex-wrap:wrap}:host([scale=s]) .channel{flex-basis:30%;flex-grow:1}:host([scale=s]) .channel[data-channel-index=\"3\"]{inline-size:unset;margin-inline-start:unset}:host([scale=l]) .channel[data-channel-index=\"3\"]{inline-size:131px}.saved-colors{display:grid;gap:0.5rem;padding-block-start:var(--calcite-color-picker-spacing);grid-template-columns:repeat(auto-fill, 24px)}.saved-colors-buttons{display:flex}.saved-color{outline-offset:0;outline-color:transparent;cursor:pointer}.saved-color:focus{outline:2px solid var(--calcite-ui-brand);outline-offset:2px}.saved-color:hover{transition:outline-color var(--calcite-internal-animation-timing-fast) ease-in-out;outline:2px solid var(--calcite-ui-border-2);outline-offset:2px}:host([hidden]){display:none}[hidden]{display:none}";

const throttleFor60FpsInMs = 16;
const ColorPicker = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteColorPickerChange = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.createEvent)(this, "calciteColorPickerChange", 6);
    this.calciteColorPickerInput = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.createEvent)(this, "calciteColorPickerInput", 6);
    this.internalColorUpdateContext = null;
    this.mode = _utils_js__WEBPACK_IMPORTED_MODULE_3__.C.HEX;
    this.shiftKeyChannelAdjustment = 0;
    this.handleTabActivate = (event) => {
      this.channelMode = event.currentTarget.getAttribute("data-color-mode");
      this.updateChannelsFromColor(this.color);
    };
    this.handleColorFieldScopeKeyDown = (event) => {
      const { key } = event;
      const arrowKeyToXYOffset = {
        ArrowUp: { x: 0, y: -10 },
        ArrowRight: { x: 10, y: 0 },
        ArrowDown: { x: 0, y: 10 },
        ArrowLeft: { x: -10, y: 0 },
      };
      if (arrowKeyToXYOffset[key]) {
        event.preventDefault();
        this.scopeOrientation = key === "ArrowDown" || key === "ArrowUp" ? "vertical" : "horizontal";
        this.captureColorFieldColor(this.colorFieldScopeLeft + arrowKeyToXYOffset[key].x || 0, this.colorFieldScopeTop + arrowKeyToXYOffset[key].y || 0, false);
      }
    };
    this.handleHueScopeKeyDown = (event) => {
      const modifier = event.shiftKey ? 10 : 1;
      const { key } = event;
      const arrowKeyToXOffset = {
        ArrowUp: 1,
        ArrowRight: 1,
        ArrowDown: -1,
        ArrowLeft: -1,
      };
      if (arrowKeyToXOffset[key]) {
        event.preventDefault();
        const delta = arrowKeyToXOffset[key] * modifier;
        const hue = this.baseColorFieldColor.hue();
        const color = this.baseColorFieldColor.hue(hue + delta);
        this.internalColorSet(color, false);
      }
    };
    this.handleHexInputChange = (event) => {
      event.stopPropagation();
      const { allowEmpty, color: color$1 } = this;
      const input = event.target;
      const hex = input.value;
      if (allowEmpty && !hex) {
        this.internalColorSet(null);
        return;
      }
      const normalizedHex = color$1 && (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.n)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.h)(color$1, (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.a)(this.mode)));
      if (hex !== normalizedHex) {
        this.internalColorSet((0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(hex));
      }
    };
    this.handleSavedColorSelect = (event) => {
      const swatch = event.currentTarget;
      this.internalColorSet((0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(swatch.color));
    };
    this.handleChannelInput = (event) => {
      const input = event.currentTarget;
      const channelIndex = Number(input.getAttribute("data-channel-index"));
      const isAlphaChannel = channelIndex === 3;
      const limit = isAlphaChannel
        ? _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.O.max
        : this.channelMode === "rgb"
          ? _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.R[Object.keys(_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.R)[channelIndex]]
          : _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H[Object.keys(_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H)[channelIndex]];
      let inputValue;
      if (this.allowEmpty && !input.value) {
        inputValue = "";
      }
      else {
        const value = Number(input.value);
        const adjustedValue = value + this.shiftKeyChannelAdjustment;
        const clamped = (0,_math_js__WEBPACK_IMPORTED_MODULE_8__.c)(adjustedValue, 0, limit);
        inputValue = clamped.toString();
      }
      input.value = inputValue;
    };
    this.handleChannelChange = (event) => {
      const input = event.currentTarget;
      const channelIndex = Number(input.getAttribute("data-channel-index"));
      const channels = [...this.channels];
      const shouldClearChannels = this.allowEmpty && !input.value;
      if (shouldClearChannels) {
        this.channels = [null, null, null, null];
        this.internalColorSet(null);
        return;
      }
      const isAlphaChannel = channelIndex === 3;
      const value = Number(input.value);
      channels[channelIndex] = isAlphaChannel ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.o)(value) : value;
      this.updateColorFromChannels(channels);
    };
    this.handleSavedColorKeyDown = (event) => {
      if ((0,_key_js__WEBPACK_IMPORTED_MODULE_5__.i)(event.key)) {
        event.preventDefault();
        this.handleSavedColorSelect(event);
      }
    };
    this.handleColorFieldPointerDown = (event) => {
      if (!(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
        return;
      }
      const { offsetX, offsetY } = event;
      document.addEventListener("pointermove", this.globalPointerMoveHandler);
      document.addEventListener("pointerup", this.globalPointerUpHandler, { once: true });
      this.activeCanvasInfo = {
        context: this.colorFieldRenderingContext,
        bounds: this.colorFieldRenderingContext.canvas.getBoundingClientRect(),
      };
      this.captureColorFieldColor(offsetX, offsetY);
      this.colorFieldScopeNode.focus();
    };
    this.handleHueSliderPointerDown = (event) => {
      if (!(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
        return;
      }
      const { offsetX } = event;
      document.addEventListener("pointermove", this.globalPointerMoveHandler);
      document.addEventListener("pointerup", this.globalPointerUpHandler, { once: true });
      this.activeCanvasInfo = {
        context: this.hueSliderRenderingContext,
        bounds: this.hueSliderRenderingContext.canvas.getBoundingClientRect(),
      };
      this.captureHueSliderColor(offsetX);
      this.hueScopeNode.focus();
    };
    this.handleOpacitySliderPointerDown = (event) => {
      if (!(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
        return;
      }
      const { offsetX } = event;
      document.addEventListener("pointermove", this.globalPointerMoveHandler);
      document.addEventListener("pointerup", this.globalPointerUpHandler, { once: true });
      this.activeCanvasInfo = {
        context: this.opacitySliderRenderingContext,
        bounds: this.opacitySliderRenderingContext.canvas.getBoundingClientRect(),
      };
      this.captureOpacitySliderValue(offsetX);
      this.opacityScopeNode.focus();
    };
    this.globalPointerUpHandler = (event) => {
      if (!(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
        return;
      }
      const previouslyDragging = this.activeCanvasInfo;
      this.activeCanvasInfo = null;
      this.drawColorControls();
      if (previouslyDragging) {
        this.calciteColorPickerChange.emit();
      }
    };
    this.globalPointerMoveHandler = (event) => {
      const { activeCanvasInfo, el } = this;
      if (!el.isConnected || !activeCanvasInfo) {
        return;
      }
      const { context, bounds } = activeCanvasInfo;
      let samplingX;
      let samplingY;
      const { clientX, clientY } = event;
      if (context.canvas.matches(":hover")) {
        samplingX = clientX - bounds.x;
        samplingY = clientY - bounds.y;
      }
      else {
        // snap x and y to the closest edge
        if (clientX < bounds.x + bounds.width && clientX > bounds.x) {
          samplingX = clientX - bounds.x;
        }
        else if (clientX < bounds.x) {
          samplingX = 0;
        }
        else {
          samplingX = bounds.width;
        }
        if (clientY < bounds.y + bounds.height && clientY > bounds.y) {
          samplingY = clientY - bounds.y;
        }
        else if (clientY < bounds.y) {
          samplingY = 0;
        }
        else {
          samplingY = bounds.height;
        }
      }
      if (context === this.colorFieldRenderingContext) {
        this.captureColorFieldColor(samplingX, samplingY, false);
      }
      else if (context === this.hueSliderRenderingContext) {
        this.captureHueSliderColor(samplingX);
      }
      else if (context === this.opacitySliderRenderingContext) {
        this.captureOpacitySliderValue(samplingX);
      }
    };
    this.storeColorFieldScope = (node) => {
      this.colorFieldScopeNode = node;
    };
    this.storeHueScope = (node) => {
      this.hueScopeNode = node;
    };
    this.renderChannelsTabTitle = (channelMode) => {
      const { channelMode: activeChannelMode, messages } = this;
      const selected = channelMode === activeChannelMode;
      const label = channelMode === "rgb" ? messages.rgb : messages.hsv;
      return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-tab-title", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.colorMode, "data-color-mode": channelMode, key: channelMode, onCalciteTabsActivate: this.handleTabActivate, selected: selected }, label));
    };
    this.renderChannelsTab = (channelMode) => {
      const { allowEmpty, channelMode: activeChannelMode, channels, messages, alphaChannel } = this;
      const selected = channelMode === activeChannelMode;
      const isRgb = channelMode === "rgb";
      const channelAriaLabels = isRgb
        ? [messages.red, messages.green, messages.blue]
        : [messages.hue, messages.saturation, messages.value];
      const direction = (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.b)(this.el);
      const channelsToRender = alphaChannel ? channels : channels.slice(0, 3);
      return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-tab", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.control, key: channelMode, selected: selected }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.channels, dir: "ltr" }, channelsToRender.map((channelValue, index) => {
        const isAlphaChannel = index === 3;
        if (isAlphaChannel) {
          channelValue =
            allowEmpty && !channelValue ? channelValue : (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.b)(channelValue);
        }
        /* the channel container is ltr, so we apply the host's direction */
        return this.renderChannel(channelValue, index, channelAriaLabels[index], direction, isAlphaChannel ? "%" : "");
      }))));
    };
    this.renderChannel = (value, index, ariaLabel, direction, suffix) => {
      return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-input-number", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.channel, "data-channel-index": index, dir: direction, key: index, label: ariaLabel, lang: this.effectiveLocale, numberButtonType: "none", numberingSystem: this.numberingSystem, onCalciteInputNumberChange: this.handleChannelChange, onCalciteInputNumberInput: this.handleChannelInput, onKeyDown: this.handleKeyDown, scale: this.scale === "l" ? "m" : "s",
        // workaround to ensure input borders overlap as desired
        // this is because the build transforms margin-left to its
        // logical-prop, which is undesired as channels are always ltr
        style: {
          marginLeft: index > 0 && !(this.scale === "s" && this.alphaChannel && index === 3) ? "-1px" : "",
        }, suffixText: suffix, value: value?.toString() }));
    };
    this.deleteColor = () => {
      const colorToDelete = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.h)(this.color, this.alphaChannel);
      const inStorage = this.savedColors.indexOf(colorToDelete) > -1;
      if (!inStorage) {
        return;
      }
      const savedColors = this.savedColors.filter((color) => color !== colorToDelete);
      this.savedColors = savedColors;
      const storageKey = `${_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.c}${this.storageId}`;
      if (this.storageId) {
        localStorage.setItem(storageKey, JSON.stringify(savedColors));
      }
    };
    this.saveColor = () => {
      const colorToSave = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.h)(this.color, this.alphaChannel);
      const alreadySaved = this.savedColors.indexOf(colorToSave) > -1;
      if (alreadySaved) {
        return;
      }
      const savedColors = [...this.savedColors, colorToSave];
      this.savedColors = savedColors;
      const storageKey = `${_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.c}${this.storageId}`;
      if (this.storageId) {
        localStorage.setItem(storageKey, JSON.stringify(savedColors));
      }
    };
    this.drawColorControls = (0,_throttle_js__WEBPACK_IMPORTED_MODULE_21__.t)((type = "all") => {
      if ((type === "all" || type === "color-field") && this.colorFieldRenderingContext) {
        this.drawColorField();
      }
      if ((type === "all" || type === "hue-slider") && this.hueSliderRenderingContext) {
        this.drawHueSlider();
      }
      if (this.alphaChannel &&
        (type === "all" || type === "opacity-slider") &&
        this.opacitySliderRenderingContext) {
        this.drawOpacitySlider();
      }
    }, throttleFor60FpsInMs);
    this.captureColorFieldColor = (x, y, skipEqual = true) => {
      const { dimensions: { colorField: { height, width }, }, } = this;
      const saturation = Math.round((_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.s / width) * x);
      const value = Math.round((_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.v / height) * (height - y));
      this.internalColorSet(this.baseColorFieldColor.hsv().saturationv(saturation).value(value), skipEqual);
    };
    this.initColorField = (canvas) => {
      this.colorFieldRenderingContext = canvas.getContext("2d");
      this.updateCanvasSize("color-field");
      this.drawColorControls();
    };
    this.initHueSlider = (canvas) => {
      this.hueSliderRenderingContext = canvas.getContext("2d");
      this.updateCanvasSize("hue-slider");
      this.drawHueSlider();
    };
    this.initOpacitySlider = (canvas) => {
      if (!canvas) {
        return;
      }
      this.opacitySliderRenderingContext = canvas.getContext("2d");
      this.updateCanvasSize("opacity-slider");
      this.drawOpacitySlider();
    };
    this.storeOpacityScope = (node) => {
      this.opacityScopeNode = node;
    };
    this.handleOpacityScopeKeyDown = (event) => {
      const modifier = event.shiftKey ? 10 : 1;
      const { key } = event;
      const arrowKeyToXOffset = {
        ArrowUp: 0.01,
        ArrowRight: 0.01,
        ArrowDown: -0.01,
        ArrowLeft: -0.01,
      };
      if (arrowKeyToXOffset[key]) {
        event.preventDefault();
        const delta = arrowKeyToXOffset[key] * modifier;
        const alpha = this.baseColorFieldColor.alpha();
        const color = this.baseColorFieldColor.alpha(alpha + delta);
        this.internalColorSet(color, false);
      }
    };
    this.allowEmpty = false;
    this.alphaChannel = false;
    this.channelsDisabled = false;
    this.color = _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D;
    this.disabled = false;
    this.format = "auto";
    this.hideChannels = false;
    this.hexDisabled = false;
    this.hideHex = false;
    this.hideSaved = false;
    this.savedDisabled = false;
    this.scale = "m";
    this.storageId = undefined;
    this.messageOverrides = undefined;
    this.numberingSystem = undefined;
    this.value = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.n)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.h)(_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D, this.alphaChannel));
    this.defaultMessages = undefined;
    this.channelMode = "rgb";
    this.channels = this.toChannels(_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D);
    this.dimensions = _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.a.m;
    this.effectiveLocale = "";
    this.messages = undefined;
    this.savedColors = [];
    this.colorFieldScopeTop = undefined;
    this.colorFieldScopeLeft = undefined;
    this.hueScopeLeft = undefined;
    this.opacityScopeLeft = undefined;
    this.scopeOrientation = undefined;
  }
  handleAlphaChannelChange(alphaChannel) {
    const { format } = this;
    if (alphaChannel && format !== "auto" && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.a)(format)) {
      console.warn(`ignoring alphaChannel as the current format (${format}) does not support alpha`);
      this.alphaChannel = false;
    }
  }
  handleColorChange(color, oldColor) {
    this.drawColorControls();
    this.updateChannelsFromColor(color);
    this.previousColor = oldColor;
  }
  handleFormatOrAlphaChannelChange() {
    this.setMode(this.format);
    this.internalColorSet(this.color, false, "internal");
  }
  handleScaleChange(scale = "m") {
    this.updateDimensions(scale);
    this.updateCanvasSize("all");
    this.drawColorControls();
  }
  onMessagesChange() {
    /* wired up by t9n util */
  }
  handleValueChange(value, oldValue) {
    const { allowEmpty, format } = this;
    const checkMode = !allowEmpty || value;
    let modeChanged = false;
    if (checkMode) {
      const nextMode = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.p)(value);
      if (!nextMode || (format !== "auto" && nextMode !== format)) {
        this.showIncompatibleColorWarning(value, format);
        this.value = oldValue;
        return;
      }
      modeChanged = this.mode !== nextMode;
      this.setMode(nextMode, this.internalColorUpdateContext === null);
    }
    const dragging = this.activeCanvasInfo;
    if (this.internalColorUpdateContext === "initial") {
      return;
    }
    if (this.internalColorUpdateContext === "user-interaction") {
      this.calciteColorPickerInput.emit();
      if (!dragging) {
        this.calciteColorPickerChange.emit();
      }
      return;
    }
    const color$1 = allowEmpty && !value
      ? null
      : (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(value != null && typeof value === "object" && (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.a)(this.mode)
        ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.e)(value)
        : value);
    const colorChanged = !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.c)(color$1, this.color);
    if (modeChanged || colorChanged) {
      this.internalColorSet(color$1, this.alphaChannel && !(this.mode.endsWith("a") || this.mode.endsWith("a-css")), "internal");
    }
  }
  get baseColorFieldColor() {
    return this.color || this.previousColor || _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D;
  }
  effectiveLocaleChange() {
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_9__.u)(this, this.effectiveLocale);
  }
  // using @Listen as a workaround for VDOM listener not firing
  handleChannelKeyUpOrDown(event) {
    this.shiftKeyChannelAdjustment = 0;
    const { key } = event;
    if ((key !== "ArrowUp" && key !== "ArrowDown") ||
      !event.composedPath().some((node) => node.classList?.contains(_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.channel))) {
      return;
    }
    const { shiftKey } = event;
    event.preventDefault();
    if (!this.color) {
      this.internalColorSet(this.previousColor);
      event.stopPropagation();
      return;
    }
    // this gets applied to the input's up/down arrow increment/decrement
    const complementaryBump = 9;
    this.shiftKeyChannelAdjustment =
      key === "ArrowUp" && shiftKey
        ? complementaryBump
        : key === "ArrowDown" && shiftKey
          ? -complementaryBump
          : 0;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** Sets focus on the component's first focusable element. */
  async setFocus() {
    await (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.c)(this);
    this.el.focus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.a)(this);
    const { allowEmpty, color: color$1, format, value } = this;
    const willSetNoColor = allowEmpty && !value;
    const parsedMode = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.p)(value);
    const valueIsCompatible = willSetNoColor || (format === "auto" && parsedMode) || format === parsedMode;
    const initialColor = willSetNoColor ? null : valueIsCompatible ? (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(value) : color$1;
    if (!valueIsCompatible) {
      this.showIncompatibleColorWarning(value, format);
    }
    this.setMode(format, false);
    this.internalColorSet(initialColor, false, "initial");
    this.updateDimensions(this.scale);
    const storageKey = `${_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.c}${this.storageId}`;
    if (this.storageId && localStorage.getItem(storageKey)) {
      this.savedColors = JSON.parse(localStorage.getItem(storageKey));
    }
    await (0,_t9n_js__WEBPACK_IMPORTED_MODULE_9__.s)(this);
  }
  connectedCallback() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_4__.c)(this);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.c)(this);
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_9__.c)(this);
  }
  componentDidLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.s)(this);
  }
  disconnectedCallback() {
    document.removeEventListener("pointermove", this.globalPointerMoveHandler);
    document.removeEventListener("pointerup", this.globalPointerUpHandler);
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_4__.d)(this);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.d)(this);
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_9__.d)(this);
  }
  componentDidRender() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_4__.u)(this);
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { allowEmpty, channelsDisabled, color, colorFieldScopeLeft, colorFieldScopeTop, dimensions: { slider: { width: sliderWidth }, thumb: { radius: thumbRadius }, }, hexDisabled, hideChannels, hideHex, hideSaved, hueScopeLeft, messages, alphaChannel, opacityScopeLeft, savedColors, savedDisabled, scale, scopeOrientation, } = this;
    const selectedColorInHex = color ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.h)(color, alphaChannel) : null;
    const hueTop = thumbRadius;
    const hueLeft = hueScopeLeft ?? (sliderWidth * _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D.hue()) / _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.h;
    const opacityTop = thumbRadius;
    const opacityLeft = opacityScopeLeft ??
      (sliderWidth * (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.b)(_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D.alpha())) / _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.O.max;
    const noColor = color === null;
    const vertical = scopeOrientation === "vertical";
    const noHex = hexDisabled || hideHex;
    const noChannels = channelsDisabled || hideChannels;
    const noSaved = savedDisabled || hideSaved;
    const [adjustedColorFieldScopeLeft, adjustedColorFieldScopeTop] = this.getAdjustedScopePosition(colorFieldScopeLeft, colorFieldScopeTop);
    const [adjustedHueScopeLeft, adjustedHueScopeTop] = this.getAdjustedScopePosition(hueLeft, hueTop);
    const [adjustedOpacityScopeLeft, adjustedOpacityScopeTop] = this.getAdjustedScopePosition(opacityLeft, opacityTop);
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.container }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.controlAndScope }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("canvas", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.colorField, onPointerDown: this.handleColorFieldPointerDown,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.initColorField }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { "aria-label": vertical ? messages.value : messages.saturation, "aria-valuemax": vertical ? _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.v : _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.s, "aria-valuemin": "0", "aria-valuenow": (vertical ? color?.saturationv() : color?.value()) || "0", class: { [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.scope]: true, [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.colorFieldScope]: true }, onKeyDown: this.handleColorFieldScopeKeyDown, role: "slider", style: {
        top: `${adjustedColorFieldScopeTop || 0}px`,
        left: `${adjustedColorFieldScopeLeft || 0}px`,
      }, tabindex: "0",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.storeColorFieldScope })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.previewAndSliders }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-color-picker-swatch", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.preview, color: selectedColorInHex, scale: "l" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.sliders }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.controlAndScope }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("canvas", { class: { [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.slider]: true, [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.hueSlider]: true }, onPointerDown: this.handleHueSliderPointerDown,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.initHueSlider }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { "aria-label": messages.hue, "aria-valuemax": _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.h, "aria-valuemin": "0", "aria-valuenow": color?.round().hue() || _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D.round().hue(), class: { [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.scope]: true, [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.hueScope]: true }, onKeyDown: this.handleHueScopeKeyDown, role: "slider", style: {
        top: `${adjustedHueScopeTop}px`,
        left: `${adjustedHueScopeLeft}px`,
      }, tabindex: "0",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.storeHueScope })), alphaChannel ? ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.controlAndScope }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("canvas", { class: { [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.slider]: true, [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.opacitySlider]: true }, onPointerDown: this.handleOpacitySliderPointerDown,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.initOpacitySlider }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { "aria-label": messages.opacity, "aria-valuemax": _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.O.max, "aria-valuemin": _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.O.min, "aria-valuenow": (color || _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.D).round().alpha(), class: { [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.scope]: true, [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.opacityScope]: true }, onKeyDown: this.handleOpacityScopeKeyDown, role: "slider", style: {
        top: `${adjustedOpacityScopeTop}px`,
        left: `${adjustedOpacityScopeLeft}px`,
      }, tabindex: "0",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.storeOpacityScope }))) : null)), noHex && noChannels ? null : ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: {
        [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.controlSection]: true,
        [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.section]: true,
      } }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.hexAndChannelsGroup }, noHex ? null : ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.hexOptions }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-color-picker-hex-input", { allowEmpty: allowEmpty, alphaChannel: alphaChannel, class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.control, messages: messages, numberingSystem: this.numberingSystem, onCalciteColorPickerHexInputChange: this.handleHexInputChange, scale: scale, value: selectedColorInHex }))), noChannels ? null : ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-tabs", { class: {
        [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.colorModeContainer]: true,
        [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.splitSection]: true,
      }, scale: scale === "l" ? "m" : "s" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-tab-nav", { slot: "title-group" }, this.renderChannelsTabTitle("rgb"), this.renderChannelsTabTitle("hsv")), this.renderChannelsTab("rgb"), this.renderChannelsTab("hsv")))))), noSaved ? null : ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: { [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.savedColorsSection]: true, [_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.section]: true } }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.header }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("label", null, messages.saved), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.savedColorsButtons }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-button", { appearance: "transparent", class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.deleteColor, disabled: noColor, iconStart: "minus", kind: "neutral", label: messages.deleteColor, onClick: this.deleteColor, scale: scale, type: "button" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-button", { appearance: "transparent", class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.saveColor, disabled: noColor, iconStart: "plus", kind: "neutral", label: messages.saveColor, onClick: this.saveColor, scale: scale, type: "button" }))), savedColors.length > 0 ? ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("div", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.savedColors }, [
      ...savedColors.map((color) => ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_22__.h)("calcite-color-picker-swatch", { class: _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.C.savedColor, color: color, key: color, onClick: this.handleSavedColorSelect, onKeyDown: this.handleSavedColorKeyDown, scale: scale, tabIndex: 0 }))),
    ])) : null))));
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  handleKeyDown(event) {
    if (event.key === "Enter") {
      event.preventDefault();
    }
  }
  showIncompatibleColorWarning(value, format) {
    console.warn(`ignoring color value (${value}) as it is not compatible with the current format (${format})`);
  }
  setMode(format, warn = true) {
    const mode = format === "auto" ? this.mode : format;
    this.mode = this.ensureCompatibleMode(mode, warn);
  }
  ensureCompatibleMode(mode, warn) {
    const { alphaChannel } = this;
    const isAlphaCompatible = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.a)(mode);
    if (alphaChannel && !isAlphaCompatible) {
      const alphaMode = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.f)(mode);
      if (warn) {
        console.warn(`setting format to (${alphaMode}) as the provided one (${mode}) does not support alpha`);
      }
      return alphaMode;
    }
    if (!alphaChannel && isAlphaCompatible) {
      const nonAlphaMode = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.t)(mode);
      if (warn) {
        console.warn(`setting format to (${nonAlphaMode}) as the provided one (${mode}) does not support alpha`);
      }
      return nonAlphaMode;
    }
    return mode;
  }
  captureHueSliderColor(x) {
    const { dimensions: { slider: { width }, }, } = this;
    const hue = (_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.b / width) * x;
    this.internalColorSet(this.baseColorFieldColor.hue(hue), false);
  }
  captureOpacitySliderValue(x) {
    const { dimensions: { slider: { width }, }, } = this;
    const alpha = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.o)((_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.O.max / width) * x);
    this.internalColorSet(this.baseColorFieldColor.alpha(alpha), false);
  }
  internalColorSet(color, skipEqual = true, context = "user-interaction") {
    if (skipEqual && (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.c)(color, this.color)) {
      return;
    }
    this.internalColorUpdateContext = context;
    this.color = color;
    this.value = this.toValue(color);
    this.internalColorUpdateContext = null;
  }
  toValue(color, format = this.mode) {
    if (!color) {
      return null;
    }
    const hexMode = "hex";
    if (format.includes(hexMode)) {
      const hasAlpha = format === _utils_js__WEBPACK_IMPORTED_MODULE_3__.C.HEXA;
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.n)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.h)(color.round(), hasAlpha), hasAlpha);
    }
    if (format.includes("-css")) {
      const value = color[format.replace("-css", "").replace("a", "")]().round().string();
      // Color omits alpha values when alpha is 1
      const needToInjectAlpha = (format.endsWith("a") || format.endsWith("a-css")) && color.alpha() === 1;
      if (needToInjectAlpha) {
        const model = value.slice(0, 3);
        const values = value.slice(4, -1);
        return `${model}a(${values}, ${color.alpha()})`;
      }
      return value;
    }
    const colorObject = 
    /* Color() does not support hsva, hsla nor rgba, so we use the non-alpha mode */
    color[(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.t)(format)]().round().object();
    if (format.endsWith("a")) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.d)(colorObject);
    }
    return colorObject;
  }
  getSliderCapSpacing() {
    const { dimensions: { slider: { height }, thumb: { radius }, }, } = this;
    return radius * 2 - height;
  }
  updateDimensions(scale = "m") {
    this.dimensions = _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.a[scale];
  }
  drawColorField() {
    const context = this.colorFieldRenderingContext;
    const { dimensions: { colorField: { height, width }, }, } = this;
    context.fillStyle = this.baseColorFieldColor
      .hsv()
      .saturationv(100)
      .value(100)
      .alpha(1)
      .string();
    context.fillRect(0, 0, width, height);
    const whiteGradient = context.createLinearGradient(0, 0, width, 0);
    whiteGradient.addColorStop(0, "rgba(255,255,255,1)");
    whiteGradient.addColorStop(1, "rgba(255,255,255,0)");
    context.fillStyle = whiteGradient;
    context.fillRect(0, 0, width, height);
    const blackGradient = context.createLinearGradient(0, 0, 0, height);
    blackGradient.addColorStop(0, "rgba(0,0,0,0)");
    blackGradient.addColorStop(1, "rgba(0,0,0,1)");
    context.fillStyle = blackGradient;
    context.fillRect(0, 0, width, height);
    this.drawActiveColorFieldColor();
  }
  setCanvasContextSize(canvas, { height, width }) {
    if (!canvas) {
      return;
    }
    const devicePixelRatio = window.devicePixelRatio || 1;
    canvas.width = width * devicePixelRatio;
    canvas.height = height * devicePixelRatio;
    canvas.style.height = `${height}px`;
    canvas.style.width = `${width}px`;
    const context = canvas.getContext("2d");
    context.scale(devicePixelRatio, devicePixelRatio);
  }
  updateCanvasSize(context = "all") {
    const { dimensions } = this;
    if (context === "all" || context === "color-field") {
      this.setCanvasContextSize(this.colorFieldRenderingContext?.canvas, dimensions.colorField);
    }
    const adjustedSliderDimensions = {
      width: dimensions.slider.width,
      height: dimensions.slider.height + (dimensions.thumb.radius - dimensions.slider.height / 2) * 2,
    };
    if (context === "all" || context === "hue-slider") {
      this.setCanvasContextSize(this.hueSliderRenderingContext?.canvas, adjustedSliderDimensions);
    }
    if (context === "all" || context === "opacity-slider") {
      this.setCanvasContextSize(this.opacitySliderRenderingContext?.canvas, adjustedSliderDimensions);
    }
  }
  drawActiveColorFieldColor() {
    const { color } = this;
    if (!color) {
      return;
    }
    const hsvColor = color.hsv();
    const { dimensions: { colorField: { height, width }, thumb: { radius }, }, } = this;
    const x = hsvColor.saturationv() / (_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.s / width);
    const y = height - hsvColor.value() / (_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.H.v / height);
    requestAnimationFrame(() => {
      this.colorFieldScopeLeft = x;
      this.colorFieldScopeTop = y;
    });
    this.drawThumb(this.colorFieldRenderingContext, radius, x, y, hsvColor);
  }
  drawThumb(context, radius, x, y, color) {
    const startAngle = 0;
    const endAngle = 2 * Math.PI;
    const outlineWidth = 1;
    context.beginPath();
    context.arc(x, y, radius, startAngle, endAngle);
    context.fillStyle = "#fff";
    context.fill();
    context.strokeStyle = "rgba(0,0,0,0.3)";
    context.lineWidth = outlineWidth;
    context.stroke();
    context.beginPath();
    context.arc(x, y, radius - 3, startAngle, endAngle);
    context.fillStyle = color.rgb().alpha(1).string();
    context.fill();
  }
  drawActiveHueSliderColor() {
    const { color } = this;
    if (!color) {
      return;
    }
    const hsvColor = color.hsv().saturationv(100).value(100);
    const { dimensions: { slider: { width }, thumb: { radius }, }, } = this;
    const x = hsvColor.hue() / (_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.b / width);
    const y = radius;
    const sliderBoundX = this.getSliderBoundX(x, width, radius);
    requestAnimationFrame(() => {
      this.hueScopeLeft = sliderBoundX;
    });
    this.drawThumb(this.hueSliderRenderingContext, radius, sliderBoundX, y, hsvColor);
  }
  drawHueSlider() {
    const context = this.hueSliderRenderingContext;
    const { dimensions: { slider: { height, width }, thumb: { radius: thumbRadius }, }, } = this;
    const x = 0;
    const y = thumbRadius - height / 2;
    const gradient = context.createLinearGradient(0, 0, width, 0);
    const hueSliderColorStopKeywords = [
      "red",
      "yellow",
      "lime",
      "cyan",
      "blue",
      "magenta",
      "#ff0004" /* 1 unit less than #ff0 to avoid duplicate values within range */,
    ];
    const offset = 1 / (hueSliderColorStopKeywords.length - 1);
    let currentOffset = 0;
    hueSliderColorStopKeywords.forEach((keyword) => {
      gradient.addColorStop(currentOffset, (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(keyword).string());
      currentOffset += offset;
    });
    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);
    this.drawSliderPath(context, height, width, x, y);
    context.fillStyle = gradient;
    context.fill();
    context.strokeStyle = "rgba(0,0,0,0.3)";
    context.lineWidth = 1;
    context.stroke();
    this.drawActiveHueSliderColor();
  }
  drawOpacitySlider() {
    const context = this.opacitySliderRenderingContext;
    const { baseColorFieldColor: previousColor, dimensions: { slider: { height, width }, thumb: { radius: thumbRadius }, }, } = this;
    const x = 0;
    const y = thumbRadius - height / 2;
    context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);
    const gradient = context.createLinearGradient(0, y, width, 0);
    const startColor = previousColor.rgb().alpha(0);
    const midColor = previousColor.rgb().alpha(0.5);
    const endColor = previousColor.rgb().alpha(1);
    gradient.addColorStop(0, startColor.string());
    gradient.addColorStop(0.5, midColor.string());
    gradient.addColorStop(1, endColor.string());
    this.drawSliderPath(context, height, width, x, y);
    const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), "repeat");
    context.fillStyle = pattern;
    context.fill();
    context.fillStyle = gradient;
    context.fill();
    context.strokeStyle = "rgba(0,0,0,0.3)";
    context.lineWidth = 1;
    context.stroke();
    this.drawActiveOpacitySliderColor();
  }
  drawSliderPath(context, height, width, x, y) {
    const radius = height / 2 + 1;
    context.beginPath();
    context.moveTo(x + radius, y);
    context.lineTo(x + width - radius, y);
    context.quadraticCurveTo(x + width, y, x + width, y + radius);
    context.lineTo(x + width, y + height - radius);
    context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    context.lineTo(x + radius, y + height);
    context.quadraticCurveTo(x, y + height, x, y + height - radius);
    context.lineTo(x, y + radius);
    context.quadraticCurveTo(x, y, x + radius, y);
    context.closePath();
  }
  getCheckeredBackgroundPattern() {
    if (this.checkerPattern) {
      return this.checkerPattern;
    }
    const pattern = document.createElement("canvas");
    pattern.width = 10;
    pattern.height = 10;
    const patternContext = pattern.getContext("2d");
    patternContext.fillStyle = "#ccc";
    patternContext.fillRect(0, 0, 10, 10);
    patternContext.fillStyle = "#fff";
    patternContext.fillRect(0, 0, 5, 5);
    patternContext.fillRect(5, 5, 5, 5);
    this.checkerPattern = pattern;
    return pattern;
  }
  drawActiveOpacitySliderColor() {
    const { color } = this;
    if (!color) {
      return;
    }
    const hsvColor = color;
    const { dimensions: { slider: { width }, thumb: { radius }, }, } = this;
    const x = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.b)(hsvColor.alpha()) / (_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.O.max / width);
    const y = radius;
    const sliderBoundX = this.getSliderBoundX(x, width, radius);
    requestAnimationFrame(() => {
      this.opacityScopeLeft = sliderBoundX;
    });
    this.drawThumb(this.opacitySliderRenderingContext, radius, sliderBoundX, y, hsvColor);
  }
  getSliderBoundX(x, width, radius) {
    const closeToEdge = (0,_math_js__WEBPACK_IMPORTED_MODULE_8__.a)(x, width, radius);
    return closeToEdge === 0
      ? x
      : closeToEdge === -1
        ? (0,_math_js__WEBPACK_IMPORTED_MODULE_8__.r)(x, 0, width, radius, radius * 2)
        : (0,_math_js__WEBPACK_IMPORTED_MODULE_8__.r)(x, 0, width, width - radius * 2, width - radius);
  }
  updateColorFromChannels(channels) {
    this.internalColorSet((0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(channels, this.channelMode));
  }
  updateChannelsFromColor(color) {
    this.channels = color ? this.toChannels(color) : [null, null, null, null];
  }
  toChannels(color) {
    const { channelMode } = this;
    const channels = color[channelMode]()
      .array()
      .map((value, index) => {
      const isAlpha = index === 3;
      return isAlpha ? value : Math.floor(value);
    });
    if (channels.length === 3) {
      channels.push(1); // Color omits alpha when 1
    }
    return channels;
  }
  getAdjustedScopePosition(left, top) {
    return [left - _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.S / 2, top - _color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.S / 2];
  }
  static get delegatesFocus() { return true; }
  static get assetsDirs() { return ["assets"]; }
  get el() { return this; }
  static get watchers() { return {
    "alphaChannel": ["handleAlphaChannelChange", "handleFormatOrAlphaChannelChange"],
    "color": ["handleColorChange"],
    "format": ["handleFormatOrAlphaChannelChange"],
    "scale": ["handleScaleChange"],
    "messageOverrides": ["onMessagesChange"],
    "value": ["handleValueChange"],
    "effectiveLocale": ["effectiveLocaleChange"]
  }; }
  static get style() { return colorPickerCss; }
}, [17, "calcite-color-picker", {
    "allowEmpty": [516, "allow-empty"],
    "alphaChannel": [4, "alpha-channel"],
    "channelsDisabled": [4, "channels-disabled"],
    "color": [1040],
    "disabled": [516],
    "format": [513],
    "hideChannels": [516, "hide-channels"],
    "hexDisabled": [4, "hex-disabled"],
    "hideHex": [516, "hide-hex"],
    "hideSaved": [516, "hide-saved"],
    "savedDisabled": [516, "saved-disabled"],
    "scale": [513],
    "storageId": [513, "storage-id"],
    "messageOverrides": [1040],
    "numberingSystem": [513, "numbering-system"],
    "value": [1025],
    "messages": [1040],
    "defaultMessages": [32],
    "channelMode": [32],
    "channels": [32],
    "dimensions": [32],
    "effectiveLocale": [32],
    "savedColors": [32],
    "colorFieldScopeTop": [32],
    "colorFieldScopeLeft": [32],
    "hueScopeLeft": [32],
    "opacityScopeLeft": [32],
    "scopeOrientation": [32],
    "setFocus": [64]
  }, [[2, "keydown", "handleChannelKeyUpOrDown"], [2, "keyup", "handleChannelKeyUpOrDown"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-color-picker", "calcite-button", "calcite-color-picker-hex-input", "calcite-color-picker-swatch", "calcite-icon", "calcite-input-number", "calcite-input-text", "calcite-loader", "calcite-progress", "calcite-tab", "calcite-tab-nav", "calcite-tab-title", "calcite-tabs"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-color-picker":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ColorPicker);
      }
      break;
    case "calcite-button":
      if (!customElements.get(tagName)) {
        (0,_button_js__WEBPACK_IMPORTED_MODULE_10__.d)();
      }
      break;
    case "calcite-color-picker-hex-input":
      if (!customElements.get(tagName)) {
        (0,_color_picker_hex_input_js__WEBPACK_IMPORTED_MODULE_2__.d)();
      }
      break;
    case "calcite-color-picker-swatch":
      if (!customElements.get(tagName)) {
        (0,_color_picker_swatch_js__WEBPACK_IMPORTED_MODULE_11__.d)();
      }
      break;
    case "calcite-icon":
      if (!customElements.get(tagName)) {
        (0,_icon_js__WEBPACK_IMPORTED_MODULE_12__.d)();
      }
      break;
    case "calcite-input-number":
      if (!customElements.get(tagName)) {
        (0,_input_number_js__WEBPACK_IMPORTED_MODULE_13__.d)();
      }
      break;
    case "calcite-input-text":
      if (!customElements.get(tagName)) {
        (0,_input_text_js__WEBPACK_IMPORTED_MODULE_14__.d)();
      }
      break;
    case "calcite-loader":
      if (!customElements.get(tagName)) {
        (0,_loader_js__WEBPACK_IMPORTED_MODULE_15__.d)();
      }
      break;
    case "calcite-progress":
      if (!customElements.get(tagName)) {
        (0,_progress_js__WEBPACK_IMPORTED_MODULE_16__.d)();
      }
      break;
    case "calcite-tab":
      if (!customElements.get(tagName)) {
        (0,_tab_js__WEBPACK_IMPORTED_MODULE_17__.d)();
      }
      break;
    case "calcite-tab-nav":
      if (!customElements.get(tagName)) {
        (0,_tab_nav_js__WEBPACK_IMPORTED_MODULE_18__.d)();
      }
      break;
    case "calcite-tab-title":
      if (!customElements.get(tagName)) {
        (0,_tab_title_js__WEBPACK_IMPORTED_MODULE_19__.d)();
      }
      break;
    case "calcite-tabs":
      if (!customElements.get(tagName)) {
        (0,_tabs_js__WEBPACK_IMPORTED_MODULE_20__.d)();
      }
      break;
  } });
}
defineCustomElement$1();

const CalciteColorPicker = ColorPicker;
const defineCustomElement = defineCustomElement$1;




/***/ }),

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/color-picker-swatch.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/color-picker-swatch.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ ColorPickerSwatch),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@esri/calcite-components-react/node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _index2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index2.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/index2.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/dom.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/utils.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */





const CSS = {
  swatch: "swatch",
  noColorSwatch: "swatch--no-color",
  checker: "checker",
};
const COLORS = {
  borderLight: "rgba(0, 0, 0, 0.3)",
  borderDark: "rgba(255, 255, 255, 0.15)",
};
const checkerSquareSize = 4;
const CHECKER_DIMENSIONS = {
  squareSize: checkerSquareSize,
  size: checkerSquareSize * 2,
};

const colorPickerSwatchCss = ":host{position:relative;display:inline-flex}:host([scale=s]){block-size:1.25rem;inline-size:1.25rem}:host([scale=m]){block-size:1.5rem;inline-size:1.5rem}:host([scale=l]){block-size:2rem;inline-size:2rem}.swatch{overflow:hidden;block-size:inherit;inline-size:inherit}.swatch rect{transition-property:all;transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.swatch--no-color rect{fill:var(--calcite-ui-foreground-1)}.swatch--no-color line{stroke:var(--calcite-ui-danger)}.checker{fill:#cacaca}:host([hidden]){display:none}[hidden]{display:none}";

const ColorPickerSwatch = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.active = false;
    this.color = undefined;
    this.scale = "m";
  }
  handleColorChange(color$1) {
    this.internalColor = color$1 ? (0,_index2_js__WEBPACK_IMPORTED_MODULE_0__.c)(color$1) : null;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    this.handleColorChange(this.color);
  }
  render() {
    const isEmpty = !this.internalColor;
    const classes = {
      [CSS.swatch]: true,
      [CSS.noColorSwatch]: isEmpty,
    };
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("svg", { class: classes, xmlns: "http://www.w3.org/2000/svg" }, this.renderSwatch()));
  }
  renderSwatch() {
    const { active, el, internalColor } = this;
    const borderRadius = active ? "100%" : "0";
    const theme = (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.r)(el);
    const borderColor = theme === "light" ? COLORS.borderLight : COLORS.borderDark;
    const commonSwatchProps = {
      height: "100%",
      rx: borderRadius,
      stroke: borderColor,
      // stroke-width and clip-path are needed to hide overflowing portion of stroke
      // see https://stackoverflow.com/a/7273346/194216
      // using attribute to work around Stencil using the prop name vs the attribute when rendering
      ["stroke-width"]: "2",
      width: "100%",
    };
    const isEmpty = !internalColor;
    if (isEmpty) {
      return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)(_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.Fragment, null, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("clipPath", { id: "shape" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("rect", { height: "100%", rx: borderRadius, width: "100%" })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("rect", { "clip-path": `inset(0 round ${borderRadius})`, rx: borderRadius, ...commonSwatchProps }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("line", { "clip-path": "url(#shape)", "stroke-width": "3", x1: "100%", x2: "0", y1: "0", y2: "100%" })));
    }
    const alpha = internalColor.alpha();
    const hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.h)(internalColor);
    const hexa = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.h)(internalColor, alpha < 1);
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)(_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.Fragment, null, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("title", null, hexa), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("defs", null, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("pattern", { height: CHECKER_DIMENSIONS.size, id: "checker", patternUnits: "userSpaceOnUse", width: CHECKER_DIMENSIONS.size, x: "0", y: "0" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("rect", { class: CSS.checker, height: CHECKER_DIMENSIONS.squareSize, width: CHECKER_DIMENSIONS.squareSize, x: "0", y: "0" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("rect", { class: CSS.checker, height: CHECKER_DIMENSIONS.squareSize, width: CHECKER_DIMENSIONS.squareSize, x: CHECKER_DIMENSIONS.squareSize, y: CHECKER_DIMENSIONS.squareSize }))), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("rect", { fill: "url(#checker)", height: "100%", rx: borderRadius, width: "100%" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("rect", { fill: hex, style: {
        "clip-path": alpha < 1 ? "polygon(100% 0, 0 0, 0 100%)" : `inset(0 round ${borderRadius})`,
      }, ...commonSwatchProps }), alpha < 1 ? ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_3__.h)("rect", { fill: hexa, key: "opacity-fill", style: { "clip-path": "polygon(100% 0, 100% 100%, 0 100%)" }, ...commonSwatchProps })) : null));
  }
  get el() { return this; }
  static get watchers() { return {
    "color": ["handleColorChange"]
  }; }
  static get style() { return colorPickerSwatchCss; }
}, [1, "calcite-color-picker-swatch", {
    "active": [516],
    "color": [1],
    "scale": [513]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-color-picker-swatch"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-color-picker-swatch":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ColorPickerSwatch);
      }
      break;
  } });
}
defineCustomElement();




/***/ }),

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/math.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/math.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ closeToRangeEdge),
/* harmony export */   c: () => (/* binding */ clamp),
/* harmony export */   d: () => (/* binding */ decimalPlaces),
/* harmony export */   g: () => (/* binding */ getDecimals),
/* harmony export */   r: () => (/* binding */ remap)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */
const clamp = (value, min, max) => Math.max(min, Math.min(value, max));
const decimalNumberRegex = new RegExp(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
/**
 * Returns the quantity of real decimal places for a number, which excludes trailing zeros.
 *
 * Adapted from {@link https://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number}.
 *
 * @param decimal - decimal value
 * @param value
 * @returns {number} the amount of decimal places in a number
 */
const decimalPlaces = (value) => {
  const match = ("" + value).match(decimalNumberRegex);
  if (!match || parseInt(match[1]) === 0) {
    return 0;
  }
  return Math.max(0, 
  // Number of digits right of decimal point.
  (match[1] ? match[1].length : 0) -
    // Adjust for scientific notation.
    (match[2] ? +match[2] : 0));
};
function getDecimals(value) {
  if (decimalPlaces(value) > 0 && value > 0) {
    return parseFloat(`0.${value.toString().split(".")[1]}`);
  }
  return value;
}
function remap(value, fromMin, fromMax, toMin, toMax) {
  return ((value - fromMin) * (toMax - toMin)) / (fromMax - fromMin) + toMin;
}
/**
 * Helper to determine if a value is close to the edge of a range within a threshold.
 *
 * @param value
 * @param range
 * @param threshold
 * @returns -1 if close to lower edge, 1 if close to upper edge, 0 otherwise.
 */
function closeToRangeEdge(value, range, threshold) {
  return value < threshold ? -1 : value > range - threshold ? 1 : 0;
}




/***/ }),

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tab.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tab.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ Tab),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@esri/calcite-components-react/node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/dom.js");
/* harmony import */ var _guid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./guid.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/guid.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */




const CSS = {
  container: "container",
  content: "content",
};

const tabCss = ":host([selected]) section,:host([selected]) .container{display:block}:host{display:none;block-size:100%;inline-size:100%}:host([selected]){display:block;block-size:100%;inline-size:100%;overflow:auto}.scale-s .content{padding-block:0.25rem;font-size:var(--calcite-font-size--2);line-height:1rem}.scale-m .content{padding-block:0.5rem;font-size:var(--calcite-font-size--1);line-height:1rem}.scale-l .content{padding-block:0.625rem;font-size:var(--calcite-font-size-0);line-height:1.25rem}section,.container{display:none;block-size:100%;inline-size:100%}:host([hidden]){display:none}[hidden]{display:none}";

const Tab = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteInternalTabRegister = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.createEvent)(this, "calciteInternalTabRegister", 6);
    this.guid = `calcite-tab-title-${(0,_guid_js__WEBPACK_IMPORTED_MODULE_1__.g)()}`;
    this.tab = undefined;
    this.selected = false;
    this.scale = "m";
    this.labeledBy = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  render() {
    const id = this.el.id || this.guid;
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)(_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.Host, { "aria-labelledby": this.labeledBy, id: id }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("div", { class: { [CSS.container]: true, [`scale-${this.scale}`]: true }, role: "tabpanel", tabIndex: this.selected ? 0 : -1 }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("section", { class: CSS.content }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("slot", null)))));
  }
  connectedCallback() {
    this.parentTabsEl = this.el.closest("calcite-tabs");
  }
  componentDidLoad() {
    this.calciteInternalTabRegister.emit();
  }
  disconnectedCallback() {
    // Dispatching to body in order to be listened by other elements that are still connected to the DOM.
    document.body?.dispatchEvent(new CustomEvent("calciteTabUnregister", {
      detail: this.el,
    }));
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  internalTabChangeHandler(event) {
    const targetTabsEl = event
      .composedPath()
      .find((el) => el.tagName === "CALCITE-TABS");
    // to allow `<calcite-tabs>` to be nested we need to make sure this
    // `calciteTabChange` event was actually fired from a within the same
    // `<calcite-tabs>` that is the a parent of this tab.
    if (targetTabsEl !== this.parentTabsEl) {
      return;
    }
    if (this.tab) {
      this.selected = this.tab === event.detail.tab;
    }
    else {
      this.getTabIndex().then((index) => {
        this.selected = index === event.detail.tab;
      });
    }
    event.stopPropagation();
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Returns the index of the component item within the tab array.
   */
  async getTabIndex() {
    return Array.prototype.indexOf.call((0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.o)(this.el.parentElement.children).filter((el) => el.matches("calcite-tab")), this.el);
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  /**
   * @param tabIds
   * @param titleIds
   * @internal
   */
  async updateAriaInfo(tabIds = [], titleIds = []) {
    this.labeledBy = titleIds[tabIds.indexOf(this.el.id)] || null;
  }
  get el() { return this; }
  static get style() { return tabCss; }
}, [1, "calcite-tab", {
    "tab": [513],
    "selected": [1540],
    "scale": [1],
    "labeledBy": [32],
    "getTabIndex": [64],
    "updateAriaInfo": [64]
  }, [[16, "calciteInternalTabChange", "internalTabChangeHandler"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-tab"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-tab":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Tab);
      }
      break;
  } });
}
defineCustomElement();




/***/ }),

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tabs.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/tabs.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ Tabs),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@esri/calcite-components-react/node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _observers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observers.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/observers.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */



const SLOTS = {
  titleGroup: "title-group",
};

const tabsCss = ":host{display:flex;flex-direction:column}:host([bordered]){box-shadow:inset 0 1px 0 var(--calcite-ui-border-1);background-color:var(--calcite-ui-foreground-1)}:host([bordered]:not([position=bottom])) ::slotted(calcite-tab-nav){margin-block-end:-1px}:host([bordered][position=bottom]){box-shadow:inset 0 1px 0 var(--calcite-ui-border-1), inset 0 -1px 0 var(--calcite-ui-border-1)}:host([bordered]) section{border-width:1px;border-style:solid;border-color:var(--calcite-ui-border-1)}:host([bordered][scale=s]) section{padding:0.75rem}:host([bordered][scale=m]) section{padding:0.5rem}:host([bordered][scale=l]) section{padding:1rem}:host([position=bottom]){flex-direction:column-reverse}section{display:flex;flex-grow:1;overflow:hidden;border-block-start-width:1px;border-block-start-color:var(--calcite-ui-border-1);border-block-start-style:solid}:host([position=bottom]) section{flex-direction:column-reverse;border-block-start-width:0px;border-block-end-width:1px;border-block-end-color:var(--calcite-ui-border-1)}:host([position=bottom]:not([bordered])) section{border-block-end-style:solid}@media (forced-colors: active){:host([bordered]) section{border-block-start-width:0px;border-block-end-width:1px}:host([position=bottom][bordered]) section{border-block-start-width:1px;border-block-end-width:0px}}:host([hidden]){display:none}[hidden]{display:none}";

const Tabs = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.mutationObserver = (0,_observers_js__WEBPACK_IMPORTED_MODULE_0__.c)("mutation", (mutationsList) => {
      for (const mutation of mutationsList) {
        const target = mutation.target;
        if (target.nodeName === "CALCITE-TAB-NAV" ||
          target.nodeName === "CALCITE-TAB-TITLE" ||
          target.nodeName === "CALCITE-TAB") {
          this.updateItems();
        }
      }
    });
    this.layout = "inline";
    this.position = "top";
    this.scale = "m";
    this.bordered = false;
    this.titles = [];
    this.tabs = [];
  }
  handleInheritableProps() {
    this.updateItems();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    this.mutationObserver.observe(this.el, { childList: true });
    this.updateItems();
  }
  async componentWillLoad() {
    this.updateItems();
  }
  disconnectedCallback() {
    this.mutationObserver?.disconnect();
  }
  render() {
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.h)(_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", { name: SLOTS.titleGroup }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.h)("section", null, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null))));
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  /**
   * @param event
   * @internal
   */
  calciteInternalTabTitleRegister(event) {
    this.titles = [...this.titles, event.target];
    this.registryHandler();
    event.stopPropagation();
  }
  /**
   * @param event
   * @internal
   */
  calciteTabTitleUnregister(event) {
    this.titles = this.titles.filter((el) => el !== event.detail);
    this.registryHandler();
    event.stopPropagation();
  }
  /**
   * @param event
   * @internal
   */
  calciteInternalTabRegister(event) {
    this.tabs = [...this.tabs, event.target];
    this.registryHandler();
    event.stopPropagation();
  }
  /**
   * @param event
   * @internal
   */
  calciteTabUnregister(event) {
    this.tabs = this.tabs.filter((el) => el !== event.detail);
    this.registryHandler();
    event.stopPropagation();
  }
  updateItems() {
    const { position, scale } = this;
    const nav = this.el.querySelector("calcite-tab-nav");
    if (nav) {
      nav.position = position;
      nav.scale = scale;
    }
    Array.from(this.el.querySelectorAll("calcite-tab")).forEach((tab) => {
      if (tab.parentElement === this.el) {
        tab.scale = scale;
      }
    });
    Array.from(this.el.querySelectorAll("calcite-tab-nav > calcite-tab-title")).forEach((title) => {
      title.position = position;
      title.scale = scale;
    });
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  /**
   *
   * Matches up elements from the internal `tabs` and `titles` to automatically
   * update the ARIA attributes and link `<calcite-tab>` and
   * `<calcite-tab-title>` components.
   */
  async registryHandler() {
    let tabIds;
    let titleIds;
    // determine if we are using `tab` based or `index` based tab identifiers.
    if (this.tabs.some((el) => el.tab) || this.titles.some((el) => el.tab)) {
      // if we are using `tab` based identifiers sort by `tab` to account for
      // possible out of order tabs and get the id of each tab
      tabIds = this.tabs.sort((a, b) => a.tab.localeCompare(b.tab)).map((el) => el.id);
      titleIds = this.titles.sort((a, b) => a.tab.localeCompare(b.tab)).map((el) => el.id);
    }
    else {
      // if we are using index based tabs then the `<calcite-tab>` and
      // `<calcite-tab-title>` might have been rendered out of order so the
      // order of `this.tabs` and `this.titles` might not reflect the DOM state,
      // and might not match each other so we need to get the index of all the
      // tabs and titles in the DOM order to match them up as a source of truth
      const tabDomIndexes = await Promise.all(this.tabs.map((el) => el.getTabIndex()));
      const titleDomIndexes = await Promise.all(this.titles.map((el) => el.getTabIndex()));
      // once we have the DOM order as a source of truth we can build the
      // matching tabIds and titleIds arrays
      tabIds = tabDomIndexes.reduce((ids, indexInDOM, registryIndex) => {
        ids[indexInDOM] = this.tabs[registryIndex].id;
        return ids;
      }, []);
      titleIds = titleDomIndexes.reduce((ids, indexInDOM, registryIndex) => {
        ids[indexInDOM] = this.titles[registryIndex].id;
        return ids;
      }, []);
    }
    // pass all our new aria information to each `<calcite-tab>` and
    // `<calcite-tab-title>` which will check if they can update their internal
    // `controlled` or `labeledBy` states and re-render if necessary
    this.tabs.forEach((el) => el.updateAriaInfo(tabIds, titleIds));
    this.titles.forEach((el) => el.updateAriaInfo(tabIds, titleIds));
  }
  get el() { return this; }
  static get watchers() { return {
    "position": ["handleInheritableProps"],
    "scale": ["handleInheritableProps"]
  }; }
  static get style() { return tabsCss; }
}, [1, "calcite-tabs", {
    "layout": [513],
    "position": [513],
    "scale": [513],
    "bordered": [4],
    "titles": [32],
    "tabs": [32]
  }, [[0, "calciteInternalTabTitleRegister", "calciteInternalTabTitleRegister"], [16, "calciteTabTitleUnregister", "calciteTabTitleUnregister"], [0, "calciteInternalTabRegister", "calciteInternalTabRegister"], [16, "calciteTabUnregister", "calciteTabUnregister"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-tabs"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-tabs":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Tabs);
      }
      break;
  } });
}
defineCustomElement();




/***/ }),

/***/ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/throttle.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/throttle.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ throttle)
/* harmony export */ });
/* harmony import */ var _debounce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debounce.js */ "./node_modules/@esri/calcite-components-react/node_modules/@esri/calcite-components/dist/components/debounce.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */


/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if ((0,_debounce_js__WEBPACK_IMPORTED_MODULE_0__.i)(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return (0,_debounce_js__WEBPACK_IMPORTED_MODULE_0__.d)(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvdmVuZG9ycy1ub2RlX21vZHVsZXNfZXNyaV9jYWxjaXRlLWNvbXBvbmVudHMtcmVhY3Rfbm9kZV9tb2R1bGVzX2VzcmlfY2FsY2l0ZS1jb21wb25lbnRzX2Rpc3RfLTU2OGFkNy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN5RztBQUNoRTtBQUNrQztBQUNrTDtBQUNJO0FBQzlJO0FBQ25FO0FBQzhEO0FBQ2hDO0FBQ0o7QUFDd0M7QUFDekQ7QUFDYTtBQUNmO0FBQ1E7QUFDRjtBQUNKO0FBQ0U7QUFDTDtBQUNJO0FBQ0U7QUFDTDtBQUNUOztBQUU5QywwQ0FBMEMsZUFBZSx5QkFBeUIsaUJBQWlCLDJDQUEyQyxtREFBbUQsb0JBQW9CLE1BQU0scUJBQXFCLHNDQUFzQyxpQkFBaUIsOENBQThDLHlHQUF5RyxVQUFVLGlCQUFpQixtQ0FBbUMsNEJBQTRCLGtCQUFrQiwrQkFBK0IsWUFBWSw4Q0FBOEMsaUJBQWlCLG9DQUFvQyw0QkFBNEIsa0JBQWtCLGlCQUFpQixvQ0FBb0Msc0NBQXNDLGlCQUFpQiw0QkFBNEIsa0JBQWtCLHdDQUF3Qyx3REFBd0QsK0JBQStCLDhDQUE4QyxrQ0FBa0MsaUJBQWlCLHFCQUFxQixlQUFlLG9DQUFvQyxhQUFhLGNBQWMsc0JBQXNCLDZCQUE2Qix1Q0FBdUMsY0FBYyxXQUFXLGdEQUFnRCxxQkFBcUIsNENBQTRDLG1CQUFtQixrQkFBa0IsYUFBYSxlQUFlLGtCQUFrQixPQUFPLG9CQUFvQixrQkFBa0IsbUNBQW1DLGVBQWUsZ0JBQWdCLHFCQUFxQiw2QkFBNkIsc0NBQXNDLDBCQUEwQixhQUFhLHlFQUF5RSxvUEFBb1Asb0JBQW9CLHdCQUF3QixpQkFBaUIseUNBQXlDLGFBQWEsbUJBQW1CLGVBQWUsU0FBUyxvREFBb0QsbURBQW1ELHVCQUF1Qix3REFBd0QsU0FBUyxhQUFhLHNCQUFzQiw4QkFBOEIsd0RB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QUNwQjtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsbUJBQW1CO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTSwrQ0FBUTtBQUNkO0FBQ0E7QUFDQTtBQUNBLFNBQVMsK0NBQVE7QUFDakI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzLXJlYWN0L25vZGVfbW9kdWxlcy9AZXNyaS9jYWxjaXRlLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL2NhbGNpdGUtY29sb3ItcGlja2VyLmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzLXJlYWN0L25vZGVfbW9kdWxlcy9AZXNyaS9jYWxjaXRlLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL2NvbG9yLXBpY2tlci1zd2F0Y2guanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZXNyaS9jYWxjaXRlLWNvbXBvbmVudHMtcmVhY3Qvbm9kZV9tb2R1bGVzL0Blc3JpL2NhbGNpdGUtY29tcG9uZW50cy9kaXN0L2NvbXBvbmVudHMvbWF0aC5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Blc3JpL2NhbGNpdGUtY29tcG9uZW50cy1yZWFjdC9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy90YWIuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL25vZGVfbW9kdWxlcy9AZXNyaS9jYWxjaXRlLWNvbXBvbmVudHMtcmVhY3Qvbm9kZV9tb2R1bGVzL0Blc3JpL2NhbGNpdGUtY29tcG9uZW50cy9kaXN0L2NvbXBvbmVudHMvdGFicy5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0Blc3JpL2NhbGNpdGUtY29tcG9uZW50cy1yZWFjdC9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy90aHJvdHRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjEuMTEuMFxuICovXG5pbXBvcnQgeyBwcm94eUN1c3RvbUVsZW1lbnQsIEhUTUxFbGVtZW50LCBjcmVhdGVFdmVudCwgaCB9IGZyb20gJ0BzdGVuY2lsL2NvcmUvaW50ZXJuYWwvY2xpZW50L2luZGV4LmpzJztcbmltcG9ydCB7IGMgYXMgY29sb3IgfSBmcm9tICcuL2luZGV4Mi5qcyc7XG5pbXBvcnQgeyBqIGFzIGlzUHJpbWFyeVBvaW50ZXJCdXR0b24sIGIgYXMgZ2V0RWxlbWVudERpciB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IEMgYXMgQ1NTLCBEIGFzIERFRkFVTFRfQ09MT1IsIGEgYXMgRElNRU5TSU9OUywgSCBhcyBIU1ZfTElNSVRTLCBPIGFzIE9QQUNJVFlfTElNSVRTLCBiIGFzIEhVRV9MSU1JVF9DT05TVFJBSU5FRCwgUyBhcyBTQ09QRV9TSVpFLCBkIGFzIGRlZmluZUN1c3RvbUVsZW1lbnQkYywgYyBhcyBERUZBVUxUX1NUT1JBR0VfS0VZX1BSRUZJWCwgUiBhcyBSR0JfTElNSVRTIH0gZnJvbSAnLi9jb2xvci1waWNrZXItaGV4LWlucHV0LmpzJztcbmltcG9ydCB7IEMgYXMgQ1NTQ29sb3JNb2RlLCBuIGFzIG5vcm1hbGl6ZUhleCwgaCBhcyBoZXhpZnksIGEgYXMgYWxwaGFDb21wYXRpYmxlLCBvIGFzIG9wYWNpdHlUb0FscGhhLCBiIGFzIGFscGhhVG9PcGFjaXR5LCBwIGFzIHBhcnNlTW9kZSwgYyBhcyBjb2xvckVxdWFsLCB0IGFzIHRvTm9uQWxwaGFNb2RlLCBkIGFzIG5vcm1hbGl6ZUFscGhhLCBlIGFzIG5vcm1hbGl6ZUNvbG9yLCBmIGFzIHRvQWxwaGFNb2RlIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbm5lY3RJbnRlcmFjdGl2ZSwgZCBhcyBkaXNjb25uZWN0SW50ZXJhY3RpdmUsIHUgYXMgdXBkYXRlSG9zdEludGVyYWN0aW9uIH0gZnJvbSAnLi9pbnRlcmFjdGl2ZS5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzQWN0aXZhdGlvbktleSB9IGZyb20gJy4va2V5LmpzJztcbmltcG9ydCB7IGMgYXMgY29tcG9uZW50Rm9jdXNhYmxlLCBhIGFzIHNldFVwTG9hZGFibGVDb21wb25lbnQsIHMgYXMgc2V0Q29tcG9uZW50TG9hZGVkIH0gZnJvbSAnLi9sb2FkYWJsZS5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbm5lY3RMb2NhbGl6ZWQsIGQgYXMgZGlzY29ubmVjdExvY2FsaXplZCB9IGZyb20gJy4vbG9jYWxlLmpzJztcbmltcG9ydCB7IHIgYXMgcmVtYXAsIGMgYXMgY2xhbXAsIGEgYXMgY2xvc2VUb1JhbmdlRWRnZSB9IGZyb20gJy4vbWF0aC5qcyc7XG5pbXBvcnQgeyB1IGFzIHVwZGF0ZU1lc3NhZ2VzLCBzIGFzIHNldFVwTWVzc2FnZXMsIGMgYXMgY29ubmVjdE1lc3NhZ2VzLCBkIGFzIGRpc2Nvbm5lY3RNZXNzYWdlcyB9IGZyb20gJy4vdDluLmpzJztcbmltcG9ydCB7IGQgYXMgZGVmaW5lQ3VzdG9tRWxlbWVudCRkIH0gZnJvbSAnLi9idXR0b24uanMnO1xuaW1wb3J0IHsgZCBhcyBkZWZpbmVDdXN0b21FbGVtZW50JGIgfSBmcm9tICcuL2NvbG9yLXBpY2tlci1zd2F0Y2guanMnO1xuaW1wb3J0IHsgZCBhcyBkZWZpbmVDdXN0b21FbGVtZW50JGEgfSBmcm9tICcuL2ljb24uanMnO1xuaW1wb3J0IHsgZCBhcyBkZWZpbmVDdXN0b21FbGVtZW50JDkgfSBmcm9tICcuL2lucHV0LW51bWJlci5qcyc7XG5pbXBvcnQgeyBkIGFzIGRlZmluZUN1c3RvbUVsZW1lbnQkOCB9IGZyb20gJy4vaW5wdXQtdGV4dC5qcyc7XG5pbXBvcnQgeyBkIGFzIGRlZmluZUN1c3RvbUVsZW1lbnQkNyB9IGZyb20gJy4vbG9hZGVyLmpzJztcbmltcG9ydCB7IGQgYXMgZGVmaW5lQ3VzdG9tRWxlbWVudCQ2IH0gZnJvbSAnLi9wcm9ncmVzcy5qcyc7XG5pbXBvcnQgeyBkIGFzIGRlZmluZUN1c3RvbUVsZW1lbnQkNSB9IGZyb20gJy4vdGFiLmpzJztcbmltcG9ydCB7IGQgYXMgZGVmaW5lQ3VzdG9tRWxlbWVudCQ0IH0gZnJvbSAnLi90YWItbmF2LmpzJztcbmltcG9ydCB7IGQgYXMgZGVmaW5lQ3VzdG9tRWxlbWVudCQzIH0gZnJvbSAnLi90YWItdGl0bGUuanMnO1xuaW1wb3J0IHsgZCBhcyBkZWZpbmVDdXN0b21FbGVtZW50JDIgfSBmcm9tICcuL3RhYnMuanMnO1xuaW1wb3J0IHsgdCBhcyB0aHJvdHRsZSB9IGZyb20gJy4vdGhyb3R0bGUuanMnO1xuXG5jb25zdCBjb2xvclBpY2tlckNzcyA9IFwiOmhvc3QoW2Rpc2FibGVkXSl7Y3Vyc29yOmRlZmF1bHQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7b3BhY2l0eTp2YXIoLS1jYWxjaXRlLXVpLW9wYWNpdHktZGlzYWJsZWQpfTpob3N0KFtkaXNhYmxlZF0pICosOmhvc3QoW2Rpc2FibGVkXSkgOjpzbG90dGVkKCope3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3R7ZGlzcGxheTppbmxpbmUtYmxvY2s7Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0yKTtsaW5lLWhlaWdodDoxcmVtO2ZvbnQtd2VpZ2h0OnZhcigtLWNhbGNpdGUtZm9udC13ZWlnaHQtbm9ybWFsKX06aG9zdChbZGlzYWJsZWRdKSA6OnNsb3R0ZWQoW2NhbGNpdGUtaHlkcmF0ZWRdW2Rpc2FibGVkXSksOmhvc3QoW2Rpc2FibGVkXSkgW2NhbGNpdGUtaHlkcmF0ZWRdW2Rpc2FibGVkXXtvcGFjaXR5OjF9Omhvc3QoW3NjYWxlPXNdKXstLWNhbGNpdGUtY29sb3ItcGlja2VyLXNwYWNpbmc6OHB4fTpob3N0KFtzY2FsZT1zXSkgLmNvbnRhaW5lcntpbmxpbmUtc2l6ZToxNjBweH06aG9zdChbc2NhbGU9c10pIC5zYXZlZC1jb2xvcnN7Z2FwOjAuMjVyZW07Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdChhdXRvLWZpbGwsIDIwcHgpfTpob3N0KFtzY2FsZT1tXSl7LS1jYWxjaXRlLWNvbG9yLXBpY2tlci1zcGFjaW5nOjEycHh9Omhvc3QoW3NjYWxlPW1dKSAuY29udGFpbmVye2lubGluZS1zaXplOjI3MnB4fTpob3N0KFtzY2FsZT1sXSl7LS1jYWxjaXRlLWNvbG9yLXBpY2tlci1zcGFjaW5nOjE2cHg7Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0xKTtsaW5lLWhlaWdodDoxcmVtfTpob3N0KFtzY2FsZT1sXSkgLmNvbnRhaW5lcntpbmxpbmUtc2l6ZTo0NjRweH06aG9zdChbc2NhbGU9bF0pIC5zZWN0aW9uOmZpcnN0LW9mLXR5cGV7cGFkZGluZy1ibG9jay1zdGFydDp2YXIoLS1jYWxjaXRlLWNvbG9yLXBpY2tlci1zcGFjaW5nKX06aG9zdChbc2NhbGU9bF0pIC5zYXZlZC1jb2xvcnN7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdChhdXRvLWZpbGwsIDMycHgpfTpob3N0KFtzY2FsZT1sXSkgLmNvbnRyb2wtc2VjdGlvbntmbGV4LXdyYXA6bm93cmFwO2FsaWduLWl0ZW1zOmJhc2VsaW5lO2ZsZXgtd3JhcDp3cmFwfTpob3N0KFtzY2FsZT1sXSkgLmNvbG9yLWhleC1vcHRpb25ze2Rpc3BsYXk6ZmxleDtmbGV4LXNocmluazoxO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kfTpob3N0KFtzY2FsZT1sXSkgLmNvbG9yLW1vZGUtY29udGFpbmVye2ZsZXgtc2hyaW5rOjN9LmNvbnRhaW5lcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNhbGNpdGUtdWktZm9yZWdyb3VuZC0xKTtkaXNwbGF5OmlubGluZS1ibG9jaztib3JkZXI6MXB4IHNvbGlkIHZhcigtLWNhbGNpdGUtdWktYm9yZGVyLTEpfS5jb250cm9sLWFuZC1zY29wZXtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmZsZXg7Y3Vyc29yOnBvaW50ZXI7dG91Y2gtYWN0aW9uOm5vbmV9LnNjb3Ble3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDp2YXIoLS1jYWxjaXRlLWFwcC16LWluZGV4KTtibG9jay1zaXplOjFweDtpbmxpbmUtc2l6ZToxcHg7Ym9yZGVyLXJhZGl1czo5OTk5cHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtmb250LXNpemU6dmFyKC0tY2FsY2l0ZS1mb250LXNpemUtLTEpO291dGxpbmUtY29sb3I6dHJhbnNwYXJlbnR9LnNjb3BlOmZvY3Vze291dGxpbmU6MnB4IHNvbGlkIHZhcigtLWNhbGNpdGUtdWktZm9jdXMtY29sb3IsIHZhcigtLWNhbGNpdGUtdWktYnJhbmQpKTtvdXRsaW5lLW9mZnNldDpjYWxjKFxcbiAgICAgICAgICAgIDJweCAqXFxuICAgICAgICAgICAgY2FsYyhcXG4gICAgICAgICAgICAgIDEgLVxcbiAgICAgICAgICAgICAgMiAqIGNsYW1wKFxcbiAgICAgICAgICAgICAgICAwLFxcbiAgICAgICAgICAgICAgICB2YXIoLS1jYWxjaXRlLXVpLWZvY3VzLW9mZnNldC1pbnZlcnQpLFxcbiAgICAgICAgICAgICAgICAxXFxuICAgICAgICAgICAgICApXFxuICAgICAgICAgICAgKVxcbiAgICAgICAgICApO291dGxpbmUtb2Zmc2V0OjExcHh9LmhleC1hbmQtY2hhbm5lbHMtZ3JvdXB7aW5saW5lLXNpemU6MTAwJX0uaGV4LWFuZC1jaGFubmVscy1ncm91cCwuY29udHJvbC1zZWN0aW9ue2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC13cmFwOndyYXB9LnNlY3Rpb257cGFkZGluZy1ibG9jazowIHZhcigtLWNhbGNpdGUtY29sb3ItcGlja2VyLXNwYWNpbmcpO3BhZGRpbmctaW5saW5lOnZhcigtLWNhbGNpdGUtY29sb3ItcGlja2VyLXNwYWNpbmcpfS5zZWN0aW9uOmZpcnN0LW9mLXR5cGV7cGFkZGluZy1ibG9jay1zdGFydDp2YXIoLS1jYWxjaXRlLWNvbG9yLXBpY2tlci1zcGFjaW5nKX0uc2xpZGVyc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbi1pbmxpbmUtc3RhcnQ6dmFyKC0tY2FsY2l0ZS1jb2xvci1waWNrZXItc3BhY2luZyl9LnByZXZpZXctYW5kLXNsaWRlcnN7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOnZhcigtLWNhbGNpdGUtY29sb3ItcGlja2VyLXNwYWNpbmcpfS5jb2xvci1oZXgtb3B0aW9ucywuc2VjdGlvbi0tc3BsaXR7ZmxleC1ncm93OjF9LmhlYWRlcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2NvbG9yOnZhcigtLWNhbGNpdGUtdWktdGV4dC0xKX0uY29sb3ItbW9kZS1jb250YWluZXJ7cGFkZGluZy1ibG9jay1zdGFydDp2YXIoLS1jYWxjaXRlLWNvbG9yLXBpY2tlci1zcGFjaW5nKX0uY2hhbm5lbHN7ZGlzcGxheTpmbGV4O3Jvdy1nYXA6MC4xMjVyZW19LmNoYW5uZWxbZGF0YS1jaGFubmVsLWluZGV4PVxcXCIzXFxcIl17aW5saW5lLXNpemU6MTU5cHh9Omhvc3QoW3NjYWxlPXNdKSAuY2hhbm5lbHN7ZmxleC13cmFwOndyYXB9Omhvc3QoW3NjYWxlPXNdKSAuY2hhbm5lbHtmbGV4LWJhc2lzOjMwJTtmbGV4LWdyb3c6MX06aG9zdChbc2NhbGU9c10pIC5jaGFubmVsW2RhdGEtY2hhbm5lbC1pbmRleD1cXFwiM1xcXCJde2lubGluZS1zaXplOnVuc2V0O21hcmdpbi1pbmxpbmUtc3RhcnQ6dW5zZXR9Omhvc3QoW3NjYWxlPWxdKSAuY2hhbm5lbFtkYXRhLWNoYW5uZWwtaW5kZXg9XFxcIjNcXFwiXXtpbmxpbmUtc2l6ZToxMzFweH0uc2F2ZWQtY29sb3Jze2Rpc3BsYXk6Z3JpZDtnYXA6MC41cmVtO3BhZGRpbmctYmxvY2stc3RhcnQ6dmFyKC0tY2FsY2l0ZS1jb2xvci1waWNrZXItc3BhY2luZyk7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdChhdXRvLWZpbGwsIDI0cHgpfS5zYXZlZC1jb2xvcnMtYnV0dG9uc3tkaXNwbGF5OmZsZXh9LnNhdmVkLWNvbG9ye291dGxpbmUtb2Zmc2V0OjA7b3V0bGluZS1jb2xvcjp0cmFuc3BhcmVudDtjdXJzb3I6cG9pbnRlcn0uc2F2ZWQtY29sb3I6Zm9jdXN7b3V0bGluZToycHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1icmFuZCk7b3V0bGluZS1vZmZzZXQ6MnB4fS5zYXZlZC1jb2xvcjpob3Zlcnt0cmFuc2l0aW9uOm91dGxpbmUtY29sb3IgdmFyKC0tY2FsY2l0ZS1pbnRlcm5hbC1hbmltYXRpb24tdGltaW5nLWZhc3QpIGVhc2UtaW4tb3V0O291dGxpbmU6MnB4IHNvbGlkIHZhcigtLWNhbGNpdGUtdWktYm9yZGVyLTIpO291dGxpbmUtb2Zmc2V0OjJweH06aG9zdChbaGlkZGVuXSl7ZGlzcGxheTpub25lfVtoaWRkZW5de2Rpc3BsYXk6bm9uZX1cIjtcblxuY29uc3QgdGhyb3R0bGVGb3I2MEZwc0luTXMgPSAxNjtcbmNvbnN0IENvbG9yUGlja2VyID0gLypAX19QVVJFX18qLyBwcm94eUN1c3RvbUVsZW1lbnQoY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX3JlZ2lzdGVySG9zdCgpO1xuICAgIHRoaXMuX19hdHRhY2hTaGFkb3coKTtcbiAgICB0aGlzLmNhbGNpdGVDb2xvclBpY2tlckNoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZUNvbG9yUGlja2VyQ2hhbmdlXCIsIDYpO1xuICAgIHRoaXMuY2FsY2l0ZUNvbG9yUGlja2VySW5wdXQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNhbGNpdGVDb2xvclBpY2tlcklucHV0XCIsIDYpO1xuICAgIHRoaXMuaW50ZXJuYWxDb2xvclVwZGF0ZUNvbnRleHQgPSBudWxsO1xuICAgIHRoaXMubW9kZSA9IENTU0NvbG9yTW9kZS5IRVg7XG4gICAgdGhpcy5zaGlmdEtleUNoYW5uZWxBZGp1c3RtZW50ID0gMDtcbiAgICB0aGlzLmhhbmRsZVRhYkFjdGl2YXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmNoYW5uZWxNb2RlID0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbG9yLW1vZGVcIik7XG4gICAgICB0aGlzLnVwZGF0ZUNoYW5uZWxzRnJvbUNvbG9yKHRoaXMuY29sb3IpO1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDb2xvckZpZWxkU2NvcGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB7IGtleSB9ID0gZXZlbnQ7XG4gICAgICBjb25zdCBhcnJvd0tleVRvWFlPZmZzZXQgPSB7XG4gICAgICAgIEFycm93VXA6IHsgeDogMCwgeTogLTEwIH0sXG4gICAgICAgIEFycm93UmlnaHQ6IHsgeDogMTAsIHk6IDAgfSxcbiAgICAgICAgQXJyb3dEb3duOiB7IHg6IDAsIHk6IDEwIH0sXG4gICAgICAgIEFycm93TGVmdDogeyB4OiAtMTAsIHk6IDAgfSxcbiAgICAgIH07XG4gICAgICBpZiAoYXJyb3dLZXlUb1hZT2Zmc2V0W2tleV0pIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zY29wZU9yaWVudGF0aW9uID0ga2V5ID09PSBcIkFycm93RG93blwiIHx8IGtleSA9PT0gXCJBcnJvd1VwXCIgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIjtcbiAgICAgICAgdGhpcy5jYXB0dXJlQ29sb3JGaWVsZENvbG9yKHRoaXMuY29sb3JGaWVsZFNjb3BlTGVmdCArIGFycm93S2V5VG9YWU9mZnNldFtrZXldLnggfHwgMCwgdGhpcy5jb2xvckZpZWxkU2NvcGVUb3AgKyBhcnJvd0tleVRvWFlPZmZzZXRba2V5XS55IHx8IDAsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuaGFuZGxlSHVlU2NvcGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBtb2RpZmllciA9IGV2ZW50LnNoaWZ0S2V5ID8gMTAgOiAxO1xuICAgICAgY29uc3QgeyBrZXkgfSA9IGV2ZW50O1xuICAgICAgY29uc3QgYXJyb3dLZXlUb1hPZmZzZXQgPSB7XG4gICAgICAgIEFycm93VXA6IDEsXG4gICAgICAgIEFycm93UmlnaHQ6IDEsXG4gICAgICAgIEFycm93RG93bjogLTEsXG4gICAgICAgIEFycm93TGVmdDogLTEsXG4gICAgICB9O1xuICAgICAgaWYgKGFycm93S2V5VG9YT2Zmc2V0W2tleV0pIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBhcnJvd0tleVRvWE9mZnNldFtrZXldICogbW9kaWZpZXI7XG4gICAgICAgIGNvbnN0IGh1ZSA9IHRoaXMuYmFzZUNvbG9yRmllbGRDb2xvci5odWUoKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmJhc2VDb2xvckZpZWxkQ29sb3IuaHVlKGh1ZSArIGRlbHRhKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbENvbG9yU2V0KGNvbG9yLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUhleElucHV0Q2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGNvbnN0IHsgYWxsb3dFbXB0eSwgY29sb3I6IGNvbG9yJDEgfSA9IHRoaXM7XG4gICAgICBjb25zdCBpbnB1dCA9IGV2ZW50LnRhcmdldDtcbiAgICAgIGNvbnN0IGhleCA9IGlucHV0LnZhbHVlO1xuICAgICAgaWYgKGFsbG93RW1wdHkgJiYgIWhleCkge1xuICAgICAgICB0aGlzLmludGVybmFsQ29sb3JTZXQobnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRIZXggPSBjb2xvciQxICYmIG5vcm1hbGl6ZUhleChoZXhpZnkoY29sb3IkMSwgYWxwaGFDb21wYXRpYmxlKHRoaXMubW9kZSkpKTtcbiAgICAgIGlmIChoZXggIT09IG5vcm1hbGl6ZWRIZXgpIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbENvbG9yU2V0KGNvbG9yKGhleCkpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVTYXZlZENvbG9yU2VsZWN0ID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBzd2F0Y2ggPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgdGhpcy5pbnRlcm5hbENvbG9yU2V0KGNvbG9yKHN3YXRjaC5jb2xvcikpO1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDaGFubmVsSW5wdXQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgIGNvbnN0IGNoYW5uZWxJbmRleCA9IE51bWJlcihpbnB1dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNoYW5uZWwtaW5kZXhcIikpO1xuICAgICAgY29uc3QgaXNBbHBoYUNoYW5uZWwgPSBjaGFubmVsSW5kZXggPT09IDM7XG4gICAgICBjb25zdCBsaW1pdCA9IGlzQWxwaGFDaGFubmVsXG4gICAgICAgID8gT1BBQ0lUWV9MSU1JVFMubWF4XG4gICAgICAgIDogdGhpcy5jaGFubmVsTW9kZSA9PT0gXCJyZ2JcIlxuICAgICAgICAgID8gUkdCX0xJTUlUU1tPYmplY3Qua2V5cyhSR0JfTElNSVRTKVtjaGFubmVsSW5kZXhdXVxuICAgICAgICAgIDogSFNWX0xJTUlUU1tPYmplY3Qua2V5cyhIU1ZfTElNSVRTKVtjaGFubmVsSW5kZXhdXTtcbiAgICAgIGxldCBpbnB1dFZhbHVlO1xuICAgICAgaWYgKHRoaXMuYWxsb3dFbXB0eSAmJiAhaW5wdXQudmFsdWUpIHtcbiAgICAgICAgaW5wdXRWYWx1ZSA9IFwiXCI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoaW5wdXQudmFsdWUpO1xuICAgICAgICBjb25zdCBhZGp1c3RlZFZhbHVlID0gdmFsdWUgKyB0aGlzLnNoaWZ0S2V5Q2hhbm5lbEFkanVzdG1lbnQ7XG4gICAgICAgIGNvbnN0IGNsYW1wZWQgPSBjbGFtcChhZGp1c3RlZFZhbHVlLCAwLCBsaW1pdCk7XG4gICAgICAgIGlucHV0VmFsdWUgPSBjbGFtcGVkLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICBpbnB1dC52YWx1ZSA9IGlucHV0VmFsdWU7XG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUNoYW5uZWxDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgIGNvbnN0IGNoYW5uZWxJbmRleCA9IE51bWJlcihpbnB1dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNoYW5uZWwtaW5kZXhcIikpO1xuICAgICAgY29uc3QgY2hhbm5lbHMgPSBbLi4udGhpcy5jaGFubmVsc107XG4gICAgICBjb25zdCBzaG91bGRDbGVhckNoYW5uZWxzID0gdGhpcy5hbGxvd0VtcHR5ICYmICFpbnB1dC52YWx1ZTtcbiAgICAgIGlmIChzaG91bGRDbGVhckNoYW5uZWxzKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbHMgPSBbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF07XG4gICAgICAgIHRoaXMuaW50ZXJuYWxDb2xvclNldChudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNBbHBoYUNoYW5uZWwgPSBjaGFubmVsSW5kZXggPT09IDM7XG4gICAgICBjb25zdCB2YWx1ZSA9IE51bWJlcihpbnB1dC52YWx1ZSk7XG4gICAgICBjaGFubmVsc1tjaGFubmVsSW5kZXhdID0gaXNBbHBoYUNoYW5uZWwgPyBvcGFjaXR5VG9BbHBoYSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlQ29sb3JGcm9tQ2hhbm5lbHMoY2hhbm5lbHMpO1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVTYXZlZENvbG9yS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGlzQWN0aXZhdGlvbktleShldmVudC5rZXkpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuaGFuZGxlU2F2ZWRDb2xvclNlbGVjdChldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUNvbG9yRmllbGRQb2ludGVyRG93biA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKCFpc1ByaW1hcnlQb2ludGVyQnV0dG9uKGV2ZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IGV2ZW50O1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMuZ2xvYmFsUG9pbnRlck1vdmVIYW5kbGVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5nbG9iYWxQb2ludGVyVXBIYW5kbGVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgICB0aGlzLmFjdGl2ZUNhbnZhc0luZm8gPSB7XG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29sb3JGaWVsZFJlbmRlcmluZ0NvbnRleHQsXG4gICAgICAgIGJvdW5kczogdGhpcy5jb2xvckZpZWxkUmVuZGVyaW5nQ29udGV4dC5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB9O1xuICAgICAgdGhpcy5jYXB0dXJlQ29sb3JGaWVsZENvbG9yKG9mZnNldFgsIG9mZnNldFkpO1xuICAgICAgdGhpcy5jb2xvckZpZWxkU2NvcGVOb2RlLmZvY3VzKCk7XG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUh1ZVNsaWRlclBvaW50ZXJEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIWlzUHJpbWFyeVBvaW50ZXJCdXR0b24oZXZlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgb2Zmc2V0WCB9ID0gZXZlbnQ7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5nbG9iYWxQb2ludGVyTW92ZUhhbmRsZXIpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLmdsb2JhbFBvaW50ZXJVcEhhbmRsZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgIHRoaXMuYWN0aXZlQ2FudmFzSW5mbyA9IHtcbiAgICAgICAgY29udGV4dDogdGhpcy5odWVTbGlkZXJSZW5kZXJpbmdDb250ZXh0LFxuICAgICAgICBib3VuZHM6IHRoaXMuaHVlU2xpZGVyUmVuZGVyaW5nQ29udGV4dC5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB9O1xuICAgICAgdGhpcy5jYXB0dXJlSHVlU2xpZGVyQ29sb3Iob2Zmc2V0WCk7XG4gICAgICB0aGlzLmh1ZVNjb3BlTm9kZS5mb2N1cygpO1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVPcGFjaXR5U2xpZGVyUG9pbnRlckRvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmICghaXNQcmltYXJ5UG9pbnRlckJ1dHRvbihldmVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBvZmZzZXRYIH0gPSBldmVudDtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLmdsb2JhbFBvaW50ZXJNb3ZlSGFuZGxlcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMuZ2xvYmFsUG9pbnRlclVwSGFuZGxlciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgdGhpcy5hY3RpdmVDYW52YXNJbmZvID0ge1xuICAgICAgICBjb250ZXh0OiB0aGlzLm9wYWNpdHlTbGlkZXJSZW5kZXJpbmdDb250ZXh0LFxuICAgICAgICBib3VuZHM6IHRoaXMub3BhY2l0eVNsaWRlclJlbmRlcmluZ0NvbnRleHQuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgfTtcbiAgICAgIHRoaXMuY2FwdHVyZU9wYWNpdHlTbGlkZXJWYWx1ZShvZmZzZXRYKTtcbiAgICAgIHRoaXMub3BhY2l0eVNjb3BlTm9kZS5mb2N1cygpO1xuICAgIH07XG4gICAgdGhpcy5nbG9iYWxQb2ludGVyVXBIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIWlzUHJpbWFyeVBvaW50ZXJCdXR0b24oZXZlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZXZpb3VzbHlEcmFnZ2luZyA9IHRoaXMuYWN0aXZlQ2FudmFzSW5mbztcbiAgICAgIHRoaXMuYWN0aXZlQ2FudmFzSW5mbyA9IG51bGw7XG4gICAgICB0aGlzLmRyYXdDb2xvckNvbnRyb2xzKCk7XG4gICAgICBpZiAocHJldmlvdXNseURyYWdnaW5nKSB7XG4gICAgICAgIHRoaXMuY2FsY2l0ZUNvbG9yUGlja2VyQ2hhbmdlLmVtaXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZ2xvYmFsUG9pbnRlck1vdmVIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCB7IGFjdGl2ZUNhbnZhc0luZm8sIGVsIH0gPSB0aGlzO1xuICAgICAgaWYgKCFlbC5pc0Nvbm5lY3RlZCB8fCAhYWN0aXZlQ2FudmFzSW5mbykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IGNvbnRleHQsIGJvdW5kcyB9ID0gYWN0aXZlQ2FudmFzSW5mbztcbiAgICAgIGxldCBzYW1wbGluZ1g7XG4gICAgICBsZXQgc2FtcGxpbmdZO1xuICAgICAgY29uc3QgeyBjbGllbnRYLCBjbGllbnRZIH0gPSBldmVudDtcbiAgICAgIGlmIChjb250ZXh0LmNhbnZhcy5tYXRjaGVzKFwiOmhvdmVyXCIpKSB7XG4gICAgICAgIHNhbXBsaW5nWCA9IGNsaWVudFggLSBib3VuZHMueDtcbiAgICAgICAgc2FtcGxpbmdZID0gY2xpZW50WSAtIGJvdW5kcy55O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIHNuYXAgeCBhbmQgeSB0byB0aGUgY2xvc2VzdCBlZGdlXG4gICAgICAgIGlmIChjbGllbnRYIDwgYm91bmRzLnggKyBib3VuZHMud2lkdGggJiYgY2xpZW50WCA+IGJvdW5kcy54KSB7XG4gICAgICAgICAgc2FtcGxpbmdYID0gY2xpZW50WCAtIGJvdW5kcy54O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsaWVudFggPCBib3VuZHMueCkge1xuICAgICAgICAgIHNhbXBsaW5nWCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc2FtcGxpbmdYID0gYm91bmRzLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGllbnRZIDwgYm91bmRzLnkgKyBib3VuZHMuaGVpZ2h0ICYmIGNsaWVudFkgPiBib3VuZHMueSkge1xuICAgICAgICAgIHNhbXBsaW5nWSA9IGNsaWVudFkgLSBib3VuZHMueTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbGllbnRZIDwgYm91bmRzLnkpIHtcbiAgICAgICAgICBzYW1wbGluZ1kgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNhbXBsaW5nWSA9IGJvdW5kcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0ID09PSB0aGlzLmNvbG9yRmllbGRSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY2FwdHVyZUNvbG9yRmllbGRDb2xvcihzYW1wbGluZ1gsIHNhbXBsaW5nWSwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY29udGV4dCA9PT0gdGhpcy5odWVTbGlkZXJSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY2FwdHVyZUh1ZVNsaWRlckNvbG9yKHNhbXBsaW5nWCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjb250ZXh0ID09PSB0aGlzLm9wYWNpdHlTbGlkZXJSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY2FwdHVyZU9wYWNpdHlTbGlkZXJWYWx1ZShzYW1wbGluZ1gpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zdG9yZUNvbG9yRmllbGRTY29wZSA9IChub2RlKSA9PiB7XG4gICAgICB0aGlzLmNvbG9yRmllbGRTY29wZU5vZGUgPSBub2RlO1xuICAgIH07XG4gICAgdGhpcy5zdG9yZUh1ZVNjb3BlID0gKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaHVlU2NvcGVOb2RlID0gbm9kZTtcbiAgICB9O1xuICAgIHRoaXMucmVuZGVyQ2hhbm5lbHNUYWJUaXRsZSA9IChjaGFubmVsTW9kZSkgPT4ge1xuICAgICAgY29uc3QgeyBjaGFubmVsTW9kZTogYWN0aXZlQ2hhbm5lbE1vZGUsIG1lc3NhZ2VzIH0gPSB0aGlzO1xuICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBjaGFubmVsTW9kZSA9PT0gYWN0aXZlQ2hhbm5lbE1vZGU7XG4gICAgICBjb25zdCBsYWJlbCA9IGNoYW5uZWxNb2RlID09PSBcInJnYlwiID8gbWVzc2FnZXMucmdiIDogbWVzc2FnZXMuaHN2O1xuICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS10YWItdGl0bGVcIiwgeyBjbGFzczogQ1NTLmNvbG9yTW9kZSwgXCJkYXRhLWNvbG9yLW1vZGVcIjogY2hhbm5lbE1vZGUsIGtleTogY2hhbm5lbE1vZGUsIG9uQ2FsY2l0ZVRhYnNBY3RpdmF0ZTogdGhpcy5oYW5kbGVUYWJBY3RpdmF0ZSwgc2VsZWN0ZWQ6IHNlbGVjdGVkIH0sIGxhYmVsKSk7XG4gICAgfTtcbiAgICB0aGlzLnJlbmRlckNoYW5uZWxzVGFiID0gKGNoYW5uZWxNb2RlKSA9PiB7XG4gICAgICBjb25zdCB7IGFsbG93RW1wdHksIGNoYW5uZWxNb2RlOiBhY3RpdmVDaGFubmVsTW9kZSwgY2hhbm5lbHMsIG1lc3NhZ2VzLCBhbHBoYUNoYW5uZWwgfSA9IHRoaXM7XG4gICAgICBjb25zdCBzZWxlY3RlZCA9IGNoYW5uZWxNb2RlID09PSBhY3RpdmVDaGFubmVsTW9kZTtcbiAgICAgIGNvbnN0IGlzUmdiID0gY2hhbm5lbE1vZGUgPT09IFwicmdiXCI7XG4gICAgICBjb25zdCBjaGFubmVsQXJpYUxhYmVscyA9IGlzUmdiXG4gICAgICAgID8gW21lc3NhZ2VzLnJlZCwgbWVzc2FnZXMuZ3JlZW4sIG1lc3NhZ2VzLmJsdWVdXG4gICAgICAgIDogW21lc3NhZ2VzLmh1ZSwgbWVzc2FnZXMuc2F0dXJhdGlvbiwgbWVzc2FnZXMudmFsdWVdO1xuICAgICAgY29uc3QgZGlyZWN0aW9uID0gZ2V0RWxlbWVudERpcih0aGlzLmVsKTtcbiAgICAgIGNvbnN0IGNoYW5uZWxzVG9SZW5kZXIgPSBhbHBoYUNoYW5uZWwgPyBjaGFubmVscyA6IGNoYW5uZWxzLnNsaWNlKDAsIDMpO1xuICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS10YWJcIiwgeyBjbGFzczogQ1NTLmNvbnRyb2wsIGtleTogY2hhbm5lbE1vZGUsIHNlbGVjdGVkOiBzZWxlY3RlZCB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5jaGFubmVscywgZGlyOiBcImx0clwiIH0sIGNoYW5uZWxzVG9SZW5kZXIubWFwKChjaGFubmVsVmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzQWxwaGFDaGFubmVsID0gaW5kZXggPT09IDM7XG4gICAgICAgIGlmIChpc0FscGhhQ2hhbm5lbCkge1xuICAgICAgICAgIGNoYW5uZWxWYWx1ZSA9XG4gICAgICAgICAgICBhbGxvd0VtcHR5ICYmICFjaGFubmVsVmFsdWUgPyBjaGFubmVsVmFsdWUgOiBhbHBoYVRvT3BhY2l0eShjaGFubmVsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8qIHRoZSBjaGFubmVsIGNvbnRhaW5lciBpcyBsdHIsIHNvIHdlIGFwcGx5IHRoZSBob3N0J3MgZGlyZWN0aW9uICovXG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckNoYW5uZWwoY2hhbm5lbFZhbHVlLCBpbmRleCwgY2hhbm5lbEFyaWFMYWJlbHNbaW5kZXhdLCBkaXJlY3Rpb24sIGlzQWxwaGFDaGFubmVsID8gXCIlXCIgOiBcIlwiKTtcbiAgICAgIH0pKSkpO1xuICAgIH07XG4gICAgdGhpcy5yZW5kZXJDaGFubmVsID0gKHZhbHVlLCBpbmRleCwgYXJpYUxhYmVsLCBkaXJlY3Rpb24sIHN1ZmZpeCkgPT4ge1xuICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1pbnB1dC1udW1iZXJcIiwgeyBjbGFzczogQ1NTLmNoYW5uZWwsIFwiZGF0YS1jaGFubmVsLWluZGV4XCI6IGluZGV4LCBkaXI6IGRpcmVjdGlvbiwga2V5OiBpbmRleCwgbGFiZWw6IGFyaWFMYWJlbCwgbGFuZzogdGhpcy5lZmZlY3RpdmVMb2NhbGUsIG51bWJlckJ1dHRvblR5cGU6IFwibm9uZVwiLCBudW1iZXJpbmdTeXN0ZW06IHRoaXMubnVtYmVyaW5nU3lzdGVtLCBvbkNhbGNpdGVJbnB1dE51bWJlckNoYW5nZTogdGhpcy5oYW5kbGVDaGFubmVsQ2hhbmdlLCBvbkNhbGNpdGVJbnB1dE51bWJlcklucHV0OiB0aGlzLmhhbmRsZUNoYW5uZWxJbnB1dCwgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sIHNjYWxlOiB0aGlzLnNjYWxlID09PSBcImxcIiA/IFwibVwiIDogXCJzXCIsXG4gICAgICAgIC8vIHdvcmthcm91bmQgdG8gZW5zdXJlIGlucHV0IGJvcmRlcnMgb3ZlcmxhcCBhcyBkZXNpcmVkXG4gICAgICAgIC8vIHRoaXMgaXMgYmVjYXVzZSB0aGUgYnVpbGQgdHJhbnNmb3JtcyBtYXJnaW4tbGVmdCB0byBpdHNcbiAgICAgICAgLy8gbG9naWNhbC1wcm9wLCB3aGljaCBpcyB1bmRlc2lyZWQgYXMgY2hhbm5lbHMgYXJlIGFsd2F5cyBsdHJcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBtYXJnaW5MZWZ0OiBpbmRleCA+IDAgJiYgISh0aGlzLnNjYWxlID09PSBcInNcIiAmJiB0aGlzLmFscGhhQ2hhbm5lbCAmJiBpbmRleCA9PT0gMykgPyBcIi0xcHhcIiA6IFwiXCIsXG4gICAgICAgIH0sIHN1ZmZpeFRleHQ6IHN1ZmZpeCwgdmFsdWU6IHZhbHVlPy50b1N0cmluZygpIH0pKTtcbiAgICB9O1xuICAgIHRoaXMuZGVsZXRlQ29sb3IgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjb2xvclRvRGVsZXRlID0gaGV4aWZ5KHRoaXMuY29sb3IsIHRoaXMuYWxwaGFDaGFubmVsKTtcbiAgICAgIGNvbnN0IGluU3RvcmFnZSA9IHRoaXMuc2F2ZWRDb2xvcnMuaW5kZXhPZihjb2xvclRvRGVsZXRlKSA+IC0xO1xuICAgICAgaWYgKCFpblN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2F2ZWRDb2xvcnMgPSB0aGlzLnNhdmVkQ29sb3JzLmZpbHRlcigoY29sb3IpID0+IGNvbG9yICE9PSBjb2xvclRvRGVsZXRlKTtcbiAgICAgIHRoaXMuc2F2ZWRDb2xvcnMgPSBzYXZlZENvbG9ycztcbiAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgPSBgJHtERUZBVUxUX1NUT1JBR0VfS0VZX1BSRUZJWH0ke3RoaXMuc3RvcmFnZUlkfWA7XG4gICAgICBpZiAodGhpcy5zdG9yYWdlSWQpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoc2F2ZWRDb2xvcnMpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuc2F2ZUNvbG9yID0gKCkgPT4ge1xuICAgICAgY29uc3QgY29sb3JUb1NhdmUgPSBoZXhpZnkodGhpcy5jb2xvciwgdGhpcy5hbHBoYUNoYW5uZWwpO1xuICAgICAgY29uc3QgYWxyZWFkeVNhdmVkID0gdGhpcy5zYXZlZENvbG9ycy5pbmRleE9mKGNvbG9yVG9TYXZlKSA+IC0xO1xuICAgICAgaWYgKGFscmVhZHlTYXZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzYXZlZENvbG9ycyA9IFsuLi50aGlzLnNhdmVkQ29sb3JzLCBjb2xvclRvU2F2ZV07XG4gICAgICB0aGlzLnNhdmVkQ29sb3JzID0gc2F2ZWRDb2xvcnM7XG4gICAgICBjb25zdCBzdG9yYWdlS2V5ID0gYCR7REVGQVVMVF9TVE9SQUdFX0tFWV9QUkVGSVh9JHt0aGlzLnN0b3JhZ2VJZH1gO1xuICAgICAgaWYgKHRoaXMuc3RvcmFnZUlkKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KHNhdmVkQ29sb3JzKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmRyYXdDb2xvckNvbnRyb2xzID0gdGhyb3R0bGUoKHR5cGUgPSBcImFsbFwiKSA9PiB7XG4gICAgICBpZiAoKHR5cGUgPT09IFwiYWxsXCIgfHwgdHlwZSA9PT0gXCJjb2xvci1maWVsZFwiKSAmJiB0aGlzLmNvbG9yRmllbGRSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZHJhd0NvbG9yRmllbGQoKTtcbiAgICAgIH1cbiAgICAgIGlmICgodHlwZSA9PT0gXCJhbGxcIiB8fCB0eXBlID09PSBcImh1ZS1zbGlkZXJcIikgJiYgdGhpcy5odWVTbGlkZXJSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZHJhd0h1ZVNsaWRlcigpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWxwaGFDaGFubmVsICYmXG4gICAgICAgICh0eXBlID09PSBcImFsbFwiIHx8IHR5cGUgPT09IFwib3BhY2l0eS1zbGlkZXJcIikgJiZcbiAgICAgICAgdGhpcy5vcGFjaXR5U2xpZGVyUmVuZGVyaW5nQ29udGV4dCkge1xuICAgICAgICB0aGlzLmRyYXdPcGFjaXR5U2xpZGVyKCk7XG4gICAgICB9XG4gICAgfSwgdGhyb3R0bGVGb3I2MEZwc0luTXMpO1xuICAgIHRoaXMuY2FwdHVyZUNvbG9yRmllbGRDb2xvciA9ICh4LCB5LCBza2lwRXF1YWwgPSB0cnVlKSA9PiB7XG4gICAgICBjb25zdCB7IGRpbWVuc2lvbnM6IHsgY29sb3JGaWVsZDogeyBoZWlnaHQsIHdpZHRoIH0sIH0sIH0gPSB0aGlzO1xuICAgICAgY29uc3Qgc2F0dXJhdGlvbiA9IE1hdGgucm91bmQoKEhTVl9MSU1JVFMucyAvIHdpZHRoKSAqIHgpO1xuICAgICAgY29uc3QgdmFsdWUgPSBNYXRoLnJvdW5kKChIU1ZfTElNSVRTLnYgLyBoZWlnaHQpICogKGhlaWdodCAtIHkpKTtcbiAgICAgIHRoaXMuaW50ZXJuYWxDb2xvclNldCh0aGlzLmJhc2VDb2xvckZpZWxkQ29sb3IuaHN2KCkuc2F0dXJhdGlvbnYoc2F0dXJhdGlvbikudmFsdWUodmFsdWUpLCBza2lwRXF1YWwpO1xuICAgIH07XG4gICAgdGhpcy5pbml0Q29sb3JGaWVsZCA9IChjYW52YXMpID0+IHtcbiAgICAgIHRoaXMuY29sb3JGaWVsZFJlbmRlcmluZ0NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgdGhpcy51cGRhdGVDYW52YXNTaXplKFwiY29sb3ItZmllbGRcIik7XG4gICAgICB0aGlzLmRyYXdDb2xvckNvbnRyb2xzKCk7XG4gICAgfTtcbiAgICB0aGlzLmluaXRIdWVTbGlkZXIgPSAoY2FudmFzKSA9PiB7XG4gICAgICB0aGlzLmh1ZVNsaWRlclJlbmRlcmluZ0NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgdGhpcy51cGRhdGVDYW52YXNTaXplKFwiaHVlLXNsaWRlclwiKTtcbiAgICAgIHRoaXMuZHJhd0h1ZVNsaWRlcigpO1xuICAgIH07XG4gICAgdGhpcy5pbml0T3BhY2l0eVNsaWRlciA9IChjYW52YXMpID0+IHtcbiAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMub3BhY2l0eVNsaWRlclJlbmRlcmluZ0NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgdGhpcy51cGRhdGVDYW52YXNTaXplKFwib3BhY2l0eS1zbGlkZXJcIik7XG4gICAgICB0aGlzLmRyYXdPcGFjaXR5U2xpZGVyKCk7XG4gICAgfTtcbiAgICB0aGlzLnN0b3JlT3BhY2l0eVNjb3BlID0gKG5vZGUpID0+IHtcbiAgICAgIHRoaXMub3BhY2l0eVNjb3BlTm9kZSA9IG5vZGU7XG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZU9wYWNpdHlTY29wZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IG1vZGlmaWVyID0gZXZlbnQuc2hpZnRLZXkgPyAxMCA6IDE7XG4gICAgICBjb25zdCB7IGtleSB9ID0gZXZlbnQ7XG4gICAgICBjb25zdCBhcnJvd0tleVRvWE9mZnNldCA9IHtcbiAgICAgICAgQXJyb3dVcDogMC4wMSxcbiAgICAgICAgQXJyb3dSaWdodDogMC4wMSxcbiAgICAgICAgQXJyb3dEb3duOiAtMC4wMSxcbiAgICAgICAgQXJyb3dMZWZ0OiAtMC4wMSxcbiAgICAgIH07XG4gICAgICBpZiAoYXJyb3dLZXlUb1hPZmZzZXRba2V5XSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBkZWx0YSA9IGFycm93S2V5VG9YT2Zmc2V0W2tleV0gKiBtb2RpZmllcjtcbiAgICAgICAgY29uc3QgYWxwaGEgPSB0aGlzLmJhc2VDb2xvckZpZWxkQ29sb3IuYWxwaGEoKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmJhc2VDb2xvckZpZWxkQ29sb3IuYWxwaGEoYWxwaGEgKyBkZWx0YSk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxDb2xvclNldChjb2xvciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5hbGxvd0VtcHR5ID0gZmFsc2U7XG4gICAgdGhpcy5hbHBoYUNoYW5uZWwgPSBmYWxzZTtcbiAgICB0aGlzLmNoYW5uZWxzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbG9yID0gREVGQVVMVF9DT0xPUjtcbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgdGhpcy5mb3JtYXQgPSBcImF1dG9cIjtcbiAgICB0aGlzLmhpZGVDaGFubmVscyA9IGZhbHNlO1xuICAgIHRoaXMuaGV4RGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmhpZGVIZXggPSBmYWxzZTtcbiAgICB0aGlzLmhpZGVTYXZlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2F2ZWREaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2NhbGUgPSBcIm1cIjtcbiAgICB0aGlzLnN0b3JhZ2VJZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1lc3NhZ2VPdmVycmlkZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWx1ZSA9IG5vcm1hbGl6ZUhleChoZXhpZnkoREVGQVVMVF9DT0xPUiwgdGhpcy5hbHBoYUNoYW5uZWwpKTtcbiAgICB0aGlzLmRlZmF1bHRNZXNzYWdlcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNoYW5uZWxNb2RlID0gXCJyZ2JcIjtcbiAgICB0aGlzLmNoYW5uZWxzID0gdGhpcy50b0NoYW5uZWxzKERFRkFVTFRfQ09MT1IpO1xuICAgIHRoaXMuZGltZW5zaW9ucyA9IERJTUVOU0lPTlMubTtcbiAgICB0aGlzLmVmZmVjdGl2ZUxvY2FsZSA9IFwiXCI7XG4gICAgdGhpcy5tZXNzYWdlcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNhdmVkQ29sb3JzID0gW107XG4gICAgdGhpcy5jb2xvckZpZWxkU2NvcGVUb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb2xvckZpZWxkU2NvcGVMZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaHVlU2NvcGVMZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3BhY2l0eVNjb3BlTGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNjb3BlT3JpZW50YXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgaGFuZGxlQWxwaGFDaGFubmVsQ2hhbmdlKGFscGhhQ2hhbm5lbCkge1xuICAgIGNvbnN0IHsgZm9ybWF0IH0gPSB0aGlzO1xuICAgIGlmIChhbHBoYUNoYW5uZWwgJiYgZm9ybWF0ICE9PSBcImF1dG9cIiAmJiAhYWxwaGFDb21wYXRpYmxlKGZvcm1hdCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgaWdub3JpbmcgYWxwaGFDaGFubmVsIGFzIHRoZSBjdXJyZW50IGZvcm1hdCAoJHtmb3JtYXR9KSBkb2VzIG5vdCBzdXBwb3J0IGFscGhhYCk7XG4gICAgICB0aGlzLmFscGhhQ2hhbm5lbCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBoYW5kbGVDb2xvckNoYW5nZShjb2xvciwgb2xkQ29sb3IpIHtcbiAgICB0aGlzLmRyYXdDb2xvckNvbnRyb2xzKCk7XG4gICAgdGhpcy51cGRhdGVDaGFubmVsc0Zyb21Db2xvcihjb2xvcik7XG4gICAgdGhpcy5wcmV2aW91c0NvbG9yID0gb2xkQ29sb3I7XG4gIH1cbiAgaGFuZGxlRm9ybWF0T3JBbHBoYUNoYW5uZWxDaGFuZ2UoKSB7XG4gICAgdGhpcy5zZXRNb2RlKHRoaXMuZm9ybWF0KTtcbiAgICB0aGlzLmludGVybmFsQ29sb3JTZXQodGhpcy5jb2xvciwgZmFsc2UsIFwiaW50ZXJuYWxcIik7XG4gIH1cbiAgaGFuZGxlU2NhbGVDaGFuZ2Uoc2NhbGUgPSBcIm1cIikge1xuICAgIHRoaXMudXBkYXRlRGltZW5zaW9ucyhzY2FsZSk7XG4gICAgdGhpcy51cGRhdGVDYW52YXNTaXplKFwiYWxsXCIpO1xuICAgIHRoaXMuZHJhd0NvbG9yQ29udHJvbHMoKTtcbiAgfVxuICBvbk1lc3NhZ2VzQ2hhbmdlKCkge1xuICAgIC8qIHdpcmVkIHVwIGJ5IHQ5biB1dGlsICovXG4gIH1cbiAgaGFuZGxlVmFsdWVDaGFuZ2UodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgY29uc3QgeyBhbGxvd0VtcHR5LCBmb3JtYXQgfSA9IHRoaXM7XG4gICAgY29uc3QgY2hlY2tNb2RlID0gIWFsbG93RW1wdHkgfHwgdmFsdWU7XG4gICAgbGV0IG1vZGVDaGFuZ2VkID0gZmFsc2U7XG4gICAgaWYgKGNoZWNrTW9kZSkge1xuICAgICAgY29uc3QgbmV4dE1vZGUgPSBwYXJzZU1vZGUodmFsdWUpO1xuICAgICAgaWYgKCFuZXh0TW9kZSB8fCAoZm9ybWF0ICE9PSBcImF1dG9cIiAmJiBuZXh0TW9kZSAhPT0gZm9ybWF0KSkge1xuICAgICAgICB0aGlzLnNob3dJbmNvbXBhdGlibGVDb2xvcldhcm5pbmcodmFsdWUsIGZvcm1hdCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBvbGRWYWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbW9kZUNoYW5nZWQgPSB0aGlzLm1vZGUgIT09IG5leHRNb2RlO1xuICAgICAgdGhpcy5zZXRNb2RlKG5leHRNb2RlLCB0aGlzLmludGVybmFsQ29sb3JVcGRhdGVDb250ZXh0ID09PSBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgZHJhZ2dpbmcgPSB0aGlzLmFjdGl2ZUNhbnZhc0luZm87XG4gICAgaWYgKHRoaXMuaW50ZXJuYWxDb2xvclVwZGF0ZUNvbnRleHQgPT09IFwiaW5pdGlhbFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmludGVybmFsQ29sb3JVcGRhdGVDb250ZXh0ID09PSBcInVzZXItaW50ZXJhY3Rpb25cIikge1xuICAgICAgdGhpcy5jYWxjaXRlQ29sb3JQaWNrZXJJbnB1dC5lbWl0KCk7XG4gICAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICAgIHRoaXMuY2FsY2l0ZUNvbG9yUGlja2VyQ2hhbmdlLmVtaXQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29sb3IkMSA9IGFsbG93RW1wdHkgJiYgIXZhbHVlXG4gICAgICA/IG51bGxcbiAgICAgIDogY29sb3IodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgYWxwaGFDb21wYXRpYmxlKHRoaXMubW9kZSlcbiAgICAgICAgPyBub3JtYWxpemVDb2xvcih2YWx1ZSlcbiAgICAgICAgOiB2YWx1ZSk7XG4gICAgY29uc3QgY29sb3JDaGFuZ2VkID0gIWNvbG9yRXF1YWwoY29sb3IkMSwgdGhpcy5jb2xvcik7XG4gICAgaWYgKG1vZGVDaGFuZ2VkIHx8IGNvbG9yQ2hhbmdlZCkge1xuICAgICAgdGhpcy5pbnRlcm5hbENvbG9yU2V0KGNvbG9yJDEsIHRoaXMuYWxwaGFDaGFubmVsICYmICEodGhpcy5tb2RlLmVuZHNXaXRoKFwiYVwiKSB8fCB0aGlzLm1vZGUuZW5kc1dpdGgoXCJhLWNzc1wiKSksIFwiaW50ZXJuYWxcIik7XG4gICAgfVxuICB9XG4gIGdldCBiYXNlQ29sb3JGaWVsZENvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLmNvbG9yIHx8IHRoaXMucHJldmlvdXNDb2xvciB8fCBERUZBVUxUX0NPTE9SO1xuICB9XG4gIGVmZmVjdGl2ZUxvY2FsZUNoYW5nZSgpIHtcbiAgICB1cGRhdGVNZXNzYWdlcyh0aGlzLCB0aGlzLmVmZmVjdGl2ZUxvY2FsZSk7XG4gIH1cbiAgLy8gdXNpbmcgQExpc3RlbiBhcyBhIHdvcmthcm91bmQgZm9yIFZET00gbGlzdGVuZXIgbm90IGZpcmluZ1xuICBoYW5kbGVDaGFubmVsS2V5VXBPckRvd24oZXZlbnQpIHtcbiAgICB0aGlzLnNoaWZ0S2V5Q2hhbm5lbEFkanVzdG1lbnQgPSAwO1xuICAgIGNvbnN0IHsga2V5IH0gPSBldmVudDtcbiAgICBpZiAoKGtleSAhPT0gXCJBcnJvd1VwXCIgJiYga2V5ICE9PSBcIkFycm93RG93blwiKSB8fFxuICAgICAgIWV2ZW50LmNvbXBvc2VkUGF0aCgpLnNvbWUoKG5vZGUpID0+IG5vZGUuY2xhc3NMaXN0Py5jb250YWlucyhDU1MuY2hhbm5lbCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgc2hpZnRLZXkgfSA9IGV2ZW50O1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCF0aGlzLmNvbG9yKSB7XG4gICAgICB0aGlzLmludGVybmFsQ29sb3JTZXQodGhpcy5wcmV2aW91c0NvbG9yKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB0aGlzIGdldHMgYXBwbGllZCB0byB0aGUgaW5wdXQncyB1cC9kb3duIGFycm93IGluY3JlbWVudC9kZWNyZW1lbnRcbiAgICBjb25zdCBjb21wbGVtZW50YXJ5QnVtcCA9IDk7XG4gICAgdGhpcy5zaGlmdEtleUNoYW5uZWxBZGp1c3RtZW50ID1cbiAgICAgIGtleSA9PT0gXCJBcnJvd1VwXCIgJiYgc2hpZnRLZXlcbiAgICAgICAgPyBjb21wbGVtZW50YXJ5QnVtcFxuICAgICAgICA6IGtleSA9PT0gXCJBcnJvd0Rvd25cIiAmJiBzaGlmdEtleVxuICAgICAgICAgID8gLWNvbXBsZW1lbnRhcnlCdW1wXG4gICAgICAgICAgOiAwO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFB1YmxpYyBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqIFNldHMgZm9jdXMgb24gdGhlIGNvbXBvbmVudCdzIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50LiAqL1xuICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICBhd2FpdCBjb21wb25lbnRGb2N1c2FibGUodGhpcyk7XG4gICAgdGhpcy5lbC5mb2N1cygpO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIExpZmVjeWNsZVxuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHNldFVwTG9hZGFibGVDb21wb25lbnQodGhpcyk7XG4gICAgY29uc3QgeyBhbGxvd0VtcHR5LCBjb2xvcjogY29sb3IkMSwgZm9ybWF0LCB2YWx1ZSB9ID0gdGhpcztcbiAgICBjb25zdCB3aWxsU2V0Tm9Db2xvciA9IGFsbG93RW1wdHkgJiYgIXZhbHVlO1xuICAgIGNvbnN0IHBhcnNlZE1vZGUgPSBwYXJzZU1vZGUodmFsdWUpO1xuICAgIGNvbnN0IHZhbHVlSXNDb21wYXRpYmxlID0gd2lsbFNldE5vQ29sb3IgfHwgKGZvcm1hdCA9PT0gXCJhdXRvXCIgJiYgcGFyc2VkTW9kZSkgfHwgZm9ybWF0ID09PSBwYXJzZWRNb2RlO1xuICAgIGNvbnN0IGluaXRpYWxDb2xvciA9IHdpbGxTZXROb0NvbG9yID8gbnVsbCA6IHZhbHVlSXNDb21wYXRpYmxlID8gY29sb3IodmFsdWUpIDogY29sb3IkMTtcbiAgICBpZiAoIXZhbHVlSXNDb21wYXRpYmxlKSB7XG4gICAgICB0aGlzLnNob3dJbmNvbXBhdGlibGVDb2xvcldhcm5pbmcodmFsdWUsIGZvcm1hdCk7XG4gICAgfVxuICAgIHRoaXMuc2V0TW9kZShmb3JtYXQsIGZhbHNlKTtcbiAgICB0aGlzLmludGVybmFsQ29sb3JTZXQoaW5pdGlhbENvbG9yLCBmYWxzZSwgXCJpbml0aWFsXCIpO1xuICAgIHRoaXMudXBkYXRlRGltZW5zaW9ucyh0aGlzLnNjYWxlKTtcbiAgICBjb25zdCBzdG9yYWdlS2V5ID0gYCR7REVGQVVMVF9TVE9SQUdFX0tFWV9QUkVGSVh9JHt0aGlzLnN0b3JhZ2VJZH1gO1xuICAgIGlmICh0aGlzLnN0b3JhZ2VJZCAmJiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KSkge1xuICAgICAgdGhpcy5zYXZlZENvbG9ycyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSkpO1xuICAgIH1cbiAgICBhd2FpdCBzZXRVcE1lc3NhZ2VzKHRoaXMpO1xuICB9XG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGNvbm5lY3RJbnRlcmFjdGl2ZSh0aGlzKTtcbiAgICBjb25uZWN0TG9jYWxpemVkKHRoaXMpO1xuICAgIGNvbm5lY3RNZXNzYWdlcyh0aGlzKTtcbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHNldENvbXBvbmVudExvYWRlZCh0aGlzKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5nbG9iYWxQb2ludGVyTW92ZUhhbmRsZXIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5nbG9iYWxQb2ludGVyVXBIYW5kbGVyKTtcbiAgICBkaXNjb25uZWN0SW50ZXJhY3RpdmUodGhpcyk7XG4gICAgZGlzY29ubmVjdExvY2FsaXplZCh0aGlzKTtcbiAgICBkaXNjb25uZWN0TWVzc2FnZXModGhpcyk7XG4gIH1cbiAgY29tcG9uZW50RGlkUmVuZGVyKCkge1xuICAgIHVwZGF0ZUhvc3RJbnRlcmFjdGlvbih0aGlzKTtcbiAgfVxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBSZW5kZXIgTWV0aG9kc1xuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGFsbG93RW1wdHksIGNoYW5uZWxzRGlzYWJsZWQsIGNvbG9yLCBjb2xvckZpZWxkU2NvcGVMZWZ0LCBjb2xvckZpZWxkU2NvcGVUb3AsIGRpbWVuc2lvbnM6IHsgc2xpZGVyOiB7IHdpZHRoOiBzbGlkZXJXaWR0aCB9LCB0aHVtYjogeyByYWRpdXM6IHRodW1iUmFkaXVzIH0sIH0sIGhleERpc2FibGVkLCBoaWRlQ2hhbm5lbHMsIGhpZGVIZXgsIGhpZGVTYXZlZCwgaHVlU2NvcGVMZWZ0LCBtZXNzYWdlcywgYWxwaGFDaGFubmVsLCBvcGFjaXR5U2NvcGVMZWZ0LCBzYXZlZENvbG9ycywgc2F2ZWREaXNhYmxlZCwgc2NhbGUsIHNjb3BlT3JpZW50YXRpb24sIH0gPSB0aGlzO1xuICAgIGNvbnN0IHNlbGVjdGVkQ29sb3JJbkhleCA9IGNvbG9yID8gaGV4aWZ5KGNvbG9yLCBhbHBoYUNoYW5uZWwpIDogbnVsbDtcbiAgICBjb25zdCBodWVUb3AgPSB0aHVtYlJhZGl1cztcbiAgICBjb25zdCBodWVMZWZ0ID0gaHVlU2NvcGVMZWZ0ID8/IChzbGlkZXJXaWR0aCAqIERFRkFVTFRfQ09MT1IuaHVlKCkpIC8gSFNWX0xJTUlUUy5oO1xuICAgIGNvbnN0IG9wYWNpdHlUb3AgPSB0aHVtYlJhZGl1cztcbiAgICBjb25zdCBvcGFjaXR5TGVmdCA9IG9wYWNpdHlTY29wZUxlZnQgPz9cbiAgICAgIChzbGlkZXJXaWR0aCAqIGFscGhhVG9PcGFjaXR5KERFRkFVTFRfQ09MT1IuYWxwaGEoKSkpIC8gT1BBQ0lUWV9MSU1JVFMubWF4O1xuICAgIGNvbnN0IG5vQ29sb3IgPSBjb2xvciA9PT0gbnVsbDtcbiAgICBjb25zdCB2ZXJ0aWNhbCA9IHNjb3BlT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIjtcbiAgICBjb25zdCBub0hleCA9IGhleERpc2FibGVkIHx8IGhpZGVIZXg7XG4gICAgY29uc3Qgbm9DaGFubmVscyA9IGNoYW5uZWxzRGlzYWJsZWQgfHwgaGlkZUNoYW5uZWxzO1xuICAgIGNvbnN0IG5vU2F2ZWQgPSBzYXZlZERpc2FibGVkIHx8IGhpZGVTYXZlZDtcbiAgICBjb25zdCBbYWRqdXN0ZWRDb2xvckZpZWxkU2NvcGVMZWZ0LCBhZGp1c3RlZENvbG9yRmllbGRTY29wZVRvcF0gPSB0aGlzLmdldEFkanVzdGVkU2NvcGVQb3NpdGlvbihjb2xvckZpZWxkU2NvcGVMZWZ0LCBjb2xvckZpZWxkU2NvcGVUb3ApO1xuICAgIGNvbnN0IFthZGp1c3RlZEh1ZVNjb3BlTGVmdCwgYWRqdXN0ZWRIdWVTY29wZVRvcF0gPSB0aGlzLmdldEFkanVzdGVkU2NvcGVQb3NpdGlvbihodWVMZWZ0LCBodWVUb3ApO1xuICAgIGNvbnN0IFthZGp1c3RlZE9wYWNpdHlTY29wZUxlZnQsIGFkanVzdGVkT3BhY2l0eVNjb3BlVG9wXSA9IHRoaXMuZ2V0QWRqdXN0ZWRTY29wZVBvc2l0aW9uKG9wYWNpdHlMZWZ0LCBvcGFjaXR5VG9wKTtcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmNvbnRhaW5lciB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5jb250cm9sQW5kU2NvcGUgfSwgaChcImNhbnZhc1wiLCB7IGNsYXNzOiBDU1MuY29sb3JGaWVsZCwgb25Qb2ludGVyRG93bjogdGhpcy5oYW5kbGVDb2xvckZpZWxkUG9pbnRlckRvd24sXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LXNvcnQtcHJvcHMgLS0gcmVmIHNob3VsZCBiZSBsYXN0IHNvIG5vZGUgYXR0cnMvcHJvcHMgYXJlIGluIHN5bmMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWRlc2lnbi1zeXN0ZW0vcHVsbC82NTMwKVxuICAgICAgcmVmOiB0aGlzLmluaXRDb2xvckZpZWxkIH0pLCBoKFwiZGl2XCIsIHsgXCJhcmlhLWxhYmVsXCI6IHZlcnRpY2FsID8gbWVzc2FnZXMudmFsdWUgOiBtZXNzYWdlcy5zYXR1cmF0aW9uLCBcImFyaWEtdmFsdWVtYXhcIjogdmVydGljYWwgPyBIU1ZfTElNSVRTLnYgOiBIU1ZfTElNSVRTLnMsIFwiYXJpYS12YWx1ZW1pblwiOiBcIjBcIiwgXCJhcmlhLXZhbHVlbm93XCI6ICh2ZXJ0aWNhbCA/IGNvbG9yPy5zYXR1cmF0aW9udigpIDogY29sb3I/LnZhbHVlKCkpIHx8IFwiMFwiLCBjbGFzczogeyBbQ1NTLnNjb3BlXTogdHJ1ZSwgW0NTUy5jb2xvckZpZWxkU2NvcGVdOiB0cnVlIH0sIG9uS2V5RG93bjogdGhpcy5oYW5kbGVDb2xvckZpZWxkU2NvcGVLZXlEb3duLCByb2xlOiBcInNsaWRlclwiLCBzdHlsZToge1xuICAgICAgICB0b3A6IGAke2FkanVzdGVkQ29sb3JGaWVsZFNjb3BlVG9wIHx8IDB9cHhgLFxuICAgICAgICBsZWZ0OiBgJHthZGp1c3RlZENvbG9yRmllbGRTY29wZUxlZnQgfHwgMH1weGAsXG4gICAgICB9LCB0YWJpbmRleDogXCIwXCIsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LXNvcnQtcHJvcHMgLS0gcmVmIHNob3VsZCBiZSBsYXN0IHNvIG5vZGUgYXR0cnMvcHJvcHMgYXJlIGluIHN5bmMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWRlc2lnbi1zeXN0ZW0vcHVsbC82NTMwKVxuICAgICAgcmVmOiB0aGlzLnN0b3JlQ29sb3JGaWVsZFNjb3BlIH0pKSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1MucHJldmlld0FuZFNsaWRlcnMgfSwgaChcImNhbGNpdGUtY29sb3ItcGlja2VyLXN3YXRjaFwiLCB7IGNsYXNzOiBDU1MucHJldmlldywgY29sb3I6IHNlbGVjdGVkQ29sb3JJbkhleCwgc2NhbGU6IFwibFwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5zbGlkZXJzIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmNvbnRyb2xBbmRTY29wZSB9LCBoKFwiY2FudmFzXCIsIHsgY2xhc3M6IHsgW0NTUy5zbGlkZXJdOiB0cnVlLCBbQ1NTLmh1ZVNsaWRlcl06IHRydWUgfSwgb25Qb2ludGVyRG93bjogdGhpcy5oYW5kbGVIdWVTbGlkZXJQb2ludGVyRG93bixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IHRoaXMuaW5pdEh1ZVNsaWRlciB9KSwgaChcImRpdlwiLCB7IFwiYXJpYS1sYWJlbFwiOiBtZXNzYWdlcy5odWUsIFwiYXJpYS12YWx1ZW1heFwiOiBIU1ZfTElNSVRTLmgsIFwiYXJpYS12YWx1ZW1pblwiOiBcIjBcIiwgXCJhcmlhLXZhbHVlbm93XCI6IGNvbG9yPy5yb3VuZCgpLmh1ZSgpIHx8IERFRkFVTFRfQ09MT1Iucm91bmQoKS5odWUoKSwgY2xhc3M6IHsgW0NTUy5zY29wZV06IHRydWUsIFtDU1MuaHVlU2NvcGVdOiB0cnVlIH0sIG9uS2V5RG93bjogdGhpcy5oYW5kbGVIdWVTY29wZUtleURvd24sIHJvbGU6IFwic2xpZGVyXCIsIHN0eWxlOiB7XG4gICAgICAgIHRvcDogYCR7YWRqdXN0ZWRIdWVTY29wZVRvcH1weGAsXG4gICAgICAgIGxlZnQ6IGAke2FkanVzdGVkSHVlU2NvcGVMZWZ0fXB4YCxcbiAgICAgIH0sIHRhYmluZGV4OiBcIjBcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IHRoaXMuc3RvcmVIdWVTY29wZSB9KSksIGFscGhhQ2hhbm5lbCA/IChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5jb250cm9sQW5kU2NvcGUgfSwgaChcImNhbnZhc1wiLCB7IGNsYXNzOiB7IFtDU1Muc2xpZGVyXTogdHJ1ZSwgW0NTUy5vcGFjaXR5U2xpZGVyXTogdHJ1ZSB9LCBvblBvaW50ZXJEb3duOiB0aGlzLmhhbmRsZU9wYWNpdHlTbGlkZXJQb2ludGVyRG93bixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IHRoaXMuaW5pdE9wYWNpdHlTbGlkZXIgfSksIGgoXCJkaXZcIiwgeyBcImFyaWEtbGFiZWxcIjogbWVzc2FnZXMub3BhY2l0eSwgXCJhcmlhLXZhbHVlbWF4XCI6IE9QQUNJVFlfTElNSVRTLm1heCwgXCJhcmlhLXZhbHVlbWluXCI6IE9QQUNJVFlfTElNSVRTLm1pbiwgXCJhcmlhLXZhbHVlbm93XCI6IChjb2xvciB8fCBERUZBVUxUX0NPTE9SKS5yb3VuZCgpLmFscGhhKCksIGNsYXNzOiB7IFtDU1Muc2NvcGVdOiB0cnVlLCBbQ1NTLm9wYWNpdHlTY29wZV06IHRydWUgfSwgb25LZXlEb3duOiB0aGlzLmhhbmRsZU9wYWNpdHlTY29wZUtleURvd24sIHJvbGU6IFwic2xpZGVyXCIsIHN0eWxlOiB7XG4gICAgICAgIHRvcDogYCR7YWRqdXN0ZWRPcGFjaXR5U2NvcGVUb3B9cHhgLFxuICAgICAgICBsZWZ0OiBgJHthZGp1c3RlZE9wYWNpdHlTY29wZUxlZnR9cHhgLFxuICAgICAgfSwgdGFiaW5kZXg6IFwiMFwiLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogdGhpcy5zdG9yZU9wYWNpdHlTY29wZSB9KSkpIDogbnVsbCkpLCBub0hleCAmJiBub0NoYW5uZWxzID8gbnVsbCA6IChoKFwiZGl2XCIsIHsgY2xhc3M6IHtcbiAgICAgICAgW0NTUy5jb250cm9sU2VjdGlvbl06IHRydWUsXG4gICAgICAgIFtDU1Muc2VjdGlvbl06IHRydWUsXG4gICAgICB9IH0sIGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmhleEFuZENoYW5uZWxzR3JvdXAgfSwgbm9IZXggPyBudWxsIDogKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLmhleE9wdGlvbnMgfSwgaChcImNhbGNpdGUtY29sb3ItcGlja2VyLWhleC1pbnB1dFwiLCB7IGFsbG93RW1wdHk6IGFsbG93RW1wdHksIGFscGhhQ2hhbm5lbDogYWxwaGFDaGFubmVsLCBjbGFzczogQ1NTLmNvbnRyb2wsIG1lc3NhZ2VzOiBtZXNzYWdlcywgbnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbSwgb25DYWxjaXRlQ29sb3JQaWNrZXJIZXhJbnB1dENoYW5nZTogdGhpcy5oYW5kbGVIZXhJbnB1dENoYW5nZSwgc2NhbGU6IHNjYWxlLCB2YWx1ZTogc2VsZWN0ZWRDb2xvckluSGV4IH0pKSksIG5vQ2hhbm5lbHMgPyBudWxsIDogKGgoXCJjYWxjaXRlLXRhYnNcIiwgeyBjbGFzczoge1xuICAgICAgICBbQ1NTLmNvbG9yTW9kZUNvbnRhaW5lcl06IHRydWUsXG4gICAgICAgIFtDU1Muc3BsaXRTZWN0aW9uXTogdHJ1ZSxcbiAgICAgIH0sIHNjYWxlOiBzY2FsZSA9PT0gXCJsXCIgPyBcIm1cIiA6IFwic1wiIH0sIGgoXCJjYWxjaXRlLXRhYi1uYXZcIiwgeyBzbG90OiBcInRpdGxlLWdyb3VwXCIgfSwgdGhpcy5yZW5kZXJDaGFubmVsc1RhYlRpdGxlKFwicmdiXCIpLCB0aGlzLnJlbmRlckNoYW5uZWxzVGFiVGl0bGUoXCJoc3ZcIikpLCB0aGlzLnJlbmRlckNoYW5uZWxzVGFiKFwicmdiXCIpLCB0aGlzLnJlbmRlckNoYW5uZWxzVGFiKFwiaHN2XCIpKSkpKSksIG5vU2F2ZWQgPyBudWxsIDogKGgoXCJkaXZcIiwgeyBjbGFzczogeyBbQ1NTLnNhdmVkQ29sb3JzU2VjdGlvbl06IHRydWUsIFtDU1Muc2VjdGlvbl06IHRydWUgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy5oZWFkZXIgfSwgaChcImxhYmVsXCIsIG51bGwsIG1lc3NhZ2VzLnNhdmVkKSwgaChcImRpdlwiLCB7IGNsYXNzOiBDU1Muc2F2ZWRDb2xvcnNCdXR0b25zIH0sIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGFwcGVhcmFuY2U6IFwidHJhbnNwYXJlbnRcIiwgY2xhc3M6IENTUy5kZWxldGVDb2xvciwgZGlzYWJsZWQ6IG5vQ29sb3IsIGljb25TdGFydDogXCJtaW51c1wiLCBraW5kOiBcIm5ldXRyYWxcIiwgbGFiZWw6IG1lc3NhZ2VzLmRlbGV0ZUNvbG9yLCBvbkNsaWNrOiB0aGlzLmRlbGV0ZUNvbG9yLCBzY2FsZTogc2NhbGUsIHR5cGU6IFwiYnV0dG9uXCIgfSksIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGFwcGVhcmFuY2U6IFwidHJhbnNwYXJlbnRcIiwgY2xhc3M6IENTUy5zYXZlQ29sb3IsIGRpc2FibGVkOiBub0NvbG9yLCBpY29uU3RhcnQ6IFwicGx1c1wiLCBraW5kOiBcIm5ldXRyYWxcIiwgbGFiZWw6IG1lc3NhZ2VzLnNhdmVDb2xvciwgb25DbGljazogdGhpcy5zYXZlQ29sb3IsIHNjYWxlOiBzY2FsZSwgdHlwZTogXCJidXR0b25cIiB9KSkpLCBzYXZlZENvbG9ycy5sZW5ndGggPiAwID8gKGgoXCJkaXZcIiwgeyBjbGFzczogQ1NTLnNhdmVkQ29sb3JzIH0sIFtcbiAgICAgIC4uLnNhdmVkQ29sb3JzLm1hcCgoY29sb3IpID0+IChoKFwiY2FsY2l0ZS1jb2xvci1waWNrZXItc3dhdGNoXCIsIHsgY2xhc3M6IENTUy5zYXZlZENvbG9yLCBjb2xvcjogY29sb3IsIGtleTogY29sb3IsIG9uQ2xpY2s6IHRoaXMuaGFuZGxlU2F2ZWRDb2xvclNlbGVjdCwgb25LZXlEb3duOiB0aGlzLmhhbmRsZVNhdmVkQ29sb3JLZXlEb3duLCBzY2FsZTogc2NhbGUsIHRhYkluZGV4OiAwIH0pKSksXG4gICAgXSkpIDogbnVsbCkpKSk7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFByaXZhdGUgTWV0aG9kc1xuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG4gIHNob3dJbmNvbXBhdGlibGVDb2xvcldhcm5pbmcodmFsdWUsIGZvcm1hdCkge1xuICAgIGNvbnNvbGUud2FybihgaWdub3JpbmcgY29sb3IgdmFsdWUgKCR7dmFsdWV9KSBhcyBpdCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBjdXJyZW50IGZvcm1hdCAoJHtmb3JtYXR9KWApO1xuICB9XG4gIHNldE1vZGUoZm9ybWF0LCB3YXJuID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1vZGUgPSBmb3JtYXQgPT09IFwiYXV0b1wiID8gdGhpcy5tb2RlIDogZm9ybWF0O1xuICAgIHRoaXMubW9kZSA9IHRoaXMuZW5zdXJlQ29tcGF0aWJsZU1vZGUobW9kZSwgd2Fybik7XG4gIH1cbiAgZW5zdXJlQ29tcGF0aWJsZU1vZGUobW9kZSwgd2Fybikge1xuICAgIGNvbnN0IHsgYWxwaGFDaGFubmVsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGlzQWxwaGFDb21wYXRpYmxlID0gYWxwaGFDb21wYXRpYmxlKG1vZGUpO1xuICAgIGlmIChhbHBoYUNoYW5uZWwgJiYgIWlzQWxwaGFDb21wYXRpYmxlKSB7XG4gICAgICBjb25zdCBhbHBoYU1vZGUgPSB0b0FscGhhTW9kZShtb2RlKTtcbiAgICAgIGlmICh3YXJuKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihgc2V0dGluZyBmb3JtYXQgdG8gKCR7YWxwaGFNb2RlfSkgYXMgdGhlIHByb3ZpZGVkIG9uZSAoJHttb2RlfSkgZG9lcyBub3Qgc3VwcG9ydCBhbHBoYWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFscGhhTW9kZTtcbiAgICB9XG4gICAgaWYgKCFhbHBoYUNoYW5uZWwgJiYgaXNBbHBoYUNvbXBhdGlibGUpIHtcbiAgICAgIGNvbnN0IG5vbkFscGhhTW9kZSA9IHRvTm9uQWxwaGFNb2RlKG1vZGUpO1xuICAgICAgaWYgKHdhcm4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBzZXR0aW5nIGZvcm1hdCB0byAoJHtub25BbHBoYU1vZGV9KSBhcyB0aGUgcHJvdmlkZWQgb25lICgke21vZGV9KSBkb2VzIG5vdCBzdXBwb3J0IGFscGhhYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9uQWxwaGFNb2RlO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZTtcbiAgfVxuICBjYXB0dXJlSHVlU2xpZGVyQ29sb3IoeCkge1xuICAgIGNvbnN0IHsgZGltZW5zaW9uczogeyBzbGlkZXI6IHsgd2lkdGggfSwgfSwgfSA9IHRoaXM7XG4gICAgY29uc3QgaHVlID0gKEhVRV9MSU1JVF9DT05TVFJBSU5FRCAvIHdpZHRoKSAqIHg7XG4gICAgdGhpcy5pbnRlcm5hbENvbG9yU2V0KHRoaXMuYmFzZUNvbG9yRmllbGRDb2xvci5odWUoaHVlKSwgZmFsc2UpO1xuICB9XG4gIGNhcHR1cmVPcGFjaXR5U2xpZGVyVmFsdWUoeCkge1xuICAgIGNvbnN0IHsgZGltZW5zaW9uczogeyBzbGlkZXI6IHsgd2lkdGggfSwgfSwgfSA9IHRoaXM7XG4gICAgY29uc3QgYWxwaGEgPSBvcGFjaXR5VG9BbHBoYSgoT1BBQ0lUWV9MSU1JVFMubWF4IC8gd2lkdGgpICogeCk7XG4gICAgdGhpcy5pbnRlcm5hbENvbG9yU2V0KHRoaXMuYmFzZUNvbG9yRmllbGRDb2xvci5hbHBoYShhbHBoYSksIGZhbHNlKTtcbiAgfVxuICBpbnRlcm5hbENvbG9yU2V0KGNvbG9yLCBza2lwRXF1YWwgPSB0cnVlLCBjb250ZXh0ID0gXCJ1c2VyLWludGVyYWN0aW9uXCIpIHtcbiAgICBpZiAoc2tpcEVxdWFsICYmIGNvbG9yRXF1YWwoY29sb3IsIHRoaXMuY29sb3IpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaW50ZXJuYWxDb2xvclVwZGF0ZUNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy50b1ZhbHVlKGNvbG9yKTtcbiAgICB0aGlzLmludGVybmFsQ29sb3JVcGRhdGVDb250ZXh0ID0gbnVsbDtcbiAgfVxuICB0b1ZhbHVlKGNvbG9yLCBmb3JtYXQgPSB0aGlzLm1vZGUpIHtcbiAgICBpZiAoIWNvbG9yKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgaGV4TW9kZSA9IFwiaGV4XCI7XG4gICAgaWYgKGZvcm1hdC5pbmNsdWRlcyhoZXhNb2RlKSkge1xuICAgICAgY29uc3QgaGFzQWxwaGEgPSBmb3JtYXQgPT09IENTU0NvbG9yTW9kZS5IRVhBO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZUhleChoZXhpZnkoY29sb3Iucm91bmQoKSwgaGFzQWxwaGEpLCBoYXNBbHBoYSk7XG4gICAgfVxuICAgIGlmIChmb3JtYXQuaW5jbHVkZXMoXCItY3NzXCIpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGNvbG9yW2Zvcm1hdC5yZXBsYWNlKFwiLWNzc1wiLCBcIlwiKS5yZXBsYWNlKFwiYVwiLCBcIlwiKV0oKS5yb3VuZCgpLnN0cmluZygpO1xuICAgICAgLy8gQ29sb3Igb21pdHMgYWxwaGEgdmFsdWVzIHdoZW4gYWxwaGEgaXMgMVxuICAgICAgY29uc3QgbmVlZFRvSW5qZWN0QWxwaGEgPSAoZm9ybWF0LmVuZHNXaXRoKFwiYVwiKSB8fCBmb3JtYXQuZW5kc1dpdGgoXCJhLWNzc1wiKSkgJiYgY29sb3IuYWxwaGEoKSA9PT0gMTtcbiAgICAgIGlmIChuZWVkVG9JbmplY3RBbHBoYSkge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHZhbHVlLnNsaWNlKDAsIDMpO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB2YWx1ZS5zbGljZSg0LCAtMSk7XG4gICAgICAgIHJldHVybiBgJHttb2RlbH1hKCR7dmFsdWVzfSwgJHtjb2xvci5hbHBoYSgpfSlgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBjb2xvck9iamVjdCA9IFxuICAgIC8qIENvbG9yKCkgZG9lcyBub3Qgc3VwcG9ydCBoc3ZhLCBoc2xhIG5vciByZ2JhLCBzbyB3ZSB1c2UgdGhlIG5vbi1hbHBoYSBtb2RlICovXG4gICAgY29sb3JbdG9Ob25BbHBoYU1vZGUoZm9ybWF0KV0oKS5yb3VuZCgpLm9iamVjdCgpO1xuICAgIGlmIChmb3JtYXQuZW5kc1dpdGgoXCJhXCIpKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplQWxwaGEoY29sb3JPYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3JPYmplY3Q7XG4gIH1cbiAgZ2V0U2xpZGVyQ2FwU3BhY2luZygpIHtcbiAgICBjb25zdCB7IGRpbWVuc2lvbnM6IHsgc2xpZGVyOiB7IGhlaWdodCB9LCB0aHVtYjogeyByYWRpdXMgfSwgfSwgfSA9IHRoaXM7XG4gICAgcmV0dXJuIHJhZGl1cyAqIDIgLSBoZWlnaHQ7XG4gIH1cbiAgdXBkYXRlRGltZW5zaW9ucyhzY2FsZSA9IFwibVwiKSB7XG4gICAgdGhpcy5kaW1lbnNpb25zID0gRElNRU5TSU9OU1tzY2FsZV07XG4gIH1cbiAgZHJhd0NvbG9yRmllbGQoKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29sb3JGaWVsZFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgY29uc3QgeyBkaW1lbnNpb25zOiB7IGNvbG9yRmllbGQ6IHsgaGVpZ2h0LCB3aWR0aCB9LCB9LCB9ID0gdGhpcztcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYmFzZUNvbG9yRmllbGRDb2xvclxuICAgICAgLmhzdigpXG4gICAgICAuc2F0dXJhdGlvbnYoMTAwKVxuICAgICAgLnZhbHVlKDEwMClcbiAgICAgIC5hbHBoYSgxKVxuICAgICAgLnN0cmluZygpO1xuICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgY29uc3Qgd2hpdGVHcmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgd2lkdGgsIDApO1xuICAgIHdoaXRlR3JhZGllbnQuYWRkQ29sb3JTdG9wKDAsIFwicmdiYSgyNTUsMjU1LDI1NSwxKVwiKTtcbiAgICB3aGl0ZUdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCBcInJnYmEoMjU1LDI1NSwyNTUsMClcIik7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSB3aGl0ZUdyYWRpZW50O1xuICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgY29uc3QgYmxhY2tHcmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgMCwgaGVpZ2h0KTtcbiAgICBibGFja0dyYWRpZW50LmFkZENvbG9yU3RvcCgwLCBcInJnYmEoMCwwLDAsMClcIik7XG4gICAgYmxhY2tHcmFkaWVudC5hZGRDb2xvclN0b3AoMSwgXCJyZ2JhKDAsMCwwLDEpXCIpO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gYmxhY2tHcmFkaWVudDtcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIHRoaXMuZHJhd0FjdGl2ZUNvbG9yRmllbGRDb2xvcigpO1xuICB9XG4gIHNldENhbnZhc0NvbnRleHRTaXplKGNhbnZhcywgeyBoZWlnaHQsIHdpZHRoIH0pIHtcbiAgICBpZiAoIWNhbnZhcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aCAqIGRldmljZVBpeGVsUmF0aW87XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIGRldmljZVBpeGVsUmF0aW87XG4gICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGNvbnRleHQuc2NhbGUoZGV2aWNlUGl4ZWxSYXRpbywgZGV2aWNlUGl4ZWxSYXRpbyk7XG4gIH1cbiAgdXBkYXRlQ2FudmFzU2l6ZShjb250ZXh0ID0gXCJhbGxcIikge1xuICAgIGNvbnN0IHsgZGltZW5zaW9ucyB9ID0gdGhpcztcbiAgICBpZiAoY29udGV4dCA9PT0gXCJhbGxcIiB8fCBjb250ZXh0ID09PSBcImNvbG9yLWZpZWxkXCIpIHtcbiAgICAgIHRoaXMuc2V0Q2FudmFzQ29udGV4dFNpemUodGhpcy5jb2xvckZpZWxkUmVuZGVyaW5nQ29udGV4dD8uY2FudmFzLCBkaW1lbnNpb25zLmNvbG9yRmllbGQpO1xuICAgIH1cbiAgICBjb25zdCBhZGp1c3RlZFNsaWRlckRpbWVuc2lvbnMgPSB7XG4gICAgICB3aWR0aDogZGltZW5zaW9ucy5zbGlkZXIud2lkdGgsXG4gICAgICBoZWlnaHQ6IGRpbWVuc2lvbnMuc2xpZGVyLmhlaWdodCArIChkaW1lbnNpb25zLnRodW1iLnJhZGl1cyAtIGRpbWVuc2lvbnMuc2xpZGVyLmhlaWdodCAvIDIpICogMixcbiAgICB9O1xuICAgIGlmIChjb250ZXh0ID09PSBcImFsbFwiIHx8IGNvbnRleHQgPT09IFwiaHVlLXNsaWRlclwiKSB7XG4gICAgICB0aGlzLnNldENhbnZhc0NvbnRleHRTaXplKHRoaXMuaHVlU2xpZGVyUmVuZGVyaW5nQ29udGV4dD8uY2FudmFzLCBhZGp1c3RlZFNsaWRlckRpbWVuc2lvbnMpO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCA9PT0gXCJhbGxcIiB8fCBjb250ZXh0ID09PSBcIm9wYWNpdHktc2xpZGVyXCIpIHtcbiAgICAgIHRoaXMuc2V0Q2FudmFzQ29udGV4dFNpemUodGhpcy5vcGFjaXR5U2xpZGVyUmVuZGVyaW5nQ29udGV4dD8uY2FudmFzLCBhZGp1c3RlZFNsaWRlckRpbWVuc2lvbnMpO1xuICAgIH1cbiAgfVxuICBkcmF3QWN0aXZlQ29sb3JGaWVsZENvbG9yKCkge1xuICAgIGNvbnN0IHsgY29sb3IgfSA9IHRoaXM7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoc3ZDb2xvciA9IGNvbG9yLmhzdigpO1xuICAgIGNvbnN0IHsgZGltZW5zaW9uczogeyBjb2xvckZpZWxkOiB7IGhlaWdodCwgd2lkdGggfSwgdGh1bWI6IHsgcmFkaXVzIH0sIH0sIH0gPSB0aGlzO1xuICAgIGNvbnN0IHggPSBoc3ZDb2xvci5zYXR1cmF0aW9udigpIC8gKEhTVl9MSU1JVFMucyAvIHdpZHRoKTtcbiAgICBjb25zdCB5ID0gaGVpZ2h0IC0gaHN2Q29sb3IudmFsdWUoKSAvIChIU1ZfTElNSVRTLnYgLyBoZWlnaHQpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLmNvbG9yRmllbGRTY29wZUxlZnQgPSB4O1xuICAgICAgdGhpcy5jb2xvckZpZWxkU2NvcGVUb3AgPSB5O1xuICAgIH0pO1xuICAgIHRoaXMuZHJhd1RodW1iKHRoaXMuY29sb3JGaWVsZFJlbmRlcmluZ0NvbnRleHQsIHJhZGl1cywgeCwgeSwgaHN2Q29sb3IpO1xuICB9XG4gIGRyYXdUaHVtYihjb250ZXh0LCByYWRpdXMsIHgsIHksIGNvbG9yKSB7XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IDA7XG4gICAgY29uc3QgZW5kQW5nbGUgPSAyICogTWF0aC5QSTtcbiAgICBjb25zdCBvdXRsaW5lV2lkdGggPSAxO1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5hcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBcIiNmZmZcIjtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJyZ2JhKDAsMCwwLDAuMylcIjtcbiAgICBjb250ZXh0LmxpbmVXaWR0aCA9IG91dGxpbmVXaWR0aDtcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgY29udGV4dC5hcmMoeCwgeSwgcmFkaXVzIC0gMywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3IucmdiKCkuYWxwaGEoMSkuc3RyaW5nKCk7XG4gICAgY29udGV4dC5maWxsKCk7XG4gIH1cbiAgZHJhd0FjdGl2ZUh1ZVNsaWRlckNvbG9yKCkge1xuICAgIGNvbnN0IHsgY29sb3IgfSA9IHRoaXM7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoc3ZDb2xvciA9IGNvbG9yLmhzdigpLnNhdHVyYXRpb252KDEwMCkudmFsdWUoMTAwKTtcbiAgICBjb25zdCB7IGRpbWVuc2lvbnM6IHsgc2xpZGVyOiB7IHdpZHRoIH0sIHRodW1iOiB7IHJhZGl1cyB9LCB9LCB9ID0gdGhpcztcbiAgICBjb25zdCB4ID0gaHN2Q29sb3IuaHVlKCkgLyAoSFVFX0xJTUlUX0NPTlNUUkFJTkVEIC8gd2lkdGgpO1xuICAgIGNvbnN0IHkgPSByYWRpdXM7XG4gICAgY29uc3Qgc2xpZGVyQm91bmRYID0gdGhpcy5nZXRTbGlkZXJCb3VuZFgoeCwgd2lkdGgsIHJhZGl1cyk7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMuaHVlU2NvcGVMZWZ0ID0gc2xpZGVyQm91bmRYO1xuICAgIH0pO1xuICAgIHRoaXMuZHJhd1RodW1iKHRoaXMuaHVlU2xpZGVyUmVuZGVyaW5nQ29udGV4dCwgcmFkaXVzLCBzbGlkZXJCb3VuZFgsIHksIGhzdkNvbG9yKTtcbiAgfVxuICBkcmF3SHVlU2xpZGVyKCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmh1ZVNsaWRlclJlbmRlcmluZ0NvbnRleHQ7XG4gICAgY29uc3QgeyBkaW1lbnNpb25zOiB7IHNsaWRlcjogeyBoZWlnaHQsIHdpZHRoIH0sIHRodW1iOiB7IHJhZGl1czogdGh1bWJSYWRpdXMgfSwgfSwgfSA9IHRoaXM7XG4gICAgY29uc3QgeCA9IDA7XG4gICAgY29uc3QgeSA9IHRodW1iUmFkaXVzIC0gaGVpZ2h0IC8gMjtcbiAgICBjb25zdCBncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgd2lkdGgsIDApO1xuICAgIGNvbnN0IGh1ZVNsaWRlckNvbG9yU3RvcEtleXdvcmRzID0gW1xuICAgICAgXCJyZWRcIixcbiAgICAgIFwieWVsbG93XCIsXG4gICAgICBcImxpbWVcIixcbiAgICAgIFwiY3lhblwiLFxuICAgICAgXCJibHVlXCIsXG4gICAgICBcIm1hZ2VudGFcIixcbiAgICAgIFwiI2ZmMDAwNFwiIC8qIDEgdW5pdCBsZXNzIHRoYW4gI2ZmMCB0byBhdm9pZCBkdXBsaWNhdGUgdmFsdWVzIHdpdGhpbiByYW5nZSAqLyxcbiAgICBdO1xuICAgIGNvbnN0IG9mZnNldCA9IDEgLyAoaHVlU2xpZGVyQ29sb3JTdG9wS2V5d29yZHMubGVuZ3RoIC0gMSk7XG4gICAgbGV0IGN1cnJlbnRPZmZzZXQgPSAwO1xuICAgIGh1ZVNsaWRlckNvbG9yU3RvcEtleXdvcmRzLmZvckVhY2goKGtleXdvcmQpID0+IHtcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcChjdXJyZW50T2Zmc2V0LCBjb2xvcihrZXl3b3JkKS5zdHJpbmcoKSk7XG4gICAgICBjdXJyZW50T2Zmc2V0ICs9IG9mZnNldDtcbiAgICB9KTtcbiAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0ICsgdGhpcy5nZXRTbGlkZXJDYXBTcGFjaW5nKCkgKiAyKTtcbiAgICB0aGlzLmRyYXdTbGlkZXJQYXRoKGNvbnRleHQsIGhlaWdodCwgd2lkdGgsIHgsIHkpO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgY29udGV4dC5maWxsKCk7XG4gICAgY29udGV4dC5zdHJva2VTdHlsZSA9IFwicmdiYSgwLDAsMCwwLjMpXCI7XG4gICAgY29udGV4dC5saW5lV2lkdGggPSAxO1xuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgdGhpcy5kcmF3QWN0aXZlSHVlU2xpZGVyQ29sb3IoKTtcbiAgfVxuICBkcmF3T3BhY2l0eVNsaWRlcigpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5vcGFjaXR5U2xpZGVyUmVuZGVyaW5nQ29udGV4dDtcbiAgICBjb25zdCB7IGJhc2VDb2xvckZpZWxkQ29sb3I6IHByZXZpb3VzQ29sb3IsIGRpbWVuc2lvbnM6IHsgc2xpZGVyOiB7IGhlaWdodCwgd2lkdGggfSwgdGh1bWI6IHsgcmFkaXVzOiB0aHVtYlJhZGl1cyB9LCB9LCB9ID0gdGhpcztcbiAgICBjb25zdCB4ID0gMDtcbiAgICBjb25zdCB5ID0gdGh1bWJSYWRpdXMgLSBoZWlnaHQgLyAyO1xuICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQgKyB0aGlzLmdldFNsaWRlckNhcFNwYWNpbmcoKSAqIDIpO1xuICAgIGNvbnN0IGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCB5LCB3aWR0aCwgMCk7XG4gICAgY29uc3Qgc3RhcnRDb2xvciA9IHByZXZpb3VzQ29sb3IucmdiKCkuYWxwaGEoMCk7XG4gICAgY29uc3QgbWlkQ29sb3IgPSBwcmV2aW91c0NvbG9yLnJnYigpLmFscGhhKDAuNSk7XG4gICAgY29uc3QgZW5kQ29sb3IgPSBwcmV2aW91c0NvbG9yLnJnYigpLmFscGhhKDEpO1xuICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCBzdGFydENvbG9yLnN0cmluZygpKTtcbiAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMC41LCBtaWRDb2xvci5zdHJpbmcoKSk7XG4gICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsIGVuZENvbG9yLnN0cmluZygpKTtcbiAgICB0aGlzLmRyYXdTbGlkZXJQYXRoKGNvbnRleHQsIGhlaWdodCwgd2lkdGgsIHgsIHkpO1xuICAgIGNvbnN0IHBhdHRlcm4gPSBjb250ZXh0LmNyZWF0ZVBhdHRlcm4odGhpcy5nZXRDaGVja2VyZWRCYWNrZ3JvdW5kUGF0dGVybigpLCBcInJlcGVhdFwiKTtcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHBhdHRlcm47XG4gICAgY29udGV4dC5maWxsKCk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudDtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJyZ2JhKDAsMCwwLDAuMylcIjtcbiAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgICB0aGlzLmRyYXdBY3RpdmVPcGFjaXR5U2xpZGVyQ29sb3IoKTtcbiAgfVxuICBkcmF3U2xpZGVyUGF0aChjb250ZXh0LCBoZWlnaHQsIHdpZHRoLCB4LCB5KSB7XG4gICAgY29uc3QgcmFkaXVzID0gaGVpZ2h0IC8gMiArIDE7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcmFkaXVzLCB5KTtcbiAgICBjb250ZXh0LmxpbmVUbyh4ICsgd2lkdGggLSByYWRpdXMsIHkpO1xuICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJhZGl1cyk7XG4gICAgY29udGV4dC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcbiAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSByYWRpdXMsIHkgKyBoZWlnaHQpO1xuICAgIGNvbnRleHQubGluZVRvKHggKyByYWRpdXMsIHkgKyBoZWlnaHQpO1xuICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcbiAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cywgeSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxuICBnZXRDaGVja2VyZWRCYWNrZ3JvdW5kUGF0dGVybigpIHtcbiAgICBpZiAodGhpcy5jaGVja2VyUGF0dGVybikge1xuICAgICAgcmV0dXJuIHRoaXMuY2hlY2tlclBhdHRlcm47XG4gICAgfVxuICAgIGNvbnN0IHBhdHRlcm4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIHBhdHRlcm4ud2lkdGggPSAxMDtcbiAgICBwYXR0ZXJuLmhlaWdodCA9IDEwO1xuICAgIGNvbnN0IHBhdHRlcm5Db250ZXh0ID0gcGF0dGVybi5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgcGF0dGVybkNvbnRleHQuZmlsbFN0eWxlID0gXCIjY2NjXCI7XG4gICAgcGF0dGVybkNvbnRleHQuZmlsbFJlY3QoMCwgMCwgMTAsIDEwKTtcbiAgICBwYXR0ZXJuQ29udGV4dC5maWxsU3R5bGUgPSBcIiNmZmZcIjtcbiAgICBwYXR0ZXJuQ29udGV4dC5maWxsUmVjdCgwLCAwLCA1LCA1KTtcbiAgICBwYXR0ZXJuQ29udGV4dC5maWxsUmVjdCg1LCA1LCA1LCA1KTtcbiAgICB0aGlzLmNoZWNrZXJQYXR0ZXJuID0gcGF0dGVybjtcbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICBkcmF3QWN0aXZlT3BhY2l0eVNsaWRlckNvbG9yKCkge1xuICAgIGNvbnN0IHsgY29sb3IgfSA9IHRoaXM7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoc3ZDb2xvciA9IGNvbG9yO1xuICAgIGNvbnN0IHsgZGltZW5zaW9uczogeyBzbGlkZXI6IHsgd2lkdGggfSwgdGh1bWI6IHsgcmFkaXVzIH0sIH0sIH0gPSB0aGlzO1xuICAgIGNvbnN0IHggPSBhbHBoYVRvT3BhY2l0eShoc3ZDb2xvci5hbHBoYSgpKSAvIChPUEFDSVRZX0xJTUlUUy5tYXggLyB3aWR0aCk7XG4gICAgY29uc3QgeSA9IHJhZGl1cztcbiAgICBjb25zdCBzbGlkZXJCb3VuZFggPSB0aGlzLmdldFNsaWRlckJvdW5kWCh4LCB3aWR0aCwgcmFkaXVzKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdGhpcy5vcGFjaXR5U2NvcGVMZWZ0ID0gc2xpZGVyQm91bmRYO1xuICAgIH0pO1xuICAgIHRoaXMuZHJhd1RodW1iKHRoaXMub3BhY2l0eVNsaWRlclJlbmRlcmluZ0NvbnRleHQsIHJhZGl1cywgc2xpZGVyQm91bmRYLCB5LCBoc3ZDb2xvcik7XG4gIH1cbiAgZ2V0U2xpZGVyQm91bmRYKHgsIHdpZHRoLCByYWRpdXMpIHtcbiAgICBjb25zdCBjbG9zZVRvRWRnZSA9IGNsb3NlVG9SYW5nZUVkZ2UoeCwgd2lkdGgsIHJhZGl1cyk7XG4gICAgcmV0dXJuIGNsb3NlVG9FZGdlID09PSAwXG4gICAgICA/IHhcbiAgICAgIDogY2xvc2VUb0VkZ2UgPT09IC0xXG4gICAgICAgID8gcmVtYXAoeCwgMCwgd2lkdGgsIHJhZGl1cywgcmFkaXVzICogMilcbiAgICAgICAgOiByZW1hcCh4LCAwLCB3aWR0aCwgd2lkdGggLSByYWRpdXMgKiAyLCB3aWR0aCAtIHJhZGl1cyk7XG4gIH1cbiAgdXBkYXRlQ29sb3JGcm9tQ2hhbm5lbHMoY2hhbm5lbHMpIHtcbiAgICB0aGlzLmludGVybmFsQ29sb3JTZXQoY29sb3IoY2hhbm5lbHMsIHRoaXMuY2hhbm5lbE1vZGUpKTtcbiAgfVxuICB1cGRhdGVDaGFubmVsc0Zyb21Db2xvcihjb2xvcikge1xuICAgIHRoaXMuY2hhbm5lbHMgPSBjb2xvciA/IHRoaXMudG9DaGFubmVscyhjb2xvcikgOiBbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF07XG4gIH1cbiAgdG9DaGFubmVscyhjb2xvcikge1xuICAgIGNvbnN0IHsgY2hhbm5lbE1vZGUgfSA9IHRoaXM7XG4gICAgY29uc3QgY2hhbm5lbHMgPSBjb2xvcltjaGFubmVsTW9kZV0oKVxuICAgICAgLmFycmF5KClcbiAgICAgIC5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgaXNBbHBoYSA9IGluZGV4ID09PSAzO1xuICAgICAgcmV0dXJuIGlzQWxwaGEgPyB2YWx1ZSA6IE1hdGguZmxvb3IodmFsdWUpO1xuICAgIH0pO1xuICAgIGlmIChjaGFubmVscy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGNoYW5uZWxzLnB1c2goMSk7IC8vIENvbG9yIG9taXRzIGFscGhhIHdoZW4gMVxuICAgIH1cbiAgICByZXR1cm4gY2hhbm5lbHM7XG4gIH1cbiAgZ2V0QWRqdXN0ZWRTY29wZVBvc2l0aW9uKGxlZnQsIHRvcCkge1xuICAgIHJldHVybiBbbGVmdCAtIFNDT1BFX1NJWkUgLyAyLCB0b3AgLSBTQ09QRV9TSVpFIC8gMl07XG4gIH1cbiAgc3RhdGljIGdldCBkZWxlZ2F0ZXNGb2N1cygpIHsgcmV0dXJuIHRydWU7IH1cbiAgc3RhdGljIGdldCBhc3NldHNEaXJzKCkgeyByZXR1cm4gW1wiYXNzZXRzXCJdOyB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcImFscGhhQ2hhbm5lbFwiOiBbXCJoYW5kbGVBbHBoYUNoYW5uZWxDaGFuZ2VcIiwgXCJoYW5kbGVGb3JtYXRPckFscGhhQ2hhbm5lbENoYW5nZVwiXSxcbiAgICBcImNvbG9yXCI6IFtcImhhbmRsZUNvbG9yQ2hhbmdlXCJdLFxuICAgIFwiZm9ybWF0XCI6IFtcImhhbmRsZUZvcm1hdE9yQWxwaGFDaGFubmVsQ2hhbmdlXCJdLFxuICAgIFwic2NhbGVcIjogW1wiaGFuZGxlU2NhbGVDaGFuZ2VcIl0sXG4gICAgXCJtZXNzYWdlT3ZlcnJpZGVzXCI6IFtcIm9uTWVzc2FnZXNDaGFuZ2VcIl0sXG4gICAgXCJ2YWx1ZVwiOiBbXCJoYW5kbGVWYWx1ZUNoYW5nZVwiXSxcbiAgICBcImVmZmVjdGl2ZUxvY2FsZVwiOiBbXCJlZmZlY3RpdmVMb2NhbGVDaGFuZ2VcIl1cbiAgfTsgfVxuICBzdGF0aWMgZ2V0IHN0eWxlKCkgeyByZXR1cm4gY29sb3JQaWNrZXJDc3M7IH1cbn0sIFsxNywgXCJjYWxjaXRlLWNvbG9yLXBpY2tlclwiLCB7XG4gICAgXCJhbGxvd0VtcHR5XCI6IFs1MTYsIFwiYWxsb3ctZW1wdHlcIl0sXG4gICAgXCJhbHBoYUNoYW5uZWxcIjogWzQsIFwiYWxwaGEtY2hhbm5lbFwiXSxcbiAgICBcImNoYW5uZWxzRGlzYWJsZWRcIjogWzQsIFwiY2hhbm5lbHMtZGlzYWJsZWRcIl0sXG4gICAgXCJjb2xvclwiOiBbMTA0MF0sXG4gICAgXCJkaXNhYmxlZFwiOiBbNTE2XSxcbiAgICBcImZvcm1hdFwiOiBbNTEzXSxcbiAgICBcImhpZGVDaGFubmVsc1wiOiBbNTE2LCBcImhpZGUtY2hhbm5lbHNcIl0sXG4gICAgXCJoZXhEaXNhYmxlZFwiOiBbNCwgXCJoZXgtZGlzYWJsZWRcIl0sXG4gICAgXCJoaWRlSGV4XCI6IFs1MTYsIFwiaGlkZS1oZXhcIl0sXG4gICAgXCJoaWRlU2F2ZWRcIjogWzUxNiwgXCJoaWRlLXNhdmVkXCJdLFxuICAgIFwic2F2ZWREaXNhYmxlZFwiOiBbNTE2LCBcInNhdmVkLWRpc2FibGVkXCJdLFxuICAgIFwic2NhbGVcIjogWzUxM10sXG4gICAgXCJzdG9yYWdlSWRcIjogWzUxMywgXCJzdG9yYWdlLWlkXCJdLFxuICAgIFwibWVzc2FnZU92ZXJyaWRlc1wiOiBbMTA0MF0sXG4gICAgXCJudW1iZXJpbmdTeXN0ZW1cIjogWzUxMywgXCJudW1iZXJpbmctc3lzdGVtXCJdLFxuICAgIFwidmFsdWVcIjogWzEwMjVdLFxuICAgIFwibWVzc2FnZXNcIjogWzEwNDBdLFxuICAgIFwiZGVmYXVsdE1lc3NhZ2VzXCI6IFszMl0sXG4gICAgXCJjaGFubmVsTW9kZVwiOiBbMzJdLFxuICAgIFwiY2hhbm5lbHNcIjogWzMyXSxcbiAgICBcImRpbWVuc2lvbnNcIjogWzMyXSxcbiAgICBcImVmZmVjdGl2ZUxvY2FsZVwiOiBbMzJdLFxuICAgIFwic2F2ZWRDb2xvcnNcIjogWzMyXSxcbiAgICBcImNvbG9yRmllbGRTY29wZVRvcFwiOiBbMzJdLFxuICAgIFwiY29sb3JGaWVsZFNjb3BlTGVmdFwiOiBbMzJdLFxuICAgIFwiaHVlU2NvcGVMZWZ0XCI6IFszMl0sXG4gICAgXCJvcGFjaXR5U2NvcGVMZWZ0XCI6IFszMl0sXG4gICAgXCJzY29wZU9yaWVudGF0aW9uXCI6IFszMl0sXG4gICAgXCJzZXRGb2N1c1wiOiBbNjRdXG4gIH0sIFtbMiwgXCJrZXlkb3duXCIsIFwiaGFuZGxlQ2hhbm5lbEtleVVwT3JEb3duXCJdLCBbMiwgXCJrZXl1cFwiLCBcImhhbmRsZUNoYW5uZWxLZXlVcE9yRG93blwiXV1dKTtcbmZ1bmN0aW9uIGRlZmluZUN1c3RvbUVsZW1lbnQkMSgpIHtcbiAgaWYgKHR5cGVvZiBjdXN0b21FbGVtZW50cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBjb21wb25lbnRzID0gW1wiY2FsY2l0ZS1jb2xvci1waWNrZXJcIiwgXCJjYWxjaXRlLWJ1dHRvblwiLCBcImNhbGNpdGUtY29sb3ItcGlja2VyLWhleC1pbnB1dFwiLCBcImNhbGNpdGUtY29sb3ItcGlja2VyLXN3YXRjaFwiLCBcImNhbGNpdGUtaWNvblwiLCBcImNhbGNpdGUtaW5wdXQtbnVtYmVyXCIsIFwiY2FsY2l0ZS1pbnB1dC10ZXh0XCIsIFwiY2FsY2l0ZS1sb2FkZXJcIiwgXCJjYWxjaXRlLXByb2dyZXNzXCIsIFwiY2FsY2l0ZS10YWJcIiwgXCJjYWxjaXRlLXRhYi1uYXZcIiwgXCJjYWxjaXRlLXRhYi10aXRsZVwiLCBcImNhbGNpdGUtdGFic1wiXTtcbiAgY29tcG9uZW50cy5mb3JFYWNoKHRhZ05hbWUgPT4geyBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICBjYXNlIFwiY2FsY2l0ZS1jb2xvci1waWNrZXJcIjpcbiAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBDb2xvclBpY2tlcik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2FsY2l0ZS1idXR0b25cIjpcbiAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGRlZmluZUN1c3RvbUVsZW1lbnQkZCgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNhbGNpdGUtY29sb3ItcGlja2VyLWhleC1pbnB1dFwiOlxuICAgICAgaWYgKCFjdXN0b21FbGVtZW50cy5nZXQodGFnTmFtZSkpIHtcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudCRjKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2FsY2l0ZS1jb2xvci1waWNrZXItc3dhdGNoXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50JGIoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYWxjaXRlLWljb25cIjpcbiAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGRlZmluZUN1c3RvbUVsZW1lbnQkYSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNhbGNpdGUtaW5wdXQtbnVtYmVyXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50JDkoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYWxjaXRlLWlucHV0LXRleHRcIjpcbiAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGRlZmluZUN1c3RvbUVsZW1lbnQkOCgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNhbGNpdGUtbG9hZGVyXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50JDcoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYWxjaXRlLXByb2dyZXNzXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50JDYoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYWxjaXRlLXRhYlwiOlxuICAgICAgaWYgKCFjdXN0b21FbGVtZW50cy5nZXQodGFnTmFtZSkpIHtcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudCQ1KCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2FsY2l0ZS10YWItbmF2XCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50JDQoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYWxjaXRlLXRhYi10aXRsZVwiOlxuICAgICAgaWYgKCFjdXN0b21FbGVtZW50cy5nZXQodGFnTmFtZSkpIHtcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudCQzKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2FsY2l0ZS10YWJzXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50JDIoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9IH0pO1xufVxuZGVmaW5lQ3VzdG9tRWxlbWVudCQxKCk7XG5cbmNvbnN0IENhbGNpdGVDb2xvclBpY2tlciA9IENvbG9yUGlja2VyO1xuY29uc3QgZGVmaW5lQ3VzdG9tRWxlbWVudCA9IGRlZmluZUN1c3RvbUVsZW1lbnQkMTtcblxuZXhwb3J0IHsgQ2FsY2l0ZUNvbG9yUGlja2VyLCBkZWZpbmVDdXN0b21FbGVtZW50IH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjEuMTEuMFxuICovXG5pbXBvcnQgeyBwcm94eUN1c3RvbUVsZW1lbnQsIEhUTUxFbGVtZW50LCBoLCBGcmFnbWVudCB9IGZyb20gJ0BzdGVuY2lsL2NvcmUvaW50ZXJuYWwvY2xpZW50L2luZGV4LmpzJztcbmltcG9ydCB7IGMgYXMgY29sb3IgfSBmcm9tICcuL2luZGV4Mi5qcyc7XG5pbXBvcnQgeyByIGFzIGdldE1vZGVOYW1lIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgaCBhcyBoZXhpZnkgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuY29uc3QgQ1NTID0ge1xuICBzd2F0Y2g6IFwic3dhdGNoXCIsXG4gIG5vQ29sb3JTd2F0Y2g6IFwic3dhdGNoLS1uby1jb2xvclwiLFxuICBjaGVja2VyOiBcImNoZWNrZXJcIixcbn07XG5jb25zdCBDT0xPUlMgPSB7XG4gIGJvcmRlckxpZ2h0OiBcInJnYmEoMCwgMCwgMCwgMC4zKVwiLFxuICBib3JkZXJEYXJrOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSlcIixcbn07XG5jb25zdCBjaGVja2VyU3F1YXJlU2l6ZSA9IDQ7XG5jb25zdCBDSEVDS0VSX0RJTUVOU0lPTlMgPSB7XG4gIHNxdWFyZVNpemU6IGNoZWNrZXJTcXVhcmVTaXplLFxuICBzaXplOiBjaGVja2VyU3F1YXJlU2l6ZSAqIDIsXG59O1xuXG5jb25zdCBjb2xvclBpY2tlclN3YXRjaENzcyA9IFwiOmhvc3R7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTppbmxpbmUtZmxleH06aG9zdChbc2NhbGU9c10pe2Jsb2NrLXNpemU6MS4yNXJlbTtpbmxpbmUtc2l6ZToxLjI1cmVtfTpob3N0KFtzY2FsZT1tXSl7YmxvY2stc2l6ZToxLjVyZW07aW5saW5lLXNpemU6MS41cmVtfTpob3N0KFtzY2FsZT1sXSl7YmxvY2stc2l6ZToycmVtO2lubGluZS1zaXplOjJyZW19LnN3YXRjaHtvdmVyZmxvdzpoaWRkZW47YmxvY2stc2l6ZTppbmhlcml0O2lubGluZS1zaXplOmluaGVyaXR9LnN3YXRjaCByZWN0e3RyYW5zaXRpb24tcHJvcGVydHk6YWxsO3RyYW5zaXRpb24tZHVyYXRpb246MTUwbXM7dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKX0uc3dhdGNoLS1uby1jb2xvciByZWN0e2ZpbGw6dmFyKC0tY2FsY2l0ZS11aS1mb3JlZ3JvdW5kLTEpfS5zd2F0Y2gtLW5vLWNvbG9yIGxpbmV7c3Ryb2tlOnZhcigtLWNhbGNpdGUtdWktZGFuZ2VyKX0uY2hlY2tlcntmaWxsOiNjYWNhY2F9Omhvc3QoW2hpZGRlbl0pe2Rpc3BsYXk6bm9uZX1baGlkZGVuXXtkaXNwbGF5Om5vbmV9XCI7XG5cbmNvbnN0IENvbG9yUGlja2VyU3dhdGNoID0gLypAX19QVVJFX18qLyBwcm94eUN1c3RvbUVsZW1lbnQoY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX3JlZ2lzdGVySG9zdCgpO1xuICAgIHRoaXMuX19hdHRhY2hTaGFkb3coKTtcbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuY29sb3IgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zY2FsZSA9IFwibVwiO1xuICB9XG4gIGhhbmRsZUNvbG9yQ2hhbmdlKGNvbG9yJDEpIHtcbiAgICB0aGlzLmludGVybmFsQ29sb3IgPSBjb2xvciQxID8gY29sb3IoY29sb3IkMSkgOiBudWxsO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIExpZmVjeWNsZVxuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMuaGFuZGxlQ29sb3JDaGFuZ2UodGhpcy5jb2xvcik7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGlzRW1wdHkgPSAhdGhpcy5pbnRlcm5hbENvbG9yO1xuICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICBbQ1NTLnN3YXRjaF06IHRydWUsXG4gICAgICBbQ1NTLm5vQ29sb3JTd2F0Y2hdOiBpc0VtcHR5LFxuICAgIH07XG4gICAgcmV0dXJuIChoKFwic3ZnXCIsIHsgY2xhc3M6IGNsYXNzZXMsIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgfSwgdGhpcy5yZW5kZXJTd2F0Y2goKSkpO1xuICB9XG4gIHJlbmRlclN3YXRjaCgpIHtcbiAgICBjb25zdCB7IGFjdGl2ZSwgZWwsIGludGVybmFsQ29sb3IgfSA9IHRoaXM7XG4gICAgY29uc3QgYm9yZGVyUmFkaXVzID0gYWN0aXZlID8gXCIxMDAlXCIgOiBcIjBcIjtcbiAgICBjb25zdCB0aGVtZSA9IGdldE1vZGVOYW1lKGVsKTtcbiAgICBjb25zdCBib3JkZXJDb2xvciA9IHRoZW1lID09PSBcImxpZ2h0XCIgPyBDT0xPUlMuYm9yZGVyTGlnaHQgOiBDT0xPUlMuYm9yZGVyRGFyaztcbiAgICBjb25zdCBjb21tb25Td2F0Y2hQcm9wcyA9IHtcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICByeDogYm9yZGVyUmFkaXVzLFxuICAgICAgc3Ryb2tlOiBib3JkZXJDb2xvcixcbiAgICAgIC8vIHN0cm9rZS13aWR0aCBhbmQgY2xpcC1wYXRoIGFyZSBuZWVkZWQgdG8gaGlkZSBvdmVyZmxvd2luZyBwb3J0aW9uIG9mIHN0cm9rZVxuICAgICAgLy8gc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83MjczMzQ2LzE5NDIxNlxuICAgICAgLy8gdXNpbmcgYXR0cmlidXRlIHRvIHdvcmsgYXJvdW5kIFN0ZW5jaWwgdXNpbmcgdGhlIHByb3AgbmFtZSB2cyB0aGUgYXR0cmlidXRlIHdoZW4gcmVuZGVyaW5nXG4gICAgICBbXCJzdHJva2Utd2lkdGhcIl06IFwiMlwiLFxuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgIH07XG4gICAgY29uc3QgaXNFbXB0eSA9ICFpbnRlcm5hbENvbG9yO1xuICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICByZXR1cm4gKGgoRnJhZ21lbnQsIG51bGwsIGgoXCJjbGlwUGF0aFwiLCB7IGlkOiBcInNoYXBlXCIgfSwgaChcInJlY3RcIiwgeyBoZWlnaHQ6IFwiMTAwJVwiLCByeDogYm9yZGVyUmFkaXVzLCB3aWR0aDogXCIxMDAlXCIgfSkpLCBoKFwicmVjdFwiLCB7IFwiY2xpcC1wYXRoXCI6IGBpbnNldCgwIHJvdW5kICR7Ym9yZGVyUmFkaXVzfSlgLCByeDogYm9yZGVyUmFkaXVzLCAuLi5jb21tb25Td2F0Y2hQcm9wcyB9KSwgaChcImxpbmVcIiwgeyBcImNsaXAtcGF0aFwiOiBcInVybCgjc2hhcGUpXCIsIFwic3Ryb2tlLXdpZHRoXCI6IFwiM1wiLCB4MTogXCIxMDAlXCIsIHgyOiBcIjBcIiwgeTE6IFwiMFwiLCB5MjogXCIxMDAlXCIgfSkpKTtcbiAgICB9XG4gICAgY29uc3QgYWxwaGEgPSBpbnRlcm5hbENvbG9yLmFscGhhKCk7XG4gICAgY29uc3QgaGV4ID0gaGV4aWZ5KGludGVybmFsQ29sb3IpO1xuICAgIGNvbnN0IGhleGEgPSBoZXhpZnkoaW50ZXJuYWxDb2xvciwgYWxwaGEgPCAxKTtcbiAgICByZXR1cm4gKGgoRnJhZ21lbnQsIG51bGwsIGgoXCJ0aXRsZVwiLCBudWxsLCBoZXhhKSwgaChcImRlZnNcIiwgbnVsbCwgaChcInBhdHRlcm5cIiwgeyBoZWlnaHQ6IENIRUNLRVJfRElNRU5TSU9OUy5zaXplLCBpZDogXCJjaGVja2VyXCIsIHBhdHRlcm5Vbml0czogXCJ1c2VyU3BhY2VPblVzZVwiLCB3aWR0aDogQ0hFQ0tFUl9ESU1FTlNJT05TLnNpemUsIHg6IFwiMFwiLCB5OiBcIjBcIiB9LCBoKFwicmVjdFwiLCB7IGNsYXNzOiBDU1MuY2hlY2tlciwgaGVpZ2h0OiBDSEVDS0VSX0RJTUVOU0lPTlMuc3F1YXJlU2l6ZSwgd2lkdGg6IENIRUNLRVJfRElNRU5TSU9OUy5zcXVhcmVTaXplLCB4OiBcIjBcIiwgeTogXCIwXCIgfSksIGgoXCJyZWN0XCIsIHsgY2xhc3M6IENTUy5jaGVja2VyLCBoZWlnaHQ6IENIRUNLRVJfRElNRU5TSU9OUy5zcXVhcmVTaXplLCB3aWR0aDogQ0hFQ0tFUl9ESU1FTlNJT05TLnNxdWFyZVNpemUsIHg6IENIRUNLRVJfRElNRU5TSU9OUy5zcXVhcmVTaXplLCB5OiBDSEVDS0VSX0RJTUVOU0lPTlMuc3F1YXJlU2l6ZSB9KSkpLCBoKFwicmVjdFwiLCB7IGZpbGw6IFwidXJsKCNjaGVja2VyKVwiLCBoZWlnaHQ6IFwiMTAwJVwiLCByeDogYm9yZGVyUmFkaXVzLCB3aWR0aDogXCIxMDAlXCIgfSksIGgoXCJyZWN0XCIsIHsgZmlsbDogaGV4LCBzdHlsZToge1xuICAgICAgICBcImNsaXAtcGF0aFwiOiBhbHBoYSA8IDEgPyBcInBvbHlnb24oMTAwJSAwLCAwIDAsIDAgMTAwJSlcIiA6IGBpbnNldCgwIHJvdW5kICR7Ym9yZGVyUmFkaXVzfSlgLFxuICAgICAgfSwgLi4uY29tbW9uU3dhdGNoUHJvcHMgfSksIGFscGhhIDwgMSA/IChoKFwicmVjdFwiLCB7IGZpbGw6IGhleGEsIGtleTogXCJvcGFjaXR5LWZpbGxcIiwgc3R5bGU6IHsgXCJjbGlwLXBhdGhcIjogXCJwb2x5Z29uKDEwMCUgMCwgMTAwJSAxMDAlLCAwIDEwMCUpXCIgfSwgLi4uY29tbW9uU3dhdGNoUHJvcHMgfSkpIDogbnVsbCkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcImNvbG9yXCI6IFtcImhhbmRsZUNvbG9yQ2hhbmdlXCJdXG4gIH07IH1cbiAgc3RhdGljIGdldCBzdHlsZSgpIHsgcmV0dXJuIGNvbG9yUGlja2VyU3dhdGNoQ3NzOyB9XG59LCBbMSwgXCJjYWxjaXRlLWNvbG9yLXBpY2tlci1zd2F0Y2hcIiwge1xuICAgIFwiYWN0aXZlXCI6IFs1MTZdLFxuICAgIFwiY29sb3JcIjogWzFdLFxuICAgIFwic2NhbGVcIjogWzUxM11cbiAgfV0pO1xuZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRWxlbWVudCgpIHtcbiAgaWYgKHR5cGVvZiBjdXN0b21FbGVtZW50cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBjb21wb25lbnRzID0gW1wiY2FsY2l0ZS1jb2xvci1waWNrZXItc3dhdGNoXCJdO1xuICBjb21wb25lbnRzLmZvckVhY2godGFnTmFtZSA9PiB7IHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJjYWxjaXRlLWNvbG9yLXBpY2tlci1zd2F0Y2hcIjpcbiAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBDb2xvclBpY2tlclN3YXRjaCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfSB9KTtcbn1cbmRlZmluZUN1c3RvbUVsZW1lbnQoKTtcblxuZXhwb3J0IHsgQ29sb3JQaWNrZXJTd2F0Y2ggYXMgQywgZGVmaW5lQ3VzdG9tRWxlbWVudCBhcyBkIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjEuMTEuMFxuICovXG5jb25zdCBjbGFtcCA9ICh2YWx1ZSwgbWluLCBtYXgpID0+IE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsdWUsIG1heCkpO1xuY29uc3QgZGVjaW1hbE51bWJlclJlZ2V4ID0gbmV3IFJlZ0V4cCgvKD86XFwuKFxcZCspKT8oPzpbZUVdKFsrLV0/XFxkKykpPyQvKTtcbi8qKlxuICogUmV0dXJucyB0aGUgcXVhbnRpdHkgb2YgcmVhbCBkZWNpbWFsIHBsYWNlcyBmb3IgYSBudW1iZXIsIHdoaWNoIGV4Y2x1ZGVzIHRyYWlsaW5nIHplcm9zLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA0NTQ1MTgvamF2YXNjcmlwdC1ob3ctdG8tcmV0cmlldmUtdGhlLW51bWJlci1vZi1kZWNpbWFscy1vZi1hLXN0cmluZy1udW1iZXJ9LlxuICpcbiAqIEBwYXJhbSBkZWNpbWFsIC0gZGVjaW1hbCB2YWx1ZVxuICogQHBhcmFtIHZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgYW1vdW50IG9mIGRlY2ltYWwgcGxhY2VzIGluIGEgbnVtYmVyXG4gKi9cbmNvbnN0IGRlY2ltYWxQbGFjZXMgPSAodmFsdWUpID0+IHtcbiAgY29uc3QgbWF0Y2ggPSAoXCJcIiArIHZhbHVlKS5tYXRjaChkZWNpbWFsTnVtYmVyUmVnZXgpO1xuICBpZiAoIW1hdGNoIHx8IHBhcnNlSW50KG1hdGNoWzFdKSA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBNYXRoLm1heCgwLCBcbiAgLy8gTnVtYmVyIG9mIGRpZ2l0cyByaWdodCBvZiBkZWNpbWFsIHBvaW50LlxuICAobWF0Y2hbMV0gPyBtYXRjaFsxXS5sZW5ndGggOiAwKSAtXG4gICAgLy8gQWRqdXN0IGZvciBzY2llbnRpZmljIG5vdGF0aW9uLlxuICAgIChtYXRjaFsyXSA/ICttYXRjaFsyXSA6IDApKTtcbn07XG5mdW5jdGlvbiBnZXREZWNpbWFscyh2YWx1ZSkge1xuICBpZiAoZGVjaW1hbFBsYWNlcyh2YWx1ZSkgPiAwICYmIHZhbHVlID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KGAwLiR7dmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV19YCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcmVtYXAodmFsdWUsIGZyb21NaW4sIGZyb21NYXgsIHRvTWluLCB0b01heCkge1xuICByZXR1cm4gKCh2YWx1ZSAtIGZyb21NaW4pICogKHRvTWF4IC0gdG9NaW4pKSAvIChmcm9tTWF4IC0gZnJvbU1pbikgKyB0b01pbjtcbn1cbi8qKlxuICogSGVscGVyIHRvIGRldGVybWluZSBpZiBhIHZhbHVlIGlzIGNsb3NlIHRvIHRoZSBlZGdlIG9mIGEgcmFuZ2Ugd2l0aGluIGEgdGhyZXNob2xkLlxuICpcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHJhbmdlXG4gKiBAcGFyYW0gdGhyZXNob2xkXG4gKiBAcmV0dXJucyAtMSBpZiBjbG9zZSB0byBsb3dlciBlZGdlLCAxIGlmIGNsb3NlIHRvIHVwcGVyIGVkZ2UsIDAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBjbG9zZVRvUmFuZ2VFZGdlKHZhbHVlLCByYW5nZSwgdGhyZXNob2xkKSB7XG4gIHJldHVybiB2YWx1ZSA8IHRocmVzaG9sZCA/IC0xIDogdmFsdWUgPiByYW5nZSAtIHRocmVzaG9sZCA/IDEgOiAwO1xufVxuXG5leHBvcnQgeyBjbG9zZVRvUmFuZ2VFZGdlIGFzIGEsIGNsYW1wIGFzIGMsIGRlY2ltYWxQbGFjZXMgYXMgZCwgZ2V0RGVjaW1hbHMgYXMgZywgcmVtYXAgYXMgciB9O1xuIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9ibG9iL21haW4vTElDRU5TRS5tZCBmb3IgZGV0YWlscy5cbiAqIHYxLjExLjBcbiAqL1xuaW1wb3J0IHsgcHJveHlDdXN0b21FbGVtZW50LCBIVE1MRWxlbWVudCwgY3JlYXRlRXZlbnQsIGgsIEhvc3QgfSBmcm9tICdAc3RlbmNpbC9jb3JlL2ludGVybmFsL2NsaWVudC9pbmRleC5qcyc7XG5pbXBvcnQgeyBvIGFzIG5vZGVMaXN0VG9BcnJheSB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGcgYXMgZ3VpZCB9IGZyb20gJy4vZ3VpZC5qcyc7XG5cbmNvbnN0IENTUyA9IHtcbiAgY29udGFpbmVyOiBcImNvbnRhaW5lclwiLFxuICBjb250ZW50OiBcImNvbnRlbnRcIixcbn07XG5cbmNvbnN0IHRhYkNzcyA9IFwiOmhvc3QoW3NlbGVjdGVkXSkgc2VjdGlvbiw6aG9zdChbc2VsZWN0ZWRdKSAuY29udGFpbmVye2Rpc3BsYXk6YmxvY2t9Omhvc3R7ZGlzcGxheTpub25lO2Jsb2NrLXNpemU6MTAwJTtpbmxpbmUtc2l6ZToxMDAlfTpob3N0KFtzZWxlY3RlZF0pe2Rpc3BsYXk6YmxvY2s7YmxvY2stc2l6ZToxMDAlO2lubGluZS1zaXplOjEwMCU7b3ZlcmZsb3c6YXV0b30uc2NhbGUtcyAuY29udGVudHtwYWRkaW5nLWJsb2NrOjAuMjVyZW07Zm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0yKTtsaW5lLWhlaWdodDoxcmVtfS5zY2FsZS1tIC5jb250ZW50e3BhZGRpbmctYmxvY2s6MC41cmVtO2ZvbnQtc2l6ZTp2YXIoLS1jYWxjaXRlLWZvbnQtc2l6ZS0tMSk7bGluZS1oZWlnaHQ6MXJlbX0uc2NhbGUtbCAuY29udGVudHtwYWRkaW5nLWJsb2NrOjAuNjI1cmVtO2ZvbnQtc2l6ZTp2YXIoLS1jYWxjaXRlLWZvbnQtc2l6ZS0wKTtsaW5lLWhlaWdodDoxLjI1cmVtfXNlY3Rpb24sLmNvbnRhaW5lcntkaXNwbGF5Om5vbmU7YmxvY2stc2l6ZToxMDAlO2lubGluZS1zaXplOjEwMCV9Omhvc3QoW2hpZGRlbl0pe2Rpc3BsYXk6bm9uZX1baGlkZGVuXXtkaXNwbGF5Om5vbmV9XCI7XG5cbmNvbnN0IFRhYiA9IC8qQF9fUFVSRV9fKi8gcHJveHlDdXN0b21FbGVtZW50KGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX19yZWdpc3Rlckhvc3QoKTtcbiAgICB0aGlzLl9fYXR0YWNoU2hhZG93KCk7XG4gICAgdGhpcy5jYWxjaXRlSW50ZXJuYWxUYWJSZWdpc3RlciA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZUludGVybmFsVGFiUmVnaXN0ZXJcIiwgNik7XG4gICAgdGhpcy5ndWlkID0gYGNhbGNpdGUtdGFiLXRpdGxlLSR7Z3VpZCgpfWA7XG4gICAgdGhpcy50YWIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2NhbGUgPSBcIm1cIjtcbiAgICB0aGlzLmxhYmVsZWRCeSA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBMaWZlY3ljbGVcbiAgLy9cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmVsLmlkIHx8IHRoaXMuZ3VpZDtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBcImFyaWEtbGFiZWxsZWRieVwiOiB0aGlzLmxhYmVsZWRCeSwgaWQ6IGlkIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogeyBbQ1NTLmNvbnRhaW5lcl06IHRydWUsIFtgc2NhbGUtJHt0aGlzLnNjYWxlfWBdOiB0cnVlIH0sIHJvbGU6IFwidGFicGFuZWxcIiwgdGFiSW5kZXg6IHRoaXMuc2VsZWN0ZWQgPyAwIDogLTEgfSwgaChcInNlY3Rpb25cIiwgeyBjbGFzczogQ1NTLmNvbnRlbnQgfSwgaChcInNsb3RcIiwgbnVsbCkpKSkpO1xuICB9XG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMucGFyZW50VGFic0VsID0gdGhpcy5lbC5jbG9zZXN0KFwiY2FsY2l0ZS10YWJzXCIpO1xuICB9XG4gIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgdGhpcy5jYWxjaXRlSW50ZXJuYWxUYWJSZWdpc3Rlci5lbWl0KCk7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgLy8gRGlzcGF0Y2hpbmcgdG8gYm9keSBpbiBvcmRlciB0byBiZSBsaXN0ZW5lZCBieSBvdGhlciBlbGVtZW50cyB0aGF0IGFyZSBzdGlsbCBjb25uZWN0ZWQgdG8gdGhlIERPTS5cbiAgICBkb2N1bWVudC5ib2R5Py5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImNhbGNpdGVUYWJVbnJlZ2lzdGVyXCIsIHtcbiAgICAgIGRldGFpbDogdGhpcy5lbCxcbiAgICB9KSk7XG4gIH1cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgRXZlbnQgTGlzdGVuZXJzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgaW50ZXJuYWxUYWJDaGFuZ2VIYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0VGFic0VsID0gZXZlbnRcbiAgICAgIC5jb21wb3NlZFBhdGgoKVxuICAgICAgLmZpbmQoKGVsKSA9PiBlbC50YWdOYW1lID09PSBcIkNBTENJVEUtVEFCU1wiKTtcbiAgICAvLyB0byBhbGxvdyBgPGNhbGNpdGUtdGFicz5gIHRvIGJlIG5lc3RlZCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGlzXG4gICAgLy8gYGNhbGNpdGVUYWJDaGFuZ2VgIGV2ZW50IHdhcyBhY3R1YWxseSBmaXJlZCBmcm9tIGEgd2l0aGluIHRoZSBzYW1lXG4gICAgLy8gYDxjYWxjaXRlLXRhYnM+YCB0aGF0IGlzIHRoZSBhIHBhcmVudCBvZiB0aGlzIHRhYi5cbiAgICBpZiAodGFyZ2V0VGFic0VsICE9PSB0aGlzLnBhcmVudFRhYnNFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy50YWIpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLnRhYiA9PT0gZXZlbnQuZGV0YWlsLnRhYjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmdldFRhYkluZGV4KCkudGhlbigoaW5kZXgpID0+IHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGluZGV4ID09PSBldmVudC5kZXRhaWwudGFiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFB1YmxpYyBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjb21wb25lbnQgaXRlbSB3aXRoaW4gdGhlIHRhYiBhcnJheS5cbiAgICovXG4gIGFzeW5jIGdldFRhYkluZGV4KCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKG5vZGVMaXN0VG9BcnJheSh0aGlzLmVsLnBhcmVudEVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcigoZWwpID0+IGVsLm1hdGNoZXMoXCJjYWxjaXRlLXRhYlwiKSksIHRoaXMuZWwpO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFByaXZhdGUgTWV0aG9kc1xuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBAcGFyYW0gdGFiSWRzXG4gICAqIEBwYXJhbSB0aXRsZUlkc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIHVwZGF0ZUFyaWFJbmZvKHRhYklkcyA9IFtdLCB0aXRsZUlkcyA9IFtdKSB7XG4gICAgdGhpcy5sYWJlbGVkQnkgPSB0aXRsZUlkc1t0YWJJZHMuaW5kZXhPZih0aGlzLmVsLmlkKV0gfHwgbnVsbDtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiB0aGlzOyB9XG4gIHN0YXRpYyBnZXQgc3R5bGUoKSB7IHJldHVybiB0YWJDc3M7IH1cbn0sIFsxLCBcImNhbGNpdGUtdGFiXCIsIHtcbiAgICBcInRhYlwiOiBbNTEzXSxcbiAgICBcInNlbGVjdGVkXCI6IFsxNTQwXSxcbiAgICBcInNjYWxlXCI6IFsxXSxcbiAgICBcImxhYmVsZWRCeVwiOiBbMzJdLFxuICAgIFwiZ2V0VGFiSW5kZXhcIjogWzY0XSxcbiAgICBcInVwZGF0ZUFyaWFJbmZvXCI6IFs2NF1cbiAgfSwgW1sxNiwgXCJjYWxjaXRlSW50ZXJuYWxUYWJDaGFuZ2VcIiwgXCJpbnRlcm5hbFRhYkNoYW5nZUhhbmRsZXJcIl1dXSk7XG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KCkge1xuICBpZiAodHlwZW9mIGN1c3RvbUVsZW1lbnRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudHMgPSBbXCJjYWxjaXRlLXRhYlwiXTtcbiAgY29tcG9uZW50cy5mb3JFYWNoKHRhZ05hbWUgPT4geyBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICBjYXNlIFwiY2FsY2l0ZS10YWJcIjpcbiAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBUYWIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH0gfSk7XG59XG5kZWZpbmVDdXN0b21FbGVtZW50KCk7XG5cbmV4cG9ydCB7IFRhYiBhcyBULCBkZWZpbmVDdXN0b21FbGVtZW50IGFzIGQgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWRlc2lnbi1zeXN0ZW0vYmxvYi9tYWluL0xJQ0VOU0UubWQgZm9yIGRldGFpbHMuXG4gKiB2MS4xMS4wXG4gKi9cbmltcG9ydCB7IHByb3h5Q3VzdG9tRWxlbWVudCwgSFRNTEVsZW1lbnQsIGgsIEZyYWdtZW50IH0gZnJvbSAnQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9jbGllbnQvaW5kZXguanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVPYnNlcnZlciB9IGZyb20gJy4vb2JzZXJ2ZXJzLmpzJztcblxuY29uc3QgU0xPVFMgPSB7XG4gIHRpdGxlR3JvdXA6IFwidGl0bGUtZ3JvdXBcIixcbn07XG5cbmNvbnN0IHRhYnNDc3MgPSBcIjpob3N0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Omhvc3QoW2JvcmRlcmVkXSl7Ym94LXNoYWRvdzppbnNldCAwIDFweCAwIHZhcigtLWNhbGNpdGUtdWktYm9yZGVyLTEpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS11aS1mb3JlZ3JvdW5kLTEpfTpob3N0KFtib3JkZXJlZF06bm90KFtwb3NpdGlvbj1ib3R0b21dKSkgOjpzbG90dGVkKGNhbGNpdGUtdGFiLW5hdil7bWFyZ2luLWJsb2NrLWVuZDotMXB4fTpob3N0KFtib3JkZXJlZF1bcG9zaXRpb249Ym90dG9tXSl7Ym94LXNoYWRvdzppbnNldCAwIDFweCAwIHZhcigtLWNhbGNpdGUtdWktYm9yZGVyLTEpLCBpbnNldCAwIC0xcHggMCB2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci0xKX06aG9zdChbYm9yZGVyZWRdKSBzZWN0aW9ue2JvcmRlci13aWR0aDoxcHg7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci0xKX06aG9zdChbYm9yZGVyZWRdW3NjYWxlPXNdKSBzZWN0aW9ue3BhZGRpbmc6MC43NXJlbX06aG9zdChbYm9yZGVyZWRdW3NjYWxlPW1dKSBzZWN0aW9ue3BhZGRpbmc6MC41cmVtfTpob3N0KFtib3JkZXJlZF1bc2NhbGU9bF0pIHNlY3Rpb257cGFkZGluZzoxcmVtfTpob3N0KFtwb3NpdGlvbj1ib3R0b21dKXtmbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZX1zZWN0aW9ue2Rpc3BsYXk6ZmxleDtmbGV4LWdyb3c6MTtvdmVyZmxvdzpoaWRkZW47Ym9yZGVyLWJsb2NrLXN0YXJ0LXdpZHRoOjFweDtib3JkZXItYmxvY2stc3RhcnQtY29sb3I6dmFyKC0tY2FsY2l0ZS11aS1ib3JkZXItMSk7Ym9yZGVyLWJsb2NrLXN0YXJ0LXN0eWxlOnNvbGlkfTpob3N0KFtwb3NpdGlvbj1ib3R0b21dKSBzZWN0aW9ue2ZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlO2JvcmRlci1ibG9jay1zdGFydC13aWR0aDowcHg7Ym9yZGVyLWJsb2NrLWVuZC13aWR0aDoxcHg7Ym9yZGVyLWJsb2NrLWVuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci0xKX06aG9zdChbcG9zaXRpb249Ym90dG9tXTpub3QoW2JvcmRlcmVkXSkpIHNlY3Rpb257Ym9yZGVyLWJsb2NrLWVuZC1zdHlsZTpzb2xpZH1AbWVkaWEgKGZvcmNlZC1jb2xvcnM6IGFjdGl2ZSl7Omhvc3QoW2JvcmRlcmVkXSkgc2VjdGlvbntib3JkZXItYmxvY2stc3RhcnQtd2lkdGg6MHB4O2JvcmRlci1ibG9jay1lbmQtd2lkdGg6MXB4fTpob3N0KFtwb3NpdGlvbj1ib3R0b21dW2JvcmRlcmVkXSkgc2VjdGlvbntib3JkZXItYmxvY2stc3RhcnQtd2lkdGg6MXB4O2JvcmRlci1ibG9jay1lbmQtd2lkdGg6MHB4fX06aG9zdChbaGlkZGVuXSl7ZGlzcGxheTpub25lfVtoaWRkZW5de2Rpc3BsYXk6bm9uZX1cIjtcblxuY29uc3QgVGFicyA9IC8qQF9fUFVSRV9fKi8gcHJveHlDdXN0b21FbGVtZW50KGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX19yZWdpc3Rlckhvc3QoKTtcbiAgICB0aGlzLl9fYXR0YWNoU2hhZG93KCk7XG4gICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gY3JlYXRlT2JzZXJ2ZXIoXCJtdXRhdGlvblwiLCAobXV0YXRpb25zTGlzdCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbnNMaXN0KSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IG11dGF0aW9uLnRhcmdldDtcbiAgICAgICAgaWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gXCJDQUxDSVRFLVRBQi1OQVZcIiB8fFxuICAgICAgICAgIHRhcmdldC5ub2RlTmFtZSA9PT0gXCJDQUxDSVRFLVRBQi1USVRMRVwiIHx8XG4gICAgICAgICAgdGFyZ2V0Lm5vZGVOYW1lID09PSBcIkNBTENJVEUtVEFCXCIpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUl0ZW1zKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmxheW91dCA9IFwiaW5saW5lXCI7XG4gICAgdGhpcy5wb3NpdGlvbiA9IFwidG9wXCI7XG4gICAgdGhpcy5zY2FsZSA9IFwibVwiO1xuICAgIHRoaXMuYm9yZGVyZWQgPSBmYWxzZTtcbiAgICB0aGlzLnRpdGxlcyA9IFtdO1xuICAgIHRoaXMudGFicyA9IFtdO1xuICB9XG4gIGhhbmRsZUluaGVyaXRhYmxlUHJvcHMoKSB7XG4gICAgdGhpcy51cGRhdGVJdGVtcygpO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIExpZmVjeWNsZVxuICAvL1xuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwsIHsgY2hpbGRMaXN0OiB0cnVlIH0pO1xuICAgIHRoaXMudXBkYXRlSXRlbXMoKTtcbiAgfVxuICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICB0aGlzLnVwZGF0ZUl0ZW1zKCk7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoaChGcmFnbWVudCwgbnVsbCwgaChcInNsb3RcIiwgeyBuYW1lOiBTTE9UUy50aXRsZUdyb3VwIH0pLCBoKFwic2VjdGlvblwiLCBudWxsLCBoKFwic2xvdFwiLCBudWxsKSkpKTtcbiAgfVxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBFdmVudCBMaXN0ZW5lcnNcbiAgLy9cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY2FsY2l0ZUludGVybmFsVGFiVGl0bGVSZWdpc3RlcihldmVudCkge1xuICAgIHRoaXMudGl0bGVzID0gWy4uLnRoaXMudGl0bGVzLCBldmVudC50YXJnZXRdO1xuICAgIHRoaXMucmVnaXN0cnlIYW5kbGVyKCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBldmVudFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNhbGNpdGVUYWJUaXRsZVVucmVnaXN0ZXIoZXZlbnQpIHtcbiAgICB0aGlzLnRpdGxlcyA9IHRoaXMudGl0bGVzLmZpbHRlcigoZWwpID0+IGVsICE9PSBldmVudC5kZXRhaWwpO1xuICAgIHRoaXMucmVnaXN0cnlIYW5kbGVyKCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBldmVudFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNhbGNpdGVJbnRlcm5hbFRhYlJlZ2lzdGVyKGV2ZW50KSB7XG4gICAgdGhpcy50YWJzID0gWy4uLnRoaXMudGFicywgZXZlbnQudGFyZ2V0XTtcbiAgICB0aGlzLnJlZ2lzdHJ5SGFuZGxlcigpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjYWxjaXRlVGFiVW5yZWdpc3RlcihldmVudCkge1xuICAgIHRoaXMudGFicyA9IHRoaXMudGFicy5maWx0ZXIoKGVsKSA9PiBlbCAhPT0gZXZlbnQuZGV0YWlsKTtcbiAgICB0aGlzLnJlZ2lzdHJ5SGFuZGxlcigpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG4gIHVwZGF0ZUl0ZW1zKCkge1xuICAgIGNvbnN0IHsgcG9zaXRpb24sIHNjYWxlIH0gPSB0aGlzO1xuICAgIGNvbnN0IG5hdiA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcihcImNhbGNpdGUtdGFiLW5hdlwiKTtcbiAgICBpZiAobmF2KSB7XG4gICAgICBuYXYucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgIG5hdi5zY2FsZSA9IHNjYWxlO1xuICAgIH1cbiAgICBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbChcImNhbGNpdGUtdGFiXCIpKS5mb3JFYWNoKCh0YWIpID0+IHtcbiAgICAgIGlmICh0YWIucGFyZW50RWxlbWVudCA9PT0gdGhpcy5lbCkge1xuICAgICAgICB0YWIuc2NhbGUgPSBzY2FsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbChcImNhbGNpdGUtdGFiLW5hdiA+IGNhbGNpdGUtdGFiLXRpdGxlXCIpKS5mb3JFYWNoKCh0aXRsZSkgPT4ge1xuICAgICAgdGl0bGUucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgIHRpdGxlLnNjYWxlID0gc2NhbGU7XG4gICAgfSk7XG4gIH1cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgUHJpdmF0ZSBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqXG4gICAqIE1hdGNoZXMgdXAgZWxlbWVudHMgZnJvbSB0aGUgaW50ZXJuYWwgYHRhYnNgIGFuZCBgdGl0bGVzYCB0byBhdXRvbWF0aWNhbGx5XG4gICAqIHVwZGF0ZSB0aGUgQVJJQSBhdHRyaWJ1dGVzIGFuZCBsaW5rIGA8Y2FsY2l0ZS10YWI+YCBhbmRcbiAgICogYDxjYWxjaXRlLXRhYi10aXRsZT5gIGNvbXBvbmVudHMuXG4gICAqL1xuICBhc3luYyByZWdpc3RyeUhhbmRsZXIoKSB7XG4gICAgbGV0IHRhYklkcztcbiAgICBsZXQgdGl0bGVJZHM7XG4gICAgLy8gZGV0ZXJtaW5lIGlmIHdlIGFyZSB1c2luZyBgdGFiYCBiYXNlZCBvciBgaW5kZXhgIGJhc2VkIHRhYiBpZGVudGlmaWVycy5cbiAgICBpZiAodGhpcy50YWJzLnNvbWUoKGVsKSA9PiBlbC50YWIpIHx8IHRoaXMudGl0bGVzLnNvbWUoKGVsKSA9PiBlbC50YWIpKSB7XG4gICAgICAvLyBpZiB3ZSBhcmUgdXNpbmcgYHRhYmAgYmFzZWQgaWRlbnRpZmllcnMgc29ydCBieSBgdGFiYCB0byBhY2NvdW50IGZvclxuICAgICAgLy8gcG9zc2libGUgb3V0IG9mIG9yZGVyIHRhYnMgYW5kIGdldCB0aGUgaWQgb2YgZWFjaCB0YWJcbiAgICAgIHRhYklkcyA9IHRoaXMudGFicy5zb3J0KChhLCBiKSA9PiBhLnRhYi5sb2NhbGVDb21wYXJlKGIudGFiKSkubWFwKChlbCkgPT4gZWwuaWQpO1xuICAgICAgdGl0bGVJZHMgPSB0aGlzLnRpdGxlcy5zb3J0KChhLCBiKSA9PiBhLnRhYi5sb2NhbGVDb21wYXJlKGIudGFiKSkubWFwKChlbCkgPT4gZWwuaWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGlmIHdlIGFyZSB1c2luZyBpbmRleCBiYXNlZCB0YWJzIHRoZW4gdGhlIGA8Y2FsY2l0ZS10YWI+YCBhbmRcbiAgICAgIC8vIGA8Y2FsY2l0ZS10YWItdGl0bGU+YCBtaWdodCBoYXZlIGJlZW4gcmVuZGVyZWQgb3V0IG9mIG9yZGVyIHNvIHRoZVxuICAgICAgLy8gb3JkZXIgb2YgYHRoaXMudGFic2AgYW5kIGB0aGlzLnRpdGxlc2AgbWlnaHQgbm90IHJlZmxlY3QgdGhlIERPTSBzdGF0ZSxcbiAgICAgIC8vIGFuZCBtaWdodCBub3QgbWF0Y2ggZWFjaCBvdGhlciBzbyB3ZSBuZWVkIHRvIGdldCB0aGUgaW5kZXggb2YgYWxsIHRoZVxuICAgICAgLy8gdGFicyBhbmQgdGl0bGVzIGluIHRoZSBET00gb3JkZXIgdG8gbWF0Y2ggdGhlbSB1cCBhcyBhIHNvdXJjZSBvZiB0cnV0aFxuICAgICAgY29uc3QgdGFiRG9tSW5kZXhlcyA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMudGFicy5tYXAoKGVsKSA9PiBlbC5nZXRUYWJJbmRleCgpKSk7XG4gICAgICBjb25zdCB0aXRsZURvbUluZGV4ZXMgPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnRpdGxlcy5tYXAoKGVsKSA9PiBlbC5nZXRUYWJJbmRleCgpKSk7XG4gICAgICAvLyBvbmNlIHdlIGhhdmUgdGhlIERPTSBvcmRlciBhcyBhIHNvdXJjZSBvZiB0cnV0aCB3ZSBjYW4gYnVpbGQgdGhlXG4gICAgICAvLyBtYXRjaGluZyB0YWJJZHMgYW5kIHRpdGxlSWRzIGFycmF5c1xuICAgICAgdGFiSWRzID0gdGFiRG9tSW5kZXhlcy5yZWR1Y2UoKGlkcywgaW5kZXhJbkRPTSwgcmVnaXN0cnlJbmRleCkgPT4ge1xuICAgICAgICBpZHNbaW5kZXhJbkRPTV0gPSB0aGlzLnRhYnNbcmVnaXN0cnlJbmRleF0uaWQ7XG4gICAgICAgIHJldHVybiBpZHM7XG4gICAgICB9LCBbXSk7XG4gICAgICB0aXRsZUlkcyA9IHRpdGxlRG9tSW5kZXhlcy5yZWR1Y2UoKGlkcywgaW5kZXhJbkRPTSwgcmVnaXN0cnlJbmRleCkgPT4ge1xuICAgICAgICBpZHNbaW5kZXhJbkRPTV0gPSB0aGlzLnRpdGxlc1tyZWdpc3RyeUluZGV4XS5pZDtcbiAgICAgICAgcmV0dXJuIGlkcztcbiAgICAgIH0sIFtdKTtcbiAgICB9XG4gICAgLy8gcGFzcyBhbGwgb3VyIG5ldyBhcmlhIGluZm9ybWF0aW9uIHRvIGVhY2ggYDxjYWxjaXRlLXRhYj5gIGFuZFxuICAgIC8vIGA8Y2FsY2l0ZS10YWItdGl0bGU+YCB3aGljaCB3aWxsIGNoZWNrIGlmIHRoZXkgY2FuIHVwZGF0ZSB0aGVpciBpbnRlcm5hbFxuICAgIC8vIGBjb250cm9sbGVkYCBvciBgbGFiZWxlZEJ5YCBzdGF0ZXMgYW5kIHJlLXJlbmRlciBpZiBuZWNlc3NhcnlcbiAgICB0aGlzLnRhYnMuZm9yRWFjaCgoZWwpID0+IGVsLnVwZGF0ZUFyaWFJbmZvKHRhYklkcywgdGl0bGVJZHMpKTtcbiAgICB0aGlzLnRpdGxlcy5mb3JFYWNoKChlbCkgPT4gZWwudXBkYXRlQXJpYUluZm8odGFiSWRzLCB0aXRsZUlkcykpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcInBvc2l0aW9uXCI6IFtcImhhbmRsZUluaGVyaXRhYmxlUHJvcHNcIl0sXG4gICAgXCJzY2FsZVwiOiBbXCJoYW5kbGVJbmhlcml0YWJsZVByb3BzXCJdXG4gIH07IH1cbiAgc3RhdGljIGdldCBzdHlsZSgpIHsgcmV0dXJuIHRhYnNDc3M7IH1cbn0sIFsxLCBcImNhbGNpdGUtdGFic1wiLCB7XG4gICAgXCJsYXlvdXRcIjogWzUxM10sXG4gICAgXCJwb3NpdGlvblwiOiBbNTEzXSxcbiAgICBcInNjYWxlXCI6IFs1MTNdLFxuICAgIFwiYm9yZGVyZWRcIjogWzRdLFxuICAgIFwidGl0bGVzXCI6IFszMl0sXG4gICAgXCJ0YWJzXCI6IFszMl1cbiAgfSwgW1swLCBcImNhbGNpdGVJbnRlcm5hbFRhYlRpdGxlUmVnaXN0ZXJcIiwgXCJjYWxjaXRlSW50ZXJuYWxUYWJUaXRsZVJlZ2lzdGVyXCJdLCBbMTYsIFwiY2FsY2l0ZVRhYlRpdGxlVW5yZWdpc3RlclwiLCBcImNhbGNpdGVUYWJUaXRsZVVucmVnaXN0ZXJcIl0sIFswLCBcImNhbGNpdGVJbnRlcm5hbFRhYlJlZ2lzdGVyXCIsIFwiY2FsY2l0ZUludGVybmFsVGFiUmVnaXN0ZXJcIl0sIFsxNiwgXCJjYWxjaXRlVGFiVW5yZWdpc3RlclwiLCBcImNhbGNpdGVUYWJVbnJlZ2lzdGVyXCJdXV0pO1xuZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRWxlbWVudCgpIHtcbiAgaWYgKHR5cGVvZiBjdXN0b21FbGVtZW50cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBjb21wb25lbnRzID0gW1wiY2FsY2l0ZS10YWJzXCJdO1xuICBjb21wb25lbnRzLmZvckVhY2godGFnTmFtZSA9PiB7IHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJjYWxjaXRlLXRhYnNcIjpcbiAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBUYWJzKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9IH0pO1xufVxuZGVmaW5lQ3VzdG9tRWxlbWVudCgpO1xuXG5leHBvcnQgeyBUYWJzIGFzIFQsIGRlZmluZUN1c3RvbUVsZW1lbnQgYXMgZCB9O1xuIiwiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9ibG9iL21haW4vTElDRU5TRS5tZCBmb3IgZGV0YWlscy5cbiAqIHYxLjExLjBcbiAqL1xuaW1wb3J0IHsgZCBhcyBkZWJvdW5jZSwgaSBhcyBpc09iamVjdCB9IGZyb20gJy4vZGVib3VuY2UuanMnO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5leHBvcnQgeyB0aHJvdHRsZSBhcyB0IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=