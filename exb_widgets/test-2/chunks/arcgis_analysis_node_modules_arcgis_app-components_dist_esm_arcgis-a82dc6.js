"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-a82dc6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-multidimensional-info.entry.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-raster-multidimensional-info.entry.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_raster_multidimensional_info: () => (/* binding */ ArcgisRasterMultidimensionalInfo)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _multidimensional_279ffd6e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multidimensional-279ffd6e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-279ffd6e.js");
/* harmony import */ var _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localStorage-f63100ef.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */










const arcgisRasterMultidimensionalInfoCss = ":host{display:flex;flex:1 1 auto}.info{width:100%}.info-content{height:var(--calcite-loader-size, 64px)}.default-variable{font-size:var(--calcite-font-size--2)}.notice{margin-bottom:10px}";

const ArcgisRasterMultidimensionalInfo = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.keepActiveDimension = true;
    this.showFilterLength = 10;
    this.showRawSourceInfo = true;
    this.layer = undefined;
    this.open = true;
    this.showStatistics = false;
    this.useTable = true;
    this.multidimensionalInfo = undefined;
    this.selectedVariableNames = [];
  }
  watchLayer(newValue, _oldValue) {
    this.closePopover();
    this.multidimensionalInfo = null;
    this.selectedVariableNames = [];
    this.initLayer(newValue);
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    [this.strings] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.initLayer(this.layer);
  }
  disconnectedCallback() {
    this.closePopover();
  }
  // --------------------------------------------------------------------------
  //
  //  public methods
  //
  // --------------------------------------------------------------------------
  async done() {
    this.closePopover();
  }
  // --------------------------------------------------------------------------
  //
  //  Render methods
  //
  // --------------------------------------------------------------------------
  render() {
    var _a, _b, _c;
    const { layer, multidimensionalInfo, strings } = this;
    if (!multidimensionalInfo) {
      const loading = !(layer === null || layer === void 0 ? void 0 : layer.loaded);
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "info", heading: strings.multidimensionalInfo.info, collapsible: true, open: !!this.open, loading: loading }, loading ? (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-content" }) : (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.general.unsupported))));
    }
    const { variables } = multidimensionalInfo;
    const rasterInfo = layer.type === "imagery" ? layer.serviceRasterInfo : layer.rasterInfo;
    const defaultVariable = (_b = (_a = rasterInfo.keyProperties) === null || _a === void 0 ? void 0 : _a["DefaultVariable"]) !== null && _b !== void 0 ? _b : variables[0].name;
    const allDimensions = [];
    variables.forEach(({ dimensions }) => dimensions.forEach((dimension) => {
      if (!allDimensions.some((existingDimension) => existingDimension.name === dimension.name)) {
        allDimensions.push(dimension);
      }
    }));
    const dimensionDesc = allDimensions
      .map(({ name, values }) => {
      const dimName = name === "StdTime"
        ? strings.multidimensionalInfo.timeValues
        : name === "StdZ"
          ? strings.multidimensionalInfo.zValues
          : strings.multidimensionalInfo.generalValues.replace("${dimensionName}", name);
      const length = values === null || values === void 0 ? void 0 : values.length;
      return length ? `${dimName}: ${length}` : dimName;
    })
      .join("; ");
    const searchItems = variables.map(({ name, dimensions }) => ({
      name,
      dimensionNames: dimensions.map((dimensionInfo) => dimensionInfo.name)
    }));
    const selectedVariables = ((_c = this.selectedVariableNames) === null || _c === void 0 ? void 0 : _c.length)
      ? variables.filter(({ name }) => this.selectedVariableNames.includes(name))
      : variables;
    const filterBox = variables.length >= this.showFilterLength && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-filter", { items: searchItems, messageOverrides: {
        clear: strings.general.clear,
        label: strings.multidimensionalInfo.searchVariables
      }, placeholder: strings.multidimensionalInfo.searchVariables, onCalciteFilterChange: (event) => {
        const filteredItems = event.target.filteredItems;
        this.selectedVariableNames = filteredItems.map(({ name }) => name);
      } }));
    const variableSelect = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.variableEL = el) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, `${strings.multidimensionalInfo.variables}: ${variables.length}; ${dimensionDesc}`), filterBox, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, selectedVariables.map((variableInfo) => this.renderVariableListItem(variableInfo, variableInfo.name === defaultVariable)))));
    const isTipNeeded = !(0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_3__.g)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_3__.l.ARCGIS_COMPONENT_NOTIFICATIONS, _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_3__.a.MULTIDIMENSIONAL_INFO_TIP_DISMISSED);
    const message = isTipNeeded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { open: true, closable: true, icon: true, scale: "s", class: "notice", onCalciteNoticeClose: () => {
        (0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_3__.s)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_3__.l.ARCGIS_COMPONENT_NOTIFICATIONS, {
          key: _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_3__.a.MULTIDIMENSIONAL_INFO_TIP_DISMISSED,
          value: "true"
        });
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, " ", strings.multidimensionalInfo.tip)));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "info", heading: strings.multidimensionalInfo.info, collapsible: true, open: !!this.open, onCalciteBlockToggle: (evt) => !evt.target.open && this.closePopover() }, message, variableSelect, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null))));
  }
  renderVariableListItem(variableInfo, isDefaultVariable) {
    const { name, unit, description } = variableInfo;
    const label = unit ? `${name} (${unit})` : `${name}`;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: label, description: description, key: name, onClick: () => this.renderPickListPopover(variableInfo) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "information", scale: "s", text: this.strings.general.close, slot: "actions-start", onClick: () => this.renderPickListPopover(variableInfo) }), isDefaultVariable ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { slot: "actions-end", value: undefined }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "default-variable" }, this.strings.general.default))) : null));
  }
  renderPickListPopover(variableInfo) {
    if (this.popOver) {
      this.popOver.keepActiveDimension = this.keepActiveDimension;
      this.popOver.variableInfo = variableInfo;
      this.popOver.setFocus("dismiss-button");
      return;
    }
    const popOver = document.createElement("arcgis-raster-multidimensional-variable-info");
    popOver.keepActiveDimension = this.keepActiveDimension;
    popOver.variableInfo = variableInfo;
    popOver.showStatistics = this.showStatistics;
    popOver.useTable = this.useTable;
    popOver.strings = this.strings;
    let offsetSkidding = 0;
    if (this.variableEL) {
      offsetSkidding =
        this.variableEL.getBoundingClientRect().top - this.hostElement.getBoundingClientRect().top;
    }
    popOver.popoverProps = {
      refElement: this.hostElement,
      placement: "leading-start",
      offsetDistance: 0,
      offsetSkidding,
      popoverWidth: 100
    };
    popOver.addEventListener("arcgisRasterMultidimensionalVariableInfoDismiss", (_evt) => {
      this.closePopover();
    });
    document.body.appendChild(popOver);
    popOver.componentOnReady().then(() => {
      // yield execution to DOM
      // according to Stencil doc, this is fired right after sync execution of componentDidMount, but apparently DOM rendering is not fired yet.
      // calcite-button impl depends on actual dom which in turn requires dom renderer to happen first.
      // https://github.com/Esri/calcite-components/blob/c07dd561d1e78601b3b2f92154d448c36c1c9c06/src/components/button/button.tsx#L222
      // this is probably fixable by Calcite, or turn into some sort of utility function
      requestAnimationFrame(() => popOver.setFocus("dismiss-button"));
    });
    this.popOver = popOver;
  }
  // --------------------------------------------------------------------------
  //
  //  Private methods
  //
  // --------------------------------------------------------------------------
  closePopover() {
    if (this.popOver) {
      document.body.removeChild(this.popOver);
      this.popOver = null;
    }
  }
  async initLayer(layer) {
    if (!layer) {
      return;
    }
    if (!layer.loaded) {
      await layer.load();
    }
    this.multidimensionalInfo = await (0,_multidimensional_279ffd6e_js__WEBPACK_IMPORTED_MODULE_2__.a)(layer, this.showRawSourceInfo);
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "layer": ["watchLayer"]
  }; }
};
ArcgisRasterMultidimensionalInfo.style = arcgisRasterMultidimensionalInfoCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arcgisComponentNotificationsKeys),
/* harmony export */   g: () => (/* binding */ getSingleObjectLocalStorage),
/* harmony export */   l: () => (/* binding */ localStorageKeys),
/* harmony export */   s: () => (/* binding */ setSingleObjectLocalStorage)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
var localStorageKeys;
(function (localStorageKeys) {
  localStorageKeys["ARCGIS_COMPONENT_NOTIFICATIONS"] = "arcgisComponent_notifications";
})(localStorageKeys || (localStorageKeys = {}));
var arcgisComponentNotificationsKeys;
(function (arcgisComponentNotificationsKeys) {
  arcgisComponentNotificationsKeys["FEATURE_REDUCTION_WARNING_DISMISSED"] = "arcgis_feature_reduction_warning_dismissed";
  arcgisComponentNotificationsKeys["POPUP_WARNING_DISMISSED"] = "arcgis_popup_warning_dismissed";
  arcgisComponentNotificationsKeys["INCOMPATIBLE_VECTOR_SYMBOLS_DISMISSED"] = "arcgis_symbol_styler_incompatible_vector_symbols_dismissed";
  arcgisComponentNotificationsKeys["EFFECTS_TIP_DISMISSED"] = "arcgis_effects_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_DEFINITION_DISMISSED"] = "arcgis_layer_view_definition_dismissed";
  arcgisComponentNotificationsKeys["LAYER_OVERRIDE_STATUS_TIP_DISMISSED"] = "arcgis_layer_override_status_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_JOIN_TIP_DISMISSED"] = "arcgis_layer_view_join_tip_dismissed";
  arcgisComponentNotificationsKeys["MULTIDIMENSIONAL_INFO_TIP_DISMISSED"] = "arcgis_multidimensional_info_tip_dismissed";
})(arcgisComponentNotificationsKeys || (arcgisComponentNotificationsKeys = {}));
const getLocalStorage = (localStorageKey) => {
  return localStorage.getItem(localStorageKey);
};
const setLocalStorage = (localStorageKey, value) => {
  localStorage.setItem(localStorageKey, value);
};
const getObjectLocalStorage = (localStorageKey) => {
  return JSON.parse(getLocalStorage(localStorageKey)) || {};
};
const setSingleObjectLocalStorage = (localStorageKey, keyValueObject) => {
  const setLocalStorageVal = getObjectLocalStorage(localStorageKey);
  setLocalStorageVal[keyValueObject.key] = keyValueObject.value;
  setLocalStorage(localStorageKey, JSON.stringify(setLocalStorageVal));
};
const getSingleObjectLocalStorage = (localStorageKey, objectKey) => {
  const getLocalStorageVal = getObjectLocalStorage(localStorageKey);
  if (getLocalStorageVal === null || getLocalStorageVal === void 0 ? void 0 : getLocalStorageVal.hasOwnProperty(objectKey)) {
    return getLocalStorageVal[objectKey];
  }
  else {
    return null;
  }
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-279ffd6e.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/multidimensional-279ffd6e.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getMultidimensionalInfo),
/* harmony export */   b: () => (/* binding */ getDefaultDimensionSliceValue),
/* harmony export */   c: () => (/* binding */ getMultidimensionalDefinition),
/* harmony export */   f: () => (/* binding */ formatDimensionValue),
/* harmony export */   g: () => (/* binding */ getClippedDimensionInfo),
/* harmony export */   i: () => (/* binding */ isTimeDimension),
/* harmony export */   m: () => (/* binding */ minVersionRFTMultidimensionalInfo),
/* harmony export */   u: () => (/* binding */ updateDimensionalDefinition)
/* harmony export */ });
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const minVersionRFTMultidimensionalInfo = 10.9;
function formatTime(value, options) {
  const date = new Date(value);
  const { useFriendlyISOFormat, intl, format } = options;
  if (useFriendlyISOFormat && intl) {
    return intl.formatDate(date, Object.assign(Object.assign({}, intl.convertDateFormatToIntlOptions(format !== null && format !== void 0 ? format : "short-date-long-time")), { timeZone: "UTC" }));
  }
  let isoTimeString = new Date(value).toISOString();
  isoTimeString = isoTimeString.slice(0, isoTimeString.indexOf(".")) + "Z";
  return isoTimeString;
}
function formatMonth(value_base1, intl, format = "long") {
  // using an arbitrary date (the day the code was written) to avoid side effects of setMonth near the end of the month
  // setMonth will move the date to the next month when new month doesn't have current date (e.g. 9/31, 2/30)
  // date = new Date(2002, 9, 31); date.setMonth(8); console.log(date.toLocaleDateString())
  const date = new Date(2022, 9, 10);
  date.setMonth(value_base1 - 1);
  return intl.formatDate(date, { month: format });
}
function formatQuarter(value_base1, intl) {
  const startMonth = formatMonth((value_base1 - 1) * 3 + 1, intl, "short");
  const endMonth = formatMonth(value_base1 * 3, intl, "short");
  return `${startMonth} - ${endMonth}`;
}
function formatDimensionValue(value, dimensionInfo, options = {}) {
  var _a, _b, _c, _d;
  if (value == null) {
    return "";
  }
  const { intl, useRecurringTimeLabel } = options;
  if (useRecurringTimeLabel && intl && !Array.isArray(value)) {
    const intervalUnit = (_a = dimensionInfo.intervalUnit) === null || _a === void 0 ? void 0 : _a.toLowerCase().trim();
    // weekly and daily are not supported yet
    const canUseRecurringTimeLabel = isRecurringTimeDimension(dimensionInfo) && (intervalUnit === "months" || intervalUnit === "quarters");
    if (canUseRecurringTimeLabel) {
      return intervalUnit === "months" ? formatMonth(value, intl) : formatQuarter(value, intl);
    }
  }
  // this is prefered when labeling a slider alike control
  const lastElement = (_b = dimensionInfo.values) === null || _b === void 0 ? void 0 : _b[dimensionInfo.values.length - 1];
  if (options.useStartOrEndForRangedValue && Array.isArray(value) && value.length === 2 && Array.isArray(lastElement)) {
    const isLastElement = value.join("-") === lastElement.join("-");
    value = isLastElement ? value[1] : value[0];
  }
  const isTime = isTimeDimension(dimensionInfo);
  if (!isTime) {
    return Array.isArray(value)
      ? value.map((element) => { var _a; return (_a = intl === null || intl === void 0 ? void 0 : intl.formatNumber(element)) !== null && _a !== void 0 ? _a : String(element); }).join(" - ")
      : (_c = intl === null || intl === void 0 ? void 0 : intl.formatNumber(value)) !== null && _c !== void 0 ? _c : String(value);
  }
  if (options.useFriendlyISOFormat && !options.format) {
    let resolution = (_d = dimensionInfo.intervalUnit) === null || _d === void 0 ? void 0 : _d.toLowerCase().trim();
    let { interval, extent } = dimensionInfo;
    if (resolution === "months") {
      if (interval > 11) {
        resolution = "year";
      }
    }
    else if (resolution === "days") {
      if (interval > 364) {
        resolution = "year";
      }
      else if (interval > 27) {
        resolution = "months";
      }
    }
    else if (resolution === "hours") {
      resolution = "days";
    }
    if (!["years", "months", "days"].includes(resolution) && (extent === null || extent === void 0 ? void 0 : extent.length)) {
      const interval = (extent[1] - extent[0]) / dimensionInfo.values.length;
      const day = 86400000;
      if (interval >= 365 * day) {
        resolution = "years";
      }
      else if (interval >= 28 * day) {
        resolution = "months";
      }
    }
    const format = resolution === "years" ? "year" : resolution === "months" ? "short-month-year" : "short-date";
    options = Object.assign({ format }, options);
  }
  return Array.isArray(value)
    ? value.map((element) => formatTime(element, options)).join(" - ")
    : formatTime(value, options);
}
function getClippedDimensionInfo(dimensionInfo, multidimensionalSubset) {
  var _a;
  const constraint = (_a = multidimensionalSubset === null || multidimensionalSubset === void 0 ? void 0 : multidimensionalSubset.dimensions) === null || _a === void 0 ? void 0 : _a.find(({ name }) => name === dimensionInfo.name);
  if (!(constraint === null || constraint === void 0 ? void 0 : constraint.extent)) {
    return dimensionInfo;
  }
  const extent = [...constraint.extent];
  const values = dimensionInfo.values.filter((value) => {
    // must be contained, intersection is not sufficient
    if (Array.isArray(value)) {
      if (!(0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_0__.i)(extent[1]) || extent[0] === extent[1]) {
        return value[0] === extent[0];
      }
      return value[0] >= extent[0] && value[0] <= extent[1] && value[1] >= extent[0] && value[1] <= extent[1];
    }
    return value >= extent[0] && value <= extent[1];
  });
  // this is a special case, when last slice of a ranged dimension series is used
  if (values.length === 0) {
    const lastValue = dimensionInfo.values[dimensionInfo.values.length - 1];
    if (Array.isArray(lastValue) && lastValue[1] === extent[0]) {
      values.push(lastValue);
    }
  }
  return Object.assign(Object.assign({}, dimensionInfo), { extent, values });
}
function getDefaultDimensionSliceValue(dimensionInfo) {
  var _a;
  const { values, extent, name } = dimensionInfo;
  let value = (_a = values === null || values === void 0 ? void 0 : values[0]) !== null && _a !== void 0 ? _a : extent[0];
  if (name.toLowerCase() === "stdz" &&
    !dimensionInfo.hasRanges &&
    Math.abs(extent[1]) <= Math.abs(extent[0])) {
    if (values === null || values === void 0 ? void 0 : values.length) {
      value = values[values.length - 1];
    }
    else {
      value = extent[1];
    }
  }
  return value;
}
function getMultidimensionalDefinition(layer) {
  var _a, _b;
  return layer.type === "imagery-tile"
    ? layer.multidimensionalDefinition
    : (_b = ((_a = layer.mosaicRule) !== null && _a !== void 0 ? _a : layer._defaultServiceMosaicRule)) === null || _b === void 0 ? void 0 : _b.multidimensionalDefinition;
}
async function getMultidimensionalInfo(layer, useRawSourceInfo) {
  var _a, _b;
  if (layer.type === "imagery-tile") {
    return layer.rasterInfo.multidimensionalInfo;
  }
  const { rasterFunction, version } = layer;
  if (useRawSourceInfo ||
    version <= minVersionRFTMultidimensionalInfo ||
    !rasterFunction ||
    ((_a = rasterFunction.functionName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "none") {
    return layer.serviceRasterInfo.multidimensionalInfo;
  }
  const rasterInfo = (_b = (await layer.generateRasterInfo(layer.rasterFunction))) !== null && _b !== void 0 ? _b : layer.serviceRasterInfo;
  return rasterInfo.multidimensionalInfo;
}
function isTimeDimension(dimensionInfo, ignoreRecuring = false) {
  return dimensionInfo.name === "StdTime" && (ignoreRecuring || !dimensionInfo.recurring);
}
function isRecurringTimeDimension(dimensionInfo) {
  return dimensionInfo.name === "StdTime" && !!dimensionInfo.recurring;
}
function updateDimensionalDefinition(def, dimensionInfo, activeMultidimensionalSubset) {
  dimensionInfo = getClippedDimensionInfo(dimensionInfo, activeMultidimensionalSubset);
  const originalFormattedValue = formatDimensionValue(def.values[0], dimensionInfo);
  const hasOriginalFormattedValue = dimensionInfo.values.some((val) => originalFormattedValue === formatDimensionValue(val, dimensionInfo));
  if (!hasOriginalFormattedValue) {
    // get default slice value when def.values is invalid
    const value = getDefaultDimensionSliceValue(dimensionInfo);
    def.values = [value];
  }
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,