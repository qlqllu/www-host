"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-ffbdb6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-attributes_2.entry.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-attributes_2.entry.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_attributes: () => (/* binding */ ArcgisAttributes),
/* harmony export */   arcgis_attributes_formatting: () => (/* binding */ ArcgisAttributesFormatting)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./previewPopup-05f5d196.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/previewPopup-05f5d196.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */










const CSS = {
  totalSelectedDiv: "total-selected-div",
  fieldIcons: "field-icons"
};

const FieldIcons = ({ fieldType }) => {
  // key: ids
  if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.oid ||
    fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.guid ||
    fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.globalId) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "key" });
  }
  // integer
  else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
    fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
    fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "integer" });
  }
  // number
  else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
    fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
    fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
    fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "number" });
  }
  // string
  else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.string) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "string" });
  }
  // date
  else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.date) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "date-time" });
  }
  else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "calendar" });
  }
  else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "time-zone" });
  }
  else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "clock" });
  }
  // default string
  else {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "string" });
  }
};

const arcgisAttributesCss = ".total-selected-div{padding:5px}.field-icons{padding:0 var(--arcgis-app-cap-spacing);display:flex;align-items:center}";

const ArcgisAttributes = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.attributesUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "attributesUpdated", 7);
    this.arcgisAttributesDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAttributesDismissedChange", 7);
    this.internalAttributesUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalAttributesUpdated", 7);
    this.closeAttributePopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAttributePopovers", 7);
    this.listItems = [];
    this.listItemsNodes = [];
    this.layerFieldsMap = new Map();
    this.arcadeExpMap = new Map();
    this.filterLength = 5;
    this.isPopupOpenForCurrentLayer = false;
    this.debouncedAttributeUpdates = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_6__.d)(() => {
      if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
        this.layer.popupTemplate = this.popupTemplate.clone();
      }
      else if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
        this.layer.featureReduction.popupTemplate = this.popupTemplate.clone();
      }
      this.attributesUpdated.emit();
    }, 1000);
    // rendor methods
    this.calciteListItem = (field) => (
    // field.fieldName is always unique
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { id: field.fieldName, label: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.b)(field, this.arcadeExpMap), description: `{${field.fieldName}}`, value: field.fieldName, metadata: {
        label: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.b)(field, this.arcadeExpMap),
        fieldName: field.fieldName
      }, onClick: () => this.selectionClick(), onKeyDown: (event) => {
        if (event.key === " " || event.key === "Enter") {
          event.preventDefault();
          event.stopPropagation();
          this.selectionClick();
        }
      }, ref: (node) => this.listItemsNodes.push(node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-end", class: CSS.fieldIcons }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(FieldIcons, { fieldType: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.a)(field.fieldName, this.layerFieldsMap, this.arcadeExpMap) }))));
    this.mapView = undefined;
    this.layer = undefined;
    this.portal = undefined;
    this.displayPopup = true;
    this.config = undefined;
    this.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature;
    this.dismissible = false;
    this.hideLayerTitle = false;
    this.calciteFlowProps = false;
    this.reRender = undefined;
    this.totalSelectedFields = undefined;
  }
  // lifecycle methods
  async componentWillLoad() {
    var _a;
    const localeSettings = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = localeSettings[0];
    this.currentLanguage = localeSettings[1];
    this.serviceType = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.layer);
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
      const layerType = "type" in this.layer ? this.layer.type : "sublayer";
      const sourceLayer = this.mapView.popup.visible
        ? (_a = this.mapView.popup.selectedFeature) === null || _a === void 0 ? void 0 : _a.sourceLayer
        : undefined;
      this.isPopupOpenForCurrentLayer =
        layerType === "subtype-sublayer"
          ? (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.subtypeCode) === this.layer.subtypeCode &&
            (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.parent.id) === this.layer.parent.id // TODO any + parent
          : layerType === "sublayer"
            ? (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.id) === this.layer.id &&
              (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.layer.id) === this.layer.layer.id
            : "id" in this.layer && (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.id) === this.layer.id;
      // temp, turn off popupEnabled for MIL
      if (this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImage && !this.layer.popupTemplate) {
        this.layer.popupEnabled = false;
      }
      // generate default if template is empty
      this.popupTemplate = this.layer.popupTemplate
        ? this.layer.popupTemplate.clone()
        : this.layer.createPopupTemplate();
      // generate master field info
      this.popupTemplate.fieldInfos = [
        ...(await (0,_previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.layer, this.popupTemplate))
      ];
    }
    else {
      this.popupTemplate = this.layer.featureReduction.popupTemplate.clone();
    }
  }
  componentDidLoad() {
    this.calciteListNode = this.hostElement.shadowRoot.getElementById("list_Id");
    this.showPreviewPopup(true);
    // MV workflow
    this.setupResizeObserver();
  }
  async componentWillRender() {
    // map for faster access
    this.layerFieldsMap = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.layer);
    this.arcadeExpMap = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.e)(this.popupTemplate);
    this.listItems = [];
    this.popupTemplate.fieldInfos.forEach((field) => {
      var _a;
      // no relationship support for v1
      // imagery layer might have fieldName:undefined ...
      if (((_a = field.fieldName) === null || _a === void 0 ? void 0 : _a.indexOf(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.relationship)) === -1) {
        this.listItems.push(this.calciteListItem(field));
      }
    });
  }
  componentDidUpdate() {
    this.internalAttributesUpdated.emit();
  }
  disconnectedCallback() {
    var _a;
    (_a = this.parentShellObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  // Public Methods
  async done() {
    this.closeAttributePopovers.emit(true);
    this.showPreviewPopup(false);
  }
  async setFocus() {
    var _a, _b;
    if (this.flowItemNode) {
      (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    else {
      (_b = this.calciteListNode) === null || _b === void 0 ? void 0 : _b.setFocus();
    }
  }
  // Events
  arcgisAttributesFormattingUpdatedHandler(event) {
    event.stopPropagation();
    this.popupTemplate = event.detail.clone();
    this.reRender = !this.reRender;
  }
  arcgisAttributesFormattingDismissedHandler(event) {
    event.stopPropagation();
    this.closeAttributePopovers.emit(true);
  }
  async closeAttributePopoversHandler(event) {
    if (this.attributeFormatter) {
      document.body.removeChild(this.attributeFormatter);
      this.attributeFormatter = null;
      // clear selected fields boolean
      if (event.detail) {
        const selectedFields = this.calciteListNode.selectedItems;
        for (const fieldItem of selectedFields.values()) {
          fieldItem.selected = false;
        }
        this.totalSelectedFields = 0;
        // add timeout, otherwise panel takes focus
        // when setting focus on entire list then search box gets focus
        setTimeout(() => this.listItemsNodes[0].setFocus(), 300);
      }
    }
  }
  // update attributes
  internalAttributesUpdatedHandler(event) {
    event.stopPropagation();
    this.debouncedAttributeUpdates();
  }
  calciteChipCloseHandler(event) {
    event.stopPropagation();
    this.closeAttributePopovers.emit(true);
  }
  // private methods and properties
  // open popover
  async selectionClick() {
    // close existing popovers
    this.closeAttributePopovers.emit();
    const selectedFields = [
      ...this.calciteListNode.selectedItems.map((item) => item.value)
    ];
    this.totalSelectedFields = selectedFields.length;
    if (!this.attributeFormatter && selectedFields.length > 0) {
      this.attributeFormatter = document.createElement("arcgis-attributes-formatting");
      this.attributeFormatter.popoverProps = { refElement: this.hostElement, offsetSkidding: 45 };
      this.attributeFormatter.layerDisplayType = this.layerDisplayType;
      this.attributeFormatter.selectedFields = selectedFields;
      this.attributeFormatter.layer = this.layer;
      this.attributeFormatter.popupTemplate = this.popupTemplate.clone();
      document.body.appendChild(this.attributeFormatter);
    }
  }
  showPreviewPopup(show) {
    var _a;
    if (this.displayPopup &&
      this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature &&
      !this.isPopupOpenForCurrentLayer) {
      if (show && this.layer.popupEnabled && this.layer.popupTemplate) {
        this.previewPopupController = new AbortController();
        (0,_previewPopup_05f5d196_js__WEBPACK_IMPORTED_MODULE_3__.p)(this.mapView, this.layer, this.previewPopupController);
      }
      else {
        (_a = this.previewPopupController) === null || _a === void 0 ? void 0 : _a.abort();
        this.mapView.closePopup();
      }
    }
  }
  // if parent is shell panel. MV workflow.
  setupResizeObserver() {
    var _a;
    const parentShellPanel = (_a = this.hostElement) === null || _a === void 0 ? void 0 : _a.parentElement;
    if ((0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_6__.i)(parentShellPanel.collapsed)) {
      this.parentShellObserver = new ResizeObserver(() => {
        if (parentShellPanel.collapsed) {
          this.done();
        }
        else {
          this.showPreviewPopup(true);
        }
      });
      this.parentShellObserver.observe(parentShellPanel);
    }
  }
  displayList() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { id: "list_Id", filterEnabled: this.listItems.length >= this.filterLength ? true : false, filterPlaceholder: this.strings.filterAttributes, selectionMode: "multiple" }, this.totalSelectedFields > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.totalSelectedDiv }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "totalSelectedValue", closable: true }, `${this.totalSelectedFields} ${this.strings.selected}`))) : null, this.listItems));
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { style: this.calciteFlowProps ? {} : { display: "flex", flex: "1 1 auto", overflow: "hidden" } }, this.calciteFlowProps ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, this.displayList())) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { id: "attributes_flow_Id", dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: this.strings.attributesHeading, description: !this.hideLayerTitle ? this.layer.title : undefined, closable: this.dismissible, ref: (node) => (this.flowItemNode = node), onCalciteFlowItemClose: (event) => {
        event.stopPropagation();
        this.done();
        this.arcgisAttributesDismissedChange.emit();
      } }, this.displayList())))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAttributes.style = arcgisAttributesCss;

const dateFormats = [
  "short-date",
  "long-month-day-year",
  "day-short-month-year",
  "long-date",
  "long-month-year",
  "short-month-year",
  "year"
];
const timeFormats = ["short-time", "long-time", "short-time-24", "long-time-24"];
// when time format is "null", showTime not available
const allDatesMap = new Map();
// short-date
allDatesMap.set("short-date", { dateFormat: dateFormats[0], timeFormat: "" });
allDatesMap.set("short-date-short-time", { dateFormat: dateFormats[0], timeFormat: timeFormats[0] });
allDatesMap.set("short-date-long-time", { dateFormat: dateFormats[0], timeFormat: timeFormats[1] });
allDatesMap.set("short-date-short-time-24", { dateFormat: dateFormats[0], timeFormat: timeFormats[2] });
allDatesMap.set("short-date-long-time-24", { dateFormat: dateFormats[0], timeFormat: timeFormats[3] });
// long-month-day-year
allDatesMap.set("long-month-day-year", { dateFormat: dateFormats[1], timeFormat: "" });
allDatesMap.set("long-month-day-year-short-time", { dateFormat: dateFormats[1], timeFormat: timeFormats[0] });
allDatesMap.set("long-month-day-year-long-time", { dateFormat: dateFormats[1], timeFormat: timeFormats[1] });
allDatesMap.set("long-month-day-year-short-time-24", {
  dateFormat: dateFormats[1],
  timeFormat: timeFormats[2]
});
allDatesMap.set("long-month-day-year-long-time-24", { dateFormat: dateFormats[1], timeFormat: timeFormats[3] });
// day-short-month-year
allDatesMap.set("day-short-month-year", { dateFormat: dateFormats[2], timeFormat: "" });
allDatesMap.set("day-short-month-year-short-time", { dateFormat: dateFormats[2], timeFormat: timeFormats[0] });
allDatesMap.set("day-short-month-year-long-time", { dateFormat: dateFormats[2], timeFormat: timeFormats[1] });
allDatesMap.set("day-short-month-year-short-time-24", {
  dateFormat: dateFormats[2],
  timeFormat: timeFormats[2]
});
allDatesMap.set("day-short-month-year-long-time-24", {
  dateFormat: dateFormats[2],
  timeFormat: timeFormats[3]
});
// long-date
allDatesMap.set("long-date", { dateFormat: dateFormats[3], timeFormat: "" });
allDatesMap.set("long-date-short-time", { dateFormat: dateFormats[3], timeFormat: timeFormats[0] });
allDatesMap.set("long-date-long-time", { dateFormat: dateFormats[3], timeFormat: timeFormats[1] });
allDatesMap.set("long-date-short-time-24", { dateFormat: dateFormats[3], timeFormat: timeFormats[2] });
allDatesMap.set("long-date-long-time-24", { dateFormat: dateFormats[3], timeFormat: timeFormats[3] });
// long-month-year
allDatesMap.set("long-month-year", { dateFormat: dateFormats[4], timeFormat: null });
// short-month-year
allDatesMap.set("short-month-year", { dateFormat: dateFormats[5], timeFormat: null });
// year
allDatesMap.set("year", { dateFormat: dateFormats[6], timeFormat: null });
// default
allDatesMap.set("default", { dateFormat: dateFormats[0], timeFormat: timeFormats[2] });

const arcgisAttributesFormattingCss = ".formatting-div{padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing);max-height:60vh}.single-line-label-switch-section{display:flex;margin:0;padding:var(--arcgis-app-cap-spacing-half) 0}.single-line-label-switch-label{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.single-line-label-switch-switch{flex:0 0 0%;justify-self:flex-end;margin:0}.single-line-label-switch-switch input{display:none}";

const ArcgisAttributesFormatting = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAttributesFormattingDismissed = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAttributesFormattingDismissed", 7);
    this.arcgisAttributesFormattingUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAttributesFormattingUpdated", 7);
    this.displayDate = new Date("December 31, 1969 18:00:00");
    this.layerFieldsMap = new Map();
    this.arcadeExpMap = new Map();
    this.selectedFieldInfoMap = new Map();
    this.hasCommonDataTypes = true;
    this.thousandSeperator = () => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { class: "single-line-label-switch-section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "single-line-label-switch-label" }, this.strings.show1000Seperator), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { id: "thousandSeperatorSwitch_Id", scale: "s", class: "single-line-label-switch-switch", checked: this.firstSelected.format.digitSeparator ? true : false })));
    this.significantDigits = () => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.significantDigits, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: this.strings.significantDigits, onCalciteSelectChange: (event) => {
        const select = event.target;
        this.firstSelected.format.places = Number(select.selectedOption.value) || 0;
        this.saveFieldInfo();
      } }, [0, 1, 2, 3, 4, 5, 6, 7, 8].map((x) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: x.toString(), selected: this.firstSelected.format.places === x ? true : false }, `${x} ${this.strings.decimalPlaces}`)))))));
    this.dateFormat = (selectedDateFormat) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.dateFormat, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { id: "dateFormatSelect_Id", label: this.strings.dateFormat, onCalciteSelectChange: () => this.changeDateFormat() }, dateFormats.map((currentDateFormat) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: currentDateFormat, selected: selectedDateFormat === currentDateFormat ? true : false }, this.intl.formatDate(this.displayDate, this.intl.convertDateFormatToIntlOptions(currentDateFormat)))))))));
    this.showTime = (selectedTimeFormat) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { class: "single-line-label-switch-section", id: "showTime_Id" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "single-line-label-switch-label" }, this.strings.showTime), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { id: "showTimeSwitch_Id", scale: "s", class: "single-line-label-switch-switch", checked: selectedTimeFormat ? true : false })));
    this.timeFormat = (selectedTimeFormat) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { id: "timeFormat_Id" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.timeFormat, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { id: "timeFormatSelect_Id", label: this.strings.timeFormat, onCalciteSelectChange: () => this.changeDateFormat() }, timeFormats.map((currentTimeFormat) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: currentTimeFormat, selected: selectedTimeFormat === currentTimeFormat ? true : false }, this.getTimeFormatString(currentTimeFormat))))))));
    this.layer = undefined;
    this.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.l.feature;
    this.selectedFields = undefined;
    this.popoverProps = undefined;
    this.popupTemplate = undefined;
    this.isOpen = false;
  }
  // lifecycle methods
  async componentWillLoad() {
    const localeSettings = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = localeSettings[0];
    this.currentLanguage = localeSettings[1];
    const [tempIntl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_7__.l)(["esri/intl"]);
    this.intl = tempIntl;
    // map for faster access
    this.layerFieldsMap = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.layer);
    this.arcadeExpMap = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.e)(this.popupTemplate);
    // setup selectedFieldInfoMap with all needed info
    this.selectedFields.forEach((fieldName) => {
      this.popupTemplate.fieldInfos.find((templateFieldInfo, idx) => {
        if (templateFieldInfo.fieldName === fieldName) {
          this.selectedFieldInfoMap.set(fieldName, {
            index: idx,
            fieldType: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.a)(fieldName, this.layerFieldsMap, this.arcadeExpMap),
            fieldInfo: templateFieldInfo
          });
        }
      });
    });
    // first selected field to drive the options displayed
    this.firstSelected = this.selectedFieldInfoMap.get(this.selectedFields[0]).fieldInfo;
    this.firstSelectedFieldType = this.selectedFieldInfoMap.get(this.selectedFields[0]).fieldType;
    this.hasCommonDataTypes = this.commonDataTypesCheck(this.firstSelectedFieldType);
    // setup default only for 1st. Rest will be copied on save
    if (!this.firstSelected.format && this.hasCommonDataTypes) {
      await this.setupDefaultFormat(this.firstSelected, this.firstSelectedFieldType);
    }
  }
  componentDidLoad() {
    this.hostElement.shadowRoot.getElementById("managePopover_Id")["reposition"]();
    if (this.aliasInput) {
      this.aliasInput.focus();
    }
    this.setupDateTimeDisplay();
    this.isOpen = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => {
      this.panelElement.setFocus();
    }), 300);
  }
  // Public Methods
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  async setFocus() {
    setTimeout(() => this.panelElement.setFocus(), 100);
  }
  // Events
  calciteSwitchChangeHandler(event) {
    event.stopPropagation();
    if (this.firstSelected.format) {
      if (this.firstSelectedFieldType === "date" ||
        this.firstSelectedFieldType === "timestamp-offset") {
        this.changeDateFormat();
      }
      // numbers
      else {
        this.firstSelected.format.digitSeparator = this.hostElement.shadowRoot.getElementById("thousandSeperatorSwitch_Id").checked
          ? true
          : false;
        this.saveFieldInfo();
      }
    }
  }
  // private methods and properties
  commonDataTypesCheck(fieldType) {
    for (let x = 1; x < this.selectedFields.length; x++) {
      const tempFieldType = this.selectedFieldInfoMap.get(this.selectedFields[x]).fieldType;
      if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
        fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
        fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
        if ([
          _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.integer,
          _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger,
          _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger
        ].indexOf(tempFieldType) === -1) {
          return false;
        }
      }
      else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
        fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
        fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
        fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
        if ([
          _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.single,
          _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.double,
          _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.long,
          _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.number
        ].indexOf(tempFieldType) === -1) {
          return false;
        }
      }
      else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.date ||
        fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) {
        if ([_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.date, _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset].indexOf(tempFieldType) === -1) {
          return false;
        }
      }
      else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly) {
        if ([_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly].indexOf(tempFieldType) === -1) {
          return false;
        }
      }
      else if (fieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly) {
        if ([_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly].indexOf(tempFieldType) === -1) {
          return false;
        }
      }
    }
    return true;
  }
  async setupDefaultFormat(currentField, currentFieldType) {
    const [FieldInfoFormat] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_7__.l)([
      "esri/popup/support/FieldInfoFormat"
    ]);
    if (currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
      currentField.format = new FieldInfoFormat({ digitSeparator: false });
      this.saveFieldInfo();
    }
    else if (currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
      currentField.format = new FieldInfoFormat({
        digitSeparator: false,
        places: 2
      });
      this.saveFieldInfo();
    }
    // date
    else if ((currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.date ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly ||
      currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) &&
      this.dateFormattingAvailable()) {
      if (currentFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly) {
        currentField.format = new FieldInfoFormat({
          dateFormat: "short-date"
        });
      }
      else {
        currentField.format = new FieldInfoFormat({
          dateFormat: "short-date-short-time" // used to be "default"
        });
      }
      this.saveFieldInfo();
    }
  }
  setupDateTimeDisplay() {
    var _a;
    if ((this.firstSelectedFieldType === "date" ||
      this.firstSelectedFieldType === "time-only" ||
      this.firstSelectedFieldType === "timestamp-offset") &&
      ((_a = this.firstSelected.format) === null || _a === void 0 ? void 0 : _a.dateFormat) &&
      this.hasCommonDataTypes) {
      const showTimeId = this.hostElement.shadowRoot.getElementById("showTime_Id");
      const showTimeSwitchId = this.hostElement.shadowRoot.getElementById("showTimeSwitch_Id");
      const timeFormatId = this.hostElement.shadowRoot.getElementById("timeFormat_Id");
      const tempMap = allDatesMap.get(this.firstSelected.format.dateFormat);
      if (this.firstSelectedFieldType === "date" ||
        this.firstSelectedFieldType === "timestamp-offset") {
        if (tempMap.timeFormat === "") {
          showTimeId.style.display = "flex";
          showTimeSwitchId.checked = false;
          timeFormatId.style.display = "none";
        }
        else if (tempMap.timeFormat === null) {
          showTimeId.style.display = "none";
          showTimeSwitchId.checked = false;
          timeFormatId.style.display = "none";
        }
        else {
          showTimeId.style.display = "flex";
          showTimeSwitchId.checked = true;
          timeFormatId.style.display = "block";
        }
      }
      else if (this.firstSelectedFieldType === "time-only") {
        timeFormatId.style.display = "block";
      }
    }
  }
  getTimeFormatString(currentTimeFormat) {
    if (currentTimeFormat === timeFormats[0]) {
      return this.strings.shortTime;
    }
    else if (currentTimeFormat === timeFormats[1]) {
      return this.strings.longTime;
    }
    else if (currentTimeFormat === timeFormats[2]) {
      return this.strings.shortTime24;
    }
    else if (currentTimeFormat === timeFormats[3]) {
      return this.strings.longTime24;
    }
    else {
      return this.strings.shortTime24;
    }
  }
  changeAlias() {
    // default field name
    if (!(0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.i)(this.aliasInput.value)) {
      this.aliasInput.value = this.firstSelected.fieldName;
    }
    if (this.arcadeExpMap.has(this.firstSelected.fieldName)) {
      this.arcadeExpMap.get(this.firstSelected.fieldName).title = this.aliasInput.value;
    }
    else {
      this.firstSelected.label = this.aliasInput.value;
    }
    this.saveFieldInfo();
  }
  changeDateFormat() {
    const tempSelectDate = this.hostElement.shadowRoot.getElementById("dateFormatSelect_Id");
    const tempSelectTime = this.hostElement.shadowRoot.getElementById("timeFormatSelect_Id");
    const showTimeSwitchId = this.hostElement.shadowRoot.getElementById("showTimeSwitch_Id");
    if (this.firstSelectedFieldType === "date" ||
      this.firstSelectedFieldType === "timestamp-offset") {
      const tempDateMap = allDatesMap.get(tempSelectDate.selectedOption.value);
      if (tempDateMap.timeFormat === "") {
        this.firstSelected.format.dateFormat = showTimeSwitchId.checked
          ? `${tempSelectDate.selectedOption.value}-${tempSelectTime.selectedOption.value}`
          : `${tempSelectDate.selectedOption.value}`;
      }
      else if (tempDateMap.timeFormat === null) {
        this.firstSelected.format.dateFormat = `${tempSelectDate.selectedOption.value}`;
      }
    }
    else if (this.firstSelectedFieldType === "date-only") {
      this.firstSelected.format.dateFormat = `${tempSelectDate.selectedOption.value}`;
    }
    else if (this.firstSelectedFieldType === "time-only") {
      this.firstSelected.format.dateFormat = `short-date-${tempSelectTime.selectedOption.value}`;
    }
    this.saveFieldInfo();
    this.setupDateTimeDisplay();
    this.hostElement.shadowRoot.getElementById("managePopover_Id")["reposition"]();
  }
  saveFieldInfo() {
    var _a;
    // hasCommonDataTypes always true when something can be changed
    if (this.hasCommonDataTypes) {
      this.selectedFieldInfoMap.forEach((value) => {
        if (value.fieldInfo.fieldName === this.firstSelected.fieldName) {
          value.fieldInfo = this.firstSelected.clone();
        }
        else {
          value.fieldInfo.format = this.firstSelected.format.clone();
        }
      });
      // for arcade, also clone to popupTemplate.expressionInfos(for title)
      // only valid for title update use case
      if (this.selectedFields.length === 1 && this.arcadeExpMap.has(this.firstSelected.fieldName)) {
        if ((_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.expressionInfos) {
          this.popupTemplate.expressionInfos.find((arcadeField, index) => {
            if (`${_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.f.expression}${arcadeField.name}` ===
              this.firstSelected.fieldName) {
              return (this.popupTemplate.expressionInfos[index] = this.arcadeExpMap
                .get(this.firstSelected.fieldName)
                .clone());
            }
          });
        }
      }
      // clone/change in fieldinfo
      this.selectedFieldInfoMap.forEach((value) => {
        this.popupTemplate.fieldInfos[value.index] = value.fieldInfo.clone();
      });
      // clone/change in content
      if (Array.isArray(this.popupTemplate.content)) {
        this.popupTemplate.content.forEach((content) => {
          if (content.type === "fields" && content.fieldInfos) {
            content.fieldInfos.forEach((contentField, index) => {
              if (this.selectedFieldInfoMap.has(contentField.fieldName)) {
                const tempField = this.selectedFieldInfoMap
                  .get(contentField.fieldName)
                  .fieldInfo.clone();
                tempField.visible = true;
                content.fieldInfos[index] = tempField;
              }
            });
          }
        });
      }
      this.arcgisAttributesFormattingUpdated.emit(this.popupTemplate.clone());
    }
  }
  // rendor methods
  formattingOptions() {
    if (this.firstSelected.format) {
      if (this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
        return this.thousandSeperator();
      }
      // number
      else if (this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.significantDigits(), this.thousandSeperator()));
      }
      // date
      else if ((this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.date ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly ||
        this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) &&
        this.dateFormattingAvailable()) {
        const tempMap = allDatesMap.has(this.firstSelected.format.dateFormat)
          ? allDatesMap.get(this.firstSelected.format.dateFormat)
          : this.firstSelectedFieldType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly
            ? allDatesMap.get("short-date")
            : allDatesMap.get("short-date-short-time"); // used to be "default"
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.firstSelectedFieldType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly &&
          this.dateFormat(tempMap.dateFormat), this.firstSelectedFieldType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly &&
          this.firstSelectedFieldType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly &&
          this.showTime(tempMap.timeFormat), this.firstSelectedFieldType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly &&
          this.timeFormat(tempMap.timeFormat)));
      }
      // default string
      else {
        return null;
      }
    }
    else {
      return null;
    }
  }
  dateFormattingAvailable() {
    return (!((0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.layer) === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_2__.s.scene) ||
      this.layer.associatedLayer != null);
  }
  render() {
    const doneBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", scale: "m", slot: "footer", width: "full", onClick: () => this.arcgisAttributesFormattingDismissed.emit("done") }, this.strings.done));
    const aliasDiv = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.displayName, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", ref: (element) => {
        this.aliasInput = element;
      }, value: this.arcadeExpMap.has(this.firstSelected.fieldName)
        ? this.arcadeExpMap.get(this.firstSelected.fieldName).title
        : this.firstSelected.label, onCalciteInputInput: () => this.changeAlias() })));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement), id: "managePopover_Id", placement: this.popoverProps.placement || "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: this.popoverProps.refElement, offsetDistance: this.popoverProps.offsetDistance || 0, offsetSkidding: this.popoverProps.offsetSkidding || 0, label: "", style: {
        zIndex: "100"
      }, ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (el) => (this.panelElement = el), closable: true, style: {
        width: `${this.popoverProps.popoverWidth ||
          this.popoverProps.refElement.getBoundingClientRect().width}px`
      }, onCalcitePanelClose: () => this.arcgisAttributesFormattingDismissed.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, this.strings.formatting), doneBtn, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "formatting-div" }, this.selectedFields.length === 1 ? (aliasDiv) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", null, `${this.strings.multipleSelection} (${this.selectedFields.length})`)), this.hasCommonDataTypes ? (this.formattingOptions()) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", null, this.strings.selectCommon)))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAttributesFormatting.style = arcgisAttributesFormattingCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWZmYmRiNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQ3ZDO0FBQ3FFO0FBQzlDO0FBQ3FHO0FBQ2xJO0FBQ1M7QUFDWjtBQUNsQzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLFdBQVc7QUFDakM7QUFDQSxvQkFBb0IsdURBQWM7QUFDbEMsa0JBQWtCLHVEQUFjO0FBQ2hDLGtCQUFrQix1REFBYztBQUNoQyxXQUFXLHFEQUFDLG1CQUFtQix5QkFBeUI7QUFDeEQ7QUFDQTtBQUNBLHlCQUF5Qix1REFBYztBQUN2QyxrQkFBa0IsdURBQWM7QUFDaEMsa0JBQWtCLHVEQUFjO0FBQ2hDLFdBQVcscURBQUMsbUJBQW1CLDZCQUE2QjtBQUM1RDtBQUNBO0FBQ0EseUJBQXlCLHVEQUFjO0FBQ3ZDLGtCQUFrQix1REFBYztBQUNoQyxrQkFBa0IsdURBQWM7QUFDaEMsa0JBQWtCLHVEQUFjO0FBQ2hDLFdBQVcscURBQUMsbUJBQW1CLDRCQUE0QjtBQUMzRDtBQUNBO0FBQ0EseUJBQXlCLHVEQUFjO0FBQ3ZDLFdBQVcscURBQUMsbUJBQW1CLDRCQUE0QjtBQUMzRDtBQUNBO0FBQ0EseUJBQXlCLHVEQUFjO0FBQ3ZDLFdBQVcscURBQUMsbUJBQW1CLCtCQUErQjtBQUM5RDtBQUNBLHlCQUF5Qix1REFBYztBQUN2QyxXQUFXLHFEQUFDLG1CQUFtQiw4QkFBOEI7QUFDN0Q7QUFDQSx5QkFBeUIsdURBQWM7QUFDdkMsV0FBVyxxREFBQyxtQkFBbUIsK0JBQStCO0FBQzlEO0FBQ0EseUJBQXlCLHVEQUFjO0FBQ3ZDLFdBQVcscURBQUMsbUJBQW1CLDJCQUEyQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFEQUFDLG1CQUFtQiw0QkFBNEI7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LDhEQUE4RCxxREFBQztBQUNwWTtBQUNBLHNCQUFzQixPQUFPLHFEQUFVO0FBQ3ZDO0FBQ0E7O0FBRTZHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vYXJjZ2lzLWF0dHJpYnV0ZXNfMi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGgsIHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgYyBhcyBjcmVhdGVFdmVudCwgSCBhcyBIb3N0LCBkIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LTkyZWJiMzk2LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyB9IGZyb20gJy4vbG9jYWxlLTEzZTAwYTc1LmpzJztcbmltcG9ydCB7IGEgYXMgZmllbGRUeXBlc0VudW0sIGwgYXMgbGF5ZXJEaXNwbGF5VHlwZUVudW0sIHMgYXMgc2VydmljZVR5cGVFbnVtLCBmIGFzIGZpZWxkSW5mb1ByZWZpeEVudW0gfSBmcm9tICcuL2NvbW1vbkVudW1zLWY5OGEzMjNjLmpzJztcbmltcG9ydCB7IGcgYXMgZ2VuZXJhdGVNYXN0ZXJGaWVsZEluZm8sIHAgYXMgcHJldmlld1BvcHVwIH0gZnJvbSAnLi9wcmV2aWV3UG9wdXAtMDVmNWQxOTYuanMnO1xuaW1wb3J0IHsgYSBhcyBnZXRGaWVsZFR5cGUsIGIgYXMgZ2V0RmllbGREaXNwbGF5TmFtZSwgYyBhcyBnZXRTZXJ2aWNlVHlwZSwgZCBhcyBnZW5lcmF0ZUxheWVyRmllbGRzTWFwLCBlIGFzIGdlbmVyYXRlQXJjYWRlRXhwcmVzc2lvbk1hcCwgaSBhcyBpc0RlZmluZWQkMSB9IGZyb20gJy4vY29tbW9uRnVuY3Rpb25zLTUyNjJiMDk0LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0RWxlbWVudERpciB9IGZyb20gJy4vbGFuZ3VhZ2VVdGlsLTIyMjU4YzkwLmpzJztcbmltcG9ydCB7IGQgYXMgZGVib3VuY2UsIGkgYXMgaXNEZWZpbmVkIH0gZnJvbSAnLi9mdW5jdGlvbmFsLWM4MmY1YWI5LmpzJztcbmltcG9ydCB7IGwgYXMgbG9hZE1vZHVsZXMgfSBmcm9tICcuL2xvYWRNb2R1bGVzLWFhZjMwYmQ2LmpzJztcbmltcG9ydCAnLi9kb20tMTNmNWIwMGMuanMnO1xuXG5jb25zdCBDU1MgPSB7XG4gIHRvdGFsU2VsZWN0ZWREaXY6IFwidG90YWwtc2VsZWN0ZWQtZGl2XCIsXG4gIGZpZWxkSWNvbnM6IFwiZmllbGQtaWNvbnNcIlxufTtcblxuY29uc3QgRmllbGRJY29ucyA9ICh7IGZpZWxkVHlwZSB9KSA9PiB7XG4gIC8vIGtleTogaWRzXG4gIGlmIChmaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLm9pZCB8fFxuICAgIGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZ3VpZCB8fFxuICAgIGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZ2xvYmFsSWQpIHtcbiAgICByZXR1cm4gaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogXCJrZXlcIiB9KTtcbiAgfVxuICAvLyBpbnRlZ2VyXG4gIGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uaW50ZWdlciB8fFxuICAgIGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uc21hbGxJbnRlZ2VyIHx8XG4gICAgZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5iaWdJbnRlZ2VyKSB7XG4gICAgcmV0dXJuIGgoXCJjYWxjaXRlLWljb25cIiwgeyBzY2FsZTogXCJzXCIsIGljb246IFwiaW50ZWdlclwiIH0pO1xuICB9XG4gIC8vIG51bWJlclxuICBlbHNlIGlmIChmaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLnNpbmdsZSB8fFxuICAgIGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZG91YmxlIHx8XG4gICAgZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5sb25nIHx8XG4gICAgZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5udW1iZXIpIHtcbiAgICByZXR1cm4gaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogXCJudW1iZXJcIiB9KTtcbiAgfVxuICAvLyBzdHJpbmdcbiAgZWxzZSBpZiAoZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5zdHJpbmcpIHtcbiAgICByZXR1cm4gaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogXCJzdHJpbmdcIiB9KTtcbiAgfVxuICAvLyBkYXRlXG4gIGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZGF0ZSkge1xuICAgIHJldHVybiBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBcImRhdGUtdGltZVwiIH0pO1xuICB9XG4gIGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZGF0ZU9ubHkpIHtcbiAgICByZXR1cm4gaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogXCJjYWxlbmRhclwiIH0pO1xuICB9XG4gIGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0udGltZXN0YW1wT2Zmc2V0KSB7XG4gICAgcmV0dXJuIGgoXCJjYWxjaXRlLWljb25cIiwgeyBzY2FsZTogXCJzXCIsIGljb246IFwidGltZS16b25lXCIgfSk7XG4gIH1cbiAgZWxzZSBpZiAoZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS50aW1lT25seSkge1xuICAgIHJldHVybiBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBcImNsb2NrXCIgfSk7XG4gIH1cbiAgLy8gZGVmYXVsdCBzdHJpbmdcbiAgZWxzZSB7XG4gICAgcmV0dXJuIGgoXCJjYWxjaXRlLWljb25cIiwgeyBzY2FsZTogXCJzXCIsIGljb246IFwic3RyaW5nXCIgfSk7XG4gIH1cbn07XG5cbmNvbnN0IGFyY2dpc0F0dHJpYnV0ZXNDc3MgPSBcIi50b3RhbC1zZWxlY3RlZC1kaXZ7cGFkZGluZzo1cHh9LmZpZWxkLWljb25ze3BhZGRpbmc6MCB2YXIoLS1hcmNnaXMtYXBwLWNhcC1zcGFjaW5nKTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyfVwiO1xuXG5jb25zdCBBcmNnaXNBdHRyaWJ1dGVzID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmF0dHJpYnV0ZXNVcGRhdGVkID0gY3JlYXRlRXZlbnQodGhpcywgXCJhdHRyaWJ1dGVzVXBkYXRlZFwiLCA3KTtcbiAgICB0aGlzLmFyY2dpc0F0dHJpYnV0ZXNEaXNtaXNzZWRDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0F0dHJpYnV0ZXNEaXNtaXNzZWRDaGFuZ2VcIiwgNyk7XG4gICAgdGhpcy5pbnRlcm5hbEF0dHJpYnV0ZXNVcGRhdGVkID0gY3JlYXRlRXZlbnQodGhpcywgXCJpbnRlcm5hbEF0dHJpYnV0ZXNVcGRhdGVkXCIsIDcpO1xuICAgIHRoaXMuY2xvc2VBdHRyaWJ1dGVQb3BvdmVycyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2xvc2VBdHRyaWJ1dGVQb3BvdmVyc1wiLCA3KTtcbiAgICB0aGlzLmxpc3RJdGVtcyA9IFtdO1xuICAgIHRoaXMubGlzdEl0ZW1zTm9kZXMgPSBbXTtcbiAgICB0aGlzLmxheWVyRmllbGRzTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuYXJjYWRlRXhwTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuZmlsdGVyTGVuZ3RoID0gNTtcbiAgICB0aGlzLmlzUG9wdXBPcGVuRm9yQ3VycmVudExheWVyID0gZmFsc2U7XG4gICAgdGhpcy5kZWJvdW5jZWRBdHRyaWJ1dGVVcGRhdGVzID0gZGVib3VuY2UoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMubGF5ZXJEaXNwbGF5VHlwZSA9PT0gbGF5ZXJEaXNwbGF5VHlwZUVudW0uZmVhdHVyZSkge1xuICAgICAgICB0aGlzLmxheWVyLnBvcHVwVGVtcGxhdGUgPSB0aGlzLnBvcHVwVGVtcGxhdGUuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMubGF5ZXJEaXNwbGF5VHlwZSA9PT0gbGF5ZXJEaXNwbGF5VHlwZUVudW0uY2x1c3Rlcikge1xuICAgICAgICB0aGlzLmxheWVyLmZlYXR1cmVSZWR1Y3Rpb24ucG9wdXBUZW1wbGF0ZSA9IHRoaXMucG9wdXBUZW1wbGF0ZS5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5hdHRyaWJ1dGVzVXBkYXRlZC5lbWl0KCk7XG4gICAgfSwgMTAwMCk7XG4gICAgLy8gcmVuZG9yIG1ldGhvZHNcbiAgICB0aGlzLmNhbGNpdGVMaXN0SXRlbSA9IChmaWVsZCkgPT4gKFxuICAgIC8vIGZpZWxkLmZpZWxkTmFtZSBpcyBhbHdheXMgdW5pcXVlXG4gICAgaChcImNhbGNpdGUtbGlzdC1pdGVtXCIsIHsgaWQ6IGZpZWxkLmZpZWxkTmFtZSwgbGFiZWw6IGdldEZpZWxkRGlzcGxheU5hbWUoZmllbGQsIHRoaXMuYXJjYWRlRXhwTWFwKSwgZGVzY3JpcHRpb246IGB7JHtmaWVsZC5maWVsZE5hbWV9fWAsIHZhbHVlOiBmaWVsZC5maWVsZE5hbWUsIG1ldGFkYXRhOiB7XG4gICAgICAgIGxhYmVsOiBnZXRGaWVsZERpc3BsYXlOYW1lKGZpZWxkLCB0aGlzLmFyY2FkZUV4cE1hcCksXG4gICAgICAgIGZpZWxkTmFtZTogZmllbGQuZmllbGROYW1lXG4gICAgICB9LCBvbkNsaWNrOiAoKSA9PiB0aGlzLnNlbGVjdGlvbkNsaWNrKCksIG9uS2V5RG93bjogKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiIFwiIHx8IGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbkNsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJlZjogKG5vZGUpID0+IHRoaXMubGlzdEl0ZW1zTm9kZXMucHVzaChub2RlKSB9LCBoKFwiZGl2XCIsIHsgc2xvdDogXCJhY3Rpb25zLWVuZFwiLCBjbGFzczogQ1NTLmZpZWxkSWNvbnMgfSwgaChGaWVsZEljb25zLCB7IGZpZWxkVHlwZTogZ2V0RmllbGRUeXBlKGZpZWxkLmZpZWxkTmFtZSwgdGhpcy5sYXllckZpZWxkc01hcCwgdGhpcy5hcmNhZGVFeHBNYXApIH0pKSkpO1xuICAgIHRoaXMubWFwVmlldyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxheWVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucG9ydGFsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGlzcGxheVBvcHVwID0gdHJ1ZTtcbiAgICB0aGlzLmNvbmZpZyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxheWVyRGlzcGxheVR5cGUgPSBsYXllckRpc3BsYXlUeXBlRW51bS5mZWF0dXJlO1xuICAgIHRoaXMuZGlzbWlzc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLmhpZGVMYXllclRpdGxlID0gZmFsc2U7XG4gICAgdGhpcy5jYWxjaXRlRmxvd1Byb3BzID0gZmFsc2U7XG4gICAgdGhpcy5yZVJlbmRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRvdGFsU2VsZWN0ZWRGaWVsZHMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgLy8gbGlmZWN5Y2xlIG1ldGhvZHNcbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGxvY2FsZVNldHRpbmdzID0gYXdhaXQgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICB0aGlzLnN0cmluZ3MgPSBsb2NhbGVTZXR0aW5nc1swXTtcbiAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IGxvY2FsZVNldHRpbmdzWzFdO1xuICAgIHRoaXMuc2VydmljZVR5cGUgPSBnZXRTZXJ2aWNlVHlwZSh0aGlzLmxheWVyKTtcbiAgICBpZiAodGhpcy5sYXllckRpc3BsYXlUeXBlID09PSBsYXllckRpc3BsYXlUeXBlRW51bS5mZWF0dXJlKSB7XG4gICAgICBjb25zdCBsYXllclR5cGUgPSBcInR5cGVcIiBpbiB0aGlzLmxheWVyID8gdGhpcy5sYXllci50eXBlIDogXCJzdWJsYXllclwiO1xuICAgICAgY29uc3Qgc291cmNlTGF5ZXIgPSB0aGlzLm1hcFZpZXcucG9wdXAudmlzaWJsZVxuICAgICAgICA/IChfYSA9IHRoaXMubWFwVmlldy5wb3B1cC5zZWxlY3RlZEZlYXR1cmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zb3VyY2VMYXllclxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuaXNQb3B1cE9wZW5Gb3JDdXJyZW50TGF5ZXIgPVxuICAgICAgICBsYXllclR5cGUgPT09IFwic3VidHlwZS1zdWJsYXllclwiXG4gICAgICAgICAgPyAoc291cmNlTGF5ZXIgPT09IG51bGwgfHwgc291cmNlTGF5ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZUxheWVyLnN1YnR5cGVDb2RlKSA9PT0gdGhpcy5sYXllci5zdWJ0eXBlQ29kZSAmJlxuICAgICAgICAgICAgKHNvdXJjZUxheWVyID09PSBudWxsIHx8IHNvdXJjZUxheWVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VMYXllci5wYXJlbnQuaWQpID09PSB0aGlzLmxheWVyLnBhcmVudC5pZCAvLyBUT0RPIGFueSArIHBhcmVudFxuICAgICAgICAgIDogbGF5ZXJUeXBlID09PSBcInN1YmxheWVyXCJcbiAgICAgICAgICAgID8gKHNvdXJjZUxheWVyID09PSBudWxsIHx8IHNvdXJjZUxheWVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VMYXllci5pZCkgPT09IHRoaXMubGF5ZXIuaWQgJiZcbiAgICAgICAgICAgICAgKHNvdXJjZUxheWVyID09PSBudWxsIHx8IHNvdXJjZUxheWVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VMYXllci5sYXllci5pZCkgPT09IHRoaXMubGF5ZXIubGF5ZXIuaWRcbiAgICAgICAgICAgIDogXCJpZFwiIGluIHRoaXMubGF5ZXIgJiYgKHNvdXJjZUxheWVyID09PSBudWxsIHx8IHNvdXJjZUxheWVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VMYXllci5pZCkgPT09IHRoaXMubGF5ZXIuaWQ7XG4gICAgICAvLyB0ZW1wLCB0dXJuIG9mZiBwb3B1cEVuYWJsZWQgZm9yIE1JTFxuICAgICAgaWYgKHRoaXMuc2VydmljZVR5cGUgPT09IHNlcnZpY2VUeXBlRW51bS5tYXBJbWFnZSAmJiAhdGhpcy5sYXllci5wb3B1cFRlbXBsYXRlKSB7XG4gICAgICAgIHRoaXMubGF5ZXIucG9wdXBFbmFibGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBnZW5lcmF0ZSBkZWZhdWx0IGlmIHRlbXBsYXRlIGlzIGVtcHR5XG4gICAgICB0aGlzLnBvcHVwVGVtcGxhdGUgPSB0aGlzLmxheWVyLnBvcHVwVGVtcGxhdGVcbiAgICAgICAgPyB0aGlzLmxheWVyLnBvcHVwVGVtcGxhdGUuY2xvbmUoKVxuICAgICAgICA6IHRoaXMubGF5ZXIuY3JlYXRlUG9wdXBUZW1wbGF0ZSgpO1xuICAgICAgLy8gZ2VuZXJhdGUgbWFzdGVyIGZpZWxkIGluZm9cbiAgICAgIHRoaXMucG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zID0gW1xuICAgICAgICAuLi4oYXdhaXQgZ2VuZXJhdGVNYXN0ZXJGaWVsZEluZm8odGhpcy5sYXllciwgdGhpcy5wb3B1cFRlbXBsYXRlKSlcbiAgICAgIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5wb3B1cFRlbXBsYXRlID0gdGhpcy5sYXllci5mZWF0dXJlUmVkdWN0aW9uLnBvcHVwVGVtcGxhdGUuY2xvbmUoKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLmNhbGNpdGVMaXN0Tm9kZSA9IHRoaXMuaG9zdEVsZW1lbnQuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcImxpc3RfSWRcIik7XG4gICAgdGhpcy5zaG93UHJldmlld1BvcHVwKHRydWUpO1xuICAgIC8vIE1WIHdvcmtmbG93XG4gICAgdGhpcy5zZXR1cFJlc2l6ZU9ic2VydmVyKCk7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50V2lsbFJlbmRlcigpIHtcbiAgICAvLyBtYXAgZm9yIGZhc3RlciBhY2Nlc3NcbiAgICB0aGlzLmxheWVyRmllbGRzTWFwID0gYXdhaXQgZ2VuZXJhdGVMYXllckZpZWxkc01hcCh0aGlzLmxheWVyKTtcbiAgICB0aGlzLmFyY2FkZUV4cE1hcCA9IGdlbmVyYXRlQXJjYWRlRXhwcmVzc2lvbk1hcCh0aGlzLnBvcHVwVGVtcGxhdGUpO1xuICAgIHRoaXMubGlzdEl0ZW1zID0gW107XG4gICAgdGhpcy5wb3B1cFRlbXBsYXRlLmZpZWxkSW5mb3MuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIC8vIG5vIHJlbGF0aW9uc2hpcCBzdXBwb3J0IGZvciB2MVxuICAgICAgLy8gaW1hZ2VyeSBsYXllciBtaWdodCBoYXZlIGZpZWxkTmFtZTp1bmRlZmluZWQgLi4uXG4gICAgICBpZiAoKChfYSA9IGZpZWxkLmZpZWxkTmFtZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2YoZmllbGRJbmZvUHJlZml4RW51bS5yZWxhdGlvbnNoaXApKSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5saXN0SXRlbXMucHVzaCh0aGlzLmNhbGNpdGVMaXN0SXRlbShmaWVsZCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLmludGVybmFsQXR0cmlidXRlc1VwZGF0ZWQuZW1pdCgpO1xuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSB0aGlzLnBhcmVudFNoZWxsT2JzZXJ2ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNjb25uZWN0KCk7XG4gIH1cbiAgLy8gUHVibGljIE1ldGhvZHNcbiAgYXN5bmMgZG9uZSgpIHtcbiAgICB0aGlzLmNsb3NlQXR0cmlidXRlUG9wb3ZlcnMuZW1pdCh0cnVlKTtcbiAgICB0aGlzLnNob3dQcmV2aWV3UG9wdXAoZmFsc2UpO1xuICB9XG4gIGFzeW5jIHNldEZvY3VzKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKHRoaXMuZmxvd0l0ZW1Ob2RlKSB7XG4gICAgICAoX2EgPSB0aGlzLmZsb3dJdGVtTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEZvY3VzKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgKF9iID0gdGhpcy5jYWxjaXRlTGlzdE5vZGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zZXRGb2N1cygpO1xuICAgIH1cbiAgfVxuICAvLyBFdmVudHNcbiAgYXJjZ2lzQXR0cmlidXRlc0Zvcm1hdHRpbmdVcGRhdGVkSGFuZGxlcihldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMucG9wdXBUZW1wbGF0ZSA9IGV2ZW50LmRldGFpbC5jbG9uZSgpO1xuICAgIHRoaXMucmVSZW5kZXIgPSAhdGhpcy5yZVJlbmRlcjtcbiAgfVxuICBhcmNnaXNBdHRyaWJ1dGVzRm9ybWF0dGluZ0Rpc21pc3NlZEhhbmRsZXIoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmNsb3NlQXR0cmlidXRlUG9wb3ZlcnMuZW1pdCh0cnVlKTtcbiAgfVxuICBhc3luYyBjbG9zZUF0dHJpYnV0ZVBvcG92ZXJzSGFuZGxlcihldmVudCkge1xuICAgIGlmICh0aGlzLmF0dHJpYnV0ZUZvcm1hdHRlcikge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmF0dHJpYnV0ZUZvcm1hdHRlcik7XG4gICAgICB0aGlzLmF0dHJpYnV0ZUZvcm1hdHRlciA9IG51bGw7XG4gICAgICAvLyBjbGVhciBzZWxlY3RlZCBmaWVsZHMgYm9vbGVhblxuICAgICAgaWYgKGV2ZW50LmRldGFpbCkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZEZpZWxkcyA9IHRoaXMuY2FsY2l0ZUxpc3ROb2RlLnNlbGVjdGVkSXRlbXM7XG4gICAgICAgIGZvciAoY29uc3QgZmllbGRJdGVtIG9mIHNlbGVjdGVkRmllbGRzLnZhbHVlcygpKSB7XG4gICAgICAgICAgZmllbGRJdGVtLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b3RhbFNlbGVjdGVkRmllbGRzID0gMDtcbiAgICAgICAgLy8gYWRkIHRpbWVvdXQsIG90aGVyd2lzZSBwYW5lbCB0YWtlcyBmb2N1c1xuICAgICAgICAvLyB3aGVuIHNldHRpbmcgZm9jdXMgb24gZW50aXJlIGxpc3QgdGhlbiBzZWFyY2ggYm94IGdldHMgZm9jdXNcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmxpc3RJdGVtc05vZGVzWzBdLnNldEZvY3VzKCksIDMwMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIHVwZGF0ZSBhdHRyaWJ1dGVzXG4gIGludGVybmFsQXR0cmlidXRlc1VwZGF0ZWRIYW5kbGVyKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5kZWJvdW5jZWRBdHRyaWJ1dGVVcGRhdGVzKCk7XG4gIH1cbiAgY2FsY2l0ZUNoaXBDbG9zZUhhbmRsZXIoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmNsb3NlQXR0cmlidXRlUG9wb3ZlcnMuZW1pdCh0cnVlKTtcbiAgfVxuICAvLyBwcml2YXRlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcbiAgLy8gb3BlbiBwb3BvdmVyXG4gIGFzeW5jIHNlbGVjdGlvbkNsaWNrKCkge1xuICAgIC8vIGNsb3NlIGV4aXN0aW5nIHBvcG92ZXJzXG4gICAgdGhpcy5jbG9zZUF0dHJpYnV0ZVBvcG92ZXJzLmVtaXQoKTtcbiAgICBjb25zdCBzZWxlY3RlZEZpZWxkcyA9IFtcbiAgICAgIC4uLnRoaXMuY2FsY2l0ZUxpc3ROb2RlLnNlbGVjdGVkSXRlbXMubWFwKChpdGVtKSA9PiBpdGVtLnZhbHVlKVxuICAgIF07XG4gICAgdGhpcy50b3RhbFNlbGVjdGVkRmllbGRzID0gc2VsZWN0ZWRGaWVsZHMubGVuZ3RoO1xuICAgIGlmICghdGhpcy5hdHRyaWJ1dGVGb3JtYXR0ZXIgJiYgc2VsZWN0ZWRGaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5hdHRyaWJ1dGVGb3JtYXR0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXJjZ2lzLWF0dHJpYnV0ZXMtZm9ybWF0dGluZ1wiKTtcbiAgICAgIHRoaXMuYXR0cmlidXRlRm9ybWF0dGVyLnBvcG92ZXJQcm9wcyA9IHsgcmVmRWxlbWVudDogdGhpcy5ob3N0RWxlbWVudCwgb2Zmc2V0U2tpZGRpbmc6IDQ1IH07XG4gICAgICB0aGlzLmF0dHJpYnV0ZUZvcm1hdHRlci5sYXllckRpc3BsYXlUeXBlID0gdGhpcy5sYXllckRpc3BsYXlUeXBlO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVGb3JtYXR0ZXIuc2VsZWN0ZWRGaWVsZHMgPSBzZWxlY3RlZEZpZWxkcztcbiAgICAgIHRoaXMuYXR0cmlidXRlRm9ybWF0dGVyLmxheWVyID0gdGhpcy5sYXllcjtcbiAgICAgIHRoaXMuYXR0cmlidXRlRm9ybWF0dGVyLnBvcHVwVGVtcGxhdGUgPSB0aGlzLnBvcHVwVGVtcGxhdGUuY2xvbmUoKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5hdHRyaWJ1dGVGb3JtYXR0ZXIpO1xuICAgIH1cbiAgfVxuICBzaG93UHJldmlld1BvcHVwKHNob3cpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHRoaXMuZGlzcGxheVBvcHVwICYmXG4gICAgICB0aGlzLmxheWVyRGlzcGxheVR5cGUgPT09IGxheWVyRGlzcGxheVR5cGVFbnVtLmZlYXR1cmUgJiZcbiAgICAgICF0aGlzLmlzUG9wdXBPcGVuRm9yQ3VycmVudExheWVyKSB7XG4gICAgICBpZiAoc2hvdyAmJiB0aGlzLmxheWVyLnBvcHVwRW5hYmxlZCAmJiB0aGlzLmxheWVyLnBvcHVwVGVtcGxhdGUpIHtcbiAgICAgICAgdGhpcy5wcmV2aWV3UG9wdXBDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBwcmV2aWV3UG9wdXAodGhpcy5tYXBWaWV3LCB0aGlzLmxheWVyLCB0aGlzLnByZXZpZXdQb3B1cENvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIChfYSA9IHRoaXMucHJldmlld1BvcHVwQ29udHJvbGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFib3J0KCk7XG4gICAgICAgIHRoaXMubWFwVmlldy5jbG9zZVBvcHVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGlmIHBhcmVudCBpcyBzaGVsbCBwYW5lbC4gTVYgd29ya2Zsb3cuXG4gIHNldHVwUmVzaXplT2JzZXJ2ZXIoKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHBhcmVudFNoZWxsUGFuZWwgPSAoX2EgPSB0aGlzLmhvc3RFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFyZW50RWxlbWVudDtcbiAgICBpZiAoaXNEZWZpbmVkKHBhcmVudFNoZWxsUGFuZWwuY29sbGFwc2VkKSkge1xuICAgICAgdGhpcy5wYXJlbnRTaGVsbE9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgaWYgKHBhcmVudFNoZWxsUGFuZWwuY29sbGFwc2VkKSB7XG4gICAgICAgICAgdGhpcy5kb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5zaG93UHJldmlld1BvcHVwKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMucGFyZW50U2hlbGxPYnNlcnZlci5vYnNlcnZlKHBhcmVudFNoZWxsUGFuZWwpO1xuICAgIH1cbiAgfVxuICBkaXNwbGF5TGlzdCgpIHtcbiAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWxpc3RcIiwgeyBpZDogXCJsaXN0X0lkXCIsIGZpbHRlckVuYWJsZWQ6IHRoaXMubGlzdEl0ZW1zLmxlbmd0aCA+PSB0aGlzLmZpbHRlckxlbmd0aCA/IHRydWUgOiBmYWxzZSwgZmlsdGVyUGxhY2Vob2xkZXI6IHRoaXMuc3RyaW5ncy5maWx0ZXJBdHRyaWJ1dGVzLCBzZWxlY3Rpb25Nb2RlOiBcIm11bHRpcGxlXCIgfSwgdGhpcy50b3RhbFNlbGVjdGVkRmllbGRzID4gMCA/IChoKFwiZGl2XCIsIHsgY2xhc3M6IENTUy50b3RhbFNlbGVjdGVkRGl2IH0sIGgoXCJjYWxjaXRlLWNoaXBcIiwgeyB2YWx1ZTogXCJ0b3RhbFNlbGVjdGVkVmFsdWVcIiwgY2xvc2FibGU6IHRydWUgfSwgYCR7dGhpcy50b3RhbFNlbGVjdGVkRmllbGRzfSAke3RoaXMuc3RyaW5ncy5zZWxlY3RlZH1gKSkpIDogbnVsbCwgdGhpcy5saXN0SXRlbXMpKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgc3R5bGU6IHRoaXMuY2FsY2l0ZUZsb3dQcm9wcyA/IHt9IDogeyBkaXNwbGF5OiBcImZsZXhcIiwgZmxleDogXCIxIDEgYXV0b1wiLCBvdmVyZmxvdzogXCJoaWRkZW5cIiB9IH0sIHRoaXMuY2FsY2l0ZUZsb3dQcm9wcyA/IChoKFwiZGl2XCIsIHsgZGlyOiBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpIH0sIHRoaXMuZGlzcGxheUxpc3QoKSkpIDogKGgoXCJjYWxjaXRlLWZsb3dcIiwgeyBpZDogXCJhdHRyaWJ1dGVzX2Zsb3dfSWRcIiwgZGlyOiBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpIH0sIGgoXCJjYWxjaXRlLWZsb3ctaXRlbVwiLCB7IGhlYWRpbmc6IHRoaXMuc3RyaW5ncy5hdHRyaWJ1dGVzSGVhZGluZywgZGVzY3JpcHRpb246ICF0aGlzLmhpZGVMYXllclRpdGxlID8gdGhpcy5sYXllci50aXRsZSA6IHVuZGVmaW5lZCwgY2xvc2FibGU6IHRoaXMuZGlzbWlzc2libGUsIHJlZjogKG5vZGUpID0+ICh0aGlzLmZsb3dJdGVtTm9kZSA9IG5vZGUpLCBvbkNhbGNpdGVGbG93SXRlbUNsb3NlOiAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuZG9uZSgpO1xuICAgICAgICB0aGlzLmFyY2dpc0F0dHJpYnV0ZXNEaXNtaXNzZWRDaGFuZ2UuZW1pdCgpO1xuICAgICAgfSB9LCB0aGlzLmRpc3BsYXlMaXN0KCkpKSkpKTtcbiAgfVxuICBnZXQgaG9zdEVsZW1lbnQoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzQXR0cmlidXRlcy5zdHlsZSA9IGFyY2dpc0F0dHJpYnV0ZXNDc3M7XG5cbmNvbnN0IGRhdGVGb3JtYXRzID0gW1xuICBcInNob3J0LWRhdGVcIixcbiAgXCJsb25nLW1vbnRoLWRheS15ZWFyXCIsXG4gIFwiZGF5LXNob3J0LW1vbnRoLXllYXJcIixcbiAgXCJsb25nLWRhdGVcIixcbiAgXCJsb25nLW1vbnRoLXllYXJcIixcbiAgXCJzaG9ydC1tb250aC15ZWFyXCIsXG4gIFwieWVhclwiXG5dO1xuY29uc3QgdGltZUZvcm1hdHMgPSBbXCJzaG9ydC10aW1lXCIsIFwibG9uZy10aW1lXCIsIFwic2hvcnQtdGltZS0yNFwiLCBcImxvbmctdGltZS0yNFwiXTtcbi8vIHdoZW4gdGltZSBmb3JtYXQgaXMgXCJudWxsXCIsIHNob3dUaW1lIG5vdCBhdmFpbGFibGVcbmNvbnN0IGFsbERhdGVzTWFwID0gbmV3IE1hcCgpO1xuLy8gc2hvcnQtZGF0ZVxuYWxsRGF0ZXNNYXAuc2V0KFwic2hvcnQtZGF0ZVwiLCB7IGRhdGVGb3JtYXQ6IGRhdGVGb3JtYXRzWzBdLCB0aW1lRm9ybWF0OiBcIlwiIH0pO1xuYWxsRGF0ZXNNYXAuc2V0KFwic2hvcnQtZGF0ZS1zaG9ydC10aW1lXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMF0sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzBdIH0pO1xuYWxsRGF0ZXNNYXAuc2V0KFwic2hvcnQtZGF0ZS1sb25nLXRpbWVcIiwgeyBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0c1swXSwgdGltZUZvcm1hdDogdGltZUZvcm1hdHNbMV0gfSk7XG5hbGxEYXRlc01hcC5zZXQoXCJzaG9ydC1kYXRlLXNob3J0LXRpbWUtMjRcIiwgeyBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0c1swXSwgdGltZUZvcm1hdDogdGltZUZvcm1hdHNbMl0gfSk7XG5hbGxEYXRlc01hcC5zZXQoXCJzaG9ydC1kYXRlLWxvbmctdGltZS0yNFwiLCB7IGRhdGVGb3JtYXQ6IGRhdGVGb3JtYXRzWzBdLCB0aW1lRm9ybWF0OiB0aW1lRm9ybWF0c1szXSB9KTtcbi8vIGxvbmctbW9udGgtZGF5LXllYXJcbmFsbERhdGVzTWFwLnNldChcImxvbmctbW9udGgtZGF5LXllYXJcIiwgeyBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0c1sxXSwgdGltZUZvcm1hdDogXCJcIiB9KTtcbmFsbERhdGVzTWFwLnNldChcImxvbmctbW9udGgtZGF5LXllYXItc2hvcnQtdGltZVwiLCB7IGRhdGVGb3JtYXQ6IGRhdGVGb3JtYXRzWzFdLCB0aW1lRm9ybWF0OiB0aW1lRm9ybWF0c1swXSB9KTtcbmFsbERhdGVzTWFwLnNldChcImxvbmctbW9udGgtZGF5LXllYXItbG9uZy10aW1lXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMV0sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzFdIH0pO1xuYWxsRGF0ZXNNYXAuc2V0KFwibG9uZy1tb250aC1kYXkteWVhci1zaG9ydC10aW1lLTI0XCIsIHtcbiAgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMV0sXG4gIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzJdXG59KTtcbmFsbERhdGVzTWFwLnNldChcImxvbmctbW9udGgtZGF5LXllYXItbG9uZy10aW1lLTI0XCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMV0sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzNdIH0pO1xuLy8gZGF5LXNob3J0LW1vbnRoLXllYXJcbmFsbERhdGVzTWFwLnNldChcImRheS1zaG9ydC1tb250aC15ZWFyXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMl0sIHRpbWVGb3JtYXQ6IFwiXCIgfSk7XG5hbGxEYXRlc01hcC5zZXQoXCJkYXktc2hvcnQtbW9udGgteWVhci1zaG9ydC10aW1lXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMl0sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzBdIH0pO1xuYWxsRGF0ZXNNYXAuc2V0KFwiZGF5LXNob3J0LW1vbnRoLXllYXItbG9uZy10aW1lXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMl0sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzFdIH0pO1xuYWxsRGF0ZXNNYXAuc2V0KFwiZGF5LXNob3J0LW1vbnRoLXllYXItc2hvcnQtdGltZS0yNFwiLCB7XG4gIGRhdGVGb3JtYXQ6IGRhdGVGb3JtYXRzWzJdLFxuICB0aW1lRm9ybWF0OiB0aW1lRm9ybWF0c1syXVxufSk7XG5hbGxEYXRlc01hcC5zZXQoXCJkYXktc2hvcnQtbW9udGgteWVhci1sb25nLXRpbWUtMjRcIiwge1xuICBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0c1syXSxcbiAgdGltZUZvcm1hdDogdGltZUZvcm1hdHNbM11cbn0pO1xuLy8gbG9uZy1kYXRlXG5hbGxEYXRlc01hcC5zZXQoXCJsb25nLWRhdGVcIiwgeyBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0c1szXSwgdGltZUZvcm1hdDogXCJcIiB9KTtcbmFsbERhdGVzTWFwLnNldChcImxvbmctZGF0ZS1zaG9ydC10aW1lXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbM10sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzBdIH0pO1xuYWxsRGF0ZXNNYXAuc2V0KFwibG9uZy1kYXRlLWxvbmctdGltZVwiLCB7IGRhdGVGb3JtYXQ6IGRhdGVGb3JtYXRzWzNdLCB0aW1lRm9ybWF0OiB0aW1lRm9ybWF0c1sxXSB9KTtcbmFsbERhdGVzTWFwLnNldChcImxvbmctZGF0ZS1zaG9ydC10aW1lLTI0XCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbM10sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzJdIH0pO1xuYWxsRGF0ZXNNYXAuc2V0KFwibG9uZy1kYXRlLWxvbmctdGltZS0yNFwiLCB7IGRhdGVGb3JtYXQ6IGRhdGVGb3JtYXRzWzNdLCB0aW1lRm9ybWF0OiB0aW1lRm9ybWF0c1szXSB9KTtcbi8vIGxvbmctbW9udGgteWVhclxuYWxsRGF0ZXNNYXAuc2V0KFwibG9uZy1tb250aC15ZWFyXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbNF0sIHRpbWVGb3JtYXQ6IG51bGwgfSk7XG4vLyBzaG9ydC1tb250aC15ZWFyXG5hbGxEYXRlc01hcC5zZXQoXCJzaG9ydC1tb250aC15ZWFyXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbNV0sIHRpbWVGb3JtYXQ6IG51bGwgfSk7XG4vLyB5ZWFyXG5hbGxEYXRlc01hcC5zZXQoXCJ5ZWFyXCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbNl0sIHRpbWVGb3JtYXQ6IG51bGwgfSk7XG4vLyBkZWZhdWx0XG5hbGxEYXRlc01hcC5zZXQoXCJkZWZhdWx0XCIsIHsgZGF0ZUZvcm1hdDogZGF0ZUZvcm1hdHNbMF0sIHRpbWVGb3JtYXQ6IHRpbWVGb3JtYXRzWzJdIH0pO1xuXG5jb25zdCBhcmNnaXNBdHRyaWJ1dGVzRm9ybWF0dGluZ0NzcyA9IFwiLmZvcm1hdHRpbmctZGl2e3BhZGRpbmc6dmFyKC0tYXJjZ2lzLWFwcC1jYXAtc3BhY2luZykgdmFyKC0tYXJjZ2lzLWFwcC1zaWRlLXNwYWNpbmcpO21heC1oZWlnaHQ6NjB2aH0uc2luZ2xlLWxpbmUtbGFiZWwtc3dpdGNoLXNlY3Rpb257ZGlzcGxheTpmbGV4O21hcmdpbjowO3BhZGRpbmc6dmFyKC0tYXJjZ2lzLWFwcC1jYXAtc3BhY2luZy1oYWxmKSAwfS5zaW5nbGUtbGluZS1sYWJlbC1zd2l0Y2gtbGFiZWx7ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpjb2x1bW4gbm93cmFwO2ZsZXg6MSAwIDAlO292ZXJmbG93OmhpZGRlbn0uc2luZ2xlLWxpbmUtbGFiZWwtc3dpdGNoLXN3aXRjaHtmbGV4OjAgMCAwJTtqdXN0aWZ5LXNlbGY6ZmxleC1lbmQ7bWFyZ2luOjB9LnNpbmdsZS1saW5lLWxhYmVsLXN3aXRjaC1zd2l0Y2ggaW5wdXR7ZGlzcGxheTpub25lfVwiO1xuXG5jb25zdCBBcmNnaXNBdHRyaWJ1dGVzRm9ybWF0dGluZyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5hcmNnaXNBdHRyaWJ1dGVzRm9ybWF0dGluZ0Rpc21pc3NlZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQXR0cmlidXRlc0Zvcm1hdHRpbmdEaXNtaXNzZWRcIiwgNyk7XG4gICAgdGhpcy5hcmNnaXNBdHRyaWJ1dGVzRm9ybWF0dGluZ1VwZGF0ZWQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0F0dHJpYnV0ZXNGb3JtYXR0aW5nVXBkYXRlZFwiLCA3KTtcbiAgICB0aGlzLmRpc3BsYXlEYXRlID0gbmV3IERhdGUoXCJEZWNlbWJlciAzMSwgMTk2OSAxODowMDowMFwiKTtcbiAgICB0aGlzLmxheWVyRmllbGRzTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuYXJjYWRlRXhwTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuc2VsZWN0ZWRGaWVsZEluZm9NYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5oYXNDb21tb25EYXRhVHlwZXMgPSB0cnVlO1xuICAgIHRoaXMudGhvdXNhbmRTZXBlcmF0b3IgPSAoKSA9PiAoaChcInNlY3Rpb25cIiwgeyBjbGFzczogXCJzaW5nbGUtbGluZS1sYWJlbC1zd2l0Y2gtc2VjdGlvblwiIH0sIGgoXCJjYWxjaXRlLWxhYmVsXCIsIHsgY2xhc3M6IFwic2luZ2xlLWxpbmUtbGFiZWwtc3dpdGNoLWxhYmVsXCIgfSwgdGhpcy5zdHJpbmdzLnNob3cxMDAwU2VwZXJhdG9yKSwgaChcImNhbGNpdGUtc3dpdGNoXCIsIHsgaWQ6IFwidGhvdXNhbmRTZXBlcmF0b3JTd2l0Y2hfSWRcIiwgc2NhbGU6IFwic1wiLCBjbGFzczogXCJzaW5nbGUtbGluZS1sYWJlbC1zd2l0Y2gtc3dpdGNoXCIsIGNoZWNrZWQ6IHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQuZGlnaXRTZXBhcmF0b3IgPyB0cnVlIDogZmFsc2UgfSkpKTtcbiAgICB0aGlzLnNpZ25pZmljYW50RGlnaXRzID0gKCkgPT4gKGgoXCJzZWN0aW9uXCIsIG51bGwsIGgoXCJjYWxjaXRlLWxhYmVsXCIsIG51bGwsIHRoaXMuc3RyaW5ncy5zaWduaWZpY2FudERpZ2l0cywgaChcImNhbGNpdGUtc2VsZWN0XCIsIHsgbGFiZWw6IHRoaXMuc3RyaW5ncy5zaWduaWZpY2FudERpZ2l0cywgb25DYWxjaXRlU2VsZWN0Q2hhbmdlOiAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICB0aGlzLmZpcnN0U2VsZWN0ZWQuZm9ybWF0LnBsYWNlcyA9IE51bWJlcihzZWxlY3Quc2VsZWN0ZWRPcHRpb24udmFsdWUpIHx8IDA7XG4gICAgICAgIHRoaXMuc2F2ZUZpZWxkSW5mbygpO1xuICAgICAgfSB9LCBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOF0ubWFwKCh4KSA9PiAoaChcImNhbGNpdGUtb3B0aW9uXCIsIHsgdmFsdWU6IHgudG9TdHJpbmcoKSwgc2VsZWN0ZWQ6IHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQucGxhY2VzID09PSB4ID8gdHJ1ZSA6IGZhbHNlIH0sIGAke3h9ICR7dGhpcy5zdHJpbmdzLmRlY2ltYWxQbGFjZXN9YCkpKSkpKSk7XG4gICAgdGhpcy5kYXRlRm9ybWF0ID0gKHNlbGVjdGVkRGF0ZUZvcm1hdCkgPT4gKGgoXCJzZWN0aW9uXCIsIG51bGwsIGgoXCJjYWxjaXRlLWxhYmVsXCIsIG51bGwsIHRoaXMuc3RyaW5ncy5kYXRlRm9ybWF0LCBoKFwiY2FsY2l0ZS1zZWxlY3RcIiwgeyBpZDogXCJkYXRlRm9ybWF0U2VsZWN0X0lkXCIsIGxhYmVsOiB0aGlzLnN0cmluZ3MuZGF0ZUZvcm1hdCwgb25DYWxjaXRlU2VsZWN0Q2hhbmdlOiAoKSA9PiB0aGlzLmNoYW5nZURhdGVGb3JtYXQoKSB9LCBkYXRlRm9ybWF0cy5tYXAoKGN1cnJlbnREYXRlRm9ybWF0KSA9PiAoaChcImNhbGNpdGUtb3B0aW9uXCIsIHsgdmFsdWU6IGN1cnJlbnREYXRlRm9ybWF0LCBzZWxlY3RlZDogc2VsZWN0ZWREYXRlRm9ybWF0ID09PSBjdXJyZW50RGF0ZUZvcm1hdCA/IHRydWUgOiBmYWxzZSB9LCB0aGlzLmludGwuZm9ybWF0RGF0ZSh0aGlzLmRpc3BsYXlEYXRlLCB0aGlzLmludGwuY29udmVydERhdGVGb3JtYXRUb0ludGxPcHRpb25zKGN1cnJlbnREYXRlRm9ybWF0KSkpKSkpKSkpO1xuICAgIHRoaXMuc2hvd1RpbWUgPSAoc2VsZWN0ZWRUaW1lRm9ybWF0KSA9PiAoaChcInNlY3Rpb25cIiwgeyBjbGFzczogXCJzaW5nbGUtbGluZS1sYWJlbC1zd2l0Y2gtc2VjdGlvblwiLCBpZDogXCJzaG93VGltZV9JZFwiIH0sIGgoXCJjYWxjaXRlLWxhYmVsXCIsIHsgY2xhc3M6IFwic2luZ2xlLWxpbmUtbGFiZWwtc3dpdGNoLWxhYmVsXCIgfSwgdGhpcy5zdHJpbmdzLnNob3dUaW1lKSwgaChcImNhbGNpdGUtc3dpdGNoXCIsIHsgaWQ6IFwic2hvd1RpbWVTd2l0Y2hfSWRcIiwgc2NhbGU6IFwic1wiLCBjbGFzczogXCJzaW5nbGUtbGluZS1sYWJlbC1zd2l0Y2gtc3dpdGNoXCIsIGNoZWNrZWQ6IHNlbGVjdGVkVGltZUZvcm1hdCA/IHRydWUgOiBmYWxzZSB9KSkpO1xuICAgIHRoaXMudGltZUZvcm1hdCA9IChzZWxlY3RlZFRpbWVGb3JtYXQpID0+IChoKFwic2VjdGlvblwiLCB7IGlkOiBcInRpbWVGb3JtYXRfSWRcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCB0aGlzLnN0cmluZ3MudGltZUZvcm1hdCwgaChcImNhbGNpdGUtc2VsZWN0XCIsIHsgaWQ6IFwidGltZUZvcm1hdFNlbGVjdF9JZFwiLCBsYWJlbDogdGhpcy5zdHJpbmdzLnRpbWVGb3JtYXQsIG9uQ2FsY2l0ZVNlbGVjdENoYW5nZTogKCkgPT4gdGhpcy5jaGFuZ2VEYXRlRm9ybWF0KCkgfSwgdGltZUZvcm1hdHMubWFwKChjdXJyZW50VGltZUZvcm1hdCkgPT4gKGgoXCJjYWxjaXRlLW9wdGlvblwiLCB7IHZhbHVlOiBjdXJyZW50VGltZUZvcm1hdCwgc2VsZWN0ZWQ6IHNlbGVjdGVkVGltZUZvcm1hdCA9PT0gY3VycmVudFRpbWVGb3JtYXQgPyB0cnVlIDogZmFsc2UgfSwgdGhpcy5nZXRUaW1lRm9ybWF0U3RyaW5nKGN1cnJlbnRUaW1lRm9ybWF0KSkpKSkpKSk7XG4gICAgdGhpcy5sYXllciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxheWVyRGlzcGxheVR5cGUgPSBsYXllckRpc3BsYXlUeXBlRW51bS5mZWF0dXJlO1xuICAgIHRoaXMuc2VsZWN0ZWRGaWVsZHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wb3BvdmVyUHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wb3B1cFRlbXBsYXRlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gIH1cbiAgLy8gbGlmZWN5Y2xlIG1ldGhvZHNcbiAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgY29uc3QgbG9jYWxlU2V0dGluZ3MgPSBhd2FpdCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgIHRoaXMuc3RyaW5ncyA9IGxvY2FsZVNldHRpbmdzWzBdO1xuICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gbG9jYWxlU2V0dGluZ3NbMV07XG4gICAgY29uc3QgW3RlbXBJbnRsXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImVzcmkvaW50bFwiXSk7XG4gICAgdGhpcy5pbnRsID0gdGVtcEludGw7XG4gICAgLy8gbWFwIGZvciBmYXN0ZXIgYWNjZXNzXG4gICAgdGhpcy5sYXllckZpZWxkc01hcCA9IGF3YWl0IGdlbmVyYXRlTGF5ZXJGaWVsZHNNYXAodGhpcy5sYXllcik7XG4gICAgdGhpcy5hcmNhZGVFeHBNYXAgPSBnZW5lcmF0ZUFyY2FkZUV4cHJlc3Npb25NYXAodGhpcy5wb3B1cFRlbXBsYXRlKTtcbiAgICAvLyBzZXR1cCBzZWxlY3RlZEZpZWxkSW5mb01hcCB3aXRoIGFsbCBuZWVkZWQgaW5mb1xuICAgIHRoaXMuc2VsZWN0ZWRGaWVsZHMuZm9yRWFjaCgoZmllbGROYW1lKSA9PiB7XG4gICAgICB0aGlzLnBvcHVwVGVtcGxhdGUuZmllbGRJbmZvcy5maW5kKCh0ZW1wbGF0ZUZpZWxkSW5mbywgaWR4KSA9PiB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZUZpZWxkSW5mby5maWVsZE5hbWUgPT09IGZpZWxkTmFtZSkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZEluZm9NYXAuc2V0KGZpZWxkTmFtZSwge1xuICAgICAgICAgICAgaW5kZXg6IGlkeCxcbiAgICAgICAgICAgIGZpZWxkVHlwZTogZ2V0RmllbGRUeXBlKGZpZWxkTmFtZSwgdGhpcy5sYXllckZpZWxkc01hcCwgdGhpcy5hcmNhZGVFeHBNYXApLFxuICAgICAgICAgICAgZmllbGRJbmZvOiB0ZW1wbGF0ZUZpZWxkSW5mb1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyBmaXJzdCBzZWxlY3RlZCBmaWVsZCB0byBkcml2ZSB0aGUgb3B0aW9ucyBkaXNwbGF5ZWRcbiAgICB0aGlzLmZpcnN0U2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkRmllbGRJbmZvTWFwLmdldCh0aGlzLnNlbGVjdGVkRmllbGRzWzBdKS5maWVsZEluZm87XG4gICAgdGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID0gdGhpcy5zZWxlY3RlZEZpZWxkSW5mb01hcC5nZXQodGhpcy5zZWxlY3RlZEZpZWxkc1swXSkuZmllbGRUeXBlO1xuICAgIHRoaXMuaGFzQ29tbW9uRGF0YVR5cGVzID0gdGhpcy5jb21tb25EYXRhVHlwZXNDaGVjayh0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUpO1xuICAgIC8vIHNldHVwIGRlZmF1bHQgb25seSBmb3IgMXN0LiBSZXN0IHdpbGwgYmUgY29waWVkIG9uIHNhdmVcbiAgICBpZiAoIXRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQgJiYgdGhpcy5oYXNDb21tb25EYXRhVHlwZXMpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0dXBEZWZhdWx0Rm9ybWF0KHRoaXMuZmlyc3RTZWxlY3RlZCwgdGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLmhvc3RFbGVtZW50LnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJtYW5hZ2VQb3BvdmVyX0lkXCIpW1wicmVwb3NpdGlvblwiXSgpO1xuICAgIGlmICh0aGlzLmFsaWFzSW5wdXQpIHtcbiAgICAgIHRoaXMuYWxpYXNJbnB1dC5mb2N1cygpO1xuICAgIH1cbiAgICB0aGlzLnNldHVwRGF0ZVRpbWVEaXNwbGF5KCk7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgIC8vIG5lZWQgdGltZW91dCBiZWNhdXNlIG9mIHJlLXJlbmRlclxuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMucGFuZWxFbGVtZW50LnNldEZvY3VzKCk7XG4gICAgfSksIDMwMCk7XG4gIH1cbiAgLy8gUHVibGljIE1ldGhvZHNcbiAgYXN5bmMgcmVwb3NpdGlvbigpIHtcbiAgICB2YXIgX2E7XG4gICAgKF9hID0gdGhpcy5wb3BvdmVyTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcG9zaXRpb24oKTtcbiAgfVxuICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucGFuZWxFbGVtZW50LnNldEZvY3VzKCksIDEwMCk7XG4gIH1cbiAgLy8gRXZlbnRzXG4gIGNhbGNpdGVTd2l0Y2hDaGFuZ2VIYW5kbGVyKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQpIHtcbiAgICAgIGlmICh0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IFwiZGF0ZVwiIHx8XG4gICAgICAgIHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSA9PT0gXCJ0aW1lc3RhbXAtb2Zmc2V0XCIpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VEYXRlRm9ybWF0KCk7XG4gICAgICB9XG4gICAgICAvLyBudW1iZXJzXG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5maXJzdFNlbGVjdGVkLmZvcm1hdC5kaWdpdFNlcGFyYXRvciA9IHRoaXMuaG9zdEVsZW1lbnQuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInRob3VzYW5kU2VwZXJhdG9yU3dpdGNoX0lkXCIpLmNoZWNrZWRcbiAgICAgICAgICA/IHRydWVcbiAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICB0aGlzLnNhdmVGaWVsZEluZm8oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gcHJpdmF0ZSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzXG4gIGNvbW1vbkRhdGFUeXBlc0NoZWNrKGZpZWxkVHlwZSkge1xuICAgIGZvciAobGV0IHggPSAxOyB4IDwgdGhpcy5zZWxlY3RlZEZpZWxkcy5sZW5ndGg7IHgrKykge1xuICAgICAgY29uc3QgdGVtcEZpZWxkVHlwZSA9IHRoaXMuc2VsZWN0ZWRGaWVsZEluZm9NYXAuZ2V0KHRoaXMuc2VsZWN0ZWRGaWVsZHNbeF0pLmZpZWxkVHlwZTtcbiAgICAgIGlmIChmaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmludGVnZXIgfHxcbiAgICAgICAgZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5zbWFsbEludGVnZXIgfHxcbiAgICAgICAgZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5iaWdJbnRlZ2VyKSB7XG4gICAgICAgIGlmIChbXG4gICAgICAgICAgZmllbGRUeXBlc0VudW0uaW50ZWdlcixcbiAgICAgICAgICBmaWVsZFR5cGVzRW51bS5zbWFsbEludGVnZXIsXG4gICAgICAgICAgZmllbGRUeXBlc0VudW0uYmlnSW50ZWdlclxuICAgICAgICBdLmluZGV4T2YodGVtcEZpZWxkVHlwZSkgPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChmaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLnNpbmdsZSB8fFxuICAgICAgICBmaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmRvdWJsZSB8fFxuICAgICAgICBmaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmxvbmcgfHxcbiAgICAgICAgZmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5udW1iZXIpIHtcbiAgICAgICAgaWYgKFtcbiAgICAgICAgICBmaWVsZFR5cGVzRW51bS5zaW5nbGUsXG4gICAgICAgICAgZmllbGRUeXBlc0VudW0uZG91YmxlLFxuICAgICAgICAgIGZpZWxkVHlwZXNFbnVtLmxvbmcsXG4gICAgICAgICAgZmllbGRUeXBlc0VudW0ubnVtYmVyXG4gICAgICAgIF0uaW5kZXhPZih0ZW1wRmllbGRUeXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZGF0ZSB8fFxuICAgICAgICBmaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLnRpbWVzdGFtcE9mZnNldCkge1xuICAgICAgICBpZiAoW2ZpZWxkVHlwZXNFbnVtLmRhdGUsIGZpZWxkVHlwZXNFbnVtLnRpbWVzdGFtcE9mZnNldF0uaW5kZXhPZih0ZW1wRmllbGRUeXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZGF0ZU9ubHkpIHtcbiAgICAgICAgaWYgKFtmaWVsZFR5cGVzRW51bS5kYXRlT25seV0uaW5kZXhPZih0ZW1wRmllbGRUeXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0udGltZU9ubHkpIHtcbiAgICAgICAgaWYgKFtmaWVsZFR5cGVzRW51bS50aW1lT25seV0uaW5kZXhPZih0ZW1wRmllbGRUeXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYXN5bmMgc2V0dXBEZWZhdWx0Rm9ybWF0KGN1cnJlbnRGaWVsZCwgY3VycmVudEZpZWxkVHlwZSkge1xuICAgIGNvbnN0IFtGaWVsZEluZm9Gb3JtYXRdID0gYXdhaXQgbG9hZE1vZHVsZXMoW1xuICAgICAgXCJlc3JpL3BvcHVwL3N1cHBvcnQvRmllbGRJbmZvRm9ybWF0XCJcbiAgICBdKTtcbiAgICBpZiAoY3VycmVudEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uaW50ZWdlciB8fFxuICAgICAgY3VycmVudEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uc21hbGxJbnRlZ2VyIHx8XG4gICAgICBjdXJyZW50RmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5iaWdJbnRlZ2VyKSB7XG4gICAgICBjdXJyZW50RmllbGQuZm9ybWF0ID0gbmV3IEZpZWxkSW5mb0Zvcm1hdCh7IGRpZ2l0U2VwYXJhdG9yOiBmYWxzZSB9KTtcbiAgICAgIHRoaXMuc2F2ZUZpZWxkSW5mbygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjdXJyZW50RmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5zaW5nbGUgfHxcbiAgICAgIGN1cnJlbnRGaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmRvdWJsZSB8fFxuICAgICAgY3VycmVudEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0ubG9uZyB8fFxuICAgICAgY3VycmVudEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0ubnVtYmVyKSB7XG4gICAgICBjdXJyZW50RmllbGQuZm9ybWF0ID0gbmV3IEZpZWxkSW5mb0Zvcm1hdCh7XG4gICAgICAgIGRpZ2l0U2VwYXJhdG9yOiBmYWxzZSxcbiAgICAgICAgcGxhY2VzOiAyXG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2F2ZUZpZWxkSW5mbygpO1xuICAgIH1cbiAgICAvLyBkYXRlXG4gICAgZWxzZSBpZiAoKGN1cnJlbnRGaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmRhdGUgfHxcbiAgICAgIGN1cnJlbnRGaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmRhdGVPbmx5IHx8XG4gICAgICBjdXJyZW50RmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS50aW1lT25seSB8fFxuICAgICAgY3VycmVudEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0udGltZXN0YW1wT2Zmc2V0KSAmJlxuICAgICAgdGhpcy5kYXRlRm9ybWF0dGluZ0F2YWlsYWJsZSgpKSB7XG4gICAgICBpZiAoY3VycmVudEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZGF0ZU9ubHkpIHtcbiAgICAgICAgY3VycmVudEZpZWxkLmZvcm1hdCA9IG5ldyBGaWVsZEluZm9Gb3JtYXQoe1xuICAgICAgICAgIGRhdGVGb3JtYXQ6IFwic2hvcnQtZGF0ZVwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN1cnJlbnRGaWVsZC5mb3JtYXQgPSBuZXcgRmllbGRJbmZvRm9ybWF0KHtcbiAgICAgICAgICBkYXRlRm9ybWF0OiBcInNob3J0LWRhdGUtc2hvcnQtdGltZVwiIC8vIHVzZWQgdG8gYmUgXCJkZWZhdWx0XCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNhdmVGaWVsZEluZm8oKTtcbiAgICB9XG4gIH1cbiAgc2V0dXBEYXRlVGltZURpc3BsYXkoKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICgodGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBcImRhdGVcIiB8fFxuICAgICAgdGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBcInRpbWUtb25seVwiIHx8XG4gICAgICB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IFwidGltZXN0YW1wLW9mZnNldFwiKSAmJlxuICAgICAgKChfYSA9IHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kYXRlRm9ybWF0KSAmJlxuICAgICAgdGhpcy5oYXNDb21tb25EYXRhVHlwZXMpIHtcbiAgICAgIGNvbnN0IHNob3dUaW1lSWQgPSB0aGlzLmhvc3RFbGVtZW50LnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzaG93VGltZV9JZFwiKTtcbiAgICAgIGNvbnN0IHNob3dUaW1lU3dpdGNoSWQgPSB0aGlzLmhvc3RFbGVtZW50LnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJzaG93VGltZVN3aXRjaF9JZFwiKTtcbiAgICAgIGNvbnN0IHRpbWVGb3JtYXRJZCA9IHRoaXMuaG9zdEVsZW1lbnQuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcInRpbWVGb3JtYXRfSWRcIik7XG4gICAgICBjb25zdCB0ZW1wTWFwID0gYWxsRGF0ZXNNYXAuZ2V0KHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQuZGF0ZUZvcm1hdCk7XG4gICAgICBpZiAodGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBcImRhdGVcIiB8fFxuICAgICAgICB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IFwidGltZXN0YW1wLW9mZnNldFwiKSB7XG4gICAgICAgIGlmICh0ZW1wTWFwLnRpbWVGb3JtYXQgPT09IFwiXCIpIHtcbiAgICAgICAgICBzaG93VGltZUlkLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgICBzaG93VGltZVN3aXRjaElkLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICB0aW1lRm9ybWF0SWQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRlbXBNYXAudGltZUZvcm1hdCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNob3dUaW1lSWQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgIHNob3dUaW1lU3dpdGNoSWQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgIHRpbWVGb3JtYXRJZC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc2hvd1RpbWVJZC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgICAgc2hvd1RpbWVTd2l0Y2hJZC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICB0aW1lRm9ybWF0SWQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBcInRpbWUtb25seVwiKSB7XG4gICAgICAgIHRpbWVGb3JtYXRJZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXRUaW1lRm9ybWF0U3RyaW5nKGN1cnJlbnRUaW1lRm9ybWF0KSB7XG4gICAgaWYgKGN1cnJlbnRUaW1lRm9ybWF0ID09PSB0aW1lRm9ybWF0c1swXSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyaW5ncy5zaG9ydFRpbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1cnJlbnRUaW1lRm9ybWF0ID09PSB0aW1lRm9ybWF0c1sxXSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyaW5ncy5sb25nVGltZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY3VycmVudFRpbWVGb3JtYXQgPT09IHRpbWVGb3JtYXRzWzJdKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJpbmdzLnNob3J0VGltZTI0O1xuICAgIH1cbiAgICBlbHNlIGlmIChjdXJyZW50VGltZUZvcm1hdCA9PT0gdGltZUZvcm1hdHNbM10pIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmluZ3MubG9uZ1RpbWUyNDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJpbmdzLnNob3J0VGltZTI0O1xuICAgIH1cbiAgfVxuICBjaGFuZ2VBbGlhcygpIHtcbiAgICAvLyBkZWZhdWx0IGZpZWxkIG5hbWVcbiAgICBpZiAoIWlzRGVmaW5lZCQxKHRoaXMuYWxpYXNJbnB1dC52YWx1ZSkpIHtcbiAgICAgIHRoaXMuYWxpYXNJbnB1dC52YWx1ZSA9IHRoaXMuZmlyc3RTZWxlY3RlZC5maWVsZE5hbWU7XG4gICAgfVxuICAgIGlmICh0aGlzLmFyY2FkZUV4cE1hcC5oYXModGhpcy5maXJzdFNlbGVjdGVkLmZpZWxkTmFtZSkpIHtcbiAgICAgIHRoaXMuYXJjYWRlRXhwTWFwLmdldCh0aGlzLmZpcnN0U2VsZWN0ZWQuZmllbGROYW1lKS50aXRsZSA9IHRoaXMuYWxpYXNJbnB1dC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmZpcnN0U2VsZWN0ZWQubGFiZWwgPSB0aGlzLmFsaWFzSW5wdXQudmFsdWU7XG4gICAgfVxuICAgIHRoaXMuc2F2ZUZpZWxkSW5mbygpO1xuICB9XG4gIGNoYW5nZURhdGVGb3JtYXQoKSB7XG4gICAgY29uc3QgdGVtcFNlbGVjdERhdGUgPSB0aGlzLmhvc3RFbGVtZW50LnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJkYXRlRm9ybWF0U2VsZWN0X0lkXCIpO1xuICAgIGNvbnN0IHRlbXBTZWxlY3RUaW1lID0gdGhpcy5ob3N0RWxlbWVudC5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwidGltZUZvcm1hdFNlbGVjdF9JZFwiKTtcbiAgICBjb25zdCBzaG93VGltZVN3aXRjaElkID0gdGhpcy5ob3N0RWxlbWVudC5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKFwic2hvd1RpbWVTd2l0Y2hfSWRcIik7XG4gICAgaWYgKHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSA9PT0gXCJkYXRlXCIgfHxcbiAgICAgIHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSA9PT0gXCJ0aW1lc3RhbXAtb2Zmc2V0XCIpIHtcbiAgICAgIGNvbnN0IHRlbXBEYXRlTWFwID0gYWxsRGF0ZXNNYXAuZ2V0KHRlbXBTZWxlY3REYXRlLnNlbGVjdGVkT3B0aW9uLnZhbHVlKTtcbiAgICAgIGlmICh0ZW1wRGF0ZU1hcC50aW1lRm9ybWF0ID09PSBcIlwiKSB7XG4gICAgICAgIHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQuZGF0ZUZvcm1hdCA9IHNob3dUaW1lU3dpdGNoSWQuY2hlY2tlZFxuICAgICAgICAgID8gYCR7dGVtcFNlbGVjdERhdGUuc2VsZWN0ZWRPcHRpb24udmFsdWV9LSR7dGVtcFNlbGVjdFRpbWUuc2VsZWN0ZWRPcHRpb24udmFsdWV9YFxuICAgICAgICAgIDogYCR7dGVtcFNlbGVjdERhdGUuc2VsZWN0ZWRPcHRpb24udmFsdWV9YDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRlbXBEYXRlTWFwLnRpbWVGb3JtYXQgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5maXJzdFNlbGVjdGVkLmZvcm1hdC5kYXRlRm9ybWF0ID0gYCR7dGVtcFNlbGVjdERhdGUuc2VsZWN0ZWRPcHRpb24udmFsdWV9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBcImRhdGUtb25seVwiKSB7XG4gICAgICB0aGlzLmZpcnN0U2VsZWN0ZWQuZm9ybWF0LmRhdGVGb3JtYXQgPSBgJHt0ZW1wU2VsZWN0RGF0ZS5zZWxlY3RlZE9wdGlvbi52YWx1ZX1gO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IFwidGltZS1vbmx5XCIpIHtcbiAgICAgIHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQuZGF0ZUZvcm1hdCA9IGBzaG9ydC1kYXRlLSR7dGVtcFNlbGVjdFRpbWUuc2VsZWN0ZWRPcHRpb24udmFsdWV9YDtcbiAgICB9XG4gICAgdGhpcy5zYXZlRmllbGRJbmZvKCk7XG4gICAgdGhpcy5zZXR1cERhdGVUaW1lRGlzcGxheSgpO1xuICAgIHRoaXMuaG9zdEVsZW1lbnQuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZChcIm1hbmFnZVBvcG92ZXJfSWRcIilbXCJyZXBvc2l0aW9uXCJdKCk7XG4gIH1cbiAgc2F2ZUZpZWxkSW5mbygpIHtcbiAgICB2YXIgX2E7XG4gICAgLy8gaGFzQ29tbW9uRGF0YVR5cGVzIGFsd2F5cyB0cnVlIHdoZW4gc29tZXRoaW5nIGNhbiBiZSBjaGFuZ2VkXG4gICAgaWYgKHRoaXMuaGFzQ29tbW9uRGF0YVR5cGVzKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkRmllbGRJbmZvTWFwLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZS5maWVsZEluZm8uZmllbGROYW1lID09PSB0aGlzLmZpcnN0U2VsZWN0ZWQuZmllbGROYW1lKSB7XG4gICAgICAgICAgdmFsdWUuZmllbGRJbmZvID0gdGhpcy5maXJzdFNlbGVjdGVkLmNsb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFsdWUuZmllbGRJbmZvLmZvcm1hdCA9IHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQuY2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBmb3IgYXJjYWRlLCBhbHNvIGNsb25lIHRvIHBvcHVwVGVtcGxhdGUuZXhwcmVzc2lvbkluZm9zKGZvciB0aXRsZSlcbiAgICAgIC8vIG9ubHkgdmFsaWQgZm9yIHRpdGxlIHVwZGF0ZSB1c2UgY2FzZVxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRGaWVsZHMubGVuZ3RoID09PSAxICYmIHRoaXMuYXJjYWRlRXhwTWFwLmhhcyh0aGlzLmZpcnN0U2VsZWN0ZWQuZmllbGROYW1lKSkge1xuICAgICAgICBpZiAoKF9hID0gdGhpcy5wb3B1cFRlbXBsYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXhwcmVzc2lvbkluZm9zKSB7XG4gICAgICAgICAgdGhpcy5wb3B1cFRlbXBsYXRlLmV4cHJlc3Npb25JbmZvcy5maW5kKChhcmNhZGVGaWVsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChgJHtmaWVsZEluZm9QcmVmaXhFbnVtLmV4cHJlc3Npb259JHthcmNhZGVGaWVsZC5uYW1lfWAgPT09XG4gICAgICAgICAgICAgIHRoaXMuZmlyc3RTZWxlY3RlZC5maWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBvcHVwVGVtcGxhdGUuZXhwcmVzc2lvbkluZm9zW2luZGV4XSA9IHRoaXMuYXJjYWRlRXhwTWFwXG4gICAgICAgICAgICAgICAgLmdldCh0aGlzLmZpcnN0U2VsZWN0ZWQuZmllbGROYW1lKVxuICAgICAgICAgICAgICAgIC5jbG9uZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gY2xvbmUvY2hhbmdlIGluIGZpZWxkaW5mb1xuICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkSW5mb01hcC5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICB0aGlzLnBvcHVwVGVtcGxhdGUuZmllbGRJbmZvc1t2YWx1ZS5pbmRleF0gPSB2YWx1ZS5maWVsZEluZm8uY2xvbmUoKTtcbiAgICAgIH0pO1xuICAgICAgLy8gY2xvbmUvY2hhbmdlIGluIGNvbnRlbnRcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMucG9wdXBUZW1wbGF0ZS5jb250ZW50KSkge1xuICAgICAgICB0aGlzLnBvcHVwVGVtcGxhdGUuY29udGVudC5mb3JFYWNoKChjb250ZW50KSA9PiB7XG4gICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gXCJmaWVsZHNcIiAmJiBjb250ZW50LmZpZWxkSW5mb3MpIHtcbiAgICAgICAgICAgIGNvbnRlbnQuZmllbGRJbmZvcy5mb3JFYWNoKChjb250ZW50RmllbGQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkRmllbGRJbmZvTWFwLmhhcyhjb250ZW50RmllbGQuZmllbGROYW1lKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBGaWVsZCA9IHRoaXMuc2VsZWN0ZWRGaWVsZEluZm9NYXBcbiAgICAgICAgICAgICAgICAgIC5nZXQoY29udGVudEZpZWxkLmZpZWxkTmFtZSlcbiAgICAgICAgICAgICAgICAgIC5maWVsZEluZm8uY2xvbmUoKTtcbiAgICAgICAgICAgICAgICB0ZW1wRmllbGQudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGVudC5maWVsZEluZm9zW2luZGV4XSA9IHRlbXBGaWVsZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXJjZ2lzQXR0cmlidXRlc0Zvcm1hdHRpbmdVcGRhdGVkLmVtaXQodGhpcy5wb3B1cFRlbXBsYXRlLmNsb25lKCkpO1xuICAgIH1cbiAgfVxuICAvLyByZW5kb3IgbWV0aG9kc1xuICBmb3JtYXR0aW5nT3B0aW9ucygpIHtcbiAgICBpZiAodGhpcy5maXJzdFNlbGVjdGVkLmZvcm1hdCkge1xuICAgICAgaWYgKHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uaW50ZWdlciB8fFxuICAgICAgICB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLnNtYWxsSW50ZWdlciB8fFxuICAgICAgICB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmJpZ0ludGVnZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhvdXNhbmRTZXBlcmF0b3IoKTtcbiAgICAgIH1cbiAgICAgIC8vIG51bWJlclxuICAgICAgZWxzZSBpZiAodGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5zaW5nbGUgfHxcbiAgICAgICAgdGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5kb3VibGUgfHxcbiAgICAgICAgdGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS5sb25nIHx8XG4gICAgICAgIHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0ubnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLCB0aGlzLnNpZ25pZmljYW50RGlnaXRzKCksIHRoaXMudGhvdXNhbmRTZXBlcmF0b3IoKSkpO1xuICAgICAgfVxuICAgICAgLy8gZGF0ZVxuICAgICAgZWxzZSBpZiAoKHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0uZGF0ZSB8fFxuICAgICAgICB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmRhdGVPbmx5IHx8XG4gICAgICAgIHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSA9PT0gZmllbGRUeXBlc0VudW0udGltZU9ubHkgfHxcbiAgICAgICAgdGhpcy5maXJzdFNlbGVjdGVkRmllbGRUeXBlID09PSBmaWVsZFR5cGVzRW51bS50aW1lc3RhbXBPZmZzZXQpICYmXG4gICAgICAgIHRoaXMuZGF0ZUZvcm1hdHRpbmdBdmFpbGFibGUoKSkge1xuICAgICAgICBjb25zdCB0ZW1wTWFwID0gYWxsRGF0ZXNNYXAuaGFzKHRoaXMuZmlyc3RTZWxlY3RlZC5mb3JtYXQuZGF0ZUZvcm1hdClcbiAgICAgICAgICA/IGFsbERhdGVzTWFwLmdldCh0aGlzLmZpcnN0U2VsZWN0ZWQuZm9ybWF0LmRhdGVGb3JtYXQpXG4gICAgICAgICAgOiB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgPT09IGZpZWxkVHlwZXNFbnVtLmRhdGVPbmx5XG4gICAgICAgICAgICA/IGFsbERhdGVzTWFwLmdldChcInNob3J0LWRhdGVcIilcbiAgICAgICAgICAgIDogYWxsRGF0ZXNNYXAuZ2V0KFwic2hvcnQtZGF0ZS1zaG9ydC10aW1lXCIpOyAvLyB1c2VkIHRvIGJlIFwiZGVmYXVsdFwiXG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLCB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgIT09IGZpZWxkVHlwZXNFbnVtLnRpbWVPbmx5ICYmXG4gICAgICAgICAgdGhpcy5kYXRlRm9ybWF0KHRlbXBNYXAuZGF0ZUZvcm1hdCksIHRoaXMuZmlyc3RTZWxlY3RlZEZpZWxkVHlwZSAhPT0gZmllbGRUeXBlc0VudW0udGltZU9ubHkgJiZcbiAgICAgICAgICB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgIT09IGZpZWxkVHlwZXNFbnVtLmRhdGVPbmx5ICYmXG4gICAgICAgICAgdGhpcy5zaG93VGltZSh0ZW1wTWFwLnRpbWVGb3JtYXQpLCB0aGlzLmZpcnN0U2VsZWN0ZWRGaWVsZFR5cGUgIT09IGZpZWxkVHlwZXNFbnVtLmRhdGVPbmx5ICYmXG4gICAgICAgICAgdGhpcy50aW1lRm9ybWF0KHRlbXBNYXAudGltZUZvcm1hdCkpKTtcbiAgICAgIH1cbiAgICAgIC8vIGRlZmF1bHQgc3RyaW5nXG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGRhdGVGb3JtYXR0aW5nQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiAoIShnZXRTZXJ2aWNlVHlwZSh0aGlzLmxheWVyKSA9PT0gc2VydmljZVR5cGVFbnVtLnNjZW5lKSB8fFxuICAgICAgdGhpcy5sYXllci5hc3NvY2lhdGVkTGF5ZXIgIT0gbnVsbCk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGRvbmVCdG4gPSAoaChcImNhbGNpdGUtYnV0dG9uXCIsIHsgYXBwZWFyYW5jZTogXCJvdXRsaW5lLWZpbGxcIiwgc2NhbGU6IFwibVwiLCBzbG90OiBcImZvb3RlclwiLCB3aWR0aDogXCJmdWxsXCIsIG9uQ2xpY2s6ICgpID0+IHRoaXMuYXJjZ2lzQXR0cmlidXRlc0Zvcm1hdHRpbmdEaXNtaXNzZWQuZW1pdChcImRvbmVcIikgfSwgdGhpcy5zdHJpbmdzLmRvbmUpKTtcbiAgICBjb25zdCBhbGlhc0RpdiA9IChoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCB0aGlzLnN0cmluZ3MuZGlzcGxheU5hbWUsIGgoXCJjYWxjaXRlLWlucHV0XCIsIHsgdHlwZTogXCJ0ZXh0XCIsIHJlZjogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgdGhpcy5hbGlhc0lucHV0ID0gZWxlbWVudDtcbiAgICAgIH0sIHZhbHVlOiB0aGlzLmFyY2FkZUV4cE1hcC5oYXModGhpcy5maXJzdFNlbGVjdGVkLmZpZWxkTmFtZSlcbiAgICAgICAgPyB0aGlzLmFyY2FkZUV4cE1hcC5nZXQodGhpcy5maXJzdFNlbGVjdGVkLmZpZWxkTmFtZSkudGl0bGVcbiAgICAgICAgOiB0aGlzLmZpcnN0U2VsZWN0ZWQubGFiZWwsIG9uQ2FsY2l0ZUlucHV0SW5wdXQ6ICgpID0+IHRoaXMuY2hhbmdlQWxpYXMoKSB9KSkpO1xuICAgIHJldHVybiAoaChIb3N0LCB7IGNsYXNzOiBcImpzLWFwcC1mbHlvdXRcIiB9LCBoKFwiY2FsY2l0ZS1wb3BvdmVyXCIsIHsgZGlyOiBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpLCBpZDogXCJtYW5hZ2VQb3BvdmVyX0lkXCIsIHBsYWNlbWVudDogdGhpcy5wb3BvdmVyUHJvcHMucGxhY2VtZW50IHx8IFwibGVhZGluZy1zdGFydFwiLCBvcGVuOiB0aGlzLmlzT3BlbiwgcG9pbnRlckRpc2FibGVkOiB0cnVlLCByZWZlcmVuY2VFbGVtZW50OiB0aGlzLnBvcG92ZXJQcm9wcy5yZWZFbGVtZW50LCBvZmZzZXREaXN0YW5jZTogdGhpcy5wb3BvdmVyUHJvcHMub2Zmc2V0RGlzdGFuY2UgfHwgMCwgb2Zmc2V0U2tpZGRpbmc6IHRoaXMucG9wb3ZlclByb3BzLm9mZnNldFNraWRkaW5nIHx8IDAsIGxhYmVsOiBcIlwiLCBzdHlsZToge1xuICAgICAgICB6SW5kZXg6IFwiMTAwXCJcbiAgICAgIH0sIHJlZjogKG5vZGUpID0+ICh0aGlzLnBvcG92ZXJOb2RlID0gbm9kZSkgfSwgaChcImNhbGNpdGUtcGFuZWxcIiwgeyByZWY6IChlbCkgPT4gKHRoaXMucGFuZWxFbGVtZW50ID0gZWwpLCBjbG9zYWJsZTogdHJ1ZSwgc3R5bGU6IHtcbiAgICAgICAgd2lkdGg6IGAke3RoaXMucG9wb3ZlclByb3BzLnBvcG92ZXJXaWR0aCB8fFxuICAgICAgICAgIHRoaXMucG9wb3ZlclByb3BzLnJlZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGh9cHhgXG4gICAgICB9LCBvbkNhbGNpdGVQYW5lbENsb3NlOiAoKSA9PiB0aGlzLmFyY2dpc0F0dHJpYnV0ZXNGb3JtYXR0aW5nRGlzbWlzc2VkLmVtaXQoKSB9LCBoKFwiZGl2XCIsIHsgc2xvdDogXCJoZWFkZXItY29udGVudFwiIH0sIHRoaXMuc3RyaW5ncy5mb3JtYXR0aW5nKSwgZG9uZUJ0biwgaChcImRpdlwiLCB7IGNsYXNzOiBcImZvcm1hdHRpbmctZGl2XCIgfSwgdGhpcy5zZWxlY3RlZEZpZWxkcy5sZW5ndGggPT09IDEgPyAoYWxpYXNEaXYpIDogKGgoXCJoM1wiLCBudWxsLCBgJHt0aGlzLnN0cmluZ3MubXVsdGlwbGVTZWxlY3Rpb259ICgke3RoaXMuc2VsZWN0ZWRGaWVsZHMubGVuZ3RofSlgKSksIHRoaXMuaGFzQ29tbW9uRGF0YVR5cGVzID8gKHRoaXMuZm9ybWF0dGluZ09wdGlvbnMoKSkgOiAoaChcImgzXCIsIG51bGwsIHRoaXMuc3RyaW5ncy5zZWxlY3RDb21tb24pKSkpKSkpO1xuICB9XG4gIGdldCBob3N0RWxlbWVudCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNBdHRyaWJ1dGVzRm9ybWF0dGluZy5zdHlsZSA9IGFyY2dpc0F0dHJpYnV0ZXNGb3JtYXR0aW5nQ3NzO1xuXG5leHBvcnQgeyBBcmNnaXNBdHRyaWJ1dGVzIGFzIGFyY2dpc19hdHRyaWJ1dGVzLCBBcmNnaXNBdHRyaWJ1dGVzRm9ybWF0dGluZyBhcyBhcmNnaXNfYXR0cmlidXRlc19mb3JtYXR0aW5nIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=