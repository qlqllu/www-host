"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-8f1989"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-table_3.entry.js":
/*!*****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-table_3.entry.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_table: () => (/* binding */ ArcgisTable),
/* harmony export */   arcgis_table_column_info: () => (/* binding */ ArcgisTableColumnInfo),
/* harmony export */   arcgis_table_field_selection: () => (/* binding */ ArcgisTableFieldSelection)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _basic_ee9c674c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basic-ee9c674c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/basic-ee9c674c.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */









const CSS$2 = {
  host: "host",
  content: "content",
  manager: "manager",
  actionBar: "action-bar",
  menuActions: "menu-actions",
  table: "table",
  tooltip: "tooltip"
};

/**
 * Returns true if the layer supports attachments
 * @param layer - FeatureLayer
 */
function hasAttachmentsEnabled(layer) {
  if (!(layer === null || layer === void 0 ? void 0 : layer.capabilities)) {
    return false;
  }
  const { capabilities: { data: { supportsAttachment }, operations: { supportsQueryAttachments } } } = layer;
  return supportsAttachment && supportsQueryAttachments;
}
/**
 * Returns the layer type, and "sublayer" for Sublayer
 * @param layer - FeatureLayer
 */
function getLayerType(layer) {
  if (layer.declaredClass === "esri.layers.support.Sublayer") {
    return "sublayer";
  }
  else {
    return (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.c)(layer);
  }
}

/**
 * gives the parameters for identify
 * @param extent - extent at which the identify should be done
 * @param map - map object
 * @param layer - the layer on which identify should perform
 */
async function getIdentifyParams(extent, map, layer) {
  const [Polygon, Point, ImageIdentifyParameters] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
    "esri/geometry/Polygon",
    "esri/geometry/Point",
    "esri/rest/support/ImageIdentifyParameters"
  ]);
  const polygon = new Polygon(extent.spatialReference);
  polygon.addRing([
    [extent.xmin, extent.ymin],
    [extent.xmin, extent.ymax],
    [extent.xmax, extent.ymax],
    [extent.xmax, extent.ymin],
    [extent.xmin, extent.ymin]
  ]);
  const psX = (extent.xmax - extent.xmin) / map.width;
  const psY = (extent.ymax - extent.ymin) / map.height;
  const psSR = extent.spatialReference;
  const pixelSize = new Point(psX, psY, psSR);
  // Generate Task Params
  const taskParams = new ImageIdentifyParameters();
  taskParams.geometry = polygon;
  taskParams.returnGeometry = true;
  taskParams.pixelSize = pixelSize;
  const mosaicRule = layer.mosaicRule.clone();
  if (layer.definitionExpression) {
    mosaicRule.where = layer.definitionExpression;
  }
  taskParams.mosaicRule = mosaicRule;
  return taskParams;
}

const arcgisTableCss = ".host.sc-arcgis-table{width:100%}.content.sc-arcgis-table{height:100%;display:flex}.manager.sc-arcgis-table{height:100%}.action-bar.sc-arcgis-table{height:100%;border-width:0 1px 0 0;border-style:solid;border-color:var(--calcite-ui-border-2)}.menu-actions.sc-arcgis-table{display:inline-flex;justify-self:stretch}.table.sc-arcgis-table{height:100%}.tooltip.sc-arcgis-table{white-space:nowrap}.arcgis--rtl.sc-arcgis-table .action-bar.sc-arcgis-table{border-width:0 0 0 1px}";

const ArcgisTable = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisTableScaleChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisTableScaleChange", 7);
    this.arcgisTableDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisTableDismissedChange", 7);
    this.selectedOnlyMode = false;
    this.recordsCount = 0;
    this.selectedCount = 0;
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.panelKeyDownHandler = (event) => {
      if (this.dismissible && event.key === "Escape" && !event.defaultPrevented) {
        this.handleCloseClick();
        event.preventDefault();
      }
    };
    this.afterCreatePanel = async (node) => {
      const { layer, view } = this.props;
      if (layer.type === "imagery") {
        this.recordsCount = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.n)(layer);
      }
      else if (layer.type === "wfs") {
        this.recordsCount = await layer.queryFeatureCount();
      }
      else {
        this.recordsCount = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.g)(layer, view);
      }
      this.displayCount();
      this.panelNode = node;
      this.watchTitleHandler = layer.watch("title", () => {
        this.reRender = !this.reRender;
      });
    };
    this.afterCreateCloseButton = (node) => {
      this.closeButtonNode = node;
    };
    this.afterCreateTableNode = (node) => {
      const { props, selectedFeatureIds, reactiveUtils, supportsSelection } = this;
      const { layer, view } = props;
      const { table } = this;
      if (table) {
        return;
      }
      const { tableTemplate } = this;
      const supportsEditing = layer.type === "feature" && layer.effectiveEditingEnabled;
      this.table = new this.FeatureTable({
        layer,
        view,
        tableTemplate,
        editingEnabled: supportsEditing,
        attachmentsEnabled: layer.type === "feature" && hasAttachmentsEnabled(layer),
        highlightOnRowSelectEnabled: supportsSelection,
        multiSortEnabled: false,
        visibleElements: {
          header: false,
          menu: false
        },
        container: node
      });
      // hide selection checkboxes
      if (!supportsSelection) {
        this.table.grid.visibleElements = { selectionColumn: false };
      }
      this.watchHndlSize = reactiveUtils.watch(() => this.table.viewModel.size, (count) => {
        this.recordsCount = count;
        this.displayCount();
      });
      if (supportsSelection) {
        this.table.highlightIds.on("change", (event) => {
          event.removed.forEach((objectId) => {
            const idx = selectedFeatureIds.indexOf(objectId);
            if (idx > -1) {
              selectedFeatureIds.splice(idx, 1);
            }
          });
          event.added.forEach((objectId) => {
            if (selectedFeatureIds.indexOf(objectId) === -1) {
              selectedFeatureIds.push(objectId);
            } // could happen after clicking for popup
          });
          this.selectedCount = selectedFeatureIds.length;
          this.displayCount();
          this.lockRasters();
          this.reRender = !this.reRender;
        });
        this.watchHndlActive = reactiveUtils.watch(() => { var _a, _b; return (_b = (_a = view.popup) === null || _a === void 0 ? void 0 : _a.viewModel) === null || _b === void 0 ? void 0 : _b.active; }, () => {
          const selectedFeature = view.popup.selectedFeature;
          if (selectedFeature && view.popup.visible) {
            // delete entire selection in table
            this.table.highlightIds.removeAll();
            // only add popup features
            const id = view.popup.selectedFeature.getObjectId();
            this.table.highlightIds.push(id);
            selectedFeatureIds.push(id);
          }
          else if (selectedFeature && !view.popup.visible) {
            // popup got closed,
            // delete entire selection in table
            this.table.highlightIds.removeAll();
          }
        });
      }
    };
    this.handleEditingClick = () => {
      const { strings } = this;
      this.removeEditingPopover();
      this.editingPopoverNode = document.createElement("arcgis-table-editing-popover");
      this.editingPopoverNode.referenceElement = this.editingActionNode;
      this.editingPopoverNode.strings = strings;
      this.editingPopoverNode.addEventListener("arcgisTableEditingPopoverClose", (event) => {
        event.stopPropagation();
        this.removeEditingPopover();
        setTimeout(() => this.editingActionNode.setFocus(), 200);
      });
      this.editingPopoverNode.addEventListener("arcgisTableEditingPopoverDisconnected", (event) => {
        event.stopPropagation();
        this.removeEditingPopover();
      });
      document.body.appendChild(this.editingPopoverNode);
      this.editingPopoverNode.setOpen(true);
      // need to wait until it's all visible
      setTimeout(() => this.editingPopoverNode.setFocus(), 100);
    };
    this.handleVisibilityClick = (event) => {
      if (this.fieldSelectionPopover) {
        // already open, do nothing
        return;
      }
      document.removeEventListener("click", this.clickHandler);
      const { layer } = this.props;
      const { props, strings, currentLanguageIntl, tableTemplate, table, fieldSortOrder } = this;
      const popover = document.createElement("arcgis-table-field-selection");
      popover.props = props;
      popover.strings = strings;
      popover.currentLanguage = currentLanguageIntl;
      popover.columnTemplates = tableTemplate.columnTemplates;
      popover.sortBy = fieldSortOrder;
      popover.attachmentsEnabled =
        layer.type === "feature" && hasAttachmentsEnabled(layer) ? table.attachmentsEnabled : false;
      popover.popoverReferenceElement = event.target;
      popover.addEventListener("columnTemplatesChange", (event) => {
        event.stopPropagation();
        this.updateTable(new this.TableTemplate({ columnTemplates: event.detail }));
      });
      popover.addEventListener("attachmentsChange", (event) => {
        event.stopPropagation();
        this.table.attachmentsEnabled = event.detail;
      });
      popover.addEventListener("fieldSortByChange", (event) => {
        event.stopPropagation();
        this.fieldSortOrder = event.detail;
      });
      popover.addEventListener("arcgisTableFieldSelectionClose", () => {
        this.closePopovers();
        setTimeout(() => this.settingsActionNode.setFocus(), 200);
      });
      document.body.appendChild(popover);
      this.fieldSelectionPopover = popover;
      setTimeout(() => document.addEventListener("click", this.clickHandler), 200);
    };
    this.clickHandler = (event) => {
      if (!this.fieldSelectionPopover) {
        // popover got removed another way
        document.removeEventListener("click", this.clickHandler);
      }
      else if (!(0,_basic_ee9c674c_js__WEBPACK_IMPORTED_MODULE_3__.i)(event.target, "arcgis-table-field-selection")) {
        document.body.removeChild(this.fieldSelectionPopover);
        this.fieldSelectionPopover = null;
        document.removeEventListener("click", this.clickHandler);
      }
    };
    this.handleHomeClick = () => {
      const { view, initialViewpoint } = this;
      view.goTo(initialViewpoint);
    };
    this.handleZoomToClick = () => {
      const { layer, view, selectedFeatureIds, Query } = this;
      if (getLayerType(layer) === "imagery") {
        const query = new Query();
        query.outSpatialReference = view.spatialReference;
        query.objectIds = [...selectedFeatureIds];
        query.returnGeometry = true;
        layer.queryRasters(query).then((results) => {
          view.goTo(results.features);
        });
      }
      else {
        const query = layer.createQuery();
        query.outSpatialReference = view.spatialReference;
        query.objectIds = [...selectedFeatureIds];
        query.returnGeometry = true;
        layer.queryFeatures(query).then((results) => {
          view.goTo(results.features);
        });
      }
    };
    this.handleClearClick = () => {
      const { table, supportsSelection } = this;
      const { viewModel, grid } = table;
      table.highlightIds.removeAll();
      viewModel.clearSelectionFilter();
      this.selectedOnlyMode = false;
      if (supportsSelection) {
        grid.visibleElements = { selectionColumn: true };
      }
    };
    this.handleShowSelectedClick = () => {
      const { table } = this;
      const { viewModel } = table;
      this.selectedOnlyMode = true;
      viewModel.filterBySelection();
      this.reRender = !this.reRender;
    };
    this.handleShowAllClick = () => {
      const { table } = this;
      const { viewModel } = table;
      this.selectedOnlyMode = false;
      viewModel.clearSelectionFilter();
      this.reRender = !this.reRender;
    };
    this.handleSelectVisibleClick = async () => {
      const { layer, view, table } = this;
      table.highlightIds.removeAll();
      const extent = view.get("extent");
      // to do to normalize extend
      // if (getLayerType(layer) === "imagery" && (layer as ImageryLayer).version >=10 && view.wrapAround) {
      //   extent = extent._normalize(true);
      // }
      // Convert extent to polygon
      const identifyParams = await getIdentifyParams(extent, view, layer);
      this.selectFeaturesFromIdentify(identifyParams);
    };
    this.handleDisplaySelectedClick = () => {
      this.lockRaster = true;
      this.lockRasters();
    };
    this.handleDisplayAllClick = () => {
      var _a;
      const { MosaicRule } = this;
      this.lockRaster = false;
      // use service's default mosaic rule, filtered out certain mosaic methods that're not supported without additional inputs.
      const layer = this.layer;
      const { sourceJSON } = layer;
      const methods = sourceJSON.allowedMosaicMethods
        .split(",")
        .map((method) => method.trim().toLowerCase());
      methods.unshift(sourceJSON.defaultMosaicMethod.toLowerCase());
      // viewpoint is not available from sourceJSON, sortField can be null too.
      const defaultMosaicMethod = (_a = methods.find((method) => method !== "lockraster" &&
        method !== "viewpoint" &&
        (method !== "byattribute" || !!sourceJSON.sortField))) !== null && _a !== void 0 ? _a : "none";
      layer.mosaicRule = MosaicRule.fromJSON(Object.assign(Object.assign({}, sourceJSON), { defaultMosaicMethod }));
      layer.visible = true;
    };
    this.handleRefreshClick = () => {
      const { table } = this;
      table.refresh();
      this.reRender = !this.reRender;
    };
    this.handleExpandClick = () => {
      const { scale } = this;
      const newScale = scale === _basic_ee9c674c_js__WEBPACK_IMPORTED_MODULE_3__.s.SMALL ? _basic_ee9c674c_js__WEBPACK_IMPORTED_MODULE_3__.s.MEDIUM : _basic_ee9c674c_js__WEBPACK_IMPORTED_MODULE_3__.s.SMALL;
      this.arcgisTableScaleChange.emit(newScale);
      this.scale = newScale;
      this.closePopovers();
    };
    this.handleCloseClick = () => {
      this.arcgisTableDismissedChange.emit();
    };
    this.view = undefined;
    this.layer = undefined;
    this.initialViewpoint = undefined;
    this.scale = _basic_ee9c674c_js__WEBPACK_IMPORTED_MODULE_3__.s.SMALL;
    this.dismissible = false;
    this.tableTemplate = undefined;
    this.reRender = false;
    this.lockRaster = false;
    this.isBarExpanded = false;
    this.selectedFeatureIds = [];
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async setFocus(focusId) {
    var _a, _b;
    if (focusId === "dismiss-button" || (!focusId && this.dismissible)) {
      (_a = this.closeButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus();
      return;
    }
    (_b = this.settingsActionNode) === null || _b === void 0 ? void 0 : _b.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [strings, currentLanguage, currentLanguageIntl] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = strings;
    this.currentLanguage = currentLanguage;
    this.currentLanguageIntl = currentLanguageIntl;
    await this.loadAllModules();
    /*
    // also load JS-API styles
    setDefaultOptions({
      css: true
      url: `https://jsdev.arcgis.com/4.16`,
      css: "https://jsdev.arcgis.com/4.16/esri/css/main.css"
    }); */
    const { view, layer } = this;
    if (getLayerType(layer) === "sublayer") {
      // need to create a FeatureLayer
      this.supportsSelection = false;
      const mapImageSublayer = layer;
      await this.reactiveUtils.whenOnce(() => !view.updating);
      const sublayerFL = await mapImageSublayer.createFeatureLayer();
      await sublayerFL.load();
      this.props = {
        view,
        layer: sublayerFL,
        mapImageSublayer
      };
    }
    else if ((0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.c)(layer) === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.s.imagery) {
      this.supportsSelection = true;
      this.imagerySelection = true;
      this.props = {
        view,
        layer: layer
      };
    }
    else {
      this.supportsSelection = !("isTable" in layer && layer.isTable);
      this.props = {
        view,
        layer: layer
      };
    }
    await this.getFieldTemplates();
  }
  componentDidLoad() {
    requestAnimationFrame(() => this.closeButtonNode.setFocus());
  }
  disconnectedCallback() {
    var _a, _b, _c;
    this.closePopovers();
    const { table } = this;
    table === null || table === void 0 ? void 0 : table.destroy();
    (_a = this.watchTitleHandler) === null || _a === void 0 ? void 0 : _a.remove();
    (_b = this.watchHndlSize) === null || _b === void 0 ? void 0 : _b.remove();
    (_c = this.watchHndlActive) === null || _c === void 0 ? void 0 : _c.remove();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props } = this;
    const { layer } = props;
    if (!layer) {
      return null;
    }
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: CSS$2.host }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        [CSS$2.content]: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: rtl
      } }, this.renderActionBar(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: layer.title, ref: this.afterCreatePanel, onKeyDown: this.panelKeyDownHandler }, this.renderHeaderActions(), this.renderTable()))));
  }
  renderActionBar() {
    const { supportsSelection, selectedFeatureIds, imagerySelection, isBarExpanded, strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-bar", { class: CSS$2.actionBar, onCalciteActionBarToggle: (event) => {
        this.isBarExpanded = event.target.expanded;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", null, supportsSelection && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "zoom", icon: "zoom-to-object", text: strings.zoomToSelection, disabled: !(selectedFeatureIds === null || selectedFeatureIds === void 0 ? void 0 : selectedFeatureIds.length), onClick: this.handleZoomToClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "zoom", label: strings.zoomToSelection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.zoomToSelection))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "home", icon: "home", text: strings.home, onClick: this.handleHomeClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "home", label: strings.home }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.home))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { slot: "menu-tooltip", label: strings.more }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.more))), !imagerySelection && this.renderTableActions(), imagerySelection && supportsSelection && this.renderImageryTableActions(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { slot: "expand-tooltip", label: strings.expand }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.expand))));
  }
  renderTableActions() {
    var _a, _b;
    const { selectedFeatureIds, supportsSelection, table, isBarExpanded, strings } = this;
    const hasSelectionFilter = !!((_b = (_a = table === null || table === void 0 ? void 0 : table.viewModel) === null || _a === void 0 ? void 0 : _a.activeFilters) === null || _b === void 0 ? void 0 : _b.find((filter) => filter.type === "selection"));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", null, supportsSelection && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "erase", icon: "erase", text: strings.clearSelection, disabled: !(selectedFeatureIds === null || selectedFeatureIds === void 0 ? void 0 : selectedFeatureIds.length), onClick: this.handleClearClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "erase", label: strings.clearSelection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.clearSelection))))), supportsSelection && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "showSelected", icon: "selected-items-filter", text: strings.showSelected, disabled: !(selectedFeatureIds === null || selectedFeatureIds === void 0 ? void 0 : selectedFeatureIds.length), onClick: this.handleShowSelectedClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "showSelected", label: strings.showSelected }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.showSelected))))), supportsSelection && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "showAll", icon: "list", text: strings.showAll, disabled: !hasSelectionFilter, onClick: this.handleShowAllClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "showAll", label: strings.showAll }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.showAll))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "refresh", icon: "refresh", text: strings.refresh, onClick: this.handleRefreshClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "refresh", label: strings.refresh }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.refresh))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { slot: "menu-tooltip", label: strings.more }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.more))));
  }
  renderImageryTableActions() {
    const { selectedFeatureIds, lockRaster, isBarExpanded, strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "erase", icon: "erase", text: strings.clearSelection, disabled: !(selectedFeatureIds === null || selectedFeatureIds === void 0 ? void 0 : selectedFeatureIds.length), onClick: this.handleClearClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "erase", label: strings.clearSelection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.clearSelection))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "visible", icon: "select-visible", text: strings.selectVisible, onClick: this.handleSelectVisibleClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "visible", label: strings.selectVisible }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.selectVisible))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "displayImage", icon: lockRaster ? "unlock" : "lock", text: lockRaster ? strings.displayAll : strings.displaySelected, onClick: lockRaster ? this.handleDisplayAllClick : this.handleDisplaySelectedClick }), !isBarExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "displayImage", label: lockRaster ? strings.displayAll : strings.displaySelected }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, lockRaster ? strings.displayAll : strings.displaySelected))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { slot: "menu-tooltip", label: strings.more }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.tooltip }, strings.more))));
  }
  renderHeaderActions() {
    const { layer, scale, strings, dismissible } = this;
    const supportsEditingOnlyForUser = "type" in layer &&
      layer.type === "feature" &&
      layer.effectiveEditingEnabled &&
      !layer.editingEnabled;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-actions-end", class: CSS$2.menuActions }, supportsEditingOnlyForUser && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "table-editing-action", text: strings.layerEditing, scale: "m", onClick: this.handleEditingClick, ref: (node) => (this.editingActionNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "exclamation-mark-circle" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: "table-settings-action", text: strings.fieldVisibility, scale: "m", onClick: this.handleVisibilityClick, ref: (node) => (this.settingsActionNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "gear" })), scale === _basic_ee9c674c_js__WEBPACK_IMPORTED_MODULE_3__.s.SMALL ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { key: "expand-table", text: strings.expand, scale: "s", onClick: this.handleExpandClick }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "chevrons-up" }))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { key: "expand", text: strings.shrink, scale: "s", onClick: this.handleExpandClick }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "chevrons-down" }))), dismissible ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.close, icon: "x", onClick: this.handleCloseClick, ref: this.afterCreateCloseButton })) : null));
  }
  renderTable() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.table }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: this.afterCreateTableNode })));
  }
  removeEditingPopover() {
    if (this.editingPopoverNode) {
      try {
        document.body.removeChild(this.editingPopoverNode);
        this.editingPopoverNode = null;
      }
      catch (e) { }
    }
  }
  handleHideClick(fieldName) {
    this.table.hideColumn(fieldName);
    this.tableTemplate.columnTemplates.forEach((columnTemplate) => {
      if (columnTemplate.fieldName === fieldName) {
        columnTemplate.visible = false;
      }
    });
  }
  handleColumnInfo(fieldName) {
    const { currentLanguageIntl } = this;
    if (this.columnInfoPopover) {
      // already open, hide it
      this.columnInfoPopover.parentNode.removeChild(this.columnInfoPopover);
    }
    const { props, strings } = this;
    const popover = document.createElement("arcgis-table-column-info");
    popover.props = props;
    popover.strings = strings;
    popover.currentLanguage = currentLanguageIntl;
    popover.fieldName = fieldName;
    popover.popoverReferenceElement = document.getElementById("table-settings-action");
    popover.addEventListener("arcgisTableColumnInfoClose", () => {
      this.closePopovers();
      setTimeout(() => this.closeButtonNode.setFocus(), 100);
    });
    document.body.appendChild(popover);
    this.columnInfoPopover = popover;
  }
  closePopovers() {
    document.removeEventListener("click", this.clickHandler);
    if (this.fieldSelectionPopover) {
      document.body.removeChild(this.fieldSelectionPopover);
      this.fieldSelectionPopover = null;
    }
    if (this.columnInfoPopover) {
      document.body.removeChild(this.columnInfoPopover);
      this.columnInfoPopover = null;
    }
    this.removeEditingPopover();
  }
  async selectFeaturesFromIdentify(params) {
    var _a;
    const { layer, imageService } = this;
    let queryResult = [];
    if (layer.visible) {
      const result = await imageService.identify(layer.url, params);
      if (((_a = result === null || result === void 0 ? void 0 : result.catalogItems) === null || _a === void 0 ? void 0 : _a.features) && result.catalogItemVisibilities) {
        for (let i = 0; i < result.catalogItems.features.length; i++) {
          if (result.catalogItemVisibilities[i] > 0) {
            queryResult.push(result.catalogItems.features[i]);
          }
        }
      }
      const graphics = queryResult.map((feature) => new this.Graphic({
        attributes: feature.attributes,
        geometry: feature.geometry,
        sourceLayer: this.table.layer,
        layer: this.table.layer
      }));
      if (!graphics.length) {
        this.table.highlightIds.removeAll();
      }
      else {
        this.table.selectRows(graphics);
      }
    }
  }
  async lockRasters() {
    const { selectedFeatureIds, layer, imagerySelection, MosaicRule } = this;
    if (this.lockRaster) {
      if (imagerySelection && selectedFeatureIds.length) {
        const ids = [...selectedFeatureIds];
        const mosaicRuleObject = new MosaicRule();
        mosaicRuleObject.method = "lock-raster";
        mosaicRuleObject.lockRasterIds = ids;
        const where = layer.definitionExpression;
        if (where) {
          mosaicRuleObject.where = where;
        }
        layer.mosaicRule = mosaicRuleObject;
        layer.visible = true;
      }
      else {
        layer.visible = false;
      }
    }
  }
  updateTable(tableTemplate) {
    this.table.tableTemplate = tableTemplate;
  }
  async getFieldTemplates() {
    var _a;
    const { layer } = this.props;
    const { strings } = this;
    const getMenuConfig = (fieldName) => {
      return {
        items: [
          {
            label: strings.information,
            iconClass: "esri-icon-description",
            autoCloseMenu: true,
            clickFunction: () => {
              this.handleColumnInfo(fieldName);
            }
          },
          {
            label: strings.hideField,
            iconClass: "esri-icon-non-visible",
            autoCloseMenu: true,
            clickFunction: () => {
              this.handleHideClick(fieldName);
            }
          }
        ]
      };
    };
    this.tableTemplate = new this.TableTemplate({ columnTemplates: [] });
    // use default popup settings for field visibility
    const fieldInfos = this.popupUtils.createFieldInfos({
      fields: layer.fields,
      objectIdField: layer.objectIdField
    });
    const fieldInfosMap = new Map(fieldInfos.map((fieldInfo) => [
      fieldInfo.fieldName,
      fieldInfo
    ]));
    let popupFieldsMap;
    if ((_a = layer.popupTemplate) === null || _a === void 0 ? void 0 : _a.fieldInfos) {
      const { popupTemplate } = layer;
      popupFieldsMap = new Map(popupTemplate.fieldInfos.map((fieldInfo) => [
        fieldInfo.fieldName,
        fieldInfo
      ]));
      /* popupTemplate.fieldInfos.forEach((fieldInfo: FieldInfo) => {
        if (fieldInfo.fieldName.startsWith("expression/")) {
          // TODO
        } else if (fieldInfo.fieldName.startsWith("relationships/")) {
          // TODO
        }
      }); */
      // watch for changes
      this.reactiveUtils.watch(() => layer.popupTemplate, () => {
        const { popupTemplate } = layer;
        this.tableTemplate.columnTemplates.forEach((columnTemplate) => {
          popupTemplate.fieldInfos.forEach((fieldInfo) => {
            if (columnTemplate.fieldName === fieldInfo.fieldName) {
              columnTemplate.label = fieldInfo.label;
              columnTemplate.format = fieldInfo.format;
            }
          });
        });
        this.updateTable(this.tableTemplate);
      });
    }
    layer.fields.forEach((field) => {
      if (field.type === "geometry") {
        return;
      }
      const fieldInfo = fieldInfosMap.get(field.name);
      const popupFieldInfo = popupFieldsMap === null || popupFieldsMap === void 0 ? void 0 : popupFieldsMap.get(field.name);
      const fieldColumnTemplate = {
        fieldName: field.name,
        label: (popupFieldInfo === null || popupFieldInfo === void 0 ? void 0 : popupFieldInfo.label) || field.alias || field.name,
        visible: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.visible,
        format: (popupFieldInfo === null || popupFieldInfo === void 0 ? void 0 : popupFieldInfo.format) || this.getDefaultFormat(field),
        menuConfig: getMenuConfig(field.name)
      }; /* FieldColumnTemplate */
      this.tableTemplate.columnTemplates.push(fieldColumnTemplate);
    });
  }
  getDefaultFormat(field) {
    if (["integer", "small-integer", "big-integer"].indexOf(field.type) > -1) {
      return new this.FieldInfoFormat({ digitSeparator: false, places: 0 });
    }
    else if (["single", "double", "long"].indexOf(field.type) > -1) {
      return new this.FieldInfoFormat({
        digitSeparator: false,
        places: 2
      });
    }
    else if (["date", "time-only", "timestamp-offset"].indexOf(field.type) > -1) {
      return new this.FieldInfoFormat({
        dateFormat: "short-date-short-time"
      });
    }
    else if ("date-only" === field.type) {
      return new this.FieldInfoFormat({
        dateFormat: "short-date"
      });
    }
    return undefined;
  }
  displayCount() {
    const { strings, panelNode, recordsCount, selectedCount, supportsSelection, intl } = this;
    if (!panelNode) {
      return;
    }
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      digitSeparator: true
    });
    const recordsCountStr = intl.formatNumber(recordsCount, numberFormatIntlOptions);
    if (!(0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.i)(selectedCount) || !supportsSelection) {
      if (recordsCount === 0) {
        panelNode.description = strings.zeroRecords;
      }
      else if (recordsCount === 1) {
        panelNode.description = strings.oneRecord;
      }
      else {
        panelNode.description = strings.numRecords.replace("${count}", `${recordsCountStr}`);
      }
    }
    else if (selectedCount === 0) {
      if (recordsCount === 0) {
        panelNode.description = strings.zeroRecordsZeroSel;
      }
      else if (recordsCount === 1) {
        panelNode.description = strings.oneRecordZeroSel;
      }
      else {
        panelNode.description = strings.numRecordsZeroSel.replace("${count}", `${recordsCountStr}`);
      }
    }
    else if (selectedCount === 1) {
      if (recordsCount === 0) {
        panelNode.description = strings.zeroRecordsOneSel;
      }
      else if (recordsCount === 1) {
        panelNode.description = strings.oneRecordOneSel;
      }
      else {
        panelNode.description = strings.numRecordsOneSel.replace("${count}", `${recordsCountStr}`);
      }
    }
    else {
      // n selected
      const selectedCountStr = intl.formatNumber(selectedCount, numberFormatIntlOptions);
      if (recordsCount === 0) {
        panelNode.description = strings.zeroRecordsNumSel.replace("${countSel}", `${selectedCountStr}`);
      }
      else if (recordsCount === 1) {
        panelNode.description = strings.oneRecordNumSel.replace("${countSel}", `${selectedCountStr}`);
      }
      else {
        panelNode.description = strings.numRecordsNumSel
          .replace("${count}", `${recordsCountStr}`)
          .replace("${countSel}", `${selectedCountStr}`);
      }
    }
  }
  async loadAllModules() {
    const [FeatureTable, TableTemplate, popupUtils, reactiveUtils, FieldInfoFormat, Query, imageService, MosaicRule, Graphic, intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
      "esri/widgets/FeatureTable",
      "esri/widgets/FeatureTable/support/TableTemplate",
      "esri/support/popupUtils",
      "esri/core/reactiveUtils",
      "esri/popup/support/FieldInfoFormat",
      "esri/rest/support/Query",
      "esri/rest/imageService",
      "esri/layers/support/MosaicRule",
      "esri/Graphic",
      "esri/intl"
    ]);
    this.FeatureTable = FeatureTable;
    this.TableTemplate = TableTemplate;
    this.popupUtils = popupUtils;
    this.reactiveUtils = reactiveUtils;
    this.FieldInfoFormat = FieldInfoFormat;
    this.Query = Query;
    this.imageService = imageService;
    this.MosaicRule = MosaicRule;
    this.Graphic = Graphic;
    this.intl = intl;
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisTable.style = arcgisTableCss;

const CSS$1 = {
  popover: "popover",
  flow: "flow",
  info: "info"
};

const arcgisTableColumnInfoCss = ".flow{max-height:400px}.info{background-color:#ffffff;max-height:400px;width:20vw;max-width:420px;min-width:240px}";

const ArcgisTableColumnInfo = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisTableColumnInfoClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisTableColumnInfoClose", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.afterCreatePopover = (node) => {
      this.popoverNode = node;
    };
    this.afterCreateCloseButton = (node) => {
      this.closeButtonNode = node;
    };
    this.afterCreateFieldInfo = (node) => {
      node.addEventListener("arcgisFieldInfoComplete", () => this.reposition());
    };
    this.handleCloseClick = () => {
      this.arcgisTableColumnInfoClose.emit();
    };
    this.props = undefined;
    this.fieldName = undefined;
    this.popoverReferenceElement = undefined;
    this.strings = undefined;
    this.currentLanguage = undefined;
    this.isOpen = false;
    this.reRender = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { layer } = this.props;
    this.fieldsMap = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.d)(layer);
  }
  componentDidLoad() {
    this.reposition();
    this.isOpen = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.closeButtonNode.setFocus()), 100);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { fieldName, fieldsMap, popoverReferenceElement } = this;
    const field = fieldsMap.get(fieldName);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { placement: "leading", dir: document.dir, open: this.isOpen, pointerDisabled: true, referenceElement: popoverReferenceElement, offsetDistance: -48, offsetSkidding: 0, class: CSS$1.popover, label: "", ref: this.afterCreatePopover }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS$1.flow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: field.alias || field.name, description: fieldName }, this.renderCloseButton(), this.renderInfo())))));
  }
  renderCloseButton() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.close, scale: "s", slot: "header-actions-end", onClick: this.handleCloseClick, ref: this.afterCreateCloseButton, icon: "x" }));
  }
  renderInfo() {
    const { layer, view } = this.props;
    const { fieldName, currentLanguage } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-field-info", { fieldName: fieldName, layer: layer, view: view, lang: currentLanguage, class: CSS$1.info, ref: this.afterCreateFieldInfo }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisTableColumnInfo.style = arcgisTableColumnInfoCss;

const CSS = {
  popover: "popover",
  flow: "flow",
  info: "info",
  selectButton: "select-button"
};

const arcgisTableFieldSelectionCss = ".flow{max-height:400px;width:280px}.content{max-height:80vh}.info{background-color:#ffffff}.select-button{margin:4px 0}";

const ArcgisTableFieldSelection = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisTableFieldSelectionClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisTableFieldSelectionClose", 7);
    this.columnTemplatesChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "columnTemplatesChange", 7);
    this.fieldSortByChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "fieldSortByChange", 7);
    this.attachmentsChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "attachmentsChange", 7);
    this.waitHandler = null;
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.afterCreatePopover = (node) => {
      this.popoverNode = node;
    };
    this.afterCreateFlow = (node) => {
      this.flowNode = node;
    };
    this.afterCreateFlowItem = (node) => {
      this.firstPanelNode = node;
    };
    this.afterCreateCloseButton = (node) => {
      this.closeButtonNode = node;
    };
    this.afterCreatePickList = (node) => {
      this.pickListNode = node;
    };
    this.afterCreatePickListItem = (node) => {
      node.addEventListener("calciteListItemChange", (event) => {
        this.handleCalciteListItemChange(event);
      });
    };
    this.afterCreatePickListItemAttachments = (node) => {
      node.addEventListener("calciteListItemChange", (event) => {
        this.handleCalciteAttachmentsItemChange(event);
      });
    };
    this.handleCloseClick = () => {
      this.arcgisTableFieldSelectionClose.emit();
    };
    this.props = undefined;
    this.columnTemplates = undefined;
    this.attachmentsEnabled = false;
    this.popoverReferenceElement = undefined;
    this.sortBy = undefined;
    this.strings = undefined;
    this.currentLanguage = undefined;
    this.reRender = false;
    this.lastSortBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.display;
    this.filterFields = null;
    this.isOpen = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { layer } = this.props;
    this.fieldsMap = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_4__.d)(layer);
    this.totalCounts = this.getTotalFieldTypeCount();
    this.lastSortBy = this.sortBy || _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.default;
  }
  componentDidLoad() {
    this.reposition();
    this.isOpen = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.closeButtonNode.setFocus()), 200);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { strings, popoverReferenceElement } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { placement: "leading", dir: document.dir, open: this.isOpen, pointerDisabled: true, referenceElement: popoverReferenceElement, offsetDistance: -48, offsetSkidding: 0, class: CSS.popover, label: "", ref: this.afterCreatePopover }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS.flow, ref: this.afterCreateFlow }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.fieldVisibility, ref: this.afterCreateFlowItem }, this.renderCloseButton(), this.renderDoneButton(), this.renderPickList())))));
  }
  renderCloseButton() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.close, scale: "s", slot: "header-actions-end", onClick: this.handleCloseClick, icon: "x", ref: this.afterCreateCloseButton }));
  }
  renderDoneButton() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", scale: "m", slot: "footer", width: "full", onClick: this.handleCloseClick, label: strings.done }, strings.done));
  }
  renderPickList() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { class: "content", "drag-enabled": false, multiple: true, filterEnabled: true, filterPlaceholder: strings.filterFields, ref: this.afterCreatePickList, onCalciteListFilter: (event) => {
        const node = event.target;
        this.filterFields = node.filteredItems;
      } }, this.renderSelection(), this.renderSort(), this.renderPickListItems(), this.renderAttachmentPickListItem()));
  }
  renderSelection() {
    const { filterFields, strings } = this;
    const containsAll = this.filterContainsAll();
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { key: `${filterFields}`, class: CSS.selectButton, appearance: "transparent", scale: "s", width: "full", onClick: () => this.handleSelectionAllClick(containsAll), label: containsAll ? strings.deselectAll : strings.selectAll }, containsAll ? strings.deselectAll : strings.selectAll));
  }
  renderSort() {
    const { lastSortBy, totalCounts, strings } = this;
    let hasNumberFields = totalCounts.number > 0;
    let hasStringFields = totalCounts.string > 0;
    let hasDateFields = totalCounts.date > 0;
    let canShowSort = hasNumberFields && (hasStringFields || hasDateFields)
      ? true
      : hasStringFields && hasDateFields
        ? true
        : false;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { slot: "menu-actions", placement: "bottom-end", overlayPositioning: "fixed" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", text: strings.sortFields, label: strings.sortFields, "aria-label": strings.sortFields }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { "group-title": strings.sortBy }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: lastSortBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.default, onClick: () => {
        this.lastSortBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.default;
        this.fieldSortByChange.emit(this.lastSortBy);
      } }, strings.default), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: lastSortBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.display, onClick: () => {
        this.lastSortBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.display;
        this.fieldSortByChange.emit(this.lastSortBy);
      } }, strings.sortByDisplayName), canShowSort ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: lastSortBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.type, onClick: () => {
        this.lastSortBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.type;
        this.fieldSortByChange.emit(this.lastSortBy);
      } }, strings.sortByType)) : null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: lastSortBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.field, onClick: () => {
        this.lastSortBy = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.field;
        this.fieldSortByChange.emit(this.lastSortBy);
      } }, strings.sortByFieldName))));
  }
  renderPickListItems() {
    const { lastSortBy } = this;
    let columnTemplates = this.cloneFieldTemplates();
    if (lastSortBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.display) {
      columnTemplates = this.sortFieldsAlphabetically(columnTemplates);
    }
    else if (lastSortBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.type) {
      columnTemplates = this.sortFieldsByType(this.sortFieldsAlphabetically(columnTemplates));
    }
    else if (lastSortBy === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_5__.L.field) {
      columnTemplates.sort((a, b) => {
        return a.fieldName.localeCompare(b.fieldName);
      });
    }
    else ;
    return columnTemplates.map((columnTemplate) => this.renderPickListItem(columnTemplate));
  }
  renderPickListItem(columnTemplate) {
    const { strings, filterFields } = this;
    let isHidden = false;
    if (filterFields &&
      !filterFields.some((filterField) => filterField.value === columnTemplate.fieldName)) {
      isHidden = true;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: columnTemplate.fieldName, label: columnTemplate.label,
      //description={fieldConfig.name}
      value: columnTemplate.fieldName, selected: columnTemplate.visible, hidden: isHidden, ref: this.afterCreatePickListItem }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: strings.info, onClick: (event) => {
        event.stopPropagation();
        this.handleInfoClick(columnTemplate, event.target);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "information" }))));
  }
  renderAttachmentPickListItem() {
    const { layer } = this.props;
    const { strings, attachmentsEnabled } = this;
    if (layer.type === "imagery") {
      return null;
    }
    if (layer.type === "feature" && !hasAttachmentsEnabled(layer)) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: "attachments", label: strings.photosAndFiles, description: strings.attachments, value: "__attachments", selected: attachmentsEnabled, hidden: false, ref: this.afterCreatePickListItemAttachments }));
  }
  handleSelectionAllClick(containsAll) {
    const { columnTemplates, filterFields } = this;
    // update fieldConfigs
    columnTemplates.forEach((columnTemplate) => {
      if (!filterFields ||
        filterFields.some((filterField) => filterField.value === columnTemplate.fieldName)) {
        columnTemplate.visible = !containsAll;
      }
    });
    // update pick-list-items
    this.pickListNode
      .querySelectorAll("calcite-pick-list-item")
      .forEach((item) => {
      if (!filterFields ||
        filterFields.some((filterField) => filterField.value === item.getAttribute("value"))) {
        if (!containsAll) {
          item.setAttribute("selected", "true");
        }
        else {
          item.removeAttribute("selected");
        }
      }
    });
    this.reRender = !this.reRender;
  }
  handleCalciteListItemChange({ detail: { value, selected } }) {
    const { columnTemplates } = this;
    columnTemplates.forEach((columnTemplate) => {
      if (columnTemplate.fieldName === value) {
        columnTemplate.visible = selected;
      }
    });
    // don't fire too many updates at once
    // e.g. after a user clicks 'Select all'
    if (this.waitHandler) {
      clearTimeout(this.waitHandler);
    }
    this.waitHandler = setTimeout(() => {
      this.waitHandler = null;
      this.columnTemplatesChange.emit(this.cloneFieldTemplates());
      // causes a state change
      this.reRender = !this.reRender;
    }, 100);
  }
  handleCalciteAttachmentsItemChange({ detail: { selected } }) {
    this.attachmentsChange.emit(selected);
    this.attachmentsEnabled = selected;
  }
  handleInfoClick(columnTemplate, action) {
    var _a;
    const { layer, view } = this.props;
    const { flowNode, firstPanelNode, currentLanguage } = this;
    const rect = firstPanelNode.getBoundingClientRect();
    const fieldInfo = document.createElement("arcgis-field-info");
    fieldInfo.lang = currentLanguage;
    fieldInfo.fieldName = columnTemplate.fieldName;
    fieldInfo.layer = layer;
    fieldInfo.view = view;
    fieldInfo.className = CSS.info;
    const fieldInfoFlowItem = document.createElement("calcite-flow-item");
    fieldInfoFlowItem.heading = (_a = columnTemplate.label) !== null && _a !== void 0 ? _a : columnTemplate.fieldName;
    fieldInfoFlowItem.description = columnTemplate.fieldName;
    // making the switch smoothly
    fieldInfoFlowItem.style.height = `${rect.height}px`;
    fieldInfoFlowItem.style.width = `${rect.width}px`;
    fieldInfoFlowItem.appendChild(fieldInfo);
    fieldInfoFlowItem.addEventListener("calciteFlowItemBack", () => requestAnimationFrame(() => action.setFocus()));
    flowNode.appendChild(fieldInfoFlowItem);
    setTimeout(() => fieldInfoFlowItem.setFocus(), 200);
    this.reposition();
  }
  cloneFieldTemplates() {
    return this.columnTemplates.map((columnTemplate) => {
      return Object.assign({}, columnTemplate);
    });
  }
  // check if filter contains all current field configs
  filterContainsAll() {
    const { columnTemplates, filterFields, attachmentsEnabled } = this;
    if (filterFields) {
      // attachment column is part of the filter, but not part of the fieldConfigs
      const filterFieldsFields = filterFields
        .filter((filterField) => filterField.value !== "__attachments")
        .map((filterField) => ({ value: filterField.value, selected: filterField.selected }));
      const fieldConfigsInFilter = columnTemplates.filter((columnTemplate) => filterFieldsFields.some((filterField) => columnTemplate.fieldName === filterField.value));
      let hasAttachments = filterFields.length !== filterFieldsFields.length;
      const containsAll = filterFieldsFields.every((filter) => !fieldConfigsInFilter.some((columnTemplate) => columnTemplate.fieldName === filter.value && !columnTemplate.visible));
      return containsAll && ((hasAttachments && attachmentsEnabled) || !hasAttachments);
    }
    else {
      return !columnTemplates.some((columnTemplate) => {
        return !columnTemplate.visible;
      });
    }
  }
  getTotalFieldTypeCount() {
    const { columnTemplates, fieldsMap } = this;
    const counts = { string: 0, number: 0, date: 0 };
    columnTemplates.forEach((columnTemplate) => {
      const field = fieldsMap.get(columnTemplate.fieldName);
      switch (field.type) {
        case "small-integer":
        case "big-integer":
        case "integer":
        case "single":
        case "double":
        case "long":
        case "oid":
        case "guid":
          counts.number++;
          break;
        case "string":
          counts.string++;
          break;
        case "date":
        case "date-only":
        case "time-only":
        case "timestamp-offset":
          counts.date++;
          break;
      }
    });
    return counts;
  }
  sortFieldsAlphabetically(columnTemplates) {
    return columnTemplates.sort((a, b) => {
      return a.label.charAt(0) === "_"
        ? 1
        : b.label.charAt(0) === "_"
          ? -1
          : a.label.localeCompare(b.label);
    });
  }
  sortFieldsByType(columnTemplates) {
    // order: number, string, date, oid, guid
    const { fieldsMap } = this;
    return columnTemplates
      .filter((columnTemplate) => ["small-integer", "big-integer", "integer", "single", "double", "long"].indexOf(fieldsMap.get(columnTemplate.fieldName).type) > -1)
      .map((columnTemplate) => {
      return columnTemplate;
    })
      .concat(columnTemplates
      .filter((columnTemplate) => fieldsMap.get(columnTemplate.fieldName).type === "string")
      .map((columnTemplate) => {
      return columnTemplate;
    }))
      .concat(columnTemplates
      .filter((columnTemplate) => ["date", "date-only", "time-only", "timestamp-offset"].indexOf(fieldsMap.get(columnTemplate.fieldName).type) > -1)
      .map((columnTemplate) => {
      return columnTemplate;
    }))
      .concat(columnTemplates
      .filter((columnTemplate) => fieldsMap.get(columnTemplate.fieldName).type === "oid")
      .map((columnTemplate) => {
      return columnTemplate;
    }))
      .concat(columnTemplates
      .filter((columnTemplate) => fieldsMap.get(columnTemplate.fieldName).type === "guid")
      .map((columnTemplate) => {
      return columnTemplate;
    }))
      .concat(columnTemplates
      .filter((columnTemplate) => [
      "small-integer",
      "big-integer",
      "integer",
      "single",
      "double",
      "long",
      "string",
      "date",
      "date-only",
      "time-only",
      "timestamp-offset",
      "oid",
      "guid"
    ].indexOf(fieldsMap.get(columnTemplate.fieldName).type) === -1)
      .map((columnTemplate) => {
      return columnTemplate;
    }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisTableFieldSelection.style = arcgisTableFieldSelectionCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/basic-ee9c674c.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/basic-ee9c674c.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isDefined),
/* harmony export */   i: () => (/* binding */ isInNode),
/* harmony export */   s: () => (/* binding */ scales)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
var scales;
(function (scales) {
  scales["SMALL"] = "s";
  scales["MEDIUM"] = "m";
  scales["LARGE"] = "l";
})(scales || (scales = {}));
/**
 * Returns true if the value is defined
 * @param value - value to check
 */
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Returns true if node has nodeName or is contained in a parent node with nodeName
 * @param node
 * @param nodeName
 */
function isInNode(node, nodeName) {
  while (node) {
    if (node.nodeName === nodeName.toUpperCase()) {
      return true;
    }
    node = node.parentElement;
  }
  return false;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,