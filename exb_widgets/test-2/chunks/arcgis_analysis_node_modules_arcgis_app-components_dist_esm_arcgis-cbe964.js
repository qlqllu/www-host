"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-cbe964"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-sketch_5.entry.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-sketch_5.entry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_sketch: () => (/* binding */ ArcgisSketch),
/* harmony export */   arcgis_sketch_content: () => (/* binding */ ArcgisSketchContent),
/* harmony export */   arcgis_sketch_shortcuts: () => (/* binding */ ArcgisSketchShortcuts),
/* harmony export */   arcgis_sketch_snapping: () => (/* binding */ ArcgisSketchSnapping),
/* harmony export */   arcgis_sketch_tools: () => (/* binding */ ArcgisSketchTools)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage-d7f5822e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fontUtil-1aa3a32c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/fontUtil-1aa3a32c.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */












const defaultLineSymbol = async (mapView, ColorUtils) => {
  const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
  return {
    type: "simple-line",
    color: backgroundThemeColor === "light" ? [0, 0, 0] : [255, 255, 255],
    width: 1 * 0.75
  };
};
const defaultPolygonSymbol = async (mapView, ColorUtils) => {
  const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
  return {
    type: "simple-fill",
    color: backgroundThemeColor === "light" ? [0, 0, 0, 0.25] : [255, 255, 255, 0.25],
    style: "solid",
    outline: {
      color: backgroundThemeColor === "light" ? [0, 0, 0] : [255, 255, 255],
      width: 1 * 0.75
    }
  };
};
const defaultTextSymbol = async (mapView, ColorUtils, TextSymbol, text) => {
  const backgroundColor = await ColorUtils.getBackgroundColor(mapView);
  const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
  return new TextSymbol({
    text,
    color: backgroundThemeColor === "light"
      ? [0, 0, 0]
      : backgroundThemeColor === "dark"
        ? [255, 255, 255]
        : backgroundColor || [0, 0, 0],
    haloColor: null,
    haloSize: 1 * 0.75,
    font: {
      size: 22 * 0.75,
      family: "Arial",
      weight: "bold"
    },
    lineWidth: 512
  });
};
const defaultCimSymbol = async (CIMSymbol, mapView, ColorUtils) => {
  const backgroundThemeColor = await ColorUtils.getBackgroundColorTheme(mapView);
  return new CIMSymbol({
    data: {
      type: "CIMSymbolReference",
      symbol: {
        type: "CIMPointSymbol",
        symbolLayers: [
          {
            type: "CIMVectorMarker",
            enable: true,
            colorLocked: true,
            anchorPoint: { x: 0, y: -1.75 },
            anchorPointUnits: "Relative",
            size: 5.7,
            frame: { xmin: 0, ymin: 0, xmax: 84.3, ymax: 84.3 },
            markerGraphics: [
              {
                type: "CIMMarkerGraphic",
                geometry: {
                  rings: [
                    [
                      [83.2, 32.5],
                      [84.3, 40.7],
                      [83.8, 48.9],
                      [81.7, 56.9],
                      [78.1, 64.3],
                      [73, 70.9],
                      [66.9, 76.4],
                      [59.7, 80.5],
                      [51.9, 83.2],
                      [43.7, 84.3],
                      [35.4, 83.8],
                      [27.4, 81.7],
                      [20, 78],
                      [13.4, 73],
                      [7.9, 66.8],
                      [3.8, 59.7],
                      [1.1, 51.9],
                      [0, 43.7],
                      [0.5, 35.4],
                      [2.6, 27.4],
                      [6.3, 20],
                      [11.3, 13.4],
                      [17.5, 7.9],
                      [24.7, 3.8],
                      [32.5, 1.1],
                      [39.8, 0.1],
                      [47.1, 0.3],
                      [54.3, 1.8],
                      [61.1, 4.5],
                      [67.4, 8.4],
                      [72.9, 13.3],
                      [77.4, 19.1],
                      [80.9, 25.5],
                      [83.2, 32.5]
                    ]
                  ]
                },
                symbol: {
                  type: "CIMPolygonSymbol",
                  symbolLayers: [
                    {
                      type: "CIMSolidFill",
                      enable: true,
                      color: backgroundThemeColor === "light" ? [242, 242, 242, 255] : [255, 255, 255, 255]
                    }
                  ]
                }
              }
            ],
            scaleSymbolsProportionally: true,
            respectFrame: true,
            rotation: 0
          },
          {
            type: "CIMVectorMarker",
            enable: true,
            anchorPoint: { x: 0, y: -0.5 },
            anchorPointUnits: "Relative",
            size: 15,
            frame: { xmin: 0, ymin: 0, xmax: 197.7, ymax: 294.7 },
            markerGraphics: [
              {
                type: "CIMMarkerGraphic",
                geometry: {
                  rings: [
                    [
                      [98.9, 0],
                      [119.4, 23.2],
                      [139.4, 49.3],
                      [156.8, 75.2],
                      [171.2, 100.8],
                      [182.4, 125.3],
                      [190.6, 148.8],
                      [195.7, 171.4],
                      [197.7, 192.9],
                      [197.7, 195.8],
                      [197.7, 200.3],
                      [197.6, 202.5],
                      [197.5, 204.8],
                      [197.3, 207.1],
                      [197, 209.4],
                      [196.7, 211.7],
                      [196.4, 214.1],
                      [196, 216.4],
                      [195.5, 218.7],
                      [195, 221.1],
                      [194.4, 223.4],
                      [193.7, 225.8],
                      [193, 228.1],
                      [192.2, 230.5],
                      [191.4, 232.8],
                      [190.5, 235.1],
                      [189.5, 237.5],
                      [188.5, 239.7],
                      [187.4, 242],
                      [186.2, 244.3],
                      [185, 246.5],
                      [183.7, 248.7],
                      [182.4, 250.9],
                      [181, 253.1],
                      [179.5, 255.2],
                      [178, 257.3],
                      [176.4, 259.4],
                      [174.7, 261.4],
                      [173.1, 263.3],
                      [171.3, 265.3],
                      [169.5, 267.2],
                      [167.7, 269],
                      [165.8, 270.8],
                      [163.9, 272.5],
                      [161.9, 274.2],
                      [159.9, 275.8],
                      [157.8, 277.4],
                      [155.7, 278.9],
                      [153.6, 280.4],
                      [151.4, 281.7],
                      [149.2, 283.1],
                      [147, 284.4],
                      [144.8, 285.6],
                      [142.5, 286.7],
                      [140.3, 287.8],
                      [138, 288.8],
                      [135.7, 289.8],
                      [133.4, 290.7],
                      [131, 291.5],
                      [128.7, 292.3],
                      [126.4, 293],
                      [124, 293.6],
                      [121.7, 294.2],
                      [119.4, 294.7],
                      [117, 295.2],
                      [114.7, 295.6],
                      [112.4, 296],
                      [110.1, 296.3],
                      [107.8, 296.5],
                      [105.5, 296.7],
                      [103.3, 296.8],
                      [101.1, 296.9],
                      [98.8, 296.9],
                      [83.1, 295.7],
                      [67.8, 292],
                      [53.3, 285.9],
                      [39.9, 277.5],
                      [28.1, 267.2],
                      [18, 255.1],
                      [10, 241.5],
                      [4.2, 226.9],
                      [0.9, 211.5],
                      [0, 195.8],
                      [0.1, 192.9],
                      [2.1, 171.4],
                      [7.2, 148.8],
                      [15.4, 125.3],
                      [26.6, 100.8],
                      [41, 75.2],
                      [58.4, 49.3],
                      [78.4, 23.2],
                      [98.9, 0]
                    ]
                  ]
                },
                symbol: {
                  type: "CIMPolygonSymbol",
                  symbolLayers: [
                    {
                      type: "CIMSolidFill",
                      enable: true,
                      color: backgroundThemeColor === "light" ? [17, 26, 40, 255] : [186, 186, 186, 255]
                    }
                  ]
                }
              }
            ],
            scaleSymbolsProportionally: true,
            respectFrame: true,
            rotation: 0
          }
        ],
        scaleX: 1,
        angleAlignment: "Display",
        angle: 0
      }
    }
  });
};
// https://devtopia.esri.com/WebGIS/arcgis-components/blob/master/src/smartMapping/_utils/symbol.ts
function getCimOutline(sym) {
  if (!isMVCompatibleCIM(sym)) {
    return;
  }
  const symbolLayers = sym.data.symbol.symbolLayers;
  const bgSymbolLayer = symbolLayers[symbolLayers.length - 1];
  const graphic = bgSymbolLayer.markerGraphics[0];
  return graphic.symbol.symbolLayers.find((sl) => sl.type === "CIMSolidStroke");
}
function isMVCompatibleCIM(sym) {
  var _a, _b, _c, _d, _e, _f;
  // -	Have one symbolLayer with a stroke and a fill (CIMVectorMarker) that is not colorLocked
  // -	Have two symbolLayers with a stroke and a fill (CIMVectorMarker)
  //    The smaller (first) symbolLayer is not colorLocked
  //    The second symbolLayer must have a greater size than the first
  const symbolLayers = sym.data.symbol.symbolLayers;
  if (symbolLayers.length === 1) {
    const symbolLayer = symbolLayers[0];
    if (symbolLayer.type !== "CIMVectorMarker" || symbolLayer.colorLocked) {
      return false;
    }
    const markerGraphicLayers = (_b = (_a = symbolLayer.markerGraphics[0]) === null || _a === void 0 ? void 0 : _a.symbol) === null || _b === void 0 ? void 0 : _b.symbolLayers;
    return symbolLayer.markerGraphics.length === 1 && hasUnlockedFillAndStroke(markerGraphicLayers);
  }
  else if (symbolLayers.length === 2) {
    const symbolLayer1 = symbolLayers[0];
    const symbolLayer2 = symbolLayers[1];
    if (symbolLayer1.type !== "CIMVectorMarker" ||
      symbolLayer2.type !== "CIMVectorMarker" ||
      symbolLayer1.colorLocked ||
      symbolLayer1.size > symbolLayer2.size) {
      return false;
    }
    const markerGraphicLayers1 = (_d = (_c = symbolLayer1.markerGraphics[0]) === null || _c === void 0 ? void 0 : _c.symbol) === null || _d === void 0 ? void 0 : _d.symbolLayers;
    const markerGraphicLayers2 = (_f = (_e = symbolLayer2.markerGraphics[0]) === null || _e === void 0 ? void 0 : _e.symbol) === null || _f === void 0 ? void 0 : _f.symbolLayers;
    return (symbolLayer1.markerGraphics.length === 1 &&
      symbolLayer2.markerGraphics.length === 1 &&
      hasUnlockedFillAndStroke(markerGraphicLayers1) &&
      hasFillAndStroke(markerGraphicLayers2));
  }
  return false;
}
function hasUnlockedFillAndStroke(symbolLayers) {
  return hasUnlockedFill(symbolLayers) && hasStroke(symbolLayers);
}
function hasFillAndStroke(symbolLayers) {
  return hasFill(symbolLayers) && hasStroke(symbolLayers);
}
function hasFill(symbolLayers) {
  return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find((sl) => sl.type === "CIMSolidFill");
}
function hasUnlockedFill(symbolLayers) {
  return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find((sl) => sl.type === "CIMSolidFill" && !sl.colorLocked);
}
function hasStroke(symbolLayers) {
  return symbolLayers === null || symbolLayers === void 0 ? void 0 : symbolLayers.find((sl) => sl.type === "CIMSolidStroke");
}

const saveSnappingToStorage = (snappingOptions, currentSnappingSessionStorageId) => {
  // get enabled layers and save object in session storage
  const featureSourcesIds = [
    ...new Set([...snappingOptions.featureSources.filter((source) => source.enabled).map((source) => source.layer.id)])
  ];
  const snappingObject = {
    enabled: snappingOptions.enabled,
    selfEnabled: snappingOptions.selfEnabled,
    featureEnabled: snappingOptions.featureEnabled,
    featureSourcesIds: featureSourcesIds
  };
  (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__.c)(currentSnappingSessionStorageId, snappingObject, true);
};
const getSnappingOptions = (snappingSessionStorageIds, layer, mapView, SnappingOptions) => {
  const snapping = getSnappingFromStorage(snappingSessionStorageIds) || {
    enabled: true,
    selfEnabled: true,
    featureEnabled: true,
    featureSourcesIds: [layer.id]
  };
  return new SnappingOptions({
    enabled: snapping.enabled,
    selfEnabled: snapping.selfEnabled,
    featureEnabled: snapping.featureEnabled,
    featureSources: getFeatureSourcesFromLayerIds(mapView, snapping.featureSourcesIds)
  });
};
const getFeatureSourcesFromLayerIds = (mapView, layerIds) => {
  const featureSources = [];
  layerIds.forEach((layerId) => {
    mapView.map.allLayers.toArray().find((layer) => {
      if (["map-notes", "feature", "geojson", "csv", "wfs", "map"].indexOf(layer === null || layer === void 0 ? void 0 : layer.type) !== -1 &&
        layer.id === layerId) {
        featureSources.push({ layer, enabled: true });
      }
    });
  });
  return featureSources;
};
const getSnappingFromStorage = (snappingSessionStorageIds) => {
  if (snappingSessionStorageIds) {
    return ((0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__.d)(snappingSessionStorageIds.webmap, true) ||
      (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__.d)(snappingSessionStorageIds.current, true) ||
      null);
  }
  return null;
};

const saveSketchTooltipToStorage = (tooltipOptions, currentTooltipSessionStorageId) => {
  const tooltipObject = {
    enabled: tooltipOptions.enabled
  };
  (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__.c)(currentTooltipSessionStorageId, tooltipObject, true);
};
const getSketchTooltipOptions = (sketchTooltipSessionStorageIds, SketchTooltipOptions) => {
  const sketchToolip = getSketchTooltipFromStorage(sketchTooltipSessionStorageIds) || {
    enabled: false
  };
  return new SketchTooltipOptions({
    enabled: sketchToolip.enabled
  });
};
const getSketchTooltipFromStorage = (sketchTooltipSessionStorageIds) => {
  if (sketchTooltipSessionStorageIds) {
    return ((0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__.d)(sketchTooltipSessionStorageIds.webmap, true) ||
      (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__.d)(sketchTooltipSessionStorageIds.current, true) ||
      null);
  }
  return null;
};

const sketchStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_5__.c)({
  mapView: null,
  portal: null,
  layer: null,
  strings: null,
  currentLanguage: "",
  sketchMessage: "",
  svModel: null,
  snappingOptions: null,
  sketchTooltipOptions: null,
  snappingSessionStorageIds: null,
  sketchTooltipSessionStorageIds: null
});
const sketchState = sketchStore.state;

class SVModel {
  constructor(layer, mapView, SketchViewModel, snappingOptions, tooltipOptions, onGraphicCreate, onGraphicUpdate) {
    this.layer = layer;
    this.mapView = mapView;
    // point
    this.sketchViewModelPoint = new SketchViewModel({
      layer: this.layer.pointLayer,
      view: this.mapView,
      defaultCreateOptions: { hasZ: false, mode: "hybrid" },
      updateOnGraphicClick: false,
      defaultUpdateOptions: { multipleSelectionEnabled: false },
      snappingOptions,
      tooltipOptions
    });
    this.sketchViewModelPoint.on("create", (event) => {
      onGraphicCreate(event, this.sketchViewModelPoint);
    });
    this.sketchViewModelPoint.on("update", (event) => onGraphicUpdate(event));
    // line
    this.sketchViewModelLine = new SketchViewModel({
      layer: this.layer.polylineLayer,
      view: this.mapView,
      defaultCreateOptions: { hasZ: false, mode: "hybrid" },
      updateOnGraphicClick: false,
      defaultUpdateOptions: { multipleSelectionEnabled: false },
      snappingOptions,
      tooltipOptions
    });
    this.sketchViewModelLine.on("create", (event) => onGraphicCreate(event, this.sketchViewModelLine));
    this.sketchViewModelLine.on("update", (event) => onGraphicUpdate(event));
    // polygon
    this.sketchViewModelPolygon = new SketchViewModel({
      layer: this.layer.polygonLayer,
      view: this.mapView,
      defaultCreateOptions: { hasZ: false, mode: "hybrid" },
      updateOnGraphicClick: false,
      defaultUpdateOptions: { multipleSelectionEnabled: false },
      snappingOptions,
      tooltipOptions
    });
    this.sketchViewModelPolygon.on("create", (event) => onGraphicCreate(event, this.sketchViewModelPolygon));
    this.sketchViewModelPolygon.on("update", (event) => onGraphicUpdate(event));
    // text
    this.sketchViewModelText = new SketchViewModel({
      layer: this.layer.textLayer,
      view: this.mapView,
      defaultCreateOptions: { hasZ: false, mode: "hybrid" },
      updateOnGraphicClick: false,
      defaultUpdateOptions: { multipleSelectionEnabled: false },
      snappingOptions,
      tooltipOptions
    });
    this.sketchViewModelText.on("create", (event) => onGraphicCreate(event, this.sketchViewModelText));
    this.sketchViewModelText.on("update", (event) => onGraphicUpdate(event));
  }
  delete() {
    this._deletePoint();
    this._deleteLine();
    this._deletePolygon();
    this._deleteText();
  }
  cancel() {
    this._cancelPoint();
    this._cancelLine();
    this._cancelPolygon();
    this._cancelText();
  }
  duplicate() {
    this._duplicatePoint();
    this._duplicateLine();
    this._duplicatePolygon();
    this._duplicateText();
  }
  updateOnGraphic(hitTest) {
    var _a;
    if (hitTest) {
      this.hitTestHandle = this.mapView.on("click", async (event) => {
        const hitTestResults = await this.mapView.hitTest(event, {
          include: this.layer
        });
        const results = hitTestResults.results;
        if (results.length) {
          // sort by hit test order and choose the 1st result
          const order = ["point", "polyline", "polygon"];
          results.sort(function (a, b) {
            return order.indexOf(a.graphic.geometry.type) - order.indexOf(b.graphic.geometry.type);
          });
          const currGraphic = results[0].graphic;
          switch (currGraphic.layer) {
            case this.layer.pointLayer:
              this.updatePoint([currGraphic]);
              break;
            case this.layer.textLayer:
              this.updateText([currGraphic]);
              break;
            case this.layer.polylineLayer:
              this.updateLine([currGraphic]);
              break;
            case this.layer.polygonLayer:
              this.updatePolygon([currGraphic]);
              break;
            default:
              return;
          }
        }
      });
    }
    else {
      (_a = this.hitTestHandle) === null || _a === void 0 ? void 0 : _a.remove();
    }
  }
  destroy() {
    this._destroyPoint();
    this._destroyLine();
    this._destroyPolygon();
    this._destroyText();
  }
  getPointSVM() {
    return this.sketchViewModelPoint;
  }
  getPoint() {
    return this.sketchViewModelPoint.pointSymbol;
  }
  setPoint(symbol) {
    this.sketchViewModelPoint.pointSymbol = symbol;
  }
  createPoint() {
    this.sketchViewModelPoint.create("point");
  }
  updatePoint(graphics) {
    this.sketchViewModelPoint.update(graphics);
  }
  _deletePoint() {
    this.sketchViewModelPoint.delete();
  }
  _cancelPoint() {
    this.sketchViewModelPoint.cancel();
  }
  _duplicatePoint() {
    this.sketchViewModelPoint.duplicate();
  }
  // private _updatePointOnGraphicClick(updateOnGraphic: boolean) {
  //   this.sketchViewModelPoint.updateOnGraphicClick = updateOnGraphic;
  // }
  _destroyPoint() {
    this.sketchViewModelPoint.destroy();
  }
  // line
  getLineSVM() {
    return this.sketchViewModelLine;
  }
  getLine() {
    return this.sketchViewModelLine.polylineSymbol;
  }
  setLine(symbol) {
    this.sketchViewModelLine.polylineSymbol = symbol;
  }
  createLine() {
    this.sketchViewModelLine.create("polyline");
  }
  updateLine(graphics) {
    this.sketchViewModelLine.update(graphics);
  }
  _deleteLine() {
    this.sketchViewModelLine.delete();
  }
  _cancelLine() {
    this.sketchViewModelLine.cancel();
  }
  _duplicateLine() {
    this.sketchViewModelLine.duplicate();
  }
  // private _updateLineOnGraphicClick(updateOnGraphic: boolean) {
  //   this.sketchViewModelLine.updateOnGraphicClick = updateOnGraphic;
  // }
  _destroyLine() {
    this.sketchViewModelLine.destroy();
  }
  // polygon
  getPolygonSVM() {
    return this.sketchViewModelPolygon;
  }
  getPolygon() {
    return this.sketchViewModelPolygon.polygonSymbol;
  }
  setPolygon(symbol) {
    this.sketchViewModelPolygon.polygonSymbol = symbol;
  }
  createPolygon(tool) {
    this.sketchViewModelPolygon.create(tool);
  }
  updatePolygon(graphics) {
    this.sketchViewModelPolygon.update(graphics);
  }
  _deletePolygon() {
    this.sketchViewModelPolygon.delete();
  }
  _cancelPolygon() {
    this.sketchViewModelPolygon.cancel();
  }
  _duplicatePolygon() {
    this.sketchViewModelPolygon.duplicate();
  }
  // private _updatePolygonOnGraphicClick(updateOnGraphic: boolean) {
  //   this.sketchViewModelPolygon.updateOnGraphicClick = updateOnGraphic;
  // }
  _destroyPolygon() {
    this.sketchViewModelPolygon.destroy();
  }
  // text
  getTextSVM() {
    return this.sketchViewModelText;
  }
  getText() {
    return this.sketchViewModelText.pointSymbol;
  }
  setText(symbol) {
    this.sketchViewModelText.pointSymbol = symbol;
  }
  createText() {
    this.sketchViewModelText.create("point");
  }
  updateText(graphics) {
    this.sketchViewModelText.update(graphics);
  }
  _deleteText() {
    this.sketchViewModelText.delete();
  }
  _cancelText() {
    this.sketchViewModelText.cancel();
  }
  _duplicateText() {
    this.sketchViewModelText.duplicate();
  }
  // private _updateTextOnGraphicClick(updateOnGraphic: boolean) {
  //   this.sketchViewModelText.updateOnGraphicClick = updateOnGraphic;
  // }
  _destroyText() {
    this.sketchViewModelText.destroy();
  }
}

const arcgisSketchCss = ":host{display:flex;flex:1 1 auto;overflow:hidden}.sketch-delete-button{padding:var(--arcgis-app-cap-spacing-third)}.snapping{display:flex;padding:var(--arcgis-app-cap-spacing-half);background-color:var(--arcgis-app-background)}.sketch-message{padding:var(--arcgis-app-cap-spacing-half)}.sketch-keyboard-button{margin-right:0.3em}.multiple-selection{margin:1.3em}.multiple-selection calcite-button{margin-top:0.3em}.arcgis--rtl .sketch-keyboard-button{margin-right:unset;margin-left:0.3em}";

const ArcgisSketch = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.sketchUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchUpdated", 7);
    this.arcgisSketchDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchDismissedChange", 7);
    this.internalSketchUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalSketchUpdated", 7);
    this.closeSketchPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeSketchPopovers", 7);
    this.closePopupPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
    this.sketchContentReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchContentReRender", 7);
    this.disableSketchPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disableSketchPanel", 7);
    this.closeSketchSnappingPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeSketchSnappingPopovers", 7);
    this.sketchActionOnSelectFeatures = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchActionOnSelectFeatures", 7);
    this.sketchMode = "update";
    this.escKey = false;
    this.keepSelectionMessage = "";
    this.keepSelectionTool = null;
    this.onGraphicUpdate = (event) => {
      var _a, _b;
      if (event.state === "start") {
        this.mapView.closePopup();
        if (this.multipleSelectedGraphics.length <= 1 && event.graphics.length === 1) {
          this.currentSketchInfo.graphic = event.graphics[0];
          this.currentSketchInfo.symbol = this.currentSketchInfo.graphic
            .symbol;
          // if multipleSelectedGraphics is 0, coming from single select
          !this.multipleSelectedGraphics.length &&
            this.multipleSelectedGraphics.push(this.currentSketchInfo.graphic);
          this.currentSketchInfo.tool = this.getGeometryTypeFromGraphic(this.currentSketchInfo.graphic);
          this.currentSketchInfo.popup = this.currentSketchInfo.graphic.popupTemplate;
          this.currentSketchInfo.title =
            ((_b = (_a = this.currentSketchInfo.graphic) === null || _a === void 0 ? void 0 : _a.attributes) === null || _b === void 0 ? void 0 : _b.title) || this.defaultGraphicTitle();
          this.sketchContentReRender.emit();
          this.showSketchContent = true;
        }
        else {
          this.sketchMessageHandler(null);
        }
      }
      if (event.state === "complete") {
        const { keepSelectionTool } = this;
        if (!keepSelectionTool) {
          this.currentSketchInfo.graphic = null;
          this.multipleSelectedGraphics = [];
          this.closeSketchPopovers.emit();
          this.internalSketchUpdated.emit();
          this.sketchContentReRender.emit();
        }
        else {
          this.keepSelectToolSelection();
        }
      }
    };
    this.mapView = undefined;
    this.layer = undefined;
    this.portal = undefined;
    this.dismissible = false;
    this.snappingSessionStorageIds = undefined;
    this.sketchTooltipSessionStorageIds = undefined;
    this.mapNotesFeature = null;
    this.currentSketchInfo = {
      tool: null,
      symbol: null,
      graphic: null,
      popup: null,
      title: null,
      sourceIds: {}
    };
    this.multipleSelectedGraphics = [];
    this.showSketchContent = true;
  }
  // lifecycle methods
  async componentWillLoad() {
    [this.strings, this.currentLanguage] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    await this.loadAllModules();
    this.snappingOptions = getSnappingOptions(this.snappingSessionStorageIds, this.layer, this.mapView, this.SnappingOptions);
    this.sketchTooltipOptions = getSketchTooltipOptions(this.sketchTooltipSessionStorageIds, this.SketchTooltipOptions);
    this.svModel = new SVModel(this.layer, this.mapView, this.SketchViewModel, this.snappingOptions, this.sketchTooltipOptions, (event, sketchViewModel) => this.onGraphicCreate(event, sketchViewModel), this.onGraphicUpdate);
    sketchState.svModel = this.svModel;
    sketchState.mapView = this.mapView;
    sketchState.layer = this.layer;
    sketchState.portal = this.portal;
    sketchState.strings = this.strings;
    sketchState.currentLanguage = this.currentLanguage;
    sketchState.snappingOptions = this.snappingOptions;
    sketchState.sketchTooltipOptions = this.sketchTooltipOptions;
    sketchState.snappingSessionStorageIds = this.snappingSessionStorageIds;
    sketchState.sketchTooltipSessionStorageIds = this.sketchTooltipSessionStorageIds;
  }
  componentDidLoad() {
    // for multiple selection
    this.selector.view = this.mapView;
    // disable popup in the map view
    this.mapView.popupEnabled = false;
    // sketch tools
    this.sketchToolsEl = document.createElement("arcgis-sketch-tools");
    this.sketchToolsEl.refElement = this.hostElement;
    if (this.mapNotesFeature) {
      this.sketchToolsEl.mapNotesFeature = this.mapNotesFeature;
    }
    document.body.appendChild(this.sketchToolsEl);
  }
  disconnectedCallback() {
    this.watchEscapeOnMapView(false);
    this.svModel.updateOnGraphic(false);
    this.removeSketchShortcuts();
  }
  // Events
  closeSketchPopoversHandler() {
    this.closePopupPopovers.emit();
    this.sketchMessageHandler(null);
    this.showSketchContent = false;
    this.closeSketchSnappingPopovers.emit();
    this.removeSketchShortcuts();
    this.setFocus();
  }
  closeSketchSnappingPopoversHandler() {
    if (this.sketchSnappingEl) {
      document.body.removeChild(this.sketchSnappingEl);
      this.sketchSnappingEl = null;
      this.disableSketchPanel.emit(false);
    }
    this.setFocus();
  }
  disableSketchPanelHandler(event) {
    event.stopPropagation();
    this.sketchFlowItemEl.disabled = event.detail;
  }
  internalSketchUpdatedHandler(event) {
    event.stopPropagation();
    this.sketchUpdated.emit();
  }
  sketchGraphicUpdatesHandler(event) {
    var _a, _b;
    event.stopPropagation();
    const graphicUpdates = event.detail;
    if (graphicUpdates.update) {
      if (this.sketchMode === "update") {
        if (this.currentSketchInfo.graphic) {
          this.currentSketchInfo.graphic.symbol = this.currentSketchInfo.symbol;
          this.currentSketchInfo.graphic.popupTemplate = this.currentSketchInfo.popup;
          if ((_a = this.currentSketchInfo.graphic) === null || _a === void 0 ? void 0 : _a.attributes) {
            this.currentSketchInfo.graphic.attributes.title = this.currentSketchInfo.title;
          }
          else {
            this.currentSketchInfo.graphic.attributes = {
              title: this.currentSketchInfo.title
            };
          }
        }
      }
      else {
        if (this.tempCreatedGraphic) {
          this.tempCreatedGraphic.symbol = this.currentSketchInfo.symbol;
          this.tempCreatedGraphic.popupTemplate = this.currentSketchInfo.popup;
          if ((_b = this.tempCreatedGraphic) === null || _b === void 0 ? void 0 : _b.attributes) {
            this.tempCreatedGraphic.attributes.title = this.currentSketchInfo.title;
          }
          else {
            this.tempCreatedGraphic.attributes = {
              title: this.currentSketchInfo.title
            };
          }
        }
        if (this.currentSketchInfo.tool === "point") {
          this.svModel.setPoint(this.currentSketchInfo.symbol);
        }
        else if (this.currentSketchInfo.tool === "text") {
          this.svModel.setText(this.currentSketchInfo.symbol);
        }
        else if (this.currentSketchInfo.tool === "polyline") {
          this.svModel.setLine(this.currentSketchInfo.symbol);
        }
        else if (["circle", "polygon", "rectangle"].indexOf(this.currentSketchInfo.tool) > -1) {
          this.svModel.setPolygon(this.currentSketchInfo.symbol);
        }
      }
      // to refresh popup
      this.mapView.popup.features = [this.currentSketchInfo.graphic];
    }
    if (graphicUpdates.close) {
      this.clearHighlightAndPopup();
      this.closeSketchPopovers.emit();
      this.svModel.cancel();
      this.svModel.updateOnGraphic(false);
      this.setFocus();
    }
    this.internalSketchUpdated.emit();
  }
  async sketchActionOnDrawFeaturesHandler({ detail: { tool, sketchMessage } }) {
    this.clearHighlightAndPopup();
    this.watchEscapeOnMapView(true);
    // close popover to reset when moving from update to continuous mode
    if (this.sketchMode === "update") {
      this.closeSketchPopovers.emit();
    }
    this.sketchMessageHandler(sketchMessage);
    this.sketchMode = "continuous";
    this.svModel.cancel();
    this.svModel.updateOnGraphic(false);
    this.tempCreatedGraphic = null;
    this.currentSketchInfo.graphic = null;
    this.currentSketchInfo.tool = tool;
    switch (tool) {
      case "point":
        this.svModel.setPoint((await defaultCimSymbol(this.CIMSymbol, this.mapView, this.ColorUtils)));
        this.currentSketchInfo.symbol = this.svModel.getPoint();
        this.svModel.createPoint();
        break;
      case "polyline":
        this.svModel.setLine(await defaultLineSymbol(this.mapView, this.ColorUtils));
        this.currentSketchInfo.symbol = this.svModel.getLine();
        this.svModel.createLine();
        break;
      case "polygon":
      case "rectangle":
      case "circle":
        this.svModel.setPolygon(await defaultPolygonSymbol(this.mapView, this.ColorUtils));
        this.currentSketchInfo.symbol = this.svModel.getPolygon();
        this.svModel.createPolygon(tool);
        break;
      case "text":
        this.svModel.setText((await defaultTextSymbol(this.mapView, this.ColorUtils, this.TextSymbol, this.strings.text)));
        this.currentSketchInfo.symbol = this.svModel.getText();
        this.svModel.createText();
        break;
    }
    this.currentSketchInfo.popup = null;
    this.currentSketchInfo.title = this.defaultGraphicTitle();
    this.sketchContentReRender.emit();
    this.showSketchContent = true;
  }
  async sketchActionOnSelectFeaturesHandler({ detail: { sketchMessage, multipleSelectTool } }) {
    var _a;
    this.keepSelectionMessage = sketchMessage;
    this.keepSelectionTool = multipleSelectTool;
    this.clearHighlightAndPopup();
    this.watchEscapeOnMapView(false);
    this.closeSketchPopovers.emit();
    this.tempCreatedGraphic = null;
    this.currentSketchInfo.graphic = null;
    this.currentSketchInfo.symbol = null;
    this.currentSketchInfo.tool = null;
    this.multipleSelectedGraphics = [];
    //this.svModel.cancel();
    this.sketchMode = "update";
    this.sketchMessageHandler(this.keepSelectionMessage);
    this.sketchContentReRender.emit();
    if (this.keepSelectionTool) {
      this.actionOnMultipleSelections(this.keepSelectionTool);
    }
    else {
      (_a = this.selectorOperation) === null || _a === void 0 ? void 0 : _a.cancel();
      this.svModel.updateOnGraphic(true);
    }
  }
  arcgisSketchPanelLoaderHandler(event) {
    event.stopPropagation();
    this.sketchFlowItemEl.loading = event.detail;
  }
  // Public Methods
  async done() {
    var _a, _b;
    this.removeHighlight();
    if ((_a = this.snappingSessionStorageIds) === null || _a === void 0 ? void 0 : _a.current) {
      saveSnappingToStorage(this.snappingOptions, this.snappingSessionStorageIds.current);
    }
    if ((_b = this.sketchTooltipSessionStorageIds) === null || _b === void 0 ? void 0 : _b.current) {
      saveSketchTooltipToStorage(this.sketchTooltipOptions, this.sketchTooltipSessionStorageIds.current);
    }
    this.closeSketchPopovers.emit();
    this.svModel.destroy();
    document.body.removeChild(this.sketchToolsEl);
    this.removeSketchShortcuts();
    // enable popup in the map view
    this.mapView.popupEnabled = true;
  }
  async setFocus(focusId) {
    var _a;
    if (focusId === "dismiss-button") {
      (_a = this.dismissButtonEl) === null || _a === void 0 ? void 0 : _a.setFocus();
      return;
    }
  }
  // private methods
  async loadAllModules() {
    [
      this.SketchViewModel,
      this.TextSymbol,
      this.ColorUtils,
      this.CIMSymbol,
      this.SnappingOptions,
      this.SketchTooltipOptions
    ] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/widgets/Sketch/SketchViewModel",
      "esri/symbols/TextSymbol",
      "esri/views/support/colorUtils",
      "esri/symbols/CIMSymbol",
      "esri/views/interactive/snapping/SnappingOptions",
      "esri/views/interactive/sketch/SketchTooltipOptions"
    ]);
    const [Selector2D] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)(["esri/widgets/support/Selector2D"]);
    this.selector = new Selector2D();
  }
  removeSketchShortcuts() {
    if (this.arcgisSketchShortcuts) {
      this.arcgisSketchShortcuts.removeEventListener("arcgisSketchShortcutsDismissedChange", () => this.removeSketchShortcuts());
      document.body.removeChild(this.arcgisSketchShortcuts);
      this.arcgisSketchShortcuts = null;
    }
  }
  onGraphicCreate(event, sketchViewModel) {
    if (event.state === "start") {
      this.tempCreatedGraphic = null;
      this.removeHighlight();
    }
    if (event.state === "cancel" && this.escKey) {
      this.escKey = false;
      const tool = this.currentSketchInfo.tool === "text" ? "point" : this.currentSketchInfo.tool;
      sketchViewModel.create(tool);
    }
    if (event.state === "complete") {
      this.internalSketchUpdated.emit();
      if (event.graphic) {
        event.graphic.popupTemplate = this.currentSketchInfo.popup;
        event.graphic.attributes = {
          title: this.currentSketchInfo.title
        };
        this.tempCreatedGraphic = this.currentSketchInfo.graphic = event.graphic;
        this.highlightGraphic(event.graphic);
      }
      const tool = this.currentSketchInfo.tool === "text" ? "point" : this.currentSketchInfo.tool;
      sketchViewModel.create(tool);
    }
  }
  watchEscapeOnMapView(watch) {
    var _a;
    if (watch) {
      this.watchEscapeHandle = this.mapView.on("key-down", (event) => {
        if (event.key === "Escape" &&
          (this.svModel.getPointSVM().state === "active" ||
            this.svModel.getLineSVM().state === "active" ||
            this.svModel.getPolygonSVM().state === "active" ||
            this.svModel.getTextSVM().state === "active")) {
          event.stopPropagation();
          this.escKey = true;
          this.svModel.cancel();
        }
      });
    }
    else {
      (_a = this.watchEscapeHandle) === null || _a === void 0 ? void 0 : _a.remove();
    }
  }
  defaultGraphicTitle() {
    switch (this.currentSketchInfo.tool) {
      case "point":
        return this.strings.point;
      case "polyline":
        return this.strings.line;
      case "polygon":
        return this.strings.polygon;
      case "rectangle":
        return this.strings.rectangle;
      case "circle":
        return this.strings.circle;
      case "text":
        return this.strings.text;
      default:
        return this.strings.point;
    }
  }
  // for selection mode
  getGeometryTypeFromGraphic(currGraphic) {
    var _a, _b;
    switch ((_a = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.geometry) === null || _a === void 0 ? void 0 : _a.type) {
      case "point":
        if (((_b = currGraphic === null || currGraphic === void 0 ? void 0 : currGraphic.symbol) === null || _b === void 0 ? void 0 : _b.type) === "text") {
          return "text";
        }
        else {
          return "point";
        }
      case "polyline":
        return "polyline";
      case "polygon":
        return "polygon";
      default:
        return "polygon";
    }
  }
  clearHighlightAndPopup() {
    this.removeHighlight();
    this.mapView.closePopup();
  }
  actionOnMultipleSelections(multipleSelectTool) {
    this.selector.sources = [
      this.layer.pointLayer,
      this.layer.polylineLayer,
      this.layer.polygonLayer,
      this.layer.textLayer
    ];
    const drawObject = multipleSelectTool === "rectangle"
      ? {
        createTool: "rectangle"
      }
      : {
        createTool: "polygon",
        createOptions: {
          mode: "freehand"
        }
      };
    const operation = (this.selectorOperation = this.selector.draw({
      operationOptions: drawObject
    }));
    operation.once("complete", (event) => {
      const { selection } = event;
      //this.sketchMessageHandler(null);
      this.clearHighlightAndPopup();
      if (!event.aborted && selection.length) {
        let tempPoint = [];
        let tempLine = [];
        let tempPolygon = [];
        let tempText = [];
        selection.forEach((currGraphic) => {
          switch (this.getGeometryTypeFromGraphic(currGraphic)) {
            case "point":
              tempPoint = [...tempPoint, currGraphic];
              break;
            case "polyline":
              tempLine = [...tempLine, currGraphic];
              break;
            case "polygon":
              tempPolygon = [...tempPolygon, currGraphic];
              break;
            case "text":
              tempText = [...tempText, currGraphic];
              break;
            default:
              tempPoint = [...tempPoint, currGraphic];
              break;
          }
        });
        this.multipleSelectedGraphics = [...tempPoint, ...tempLine, ...tempPolygon, ...tempText];
        tempPoint.length && this.svModel.updatePoint(tempPoint);
        tempLine.length && this.svModel.updateLine(tempLine);
        tempPolygon.length && this.svModel.updatePolygon(tempPolygon);
        tempText.length && this.svModel.updateText(tempText);
      }
    });
    this.svModel.updateOnGraphic(false);
  }
  sketchMessageHandler(message) {
    sketchState.sketchMessage = message;
  }
  highlightGraphic(graphic) {
    var _a;
    this.removeHighlight();
    const match = (_a = this.mapView.allLayerViews) === null || _a === void 0 ? void 0 : _a.items.find(({ layer }) => layer === this.layer);
    this.tempHighlightHandle = match === null || match === void 0 ? void 0 : match.highlight(graphic);
  }
  removeHighlight() {
    var _a;
    (_a = this.tempHighlightHandle) === null || _a === void 0 ? void 0 : _a.remove();
  }
  // for workflows where we want the current select tools to stay activated
  keepSelectToolSelection() {
    this.sketchActionOnSelectFeatures.emit({
      sketchMessage: this.keepSelectionMessage,
      multipleSelectTool: this.keepSelectionTool
    });
  }
  render() {
    const dismissButton = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: "close", scale: "m", icon: "x", slot: "header-actions-end", ref: (el) => (this.dismissButtonEl = el), onClick: (event) => {
        event.stopPropagation();
        this.sketchMessageHandler(null);
        this.svModel.cancel();
        this.clearHighlightAndPopup();
        this.arcgisSketchDismissedChange.emit();
      } }));
    const selectionMultipleLabel = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "center", for: "multiple-selection-buttons" }, this.multipleSelectedGraphics.length <= 1
      ? this.strings.singleFeatureSelected
      : this.strings.featuresSelected.replace("${number}", this.multipleSelectedGraphics.length.toString())));
    const deleteMultiple = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", alignment: "center", iconStart: "trash", kind: "danger", width: "full", onClick: (event) => {
        event.stopPropagation();
        // svm knows what's selected, and will delete accordingly
        this.svModel.delete();
        this.multipleSelectedGraphics = [];
        this.keepSelectToolSelection();
      } }, this.strings.delete));
    const duplicateMultiple = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", alignment: "center", iconStart: "copy", kind: "neutral", width: "full", onClick: (event) => {
        event.stopPropagation();
        this.svModel.duplicate();
        //this.keepSelectToolSelection();
      } }, this.strings.duplicate));
    const ShortcutAndSnapping = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "snapping", ref: (el) => (this.shortcutSnappingDiv = el) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", class: "sketch-keyboard-button", kind: "neutral", iconStart: "keyboard", scale: "l", label: this.strings.sketchShortcuts, onClick: () => {
        if (!this.arcgisSketchShortcuts) {
          this.arcgisSketchShortcuts = document.createElement("arcgis-sketch-shortcuts");
          this.arcgisSketchShortcuts.refElement = this.shortcutSnappingDiv;
          document.body.appendChild(this.arcgisSketchShortcuts);
          this.arcgisSketchShortcuts.addEventListener("arcgisSketchShortcutsDismissedChange", () => this.removeSketchShortcuts());
        }
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", width: "full", iconStart: "gear", iconEnd: "chevron-down", scale: "l", label: this.strings.settings, onClick: (event) => {
        event.stopPropagation();
        if (!this.sketchSnappingEl) {
          this.sketchSnappingEl = document.createElement("arcgis-sketch-snapping");
          this.sketchSnappingEl.refElement = this.shortcutSnappingDiv;
          document.body.appendChild(this.sketchSnappingEl);
          this.disableSketchPanel.emit(true);
        }
      } }, this.strings.settings)));
    const sketchMessage = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: sketchState.sketchMessage && "sketch-message" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { width: "full", open: !!sketchState.sketchMessage }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, sketchState.sketchMessage))));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (el) => (this.flowEl = el), dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), class: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl" ? _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl : "" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.sketchFlowItemEl = el), heading: this.strings.sketch, disabled: !this.layer.capabilities.operations.supportsMapNotesEditing }, this.dismissible && dismissButton, ShortcutAndSnapping, sketchMessage, this.multipleSelectedGraphics.length > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "multiple-selection" }, selectionMultipleLabel, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "multiple-selection-buttons", class: "buttons" }, duplicateMultiple, deleteMultiple))) : null, this.showSketchContent && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-sketch-content", { currentSketchInfo: this.currentSketchInfo, flowEl: this.flowEl, symbolStylerRefElement: this.dismissButtonEl }))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketch.style = arcgisSketchCss;

const arcgisSketchContentCss = ".sketch-content{display:flex;flex-direction:column;background-color:var(--arcgis-app-background);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing-half)}.sketch-title calcite-inline-editable{border:1px solid;border-color:var(--calcite-ui-border-input);padding:var(--arcgis-app-cap-spacing-third)}.rotation{display:flex;align-items:center;justify-content:space-between;position:relative}.rotation calcite-slider{width:50%}.rotation calcite-input{width:45%;font-size:var(--arcgis-app-font-size-0);font-family:var(--arcgis-app-font-family)}.sketch-popup-button{margin-bottom:0.4em}";

const ArcgisSketchContent = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.sketchGraphicUpdates = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchGraphicUpdates", 7);
    this.arcgisSketchPanelLoader = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchPanelLoader", 7);
    this.disableSketchPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disableSketchPanel", 7);
    this.resizeObserver = new ResizeObserver(() => {
      this.reRender = !this.reRender;
    });
    this.suggestedFillColors = [];
    this.savedColors = [];
    this.suggestedColorList = [
      "#ff4040",
      "#ff8202",
      "#faa83e",
      "#ffd159",
      "#73b566",
      "#008977",
      "#33e3c8",
      "#43abeb",
      "#4b64c9",
      "#9868ed",
      "#b055e6",
      "#db5181",
      "#e03b99",
      "#2b2b2b",
      "#bdbdbd",
      "#ffffff"
    ];
    this.savedColorList = [
      "#ffffff",
      "#bdbdbd",
      "#2b2b2b",
      "#e03b99",
      "#db5181",
      "#b055e6",
      "#9868ed",
      "#4b64c9",
      "#43abeb",
      "#33e3c8",
      "#008977",
      "#73b566",
      "#ffd159",
      "#faa83e",
      "#ff8202",
      "#ff4040"
    ];
    this.storePointStyler = (el) => {
      if (!el) {
        return;
      }
      this.pointStyler = el;
      this.startPointEdit();
    };
    this.storePolylineStyler = (el) => {
      if (!el) {
        return;
      }
      this.polylineStyler = el;
      this.startPolylineEdit();
    };
    this.storePolygonStyler = (el) => {
      if (!el) {
        return;
      }
      this.polygonStyler = el;
      this.startPolygonEdit();
    };
    // open font popover
    this.openFontPopover = () => {
      var _a;
      if (!this.arcgisFontPicker) {
        this.disableSketchPanel.emit(true);
        this.arcgisFontPicker = document.createElement("arcgis-font-picker");
        this.arcgisFontPicker.fontMap = _fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.f;
        this.arcgisFontPicker.font = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.font;
        this.arcgisFontPicker.popoverProps = {
          refElement: this.hostElement
        };
        this.arcgisFontPicker.addEventListener("arcgisFontPickerDismissed", this.closeFontPopver);
        this.arcgisFontPicker.addEventListener("arcgisFontPickerChange", this.changeFont);
        document.body.appendChild(this.arcgisFontPicker);
      }
    };
    this.closeFontPopver = () => {
      if (this.arcgisFontPicker) {
        this.disableSketchPanel.emit(false);
        document.body.removeChild(this.arcgisFontPicker);
        this.arcgisFontPicker = null;
      }
    };
    this.changeFont = (event) => {
      var _a;
      const font = event.detail;
      if (font) {
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        tempSymbol.font.family = font.family;
        tempSymbol.font.weight = font.weight;
        tempSymbol.font.style = font.style;
        this.updateSymbol(tempSymbol);
        this.reRender = !this.reRender;
      }
    };
    this.currentSketchInfo = undefined;
    this.flowEl = undefined;
    this.symbolStylerRefElement = undefined;
    this.reRender = true;
  }
  // lifecycle methods
  async componentWillLoad() {
    this.arcgisSketchPanelLoader.emit(true);
    await this.loadAllModules();
    // add sketch
    this.suggestedColorList.forEach((hex) => {
      this.suggestedFillColors.push(new this.Color(hex));
    });
    this.savedColorList.forEach((hex) => {
      this.savedColors.push(new this.Color(hex));
    });
    this.mapView = sketchState.mapView;
    this.strings = sketchState.strings;
    this.currentLanguage = sketchState.currentLanguage;
    this.portal = sketchState.portal;
  }
  componentDidLoad() {
    this.arcgisSketchPanelLoader.emit(false);
    this.flowEl && this.resizeObserver.observe(this.flowEl);
  }
  disconnectedCallback() {
    this.flowEl && this.resizeObserver.unobserve(this.flowEl);
  }
  // events
  calciteFlowItemBackHandler(event) {
    event.stopPropagation();
    this.mapView.closePopup();
    this.sketchPopupFlowItem = null;
  }
  // currentSketchInfo is updated. rerender.
  sketchContentReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = !this.reRender;
    // go back if popup panel is open
    if (this.sketchPopupFlowItem) {
      this.flowEl.back();
      this.sketchPopupFlowItem = null;
    }
    const { tool } = this.currentSketchInfo;
    if (tool === "point") {
      this.startPointEdit();
    }
    else if (tool === "polyline") {
      this.startPolylineEdit();
    }
    else if (["circle", "polygon", "rectangle"].includes(tool)) {
      this.startPolygonEdit();
    }
  }
  popupUpdatedHandler({ detail: { mapNotesPopuptemplate } }) {
    this.currentSketchInfo.popup = mapNotesPopuptemplate;
    this.sketchGraphicUpdates.emit({
      update: true,
      close: false
    });
  }
  // private methods
  async loadAllModules() {
    [this.Color, this.cimSymbolUtils, this.SimpleLineSymbol] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/Color",
      "esri/symbols/support/cimSymbolUtils",
      "esri/symbols/SimpleLineSymbol"
    ]);
  }
  updateSymbol(symbol) {
    this.currentSketchInfo.symbol = symbol;
    this.sketchGraphicUpdates.emit({
      update: true,
      close: false
    });
  }
  applyCimOutline(sym, stroke) {
    const outline = getCimOutline(sym);
    if (!outline) {
      return;
    }
    const rgba = stroke.color.toRgba();
    rgba[3] *= 255;
    outline.color = rgba;
    outline.width = stroke.size;
  }
  // https://devtopia.esri.com/WebGIS/arcgis-components/blob/master/src/smartMapping/_utils/symbolStyler.ts#L4996
  getCimOutlineProps(sym) {
    var _a;
    const outline = getCimOutline(sym);
    return {
      color: new this.Color(outline === null || outline === void 0 ? void 0 : outline.color),
      size: (_a = outline === null || outline === void 0 ? void 0 : outline.width) !== null && _a !== void 0 ? _a : 1
    };
  }
  getPopoverProps(isRtl) {
    var _a;
    const flowRect = (_a = this.flowEl) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
    return {
      placement: isRtl ? "bottom-start" : "bottom-end",
      offsetDistance: 10,
      offsetSkidding: isRtl ? 3 : -3,
      overlayPositioning: "fixed",
      maxHeight: flowRect && `${flowRect.height - 65}px`,
      refElement: this.symbolStylerRefElement
    };
  }
  startPointEdit() {
    var _a;
    // cim and custom picture-markers are allowed
    const isCIM = this.currentSketchInfo.symbol.type === "cim";
    (_a = this.pointStyler) === null || _a === void 0 ? void 0 : _a.edit(this.currentSketchInfo.symbol.clone(), {
      sections: {
        marker: {
          open: true,
          symbolsOpen: true,
          sizeOpen: false,
          rotationOpen: false,
          // 'all' by default, can be 'simple', 'picture', 'cim', 'cim:picture', 'cim:vector'
          // or an array of a combination of specific types
          markerType: ["cim:vector", "custom"],
          keepChoice: true,
          parts: {
            size: {
              autoSizeAdjust: false // hide adjust size property
            }
          }
        },
        fill: isCIM && {
          type: "color",
          optional: true,
          suggestedColors: this.suggestedFillColors,
          savedColors: this.savedColors,
          open: false,
          suggestedColorsOpen: true
        },
        stroke: isCIM && {
          optional: true,
          open: false,
          type: "color",
          suggestedColors: this.suggestedFillColors,
          savedColors: this.savedColors
        }
      },
      marker: {
        size: isCIM
          ? this.cimSymbolUtils.getCIMSymbolSize(this.currentSketchInfo.symbol)
          : this.currentSketchInfo.symbol.type === "picture-marker"
            ? this.currentSketchInfo.symbol.width
            : 25
      },
      fill: {
        color: (isCIM &&
          this.cimSymbolUtils.getCIMSymbolColor(this.currentSketchInfo.symbol)) ||
          this.suggestedFillColors[0]
      },
      stroke: isCIM && this.getCimOutlineProps(this.currentSketchInfo.symbol),
      fillEnabled: isCIM,
      strokeEnabled: isCIM,
      portal: this.createPortalProp()
    });
  }
  startPolylineEdit() {
    var _a, _b, _c, _d, _e;
    (_a = this.polylineStyler) === null || _a === void 0 ? void 0 : _a.edit(this.currentSketchInfo.symbol.clone(), {
      sections: {
        stroke: {
          type: "color",
          open: true,
          suggestedColorsOpen: true,
          suggestedColors: this.suggestedFillColors,
          extraParts: {
            width: true,
            autoStrokeAdjust: false
          }
        }
      },
      stroke: {
        color: ((_b = this.currentSketchInfo.symbol) === null || _b === void 0 ? void 0 : _b.color) || this.savedColors[1],
        size: ((_c = this.currentSketchInfo.symbol) === null || _c === void 0 ? void 0 : _c.width) || 10,
        style: ((_d = this.currentSketchInfo.symbol) === null || _d === void 0 ? void 0 : _d.style) ||
          "solid",
        marker: (_e = this.currentSketchInfo.symbol) === null || _e === void 0 ? void 0 : _e.marker
      },
      portal: this.createPortalProp()
    });
  }
  createPortalProp() {
    return {
      portal: this.portal,
      before: async (portal, data) => {
        await portal.load();
        data.originalStylesGroupQuery2d = portal.stylesGroupQuery2d;
        portal.stylesGroupQuery2d = 'title:"Esri Sketch Styles" AND owner:esri_en';
      },
      after: async (portal, data) => {
        portal.stylesGroupQuery2d = data.originalStylesGroupQuery2d;
      }
    };
  }
  startPolygonEdit() {
    var _a, _b, _c, _d;
    (_a = this.polygonStyler) === null || _a === void 0 ? void 0 : _a.edit(this.currentSketchInfo.symbol.clone(), {
      sections: {
        fill: {
          type: "color",
          open: true,
          optional: true,
          suggestedColorsOpen: true,
          transparencyOpen: false,
          suggestedColors: this.suggestedFillColors
        },
        stroke: {
          type: "color",
          open: false,
          optional: true,
          suggestedColorsOpen: true,
          suggestedColors: this.suggestedFillColors,
          extraParts: {
            width: true,
            autoStrokeAdjust: false
          }
        }
      },
      fill: {
        color: this.currentSketchInfo.symbol.color ||
          this.suggestedFillColors[0]
      },
      stroke: {
        color: ((_b = this.currentSketchInfo.symbol.outline) === null || _b === void 0 ? void 0 : _b.color) ||
          this.suggestedFillColors[0],
        size: ((_c = this.currentSketchInfo.symbol.outline) === null || _c === void 0 ? void 0 : _c.width) || 10,
        style: "solid",
        autoAdjusted: false
      },
      fillEnabled: this.currentSketchInfo.symbol.color ? true : false,
      strokeEnabled: ((_d = this.currentSketchInfo.symbol) === null || _d === void 0 ? void 0 : _d.outline)
        ? true
        : false,
      portal: this.createPortalProp()
    });
  }
  changeRotation(angle) {
    var _a;
    const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
    tempSymbol.angle = angle;
    this.updateSymbol(tempSymbol);
    this.reRender = !this.reRender;
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
    const point = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler", { key: "point-styler", lang: this.currentLanguage, initialSourceId: this.currentSketchInfo.sourceIds.pointSourceId, ref: this.storePointStyler, popoverProps: this.getPopoverProps(isRtl), onArcgisSymbolStylerEdit: ({ detail: { symbol } }) => {
        this.updateSymbol(symbol);
      }, onArcgisSymbolStylerSourceIdChange: ({ detail: sourceId }) => (this.currentSketchInfo.sourceIds.pointSourceId = sourceId) }));
    const polyline = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler", { key: "polyline-styler", lang: this.currentLanguage, initialSourceId: this.currentSketchInfo.sourceIds.polylineSourceId, ref: this.storePolylineStyler, popoverProps: this.getPopoverProps(isRtl), onArcgisSymbolStylerEdit: ({ detail: { symbol } }) => {
        this.updateSymbol(symbol);
      }, onArcgisSymbolStylerSourceIdChange: ({ detail: sourceId }) => (this.currentSketchInfo.sourceIds.polylineSourceId = sourceId) }));
    const polygon = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-styler", { key: "polygon-styler", lang: this.currentLanguage, initialSourceId: this.currentSketchInfo.sourceIds.polygonSourceId, ref: this.storePolygonStyler, popoverProps: this.getPopoverProps(isRtl), onArcgisSymbolStylerEdit: ({ detail: { symbol } }) => {
        this.updateSymbol(symbol);
      }, onArcgisSymbolStylerSourceIdChange: ({ detail: sourceId }) => (this.currentSketchInfo.sourceIds.polygonSourceId = sourceId) }));
    // text
    const textContent = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.content, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "textarea", placeholder: this.strings.textContentPlaceholder, value: (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.text, onCalciteInputInput: (event) => {
        var _a;
        event.stopPropagation();
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        tempSymbol.text = event.target.value;
        this.updateSymbol(tempSymbol);
      } })));
    const fontFamilySelection = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.font, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", iconEnd: "chevron-down", label: (0,_fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.b)(((_b = this.currentSketchInfo.symbol) === null || _b === void 0 ? void 0 : _b.font) ||
        { family: "Arial", style: "normal", weight: "normal" }), width: "full", scale: "m", onClick: this.openFontPopover }, (0,_fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.b)((_c = this.currentSketchInfo.symbol) === null || _c === void 0 ? void 0 : _c.font))));
    const textFontSize = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.size, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", scale: "s", min: 5, max: 125, value: `${((_e = (_d = this.currentSketchInfo.symbol) === null || _d === void 0 ? void 0 : _d.font) === null || _e === void 0 ? void 0 : _e.size) / 0.75 || 0}`, onCalciteInputInput: (event) => {
        var _a;
        event.stopPropagation();
        const node = event.target;
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        tempSymbol.font.size = parseInt(node.value) * 0.75 || 0;
        this.updateSymbol(tempSymbol);
      } })));
    const textColor = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.color, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: ((_g = (_f = this.currentSketchInfo.symbol) === null || _f === void 0 ? void 0 : _f.color) === null || _g === void 0 ? void 0 : _g.toHex()) || "#ffffff", popoverProps: this.getPopoverProps(isRtl), onArcgisColorInputChange: (event) => {
        var _a;
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        tempSymbol.color = new this.Color(event.target.color);
        this.updateSymbol(tempSymbol);
      } })));
    const rotation = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.rotation, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rotation" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { min: 0, max: 360, value: ((_h = this.currentSketchInfo.symbol) === null || _h === void 0 ? void 0 : _h.angle) || 0, step: 1, onCalciteSliderInput: (event) => {
        this.changeRotation(event.target.value);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", scale: "s", min: 0, max: 360, suffixText: isRtl ? "" : "º", prefixText: isRtl ? "º" : "", step: 1, value: `${((_j = this.currentSketchInfo.symbol) === null || _j === void 0 ? void 0 : _j.angle) || 0}`, onCalciteInputInput: (event) => {
        this.changeRotation(parseInt(event.target.value));
      } }))));
    const haloBlock = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { ref: (el) => (this.haloBlockSection = el), text: this.strings.halo, toggleDisplay: "switch", open: ((_k = this.currentSketchInfo.symbol) === null || _k === void 0 ? void 0 : _k.haloColor) ? true : false, onCalciteBlockSectionToggle: (event) => {
        var _a;
        event.stopPropagation();
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        if (this.haloBlockSection.open) {
          tempSymbol.haloColor = this.tempHaloColor || new this.Color("white");
          tempSymbol.haloSize = (tempSymbol === null || tempSymbol === void 0 ? void 0 : tempSymbol.haloSize) || 1 * 0.75;
        }
        else {
          this.tempHaloColor = tempSymbol.haloColor;
          tempSymbol.haloColor = null;
        }
        this.updateSymbol(tempSymbol);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.color, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: ((_m = (_l = this.currentSketchInfo.symbol) === null || _l === void 0 ? void 0 : _l.haloColor) === null || _m === void 0 ? void 0 : _m.toHex()) || "#ffffff", popoverProps: this.getPopoverProps(isRtl), onArcgisColorInputChange: (event) => {
        var _a;
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        tempSymbol.haloColor = new this.Color(event.target.color);
        this.updateSymbol(tempSymbol);
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.size, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", scale: "s", min: 1, max: 10, value: `${((_o = this.currentSketchInfo.symbol) === null || _o === void 0 ? void 0 : _o.haloSize) / 0.75 || 0}`, onCalciteInputInput: (event) => {
        var _a;
        event.stopPropagation();
        const node = event.target;
        const tempSymbol = (_a = this.currentSketchInfo.symbol) === null || _a === void 0 ? void 0 : _a.clone();
        tempSymbol.haloSize = parseInt(node.value) * 0.75 || 0;
        this.updateSymbol(tempSymbol);
      } }))));
    const text = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, textContent, fontFamilySelection, textFontSize, textColor, rotation, haloBlock));
    const sketchTitle = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-title" }, this.strings.title, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-inline-editable", { scale: "m" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { alignment: "start", placeholder: this.strings.enterTitlePlaceholder, scale: "m", type: "text", value: this.currentSketchInfo.title, onBlur: (event) => {
        this.currentSketchInfo.title = event.target.value;
        this.sketchGraphicUpdates.emit({
          update: true,
          close: false
        });
      } }))));
    const popupBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", iconEnd: isRtl ? "chevron-left" : "chevron-right", label: this.strings.popup, width: "full", scale: "l", class: "sketch-popup-button", onClick: (event) => {
        event.stopPropagation();
        if (!this.sketchPopupFlowItem) {
          this.sketchPopupFlowItem = document.createElement("calcite-flow-item");
          this.sketchPopupFlowItem.heading = this.strings.sketch;
          this.sketchPopupFlowItem.description = this.strings.popup;
          const calciteFab = document.createElement("calcite-fab");
          calciteFab.icon = "plus";
          calciteFab.slot = "fab";
          calciteFab.scale = "s";
          calciteFab.appearance = "outline-fill";
          calciteFab.kind = "neutral";
          calciteFab.label = this.strings.addContent;
          calciteFab.text = this.strings.addContent;
          calciteFab.textEnabled = true;
          this.sketchPopupFlowItem.appendChild(calciteFab);
          const popupComponent = document.createElement("arcgis-popup");
          popupComponent.lang = this.currentLanguage;
          popupComponent.mapView = this.mapView;
          popupComponent.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_6__.l.mapNotes;
          popupComponent.mapNotesGraphic = this.currentSketchInfo.graphic;
          popupComponent.mapNotesPopupTemplate = this.currentSketchInfo.popup;
          popupComponent.calciteFlowProps = {
            flow: this.flowEl,
            calciteFab: calciteFab,
            calciteFlowItem: this.sketchPopupFlowItem
          };
          this.sketchPopupFlowItem.appendChild(popupComponent);
          this.flowEl.appendChild(this.sketchPopupFlowItem);
          this.sketchPopupFlowItem.setFocus();
          this.sketchPopupFlowItem.beforeBack = async () => await popupComponent.done();
          this.mapView.closePopup();
          if (this.currentSketchInfo.graphic && this.currentSketchInfo.popup) {
            this.mapView.openPopup({
              features: [this.currentSketchInfo.graphic],
              location: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_7__.o)(this.currentSketchInfo.graphic.geometry)
            });
          }
        }
      } }, this.strings.popup));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sketch-content" }, sketchTitle, popupBtn, (() => {
      switch (this.currentSketchInfo.tool) {
        case "point":
          return point;
        case "text":
          return text;
        case "polyline":
          return polyline;
        case "polygon":
        case "rectangle":
        case "circle":
          return polygon;
        default:
          return null;
      }
    })()))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchContent.style = arcgisSketchContentCss;

const arcgisSketchShortcutsCss = ".sketch-shortcut{background-color:var(--arcgis-app-background);display:grid;grid-template-columns:21% auto;row-gap:var(--arcgis-app-cap-spacing-half);padding:var(--arcgis-app-cap-spacing-half)}.sketch-shortcut-chip{margin-right:var(--arcgis-app-cap-spacing-half)}.sketch-shortcut-label{align-self:center}.popover{z-index:100}.arcgis--rtl .sketch-shortcut{max-height:40vh}.arcgis--rtl .sketch-shortcut-chip{margin-left:var(--arcgis-app-cap-spacing-half);margin-right:0}";

const ArcgisSketchShortcuts = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisSketchShortcutsDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSketchShortcutsDismissedChange", 7);
    this.refElement = undefined;
    this.isOpen = false;
  }
  componentWillLoad() {
    this.strings = sketchState.strings;
  }
  componentDidLoad() {
    this.isOpen = true;
  }
  async reposition() {
    var _a;
    (_a = this.sketchShortcutsPopover) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  render() {
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
    const placement = !isRtl ? "leading-start" : "trailing-start";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), class: "popover " + ((0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl" ? _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl : ""), ref: (el) => (this.sketchShortcutsPopover = el), placement: placement, open: this.isOpen, pointerDisabled: true, referenceElement: this.refElement, offsetDistance: -Math.round(this.refElement.getBoundingClientRect().width), offsetSkidding: 0, label: this.strings.sketchShortcuts }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: this.strings.sketchShortcuts, closable: true, style: {
        width: `${Math.max(this.refElement.getBoundingClientRect().width, 375)}px`
      }, onCalcitePanelClose: () => this.arcgisSketchShortcutsDismissedChange.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sketch-shortcut" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Ctrl", scale: "m" }, "Ctrl"), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.ctrlShortcut), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Enter", scale: "m" }, "Enter"), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.cShortcut), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Z", scale: "m" }, "Z"), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.zShortcut), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "R", scale: "m" }, "R"), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.rShortcut), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { class: "sketch-shortcut-chip", value: "Esc", scale: "m" }, "Esc"), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "sketch-shortcut-label" }, this.strings.escShortcut))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchShortcuts.style = arcgisSketchShortcutsCss;

const arcgisSketchSnappingCss = ".content{max-height:60vh}";

const ArcgisSketchSnapping = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closeSketchSnappingPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeSketchSnappingPopovers", 7);
    this.refElement = undefined;
  }
  async componentWillLoad() {
    this.strings = sketchState.strings;
    this.mapView = sketchState.mapView;
    this.snappingOptions = sketchState.snappingOptions;
    this.snappingSessionStorageIds = sketchState.snappingSessionStorageIds;
    this.sketchTooltipOptions = sketchState.sketchTooltipOptions;
    this.sketchTooltipSessionStorageIds = sketchState.sketchTooltipSessionStorageIds;
    await this.loadAllModules();
    this.addSnappingWidget();
    this.addTooltipsWidget();
  }
  componentDidLoad() {
    this.snappingControls.container = this.snappingControlDiv;
    this.sketchTooltipControls.container = this.sketchTooltipControlDiv;
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.snappingControls) === null || _a === void 0 ? void 0 : _a.destroy();
    (_b = this.sketchTooltipControls) === null || _b === void 0 ? void 0 : _b.destroy();
  }
  async reposition() {
    var _a;
    (_a = this.sketchSnappingPopover) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  async loadAllModules() {
    const [SnappingControls, SketchTooltipControls] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/widgets/support/SnappingControls",
      "esri/widgets/support/SketchTooltipControls"
    ]);
    this.SnappingControls = SnappingControls;
    this.SketchTooltipControls = SketchTooltipControls;
  }
  addSnappingWidget() {
    this.snappingControls = new this.SnappingControls({
      view: this.mapView,
      snappingOptions: sketchState.snappingOptions,
      visibleElements: {
        header: false
      }
    });
  }
  addTooltipsWidget() {
    this.sketchTooltipControls = new this.SketchTooltipControls({
      view: this.mapView,
      tooltipOptions: sketchState.sketchTooltipOptions,
      visibleElements: {
        tooltipsToggle: true,
        labelsToggle: false
      }
    } /* __esri.SketchTooltipControlsProperties */);
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), placement: "leading-start", ref: (el) => (this.sketchSnappingPopover = el), open: true, pointerDisabled: true, referenceElement: this.refElement, offsetDistance: -Math.round(this.refElement.getBoundingClientRect().width), offsetSkidding: 0, label: this.strings.settings, style: {
        zIndex: "100"
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { closable: true, headingLevel: 2, heading: this.strings.settings, style: {
        width: `${this.refElement.getBoundingClientRect().width}px`
      }, onCalcitePanelClose: () => {
        var _a, _b;
        if ((_a = this.snappingSessionStorageIds) === null || _a === void 0 ? void 0 : _a.current) {
          saveSnappingToStorage(this.snappingOptions, this.snappingSessionStorageIds.current);
        }
        if ((_b = this.sketchTooltipSessionStorageIds) === null || _b === void 0 ? void 0 : _b.current) {
          saveSketchTooltipToStorage(this.sketchTooltipOptions, this.sketchTooltipSessionStorageIds.current);
        }
        this.closeSketchSnappingPopovers.emit();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.sketchTooltipControlDiv = el) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.snappingControlDiv = el) }))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchSnapping.style = arcgisSketchSnappingCss;

const arcgisSketchToolsCss = ".popover{z-index:100}";

const ArcgisSketchTools = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.sketchActionOnDrawFeatures = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchActionOnDrawFeatures", 7);
    this.sketchActionOnSelectFeatures = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "sketchActionOnSelectFeatures", 7);
    this.refElement = undefined;
    this.mapNotesFeature = null;
    this.isOpen = false;
  }
  componentWillLoad() {
    this.strings = sketchState.strings;
    this.svModel = sketchState.svModel;
    this.layer = sketchState.layer;
  }
  componentDidLoad() {
    // select mode if feature is available, else default add point mode
    if (this.mapNotesFeature) {
      this.actionOnSelectFeatures(this.strings.selectText, this.sketchSelect);
      switch (this.mapNotesFeature.layer) {
        case this.layer.pointLayer:
          this.svModel.updatePoint([this.mapNotesFeature]);
          break;
        case this.layer.textLayer:
          this.svModel.updateText([this.mapNotesFeature]);
          break;
        case this.layer.polylineLayer:
          this.svModel.updateLine([this.mapNotesFeature]);
          break;
        case this.layer.polygonLayer:
          this.svModel.updatePolygon([this.mapNotesFeature]);
          break;
        default:
          return;
      }
    }
    else {
      this.actionOnDrawFeatures("point", this.strings.addStamp, this.sketchPoint);
    }
    this.isOpen = true;
  }
  async reposition() {
    var _a;
    (_a = this.sketchToolsPopover) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  actionOnDrawFeatures(tool, sketchMessage, currentActionElement) {
    this.clearActiveSelection();
    currentActionElement.active = true;
    this.sketchActionOnDrawFeatures.emit({
      tool: tool,
      sketchMessage: sketchMessage
    });
  }
  actionOnSelectFeatures(sketchMessage, currentActionElement, multipleSelectTool) {
    const { active = false } = currentActionElement;
    this.clearActiveSelection();
    currentActionElement.active = !active;
    this.svModel.cancel();
    this.sketchActionOnSelectFeatures.emit({
      sketchMessage: !active ? sketchMessage : "",
      multipleSelectTool: (!active && multipleSelectTool) || null
    });
  }
  clearActiveSelection() {
    this.sketchPoint.active = false;
    this.sketchPolyLine.active = false;
    this.sketchPolygon.active = false;
    this.sketchRectangle.active = false;
    this.sketchCircle.active = false;
    this.sketchText.active = false;
    this.sketchSelect.active = false;
    this.sketchRectangleSelect.active = false;
    this.sketchLassoSelect.active = false;
  }
  render() {
    const drawFeatures = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", { layout: "vertical" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchPoint = el), text: this.strings.stamp, label: this.strings.stamp, title: this.strings.stamp, icon: "pin", scale: "m", alignment: "center", onClick: () => {
        this.actionOnDrawFeatures("point", this.strings.addStamp, this.sketchPoint);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchPolyLine = el), text: this.strings.line, label: this.strings.line, title: this.strings.line, icon: "line", scale: "m", alignment: "center", onClick: () => {
        this.actionOnDrawFeatures("polyline", this.strings.startFinishDrawing, this.sketchPolyLine);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchPolygon = el), text: this.strings.polygon, label: this.strings.polygon, title: this.strings.polygon, icon: "polygon", scale: "m", alignment: "center", onClick: () => {
        this.actionOnDrawFeatures("polygon", this.strings.startFinishDrawing, this.sketchPolygon);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchRectangle = el), text: this.strings.rectangle, label: this.strings.rectangle, title: this.strings.rectangle, icon: "rectangle", scale: "m", alignment: "center", onClick: () => {
        this.actionOnDrawFeatures("rectangle", this.strings.addRectangle, this.sketchRectangle);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchCircle = el), text: this.strings.circle, label: this.strings.circle, title: this.strings.circle, icon: "circle", scale: "m", alignment: "center", onClick: () => {
        this.actionOnDrawFeatures("circle", this.strings.addCircle, this.sketchCircle);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchText = el), text: this.strings.text, label: this.strings.text, title: this.strings.text, icon: "text", scale: "m", alignment: "center", onClick: async () => {
        this.actionOnDrawFeatures("text", this.strings.addText, this.sketchText);
      } })));
    const selectFeatures = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", { layout: "vertical" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchSelect = el), text: this.strings.select, label: this.strings.select, title: this.strings.select, icon: "cursor", scale: "m", alignment: "center", onClick: () => {
        this.actionOnSelectFeatures(this.strings.selectText, this.sketchSelect);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchRectangleSelect = el), text: this.strings.rectangleSelect, label: this.strings.rectangleSelect, title: this.strings.rectangleSelect, icon: "cursor-marquee", scale: "m", alignment: "center", onClick: () => {
        this.actionOnSelectFeatures(this.strings.rectangleLassoSelect, this.sketchRectangleSelect, "rectangle");
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.sketchLassoSelect = el), text: this.strings.lassoSelect, label: this.strings.lassoSelect, title: this.strings.lassoSelect, icon: "lasso", scale: "m", alignment: "center", onClick: () => {
        this.actionOnSelectFeatures(this.strings.rectangleLassoSelect, this.sketchLassoSelect, "lasso");
      } })));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), ref: (el) => (this.sketchToolsPopover = el), placement: "leading-start", open: this.isOpen, referenceElement: this.refElement, offsetDistance: 15, pointerDisabled: true, focusTrapDisabled: true, triggerDisabled: true, label: this.strings.sketch, class: "popover", onCalcitePopoverBeforeClose: () => (this.sketchToolsPopover.open = true) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-pad", { position: "start", layout: "vertical", expandDisabled: true }, drawFeatures, selectFeatures))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSketchTools.style = arcgisSketchToolsCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getCookie),
/* harmony export */   b: () => (/* binding */ setCookie),
/* harmony export */   c: () => (/* binding */ setSessionStorageItem),
/* harmony export */   d: () => (/* binding */ getSessionStorageItem),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
  writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
  const cookie = readCookie(name);
  return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
  window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
  const item = window.localStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
  window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
  const item = window.sessionStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
  const cookie = document.cookie;
  const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
  const matchedCookies = cookie.match(cookieNameRE);
  return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
  properties = properties || {};
  let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
  if (typeof expires === "number") {
    const expirationDate = new Date();
    const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
    expirationDate.setTime(Date.now() + daysFromTodayInMs);
    expires = properties.expires = expirationDate;
  }
  if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
    properties.expires = expires.toUTCString();
  }
  let cookie = `${name}=${encodeURIComponent(value)}`;
  let property;
  for (property in properties) {
    cookie += `; ${property}`;
    const propertyValue = properties[property];
    if (propertyValue !== true) {
      cookie += `=${propertyValue}`;
    }
  }
  document.cookie = cookie;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,