"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-734c67"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const addItemStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  typeKeywords: [],
  customParameters: [],
  analyzedLocationTypes: [],
  allowStoredAuth: true,
  isSecured: null,
  checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-tile-layer-from-url.entry.js":
/*!********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-tile-layer-from-url.entry.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_tile_layer_from_url: () => (/* binding */ ArcgisNewItemPagesTileLayerFromUrl)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functional-9f648bee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */







const arcgisNewItemPagesTileLayerFromUrlCss = ".input-container{margin-bottom:1.5rem}.label{color:var(--calcite-ui-text-1);display:block;font-size:0.875rem;font-weight:500;margin-top:0;margin-bottom:0;line-height:18px}calcite-label{--calcite-label-margin-bottom:0}.subdomain-container{margin-bottom:1.5rem}";

const ArcgisNewItemPagesTileLayerFromUrl = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.workflowComplete = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowComplete", 7);
    this.showSubdomains = false;
    this.handleChange = (event) => {
      const checked = event.target.checked;
      _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.storeAuth = checked;
    };
    this.handleLoaderUpdate = (event) => {
      this.loading = event.detail;
    };
    this.getPlaceholder = (type) => {
      const { i18n } = this;
      switch (type) {
        case "title":
          return i18n.titlePlaceholder;
        case "attribution":
          return i18n.attribution;
        case "subdomain":
          return "https://{subDomain}.domain.com/<path>/{level}/{col}/{row}.png";
      }
    };
    this.assignRef = (ref, type) => {
      if (type === "title") {
        this.titleInputRef = ref;
      }
      else {
        this.attributionInputRef = ref;
      }
    };
    this.handleKeydown = (e) => {
      var _a;
      // If user typed a comma, treat as enter.
      // TODO: remove after calcite enables comma support (https://github.com/Esri/calcite-components/issues/4672)
      if (e.key === ",") {
        const target = e.target;
        const input = (_a = target === null || target === void 0 ? void 0 : target.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("input");
        if (input === null || input === void 0 ? void 0 : input.value) {
          e.preventDefault();
          const existing = target.querySelector(`calcite-combobox-item[value="${input.value}"]`);
          if (existing) {
            existing.selected = true;
          }
          else {
            const item = document.createElement("calcite-combobox-item");
            item.value = input.value;
            item.textLabel = input.value;
            item.selected = true;
            target === null || target === void 0 ? void 0 : target.appendChild(item);
          }
          input.value = "";
        }
      }
    };
    this.i18n = undefined;
    this.errorMessage = undefined;
    this.loading = false;
    this.title = "";
    this.attribution = null;
    this.subdomains = [];
    this.useCurrentExtent = false;
  }
  async handleNext() {
    const { i18n, title, attribution, subdomains = null, useCurrentExtent } = this;
    const { url, customParameters, addAsBasemap } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
    this.errorMessage = null;
    if (!title) {
      this.errorMessage = i18n.error.title;
      this.titleInputRef.setFocus();
      return;
    }
    if (!attribution) {
      this.errorMessage = i18n.error.attribution;
      this.attributionInputRef.setFocus();
      return;
    }
    this.loading = true;
    if (this.isAddToMapTerminalPage()) {
      this.workflowComplete.emit({
        title,
        attribution,
        subdomain: subdomains.join(","),
        useCurrentExtent,
        url,
        customParameters,
        type: "Tile Layer",
        addAsBasemap
      });
    }
  }
  async componentWillLoad() {
    const i18n = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__.u.i18n;
    this.i18n = i18n.tileLayerFromUrl;
    if (this.isAddToMapTerminalPage()) {
      _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__.u.nextText = "addToMap";
    }
    this.showSubdomains = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.url.toLowerCase().includes("{subdomain}");
    // TODO: assign state from store once this is not a terminal page
  }
  isAddToMapTerminalPage() {
    // ! Note: this page only supports direct mode for now
    return true;
  }
  render() {
    const { loading, errorMessage, i18n, getPlaceholder, assignRef, handleKeydown, showSubdomains } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-loader", { active: loading }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { active: !!errorMessage, description: errorMessage, onAlertDismiss: () => (this.errorMessage = "") }), ["title", "attribution"].map((type) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "label" }, i18n[type]), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "input-container", placeholder: getPlaceholder(type), ref: (ref) => assignRef(ref, type), value: this[type], required: true, onCalciteInputInput: (e) => (this[type] = e.target.value) })))), showSubdomains && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "subdomain-container" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "label" }, i18n.subdomain), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { label: i18n.subdomain, allowCustomValues: true, placeholder: i18n.subDomainPlaceholder, onKeyDown: handleKeydown, onCalciteComboboxChange: (event) => {
        event.stopPropagation();
        const node = event.target;
        this.subdomains = (0,_functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_3__.f)(node.selectedItems.map((item) => item.value));
      } })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-switch-card", { header: i18n.setTileExtent, onSwitchChange: (event) => {
        this.useCurrentExtent = event.detail;
      } })));
  }
  get element() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemPagesTileLayerFromUrl.style = arcgisNewItemPagesTileLayerFromUrlCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ formatFileName),
/* harmony export */   f: () => (/* binding */ formatTags),
/* harmony export */   s: () => (/* binding */ streamPromises)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const formatFileName = (title) => (title === null || title === void 0 ? void 0 : title.replace(/(\s+|:)/g, "_")) || "";
const formatTags = (tags) => {
  const cleanTags = (tagObj) => {
    return tagObj
      .split(",")
      .map((tag) => tag.trim())
      .filter((tag) => tag);
  };
  if (!tags) {
    return [];
  }
  else if (typeof tags === "string") {
    return (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.b)(cleanTags(tags));
  }
  else {
    return (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.b)(tags.flatMap((tag) => {
      return [...cleanTags(tag)];
    }));
  }
};
const resolveOnFirstPromise = async (promiseList) => {
  return new Promise((resolve, reject) => {
    for (let i = 0; i < promiseList.length; i++) {
      promiseList[i]
        .then((result) => {
        const newArr = [...promiseList];
        newArr.splice(i, 1);
        resolve({ remainingPromises: newArr, result });
      })
        .catch(reject);
    }
  });
};
/**
 * Similar to Promise.all but will resolve on the first promise that resolves then continuously swap out the resolved promise with the next promise in the list
 * @param getNextPromise A function that returns the next promise to resolve
 */
async function streamPromises(getNextPromise, options) {
  var _a, _b;
  const results = [];
  const { getBatchSize, onPromiseCompleted, onPromiseThrow, shouldContinue } = options !== null && options !== void 0 ? options : {};
  let remainingPromises = [];
  for (let i = 0; i < ((_a = getBatchSize === null || getBatchSize === void 0 ? void 0 : getBatchSize()) !== null && _a !== void 0 ? _a : 1); i++) {
    try {
      const nextElement = getNextPromise();
      nextElement && remainingPromises.push(nextElement);
    }
    catch (e) {
      onPromiseThrow === null || onPromiseThrow === void 0 ? void 0 : onPromiseThrow(e);
    }
  }
  let lastResult = null;
  while (remainingPromises.length > 0 && (!shouldContinue || shouldContinue(lastResult))) {
    try {
      const { remainingPromises: _remainingPromises, result } = await resolveOnFirstPromise(remainingPromises);
      remainingPromises = _remainingPromises;
      lastResult = result;
      !!result && results.push(result);
      onPromiseCompleted === null || onPromiseCompleted === void 0 ? void 0 : onPromiseCompleted(result);
      // Update batch size after the new result is bubbled up
      const batchSize = (_b = getBatchSize === null || getBatchSize === void 0 ? void 0 : getBatchSize()) !== null && _b !== void 0 ? _b : 1;
      while (remainingPromises.length < batchSize) {
        const nextElement = getNextPromise();
        nextElement && remainingPromises.push(nextElement);
        if (nextElement == null) {
          break;
        }
      }
    }
    catch (e) {
      onPromiseThrow === null || onPromiseThrow === void 0 ? void 0 : onPromiseThrow(e);
    }
  }
  return results;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const uiStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  nextText: "next",
  workflow: "content",
  scale: "m",
  disableScroll: false,
  featureFlags: { tileLayer3dTiles: false }
});
const uiStoreState = uiStore.state;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,