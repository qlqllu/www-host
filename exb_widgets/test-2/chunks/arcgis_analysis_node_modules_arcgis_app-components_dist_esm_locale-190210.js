"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_locale-190210"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-d9d70416.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-d9d70416.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getHydratedItem),
/* harmony export */   b: () => (/* binding */ getItemDataUrl),
/* harmony export */   c: () => (/* binding */ getItemGroups),
/* harmony export */   d: () => (/* binding */ getItem),
/* harmony export */   e: () => (/* binding */ isEditableItem),
/* harmony export */   g: () => (/* binding */ getItemData),
/* harmony export */   i: () => (/* binding */ isHostedService),
/* harmony export */   r: () => (/* binding */ requestFetch)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




/** Work-around since using `request` directly will trigger unwanted toast on the Home App if the layer is unavailable */
const requestFetch = async (url, portal, options = {}) => {
  const { body, usePost, addTokenManually, api = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.api } = options;
  const data = new URLSearchParams();
  if (body) {
    Object.entries(body).forEach(([key, value]) => {
      if (value !== undefined) {
        data.append(key, value);
      }
    });
  }
  const urlToSend = new URL(url);
  urlToSend.searchParams.append("f", "json");
  const token = addTokenManually === false ? null : await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.d)(portal, api);
  if (token) {
    urlToSend.searchParams.append("token", token);
  }
  const response = await fetch(urlToSend.toString(), {
    body: usePost ? data : undefined,
    method: usePost ? "POST" : "GET"
  });
  const result = await response.json();
  const error = result.error;
  if (error) {
    throw typeof error === "string" ? new Error(error) : error;
  }
  return result;
};

const isHostedService = (typeKeywords, type) => type === "Feature Service" && typeKeywords.includes("Hosted Service");

const getHydratedItem = async (itemId, portal) => {
  try {
    const item = await requestFetch(getItemUrl(itemId, portal), portal);
    // TODO: check if we still need to do this
    // if (isHostedService(item.typeKeywords, item.type)) {
    //   const itemData = getItemData(item.id, portal);
    //   return { result: { ...item, ...itemInfo, ...itemData } };
    // }
    return { result: item };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
const getItemDataUrl = (itemId, portal) => `${getItemUrl(itemId, portal)}/data`;
const getItemData = async (itemId, portal) => {
  return requestFetch(getItemDataUrl(itemId, portal), portal);
};
// TODO: remove these once we figure out how to efficiently disable the toast on the Home App
const getItemUrl = (itemId, portal) => `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${itemId}`;
const getItem = async (itemId, portal, requestOptions) => {
  try {
    const url = getItemUrl(itemId, portal);
    return await requestFetch(url, portal, requestOptions);
  }
  catch (error) {
    console.warn(error);
  }
};
const getItemGroups = async (itemId, portal) => {
  try {
    const url = `${getItemUrl(itemId, portal)}/groups`;
    return { result: await requestFetch(url, portal) };
  }
  catch (error) {
    // TODO: handle error
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
const isEditableItem = async (item, portal) => {
  let isEditable = false;
  if (isHostedService(item.typeKeywords, item.type)) {
    isEditable = await hasEditingCapability(item.url, portal);
  }
  return isEditable;
};
const hasEditingCapability = async (layerUrl, portal, requiredNoToken = false) => {
  var _a, _b, _c;
  if (layerUrl) {
    try {
      const result = await requestFetch(`${(_a = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.p)(layerUrl)) === null || _a === void 0 ? void 0 : _a.baseServerUrl}/layers`, portal, { addTokenManually: !requiredNoToken });
      return (_b = result === null || result === void 0 ? void 0 : result.layers) === null || _b === void 0 ? void 0 : _b.reduce((memo, layer) => memo || (layer === null || layer === void 0 ? void 0 : layer.capabilities.includes("Editing")), false);
    }
    catch (error) {
      if ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes("token required")) {
        return hasEditingCapability(layerUrl, portal, true);
      }
    }
  }
  return false;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-adddeef9.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-adddeef9.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ analyzeSharingDetail),
/* harmony export */   b: () => (/* binding */ shareItems),
/* harmony export */   c: () => (/* binding */ isBlockedFromSharingToPublic),
/* harmony export */   d: () => (/* binding */ isBlockedFromDeveloperSharingToPublic),
/* harmony export */   e: () => (/* binding */ dependencyCheckCacheTypes),
/* harmony export */   i: () => (/* binding */ isAccessLevelGreater),
/* harmony export */   s: () => (/* binding */ shareItemsToSharedGroups),
/* harmony export */   u: () => (/* binding */ unshareItems)
/* harmony export */ });
/* harmony import */ var _server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./server-item-f12153e6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-f12153e6.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./item-d9d70416.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-d9d70416.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






/**
 * Share items to the specified groups with the specified access level
 *
 * Note: `request` will toast an error on the Home app `useFetchRequest` is a workaround. TODO: remove this once we have a better way
 *
 * */
const shareItems = async (items, shareLevel, groupIds, config, useFetchRequest = false) => {
  const { portal, user } = config;
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}content/users/${user.username}/shareItems`;
  let result = [];
  const shareLevelOptions = shareLevel ? toShareLevelOptions(shareLevel) : {};
  if (items.every((item) => (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.i)(item, user))) {
    try {
      result = (await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, {
        body: Object.assign({ items: items.map((item) => item.id).join(","), groups: (groupIds === null || groupIds === void 0 ? void 0 : groupIds.length) ? groupIds.join(",") : undefined, confirmItemControl: true }, shareLevelOptions),
        usePost: true
      })).results;
    }
    catch (error) {
      console.error(error);
      return { error: { code: "unhandledError" } };
    }
  }
  else {
    // TODO: hair splitting error here
    result = (await Promise.all(items.map(({ id }) => shareItem(id, shareLevelOptions, groupIds, portal, useFetchRequest)))).map((response) => response.result);
  }
  return { result };
};
const unshareItems = async (itemIds, groupIds, config) => {
  const { portal, user } = config;
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}content/users/${user.username}/unshareItems`;
  try {
    const result = (await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, {
      body: { items: itemIds.join(","), groups: (groupIds === null || groupIds === void 0 ? void 0 : groupIds.length) ? groupIds.join(",") : null },
      usePost: true
    })).results;
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
/**
 * Share single item to the specified groups with the specified access level
 *
 * Note: `request` will toast an error on the Home app `useFetchRequest` is a workaround. TODO: remove this once we have a better way
 *
 * */
async function shareItem(itemId, shareLevelOptions, groups, portal, useFetchRequest = false) {
  try {
    const url = `${(0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_0__.g)(itemId, portal)}/share`;
    const params = Object.assign({ groups: (groups === null || groups === void 0 ? void 0 : groups.length) ? groups.join(",") : null, confirmItemControl: true }, shareLevelOptions);
    let result;
    if (useFetchRequest) {
      result = await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, { body: params, usePost: true });
    }
    else {
      result = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, params, {}, "post");
    }
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
}
function toShareLevelOptions(shareLevel) {
  switch (shareLevel) {
    case "public":
      return { org: false, everyone: true };
    case "org":
      return { org: true, everyone: false };
    case "private":
      return { org: false, everyone: false };
    case "shared":
      return { org: false, everyone: false };
    default:
      return {};
  }
}

// disable public sharing of certain items
// WebGIS/arcgis-portal-app#26591, WebGIS/arcgis-portal-app#26987, WebGIS/arcgis-portal-app#30517
// WebGIS/arcgis-portal-app#35924, WebGIS/arcgis-portal-app#36835
function isBlockedFromSharingToPublic(item) {
  const { typeKeywords, type, url } = item;
  const hasNonShareableKeyword = typeKeywords && nonPubliclyShareableKeywords.some((keyword) => typeKeywords.includes(keyword));
  // ! No need to check for portal.isPortal here as that url type is only in ArcGIS Online
  const isOnlineDynamicImageryService = type === "Image Service" && (url === null || url === void 0 ? void 0 : url.includes("://iservices")) && url.includes("arcgis.com");
  const isNonShareableType = nonPubliclyShareableTypes.includes(type);
  return hasNonShareableKeyword || isOnlineDynamicImageryService || isNonShareableType;
}
function isBlockedFromDeveloperSharingToPublic(item) {
  var _a;
  const isHosted = (_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Hosted Service");
  const blackListTypes = [
    "Vector Tile Service",
    "Map Service",
    "Scene Service",
    "Feature Service"
  ];
  return blackListTypes.includes(item.type) && isHosted;
}
const nonPubliclyShareableKeywords = [
  "Location Tracking Service",
  "Location Tracking View",
  "IoTFeed",
  "IoTFeatureLayer",
  "IoTMapImageLayer",
  "IoTStreamLayer",
  "Administrative Report",
  "EditExtensionIndoorsSpaces",
  "ArcgisWorkflowJobLocation"
];
const nonPubliclyShareableTypes = ["Knowledge Graph", "Pro Project"];

// * --- Dependent item layers
const getDependentItemLayers = async (mainItem, portal) => {
  const id = mainItem.id;
  let getDataError;
  let itemsAndLayers = { items: [], layers: [] };
  switch (mainItem.type) {
    case "Group Layer":
      ({ result: itemsAndLayers, error: getDataError } = await getGroupLayerDependentItemLayers(id, portal));
      break;
    case "Web Map":
    case "Web Scene":
      ({ result: itemsAndLayers, error: getDataError } = await getWebMapDependentItemLayers(id, portal));
      break;
    case "Web Mapping Application":
      ({ result: itemsAndLayers, error: getDataError } = await getWebAppDependentItemLayers(id, portal));
      break;
    case "Web Experience":
    case "Web Experience Template":
      ({ result: itemsAndLayers, error: getDataError } = await getWebExperienceDependentItemLayers(id, mainItem.typeKeywords, portal));
      break;
    case "Big Data File Share":
    case "Data Store":
      throw new Error("Not implemented");
  }
  return { result: itemsAndLayers, error: getDataError };
};
// * --- Group layer
const getGroupLayerDependentItemLayers = async (itemId, portal) => {
  try {
    const itemData = await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.g)(itemId, portal);
    return {
      result: {
        items: [],
        layers: [Object.assign({}, itemData)]
      }
    };
  }
  catch (error) {
    // TODO: handle more error
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
// * --- Web map
const getWebMapDependentItemLayers = async (itemId, portal) => {
  var _a, _b;
  try {
    const itemData = await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.g)(itemId, portal);
    const { operationalLayers, baseMap, tables, ground } = itemData;
    return {
      result: {
        items: [],
        layers: [
          ...(operationalLayers !== null && operationalLayers !== void 0 ? operationalLayers : []),
          ...((_a = baseMap === null || baseMap === void 0 ? void 0 : baseMap.baseMapLayers) !== null && _a !== void 0 ? _a : []),
          ...((_b = ground === null || ground === void 0 ? void 0 : ground.layers) !== null && _b !== void 0 ? _b : []),
          ...(tables !== null && tables !== void 0 ? tables : [])
        ]
      }
    };
  }
  catch (error) {
    // TODO: handle more error
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
// * --- Web app
const getWebAppDependentItemLayers = async (itemId, portal) => {
  try {
    const itemData = await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.g)(itemId, portal);
    if (!itemData) {
      return { result: { items: [], layers: [] } };
    }
    const webAppMapList = getWebAppMapList(itemData);
    const dependentItems = (await Promise.all(webAppMapList.map((itemId) => (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.a)(itemId, portal))))
      // TODO: handle errors
      .map(({ result }) => result)
      .filter((item) => item);
    const dependentItemLayers = await Promise.all(dependentItems.map((item) => getDependentItemLayers(item, portal)));
    const { items, layers } = flattenDependentItemsAndLayerResponse(dependentItemLayers
      .map(({ result }) => result)
      .flat()
      .filter((result) => result));
    return {
      // Web map application doesn't have any layers so we only return the layers from dep items
      result: { items: [...dependentItems, ...items], layers }
    };
  }
  catch (error) {
    // TODO: handle more error
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
const getWebAppMapList = (appData) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
  const items = ((_a = appData === null || appData === void 0 ? void 0 : appData.map) === null || _a === void 0 ? void 0 : _a.itemId) ? [appData.map.itemId] : [];
  const portfolioCollection = (_d = (_c = (_b = appData.values) === null || _b === void 0 ? void 0 : _b.itemCollection) === null || _c === void 0 ? void 0 : _c.map((el) => el.id)) !== null && _d !== void 0 ? _d : [];
  const maps = (_g = (_f = (_e = appData.values) === null || _e === void 0 ? void 0 : _e.webmap) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
  const scenes = (_k = (_j = (_h = appData.values) === null || _h === void 0 ? void 0 : _h.webscene) === null || _j === void 0 ? void 0 : _j.split(",")) !== null && _k !== void 0 ? _k : [];
  return [...items, ...portfolioCollection, ...maps, ...scenes];
};
// * --- Web experience
const getWebExperienceDependentItemLayers = async (itemId, typeKeywords, portal) => {
  const draftUrl = `${(0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_0__.g)(itemId, portal)}/resources/config/config.json`;
  const itemDataUrl = (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.b)(itemId, portal);
  const dataUrls = [];
  if (typeKeywords.includes("status: Draft")) {
    dataUrls.push(draftUrl);
  }
  else if (typeKeywords.includes("status: Changed")) {
    dataUrls.push(draftUrl, itemDataUrl);
  }
  else {
    dataUrls.push(itemDataUrl);
  }
  try {
    const allItems = [];
    const allDependentItems = [];
    const allLayers = [];
    await Promise.all(dataUrls.map(async (dataUrl) => {
      const itemData = await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.r)(dataUrl, portal);
      if (!(itemData === null || itemData === void 0 ? void 0 : itemData.dataSources) && !(itemData === null || itemData === void 0 ? void 0 : itemData.utilities)) {
        return;
      }
      const dependentItems = (await Promise.all(getWebExperienceDependencyIdList(itemData).map((itemId) => (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.a)(itemId, portal)))) // TODO: handle errors
        .map(({ result }) => result)
        .filter((item) => item);
      const dependentItemLayers = await Promise.all(dependentItems.map((item) => getDependentItemLayers(item, portal)));
      const { items, layers } = flattenDependentItemsAndLayerResponse(dependentItemLayers.flatMap(({ result }) => result).filter((layer) => layer));
      allLayers.push(...layers);
      allItems.push(...items);
      allDependentItems.push(...dependentItems);
    }));
    return {
      // Web experience doesn't have any layers so we only return the layers from dep items
      result: { items: [...allDependentItems, ...allItems], layers: allLayers }
    };
  }
  catch (error) {
    // TODO: handle more error
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
function getWebExperienceDependencyIdList(data) {
  const dataSources = data.dataSources || {};
  const utilities = data.utilities || {};
  const allDeps = [...Object.values(dataSources), ...Object.values(utilities)];
  return allDeps.map((dep) => dep.itemId).filter((id) => id);
}
const flattenDependentItemsAndLayerResponse = (responses) => {
  return {
    items: responses.flatMap((response) => response.items),
    layers: responses.flatMap((response) => response.layers)
  };
};

/**
 * Get the groups that a layer is shared with
 */
async function getLayerSharedGroups(layerId, portal, includeFavoriteGroups = false) {
  try {
    const { result } = await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.c)(layerId, portal);
    return {
      result: [...result.admin, ...result.member, ...result.other]
        .filter((group) => includeFavoriteGroups || !group.isFav)
        .map((group) => group.id)
    };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
}

const isWebMapTable = (layer) => 
// ! This is just a workaround for now but it's not completely safe since there is no discriminator
!("layerType" in layer) && layer.url && layer.popupInfo;
const isSupportedLayerTypeForUrlCheck = (layer) => {
  const validTypes = [
    "table",
    "ArcGISFeatureLayer",
    "ArcGISTiledMapServiceLayer",
    "VectorTileLayer",
    "GroupLayer",
    "ArcGISImageServiceLayer",
    "ArcGISTiledImageServiceLayer",
    "SubtypeGroupLayer",
    "ArcGISStreamLayer",
    "MediaLayer"
  ];
  return validTypes.includes(layer.layerType);
};
const isTileLayer = (layer) => layer.layerType === "ArcGISTiledMapServiceLayer";
const isTileOperationLayerWithPopup = (layer) => layer.layerType === "ArcGISTiledMapServiceLayer" && "layers" in layer && layer.layers[0].disablePopup === false;
const isVectorTileLayer = (layer) => layer.layerType === "VectorTileLayer" && "styleUrl" in layer;
const DEFAULT_SHARING_DETAILS = {
  needsGroupUpdate: false,
  needsShareLevelUpdate: false,
  canEditShareLevel: true,
  premium: false
};

/**
 * Send a request to get data for `url`. This request will not include a token to avoid token leak
 */
const getServiceUrlResponse = async (url, portal) => {
  var _a;
  try {
    return { result: await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, { addTokenManually: false }) };
  }
  catch (error) {
    const tokenRequiredMessage = "token required";
    if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(tokenRequiredMessage)) {
      return { error: { code: "tokenRequired" } };
    }
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};

const accessLevel = {
  private: 0,
  shared: 1,
  org: 2,
  public: 3
};
const isAccessLevelGreater = (mainAccess, otherAccess) => accessLevel[mainAccess] > accessLevel[otherAccess];
/**
 * Given a URL and a relative path, return the full URL
 * e.g: https://www.arcgis.com/sharing/rest/content/items/1234567890abcdefg and "../../", return https://www.arcgis.com/sharing/rest/
 *
 */
const traverseUrls = ({ path, url }) => {
  const urlParts = url.split("/");
  const pathParts = path.split("/");
  const urlPartsToKeep = urlParts.slice(0, urlParts.length - pathParts.length);
  return urlPartsToKeep.join("/");
};

const filterUrlsFromSameOrigin = async (portal, urlsToCheck) => {
  const { owningSystemUrl: mainItemOwningSystemUrl } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.f)(async () => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.a)(portal), "portalInfo", portal.id);
  const urlOwningSystemInfo = await Promise.all(urlsToCheck.map(async (url) => {
    try {
      const { owningSystemUrl } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.b)(url);
      return { owningSystemUrl, url };
    }
    catch (error) {
      console.error(error);
      return { owningSystemUrl: null, url };
    }
  }));
  return (urlOwningSystemInfo
    // TODO: handle Enterprise case
    .filter(({ owningSystemUrl }) => owningSystemUrl === mainItemOwningSystemUrl)
    .map(({ url }) => url));
};

/** Get the source item for tile layer
 * @param layer - The layer to get the source item for with layer type of ArcGISTiledMapServiceLayer
 */
const getTileLayerSourceItem = async (layer, portal) => {
  try {
    const itemId = layer.itemId;
    const itemData = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.f)(() => (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.g)(itemId, portal), "itemData", itemId);
    // Currently a tile layer can only be created from a single layer so we can just take the first layer
    const { layerItemId: sourceItemId } = itemData === null || itemData === void 0 ? void 0 : itemData.layers[0];
    if (!sourceItemId) {
      return { error: { code: "unhandledError" } };
    }
    return { result: await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.d)(sourceItemId, portal) };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
/** Get source items for items duplicated from another item
 *
 * This will ignore items that is not on the same environment as the main item
 * or if not using the same federated server if we're in Enterprise
 *
 * https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/3809
 */
const getSourceItemsFromUrls = async (itemUrls, portal) => {
  const validUrlInfos = itemUrls.filter((urlInfo) => urlInfo && isSupportedLayerTypeForUrlCheck({ layerType: urlInfo.layerType }));
  const validItemUrls = await filterOutDiffOriginAGSUrls(validUrlInfos.map((urlInfo) => urlInfo.url), portal);
  // Some url is a root.json url so we need to go through another layer of getSourceItemsFromUrls to get the actual item
  const rootJSONServiceURL = [];
  // * First send request without token
  const requiredTokenUrls = [];
  const noTokenMetaData = [];
  await Promise.all(validItemUrls.map(async (url) => {
    const { result, error } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.f)(() => getServiceUrlResponse(url, portal), "itemMetadata", `${url}--no-token`);
    if ((error === null || error === void 0 ? void 0 : error.code) === "tokenRequired") {
      requiredTokenUrls.push(url);
      return;
    }
    if (isRootJSONResponse(result)) {
      rootJSONServiceURL.push(getRootJSONResponseUrl(result, url));
    }
    else {
      noTokenMetaData.push(result);
    }
  }));
  const noTokenServiceIds = noTokenMetaData.map((metaData) => metaData === null || metaData === void 0 ? void 0 : metaData.serviceItemId);
  // * For urls that require token, check if they are in the same origin
  const sameHostRestUrls = await filterUrlsFromSameOrigin(portal, requiredTokenUrls);
  // If yes, then we can just get the item detail
  const requiredTokenMetaData = await Promise.all(sameHostRestUrls.map(async (url) => ({
    response: await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, { addTokenManually: true }),
    url // We need this for root json url
  })));
  const requiredTokenServiceIds = requiredTokenMetaData.reduce((idList, { response, url }) => {
    if (isRootJSONResponse(response)) {
      rootJSONServiceURL.push(getRootJSONResponseUrl(response, url));
      return idList;
    }
    return [...idList, response === null || response === void 0 ? void 0 : response.serviceItemId];
  }, []);
  // * Then just get the item detail
  const returnItems = await Promise.all([...noTokenServiceIds, ...requiredTokenServiceIds].map(async (serviceItemId) => serviceItemId ? (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.d)(serviceItemId, portal) : null));
  // We repeat the same process to get the actual `serviceItemId` then the item via the root json URL
  const rootJSONItems = rootJSONServiceURL.length <= 0
    ? []
    : await getSourceItemsFromUrls(rootJSONServiceURL.map((url) => ({ url, layerType: "VectorTileLayer" })), portal);
  return [...returnItems.filter((item) => !!item), ...rootJSONItems];
};
const isRootJSONResponse = (response) => {
  return !!(response === null || response === void 0 ? void 0 : response.sources);
};
const getRootJSONResponseUrl = (response, url) => {
  var _a;
  const responseUrl = (_a = Object.values(response.sources)[0]) === null || _a === void 0 ? void 0 : _a.url;
  if (!responseUrl) {
    return null;
  }
  return responseUrl.includes("..") ? traverseUrls({ url, path: responseUrl }) : responseUrl;
};
const filterOutDiffOriginAGSUrls = async (urls, portal) => {
  const validAgsURL = urls.filter((url) => !!url && !!(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.p)(url));
  // TODO R3: we'll fine-grain checking this later and once items have better spec
  const nonAGSUrls = urls.filter((url) => !url || !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.p)(url));
  const sameOriginUrls = await filterUrlsFromSameOrigin(portal, validAgsURL);
  return [...sameOriginUrls, ...nonAGSUrls];
};

const getSourceItemsFromDependentLayers = async (dependentLayers, portal) => {
  // * Recursively flatten layers, focusing on GroupLayer
  const flattenedLayers = [];
  const analyzeLayer = (layer) => {
    if (isWebMapTable(layer)) {
      flattenedLayers.push({
        id: layer.id,
        url: layer.url,
        layerType: "table",
        getType: "normal"
      });
      return;
    }
    if (layer.layerType === "GroupLayer") {
      if (layer.itemId) {
        // A GroupLayer item
        flattenedLayers.push({
          id: layer.id,
          itemId: layer.itemId,
          layerType: "GroupLayer",
          getType: "normal"
        });
      }
      layer.layers.forEach((subLayer) => {
        if (isWebMapTable(subLayer) || subLayer.layerType === "GroupLayer") {
          analyzeLayer(subLayer);
          return;
        }
        const subLayerUrl = subLayer.url;
        if (!subLayerUrl) {
          analyzeLayer(subLayer);
          return;
        }
        const parseUrlInfo = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.p)(subLayerUrl);
        analyzeLayer(Object.assign(Object.assign({}, subLayer), { 
          // If a layer in GroupLayer has index in their URL, we'll want to strip them out first
          // This might create some duplicated URLs but we already filter them out below via the `layerItemIdLookupMap`
          url: (parseUrlInfo === null || parseUrlInfo === void 0 ? void 0 : parseUrlInfo.index) != null ? parseUrlInfo.baseServerUrl : subLayer.url }));
      });
      return;
    }
    if (isVectorTileLayer(layer)) {
      flattenedLayers.push({
        id: layer.id,
        url: layer.styleUrl,
        itemId: layer.itemId,
        layerType: layer.layerType,
        getType: "normal"
      });
      return;
    }
    // We need to also fetch the original item this tile layer is created from
    if (isTileLayer(layer)) {
      // If the tile layer has popup enabled, we can just take the layer directly
      //  which is simply via layers[0]'s `layerItemId`
      //  if not, we'll have to go into /data and get the `layerItemId` first from there
      const isTileLayerWithPopup = isTileOperationLayerWithPopup(layer);
      if (isTileLayerWithPopup) {
        const firstSubLayer = layer.layers[0];
        flattenedLayers.push({
          id: firstSubLayer.id,
          url: firstSubLayer.layerUrl,
          getType: "normal",
          layerType: layer.layerType,
          itemId: firstSubLayer.layerItemId
        });
        // ! We also want to check for the tile layer sharing mismatch so there is no return here
      }
      flattenedLayers.push({
        id: layer.id,
        getType: isTileLayerWithPopup ? "normal" : "tile-layer-with-no-popup",
        itemId: layer.itemId,
        layerType: layer.layerType,
        url: layer.url
      });
      return;
    }
    if (layer.itemId || layer.url) {
      flattenedLayers.push({
        id: layer.id,
        url: layer.url,
        itemId: layer.itemId,
        layerType: layer.layerType,
        getType: "normal"
      });
    }
  };
  dependentLayers.forEach(analyzeLayer);
  const layerItemIdLookupMap = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_4__.a)(flattenedLayers, (layer) => {
    if (layer.itemId) {
      return { key: layer.itemId, data: { searchType: "item-id", layerType: layer.layerType } };
    }
    // Layer from shallow copied or duplicated items
    // However, if layer doesn't have both `itemId` and `url`, we'll just have the key as `null` and ignore them since there is no way to get the source item
    return { key: layer.url, data: { searchType: "url", layerType: layer.layerType } };
  });
  const uniqueIds = Object.keys(layerItemIdLookupMap).filter((id) => layerItemIdLookupMap[id].searchType === "item-id");
  try {
    // * --- Handle getting source item
    const itemsFromIds = (await Promise.all(uniqueIds.map((id) => (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.d)(id, portal)))).filter((itemInfo) => !!itemInfo);
    // Handle tile layer source item if the tile layer doesn't have popup enabled
    const dependentTileLayers = flattenedLayers.filter(({ getType: type, itemId }) => type === "tile-layer-with-no-popup" && !!itemId);
    const tileLayerSourceItems = (await Promise.all(dependentTileLayers.map((layer) => getTileLayerSourceItem(layer, portal)))).map(({ result }) => result);
    // Handle item duplicated from another item --- currently also handle vector tile layer
    //  because isHostedService doesn't count vector tile layer as hosted service
    const nonHostedItems = itemsFromIds.filter((item) => !(0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.i)(item.typeKeywords, item.type));
    const nonHostedItemInfos = await getSourceItemsFromUrls(nonHostedItems.map((item) => {
      const { url, id } = item;
      const layerInfo = layerItemIdLookupMap[id];
      return layerInfo ? { layerType: layerInfo.layerType, url } : null;
    }), portal);
    const nonHostedItemsLookupByUrl = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_4__.a)(nonHostedItemInfos, (item) => ({
      key: item.url,
      data: item
    }));
    // Handle shallow copied layers
    const shallowedCopiedLayerUrls = Object.keys(layerItemIdLookupMap)
      .map((url) => {
      const layerInfo = layerItemIdLookupMap[url];
      return layerInfo && layerInfo.searchType === "url" ? { layerType: layerInfo.layerType, url } : null;
    })
      .filter((layerInfo) => layerInfo);
    const shallowCopiedItems = await getSourceItemsFromUrls(shallowedCopiedLayerUrls, portal);
    // * Aggregate the result
    const sourceItems = [];
    itemsFromIds
      .filter((itemInfo) => itemInfo)
      .forEach((item) => {
      const itemUrl = item.url;
      sourceItems.push({ sourceItem: item });
      const nonHostedSourceItem = nonHostedItemsLookupByUrl[itemUrl];
      if (nonHostedSourceItem && item.id !== nonHostedSourceItem.id) {
        sourceItems.push({ sourceItem: nonHostedSourceItem });
      }
    });
    [...tileLayerSourceItems, ...shallowCopiedItems].forEach((item) => {
      if (!item) {
        return;
      }
      sourceItems.push({ layer: null, sourceItem: item });
    });
    return { result: sourceItems };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};

/**
 * Analyze sharing detail of the item and return any mismatch or sharing issues
 *
 * @param overrideLayers
 * Normally, the util will fetch the layers from the /data endpoint
 * However, if the user has overrideLayers layers, we can pass them in here
 *
 * **Note!!!**: Make sure the layers passed in is in the form of what we would receive from the /data endpoint of the item, not JS API's `Layer`
 *
 * This is useful in the case of Map Viewer where the /data endpoint is not updated with the latest layers after save
 *
 * @param options - options - see {@link Options}
 */
const analyzeSharingDetail = async (item, portal, overrideLayers, options = { clearDataCacheOnDone: true }) => {
  if (item.access === "private") {
    return {
      result: {
        needEditableLayers: [],
        needPubliclyEditableLayers: [],
        needDataCollectionLayers: [],
        needsShareLevelUpdateLayers: [],
        premiumLayers: [],
        notEditableLayers: []
      }
    };
  }
  const { result, error } = await getLayerAndSharingDetail(item, portal, overrideLayers);
  if (error) {
    return { error };
  }
  const sharingDetailBuckets = {
    needEditableLayers: [],
    needPubliclyEditableLayers: [],
    needDataCollectionLayers: [],
    needsShareLevelUpdateLayers: [],
    premiumLayers: [],
    notEditableLayers: []
  };
  await Promise.all(result === null || result === void 0 ? void 0 : result.map(async (info) => {
    const bucket = await getSharingDetailBucket({
      mainItem: item,
      sharingDetailResult: info,
      portal
    });
    bucket && sharingDetailBuckets[bucket].push(info);
  }));
  if (options.clearDataCacheOnDone) {
    // TODO: find a way to scope this to the function only (possibly through store of cache)
    //  but right now we don't have a use case for that so it should be fine...
    dependencyCheckCacheTypes.forEach((type) => (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_1__.c)(type));
  }
  return { result: sharingDetailBuckets };
};
/**
 * Get item and layers from /data in case user doesn't pass layers

  * Ultimately, the goal is to get the source item and their sharing detail from all the dependent layers
 */
const getLayerAndSharingDetail = async (mainItem, portal, overrideLayers) => {
  let itemsToCheck = [];
  let dependentLayers = [...(overrideLayers || [])];
  let getDataError;
  if (!(dependentLayers === null || dependentLayers === void 0 ? void 0 : dependentLayers.length)) {
    const { error, result } = await getDependentItemLayers(mainItem, portal);
    getDataError = error;
    dependentLayers = result.layers;
    itemsToCheck = result.items;
  }
  if (getDataError) {
    return { error: getDataError };
  }
  if (dependentLayers.length <= 0 && itemsToCheck.length <= 0) {
    return { error: { code: "dataNotAvailable" } };
  }
  try {
    const { result: dependentLayerSourceItems, error } = await getSourceItemsFromDependentLayers(dependentLayers, portal);
    if (error) {
      return { error };
    }
    // * Group sharing stuff
    const { result: mainItemSharingGroups, error: getSharedGroupsError } = await getLayerSharedGroups(mainItem.id, portal);
    if (getSharedGroupsError) {
      return { error: getSharedGroupsError };
    }
    // Sometimes layers can be created from he same source layers so we need to make sure we don't check the same source item multiple times
    const allSourceItems = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_4__.u)([...dependentLayerSourceItems.map(({ sourceItem }) => sourceItem), ...itemsToCheck], (item) => item.id);
    const result = await Promise.all(allSourceItems.map(async (item) => {
      const sharingDetail = await getItemSharingDetail({
        sourceItem: item,
        mainItemAccess: mainItem.access,
        mainItemSharingGroups,
        portal
      });
      return { layer: null, sourceItem: item, detail: sharingDetail };
    }));
    return { result };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError" } };
  }
};
async function getItemSharingDetail({ mainItemAccess, mainItemSharingGroups, portal, sourceItem }) {
  const { access: sourceItemAccess, itemControl } = sourceItem;
  const sharingDetail = Object.assign({}, DEFAULT_SHARING_DETAILS);
  const isMainItemSharingToPublic = mainItemAccess === "public";
  if (isBlockedFromSharingToPublic(sourceItem) && isMainItemSharingToPublic) {
    return Object.assign(Object.assign({}, sharingDetail), { needsShareLevelUpdate: true, canEditShareLevel: false });
  }
  // Can current user update the sharing on this item, and do they need to, if the layer is public
  // it doesn't really matter if they can or cannot
  if (sourceItemAccess !== "public") {
    sharingDetail.canEditShareLevel = checkCanUpdateShareLevel(itemControl);
    sharingDetail.needsGroupUpdate = await checkNeedGroupUpdate({
      sourceItem,
      isMainItemSharingToPublic,
      mainItemSharingGroups,
      portal
    });
    sharingDetail.needsShareLevelUpdate = checkNeedShareUpdate({
      mainItemAccess,
      sourceItemAccess
    });
  }
  else {
    // Is this item considered a premium item
    sharingDetail.premium = isPremiumContent(sourceItem);
  }
  return sharingDetail;
}
const checkCanUpdateShareLevel = (itemControl) => itemControl === "admin";
const checkNeedGroupUpdate = async ({ sourceItem, isMainItemSharingToPublic, portal, mainItemSharingGroups }) => {
  // TODO: remove this once we have fine-grain check for
  //  https://devtopia.esri.com/WebGIS/arcgis-app-components/pull/4068
  if (isMainItemSharingToPublic) {
    return false;
  }
  const { result: layerSharedGroups } = await getLayerSharedGroups(sourceItem.id, portal);
  return !sharedWithSameGroups(mainItemSharingGroups, layerSharedGroups);
};
const checkNeedShareUpdate = ({ mainItemAccess, sourceItemAccess }) => 
// "shared" is the same as "private" with groups so it needs group update, not share update
!(sourceItemAccess === "private" && mainItemAccess === "shared") &&
  isAccessLevelGreater(mainItemAccess, sourceItemAccess);
function isPremiumContent(item) {
  return (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.a)(item) || (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.b)(item);
  // return selectedShareLevel !== "public" ? false : isSubscriber(item) || isPremium(item);
}
function sharedWithSameGroups(sharedGroups, layerSharedGroups) {
  if (sharedGroups === null || sharedGroups === void 0 ? void 0 : sharedGroups.length) {
    // We use `sharedGroups` to check the order since we only need to check if layerSharedGroups
    // contains the same groups in the same order as sharedGroups, not the other way around
    const groupsNotSharedWithLayer = sharedGroups.filter((value) => !(layerSharedGroups || []).includes(value));
    return groupsNotSharedWithLayer.length <= 0;
  }
  return true;
}
/**
 * Share `items` with groups fetch from `sourceItemsForGroups`
 */
async function shareItemsToSharedGroups(items, sourceItemsForGroups, shareLevel, portal, shouldUpdateGroup = true) {
  const { user } = portal;
  const sharedGroupsList = !shouldUpdateGroup
    ? []
    : await Promise.all(sourceItemsForGroups.map(async (mainItem) => {
      const { result: groupIds } = await getLayerSharedGroups(mainItem.id, portal);
      return groupIds;
    }));
  const groupIds = sharedGroupsList.flat(1);
  return shareItems(items, shareLevel, groupIds, { portal, user }, true);
}
// https://www.figma.com/file/BBmw0ioRw0ZQmCqFHJeH2N/Share-Flowchart-5?type=whiteboard&node-id=401-149&t=E77ZkPzT8cboGdt7-0
const getSharingDetailBucket = async ({ mainItem, sharingDetailResult, portal }) => {
  var _a;
  const { sourceItem, detail } = sharingDetailResult;
  const { canEditShareLevel, needsGroupUpdate, needsShareLevelUpdate, premium } = detail;
  if (!needsGroupUpdate && !needsShareLevelUpdate && !premium) {
    return null;
  }
  if (!canEditShareLevel && !premium) {
    return "notEditableLayers";
  }
  switch (mainItem.access) {
    case "public":
      if (premium) {
        return "premiumLayers";
      }
      if (sourceItem.access !== "public") {
        const developer = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_2__.c)(portal.subscriptionInfo || ((_a = portal.sourceJSON) === null || _a === void 0 ? void 0 : _a.subscriptionInfo));
        if (developer && isBlockedFromDeveloperSharingToPublic(sourceItem)) {
          return "notEditableLayers";
        }
        if (await (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_3__.e)(sourceItem, portal)) {
          const isDataCollectionLayer = sourceItem.typeKeywords.includes("Public Data Collection");
          return isDataCollectionLayer ? "needEditableLayers" : "needDataCollectionLayers";
        }
      }
      return "needsShareLevelUpdateLayers";
    case "org":
    case "shared":
    case "private":
      if (premium) {
        return null;
      }
      return "needsShareLevelUpdateLayers";
    default:
      assertNever(mainItem.access);
  }
};
// We don't blow up the cache for portal info since that information will not likely be changed
const dependencyCheckCacheTypes = ["itemData", "itemMetadata"];
const assertNever = (access) => {
  throw new Error(`Unexpected share level ${access}`);
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-fba8960d.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-fba8960d.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DEFAULT_SHARING_DETAIL),
/* harmony export */   a: () => (/* binding */ getUsernameQuery),
/* harmony export */   b: () => (/* binding */ showRevertGroupWarning),
/* harmony export */   c: () => (/* binding */ showRevertShareLevelWarning),
/* harmony export */   d: () => (/* binding */ DEFAULT_SHARE_LEVELS),
/* harmony export */   e: () => (/* binding */ showShareLevelChangeWarning),
/* harmony export */   f: () => (/* binding */ isShareLevelDirty),
/* harmony export */   g: () => (/* binding */ getItemsAndGroupsToUpdateShare),
/* harmony export */   h: () => (/* binding */ getPossibleShareLevel),
/* harmony export */   i: () => (/* binding */ isSelectedGroupDataDirty),
/* harmony export */   j: () => (/* binding */ getShareMode),
/* harmony export */   k: () => (/* binding */ canShareItemToGroup),
/* harmony export */   l: () => (/* binding */ checkIfSharingMixed),
/* harmony export */   s: () => (/* binding */ showEditGroupWarning)
/* harmony export */ });
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _services_adddeef9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services-adddeef9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-adddeef9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




const groupsAreOwnedByOrg = (user, groupData) => {
  const { username, orgId } = user;
  return groupData.every(({ group }) => {
    const isOwner = username === (group === null || group === void 0 ? void 0 : group.owner);
    const isOwnedByMyOrg = orgId === group.orgId;
    return isOwner || isOwnedByMyOrg;
  });
};
const canShareItemToGroup = (selectedGroupData, user) => userCanShare(user) || ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.A)(user) && groupsAreOwnedByOrg(user, selectedGroupData));
const userCanShare = (user) => !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.x)(user) || userCanShareItemToGroup(user);
/**
 * Checks if the groups are in a mixed state where at least one group is shared with different items than the rest
 */
const checkIfSharingMixed = (items, selectedGroups) => selectedGroups.some(({ selectedByItemIds }) => selectedByItemIds.length !== items.length);
/**
 * Checks whether the user is allowed to share their item to groups
 */
function userCanShareItemToGroup(user) {
  return (user.privileges || []).includes("portal:user:shareToGroup");
}
const privateItemsHaveBeenSharedToGroups = ({ items, groupData }) => items
  .filter((item) => {
  const access = item.access;
  return access === "private" || access === "shared";
})
  .reduce((memo, item) => memo || itemHasBeenSharedToGroups({ item, groupData }), false);
const itemHasBeenSharedToGroups = ({ item, groupData }) => groupData.reduce((memo, groupData) => memo || (!!groupData.selectedByItemIds && groupData.selectedByItemIds.includes(item.id)), false);
const showEditGroupWarning = (user, selectedShareLevels) => !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.x)(user) &&
  !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.y)(user) &&
  // They can't share to org anyway so no need to check that
  selectedShareLevels.some((shareLevel) => shareLevel === "private");
const showRevertGroupWarning = (user, selectedShareLevels, initialSelectedGroupData) => (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.n)(user) &&
  selectedShareLevels.some((shareLevel) => shareLevel === "private") &&
  initialSelectedGroupData.length > 0;
const showRevertShareLevelWarning = (user, items, selectedGroupData) => !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.x)(user) &&
  !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.z)(user) &&
  privateItemsHaveBeenSharedToGroups({ items, groupData: selectedGroupData });
const showShareLevelChangeWarning = (user, newShareLevel, selectedGroupData) => !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.x)(user) &&
  !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.z)(user) &&
  newShareLevel === "private" &&
  Object.keys(selectedGroupData).length > 0;

const getUsernameQuery = ({ shareMode, currentUsername, user, userGroupLookup, isPrivate }) => {
  var _a;
  let groupIds = [];
  let groupIdsQuery;
  if (userGroupLookup) {
    let currentUserGroups = [];
    if (shareMode === "admin" && ((_a = userGroupLookup[currentUsername]) === null || _a === void 0 ? void 0 : _a.length) && currentUsername !== user.username) {
      // In admin case, we want to also includes groups that the item owner has access to
      currentUserGroups = [...userGroupLookup[currentUsername]];
    }
    if (shareMode !== "admin" || !isPrivate) {
      // For admin, we only want to include the admin's groups if the item is not private
      // For private item owner, includes groups that they can share to
      userGroupLookup[user.username].forEach((group) => {
        if (!currentUserGroups.some((g) => g.id === group.id)) {
          currentUserGroups.push(group);
        }
      });
    }
    currentUserGroups === null || currentUserGroups === void 0 ? void 0 : currentUserGroups.forEach((group) => {
      var _a;
      // include group ids that the current user is owner or admin or if viewOnly is false
      const memberType = (_a = group.userMembership) === null || _a === void 0 ? void 0 : _a.memberType;
      if (group.isViewOnly && (memberType === "owner" || memberType === "admin")) {
        groupIds.push(group.id);
      }
    });
  }
  if (groupIds.length) {
    groupIdsQuery = `(isviewonly:false OR id:(${groupIds.join(" OR ")}))`;
  }
  const adminGroupQuery = groupIds.length ? ` OR id:(${groupIds.join(" OR ")})` : "";
  switch (shareMode) {
    // In the default (item owner) case, we want to show all the groups
    // that the user either owns or has write access to.
    // Write access is indicated by the isviewonly flag.
    //
    // Ideally, we'd also be able to show groups the current user is admin of
    // maybe with a syntax like admin:${currentUsername}
    // but the search endpoint does not support that.
    case "default":
      return groupIdsQuery || `(owner:${currentUsername} OR isviewonly:false)`;
    // group owner mode should only see groups owned by the current user
    // excluding shared-update groups
    case "group":
      return `owner:${currentUsername} -capabilities:updateitemcontrol`;
    // In admin cases, we want all the groups the current user is a member of.
    // this is handled by the searchUserAccess and searchUserName params
    // outside of the query string.
    case "admin":
      if (user.username === currentUsername) {
        return `(isviewonly:false${adminGroupQuery} OR owner:${user.username}) -capabilities:updateitemcontrol`;
      }
      // When looking at the content user's groups, show that user's groups
      // or groups they have access to.
      // WebGIS/arcgis-portal-app#28041
      return `(owner:${currentUsername} OR isviewonly:false${adminGroupQuery})`;
    default:
      return "";
  }
};

const DEFAULT_SHARING_DETAIL = {
  needEditableLayers: [],
  needPubliclyEditableLayers: [],
  needDataCollectionLayers: [],
  needsShareLevelUpdateLayers: [],
  premiumLayers: [],
  notEditableLayers: []
};
const DEFAULT_SHARE_LEVELS = ["private", "org", "public"];

// TODO: add unit test
/**
 * Compose the list of items/groups to share and unshare
 *
 * ! This assume when we share/unshare, we share/unshare to all items
 *
 * Useful for /shareItems or /unshareItems endpoints
 *  */
const getItemsAndGroupsToUpdateShare = (initialSelectedGroupData, curSelectedGroupData) => {
  // 3 states to handle:
  // 1: groups that are completely unshared from the all items -> unshareData
  // 2: groups that are completely shared to all items -> shareData
  // 3: mixed sharing -> we don't care // ! it will affect the activity log but we don't care for now
  const completelyUnsharedGroupData = initialSelectedGroupData.filter((groupData) => !curSelectedGroupData.some((curGroupData) => curGroupData.group.id === groupData.group.id));
  const completelySharedGroupData = curSelectedGroupData.filter((groupData) => {
    const initialGroupData = initialSelectedGroupData.find((initialGroupData) => initialGroupData.group.id === groupData.group.id);
    // This assume that when we share/unshare, we share/unshare to all items,
    //  so this means groupData.selectedByItemIds.length is already the max
    // This would make the util independent of the length of the items array
    return !initialGroupData || initialGroupData.selectedByItemIds.length < groupData.selectedByItemIds.length;
  });
  return {
    unshareGroupIds: completelyUnsharedGroupData.map((groupData) => groupData.group.id),
    shareGroupIds: completelySharedGroupData.map((groupData) => groupData.group.id)
  };
};
const getPossibleShareLevel = (user, items, portal) => {
  const isPublicUser$1 = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.n)(user);
  let possibleShareLevelOptions = DEFAULT_SHARE_LEVELS;
  if (isPublicUser$1) {
    possibleShareLevelOptions = ["private", "public"];
  }
  else if (!portal.canSharePublic && !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.e)(user)) {
    possibleShareLevelOptions = ["private", "org"];
  }
  possibleShareLevelOptions = possibleShareLevelOptions.filter((shareLevel) => canShareLevel(shareLevel, items, user, portal));
  return possibleShareLevelOptions;
};
const canShareLevel = (shareLevel, items, user, portal) => {
  var _a;
  if (shareLevel === "private") {
    return true;
  }
  const isOwnerOfAllItems = itemsOwnedByUser(user, items);
  const itemsBelongToOrg = itemsOwnedByOrg(user, items);
  const isItemAdmin = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.e)(user) && !(0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.t)(user) && itemsBelongToOrg;
  const isCustomItemAdmin = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.e)(user) && (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.t)(user) && itemsBelongToOrg;
  const isPublicUser$1 = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.n)(user);
  if (shareLevel === "org") {
    if (isPublicUser$1) {
      return false;
    }
    return (((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.z)(user) && (isOwnerOfAllItems || isItemAdmin)) ||
      ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.B)(user) && (isItemAdmin || isCustomItemAdmin)));
  }
  if (shareLevel === "public") {
    const developer = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.c)((portal === null || portal === void 0 ? void 0 : portal.subscriptionInfo) || ((_a = portal === null || portal === void 0 ? void 0 : portal.sourceJSON) === null || _a === void 0 ? void 0 : _a.subscriptionInfo));
    if (items.length === 1 &&
      ((0,_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_2__.c)(items[0]) || (developer && (0,_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_2__.d)(items[0])))) {
      return false;
    }
    const canSharePublic = portal.canSharePublic;
    return (isPublicUser$1 ||
      ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.C)(user) && ((isOwnerOfAllItems && canSharePublic) || isItemAdmin)) ||
      ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.D)(user) && (isItemAdmin || isCustomItemAdmin)));
  }
};
/**
 * Determine the share mode of the user based on the item.
 *
 * ! We only consider the first item on the list
 */
const getShareMode = (items, user, portal) => {
  const item = items[0];
  if ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.i)(item, user)) {
    return "default";
  }
  /**
   * if there is no org id on the item, deduce that the user can do admin things
   *
   * if item.orgId is present, check equality against portal user's org
   */
  const itemOwnerAndUserSameOrg = !item.orgId || item.orgId === user.orgId;
  if ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.E)({ items, user, portal }) && itemOwnerAndUserSameOrg) {
    return "admin";
  }
  // if the user is not item owner or org admin, they enter group sharing mode
  // which is very restricted
  return "group";
};
const itemsOwnedByUser = (user, items) => {
  return items.every((item) => (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.i)(item, user));
};
const itemsOwnedByOrg = (user, items) => {
  const userOrgId = user === null || user === void 0 ? void 0 : user.orgId;
  return items.every((item) => {
    var _a;
    return ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_0__.i)(item, user) ||
      // 3.x specific item.portal
      ((_a = item.portal) === null || _a === void 0 ? void 0 : _a.id) === userOrgId ||
      // 4.x specific item.orgId
      item.orgId === userOrgId ||
      // Seems to be available on both 3.x and 4.x but can't verify via the official doc, only the Home App :(
      // This property is calculated based on the user's credential (token) that's used to access the item
      //  so it might not be available if the item is accessed without a token (just a theory)
      //  that's why it's the last resort
      // https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#isOrgItem
      item.isOrgItem);
  });
};
const isShareLevelDirty = (selectedShareLevels, initialShareLevels, items, selectedGroupData) => selectedShareLevels.some((curShareLevel, index) => {
  const initialShareLevel = initialShareLevels[index];
  // "shared" level = shared to group + "private"
  if (initialShareLevel === "shared" && curShareLevel === "private") {
    const item = items[index];
    return !selectedGroupData.some((groupData) => groupData.selectedByItemIds.includes(item.id));
  }
  return initialShareLevel !== curShareLevel;
});
// TODO: optimize this O(n^3)...
const isSelectedGroupDataDirty = (initialSelectedGroupData, curSelectedGroupData) => {
  if (initialSelectedGroupData.length !== curSelectedGroupData.length) {
    return true;
  }
  return curSelectedGroupData.some((curGroupData) => {
    const initialGroupData = initialSelectedGroupData.find((initialGroupData) => initialGroupData.group.id === curGroupData.group.id);
    if (!initialGroupData) {
      return true;
    }
    return !(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_1__.f)(initialGroupData.selectedByItemIds, curGroupData.selectedByItemIds);
  });
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,