"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_publis-015fd2"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/publish-item-82ffa7f8.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/publish-item-82ffa7f8.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ appendTypeKeywords),
/* harmony export */   c: () => (/* binding */ checkJobStatus),
/* harmony export */   p: () => (/* binding */ publishService)
/* harmony export */ });
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tile-layer-90a6b901.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-90a6b901.js");
/* harmony import */ var _functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-9f648bee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js");
/* harmony import */ var _geocode_7eb7c0df_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./geocode-7eb7c0df.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-7eb7c0df.js");
/* harmony import */ var _feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./feature-layer-38cdae87.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-38cdae87.js");
/* harmony import */ var _server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./server-item-f12153e6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-f12153e6.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */










// TODO: remove store reliance
async function appendTypeKeywords(publishResponse, portalUser) {
  var _a;
  const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.user) !== null && _a !== void 0 ? _a : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal.user;
  const { cloudProviderResource, geoJSONResource, locationType, csvResource, existingItem } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
  const { result: item } = await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.a)(publishResponse.id);
  const updatedTypeKeywords = [...item.typeKeywords];
  if (cloudProviderResource || geoJSONResource || csvResource) {
    updatedTypeKeywords.push("Cloud Drive");
  }
  if (locationType === "address") {
    updatedTypeKeywords.push("showUnmatchedAddresses");
  }
  if (["3DTiles Package", "3DTiles Service"].includes(item.type)) {
    // On add + publish, set the typekeyword based on the selected layer type
    if (_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.tileLayerPublishType === "3dTiles") {
      updatedTypeKeywords.push(_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.tilesLayer3dTilesLayerType);
    }
    else if (!!existingItem) {
      // On only publish, set the typekeyword based on the layer type originally set on the source package
      const tilesLayer3dTypekeyword = [...existingItem.typeKeywords].find((keyword) => _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_3__.t.includes(keyword));
      tilesLayer3dTypekeyword && updatedTypeKeywords.push(tilesLayer3dTypekeyword);
    }
  }
  return (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_7__.e)(publishResponse.id, {
    typeKeywords: updatedTypeKeywords === null || updatedTypeKeywords === void 0 ? void 0 : updatedTypeKeywords.join(",")
  }, user);
}
async function checkJobStatus(response) {
  const jobStatus = await (0,_feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_6__.w)(response.id, { success: response.success });
  if (jobStatus.status === "failed") {
    throw new Error(jobStatus.statusMessage);
  }
}
function fieldTypeToSQLtype(fieldType) {
  switch (fieldType) {
    case "esriFieldTypeDouble":
      return "sqlTypeDouble";
    case "esriFieldTypeInteger":
    case "esriFieldTypeOID":
      return "sqlTypeInteger";
    case "esriFieldTypeString":
      return "sqlTypeNVarchar";
    case "esriFieldTypeSingle":
      return "sqlTypeFloat";
    case "esriFieldTypeSmallInteger":
      return "sqlTypeSmallInt";
    case "esriFieldTypeDate":
      return "sqlTypeDate";
    default:
      return "sqlTypeOther";
  }
}
function isNumericFieldType(fieldType) {
  const numericFieldTypes = [
    "esriFieldTypeDouble",
    "esriFieldTypeInteger",
    "esriFieldTypeSingle",
    "esriFieldTypeSmallInteger"
  ];
  return numericFieldTypes.includes(fieldType);
}
function getCSVPublishParameters(name, isExcel) {
  const { selectedFields, timezone, analyzeResults, type } = _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a;
  const publishParameters = analyzeResults.publishParameters;
  const layerInfo = (0,_geocode_7eb7c0df_js__WEBPACK_IMPORTED_MODULE_5__.a)();
  layerInfo.fields = Object.keys(selectedFields).map((key) => {
    const field = selectedFields[key];
    // WebGIS/arcgis-portal-app#40237
    // if we have a numeric field type, ensure that the sql type is correct
    if (isNumericFieldType(field.type)) {
      field.sqlType = fieldTypeToSQLtype(field.type);
      delete field.length;
    }
    return field;
  });
  layerInfo.capabilities = "Query";
  publishParameters.capabilities = "Query";
  layerInfo.hasStaticData = true;
  publishParameters.hasStaticData = true;
  publishParameters.persistErrorRecordsForReview = true;
  publishParameters.name = name;
  const dateFieldsTimeReference = {
    timeZone: timezone || "UTC"
  };
  if (isExcel || type === "GeoJson") {
    layerInfo.dateFieldsTimeReference = dateFieldsTimeReference;
  }
  else {
    publishParameters.dateFieldsTimeReference = dateFieldsTimeReference;
  }
  return publishParameters;
}
function getPublishParameters(itemId, name, extension, type, dataUrl) {
  // #35758 - hosted items cannot have spaces
  name = (0,_functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_4__.a)(name);
  let ext = extension.toLowerCase();
  // use the type instead of the extension for zip files to disambiguate
  if (ext === "zip") {
    ext = type;
  }
  const isExcel = type === "Microsoft Excel";
  const baseParameters = {
    name,
    maxRecordCount: 2000
  };
  const isGeoJSONOrCSVFromUrl = (type === "GeoJson" || type === "CSV") && dataUrl;
  const isCloud = !!_add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_1__.a.cloudProvider;
  const deleteSourceItem = isCloud || isGeoJSONOrCSVFromUrl ? { deleteSourceItemUponCompletion: true } : {};
  const publishParameters = JSON.stringify(baseParameters);
  const publishParametersWithQuery = JSON.stringify(Object.assign(Object.assign({}, baseParameters), { hasStaticData: true, layerInfo: { capabilities: "Query" } }));
  switch (ext) {
    case "3tz":
      return { itemId, publishParameters: JSON.stringify({ name }), filetype: "3DTiles Service" };
    case "csv":
    case "xls":
    case "xlsx":
      return Object.assign({ itemId, filetype: isExcel ? "excel" : "csv", publishParameters: JSON.stringify(getCSVPublishParameters(name, isExcel)) }, deleteSourceItem);
    case "featurecollection":
      return {
        itemId,
        filetype: "featureCollection",
        publishParameters: publishParametersWithQuery
      };
    case "geojson":
    case "json":
      return Object.assign({ itemId, filetype: "geojson", publishParameters: publishParametersWithQuery }, deleteSourceItem);
    case "tpk":
    case "tpkx":
      return {
        itemId,
        filetype: "tilePackage",
        publishParameters,
        buildInitialCache: true
      };
    case "vtpk":
      return {
        itemId,
        filetype: "vectortilepackage",
        publishParameters,
        outputType: "vectorTiles",
        buildInitialCache: true
      };
    case "spk":
    case "slpk":
      return {
        itemId,
        filetype: "scenepackage",
        publishParameters,
        outputType: "sceneService",
        buildInitialCache: true
      };
    case "sd":
      return {
        itemId,
        filetype: "serviceDefinition",
        buildInitialCache: false
      };
    case "File Geodatabase":
      return Object.assign({ itemId, filetype: "fileGeodatabase", publishParameters: publishParametersWithQuery }, deleteSourceItem);
    case "Shapefile":
      return Object.assign({ itemId, filetype: "shapefile", publishParameters: publishParametersWithQuery }, deleteSourceItem);
    case "gpkg":
      return {
        itemId,
        filetype: "geoPackage",
        publishParameters
      };
    case "Image Collection":
      return {
        itemId,
        filetype: "imageCollection",
        outputType: "image service",
        publishParameters
      };
    default:
      return { itemId, publishParameters };
  }
}
async function publishService(args, publishParameters) {
  var _a, _b, _c, _d;
  const { user, title, itemId, extension, type, dataUrl, itemOwnerUrl } = args;
  publishParameters !== null && publishParameters !== void 0 ? publishParameters : (publishParameters = Object.assign({}, getPublishParameters(itemId, title, extension, type, dataUrl)));
  const userContentUrl = _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_2__.u.workflow === "append" ? itemOwnerUrl : user.userContentUrl; //For R02 Patch
  const url = `${userContentUrl}/publish`;
  try {
    const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_8__.r)(url, publishParameters, {}, "post");
    if (!response.services || !response.services.length) {
      throw this.i18n.errorPublishing;
    }
    else if ((_b = (_a = response.services[0]) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message) {
      throw (_d = (_c = response.services[0]) === null || _c === void 0 ? void 0 : _c.error) === null || _d === void 0 ? void 0 : _d.message;
    }
    else {
      return { result: response };
    }
  }
  catch (error) {
    console.error(error);
    if (error.includes("Service name")) {
      return { error: { code: "serviceNameExists" } };
    }
    return { error: { code: "unhandledError" } };
  }
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-90a6b901.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-90a6b901.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DEFAULT_TILE_LAYER_3D_TILES_LAYER_TYPE),
/* harmony export */   T: () => (/* binding */ TILE_LAYER_SCALE_MIN),
/* harmony export */   a: () => (/* binding */ presetRasterTileCacheInfo),
/* harmony export */   b: () => (/* binding */ presetVectorTileImageInfo),
/* harmony export */   c: () => (/* binding */ presetRasterTileImageInfo),
/* harmony export */   d: () => (/* binding */ tileLayerTypes),
/* harmony export */   e: () => (/* binding */ TILE_LAYER_SCALE_MAX),
/* harmony export */   f: () => (/* binding */ tileLayerBasemaps),
/* harmony export */   g: () => (/* binding */ presetLods),
/* harmony export */   p: () => (/* binding */ presetVectorTileCacheInfo),
/* harmony export */   t: () => (/* binding */ tilesLayer3dTilesLayerTypes)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const tileLayerBasemaps = ["standard", "custom"];
const tilesLayer3dTilesLayerTypes = ["IntegratedMesh", "3DObject"];
const DEFAULT_TILE_LAYER_3D_TILES_LAYER_TYPE = tilesLayer3dTilesLayerTypes[0];
const tileLayerTypes = ["vector", "raster", "3dTiles"];
// TODO: switch this back once the SettingTileLayer supports this number
// export const TILE_LAYER_SCALE_MIN = 591657527.591555;
const TILE_LAYER_SCALE_MIN = 147914382;
const TILE_LAYER_SCALE_MAX = 0;
const presetLods = [
  { level: 0, label: "1:591,657,528", scale: 591657527.591555 },
  { level: 1, label: "1:295,828,764", scale: 295828763.795777 },
  { level: 2, label: "1:147,914,382", scale: 147914381.897889 },
  { level: 3, label: "1:73,957,191", scale: 73957190.948944 },
  { level: 4, label: "1:36,978,595", scale: 36978595.474472 },
  { level: 5, label: "1:18,489,298", scale: 18489297.737236 },
  { level: 6, label: "1:9,244,649", scale: 9244648.868618 },
  { level: 7, label: "1:4,622,324", scale: 4622324.434309 },
  { level: 8, label: "1:2,311,162", scale: 2311162.217155 },
  { level: 9, label: "1:1,155,581", scale: 1155581.108577 },
  { level: 10, label: "1:577,791", scale: 577790.554289 },
  { level: 11, label: "1:288,895", scale: 288895.277144 },
  { level: 12, label: "1:144,448", scale: 144447.638572 },
  { level: 13, label: "1:72,224", scale: 72223.819286 },
  { level: 14, label: "1:36,112", scale: 36111.909643 },
  { level: 15, label: "1:18,056", scale: 18055.954822 },
  { level: 16, label: "1:9,028", scale: 9027.977411 },
  { level: 17, label: "1:4,514", scale: 4513.988705 },
  { level: 18, label: "1:2,257", scale: 2256.994353 },
  { level: 19, label: "1:1,128", scale: 1128.497176 },
  { level: 20, label: "1:564", scale: 564.248588 },
  { level: 21, label: "1:282", scale: 282.124294 },
  { level: 22, label: "1:141", scale: 141.062147 }
];
const presetRasterTileCacheInfo = {
  spatialReference: { wkid: 102100, latestWkid: 3857 },
  origin: { x: -20037508.342787, y: 20037508.342787 },
  rows: 256,
  cols: 256,
  dpi: 96,
  preciseDpi: 96,
  lods: [
    { level: 0, resolution: 156543.033928, scale: 591657527.591555 },
    { level: 1, resolution: 78271.5169639999, scale: 295828763.795777 },
    { level: 2, resolution: 39135.7584820001, scale: 147914381.897889 },
    { level: 3, resolution: 19567.8792409999, scale: 73957190.948944 },
    { level: 4, resolution: 9783.93962049996, scale: 36978595.474472 },
    { level: 5, resolution: 4891.96981024998, scale: 18489297.737236 },
    { level: 6, resolution: 2445.98490512499, scale: 9244648.868618 },
    { level: 7, resolution: 1222.99245256249, scale: 4622324.434309 },
    { level: 8, resolution: 611.49622628138, scale: 2311162.217155 },
    { level: 9, resolution: 305.748113140558, scale: 1155581.108577 },
    { level: 10, resolution: 152.874056570411, scale: 577790.554289 },
    { level: 11, resolution: 76.4370282850732, scale: 288895.277144 },
    { level: 12, resolution: 38.2185141425366, scale: 144447.638572 },
    { level: 13, resolution: 19.1092570712683, scale: 72223.819286 },
    { level: 14, resolution: 9.55462853563415, scale: 36111.909643 },
    { level: 15, resolution: 4.77731426794937, scale: 18055.954822 },
    { level: 16, resolution: 2.38865713397468, scale: 9027.977411 },
    { level: 17, resolution: 1.19432856685505, scale: 4513.988705 },
    { level: 18, resolution: 0.597164283559817, scale: 2256.994353 },
    { level: 19, resolution: 0.298582141647617, scale: 1128.497176 },
    { level: 20, resolution: 0.14929107082380833, scale: 564.248588 },
    { level: 21, resolution: 0.07464553541190416, scale: 282.124294 },
    { level: 22, resolution: 0.03732276770595208, scale: 141.062147 }
  ]
};
const presetVectorTileCacheInfo = {
  spatialReference: {
    wkid: 102100,
    latestWkid: 3857
  },
  origin: {
    x: -2.0037508342787e7,
    y: 2.0037508342787e7
  },
  rows: 512,
  cols: 512,
  dpi: 96,
  preciseDpi: 96,
  lods: [
    { level: 0, resolution: 78271.51696399994, scale: 2.95828763795777e8 },
    { level: 1, resolution: 39135.75848200009, scale: 1.47914381897889e8 },
    { level: 2, resolution: 19567.87924099992, scale: 7.3957190948944e7 },
    { level: 3, resolution: 9783.93962049996, scale: 3.6978595474472e7 },
    { level: 4, resolution: 4891.96981024998, scale: 1.8489297737236e7 },
    { level: 5, resolution: 2445.98490512499, scale: 9244648.868618 },
    { level: 6, resolution: 1222.992452562495, scale: 4622324.434309 },
    { level: 7, resolution: 611.4962262813797, scale: 2311162.217155 },
    { level: 8, resolution: 305.74811314055756, scale: 1155581.108577 },
    { level: 9, resolution: 152.87405657041106, scale: 577790.554289 },
    { level: 10, resolution: 76.43702828507324, scale: 288895.277144 },
    { level: 11, resolution: 38.21851414253662, scale: 144447.638572 },
    { level: 12, resolution: 19.10925707126831, scale: 72223.819286 },
    { level: 13, resolution: 9.554628535634155, scale: 36111.909643 },
    { level: 14, resolution: 4.77731426794937, scale: 18055.954822 },
    { level: 15, resolution: 2.388657133974685, scale: 9027.977411 },
    { level: 16, resolution: 1.1943285668550503, scale: 4513.988705 },
    { level: 17, resolution: 0.5971642835598172, scale: 2256.994353 },
    { level: 18, resolution: 0.29858214164761665, scale: 1128.497176 },
    { level: 19, resolution: 0.14929107082380833, scale: 564.248588 },
    { level: 20, resolution: 0.07464553541190416, scale: 282.124294 },
    { level: 21, resolution: 0.03732276770595208, scale: 141.062147 },
    { level: 22, resolution: 0.01866138385297604, scale: 70.5310735 },
    { level: 23, resolution: 0.0093306919293428040466217365, scale: 35.265536760789715032412079626 }
  ]
};
const presetVectorTileImageInfo = {
  format: "indexedVector",
  compressionQuality: 0,
  antialiasing: false
};
const presetRasterTileImageInfo = {
  format: "PNG32",
  compressionQuality: 0,
  antialiasing: true
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,