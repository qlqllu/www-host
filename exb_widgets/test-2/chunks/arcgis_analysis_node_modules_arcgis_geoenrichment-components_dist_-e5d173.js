"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-e5d173"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/DataBrowser-5ce2ade9.js":
/*!***************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/DataBrowser-5ce2ade9.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ c$_),
/* harmony export */   A: () => (/* binding */ A$2),
/* harmony export */   B: () => (/* binding */ m$o),
/* harmony export */   C: () => (/* binding */ f$f),
/* harmony export */   D: () => (/* binding */ l$F),
/* harmony export */   E: () => (/* binding */ y$1),
/* harmony export */   F: () => (/* binding */ L$6),
/* harmony export */   G: () => (/* binding */ x$d),
/* harmony export */   H: () => (/* binding */ r$A),
/* harmony export */   I: () => (/* binding */ e$I),
/* harmony export */   J: () => (/* binding */ p$Q),
/* harmony export */   K: () => (/* binding */ z$2),
/* harmony export */   L: () => (/* binding */ L$2),
/* harmony export */   M: () => (/* binding */ M$3),
/* harmony export */   N: () => (/* binding */ t$u),
/* harmony export */   O: () => (/* binding */ k$4),
/* harmony export */   P: () => (/* binding */ s$t),
/* harmony export */   Q: () => (/* binding */ U$2),
/* harmony export */   R: () => (/* binding */ y$v),
/* harmony export */   S: () => (/* binding */ n$T),
/* harmony export */   T: () => (/* binding */ l$w),
/* harmony export */   U: () => (/* binding */ U$1),
/* harmony export */   V: () => (/* binding */ y$a),
/* harmony export */   W: () => (/* binding */ f$b),
/* harmony export */   X: () => (/* binding */ s$i),
/* harmony export */   Y: () => (/* binding */ c$13),
/* harmony export */   Z: () => (/* binding */ e$u),
/* harmony export */   _: () => (/* binding */ y$r),
/* harmony export */   a: () => (/* binding */ u$4),
/* harmony export */   a$: () => (/* binding */ r$g),
/* harmony export */   a0: () => (/* binding */ i$X),
/* harmony export */   a1: () => (/* binding */ u$D),
/* harmony export */   a2: () => (/* binding */ Q$2),
/* harmony export */   a3: () => (/* binding */ g$o),
/* harmony export */   a4: () => (/* binding */ W$2),
/* harmony export */   a5: () => (/* binding */ i$M),
/* harmony export */   a6: () => (/* binding */ y$t),
/* harmony export */   a7: () => (/* binding */ a$9),
/* harmony export */   a8: () => (/* binding */ G$6),
/* harmony export */   a9: () => (/* binding */ T$6),
/* harmony export */   aA: () => (/* binding */ C$9),
/* harmony export */   aB: () => (/* binding */ n$F),
/* harmony export */   aC: () => (/* binding */ r$8),
/* harmony export */   aD: () => (/* binding */ g$g),
/* harmony export */   aE: () => (/* binding */ r$s),
/* harmony export */   aF: () => (/* binding */ m$F),
/* harmony export */   aG: () => (/* binding */ u$y),
/* harmony export */   aH: () => (/* binding */ n$K),
/* harmony export */   aI: () => (/* binding */ e$G),
/* harmony export */   aJ: () => (/* binding */ t$G),
/* harmony export */   aK: () => (/* binding */ g$a),
/* harmony export */   aL: () => (/* binding */ o$A),
/* harmony export */   aM: () => (/* binding */ v$a),
/* harmony export */   aN: () => (/* binding */ t$H),
/* harmony export */   aO: () => (/* binding */ w$4),
/* harmony export */   aP: () => (/* binding */ p$10),
/* harmony export */   aQ: () => (/* binding */ p$T),
/* harmony export */   aR: () => (/* binding */ r$4),
/* harmony export */   aS: () => (/* binding */ d$u),
/* harmony export */   aT: () => (/* binding */ P$8),
/* harmony export */   aU: () => (/* binding */ t$o),
/* harmony export */   aV: () => (/* binding */ e$j),
/* harmony export */   aW: () => (/* binding */ s$n),
/* harmony export */   aX: () => (/* binding */ k$5),
/* harmony export */   aY: () => (/* binding */ P$3),
/* harmony export */   aZ: () => (/* binding */ G$3),
/* harmony export */   a_: () => (/* binding */ w$6),
/* harmony export */   aa: () => (/* binding */ p$18),
/* harmony export */   ab: () => (/* binding */ e$C),
/* harmony export */   ac: () => (/* binding */ f$4),
/* harmony export */   ad: () => (/* binding */ c$e),
/* harmony export */   ae: () => (/* binding */ L$5),
/* harmony export */   af: () => (/* binding */ n$e),
/* harmony export */   ag: () => (/* binding */ et),
/* harmony export */   ah: () => (/* binding */ a$I),
/* harmony export */   ai: () => (/* binding */ A$8),
/* harmony export */   aj: () => (/* binding */ o$v),
/* harmony export */   ak: () => (/* binding */ o$y),
/* harmony export */   al: () => (/* binding */ t$N),
/* harmony export */   am: () => (/* binding */ w$9),
/* harmony export */   an: () => (/* binding */ n$3),
/* harmony export */   ao: () => (/* binding */ a$B),
/* harmony export */   ap: () => (/* binding */ g$1),
/* harmony export */   aq: () => (/* binding */ t$I),
/* harmony export */   ar: () => (/* binding */ d$o),
/* harmony export */   as: () => (/* binding */ G$1),
/* harmony export */   at: () => (/* binding */ d$s),
/* harmony export */   au: () => (/* binding */ R$5),
/* harmony export */   av: () => (/* binding */ S$8),
/* harmony export */   aw: () => (/* binding */ s$H),
/* harmony export */   ax: () => (/* binding */ n$R),
/* harmony export */   ay: () => (/* binding */ C$8),
/* harmony export */   az: () => (/* binding */ h$u),
/* harmony export */   b: () => (/* binding */ b$3),
/* harmony export */   b$: () => (/* binding */ o$C),
/* harmony export */   b0: () => (/* binding */ o$h),
/* harmony export */   b1: () => (/* binding */ gt),
/* harmony export */   b2: () => (/* binding */ Ut),
/* harmony export */   b3: () => (/* binding */ D$6),
/* harmony export */   b4: () => (/* binding */ g$h),
/* harmony export */   b5: () => (/* binding */ n$G),
/* harmony export */   b6: () => (/* binding */ u$B),
/* harmony export */   b7: () => (/* binding */ d$5),
/* harmony export */   b8: () => (/* binding */ v$9),
/* harmony export */   b9: () => (/* binding */ m$x),
/* harmony export */   bA: () => (/* binding */ u$m),
/* harmony export */   bB: () => (/* binding */ d$n),
/* harmony export */   bC: () => (/* binding */ i$m),
/* harmony export */   bD: () => (/* binding */ n$c),
/* harmony export */   bE: () => (/* binding */ t$k),
/* harmony export */   bF: () => (/* binding */ l$O),
/* harmony export */   bG: () => (/* binding */ o$I),
/* harmony export */   bH: () => (/* binding */ c$F),
/* harmony export */   bI: () => (/* binding */ T$4),
/* harmony export */   bJ: () => (/* binding */ m$l),
/* harmony export */   bK: () => (/* binding */ j$2),
/* harmony export */   bL: () => (/* binding */ M$1),
/* harmony export */   bM: () => (/* binding */ M),
/* harmony export */   bN: () => (/* binding */ o$F),
/* harmony export */   bO: () => (/* binding */ n$l),
/* harmony export */   bP: () => (/* binding */ o$6),
/* harmony export */   bQ: () => (/* binding */ F$1),
/* harmony export */   bR: () => (/* binding */ h$5),
/* harmony export */   bS: () => (/* binding */ n$o),
/* harmony export */   bT: () => (/* binding */ g$2),
/* harmony export */   bU: () => (/* binding */ a$u),
/* harmony export */   bV: () => (/* binding */ u$N),
/* harmony export */   bW: () => (/* binding */ i$W),
/* harmony export */   bX: () => (/* binding */ n$V),
/* harmony export */   bY: () => (/* binding */ c$12),
/* harmony export */   bZ: () => (/* binding */ n$u),
/* harmony export */   b_: () => (/* binding */ d$j),
/* harmony export */   ba: () => (/* binding */ b$a),
/* harmony export */   bb: () => (/* binding */ b$b),
/* harmony export */   bc: () => (/* binding */ N$5),
/* harmony export */   bd: () => (/* binding */ s$o),
/* harmony export */   be: () => (/* binding */ R$6),
/* harmony export */   bf: () => (/* binding */ d$t),
/* harmony export */   bg: () => (/* binding */ g$9),
/* harmony export */   bh: () => (/* binding */ e$p),
/* harmony export */   bi: () => (/* binding */ q$4),
/* harmony export */   bj: () => (/* binding */ P$7),
/* harmony export */   bk: () => (/* binding */ s$G),
/* harmony export */   bl: () => (/* binding */ r$r),
/* harmony export */   bm: () => (/* binding */ r$x),
/* harmony export */   bn: () => (/* binding */ o$m),
/* harmony export */   bo: () => (/* binding */ d$E),
/* harmony export */   bp: () => (/* binding */ e$a),
/* harmony export */   bq: () => (/* binding */ c$r),
/* harmony export */   br: () => (/* binding */ V$2),
/* harmony export */   bs: () => (/* binding */ s$r),
/* harmony export */   bt: () => (/* binding */ u$h),
/* harmony export */   bu: () => (/* binding */ o$j),
/* harmony export */   bv: () => (/* binding */ r$v),
/* harmony export */   bw: () => (/* binding */ i$G),
/* harmony export */   bx: () => (/* binding */ u$K),
/* harmony export */   by: () => (/* binding */ k$a),
/* harmony export */   bz: () => (/* binding */ i$F),
/* harmony export */   c: () => (/* binding */ c$3),
/* harmony export */   c$: () => (/* binding */ y$l),
/* harmony export */   c0: () => (/* binding */ i$C),
/* harmony export */   c1: () => (/* binding */ u$n),
/* harmony export */   c2: () => (/* binding */ n$v),
/* harmony export */   c3: () => (/* binding */ D$1),
/* harmony export */   c4: () => (/* binding */ P$1),
/* harmony export */   c5: () => (/* binding */ F),
/* harmony export */   c6: () => (/* binding */ h$i),
/* harmony export */   c7: () => (/* binding */ y$9),
/* harmony export */   c8: () => (/* binding */ c$C),
/* harmony export */   c9: () => (/* binding */ c$B),
/* harmony export */   cA: () => (/* binding */ c$K),
/* harmony export */   cB: () => (/* binding */ b$c),
/* harmony export */   cC: () => (/* binding */ w$a),
/* harmony export */   cD: () => (/* binding */ u$z),
/* harmony export */   cE: () => (/* binding */ t$x),
/* harmony export */   cF: () => (/* binding */ m$y),
/* harmony export */   cG: () => (/* binding */ n$W),
/* harmony export */   cH: () => (/* binding */ N$2),
/* harmony export */   cI: () => (/* binding */ i$5),
/* harmony export */   cJ: () => (/* binding */ j$9),
/* harmony export */   cK: () => (/* binding */ X),
/* harmony export */   cL: () => (/* binding */ B),
/* harmony export */   cM: () => (/* binding */ ee),
/* harmony export */   cN: () => (/* binding */ ne),
/* harmony export */   cO: () => (/* binding */ fe),
/* harmony export */   cP: () => (/* binding */ e$4),
/* harmony export */   cQ: () => (/* binding */ o$q),
/* harmony export */   cR: () => (/* binding */ E$3),
/* harmony export */   cS: () => (/* binding */ k$8),
/* harmony export */   cT: () => (/* binding */ B$4),
/* harmony export */   cU: () => (/* binding */ y$u),
/* harmony export */   cV: () => (/* binding */ d$F),
/* harmony export */   cW: () => (/* binding */ A$d),
/* harmony export */   cX: () => (/* binding */ i$A),
/* harmony export */   cY: () => (/* binding */ C$7),
/* harmony export */   cZ: () => (/* binding */ j$f),
/* harmony export */   c_: () => (/* binding */ v$h),
/* harmony export */   ca: () => (/* binding */ p$L),
/* harmony export */   cb: () => (/* binding */ n$s),
/* harmony export */   cc: () => (/* binding */ S$6),
/* harmony export */   cd: () => (/* binding */ j$g),
/* harmony export */   ce: () => (/* binding */ i$Q),
/* harmony export */   cf: () => (/* binding */ r$z),
/* harmony export */   cg: () => (/* binding */ e$t),
/* harmony export */   ch: () => (/* binding */ qt),
/* harmony export */   ci: () => (/* binding */ x$9),
/* harmony export */   cj: () => (/* binding */ t$n),
/* harmony export */   ck: () => (/* binding */ d$y),
/* harmony export */   cl: () => (/* binding */ A$4),
/* harmony export */   cm: () => (/* binding */ u$x),
/* harmony export */   cn: () => (/* binding */ b$7),
/* harmony export */   co: () => (/* binding */ m$s),
/* harmony export */   cp: () => (/* binding */ g$b),
/* harmony export */   cq: () => (/* binding */ e$k),
/* harmony export */   cr: () => (/* binding */ pt),
/* harmony export */   cs: () => (/* binding */ M$4),
/* harmony export */   ct: () => (/* binding */ I$1),
/* harmony export */   cu: () => (/* binding */ y$f),
/* harmony export */   cv: () => (/* binding */ l$x),
/* harmony export */   cw: () => (/* binding */ u$o),
/* harmony export */   cx: () => (/* binding */ r$f),
/* harmony export */   cy: () => (/* binding */ G$2),
/* harmony export */   cz: () => (/* binding */ u$P),
/* harmony export */   d: () => (/* binding */ d$i),
/* harmony export */   d0: () => (/* binding */ $),
/* harmony export */   d1: () => (/* binding */ C$2),
/* harmony export */   d2: () => (/* binding */ r$l),
/* harmony export */   d3: () => (/* binding */ o$E),
/* harmony export */   d4: () => (/* binding */ o$k),
/* harmony export */   d5: () => (/* binding */ t$O),
/* harmony export */   d6: () => (/* binding */ r$B),
/* harmony export */   d7: () => (/* binding */ F$4),
/* harmony export */   d8: () => (/* binding */ l$H),
/* harmony export */   d9: () => (/* binding */ A$1),
/* harmony export */   dA: () => (/* binding */ o$9),
/* harmony export */   dB: () => (/* binding */ h$p),
/* harmony export */   dC: () => (/* binding */ s$g),
/* harmony export */   dD: () => (/* binding */ L$4),
/* harmony export */   dE: () => (/* binding */ S$5),
/* harmony export */   dF: () => (/* binding */ m$j),
/* harmony export */   dG: () => (/* binding */ f$q),
/* harmony export */   dH: () => (/* binding */ p$17),
/* harmony export */   dI: () => (/* binding */ p$s),
/* harmony export */   dJ: () => (/* binding */ M$6),
/* harmony export */   dK: () => (/* binding */ i$O),
/* harmony export */   dL: () => (/* binding */ u$Q),
/* harmony export */   dM: () => (/* binding */ f$A),
/* harmony export */   dN: () => (/* binding */ i$15),
/* harmony export */   dO: () => (/* binding */ c$14),
/* harmony export */   dP: () => (/* binding */ t$s),
/* harmony export */   dQ: () => (/* binding */ H$3),
/* harmony export */   dR: () => (/* binding */ request),
/* harmony export */   dS: () => (/* binding */ FeatureSet),
/* harmony export */   dT: () => (/* binding */ DataBrowser$1),
/* harmony export */   da: () => (/* binding */ a$P),
/* harmony export */   db: () => (/* binding */ t$9),
/* harmony export */   dc: () => (/* binding */ o$u),
/* harmony export */   dd: () => (/* binding */ z$5),
/* harmony export */   de: () => (/* binding */ m$B),
/* harmony export */   df: () => (/* binding */ j$i),
/* harmony export */   dg: () => (/* binding */ x$2),
/* harmony export */   dh: () => (/* binding */ S$a),
/* harmony export */   di: () => (/* binding */ h$y),
/* harmony export */   dj: () => (/* binding */ v$c),
/* harmony export */   dk: () => (/* binding */ F$5),
/* harmony export */   dl: () => (/* binding */ s$D),
/* harmony export */   dm: () => (/* binding */ p$11),
/* harmony export */   dn: () => (/* binding */ R$8),
/* harmony export */   dp: () => (/* binding */ Rt),
/* harmony export */   dq: () => (/* binding */ f$e),
/* harmony export */   dr: () => (/* binding */ j$1),
/* harmony export */   ds: () => (/* binding */ x$1),
/* harmony export */   dt: () => (/* binding */ u$O),
/* harmony export */   du: () => (/* binding */ t$6),
/* harmony export */   dv: () => (/* binding */ $$2),
/* harmony export */   dw: () => (/* binding */ i$n),
/* harmony export */   dx: () => (/* binding */ i$4),
/* harmony export */   dy: () => (/* binding */ M$a),
/* harmony export */   dz: () => (/* binding */ w$b),
/* harmony export */   e: () => (/* binding */ y$2),
/* harmony export */   f: () => (/* binding */ b$4),
/* harmony export */   g: () => (/* binding */ ht),
/* harmony export */   h: () => (/* binding */ h$8),
/* harmony export */   i: () => (/* binding */ c$b),
/* harmony export */   j: () => (/* binding */ U$4),
/* harmony export */   k: () => (/* binding */ k$1),
/* harmony export */   l: () => (/* binding */ c$U),
/* harmony export */   m: () => (/* binding */ c$a),
/* harmony export */   n: () => (/* binding */ n$6),
/* harmony export */   o: () => (/* binding */ o$H),
/* harmony export */   p: () => (/* binding */ l$a),
/* harmony export */   q: () => (/* binding */ j$b),
/* harmony export */   r: () => (/* binding */ c$O),
/* harmony export */   s: () => (/* binding */ s$x),
/* harmony export */   t: () => (/* binding */ t$M),
/* harmony export */   u: () => (/* binding */ u$7),
/* harmony export */   v: () => (/* binding */ m$m),
/* harmony export */   w: () => (/* binding */ w$2),
/* harmony export */   x: () => (/* binding */ x$4),
/* harmony export */   y: () => (/* binding */ y$3),
/* harmony export */   z: () => (/* binding */ z$6)
/* harmony export */ });
/* harmony import */ var _arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arcgis-geoenrichment-databrowser-6ca8ea14.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/arcgis-geoenrichment-databrowser-6ca8ea14.js");


/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$W(n,r){if(n.forEach)n.forEach(r);else for(let t=0;t<n.length;t++)r(n[t],t,n);}function r$B(n,r,t){if(n.slice)return n.slice(r,t);void 0===r?r=0:(r<0&&(r+=n.length),r=Math.min(n.length,Math.max(0,r))),void 0===t?t=n.length:(t<0&&(t+=n.length),t=Math.min(n.length,Math.max(0,t)));const o=Math.max(0,t-r),c=new(n.constructor)(o);for(let e=0;e<o;e++)c[e]=n[r+e];return c}function t$O(n){return n instanceof ArrayBuffer||n&&n.constructor&&"ArrayBuffer"===n.constructor.name}function o$J(n){return n instanceof Int8Array||n&&n.constructor&&"Int8Array"===n.constructor.name}function c$14(n){return n instanceof Uint8Array||n&&n.constructor&&"Uint8Array"===n.constructor.name}function e$K(n){return n instanceof Uint8ClampedArray||n&&n.constructor&&"Uint8ClampedArray"===n.constructor.name}function a$Q(n){return n instanceof Int16Array||n&&n.constructor&&"Int16Array"===n.constructor.name}function u$Q(n){return n instanceof Uint16Array||n&&n.constructor&&"Uint16Array"===n.constructor.name}function i$17(n){return n instanceof Int32Array||n&&n.constructor&&"Int32Array"===n.constructor.name}function f$A(n){return n instanceof Uint32Array||n&&n.constructor&&"Uint32Array"===n.constructor.name}function s$I(n){return n instanceof Float32Array||n&&n.constructor&&"Float32Array"===n.constructor.name}function y$w(n){return n instanceof Float64Array||n&&n.constructor&&"Float64Array"===n.constructor.name}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function p$18(e,t){let n;if(t)for(n in e)e.hasOwnProperty(n)&&(void 0===e[n]?delete e[n]:e[n]instanceof Object&&p$18(e[n],!0));else for(n in e)e.hasOwnProperty(n)&&void 0===e[n]&&delete e[n];return e}function y$v(e){if(!e||"object"!=typeof e||"function"==typeof e)return e;if(o$J(e)||c$14(e)||e$K(e)||a$Q(e)||u$Q(e)||i$17(e)||f$A(e)||s$I(e)||y$w(e))return r$B(e);if(e instanceof Date)return new Date(e.getTime());if(e instanceof ArrayBuffer){return e.slice(0,e.byteLength)}if(e instanceof Map){const t=new Map;return e.forEach(((e,n)=>{t.set(n,y$v(e));})),t}if(e instanceof Set){const t=new Set;return e.forEach((e=>{t.add(y$v(e));})),t}let p;const l=e;if("function"==typeof l.clone)p=l.clone();else if("function"==typeof l.map&&"function"==typeof l.forEach)p=l.map(y$v);else if("function"==typeof l.notifyChange&&"function"==typeof l.watch)p=l.clone();else {p={};for(const t of Object.getOwnPropertyNames(e))p[t]=y$v(e[t]);}return p}function l$P(e,t){return e===t||"number"==typeof e&&isNaN(e)&&"number"==typeof t&&isNaN(t)||"function"==typeof(e||{}).getTime&&"function"==typeof(t||{}).getTime&&e.getTime()===t.getTime()||!1}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$V(r,n,t=!1){return e$J(r,n,t)}function t$N(r,n){if(null!=n)return n[r]||i$16(r.split("."),!1,n)}function o$I(r,n,t){const o=r.split("."),e=o.pop(),u=i$16(o,!0,t);u&&e&&(u[e]=n);}function i$16(r,n,t){let o=t;for(const i of r){if(null==o)return;if(!(i in o)){if(!n)return;o[i]={};}o=o[i];}return o}function e$J(n,t,o){return t?Object.keys(t).reduce((function(n,i){let u=n[i],c=t[i];return u===c?n:void 0===u?(n[i]=y$v(c),n):(Array.isArray(c)||Array.isArray(n)?(u=u?Array.isArray(u)?n[i]=u.concat():n[i]=[u]:n[i]=[],c&&(Array.isArray(c)||(c=[c]),o?c.forEach((r=>{-1===u.indexOf(r)&&u.push(r);})):n[i]=c.concat())):c&&"object"==typeof c?n[i]=e$J(u,c,o):n.hasOwnProperty(i)&&!t.hasOwnProperty(i)||(n[i]=c),n)}),n||{}):n}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const s$H={apiKey:void 0,applicationUrl:_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.location&&_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.location.href,assetsPath:"",fontsUrl:"https://static.arcgis.com/fonts",geometryService:null,geometryServiceUrl:"https://utility.arcgisonline.com/arcgis/rest/services/Geometry/GeometryServer",geoRSSServiceUrl:"https://utility.arcgis.com/sharing/rss",kmlServiceUrl:"https://utility.arcgis.com/sharing/kml",portalUrl:"https://www.arcgis.com",workers:{loaderConfig:{has:{},paths:{},map:{},packages:[]}},request:{httpsDomains:["arcgis.com","arcgisonline.com","esrikr.com","premiumservices.blackbridge.com","esripremium.accuweather.com","gbm.digitalglobe.com","firstlook.digitalglobe.com","msi.digitalglobe.com"],interceptors:[],maxUrlLength:2e3,proxyRules:[],proxyUrl:null,timeout:6e4,trustedServers:[],useIdentity:!0},log:{interceptors:[],level:null}};if(_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.esriConfig&&(n$V(s$H,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.esriConfig,!0),delete s$H.has),!s$H.assetsPath){const e="4.19.0";s$H.assetsPath=`https://js.arcgis.com/${e.slice(0,-2)}/@arcgis/core/assets`;}s$H.baseUrl&&console.warn("[esri.config]","baseUrl has been replaced by assetsPath"),Object.defineProperty(s$H,"baseUrl",{set(){console.warn("[esri.config]","baseUrl has been replaced by assetsPath");}}),s$H.request.corsEnabledServers=[],s$H.request.corsEnabledServers.push=function(){return console.warn("[esri.config]","request.corsEnabledServers is not supported and will be removed in a future release. See http://esriurl.com/cors8664"),0};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function r$A(n){return null!=n}function t$M(n){return null==n}function u$P(n){return void 0===n}function e$I(n){return n}function c$13(n,t){return r$A(n)?n:"function"==typeof t?t():t}function l$O(n){return r$A(n)&&n.destroy(),null}function i$15(n){return r$A(n)&&n.dispose(),null}function s$G(n){return r$A(n)&&n.remove(),null}function p$17(n){return null}function y$u(n,r){const t=new Array;for(const u of n)t.push(v$h(u,null,r));return t}function d$F(n,r){for(const t of n)v$h(t,null,r);}function v$h(n,t,u){return r$A(n)?u(n):t}function A$d(n,t){return r$A(n)?t(n):null}function g$o(n,...r){let t=n,u=0;for(;u<r.length&&t;)t=t[r[u++]];return t}function m$F(n){return n}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const e$H=/\{([^\}]+)\}/g;function n$U(t){return null==t?"":t}function r$z(r,o){return r.replace(e$H,"object"==typeof o?(e,r)=>n$U(t$N(r,o)):(t,e)=>n$U(o(e)))}function o$H(t,e){return t.replace(/([\.$?*|{}\(\)\[\]\\\/\+\-^])/g,(t=>e&&-1!==e.indexOf(t)?t:`\\${t}`))}function c$12(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return e}function u$O(t){return (new DOMParser).parseFromString(t||"","text/html").body.innerText||""}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const o$G={info:0,warn:1,error:2,none:3};class n$T{constructor(e){this.level=null,this._module="",this._parent=null,this.writer=null,this._loggedMessages={error:new Map,warn:new Map,info:new Map},null!=e.level&&(this.level=e.level),null!=e.writer&&(this.writer=e.writer),this._module=e.module,n$T._loggers[this.module]=this;const t=this.module.lastIndexOf(".");-1!==t&&(this._parent=n$T.getLogger(this.module.slice(0,t)));}get module(){return this._module}get parent(){return this._parent}error(...e){this._log("error","always",...e);}warn(...e){this._log("warn","always",...e);}info(...e){this._log("info","always",...e);}errorOnce(...e){this._log("error","once",...e);}warnOnce(...e){this._log("warn","once",...e);}infoOnce(...e){this._log("info","once",...e);}errorOncePerTick(...e){this._log("error","oncePerTick",...e);}warnOncePerTick(...e){this._log("warn","oncePerTick",...e);}infoOncePerTick(...e){this._log("info","oncePerTick",...e);}get test(){const e=this;return {loggedMessages:e._loggedMessages,clearLoggedWarnings:()=>e._loggedMessages.warn.clear()}}static get testSingleton(){return {resetLoggers(e={}){const t=n$T._loggers;return n$T._loggers=e,t},set throttlingDisabled(e){n$T._throttlingDisabled=e;}}}static getLogger(e){let t=n$T._loggers[e];return t||(t=new n$T({module:e})),t}_log(t,r,...o){if(!this._matchLevel(t))return;if("always"!==r&&!n$T._throttlingDisabled){const e=this._argsToKey(o),s=this._loggedMessages[t].get(e);if("once"===r&&null!=s||"oncePerTick"===r&&s&&s>=n$T._tickCounter)return;this._loggedMessages[t].set(e,n$T._tickCounter),n$T._scheduleTickCounterIncrement();}for(const n of s$H.log.interceptors)if(n(t,this.module,...o))return;this._inheritedWriter()(t,this.module,...o);}_parentWithMember(e,r){let o=this;for(;r$A(o);){const r=o[e];if(r$A(r))return r;o=o.parent;}return r}_inheritedWriter(){return this._parentWithMember("writer",this._consoleWriter)}_consoleWriter(e,t,...r){console[e](`[${t}]`,...r);}_matchLevel(t){const r=s$H.log.level?s$H.log.level:"warn";return o$G[this._parentWithMember("level",r)]<=o$G[t]}_argsToKey(...e){const t=(e,t)=>"object"!=typeof t||Array.isArray(t)?t:"[Object]";return c$12(JSON.stringify(e,t))}static _scheduleTickCounterIncrement(){n$T._tickCounterScheduled||(n$T._tickCounterScheduled=!0,Promise.resolve().then((()=>{n$T._tickCounter++,n$T._tickCounterScheduled=!1;})));}}n$T._loggers={},n$T._tickCounter=0,n$T._tickCounterScheduled=!1,n$T._throttlingDisabled=!1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const n$S=n$T.getLogger("esri.core.Accessor");function r$y(e){return null==e?e:new Date(e)}function t$L(e){return null==e?e:!!e}function o$F(e){return null==e?e:e.toString()}function u$N(e){return null==e?e:(e=parseFloat(e),isNaN(e)?0:e)}function a$P(e){return null==e?e:Math.round(parseFloat(e))}function s$F(e){return e&&e.constructor&&void 0!==e.constructor.__accessorMetadata__}function l$N(e,n){return null!=n&&e&&!(n instanceof e)}function i$14(e){return e&&"isCollection"in e}function c$11(e){return e&&e.Type?"function"==typeof e.Type?e.Type:e.Type.base:null}function f$z(e,n){if(!n||!n.constructor||!i$14(n.constructor))return p$16(e,n)?n:new e(n);const r=c$11(e.prototype.itemType),t=c$11(n.constructor.prototype.itemType);return r?t?r===t?n:r.prototype.isPrototypeOf(t.prototype)?new e(n):(p$16(e,n),n):new e(n):n}function p$16(e,r){return !!s$F(r)&&(n$S.error("Accessor#set","Assigning an instance of '"+(r.declaredClass||"unknown")+"' which is not a subclass of '"+v$g(e)+"'"),!0)}function y$t(e,n){return null==n?n:i$14(e)?f$z(e,n):l$N(e,n)?p$16(e,n)?n:new e(n):n}function v$g(e){return e&&e.prototype&&e.prototype.declaredClass||"unknown"}function g$n(e){switch(e){case Number:return u$N;case N$5:return a$P;case Boolean:return t$L;case String:return o$F;case Date:return r$y;default:return y$t.bind(null,e)}}function d$E(e,n){const r=g$n(e);return 1===arguments.length?r:r(n)}function h$A(e,n,r){return 1===arguments.length?h$A.bind(null,e):n?Array.isArray(n)?n.map((n=>e(n,r))):[e(n,r)]:n}function b$e(e,n){return 1===arguments.length?h$A(d$E.bind(null,e)):h$A(d$E.bind(null,e),n)}function m$E(e,n,r){return 0!==n&&Array.isArray(r)?r.map((r=>m$E(e,n-1,r))):e(r)}function w$c(e,n,r){if(2===arguments.length)return w$c.bind(null,e,n);if(!r)return r;let t=n,o=r=m$E(e,n,r);for(;t>0&&Array.isArray(o);)t--,o=o[0];if(void 0!==o)for(let u=0;u<t;u++)r=[r];return r}function A$c(e,n,r){return 2===arguments.length?w$c(d$E.bind(null,e),n):w$c(d$E.bind(null,e),n,r)}function $$3(e){return !!Array.isArray(e)&&!e.some((n=>{const r=typeof n;return !("string"===r||"number"===r||"function"===r&&e.length>1)}))}function j$j(e,r){if(2===arguments.length)return j$j(e).call(null,r);const t=new Set,o=e.filter((e=>"function"!=typeof e)),u=e.filter((e=>"function"==typeof e));for(const n of e)"string"!=typeof n&&"number"!=typeof n||t.add(n);let a=null,s=null;return (e,r)=>{if(null==e)return e;const i=typeof e,c="string"===i||"number"===i;return c&&(t.has(e)||u.some((e=>"string"===i&&e===String||"number"===i&&e===Number)))||"object"===i&&u.some((n=>!l$N(e,n)))?e:(c&&o.length?(a||(a=o.map((e=>"string"==typeof e?`'${e}'`:`${e}`)).join(", ")),n$S.error("Accessor#set",`'${e}' is not a valid value for this property, only the following values are valid: ${a}`)):"object"==typeof e&&u.length?(s||(s=u.map((e=>v$g(e))).join(", ")),n$S.error("Accessor#set",`'${e}' is not a valid value for this property, value must be one of ${s}`)):n$S.error("Accessor#set",`'${e}' is not a valid value for this property`),r&&(r.valid=!1),null)}}function k$a(e,r){if(2===arguments.length)return k$a(e).call(null,r);const t={},o=[],u=[];for(const n in e.typeMap){const r=e.typeMap[n];t[n]=d$E(r),o.push(v$g(r)),u.push(n);}const a=()=>`'${o.join("', '")}'`,i=()=>`'${u.join("', '")}'`,c="string"==typeof e.key?n=>n[e.key]:e.key;return r=>{if(e.base&&!l$N(e.base,r))return r;if(null==r)return r;const o=c(r)||e.defaultKeyValue,u=t[o];if(!u)return n$S.error("Accessor#set",`Invalid property value, value needs to be one of ${a()}, or a plain object that can autocast (having .type = ${i()})`),null;if(!l$N(e.typeMap[o],r))return r;if("string"==typeof e.key&&!s$F(r)){const n={};for(const t in r)t!==e.key&&(n[t]=r[t]);return u(n)}return u(r)}}class N$5{}const S$a={native:e=>({type:"native",value:e}),array:e=>({type:"array",value:e}),oneOf:e=>({type:"one-of",values:e})};function T$7(e){if(!e||!("type"in e))return !1;switch(e.type){case"native":case"array":case"one-of":return !0}return !1}function M$b(e){switch(e.type){case"native":return d$E(e.value);case"array":return h$A(M$b(e.value));case"one-of":return _$7(e);default:return null}}function _$7(e){let r=null;return (t,o)=>C$a(t,e)?t:(null==r&&(r=B$6(e)),n$S.error("Accessor#set",`Invalid property value, value needs to be of type ${r}`),o&&(o.valid=!1),null)}function B$6(e){switch(e.type){case"native":switch(e.value){case Number:return "number";case String:return "string";case Boolean:return "boolean";case N$5:return "integer";case Date:return "date";default:return v$g(e.value)}case"array":return `array of ${B$6(e.value)}`;case"one-of":{const n=e.values.map((e=>B$6(e)));return `one of ${n.slice(0,n.length-1)} or ${n[n.length-1]}`}}return "unknown"}function C$a(e,n){if(null==e)return !0;switch(n.type){case"native":switch(n.value){case Number:case N$5:return "number"==typeof e;case Boolean:return "boolean"==typeof e;case String:return "string"==typeof e}return e instanceof n.value;case"array":return !!Array.isArray(e)&&!e.some((e=>!C$a(e,n.value)));case"one-of":return n.values.some((n=>C$a(e,n)))}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function r$x(r){return n$R((()=>r.forEach((r=>r$A(r)&&r.remove()))))}function n$R(e){return {remove:()=>{e&&(e(),e=void 0);}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$G(r){return r?r.__accessor__?r.__accessor__:r.propertyInvalidated?r:null:null}function i$13(r,n){return null!=r&&r.metadatas&&null!=r.metadatas[n]}function u$M(r,n,t){if(t){return a$O(r,n,{policy:t,path:""})}return a$O(r,n,null)}function a$O(t,e,i){return e?Object.keys(e).reduce((function(t,o){let u=null,l="merge";if(i&&(u=i.path?`${i.path}.${o}`:o,l=i.policy(u)),"replace"===l)return t[o]=e[o],t;if(void 0===t[o])return t[o]=y$v(e[o]),t;let f=t[o],s=e[o];if(f===s)return t;if(Array.isArray(s)||Array.isArray(t))f=f?Array.isArray(f)?t[o]=f.concat():t[o]=[f]:t[o]=[],s&&(Array.isArray(s)||(s=[s]),s.forEach((r=>{-1===f.indexOf(r)&&f.push(r);})));else if(s&&"object"==typeof s)if(i){const r=i.path;i.path=m$F(u),t[o]=a$O(f,s,i),i.path=r;}else t[o]=a$O(f,s,null);else t.hasOwnProperty(o)&&!e.hasOwnProperty(o)||(t[o]=s);return t}),t||{}):t}function l$M(r){return r?"string"==typeof r&&-1===r.indexOf(".")?r:f$y(r):r}function f$y(r){return Array.isArray(r)?r:r.split(".")}function s$E(r){return r.indexOf(",")>-1?r.split(",").map((r=>r.trim())):[r.trim()]}function c$10(r){if(Array.isArray(r)){const n=[];for(const t of r)n.push(...s$E(t));return n}return s$E(r)}function y$s(r,n,e,i){const o=c$10(n);if(1!==o.length){const n=o.map((n=>i(r,n,e)));return r$x(n)}return i(r,o[0],e)}function h$z(r){let n=!1;return ()=>{n||(n=!0,r());}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$F(t,e){const i="?"===t[t.length-1]?t.slice(0,-1):t;if(null!=e.getItemAt||Array.isArray(e)){const t=parseInt(i,10);if(!isNaN(t))return Array.isArray(e)?e[t]:e.getItemAt(t)}const o=e$G(e);return i$13(o,i)?o.get(i):e[i]}function i$12(t,n,r){if(null==t)return t;const o=e$F(n[r],t);return !o&&r<n.length-1?void 0:r===n.length-1?o:i$12(o,n,r+1)}function o$E(n,r,o=0){return "string"==typeof r&&-1===r.indexOf(".")?e$F(r,n):i$12(n,f$y(r),o)}function u$L(t,n){return o$E(t,n)}function f$x(t,n){return void 0!==o$E(n,t)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class o$D{constructor(t){this.autoDestroy=!1,this.properties=t;}}function n$Q(r){let n=r.constructor.__accessorMetadata__;const c=Object.prototype.hasOwnProperty.call(r.constructor,"__accessorMetadata__");if(n){if(!c){const e=Object.create(n.properties),c=n.autoDestroy;for(const r in e)e[r]=y$v(e[r]);n=new o$D(e),n.autoDestroy=c,Object.defineProperty(r.constructor,"__accessorMetadata__",{value:n,enumerable:!1,configurable:!0,writable:!0});}}else n=new o$D({}),Object.defineProperty(r.constructor,"__accessorMetadata__",{value:n,enumerable:!1,configurable:!0,writable:!0});return m$F(r.constructor.__accessorMetadata__)}function c$$(t){return n$Q(t).properties}function s$D(t,e){const r=c$$(t);let o=r[e];return o||(o=r[e]={}),o}function i$11(t,e){return u$M(t,e,_$6)}const p$15=/^(?:[^.]+\.)?(?:value|type|(?:json\.type|json\.origins\.[^.]\.type))$/;function _$6(t){return p$15.test(t)?"replace":"merge"}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
n$T.getLogger("esri.core.accessorSupport.set");function t$K(e,r,s){if(e&&r)if("object"==typeof r)for(const o of Object.getOwnPropertyNames(r))t$K(e,o,r[o]);else {if(-1!==r.indexOf(".")){const i=r.split("."),f=i.splice(i.length-1,1)[0];return void t$K(u$L(e,i),f,s)}e[r]=s;}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const g$m=n$T.getLogger("esri.core.accessorSupport.decorators.property");function y$r(t={}){return (n,o,s)=>{if(n===Function.prototype)throw new Error(`Inappropriate use of @property() on a static field: ${n.name}.${o}. Accessor does not support static properties.`);const i=s$D(n,o);s&&(s.get||s.set?(i.get=s.get||i.get,i.set=s.set||i.set):"value"in s&&("value"in t&&g$m.warn(`@property() will redefine the value of "${o}" on "${n.constructor.name}" already defined in the metadata`,t),i.value=t.value=s.value)),null!=t.readOnly&&(i.readOnly=t.readOnly);const a=t.aliasOf;if(a){const t="string"==typeof a?a:a.source,e="string"==typeof a?null:!0===a.overridable;let r;i.dependsOn=[t],i.get=function(){let e=u$L(this,t);if("function"==typeof e){r||(r=t.split(".").slice(0,-1).join("."));const n=u$L(this,r);n&&(e=e.bind(n));}return e},i.readOnly||(i.set=e?function(t){void 0!==t?this._override(o,t):this._clearOverride(o);}:function(e){t$K(this,t,e);});}const u=t.type,c=t.types;i.cast||(u?i.cast=v$f(u):c&&(Array.isArray(c)?i.cast=h$A(k$a(c[0])):i.cast=k$a(c))),t.range&&(i.cast=j$i(i.cast,t.range)),i$11(i,t);}}function h$y(t,e,r){const n=s$D(t,r);n.json||(n.json={});let o=n.json;return void 0!==e&&(o.origins||(o.origins={}),o.origins[e]||(o.origins[e]={}),o=o.origins[e]),o}function v$f(t){let e=0,r=t;if(T$7(t))return M$b(t);for(;Array.isArray(r)&&1===r.length&&"string"!=typeof r[0]&&"number"!=typeof r[0];)r=r[0],e++;const l=r;if($$3(l))return 0===e?j$j(l):w$c(j$j(l),e);if(1===e)return b$e(l);if(e>1)return A$c(l,e);const f=t;return f.from?f.from:d$E(f)}function j$i(t,e){return r=>{let n=+t(r);return null!=e.step&&(n=Math.round(n/e.step)*e.step),null!=e.min&&(n=Math.max(e.min,n)),null!=e.max&&(n=Math.min(e.max,n)),n}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function o$C(o,t){const e=t?{...t,source:o}:o;return y$r({aliasOf:e})}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const o$B=Object.prototype.toString;function r$w(n){const o="__accessorMetadata__"in n?d$E(n):n;return function(...t){if(t.push(o),"number"==typeof t[2])throw new Error("Using @cast has parameter decorator is not supported since 4.16");return e$E.apply(this,t)}}function e$E(t,o,r,e){s$D(t,o).cast=e;}function i$10(t){return function(o,r){s$D(o,t).cast=o[r];}}function c$_(...t){if(3!==t.length||"string"!=typeof t[1])return 1===t.length&&"[object Function]"===o$B.call(t[0])?r$w(t[0]):1===t.length&&"string"==typeof t[0]?i$10(t[0]):void 0}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const e$D=new Set;function i$$(n,i,o=!1){o&&e$D.has(i)||(o&&e$D.add(i),n.warn(`🛑 DEPRECATED - ${i}`));}function t$J(e,i,o={}){if((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("esri-deprecation-warnings")){const{moduleName:n}=o;s$C(e,`Function: ${(n?n+"::":"")+i+"()"}`,o);}}function s$C(e,o,t={}){if((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("esri-deprecation-warnings")){const{replacement:n,version:r,see:s,warnOnce:a}=t;let c=o;n&&(c+=`\n\t🛠️ Replacement: ${n}`),r&&(c+=`\n\t⚙️ Version: ${r}`),s&&(c+=`\n\t🔗 See ${s} for more details.`),i$$(e,c,a);}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class t$I{constructor(t,o={ignoreUnknown:!1}){this.jsonToAPI=t,this.options=o,this.apiValues=[],this.jsonValues=[],this.apiToJSON=this.invertMap(t),this.apiValues=this.getKeysSorted(this.apiToJSON),this.jsonValues=this.getKeysSorted(this.jsonToAPI),this.read=t=>this.fromJSON(t),this.write=(t,o,s)=>{const i=this.toJSON(t);void 0!==i&&(o[s]=i);},this.write.isJSONMapWriter=!0;}toJSON(t){return this.apiToJSON.hasOwnProperty(t)?this.apiToJSON[t]:this.options.ignoreUnknown?void 0:t}fromJSON(t){return this.jsonToAPI.hasOwnProperty(t)?this.jsonToAPI[t]:this.options.ignoreUnknown?void 0:t}invertMap(t){const o={};for(const s in t)o[t[s]]=s;return o}getKeysSorted(t){const o=[];for(const s in t)o.push(s);return o.sort(),o}}function o$A(){return function(o){return new t$I(o,{ignoreUnknown:!0})}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function r$v(r,o={ignoreUnknown:!0}){const t=r instanceof t$I?r:new t$I(r,o),l={type:null!=o&&o.ignoreUnknown?t.apiValues:String,readOnly:null==o?void 0:o.readOnly,json:{type:t.jsonValues,read:(null==o||!o.readOnly)&&{reader:t.read},write:{writer:t.write}}};return void 0!==(null==o?void 0:o.default)&&(l.json.default=o.default),y$r(l)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$C(e,t,a){let c,d;return void 0===t||Array.isArray(t)?(d=e,a=t,c=[void 0]):(d=t,c=Array.isArray(e)?e:[e]),(e,t)=>{const s=e.constructor.prototype;c.forEach((c=>{const p=h$y(e,c,d);p.read&&"object"!=typeof p.read&&(p.read={}),o$I("read.reader",s[t],p),a&&(p.read.source=(p.read.source||[]).concat(a));}));}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$P(n){if(n.json&&n.json.origins){const o=n.json.origins,e={"web-document":["web-scene","web-map"]};for(const n in e)if(o[n]){const s=o[n];e[n].forEach((n=>{o[n]=s;})),delete o[n];}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$B(e,s){return e.replace(/\$\{([^\s\:\}]*)(?:\:([^\s\:\}]+))?\}/g,(function(e,n){if(""===n)return "$";const i=t$N(n,s),r=null==i?"":i;if(void 0===r)throw new Error(`could not find key "${n}" in template`);return r.toString()}))}class s$B{constructor(t,n,i){this.name=t,this.details=i,this.message=void 0,this instanceof s$B&&(this.message=n&&e$B(n,i)||"");}toString(){return "["+this.name+"]: "+this.message}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class t$H extends s$B{constructor(e,r,s){if(super(e,r,s),!(this instanceof t$H))return new t$H(e,r,s)}}t$H.prototype.type="warning";

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$A(e){return !!e&&e.prototype&&e.prototype.declaredClass&&0===e.prototype.declaredClass.indexOf("esri.core.Collection")}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const i$_=n$T.getLogger("esri.core.accessorSupport.extensions.serializableProperty.reader");function p$14(e,r,n){var o,i;e&&(!n&&!r.read||null!=(o=r.read)&&o.reader||!1===(null==(i=r.read)?void 0:i.enabled)||d$D(e)&&o$I("read.reader",u$K(e),r));}function u$K(t){var e;const r=null!=(e=t.ndimArray)?e:0;if(r>1)return c$Z(t);if(1===r)return a$N(t);if("type"in t&&l$L(t.type)){var n,o;const e=null==(n=t.type.prototype)||null==(o=n.itemType)?void 0:o.Type,r=a$N("function"==typeof e?{type:e}:{types:e});return (e,n,o)=>{const i=r(e,n,o);return i?new t.type(i):i}}return s$A(t)}function s$A(t){return "type"in t?y$q(t.type):j$h(t.types)}function y$q(t){return t.prototype.read?(e,r,n)=>{if(null==e)return e;const o=typeof e;if("object"!==o)return void i$_.error(`Expected JSON value of type 'object' to deserialize type '${t.prototype.declaredClass}', but got '${o}'`);const p=new t;return p.read(e,n),p}:t.fromJSON}function f$w(t,e,r,n){return 0!==n&&Array.isArray(e)?e.map((e=>f$w(t,e,r,n-1))):t(e,void 0,r)}function c$Z(t){var e;const r=s$A(t),n=f$w.bind(null,r),o=null!=(e=t.ndimArray)?e:0;return (t,e,r)=>{if(null==t)return t;t=n(t,r,o);let i=o,p=t;for(;i>0&&Array.isArray(p);)i--,p=p[0];if(void 0!==p)for(let n=0;n<i;n++)t=[t];return t}}function a$N(t){const e=s$A(t);return (t,r,n)=>{if(null==t)return t;if(Array.isArray(t)){const r=[];for(const o of t){const t=e(o,void 0,n);void 0!==t&&r.push(t);}return r}const o=e(t,void 0,n);return void 0!==o?[o]:void 0}}function l$L(t){if(!e$A(t))return !1;const e=t.prototype.itemType;return !(!e||!e.Type)&&("function"==typeof e.Type?v$e(e.Type):m$D(e.Type))}function d$D(t){return "types"in t?m$D(t.types):v$e(t.type)}function v$e(t){return !Array.isArray(t)&&(!!t&&t.prototype&&("read"in t.prototype||"fromJSON"in t||l$L(t)))}function m$D(t){for(const e in t.typeMap){if(!v$e(t.typeMap[e]))return !1}return !0}function j$h(t){var e;let r=null;const o=null!=(e=t.errorContext)?e:"type";return (e,p,u)=>{if(null==e)return e;const s=typeof e;if("object"!==s)return void i$_.error(`Expected JSON value of type 'object' to deserialize, but got '${s}'`);r||(r=g$l(t));const y=t.key;if("string"!=typeof y)return;const f=e[y],c=f?r[f]:t.defaultKeyValue?t.typeMap[t.defaultKeyValue]:void 0;if(!c){const t=`Type '${f||"unknown"}' is not supported`;return u&&u.messages&&e&&u.messages.push(new t$H(`${o}:unsupported`,t,{definition:e,context:u})),void i$_.error(t)}const a=new c;return a.read(e,u),a}}function g$l(t){const e={};for(const i in t.typeMap){var n,o;const p=t.typeMap[i],u=n$Q(p.prototype);if("function"==typeof t.key)continue;const s=u.properties[t.key];if(!s)continue;null!=(n=s.json)&&n.type&&Array.isArray(s.json.type)&&1===s.json.type.length&&"string"==typeof s.json.type[0]&&(e[s.json.type[0]]=p);const y=null==(o=s.json)?void 0:o.write;if(!y||!y.writer){e[i]=p;continue}const f=y.target,c="string"==typeof f?f:t.key,a={};y.writer(i,a,c),a[c]&&(e[a[c]]=p);}return e}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$z(e){if(e.json||(e.json={}),o$z(e.json),n$O(e.json),r$u(e.json),e.json.origins)for(const t in e.json.origins)o$z(e.json.origins[t]),n$O(e.json.origins[t]),r$u(e.json.origins[t]);return !0}function r$u(e){e.name&&(e.read&&"object"==typeof e.read?void 0===e.read.source&&(e.read.source=e.name):e.read={source:e.name},e.write&&"object"==typeof e.write?void 0===e.write.target&&(e.write.target=e.name):e.write={target:e.name});}function o$z(e){"boolean"==typeof e.read?e.read={enabled:e.read}:"function"==typeof e.read?e.read={enabled:!0,reader:e.read}:e.read&&"object"==typeof e.read&&void 0===e.read.enabled&&(e.read.enabled=!0);}function n$O(e){"boolean"==typeof e.write?e.write={enabled:e.write}:"function"==typeof e.write?e.write={enabled:!0,writer:e.write}:e.write&&"object"==typeof e.write&&void 0===e.write.enabled&&(e.write.enabled=!0);}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$N(r,n){var i;if(!n.write||n.write.writer||!1===n.write.enabled&&!n.write.overridePolicy)return;const o=null!=(i=null==r?void 0:r.ndimArray)?i:0;r&&(1===o||"type"in r&&e$A(r.type))?n.write.writer=u$J:n.write.writer=o>1?l$K(o):e$y;}function e$y(t,n,e,o){o$I(e,i$Z(t,o),n);}function i$Z(r,t){return r&&"function"==typeof r.write?r.write({},t):r&&"function"==typeof r.toJSON?r.toJSON():"number"==typeof r?o$y(r):r}function o$y(r){return r===-1/0?-Number.MAX_VALUE:r===1/0?Number.MAX_VALUE:isNaN(r)?null:r}function u$J(t,n,e,o){let u;null===t?u=null:t&&"function"==typeof t.map?(u=t.map((r=>i$Z(r,o))),"function"==typeof u.toArray&&(u=u.toArray())):u=[i$Z(t,o)],o$I(e,u,n);}function f$v(r,t,n){return 0!==n&&Array.isArray(r)?r.map((r=>f$v(r,t,n-1))):i$Z(r,t)}function l$K(t){return function(n,e,i,o){let u;if(null===n)u=null;else {u=f$v(n,o,t);let r=t,e=u;for(;r>0&&Array.isArray(e);)r--,e=e[0];if(void 0!==e)for(let t=0;t<r;t++)u=[u];}o$I(i,u,e);}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function i$Y(r,o){return a$M(r,"read",o)}function s$z(r,o){return a$M(r,"write",o)}function a$M(r,o,t){let n=r&&r.json;if(r&&r.json&&r.json.origins&&t){const e=r.json.origins[t.origin];e&&("any"===o||o in e)&&(n=e);}return n}function p$13(r){const o=y$p(r);if(r.json.origins)for(const n in r.json.origins){const i=r.json.origins[n];p$14(o,i,!1),n$N(o,i);}p$14(o,r.json,!0),n$N(o,r.json);}function y$p(r){return r.type?f$u(r):u$I(r)}function f$u(o){if(!o.type)return;let t=0,n=o.type;for(;Array.isArray(n)&&!$$3(n);)n=n[0],t++;return {type:n,ndimArray:t}}function u$I(r){if(!r.types)return;let o=0,t=r.types;for(;Array.isArray(t);)t=t[0],o++;return {types:t,ndimArray:o}}const c$Y={processPrototypePropertyMetadata(r,t){e$z(t)&&(n$P(t),p$13(t));}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const o$x=[c$Y];function e$x(t,e){for(const r of o$x)if(r.processPrototypePropertyMetadata)for(const o in t){const s=t[o];r.processPrototypePropertyMetadata(o,s,t,e);}}function r$t(t,e){for(const r of o$x)if(r.processClassPropertyMetadata)for(const o in t){const s=t[o];r.processClassPropertyMetadata(o,s,t,e);}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const o$w=new Set,s$y=new Set;function i$X(r){return i=>{i.prototype.declaredClass=r,e$x(n$Q(i.prototype).properties,r),c$X(i);const n=[],a=[];let l=i.prototype;for(;l;)l.hasOwnProperty("initialize")&&!o$w.has(l.initialize)&&(o$w.add(l.initialize),n.push(l.initialize)),l.hasOwnProperty("destroy")&&!s$y.has(l.destroy)&&(s$y.add(l.destroy),a.push(l.destroy)),l=Object.getPrototypeOf(l);o$w.clear(),s$y.clear();class p extends i{constructor(...e){if(super(...e),this.constructor===p&&"function"==typeof this.postscript){if(n.length&&Object.defineProperty(this,"initialize",{enumerable:!1,configurable:!0,value(){for(let e=n.length-1;e>=0;e--)n[e].call(this);}}),a.length){let e=!1;Object.defineProperty(this,"destroy",{enumerable:!1,configurable:!0,value(){if(!e){e=!0;for(let e=0;e<a.length;e++)a[e].call(this);}}});}this.postscript(...e);}}}return p.__accessorMetadata__=n$Q(i.prototype),p.prototype.declaredClass=r,p}}function n$M(e,t){return null==t.get?function(){return this.__accessor__.getterStatic(e)}:function(){return this.__accessor__.getterComputed(e)}}function c$X(t){const o=t.prototype,s=o.declaredClass,i=n$Q(o).properties;r$t(i,s);const c={};for(const e of Object.getOwnPropertyNames(i)){const t=i[e];c[e]={enumerable:!0,configurable:!0,get:n$M(e,t),set(r){const o=this.__accessor__;if(void 0!==o){if(!Object.isFrozen(this)){if(o.initialized&&t.readOnly)throw new TypeError(`[accessor] cannot assign to read-only property '${e}' of ${this.declaredClass}`);if(2===o.lifecycle&&t.constructOnly)throw new TypeError(`[accessor] cannot assign to construct-only property '${e}' of ${this.declaredClass}`);o.set(e,r);}}else Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:r});}};}Object.defineProperties(t.prototype,c);}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function o$v(o,e,i){let p,c;return void 0===e?(c=o,p=[void 0]):"string"!=typeof e?(c=o,p=[void 0],i=e):(c=e,p=Array.isArray(o)?o:[o]),(o,e)=>{const n=o.constructor.prototype;p.forEach((p=>{const s=h$y(o,p,c);s.write&&"object"!=typeof s.write&&(s.write={}),i&&o$I("write.target",i,s),o$I("write.writer",n[e],s);}));}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class s$x extends s$B{constructor(e,t,r){if(super(e,t,r),!(this instanceof s$x))return new s$x(e,t,r)}toJSON(){if(null!=this.details)try{return {name:this.name,message:this.message,details:JSON.parse(JSON.stringify(this.details,((t,r)=>{if(r&&"object"==typeof r&&"function"==typeof r.toJSON)return r;try{return y$v(r)}catch(s){return "[object]"}})))}}catch(r){throw n$T.getLogger("esri.core.Error").error(r),r}return {name:this.name,message:this.message,details:this.details}}static fromJSON(e){return new s$x(e.name,e.message,e.details)}}s$x.prototype.type="error";

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const u$H=n$T.getLogger("esri.core.urlUtils"),l$J=s$H.request,c$W="esri/config: esriConfig.request.proxyUrl is not set.",f$t=/^\s*[a-z][a-z0-9-+.]*:(?![0-9])/i,a$L=/^\s*http:/i,h$x=/^\s*https:/i,p$12=/^\s*file:/i,d$C=/:\d+$/,g$k=/^https?:\/\/[^/]+\.arcgis.com\/sharing(\/|$)/i,m$C=new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$"),y$o=new RegExp("^((([^\\[:]+):)?([^@]+)@)?(\\[([^\\]]+)\\]|([^\\[:]*))(:([0-9]+))?$");class $$2{constructor(t=""){this.uri=t,this.scheme=null,this.authority=null,this.path=null,this.query=null,this.fragment=null,this.user=null,this.password=null,this.host=null,this.port=null;let e=m$F(this.uri.match(m$C));this.scheme=e[2]||(e[1]?"":null),this.authority=e[4]||(e[3]?"":null),this.path=e[5],this.query=e[7]||(e[6]?"":null),this.fragment=e[9]||(e[8]?"":null),null!=this.authority&&(e=m$F(this.authority.match(y$o)),this.user=e[3]||null,this.password=e[4]||null,this.host=e[6]||e[7],this.port=e[9]||null);}toString(){return this.uri}}const x$e=new $$2(s$H.applicationUrl),O$4={},w$b=(()=>{const t=m$F(x$e.path),e=t.substring(0,t.lastIndexOf(t.split("/")[t.split("/").length-1]));return `${`${x$e.scheme}://${x$e.host}${null!=x$e.port?`:${x$e.port}`:""}`}${e}`})();function U$4(t){const e={path:null,query:null},n=new $$2(t),r=t.indexOf("?");return null===n.query?e.path=t:(e.path=t.substring(0,r),e.query=b$d(n.query)),n.fragment&&(e.hash=n.fragment,null===n.query&&(e.path=e.path.substring(0,e.path.length-(n.fragment.length+1)))),e}function b$d(t){const e=t.split("&"),n={};for(const r of e){if(!r)continue;const t=r.indexOf("=");let e,o;t<0?(e=decodeURIComponent(r),o=""):(e=decodeURIComponent(r.slice(0,t)),o=decodeURIComponent(r.slice(t+1)));let i=n[e];"string"==typeof i&&(i=n[e]=[i]),Array.isArray(i)?i.push(o):n[e]=o;}return n}function R$9(t){return t&&"object"==typeof t&&"toJSON"in t&&"function"==typeof t.toJSON}function C$9(t,e){return t?e&&"function"==typeof e?Object.keys(t).map((n=>encodeURIComponent(n)+"="+encodeURIComponent(e(n,t[n])))).join("&"):Object.keys(t).map((n=>{const r=t[n];if(null==r)return "";const o=encodeURIComponent(n)+"=",i=e&&e[n];return i?o+encodeURIComponent(i(r)):Array.isArray(r)?r.map((t=>R$9(t)?o+encodeURIComponent(JSON.stringify(t)):o+encodeURIComponent(t))).join("&"):R$9(r)?o+encodeURIComponent(JSON.stringify(r)):o+encodeURIComponent(r)})).filter((t=>t)).join("&"):""}function q$5(t=!1){let e,n=l$J.proxyUrl;if("string"==typeof t){e=rt(t);const r=A$b(t);r&&(n=r.proxyUrl);}else e=!!t;if(!n)throw u$H.warn(c$W),new s$x("urlutils:proxy-not-set",c$W);e&&ct()&&(n=ut(n));return U$4(n)}function j$g(t){const e=A$b(t);let n,r;if(e){const t=v$d(e.proxyUrl);n=t.path,r=t.query?b$d(t.query):null;}if(n){const e=U$4(t);t=n+"?"+e.path;const o=C$9({...r,...e.query});o&&(t=`${t}?${o}`);}return t}const L$7={path:"",query:""};function v$d(t){const e=t.indexOf("?");return -1!==e?(L$7.path=t.slice(0,e),L$7.query=t.slice(e+1)):(L$7.path=t,L$7.query=null),L$7}function I$5(t){return t=(t=ft(t=dt(t=v$d(t).path),!0)).toLowerCase()}function S$9(t){const e={proxyUrl:t.proxyUrl,urlPrefix:I$5(t.urlPrefix)},n=l$J.proxyRules,r=e.urlPrefix;let o=n.length;for(let i=0;i<n.length;i++){const t=n[i].urlPrefix;if(0===r.indexOf(t)){if(r.length===t.length)return -1;o=i;break}0===t.indexOf(r)&&(o=i+1);}return n.splice(o,0,e),o}function A$b(t){const e=l$J.proxyRules,n=I$5(t);for(let r=0;r<e.length;r++)if(0===n.indexOf(e[r].urlPrefix))return e[r]}function P$8(t,e){return t=k$9(t),e=k$9(e),ft(t)===ft(e)}function k$9(t){const e=(t=z$6(t)).indexOf("/sharing");return e>0?t.substring(0,e):t.replace(/\/+$/,"")}function B$5(t){const e=e=>null==e||e instanceof RegExp&&e.test(t)||"string"==typeof e&&t.startsWith(e),n=l$J.interceptors;if(n)for(const r of n)if(Array.isArray(r.urls)){if(r.urls.some(e))return r}else if(e(r.urls))return r;return null}function E$4(t,e,n=!1){const r=Ot(t),o=Ot(e);return !(!n&&r.scheme!==o.scheme)&&(null!=r.host&&null!=o.host&&(r.host.toLowerCase()===o.host.toLowerCase()&&r.port===o.port))}function J$3(t){if("string"==typeof t){if(!Q$2(t))return !0;t=Ot(t);}if(E$4(t,x$e))return !0;const e=l$J.trustedServers||[];for(let n=0;n<e.length;n++){const r=N$4(e[n]);for(let e=0;e<r.length;e++)if(E$4(t,r[e]))return !0}return !1}function N$4(t){return O$4[t]||(nt(t)||et(t)?O$4[t]=[new $$2(T$6(t))]:O$4[t]=[new $$2(`http://${t}`),new $$2(`https://${t}`)]),O$4[t]}function T$6(t,e=w$b,r){return et(t)?r&&r.preserveProtocolRelative?t:"http"===x$e.scheme&&x$e.authority===M$a(t).slice(2)?`http:${t}`:`https:${t}`:nt(t)?t:m$F(D$6("/"===t[0]?at(e):e,t))}function W$2(t,e=w$b,n){if(!Q$2(t))return t;const r=z$6(t),o=r.toLowerCase(),i=z$6(e).toLowerCase().replace(/\/+$/,""),s=n?z$6(n).toLowerCase().replace(/\/+$/,""):null;if(s&&0!==i.indexOf(s))return t;const u=(t,e,n)=>-1===(n=t.indexOf(e,n))?t.length:n;let l=u(o,"/",o.indexOf("//")+2),c=-1;for(;o.slice(0,l+1)===i.slice(0,l)+"/"&&(c=l+1,l!==o.length);)l=u(o,"/",l+1);if(-1===c)return t;if(s&&c<s.length)return t;t=r.slice(c);const f=i.slice(c-1).replace(/[^/]+/g,"").length;if(f>0)for(let a=0;a<f;a++)t=`../${t}`;else t=`./${t}`;return t}function z$6(t){return t=$t(t=yt(t=mt(t=T$6(t=t.trim()))))}function D$6(...t){const e=t.filter(r$A);if(!e||!e.length)return;const n=[];if(Q$2(e[0])){const t=e[0],r=t.indexOf("//");-1!==r&&(n.push(t.slice(0,r+1)),it(e[0])&&(n[0]+="/"),e[0]=t.slice(r+2));}else "/"===e[0][0]&&n.push("");const o=e.reduce(((t,e)=>e?t.concat(e.split("/")):t),[]);for(let r=0;r<o.length;r++){const t=o[r];".."===t&&n.length>0&&".."!==n[n.length-1]?n.pop():(!t&&r===o.length-1||t&&("."!==t||0===n.length))&&n.push(t);}return n.join("/")}function M$a(t,e=!1){if(F$5(t)||G$6(t))return null;let n=t.indexOf("://");if(-1===n&&et(t))n=2;else {if(-1===n)return null;n+=3;}const r=t.indexOf("/",n);return -1!==r&&(t=t.slice(0,r)),e&&(t=ft(t,!0)),t}function Q$2(t){return et(t)||nt(t)}function F$5(t){return null!=t&&"blob:"===t.slice(0,5)}function G$6(t){return "data:"===t.slice(0,5)}function H$3(t){const e=V$2(t);if(!e||!e.isBase64)return null;const n=atob(e.data),r=new Uint8Array(n.length);for(let o=0;o<n.length;o++)r[o]=n.charCodeAt(o);return r.buffer}const K$1=/^data:(.*?)(;base64)?,(.*)$/;function V$2(t){const e=t.match(K$1);if(!e)return null;const[,n,r,o]=e;return {mediaType:n,isBase64:!!r,data:o}}function X$2(t){return t.isBase64?`data:${t.mediaType};base64,${t.data}`:`data:${t.mediaType},${t.data}`}function et(t){return null!=t&&void 0!==t&&"/"===t[0]&&"/"===t[1]}function nt(t){return f$t.test(t)}function rt(t){return h$x.test(t)||"https"===x$e.scheme&&et(t)}function ot(t){return a$L.test(t)||"http"===x$e.scheme&&et(t)}function it(t){return p$12.test(t)}function ut(t){return et(t)?`https:${t}`:t.replace(a$L,"https:")}function lt(){return "http"===x$e.scheme}function ct(){return "https"===x$e.scheme}function ft(t,e=!1){return et(t)?t.slice(2):(t=t.replace(f$t,""),e&&t.length>1&&"/"===t[0]&&"/"===t[1]&&(t=t.slice(2)),t)}function at(t){const e=t.indexOf("//"),n=t.indexOf("/",e+2);return -1===n?t:t.slice(0,n)}function ht(t){let e=0;if(Q$2(t)){const n=t.indexOf("//");-1!==n&&(e=n+2);}const n=t.lastIndexOf("/");return n<e?t:t.slice(0,n+1)}function pt(t,e){if(!t)return "";const n=U$4(t).path.replace(/\/+$/,""),r=n.substring(n.lastIndexOf("/")+1);if(null==e||!e.length)return r;const o=new RegExp(`.(${e.join("|")})$`,"ig");return r.replace(o,"")}function dt(t){return t&&"/"===t[t.length-1]?t:`${t}/`}function gt(t){return t.replace(/\/+$/,"")}function mt(t){if(/^https?:\/\//i.test(t)){const e=v$d(t);t=(t=e.path.replace(/\/{2,}/g,"/")).replace("/","//"),e.query&&(t+=`?${e.query}`);}return t}function yt(t){return t.replace(/^(https?:\/\/)(arcgis\.com)/i,"$1www.$2")}function $t(t){const e=l$J.httpsDomains;if(!ot(t))return t;const n=t.indexOf("/",7);let r;if(r=-1===n?t:t.slice(0,n),r=r.toLowerCase().slice(7),d$C.test(r)){if(!r.endsWith(":80"))return t;r=r.slice(0,-3),t=t.replace(":80","");}return lt()&&r===x$e.authority&&!g$k.test(t)||(ct()&&r===x$e.authority||e&&e.some((t=>r===t||r.endsWith(`.${t}`)))||ct()&&!A$b(t))&&(t=ut(t)),t}function xt(t,e,n){if(!(e&&n&&t&&Q$2(t)))return t;const r=t.indexOf("//"),o=t.indexOf("/",r+2),i=t.indexOf(":",r+2),s=Math.min(o<0?t.length:o,i<0?t.length:i);if(t.slice(r+2,s).toLowerCase()!==e.toLowerCase())return t;return `${t.slice(0,r+2)}${n}${t.slice(s)}`}function Ot(t){return "string"==typeof t?new $$2(T$6(t)):(t.scheme||(t.scheme=x$e.scheme),t)}function Ut(t,e){const n=U$4(t),r=Object.keys(n.query||{});return r.length>0&&e&&e.warn("removeQueryParameters()",`Url query parameters are not supported, the following parameters have been removed: ${r.join(", ")}.`),n.path}function bt(t,e,n){const r=U$4(t),o=r.query||{};return o[e]=String(n),`${r.path}?${C$9(o)}`}function Rt(t,e){const n=U$4(t),r=n.query||{};for(const i in e)r[i]=e[i];const o=C$9(r);return o?`${n.path}?${o}`:n.path}function qt(t){if(t$M(t))return null;const e=t.match(jt);return e?e[1]:null}const jt=/.*?\.([^\/]*)$/;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function o$u(){const t=n$L.getRandomValues(new Uint16Array(8));t[3]=4095&t[3]|16384,t[4]=16383&t[4]|32768;const o=o=>t[o].toString(16);return o(0)+o(1)+"-"+o(2)+"-"+o(3)+"-"+o(4)+"-"+o(5)+o(6)+o(7)}const n$L=_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.crypto||_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.msCrypto;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const r$s=7;function t$G(e){switch(e){case"defaults":return 0;case"service":return 2;case"portal-item":return 3;case"web-scene":return 4;case"web-map":return 5;case"user":return 6}}function n$K(r){switch(r){case 0:return "defaults";case 2:return "service";case 3:return "portal-item";case 4:return "web-scene";case 5:return "web-map";case 6:return "user"}return m$F(void 0)}function c$V(e){return n$K(e)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function p$11(i){return o$t[n$J(i)]||e$w}function n$J(i){return i instanceof Blob?i.type:t$F(i.url)}function t$F(p){const n=qt(p);return g$j[n]||a$K}const o$t={},a$K="text/plain",e$w=o$t[a$K],g$j={png:"image/png",jpeg:"image/jpeg",jpg:"image/jpg",bmp:"image/bmp",gif:"image/gif",json:"application/json",txt:"text/plain",xml:"application/xml",svg:"image/svg+xml",zip:"application/zip",pbf:"application/vnd.mapbox-vector-tile",gz:"application/gzip"};for(const l in g$j)o$t[g$j[l]]=l;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function c$U(r,o){const s=o&&o.url&&o.url.path;if(r&&s&&(r=T$6(r,s,{preserveProtocolRelative:!0}),o.portalItem&&o.readResourcePaths)){const e=W$2(r,o.portalItem.itemUrl);h$w.test(e)&&o.readResourcePaths.push(o.portalItem.resourceFromPath(e).path);}return I$4(r,o&&o.portal)}function i$W(r,a,u=0){if(!r)return r;!Q$2(r)&&a&&a.blockedRelativeUrls&&a.blockedRelativeUrls.push(r);let n=T$6(r);if(a){const e=a.verifyItemRelativeUrls&&a.verifyItemRelativeUrls.rootPath||a.url&&a.url.path;if(e){const o=I$4(e,a.portal);n=W$2(I$4(n,a.portal),o,o),n!==r&&a.verifyItemRelativeUrls&&a.verifyItemRelativeUrls.writtenUrls.push(n);}}return n=U$3(n,a&&a.portal),Q$2(n)&&(n=z$6(n)),null!=a&&a.resources&&null!=a&&a.portalItem&&!Q$2(n)&&!G$6(n)&&0===u&&a.resources.toKeep.push({resource:a.portalItem.resourceFromPath(n)}),n}function m$B(r,e,t){return c$U(r,t)}function p$10(r,e,t,o){const s=i$W(r,o);void 0!==s&&(e[t]=s);}const f$s=/\/items\/([^\/]+)\/resources\//,h$w=/^\.\/resources\//;function v$c(e){const t=r$A(e)?e.match(f$s):null;return r$A(t)?t[1]:null}function U$3(r,e){return e&&!e.isPortal&&e.urlKey&&e.customBaseUrl?xt(r,`${e.urlKey}.${e.customBaseUrl}`,e.portalHostname):r}function I$4(r,e){if(!e||e.isPortal||!e.urlKey||!e.customBaseUrl)return r;const t=`${e.urlKey}.${e.customBaseUrl}`;return E$4(x$e,`${x$e.scheme}://${t}`)?xt(r,e.portalHostname,t):xt(r,t,e.portalHostname)}var R$8=Object.freeze({__proto__:null,fromJSON:c$U,toJSON:i$W,read:m$B,write:p$10,itemIdFromResourceUrl:v$c});

/**
 * Useful utility methods for work with DOM objects. With this you can hide, show, enable, disable nodes, or check if they are in the layout.
 */
// Ensures a string is presented as an [] of string.
function str2array(s) {
  if (Array.isArray(s)) {
    return s.filter((s) => !!s);
  }
  return s ? s.split(" ").filter((s) => !!s) : [];
}
//--------------------------------------------------------------------------
//
// General utility methods
//
//--------------------------------------------------------------------------
let workerBodyDir;
/**
 * Checks whether the document is formed for a left-to-right language.
 * @returns The true value in the case of a left-to-right language and false otherwise.
 */
function isBodyLtr() {
  return (((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.h)("worker") ? workerBodyDir : document.body.dir) || "ltr").toLowerCase() === "ltr"; // Boolean
}
//--------------------------------------------------------------------------
//
// Work with attributes (replacement for dojo/dom-attr.js)
//
//--------------------------------------------------------------------------
// attribute-related functions (to be obsolete soon)
const forcePropNames = {
  innerHTML: 1,
  textContent: 1,
  className: 1,
  value: 1
};
const attrNames = {
  // original attribute names
  classname: "class"
};
const names = {
  // properties renamed to avoid clashes with reserved words
  class: "className",
  // properties written as camelCase
  tabindex: "tabIndex",
  readonly: "readOnly",
  colspan: "colSpan",
  frameborder: "frameBorder",
  rowspan: "rowSpan",
  textcontent: "textContent"
};
function setAttribute(node, attributeMapOrName, value) {
  if (typeof attributeMapOrName === "object") {
    for (const name in attributeMapOrName) {
      if (name === "style") {
        setAttribute(node, "style", attributeMapOrName[name]);
      }
      else {
        setAttribute(node, name, attributeMapOrName[name]);
      }
    }
    return node;
  }
  if (value === undefined) {
    return node;
  }
  const name = attributeMapOrName;
  const lc = name.toLowerCase();
  const propName = names[lc] || name;
  const forceProp = forcePropNames[propName];
  if (propName === "style" && typeof value !== "string") {
    setStyle(node, value);
  }
  else if (forceProp || typeof value === "boolean") {
    node[propName] = value;
  }
  else {
    // node's attribute
    node.setAttribute(attrNames[lc] || name, value + "");
  }
  return node;
}
//--------------------------------------------------------------------------
//
// Work with classes (replacement for dojo/dom-class.js)
//
//--------------------------------------------------------------------------
/**
 * Adds classes to the node class list.
 * @param node A node.
 * @param classStr Classes to add. This can be a space-separated list of class names
 * or an array of class names.
 */
function addClass(node, classStr) {
  node &&
    node.classList &&
    str2array(classStr).forEach((s) => {
      node.classList.add(s);
    });
}
/**
 * Removes classes from the node class list.
 * @param node A node.
 * @param classStr Classes to remove. This can be a space-separated list of class names
 * or an array of class names.
 */
function removeClass(node, classStr) {
  node &&
    node.classList &&
    str2array(classStr).forEach((s) => {
      node.classList.remove(s);
    });
}
/**
 * Replaces one or more classes on a node list.
 * @param node A node.
 * @param classesToAdd Classes to add.
 * @param classesToRemove Classes to remove.
 */
function replaceClass(node, addClassStr, removeClassStr) {
  removeClass(node, removeClassStr);
  addClass(node, addClassStr);
}
/**
 * Adds/removes classes in a node class list.
 * @param node A node.
 * @param classes  Classes to toggle. This can be a space-separated list of class names
 * or an array of class names.
 * @param add Add/remove flag: true - add, false - remove.
 */
function toggleClass(node, classStr, add) {
  add ? addClass(node, classStr) : removeClass(node, classStr);
}
/**
 * Checks a node to contain a class.
 * @param node A node.
 * @param classStr A class name to look for.
 * @returns True if this class presents in the class list of the given node.
 */
function containsClass(node, classStr) {
  return node && node.classList ? node.classList.contains(classStr) : false;
}
//--------------------------------------------------------------------------
//
// Work with styles (replacement for dojo/dom-style.js)
//
//--------------------------------------------------------------------------
const _pixelNamesCache = {
  left: true,
  top: true
};
const _floatAliases = {
  cssFloat: 1,
  styleFloat: 1,
  float: 1
};
const _pixelRegExp = /margin|padding|width|height|max|min|offset/; // |border
function getStyle(node, name, computedStyle) {
  const style = node.style;
  if (name === "opacity") {
    return style.opacity;
  }
  name = _floatAliases[name] ? ("cssFloat" in style ? "cssFloat" : "styleFloat") : name;
  const s = computedStyle || getComputedStyle$1(node);
  return _toStyleValue(node, name, s[name] || style[name]);
}
function setStyle(node, name, value) {
  name = _floatAliases[name] ? ("cssFloat" in node.style ? "cssFloat" : "styleFloat") : name;
  const isObjectStyle = name && typeof name === "object" && value === undefined;
  if (!isObjectStyle) {
    if (name === "opacity") {
      node.style.opacity = value + "";
    }
    else {
      node.style[name] = value;
    }
  }
  else {
    for (const x in name) {
      setStyle(node, x, name[x]);
    }
  }
}
/**
 * Gets computed style of a given HTML node.
 * @param node An HTML node.
 * @returns The computed style.
 */
function getComputedStyle$1(node) {
  return node && node.nodeType === 1 && window.getComputedStyle(node);
}
function toPixelValue(value) {
  return parseFloat(value) || 0;
}
function _toStyleValue(node, type, value) {
  type = type.toLowerCase();
  // Adjustments for IE and Edge
  if (value === "auto") {
    if (type === "height") {
      return node.offsetHeight;
    }
    if (type === "width") {
      return node.offsetWidth;
    }
  }
  if (type === "fontweight") {
    return value + "" === "700" ? "bold" : "normal";
  }
  if (!(type in _pixelNamesCache)) {
    _pixelNamesCache[type] = _pixelRegExp.test(type);
  }
  return _pixelNamesCache[type] ? toPixelValue(value) : value;
}
//--------------------------------------------------------------------------
//
// Work with geometry (replacement for dojo/dom-geometry.js)
//
//--------------------------------------------------------------------------
/**
 * Gets the position and size of a node relative to the viewport.
 * @param node A node to calculate the size and position.
 * @param includeScroll A flag include any document offsets that may affect the position relative to the viewport.
 * @returns The box: x/y - position, w/h - dimensions.
 */
function position(node, includeScroll) {
  const clientRect = node.getBoundingClientRect();
  const result = {
    x: clientRect.left,
    y: clientRect.top,
    w: clientRect.right - clientRect.left,
    h: clientRect.bottom - clientRect.top
  };
  if (includeScroll) {
    const scroll = docScroll();
    result.x += scroll.x;
    result.y += scroll.y;
  }
  return result;
}
/**
 * Gets a margin box of a node.
 * @param node A node.
 * @param computedStyle An optional computed style of the given node.
 * @returns The margin box: l/t - position, w/h - dimensions.
 */
function getMarginBox(node, computedStyle) {
  const s = computedStyle || getComputedStyle$1(node), me = getMarginExtents(node, s), l = node.offsetLeft - me.l, t = node.offsetTop - me.t;
  return {
    l,
    t,
    w: node.offsetWidth + me.w,
    h: node.offsetHeight + me.h
  };
}
function setMarginBox(node, box, computedStyle) {
  let w = box.w, h = box.h;
  const s = computedStyle || getComputedStyle$1(node), pb = getPadBorderExtents(node, s), mb = getMarginExtents(node, s);
  if (w >= 0) {
    w = Math.max(w - pb.w - mb.w, 0);
  }
  if (h >= 0) {
    h = Math.max(h - pb.h - mb.h, 0);
  }
  setBox(node, box.l, box.t, w, h);
}
function setBox(node, l, t, w, h, u) {
  u = u || "px";
  const s = node.style;
  if (!isNaN(l)) {
    s.left = l + u;
  }
  if (!isNaN(t)) {
    s.top = t + u;
  }
  if (w >= 0) {
    s.width = w + u;
  }
  if (h >= 0) {
    s.height = h + u;
  }
}
/**
 * Gets an object with properties useful for node fitting with regards to box margins (i.e., the outer-box).
 * @param node A node.
 * @param computedStyle An optional computed style of the given node.
 * @returns Calculated margin sizes: l/t/r/b - respective margins, w = l + r, h = t + b.
 */
function getMarginExtents(node, computedStyle) {
  const s = computedStyle || getComputedStyle$1(node), px = toPixelValue, l = px(s.marginLeft), t = px(s.marginTop), r = px(s.marginRight), b = px(s.marginBottom);
  return {
    l,
    t,
    r,
    b,
    w: l + r,
    h: t + b
  };
}
/**
 * Gets a margin box of a node.
 * @param node A node.
 * @param computedStyle An optional computed style of the given node.
 * @returns The content box: l/t - position, w/h - dimensions.
 */
function getContentBox(node, computedStyle) {
  const s = computedStyle || getComputedStyle$1(node), pe = getPadExtents(node, s), be = getBorderExtents(node, s), l = node.offsetLeft + pe.l + be.l, t = node.offsetTop + pe.t + be.t;
  let h, w = node.clientWidth;
  if (!w) {
    w = node.offsetWidth - be.w;
    h = node.offsetHeight - be.h;
  }
  else {
    h = node.clientHeight;
  }
  return {
    l,
    t,
    w: w - pe.w,
    h: h - pe.h
  };
}
/**
 * Gets an object with properties useful for node fitting with regards to padding and border.
 * @param node A node.
 * @param computedStyle An optional computed style of the given node.
 * @returns Calculated padding + border sizes: l/t/r/b - respective sizes, w = l + r, h = t + b.
 */
function getPadBorderExtents(node, computedStyle) {
  const s = computedStyle || getComputedStyle$1(node), p = getPadExtents(node, s), b = getBorderExtents(node, s);
  return {
    l: p.l + b.l,
    t: p.t + b.t,
    r: p.r + b.r,
    b: p.b + b.b,
    w: p.w + b.w,
    h: p.h + b.h
  };
}
/**
 * Gets an object with properties useful for node fitting regads to paddings.
 * @param node A node.
 * @param computedStyle An optional computed style of the given node.
 * @returns Calculated padding sizes: l/t/r/b - respective sizes, w = l + r, h = t + b.
 */
function getPadExtents(node, computedStyle) {
  const s = computedStyle || getComputedStyle$1(node), px = toPixelValue, l = px(s.paddingLeft), t = px(s.paddingTop), r = px(s.paddingRight), b = px(s.paddingBottom);
  return {
    l,
    t,
    r,
    b,
    w: l + r,
    h: t + b
  };
}
/**
 * Gets an object with properties useful for node fitting regads to borders.
 * @param node A node.
 * @param computedStyle An optional computed style of the given node.
 * @returns Calculated border sizes: l/t/r/b - respective sizes, w = l + r, h = t + b.
 */
function getBorderExtents(node, computedStyle) {
  const px = toPixelValue, s = computedStyle || getComputedStyle$1(node), l = s.borderLeftStyle !== "none" ? px(s.borderLeftWidth) : 0, t = s.borderTopStyle !== "none" ? px(s.borderTopWidth) : 0, r = s.borderRightStyle !== "none" ? px(s.borderRightWidth) : 0, b = s.borderBottomStyle !== "none" ? px(s.borderBottomWidth) : 0;
  return {
    l,
    t,
    r,
    b,
    w: l + r,
    h: t + b
  };
}
function create(tagName, attrs, refNode, position) {
  if ((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.h)("worker")) {
    const e = new Error("Can't create DOM elements inside a web worker.");
    console.error(e);
    console.error(e.stack);
    throw e;
  }
  const node = document.createElement(tagName);
  if (attrs) {
    setAttribute(node, attrs);
  }
  if (refNode) {
    place(node, refNode, position);
  }
  return node;
}
/**
 * Creates a node out of the given HTML string.
 * @param htmlText String. E.g. "<div>Hello</div>".
 * @returns A created HTML element.
 */
function toDom(htmlText) {
  return htmlText && create("div", { innerHTML: htmlText }).children[0];
}
/**
 * Adds a node to the child nodes of the reference node at the specific position.
 * @param node A HTML node.
 * @param refNode A reference node.
 * @param position  A position of the node relative to the reference node. Default is "last".
 * @returns The placed node.
 */
function place(node, refNode, position) {
  if (typeof position === "number") {
    // inline'd type check
    const cn = refNode.childNodes;
    if (!cn.length || cn.length <= position) {
      refNode.appendChild(node);
    }
    else {
      _insertBefore(node, cn[position < 0 ? 0 : position]);
    }
  }
  else {
    switch (position) {
      case "before":
        _insertBefore(node, refNode);
        break;
      case "after":
        _insertAfter(node, refNode);
        break;
      case "replace":
        refNode.parentNode.replaceChild(node, refNode);
        break;
      case "first":
        if (refNode.firstChild) {
          _insertBefore(node, refNode.firstChild);
          break;
        }
      // else fallthrough...
      default:
        // aka: last
        refNode.appendChild(node);
    }
  }
  return node;
}
function _insertAfter(node, refNode) {
  const parent = refNode.parentNode;
  if (parent) {
    if (parent.lastChild === refNode) {
      parent.appendChild(node);
    }
    else {
      parent.insertBefore(node, refNode.nextSibling);
    }
  }
}
function _insertBefore(node, refNode) {
  const parent = refNode.parentNode;
  if (parent) {
    parent.insertBefore(node, refNode);
  }
}
/**
 * Safely removes all children of the node.
 * @param node A node.
 */
function empty(node) {
  if ("innerHTML" in node) {
    node.innerHTML = "";
  }
  // SVG/strict elements don't support innerHTML
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
}
/**
 * Removes a node from its parent, clobbering it and all of its children.
 * @param node A node.
 */
function destroy(node) {
  if (!node) {
    return;
  }
  if (node.firstChild) {
    empty(node);
  }
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
/**
 * Queries for an array of elements.
 * @param selector        String. Supported values: ".Class" | "NodeName" | ".ClassA.ClassB". The dot represents a class, otherwise it's a nodeName.
 * @param sourceNode      Optional. If missing, document body will be used.
 *
 * @returns [] of found elements.
 *
 * @example
 * 1. query(".list").
 *
 * 2. query(".list.indexedList")
 *
 * 3. query("div.list");
 *
 * 4. query("div");
 */
function query(selector, sourceNode) {
  const foundElements = [];
  const classes = selector.split(".").filter((c) => !!c);
  const nodeName = selector.indexOf(".") === -1 || selector.indexOf(".") > 0 ? classes.shift().toLowerCase() : null;
  if (!nodeName && !classes.length) {
    return foundElements;
  }
  traverseChildren(sourceNode || document.body, (node) => {
    const hasClasses = !classes.length || classes.every((c) => containsClass(node, c));
    const hasNodeName = !nodeName || node.nodeName.toLowerCase() === nodeName;
    if (hasClasses && hasNodeName) {
      foundElements.push(node);
    }
  });
  return foundElements;
}
//--------------------------------------------------------------------------
//
// Visibility
//
//--------------------------------------------------------------------------
/**
 * Returns true if the given DOM element contains "esriGEHidden" tag.
 */
function isHidden$1(element) {
  return element && containsClass(element, "esriGEHidden");
}
/**
 * Hides DOM elements by adding "esriGEHidden" tag to their class.
 * @returns elements
 */
function hide(elements) {
  return addTag(elements, "esriGEHidden");
}
/**
 * Shows DOM elements by removing "esriGEHidden" tag from their class.
 * @returns elements
 */
function show(elements) {
  return removeTag(elements, "esriGEHidden");
}
/**
 * Shows/hides DOM elements by adding/removing "esriGEHidden" tag from their class.
 * @param visible: Boolean   true - show, false - hide
 * @returns elements
 */
function display(elements, visible) {
  if (visible) {
    return show(elements);
  }
  return hide(elements);
}
//--------------------------------------------------------------------------
//
// Tags
//
//--------------------------------------------------------------------------
/**
 * Adds the given tag to the class of DOM elements.
 * @param elements A single DOM element or an array of DOM elements.
 * @param tag A tag to add.
 * @returns elements.
 */
function addTag(elements, tag) {
  return applyCallback(elements, (element) => {
    addClass(element, tag);
  });
}
/**
 * Removes the given tag from the class of DOM elements.
 * @param elements A single DOM element or an array of DOM elements.
 * @param tag A tag to remove.
 * @returns elements.
 */
function removeTag(elements, tag) {
  return applyCallback(elements, (element) => {
    element && removeClass(element, tag);
  });
}
/**
 * Applies a callback to the given DOM elements.
 * @param elements A single DOM element or an array of DOM elements to apply the callback.
 * @param callback A callback to be called for every element.
 * @param scope An optional scope to execute the callback on.
 * @returns elements.
 */
function applyCallback(elements, callback) {
  if (Array.isArray(elements)) {
    elements.forEach(callback);
  }
  else {
    callback(elements);
  }
  return elements;
}
/**
 * Checks if a node is a child of another node.
 * @param node A node to check.
 * @param parent Another node to check it as a parent of the given node.
 * @return True if the node is a child of another node in the chain of its parents.
 */
function isChildOf(node, parent, checkFunc) {
  let isChild = false;
  // recursive function
  const checkParent = (node) => {
    if (checkFunc && !checkFunc(node)) {
      return;
    }
    if (node.parentNode === parent) {
      isChild = true;
    }
    else {
      node.parentNode && checkParent(node.parentNode);
    }
  };
  node && checkParent(node);
  return isChild;
}
/**
 * Checks if a node is part of the DOM tree attached to the document body.
 * TODO: not sure if we need to check visibility and opacity here
 * A better way to do it:
 * var s = getStyleComputedStyle(node);
 * s.display !== "none";
 * s.visibility !== "hidden";
 * s.opacity !== "0";
 */
function isNodeInLayout(node) {
  return isChildOf(node, document.body, (node) => _inLayout(node));
}
function _inLayout(node) {
  return (!isHidden$1(node) &&
    getStyle(node, "display") !== "none" &&
    !containsClass(node, "dijitHidden") /* for tab container */);
}
//--------------------------------------------------------------------------
//
// Traverse children
//
//--------------------------------------------------------------------------
/**
 * Goes through all descendants of a node and applies a function for every node.
 * @param node A node to start.
 * @param processor A function to be applied to every child node.
 * If it returns true, the processing stops.
 */
function traverseChildren(node, processFunc) {
  if (!node || !node.children) {
    return;
  }
  for (let i = 0; i < node.children.length; i++) {
    const child = node.children[i];
    if (processFunc(child, node)) {
      return;
    }
    traverseChildren(child, processFunc);
  }
}
//--------------------------------------------------------------------------
//
// Scroll
//
//--------------------------------------------------------------------------
/**
 * @returns Current scroll offsets of the document body.
 */
function docScroll() {
  return {
    x: window.pageXOffset || 0,
    y: window.pageYOffset || 0
  };
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$v(e){return e&&("function"==typeof e.on||"function"==typeof e.addEventListener)}function r$r(r,t,n){if(!e$v(r))throw new TypeError("target is not a Evented or EventTarget object");if("on"in r)return r.on(t,n);if(Array.isArray(t)){const e=t.slice();for(const t of e)r.addEventListener(t,n);return {remove(){for(const t of e)r.removeEventListener(t,n);}}}return r.addEventListener(t,n),{remove(){r.removeEventListener(t,n);}}}function t$E(t,n,o){if(!e$v(t))throw new TypeError("target is not a Evented or EventTarget object");if("once"in t)return t.once(n,o);const i=r$r(t,n,(e=>{i.remove(),o.call(t,e);}));return {remove(){i.remove();}}}

// geoenrichment
let _deviceInfo;
function _getDevice() {
  if (_deviceInfo) {
    return _deviceInfo;
  }
  const device = {
    ios: false,
    android: false,
    androidChrome: false,
    desktop: false,
    iphone: false,
    ipod: false,
    ipad: false,
    edge: false,
    ie: false,
    firefox: false,
    safari: false,
    macos: false,
    windows: false,
    electron: false,
    pixelRatio: 1,
    os: null,
    osVersion: "",
    webView: false,
    worker: false
  };
  try {
    if ((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.h)("worker") || self.window === undefined) {
      device.desktop = true;
      device.worker = true;
      return (_deviceInfo = device);
    }
    const win = window;
    const platform = win.navigator.platform;
    const ua = win.navigator.userAgent;
    const screenWidth = win.screen.width;
    const screenHeight = win.screen.height;
    const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
    let ipad = ua.match(/(iPad).*OS\s([\d_]+)/); // [number, number, string];
    const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
    const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
    const ie = ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
    const edge = ua.indexOf("Edge/") >= 0;
    const firefox = ua.indexOf("Gecko/") >= 0 && ua.indexOf("Firefox/") >= 0;
    const windows = platform === "Win32";
    const electron = ua.toLowerCase().indexOf("electron") >= 0;
    let macos = platform === "MacIntel";
    device.safari = macos && !android && !/chrome/i.test(ua) && /safari/i.test(ua);
    // iPadOs 13 fix
    const iPadScreens = [
      "1024x1366",
      "1366x1024",
      "834x1194",
      "1194x834",
      "834x1112",
      "1112x834",
      "768x1024",
      "1024x768"
    ];
    if (!ipad && macos && hasTouch() && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
      ipad = ua.match(/(Version)\/([\d.]+)/); // [number, number, string];
      if (!ipad) {
        ipad = [0, 1, "13_0_0"];
      }
      macos = false;
    }
    device.ie = ie;
    device.edge = edge;
    device.firefox = firefox;
    // Android
    if (android && !windows) {
      device.os = "android";
      device.osVersion = android[2];
      device.android = true;
      device.androidChrome = ua.toLowerCase().indexOf("chrome") >= 0;
    }
    if (ipad || iphone || ipod) {
      device.os = "ios";
      device.ios = true;
    }
    // iOS
    if (iphone && !ipod) {
      device.osVersion = iphone[2].replace(/_/g, ".");
      device.iphone = true;
    }
    if (ipad) {
      device.osVersion = ipad[2].replace(/_/g, ".");
      device.ipad = true;
    }
    if (ipod) {
      device.osVersion = ipod[3] ? ipod[3].replace(/_/g, ".") : null;
      device.ipod = true;
    }
    // iOS 8+ changed UA
    if (device.ios && device.osVersion && ua.indexOf("Version/") >= 0) {
      if (device.osVersion.split(".")[0] === "10") {
        device.osVersion = ua.toLowerCase().split("version/")[1].split(" ")[0];
      }
    }
    // Webview
    device.webView =
      !!((iphone || ipad || ipod) && (ua.match(/.*AppleWebKit(?!.*Safari)/i) || win.navigator.standalone)) ||
        (win.matchMedia && win.matchMedia("(display-mode: standalone)").matches);
    // Desktop
    device.desktop = !(device.ios || device.android) || electron;
    if (device.desktop) {
      device.electron = electron;
      device.macos = macos;
      device.windows = windows;
      if (device.macos) {
        device.os = "macos";
      }
      else if (device.windows) {
        device.os = "windows";
      }
      else if (/Linux/.test(platform)) {
        device.os = "linux";
      }
    }
    // Pixel Ratio
    device.pixelRatio = win.devicePixelRatio || 1;
  }
  catch (e) {
    device.error = String(e);
  }
  return (_deviceInfo = device);
}
/**
 * Tests the device type.
 * @returns True if this is a mobile device.
 */
function isMobileDevice() {
  return !_getDevice().desktop;
}
/**
 * Tests touch support on the device.
 * @returns True if this is a desktop device with touch screen.
 */
function isPCWithTouchScreen() {
  return _getDevice().desktop && hasTouch();
}
/**
 * Tests touch support on the device.
 * @returns True if this is a mobile device or a desktop device with touch screen.
 */
function hasTouch() {
  // taken from dojo/has.js
  return ("ontouchstart" in document ||
    ("onpointerdown" in document && navigator.maxTouchPoints > 0) ||
    navigator.msMaxTouchPoints > 0);
}

// esri4.core
function on(target, type, listener) {
  const support = touchSupport(target, type, listener);
  return r$r(target, support.type, support.listener);
}
function once(target, type, listener) {
  const handle = on(target, type, (event) => {
    handle.remove();
    listener.call(null, event);
  });
  return handle;
}
const _pcTouchMap = {
  click: ["click", "touchend"],
  press: ["mousedown", "touchstart"],
  move: ["mousemove", "touchmove"],
  release: ["mouseup", "touchend"],
  over: ["mouseover", "touchstart"],
  out: ["mouseout", "touchend"],
  enter: ["mouseenter", "touchstart"],
  leave: ["mouseleave", "touchend"]
};
const EVENTS_MAP = (() => {
  const map = {};
  const index = isMobileDevice() ? 1 : 0;
  for (const key in _pcTouchMap) {
    map[key] = _pcTouchMap[key][index];
  }
  return map;
})();
/**
 * Tests a target object and an event type to support touch events and returns
 * an updated event type and listener.
 * @param target A target object.
 * @param type An event type or an array of event types.
 * Generic event types are auto-replaced with actual event types depending on device used.
 * For example, a "click" type is auto-replaced with "touchend" for mobile devices.
 * @param listener Event listener.
 * @param composer An optional function composing a result event type for a converted
 * generic event type.
 * @returns The updated event type and listener. In the case when the target is not a DOM node
 * or a generic event type is not passed, the original type and listener are returned.
 */
function touchSupport(target, type, listener, composer) {
  if (typeof type === "string" && type.indexOf(",") !== -1) {
    throw new TypeError("Event notation like 'click, mouseup' is not supported.");
  }
  if (target && typeof target.addEventListener === "function") {
    const generics = [];
    const other = [];
    (Array.isArray(type) ? type : [type]).forEach((t) => {
      (EVENTS_MAP[t] ? generics : other).push(t);
    });
    const typeCache = {};
    const ignoreCache = {};
    const pcWithTouch = isPCWithTouchScreen();
    // Collect converted generic values in the cache.
    if (generics.length) {
      generics.forEach((t) => {
        const events = pcWithTouch ? _pcTouchMap[t] : [EVENTS_MAP[t]];
        events.forEach((g) => {
          if (!typeCache[g]) {
            typeCache[g] = !composer ? g : composer(g);
          }
        });
        if (pcWithTouch) {
          // Ignore cache collects mouse events to be ignored
          // after touch event.
          const mouseEvent = events[0];
          const touchEvent = events[1];
          let touchMap = ignoreCache[mouseEvent];
          if (!touchMap) {
            touchMap = ignoreCache[mouseEvent] = {};
          }
          touchMap[touchEvent] = 1;
        }
      });
      // Now collect other values in the cache.
      other.forEach((t) => {
        if (!typeCache[t]) {
          typeCache[t] = t;
        }
        // Don't ignore mouse event if it is explicitely passed.
        if (ignoreCache[t]) {
          delete ignoreCache[t];
        }
      });
      // Finally we collect all types
      type = [];
      for (const t in typeCache) {
        type.push(typeCache[t]);
      }
    }
    if (generics.length && pcWithTouch) {
      let ignoreMouseHandle;
      let lastTouch;
      const _removeMouseHandle = () => {
        ignoreMouseHandle && clearTimeout(ignoreMouseHandle);
        ignoreMouseHandle = null;
      };
      return {
        type,
        listener: (event) => {
          if (event.touches) {
            // We cannot use event.preventDefault() to ignore mouse event when touch event appears,
            // because mouse event will be lost and other listeners listening for mouse event will not receive it!
            // Instead of this, we setup an ignore mouse handle for 500 milliseconds
            // (mouse event is generated after touch event in 300 milliseconds).
            _removeMouseHandle(); // Remove previous timeout (touchmove event support!)
            ignoreMouseHandle = setTimeout(_removeMouseHandle, 500);
            lastTouch = event.type;
          }
          else if (ignoreMouseHandle) {
            const touchMap = ignoreCache[event.type];
            if (touchMap && touchMap[lastTouch]) {
              // Ignore mouse event!
              return;
            }
          }
          listener.call(null, event);
        }
      };
    }
  }
  return { type, listener };
}

// geoenrichment.utils
class AnimationItem {
  start(targets, oldNode) {
    this._deferred = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.c)();
    this._oldNode = oldNode;
    if (!targets.length || !targets[0].node) {
      this.finish();
    }
    else {
      this._targets = targets;
      once(targets[0].node, "animationend", () => this.finish());
      for (let i = 0; i < targets.length; i++) {
        const target = targets[i];
        addClass(target.node, target.classes);
        addClass(target.node, "Anim_Common");
      }
    }
    return this._deferred.promise;
  }
  finish() {
    if (this._targets) {
      for (let i = 0; i < this._targets.length; i++) {
        const target = this._targets[i];
        if (target.node) {
          removeClass(target.node, target.classes);
          removeClass(target.node, "Anim_Common");
        }
      }
      this._targets = null;
    }
    if (this._oldNode) {
      destroy(this._oldNode);
      this._oldNode = null;
    }
    this._deferred.resolve();
  }
}
class AnimationHelper {
  constructor(flySurfaceNode) {
    this._ltr = isBodyLtr();
    this._flySurfaceNode = flySurfaceNode;
    this._items = [];
  }
  /**
   * Sends a dom node flying.
   * @param node Dom node.
   * @param className Classes to be applied during animation.
   * @param anchors Define animation directions.
   * @param clone Clone of the node. Probably needed for a placeholder of the node flying away.
   *
   * @returns The passed clone or the copy of the passed dom node.
   */
  fly(node, className, anchors, clone) {
    clone = clone || node.cloneNode(true);
    if (!anchors) {
      anchors = ["top", this._ltr ? "left" : "right"];
    }
    const nodeRect = node.getBoundingClientRect();
    const parentRect = this._flySurfaceNode.getBoundingClientRect();
    addClass(clone, "Anim_FlyingObj");
    let dir, dirDist;
    for (let i = 0; i < anchors.length; i++) {
      const anchor = anchors[i];
      let dist = nodeRect[anchor] - parentRect[anchor];
      if (anchor === "right" || anchor === "bottom") {
        dist = -dist;
      }
      if ((anchor === "left" && !this._ltr) || (anchor === "right" && this._ltr)) {
        dir = anchor;
        dirDist = dist;
      }
      clone.style[anchor] = dist + "px";
    }
    this._flySurfaceNode.appendChild(clone);
    // If the start point is opposite to text direction, we need to correct the starting position
    if (dir) {
      dirDist += nodeRect.width - clone.getBoundingClientRect().width;
      clone.style[dir] = dirDist + "px";
    }
    this.start([
      {
        node: clone,
        classes: [className]
      }
    ], clone);
    return clone;
  }
  start(targets, oldNode) {
    const item = new AnimationItem();
    this._items.push(item);
    if (!this._progress) {
      this._progress = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.c)();
    }
    return item.start(targets, oldNode).then(this._onItemFinished.bind(this, item));
  }
  finish() {
    const items = this._items;
    while (items.length > 0) {
      items.pop().finish();
    }
  }
  getPromise() {
    return this._progress && this._progress.promise;
  }
  _onItemFinished(item) {
    const index = this._items.indexOf(item);
    if (index >= 0) {
      this._items.splice(index, 1);
      if (this._items.length === 0 && this._progress) {
        this._progress.resolve();
        this._progress = null;
      }
    }
  }
}

/**
 *  Allows to monitor the mouse cursor and check if it's over a component.
 */
let latestEvent;
let isBeingDraggedFlag;
function _setLatestEvent(event) {
  latestEvent = event;
}
/**
 * Checks if the mouse/touch event position is over a DOM node.
 * @param component DOM node.
 * @param params Additional checking parameters.
 * @returns True if the event position is over the node.
 */
function isMouseOver(component, params) {
  if (!component || !component.parentNode || !component.getBoundingClientRect || !latestEvent) {
    return false;
  }
  params = params || {};
  const isOverSelf = isMouseOverBox(position(component), {
    ignorePadding: params.ignorePadding,
    event: params.event
  });
  if (!isOverSelf && params.checkAllChildren) {
    let isMouseOverResult = false;
    traverseChildren(component, (node) => {
      if (isMouseOver(node, {
        ignorePadding: params.ignorePadding,
        event: params.event
      })) {
        isMouseOverResult = true;
        return true;
      }
      return false;
    });
    return isMouseOverResult;
  }
  return isOverSelf;
}
/**
 * Checks if the mouse/touch event position is over a box.
 * @param box Box as { x, y, w, h }.
 * @param params Additional checking parameters.
 * @returns True if the event position is over the box.
 */
function isMouseOverBox(box, params) {
  if (!box || !latestEvent) {
    return false;
  }
  params = params || {};
  const bt = params.ignorePadding;
  if (bt) {
    box = Object.assign({}, box);
    box.x += bt;
    box.y += bt;
    box.w -= bt * 2;
    box.h -= bt * 2;
  }
  const evt = params.event ? fixTouchEvent(params.event) : latestEvent;
  return box.x <= evt.clientX && box.x + box.w >= evt.clientX && box.y <= evt.clientY && box.y + box.h >= evt.clientY;
}
//-----------------------------------------------------------------------------
//
// Fix touch event
//
//-----------------------------------------------------------------------------
/**
 * Provides event coordinates for mouse/touch event.
 * @param event A mouse/touch event.
 * @returns The original mouse event or the original touch event enriched with coordinates of the last touch.
 */
function fixTouchEvent(event) {
  const touch = _getTouch(event);
  if (touch) {
    const e = event;
    e.screenX = touch.screenX;
    e.screenY = touch.screenY;
    e.clientX = touch.clientX;
    e.clientY = touch.clientY;
    e.pageX = touch.pageX;
    e.pageY = touch.pageY;
  }
  return event;
}
function _getTouch(_event) {
  const event = _event;
  if (event.touches) {
    if (!event.touches.length) {
      return event.changedTouches[0]; // First touch was released - available in changedTouches.
    }
    const id = event.touches[0].identifier;
    let touch; // Find a changed touch with the same id (available on touchmove).
    for (let i = 0; i < event.changedTouches.length; i++) {
      if (event.changedTouches[i].identifier === id) {
        touch = event.changedTouches[i];
        break;
      }
    }
    return touch || event.touches[0];
  }
  return null;
}
/**
 * @param node              Dom node.
 * @param onMouseOut        Function(event).
 *
 * @returns a handle with remove() method.
 */
function addOutHandler(params) {
  const isMouseOverFunc = params.isMouseOver ||
    (() => isMouseOver(params.node, {
      checkAllChildren: true
    }));
  let letOutTimeoutH;
  function _clear() {
    clearTimeout(letOutTimeoutH);
    letOutTimeoutH = null;
  }
  let isOver;
  const moveH = on(document.body, "mousemove", (moveEvent) => {
    if (isMouseOverFunc()) {
      _clear();
      isOver = true;
    }
    else if (isOver) {
      isOver = false;
      letOutTimeoutH = setTimeout(() => {
        _clear();
        params.onMouseOut && params.onMouseOut(moveEvent);
      }, params.allowedOutDelay);
    }
  });
  return {
    remove: () => {
      moveH.remove();
      _clear();
    }
  };
}
//-----------------------------------------------------------------------------
//
// Monitoring the last event position and dragging state
//
//-----------------------------------------------------------------------------
if (!(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.h)("worker") && globalThis.addEventListener) {
  const _fixTouch = (event) => {
    const touch = _getTouch(event);
    if (touch) {
      touch.type = event.type;
    }
    return (touch || event);
  };
  // TODO: Scope to parent GE element, not document.body
  // once we load the module, it starts monitoring the cursor position
  on(document.body, "touchstart", (event) => {
    _setLatestEvent(_fixTouch(event));
  });
  on(document.body, "touchmove", (event) => {
    _setLatestEvent(_fixTouch(event));
  });
  if (!isMobileDevice()) {
    on(document.body, "mousemove", (event) => {
      _setLatestEvent(_fixTouch(event));
    });
  }
  //TODO: scope to parent GE element, not document.body
  on(document.body, "mousedown", () => {
    if (isBeingDraggedFlag) {
      return;
    }
    isBeingDraggedFlag = true;
    once(document.body, ["mouseup", "click"], () => {
      isBeingDraggedFlag = false;
    });
  });
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$u(e,t,r,o){var c,f=arguments.length,n=f<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,r,o);else for(var l=e.length-1;l>=0;l--)(c=e[l])&&(n=(f<3?c(n):f>3?c(t,r,n):c(t,r))||n);return f>3&&n&&Object.defineProperty(t,r,n),n}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function t$D(t){return t&&t.release&&"function"==typeof t.release}function i$V(t){return t&&t.acquire&&"function"==typeof t.acquire}class e$t{constructor(t,i,e,o=1,s=0){if(this.ctor=t,this.acquireFunction=i,this.releaseFunction=e,this.allocationSize=o,this._pool=new Array(s),this._initialSize=s,this.ctor)for(let n=0;n<s;n++)this._pool[n]=new this.ctor;this.allocationSize=Math.max(o,1);}destroy(){this.prune(0);}acquire(...t){let o;if(e$t.test.disabled)o=new this.ctor;else {if(0===this._pool.length){const t=this.allocationSize;for(let i=0;i<t;i++)this._pool[i]=new this.ctor;}o=this._pool.pop();}return this.acquireFunction?this.acquireFunction(o,...t):i$V(o)&&o.acquire(...t),o}release(i){i&&!e$t.test.disabled&&(this.releaseFunction?this.releaseFunction(i):t$D(i)&&i.release(),this._pool.push(i));}prune(t=this._initialSize){if(!(t>=this._pool.length)){for(let i=t;i<this._pool.length;++i){const t=this._pool[i];this._dispose(t);}this._pool.length=t;}}_dispose(t){t.dispose&&"function"==typeof t.dispose&&t.dispose();}}e$t.test={disabled:!1};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class e$s{constructor(e,s){this._observers=e,this._observer=s;}remove(){this._observers.delete(this._observer);}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let e$r=!1;function t$C(){return e$r}function r$q(){e$r=!0;}function n$I(){e$r=!1;}function i$U(s){return void 0!==s.flags}class o$s{constructor(s,e,t){this.host=s,this.propertyName=e,this.metadata=t,this.flags=1,this._observers=null,this._accessed=null,this._handles=[],this.flags=1|(t.nonNullable?8:0)|(t.hasOwnProperty("value")?16:0)|(void 0===t.get?32:0)|(void 0===t.dependsOn?64:0);}destroy(){this._accessed&&(this._accessed.clear(),this._accessed=null),this._observers&&(this._observers.clear(),this._observers=null),this._clearObservationHandles();}onObservableAccessed(s){s!==this&&(null===this._accessed&&(this._accessed=new Set),this._accessed.add(s));}onTrackingEnd(){this._clearObservationHandles(),this.flags|=32;const s=this._accessed;if(null===s)return;const e=this._handles;for(const t of s)e.push(t.observe(this));s.clear();}observe(e){return null===this._observers&&(this._observers=new Set),new e$s(this._observers.add(e),e)}notify(){2&~this.flags&&(this.flags|=1),this._notifyObservers();}invalidate(){this.notify();}commit(){this.flags&=-2,this._notifyObservers();}_notifyObservers(){if(null===this._observers)return;const s=this._observers.size,t=new Array(s);let r=s-1;for(const e of this._observers)t[r--]=e;const n=!e$r;for(;t.length;){const s=t.pop();if(i$U(s)){if(2&~s.flags&&(s.flags|=1),null===s._observers)continue;for(const e of s._observers)t.push(e);}else n&&s.notify();}}_clearObservationHandles(){for(const s of this._handles)s.remove();this._handles.length=0;}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class s$w{constructor(){this._values=new Map;}clone(t){const r=new s$w;return this._values.forEach(((s,a)=>{t&&t.has(a)||r.set(a,y$v(s));})),r}get(e){return this._values.get(e)}originOf(){return 6}keys(){return [...this._values.keys()]}set(e,s){this._values.set(e,s);}delete(e){this._values.delete(e);}has(e){return this._values.has(e)}forEach(e){this._values.forEach(e);}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let o$r,r$p=[];const s$v=n$T.getLogger("esri.core.Accessor");function i$T(t){void 0!==o$r&&o$r.onObservableAccessed(t);}let l$I=!1,f$r=!1;function a$J(t,n,e){if(l$I)return g$i(t,n,e);u$G(t);const o=n.call(e);return p$$(),o}function g$i(t,n,e){const o=l$I;l$I=!0,u$G(t);let r=null;try{r=n.call(e);}catch(c){f$r&&s$v.error(c);}return p$$(),l$I=o,r}function u$G(t){o$r=t,r$p.push(t);}function p$$(){const t=r$p.pop();o$r=r$p.length>0?r$p[r$p.length-1]:void 0,void 0!==t&&t.onTrackingEnd();}function d$B(t,n){if(32&n.flags)return;const e=f$r;f$r=!1,64&n.flags?g$i(n,n.metadata.get,t):h$v(t,n),f$r=e;}const m$A=[];function h$v(t,e){128&e.flags||(e.flags|=128,g$i(e,(()=>{const o=e.metadata.dependsOn||m$A;for(const e of o)if("string"==typeof e&&-1===e.indexOf("."))A$a(t,e,!1);else {const o=f$y(e);for(let n=0,e=t;n<o.length&&null!=e&&"object"==typeof e;++n)e=A$a(e,o[n],n!==o.length-1);}})),e.flags&=-129);}function A$a(t,n,o){const r="?"===n[n.length-1]?n.slice(0,-1):n;if(null!=t.getItemAt||Array.isArray(t)){const n=parseInt(r,10);if(!isNaN(n))return Array.isArray(t)?t[n]:t.getItemAt(n)}const s=e$G(t),c=null==s?void 0:s.properties.get(r);return c&&(i$T(c),d$B(t,c)),o?t[r]:void 0}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
n$T.getLogger("esri.core.accessorSupport.Properties");function d$A(t,e,s){return void 0!==t}function m$z(t,e,s,i){return void 0!==t&&(!(null==s&&8&t.flags)||(!1))}function v$b(t){return t&&"function"==typeof t.destroy}class y$n{constructor(t){this.host=t,this.properties=new Map,this.ctorArgs=null,this.destroyed=!1,this.lifecycle=0,this.store=new s$w,this._origin=6;const e=this.host.constructor.__accessorMetadata__,s=e.properties;for(const i in s){const e=new o$s(t,i,s[i]);this.properties.set(i,e);}this.metadatas=s,this._autoDestroy=e.autoDestroy;}initialize(){this.lifecycle=1;}constructed(){this.lifecycle=2;}destroy(){if(this.destroyed=!0,this._autoDestroy)for(const[t,e]of this.properties){const s=this.internalGet(t);s&&v$b(s)&&(s.destroy(),8&~e.flags&&this._internalSet(e,null)),e.destroy();}else for(const[t,e]of this.properties)e.destroy();}get initialized(){return 0!==this.lifecycle}get(t){return this.properties.get(t).metadata.get?this.getterComputed(t):this.getterStatic(t)}getterStatic(t){const e=this.properties.get(t);if(void 0!==e)return i$T(e),this.store.has(t)?this.store.get(t):e.metadata.value}getterComputed(t){const e=this.properties.get(t);i$T(e);const s=this.store,i=e.flags,r=this.store.get(t);if(4&i)return r;if(s.has(t)&&(1&~i||t$C()))return r;let o;e.flags|=4;const n=e.metadata.get;64&i?o=a$J(e,n,this.host):(h$v(this.host,e),o=n.call(this.host)),s.set(t,o,1);const c=this.store.get(t);return c===r?e.flags&=-2:e.commit(),e.flags&=-5,c}originOf(t){const e=this.store.originOf(t);if(void 0===e){const e=this.properties.get(t);if(void 0!==e&&16&e.flags)return "defaults"}return n$K(e)}has(t){return !!this.properties.has(t)&&this.store.has(t)}keys(){return [...this.properties.keys()]}internalGet(t){const e=this.properties.get(t);if(d$A(e))return this.store.has(t)?this.store.get(t):e.metadata.value}internalSet(t,e){const s=this.properties.get(t);d$A(s)&&this._internalSet(s,e);}getDependsInfo(t,e,i){const r=this.properties.get(e);if(!d$A(r))return "";const o=new Set,a=a$J({onObservableAccessed:t=>o.add(t),onTrackingEnd:()=>{}},(()=>{var e;return null==(e=r.metadata.get)?void 0:e.call(t)}));let c=`${i}${t.declaredClass.split(".").pop()}.${e}: ${a}\n`;if(0===o.size)return c;i+="  ";for(const l of o){if(!(l instanceof o$s))continue;const t=l.host,e=l.propertyName,r=e$G(t);c+=r?r.getDependsInfo(t,e,i):`${i}${e}: undefined\n`;}return c}setAtOrigin(t,e,s){const i=this.properties.get(t);if(d$A(i))return this._setAtOrigin(i,e,s)}isOverridden(t){const e=this.properties.get(t);return void 0!==e&&!!(2&e.flags)}clearOverride(t){const e=this.properties.get(t);void 0!==e&&2&e.flags&&(e.flags&=-3,e.invalidate());}override(t,e){const s=this.properties.get(t);if(!m$z(s,t,e))return;const i=s.metadata.cast;if(i){const t=this._cast(i,e),{valid:s,value:r}=t;if(O$3.release(t),!s)return;e=r;}s.flags|=2,this._internalSet(s,e);}set(t,e){const s=this.properties.get(t);if(!m$z(s,t,e))return;const i=s.metadata.cast;if(i){const t=this._cast(i,e),{valid:s,value:r}=t;if(O$3.release(t),!s)return;e=r;}const r=s.metadata.set;r?r.call(this.host,e):this._internalSet(s,e);}setDefaultOrigin(t){this._origin=t$G(t);}getDefaultOrigin(){return n$K(this._origin)}propertyInvalidated(t){const e=this.properties.get(t);void 0!==e&&e.invalidate();}propertyCommitted(t){const e=this.properties.get(t);void 0!==e&&e.commit();}_internalSet(t,e){const s=0!==this.lifecycle?this._origin:0;this._setAtOrigin(t,e,s);}_setAtOrigin(e,s,i){const r=this.store,o=e.propertyName;r.has(o,i)&&l$P(s,r.get(o))&&2&~e.flags&&i===r.originOf(o)||(r$q(),e.invalidate(),n$I(),r.set(o,s,i),e.commit(),d$B(this.host,e));}_cast(t,e){const s=O$3.acquire();return s.valid=!0,s.value=e,t&&(s.value=t.call(this.host,e,s)),s}}class _$5{constructor(){this.value=null,this.valid=!0;}acquire(){this.valid=!0;}release(){this.value=null;}}const O$3=new e$t(_$5);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const r$o=Array.prototype.splice;function t$B(e){e.length=0;}class o$q{constructor(r=50,o=50){this._pool=new e$t(Array,void 0,t$B,o,r);}acquire(){return this._pool.acquire()}copy(e){const t=this.acquire();return e.unshift(0,0),r$o.apply(t,e),e.splice(0,2),t}release(e){this._pool.release(e);}prune(){this._pool.prune(0);}static acquire(){return s$u.acquire()}static copy(e){return s$u.copy(e)}static release(e){return s$u.release(e)}static prune(){s$u.prune();}}const s$u=new o$q(100);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class t$A extends e$t{constructor(){super(...arguments),this._set=new Set;}destroy(){super.destroy(),this._set=p$17();}acquire(...e){const s=super.acquire(...e);return this._set.delete(s),s}release(e){e&&!this._set.has(e)&&(super.release(e),this._set.add(e));}_dispose(e){this._set.delete(e),super._dispose(e);}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$q(){return _arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.queueMicrotask?_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.queueMicrotask:e=>{_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.Promise.resolve().then(e);}}const t$z=e$q(),n$H=[];let r$n=[];function u$F(o){n$H.push(o),1===n$H.length&&t$z((()=>{for(const e of r$n)e();const o=n$H.slice();n$H.length=0;for(const e of o)e();}));}!function(o){function e(o){return r$n.push(o),{remove(){r$n=r$n.filter((e=>e!==o));}}}o.before=e;}(u$F||(u$F={}));var f$q=u$F;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const t$y=29;class e$p{constructor(e,s=t$y){this.name=e,this._counter=0,this._items=new Array(s);}record(t){this._items[++this._counter%this._items.length]=t;}get median(){return this._items.slice().sort()[Math.floor(this._items.length/2)]}get average(){return this._items.reduce(((t,e)=>t+e),0)/this._items.length}get last(){return this._items[this._counter%this._items.length]}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class t$x{constructor(t=1){this._seed=t;}set seed(e){this._seed=null==e?Math.random()*t$x._m:e;}getInt(){return this._seed=(t$x._a*this._seed+t$x._c)%t$x._m,this._seed}getFloat(){return this.getInt()/(t$x._m-1)}getIntRange(t,e){return Math.round(this.getFloatRange(t,e))}getFloatRange(e,s){const n=s-e;return e+this.getInt()/t$x._m*n}}t$x._m=2147483647,t$x._a=48271,t$x._c=0;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function l$H(t,r,e){if(t$M(t)&&t$M(r))return !0;if(t$M(t)||t$M(r)||t.length!==r.length)return !1;if(e){for(let n=0;n<t.length;n++)if(!e(t[n],r[n]))return !1}else for(let n=0;n<t.length;n++)if(t[n]!==r[n])return !1;return !0}const d$z=!!Array.prototype.fill;function g$h(n,t){if(d$z)return new Array(n).fill(t);const r=new Array(n);for(let e=0;e<n;e++)r[e]=t;return r}function m$y(n,t){void 0===t&&(t=n,n=0);const r=new Array(t-n);for(let e=n;e<t;e++)r[e-n]=e;return r}class w$a{constructor(){this.last=0;}}const y$m=new w$a;function b$c(n,t,r,e){e=e||y$m;const o=Math.max(0,e.last-10);for(let u=o;u<r;++u)if(n[u]===t)return e.last=u,u;const f=Math.min(o,r);for(let u=0;u<f;++u)if(n[u]===t)return e.last=u,u;return -1}function v$a(n,t,r,e){const o=null==r?n.length:r,f=b$c(n,t,o,e);if(-1!==f)return n[f]=n[o-1],null==r&&n.pop(),t}const A$9=new Set;function O$2(n,t,r=n.length,e=t.length,o,f){if(0===e||0===r)return r;A$9.clear();for(let i=0;i<e;++i)A$9.add(t[i]);o=o||y$m;const u=Math.max(0,o.last-10);for(let i=u;i<r;++i)if(A$9.has(n[i])&&(f&&f.push(n[i]),A$9.delete(n[i]),n[i]=n[r-1],--r,--i,0===A$9.size||0===r))return A$9.clear(),r;for(let i=0;i<u;++i)if(A$9.has(n[i])&&(f&&f.push(n[i]),A$9.delete(n[i]),n[i]=n[r-1],--r,--i,0===A$9.size||0===r))return A$9.clear(),r;return A$9.clear(),r}function C$8(n,t){const r=n.indexOf(t);return -1!==r?(n.splice(r,1),t):null}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var o$p;!function(o){const t=(o,t,n,e)=>{let i=t,r=t;const l=n>>>1,c=o[i-1];for(;r<=l;){r=i<<1,r<n&&e(o[r-1],o[r])<0&&++r;const t=o[r-1];if(e(t,c)<=0)break;o[i-1]=t,i=r;}o[i-1]=c;},n=(o,t)=>o<t?-1:o>t?1:0;function e(o,e,i,r){void 0===e&&(e=0),void 0===i&&(i=o.length),void 0===r&&(r=n);for(let n=i>>>1;n>e;n--)t(o,n,i,r);const l=e+1;for(let n=i-1;n>e;n--){const i=o[e];o[e]=o[n],o[n]=i,t(o,l,n,r);}}function*i(o,e,i,r){void 0===e&&(e=0),void 0===i&&(i=o.length),void 0===r&&(r=n);for(let n=i>>>1;n>e;n--)t(o,n,i,r),yield;const l=e+1;for(let n=i-1;n>e;n--){const i=o[e];o[e]=o[n],o[n]=i,t(o,l,n,r),yield;}}o.sort=e,o.iterableSort=i;}(o$p||(o$p={}));var t$w=o$p;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const e$o=1.5,l$G=1.1;class n$G{constructor(h){this.data=[],this._length=0,this._allocator=void 0,this._deallocator=()=>null,this._shrink=()=>{},this._hint=new w$a,h&&(h.initialSize&&(this.data=new Array(h.initialSize)),h.allocator&&(this._allocator=h.allocator),void 0!==h.deallocator&&(this._deallocator=h.deallocator),h.shrink&&(this._shrink=()=>r$m(this)));}toArray(){return this.data.slice(0,this.length)}getItemAt(t){if(!(t<0||t>=this._length))return this.data[t]}get length(){return this._length}set length(t){if(t>this._length){if(this._allocator){for(;this._length<t;)this.data[this._length++]=this._allocator(this.data[this._length]);return}this._length=t;}else {if(this._deallocator)for(let h=t;h<this._length;++h)this.data[h]=this._deallocator(this.data[h]);this._length=t,this._shrink();}}clear(){this.length=0;}prune(){this.clear(),this.data=[];}push(t){this.data[this._length++]=t;}pushArray(t,h=t.length){for(let i=0;i<h;i++)this.data[this._length++]=t[i];}fill(t,h){for(let i=0;i<h;i++)this.data[this._length++]=t;}pushNew(){this._allocator&&(this.data[this.length]=this._allocator(this.data[this.length]));const t=this.data[this._length];return ++this._length,t}unshift(t){this.data.unshift(t),this._length++,r$m(this);}pop(){if(0===this.length)return;const t=this.data[this.length-1];return this.length=this.length-1,this._shrink(),t}remove(t){const i=b$c(this.data,t,this.length,this._hint);if(-1!==i)return this.data.splice(i,1),this.length=this.length-1,t}removeUnordered(t){const h=v$a(this.data,t,this.length,this._hint);return void 0!==h&&(this.length=this.length-1),this._shrink(),h}removeUnorderedIndex(t){if(!(t>=this.length||t<0))return this.swapElements(t,this.length-1),this.pop()}removeUnorderedMany(t,h=t.length,i){this.length=O$2(this.data,t,this.length,h,this._hint,i),this._shrink();}front(){if(0!==this.length)return this.data[0]}back(){if(0!==this.length)return this.data[this.length-1]}swapElements(t,h){t>=this.length||h>=this.length||t===h||([this.data[t],this.data[h]]=[this.data[h],this.data[t]]);}sort(t){t$w.sort(this.data,0,this.length,t);}iterableSort(t){return t$w.iterableSort(this.data,0,this.length,t)}some(t,h){for(let i=0;i<this.length;++i)if(t.call(h,this.data[i],i,this.data))return !0;return !1}filterInPlace(t,h){let i=0;for(let s=0;s<this._length;++s){const a=this.data[s];t.call(h,a,s,this.data)&&(this.data[s]=this.data[i],this.data[i]=a,i++);}if(this._deallocator)for(let s=i;s<this._length;s++)this.data[s]=this._deallocator(this.data[s]);return this._length=i,this._shrink(),this}forAll(t,h){const i=this.length,s=this.data;for(let a=0;a<i;++a)t.call(h,s[a],a,s);}map(t,h){const i=new Array(this.length);for(let s=0;s<this.length;++s)i[s]=t.call(h,this.data[s],s,this.data);return i}reduce(t,h){let i=h;for(let s=0;s<this.length;++s)i=t(i,this.data[s],s,this.data);return i}has(t){const h=this.length,i=this.data;for(let s=0;s<h;++s)if(i[s]===t)return !0;return !1}}function r$m(t){t.data.length>e$o*t.length&&(t.data.length=Math.floor(t.length*l$G));}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function t$v(e){return {setTimeout:(t,o)=>{const r=e.setTimeout(t,o);return {remove:()=>e.clearTimeout(r)}}}}var o$o=t$v(_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function s$t(t){return Promise.all(t)}function l$F(t){return new Promise(((n,e)=>{try{t(n,e);}catch(r){Promise.resolve().then((()=>e(r)));}}))}function m$x(t="Aborted"){return new s$x("AbortError",t)}function h$u(){return new AbortController}function a$I(t){if(b$b(t))throw m$x()}function p$_(n){return r$A(n)?"aborted"in n?n:n.signal:n}function b$b(n){const e=p$_(n);return r$A(e)&&e.aborted}function w$9(t){if(g$g(t))throw t}function j$f(t){if(!g$g(t))throw t}function v$9(t,e){const r=p$_(t);if(!t$M(r)){if(!r.aborted)return t$E(r,"abort",(()=>e()));e();}}function P$7(t,e){const r=p$_(t);if(!t$M(r))return a$I(r),t$E(r,"abort",(()=>e(m$x())))}function d$y(t,r){const o=p$_(r);return t$M(o)?t:new Promise(((n,o)=>{let i=v$9(r,(()=>o(m$x())));const u=()=>i=s$G(i);t.then(u,u),t.then(n,o);}))}function g$g(t){return t&&"AbortError"===t.name}function y$l(t){return t.catch((t=>{if(!g$g(t))throw t}))}function E$3(){let t=null;const n=new Promise(((n,e)=>{t={promise:void 0,resolve:n,reject:e};}));return t.promise=n,t}function A$8(t){if(!t)return;if("function"!=typeof t.forEach){const n=Object.keys(t);return A$8(n.map((n=>t[n]))).then((t=>{const e={};return n.forEach(((n,r)=>e[n]=t[r])),e}))}const n=t;return l$F((t=>{const e=[];let r=n.length;0===r&&t(e),n.forEach((n=>{const o={promise:n||Promise.resolve(n)};e.push(o),o.promise.then((t=>{o.value=t;})).catch((t=>{o.error=t;})).then((()=>{--r,0===r&&t(e);}));}));}))}function L$6(t){return Promise.reject(t)}function x$d(t){return Promise.resolve(t)}function C$7(t,n,e){const r=h$u();return v$9(e,(()=>r.abort())),new Promise(((e,o)=>{let i=setTimeout((()=>{i=0,e(n);}),t);v$9(r,(()=>{i&&(clearTimeout(i),o(m$x()));}));}))}function U$2(t){return t&&"function"==typeof t.then}function q$4(t){return t&&"object"==typeof t&&"then"in t&&"function"==typeof t.then?t:Promise.resolve(t)}function z$5(t,n=-1){let e,o,i,u,c=null;const s=(...f)=>{if(e){o=f,u&&u.reject(m$x()),u=E$3();const t=m$F(u.promise);if(c){const t=c;c=null,t.abort();}return t}if(i=u||E$3(),u=null,n>0){const r=h$u();e=q$4(t(...f,r.signal));const o=e;C$7(n).then((()=>{e===o&&(u?r.abort():c=r);}));}else e=1,e=q$4(t(...f));const l=()=>{const t=o;o=i=e=c=null,null!=t&&s(...t);},a=e,p=i;return a.then(l,l),a.then(p.resolve,p.reject),m$F(p.promise)};return s}function B$4(){let t,n;const e=new Promise(((e,r)=>{t=e,n=r;})),r=n=>{t(n);};return r.resolve=n=>t(n),r.reject=t=>n(t),r.timeout=(t,n)=>o$o.setTimeout((()=>r.reject(n)),t),r.promise=e,r}function F$4(t){let n=h$u();const e=t(n.signal);let r={promise:e,finished:!1,abort:()=>{n&&(n.abort(),n=null);}};const o=()=>{r&&(r.finished=!0,r=null),n=null;};return e.then(o,o),r}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class i$S{constructor(e){this.callback=e,this.isActive=!0;}remove(){this.isActive=!1;}}let m$w=0;const p$Z={time:0,deltaTime:0,elapsedFrameTime:0,frameDuration:0},u$E=["prepare","preRender","render","postRender","update"],f$p=[],h$t=new n$G;const w$8={frameTasks:h$t,willDispatch:!1,clearFrameTasks:T$5,dispatch:_$4,executeFrameTasks:x$c};function k$8(e){const r=new i$S(e);return f$p.push(r),w$8.willDispatch||(w$8.willDispatch=!0,f$q(_$4)),r}function T$5(e=!1){h$t.forAll((e=>{e.removed=!0;})),e&&g$f();}function x$c(e){const t=e-m$w;m$w=e;const r=1e3/60,s=Math.max(0,t-r);for(let n=0;n<u$E.length;n++){const o=performance.now(),a=u$E[n];h$t.forAll((o=>{var c;if(o.paused||o.removed)return;0===n&&o.ticks++;o.phases[a]&&(p$Z.time=e,p$Z.deltaTime=0===o.ticks?0:t,p$Z.elapsedFrameTime=performance.now()-e,p$Z.frameDuration=r-s,null==(c=o.phases[a])||c.call(o,p$Z));})),y$k[n].record(performance.now()-o);}g$f(),M$9.record(performance.now()-e);}const D$5=new n$G;function g$f(){h$t.forAll((e=>{e.removed&&D$5.push(e);})),h$t.removeUnorderedMany(D$5.data,D$5.length),D$5.clear();}function _$4(){for(;f$p.length;){const t=m$F(f$p.shift());t.isActive&&t.callback();}w$8.willDispatch=!1;}function b$a(e=1,r){const s=B$4(),c=()=>{b$b(r)?s.reject(m$x()):0===e?s():(--e,f$q((()=>c())));};return c(),s.promise}const y$k=u$E.map((e=>new e$p(e))),M$9=new e$p("total");

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class s$s{constructor(s){this.notify=s,this._accessed=new Set,this._handles=[];}destroy(){this._accessed.clear(),this.clear();}onObservableAccessed(s){this._accessed.add(s);}onTrackingEnd(){for(const s of this._accessed)this._handles.push(s.observe(this));this._accessed.clear();}clear(){for(const s of this._handles)s.remove();this._handles.length=0;}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const e$n={runImmediately:!1};function r$l(r,u,l=e$n){let o=new s$s(m),i=null,c=!1;function m(){if(!o||c)return;const t=i;o.clear(),c=!0,i=a$J(o,r),c=!1,u(i,t);}function f(){o&&(o.destroy(),o=null,i=null);}return c=!0,i=a$J(o,r),c=!1,l.runImmediately&&u(i,i),{remove:f}}function o$n(e,r){let u=new s$s(o),l=null;function o(){r(l,c);}function i(){u&&(u.destroy(),u=null),l=null;}function c(){return u?(u.clear(),l=a$J(u,e),l):null}return c(),{remove:i}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class a$H{constructor(){this.uid=0,this.target=null,this.path=null,this.oldValue=null,this.callback=null,this.getValue=null,this.removed=!1,this.propertyPath=null;}acquire(e,o,r,l,n){this.target=e,this.path=o,this.oldValue=r,this.callback=l,this.getValue=n,this.propertyPath=l$M(o),this.uid=++a$H.uid,this.removed=!1;}release(){this.target=this.path=this.propertyPath=this.callback=this.oldValue=null,this.uid=++a$H.uid,this.removed=!0;}}a$H.pool=new t$A(a$H),a$H.uid=0;const d$x=new o$q,h$s=new Set;let f$o,m$v=d$x.acquire();function p$Y(e){h$s.has(e)?m$v.splice(m$v.indexOf(e),1):h$s.add(e),m$v.push(e),f$o||(f$o=k$8(j$e));}function g$e(e){if(e.removed)return;const{callback:t,path:o,oldValue:r,target:l}=e,n=e.getValue();_$3(r,n)&&(e.oldValue=n,t.call(l,n,r,o,l));}function _$3(t,o){return !l$P(t,o)}function V$1(e){for(let t=0;t<m$v.length;t++){const o=m$v[t];o.target===e&&(o.removed=!0);}}function j$e(){let e=10;for(;f$o&&e--;){f$o=null;const e=m$v;m$v=d$x.acquire(),h$s.clear();const t=d$x.acquire();for(const o of e){const e=o.uid;g$e(o),e===o.uid&&o.removed&&t.push(o);}for(let o=0;o<m$v.length;o++){const e=m$v[o];e.removed&&(t.push(e),h$s.delete(e),m$v.splice(o,1),o-=1);}for(let o=0;o<t.length;o++)a$H.pool.release(t[o]);d$x.release(e),d$x.release(t),y$j.forEach((e=>e()));}}const y$j=new Set;function k$7(e,t,n){let s=y$s(e,t,n,((e,t,o)=>{let n,i,c=o$n((()=>o$E(e,t)),((r,l)=>{e.__accessor__.destroyed||n&&n.uid!==i?s.remove():(n||(n=a$H.pool.acquire(e,t,r,o,l),i=n.uid),p$Y(n));}));return {remove:h$z((function(){c.remove(),n&&(n.uid!==i||n.removed||(n.removed=!0,p$Y(n)),n=null),s=c=null;}))}}));return s}function q$3(e,t,r){const n=y$s(e,t,r,((e,t,o)=>{let r=!1;return r$l((()=>o$E(e,t)),((l,s)=>{e.__accessor__.destroyed?n.remove():r||(r=!0,_$3(s,l)&&o.call(e,l,s,t,e),r=!1);}))}));return n}function P$6(e,t,o,r=!1){return !e.__accessor__||e.__accessor__.destroyed?{remove(){}}:r?q$3(e,t,o):k$7(e,t,o)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function p$X(t){if(null==t)return {value:t};if(Array.isArray(t))return {type:[t[0]],value:null};switch(typeof t){case"object":return t.constructor&&t.constructor.__accessorMetadata__||t instanceof Date?{type:t.constructor,value:t}:t;case"boolean":return {type:Boolean,value:t};case"string":return {type:String,value:t};case"number":return {type:Number,value:t};case"function":return {type:t,value:null};default:return}}class u$D{constructor(...t){if(this.constructor===u$D)throw new Error("[accessor] cannot instantiate Accessor. This can be fixed by creating a subclass of Accessor");Object.defineProperty(this,"__accessor__",{enumerable:!1,value:new y$n(this)}),t.length>0&&this.normalizeCtorArgs&&(this.__accessor__.ctorArgs=this.normalizeCtorArgs.apply(this,t));}static createSubclass(t={}){if(Array.isArray(t))throw new Error("Multi-inheritance unsupported since 4.16");const{properties:r,declaredClass:s,constructor:c}=t;delete t.declaredClass,delete t.properties,delete t.constructor;const n=this;class a extends n{constructor(...t){super(...t),this.inherited=null,c&&c.apply(this,t);}}n$Q(a.prototype);for(const e in t){const r=t[e];a.prototype[e]="function"==typeof r?function(...t){const s=this.inherited;let o;this.inherited=function(...t){if(n.prototype[e])return n.prototype[e].apply(this,t)};try{o=r.apply(this,t);}catch(c){throw this.inherited=s,c}return this.inherited=s,o}:t[e];}for(const e in r){const t=p$X(r[e]);y$r(t)(a.prototype,e);}return i$X(s)(a)}postscript(t){const r=this.__accessor__,e=r.ctorArgs||t;r.initialize(),e&&(this.set(e),r.ctorArgs=null),r.constructed(),this.initialize();}initialize(){}destroy(){this.destroyed||(V$1(this),this.__accessor__.destroy());}get initialized(){return this.__accessor__&&this.__accessor__.initialized||!1}get constructed(){return this.__accessor__&&2===this.__accessor__.lifecycle||!1}get destroyed(){return this.__accessor__&&this.__accessor__.destroyed||!1}commitProperty(t){this.get(t);}get(t){return u$L(this,t)}hasOwnProperty(t){return this.__accessor__?this.__accessor__.has(t):Object.prototype.hasOwnProperty.call(this,t)}isInstanceOf(r){return t$J(n$T.getLogger(this.declaredClass),"isInstanceOf",{replacement:"Use instanceof directly",version:"4.16"}),this instanceof r}keys(){return this.__accessor__?this.__accessor__.keys():[]}set(t,r){return t$K(this,t,r),this}watch(t,r,e){return P$6(this,t,r,e)}_clearOverride(t){return this.__accessor__.clearOverride(t)}_override(t,r){return this.__accessor__.override(t,r)}_isOverridden(t){return this.__accessor__.isOverridden(t)}notifyChange(t){this.__accessor__.propertyInvalidated(t);}_get(t){return this.__accessor__.internalGet(t)}_set(t,r){return this.__accessor__.internalSet(t,r),this}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class i$R{constructor(){this._emitter=new i$R.EventEmitter(this);}emit(t,e){return this._emitter.emit(t,e)}on(t,e){return this._emitter.on(t,e)}once(t,e){return this._emitter.once(t,e)}hasEventListener(t){return this._emitter.hasEventListener(t)}}!function(n){class o{constructor(t=null){this.target=t,this._listenersMap=null;}clear(){this._listenersMap&&this._listenersMap.clear();}emit(t,e){const s=this._listenersMap&&this._listenersMap.get(t);if(!s)return !1;const r=this.target||this;return [...s].forEach((t=>{t.call(r,e);})),s.length>0}on(t,s){if(Array.isArray(t)){const r=t.map((t=>this.on(t,s)));return r$x(r)}if(t.indexOf(",")>-1)throw new TypeError("Evented.on() with a comma delimited string of event types is not supported");this._listenersMap||(this._listenersMap=new Map);const r=this._listenersMap.get(t)||[];return r.push(s),this._listenersMap.set(t,r),{remove:()=>{const e=this._listenersMap&&this._listenersMap.get(t)||[],r=e.indexOf(s);r>=0&&e.splice(r,1);}}}once(t,e){const s=this.on(t,(t=>{s.remove(),e.call(null,t);}));return s}hasEventListener(t){const e=this._listenersMap&&this._listenersMap.get(t);return null!=e&&e.length>0}}n.EventEmitter=o,n.EventedMixin=e=>{let r=class extends e{constructor(){super(...arguments),this._emitter=new o;}destroy(){this._emitter.clear();}emit(t,e){return this._emitter.emit(t,e)}on(t,e){return this._emitter.on(t,e)}once(t,e){return this._emitter.once(t,e)}hasEventListener(t){return this._emitter.hasEventListener(t)}};return r=e$u([i$X("esri.core.Evented")],r),r};let h=class extends u$D{constructor(){super(...arguments),this._emitter=new i$R.EventEmitter(this);}emit(t,e){return this._emitter.emit(t,e)}on(t,e){return this._emitter.on(t,e)}once(t,e){return this._emitter.once(t,e)}hasEventListener(t){return this._emitter.hasEventListener(t)}};h=e$u([i$X("esri.core.Evented")],h),n.EventedAccessor=h;}(i$R||(i$R={}));var n$F=i$R;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class r$k{constructor(){this._observers=new Set;}observe(r){return new e$s(this._observers.add(r),r)}notify(){const e=this._observers,r=this._observers.size,s=new Array(r);let o=0;for(const t of e)s[o++]=t;for(let t=0;t<r;t++)s[t].notify();}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var m$u;class u$C{constructor(){this.target=null,this.cancellable=!1,this.defaultPrevented=!1,this.item=void 0,this.type=void 0;}preventDefault(){this.cancellable&&(this.defaultPrevented=!0);}reset(e){this.defaultPrevented=!1,this.item=e;}}const g$d=new e$t(u$C,void 0,(e=>{e.item=null,e.target=null,e.defaultPrevented=!1,e.cancellable=!1;})),p$W=()=>{};function b$9(e){return e?e instanceof B$3?e.toArray():e.length?Array.prototype.slice.apply(e):[]:[]}function d$w(e){if(e&&e.length)return e[0]}function v$8(e,t,s,i){const r=Math.min(e.length-s,t.length-i);let n=0;for(;n<r&&e[s+n]===t[i+n];)n++;return n}function y$i(e,t,s,i){t&&t.forEach(((t,r,n)=>{e.push(t),y$i(e,s.call(i,t,r,n),s,i);}));}const C$6=new Set,A$7=new Set,x$b=new Set,E$2=new Map;let j$d=0,B$3=m$u=class extends n$F.EventedAccessor{constructor(e){super(e),this._chgListeners=[],this._notifications=null,this._timer=null,this._observable=new r$k,this.length=0,this._items=[],Object.defineProperty(this,"uid",{value:j$d++});}static isCollection(e){return null!=e&&e instanceof m$u}normalizeCtorArgs(e){return e?Array.isArray(e)||e instanceof m$u?{items:e}:e:{}}*[Symbol.iterator](){yield*this.items;}get items(){return i$T(this._observable),this._items}set items(e){this._emitBeforeChanges(1)||(this._splice(0,this.length,...b$9(e)),this._emitAfterChanges(1));}hasEventListener(e){return "change"===e?this._chgListeners.length>0:this._emitter.hasEventListener(e)}on(e,t){if("change"===e){const e=this._chgListeners,s={removed:!1,callback:t};return e.push(s),this._notifications&&this._notifications.push({listeners:e.slice(),items:this._items.slice(),changes:[]}),{remove(){this.remove=p$W,s.removed=!0,e.splice(e.indexOf(s),1);}}}return this._emitter.on(e,t)}once(e,t){const s=this.on(e,t);return {remove(){s.remove();}}}add(e,t){if(i$T(this._observable),this._emitBeforeChanges(1))return this;const s=this.getNextIndex(null!=t?t:null);return this._splice(s,0,e),this._emitAfterChanges(1),this}addMany(e,t=this._items.length){if(i$T(this._observable),!e||!e.length)return this;if(this._emitBeforeChanges(1))return this;const s=this.getNextIndex(t);return this._splice(s,0,...b$9(e)),this._emitAfterChanges(1),this}removeAll(){if(i$T(this._observable),!this.length||this._emitBeforeChanges(2))return [];const e=this._splice(0,this.length)||[];return this._emitAfterChanges(2),e}clone(){return i$T(this._observable),this._createNewInstance({items:this._items.map(y$v)})}concat(...e){i$T(this._observable);const t=e.map(b$9);return this._createNewInstance({items:this._items.concat(...t)})}drain(e,t){if(i$T(this._observable),!this.length||this._emitBeforeChanges(2))return;const i=m$F(this._splice(0,this.length)),r=i.length;for(let s=0;s<r;s++)e.call(t,i[s],s,i);this._emitAfterChanges(2);}every(e,t){return i$T(this._observable),this._items.every(e,t)}filter(e,t){let s;return i$T(this._observable),s=2===arguments.length?this._items.filter(e,t):this._items.filter(e),this._createNewInstance({items:s})}find(e,t){return i$T(this._observable),this._items.find(e,t)}findIndex(e,t){return i$T(this._observable),this._items.findIndex(e,t)}flatten(e,t){i$T(this._observable);const s=[];return y$i(s,this,e,t),new m$u(s)}forEach(e,t){return i$T(this._observable),this._items.forEach(e,t)}getItemAt(e){return i$T(this._observable),this._items[e]}getNextIndex(e){i$T(this._observable);const t=this.length;return (e=null==e?t:e)<0?e=0:e>t&&(e=t),e}includes(e,t=0){return i$T(this._observable),this._items.includes(e,t)}indexOf(e,t=0){return i$T(this._observable),this._items.indexOf(e,t)}join(e=","){return i$T(this._observable),this._items.join(e)}lastIndexOf(e,t=this.length-1){return i$T(this._observable),this._items.lastIndexOf(e,t)}map(e,t){i$T(this._observable);const s=this._items.map(e,t);return new m$u({items:s})}reorder(e,t=this.length-1){i$T(this._observable);const s=this.indexOf(e);if(-1!==s){if(t<0?t=0:t>=this.length&&(t=this.length-1),s!==t){if(this._emitBeforeChanges(4))return e;this._splice(s,1),this._splice(t,0,e),this._emitAfterChanges(4);}return e}}pop(){if(i$T(this._observable),!this.length||this._emitBeforeChanges(2))return;const e=d$w(this._splice(this.length-1,1));return this._emitAfterChanges(2),e}push(...e){return i$T(this._observable),this._emitBeforeChanges(1)||(this._splice(this.length,0,...e),this._emitAfterChanges(1)),this.length}reduce(e,t){i$T(this._observable);const s=this._items;return 2===arguments.length?s.reduce(e,t):s.reduce(e)}reduceRight(e,t){i$T(this._observable);const s=this._items;return 2===arguments.length?s.reduceRight(e,t):s.reduceRight(e)}remove(e){return i$T(this._observable),this.removeAt(this.indexOf(e))}removeAt(e){if(i$T(this._observable),e<0||e>=this.length||this._emitBeforeChanges(2))return;const t=d$w(this._splice(e,1));return this._emitAfterChanges(2),t}removeMany(e){if(i$T(this._observable),!e||!e.length||this._emitBeforeChanges(2))return [];const t=e instanceof m$u?e.toArray():e,s=this._items,i=[],r=t.length;for(let n=0;n<r;n++){const e=t[n],r=s.indexOf(e);if(r>-1){const e=1+v$8(t,s,n+1,r+1),h=this._splice(r,e);h&&h.length>0&&i.push.apply(i,h),n+=e-1;}}return this._emitAfterChanges(2),i}reverse(){if(i$T(this._observable),this._emitBeforeChanges(4))return this;const e=this._splice(0,this.length);return e&&(e.reverse(),this._splice(0,0,...e)),this._emitAfterChanges(4),this}shift(){if(i$T(this._observable),!this.length||this._emitBeforeChanges(2))return;const e=d$w(this._splice(0,1));return this._emitAfterChanges(2),e}slice(e=0,t=this.length){return i$T(this._observable),this._createNewInstance({items:this._items.slice(e,t)})}some(e,t){return i$T(this._observable),this._items.some(e,t)}sort(e){if(i$T(this._observable),!this.length||this._emitBeforeChanges(4))return this;const t=m$F(this._splice(0,this.length));return arguments.length?t.sort(e):t.sort(),this._splice(0,0,...t),this._emitAfterChanges(4),this}splice(e,t,...s){i$T(this._observable);const i=(t?2:0)|(s.length?1:0);if(this._emitBeforeChanges(i))return [];const r=this._splice(e,t,...s)||[];return this._emitAfterChanges(i),r}toArray(){return i$T(this._observable),this._items.slice()}toJSON(){return i$T(this._observable),this.toArray()}toLocaleString(){return i$T(this._observable),this._items.toLocaleString()}toString(){return i$T(this._observable),this._items.toString()}unshift(...e){return i$T(this._observable),!e.length||this._emitBeforeChanges(1)||(this._splice(0,0,...e),this._emitAfterChanges(1)),this.length}_createNewInstance(e){return new this.constructor(e)}_splice(e,t,...s){const i=this._items,r=this.constructor.prototype.itemType;let n,h;if(!this._notifications&&this.hasEventListener("change")&&(this._notifications=[{listeners:this._chgListeners.slice(),items:this._items.slice(),changes:[]}],this._timer&&this._timer.remove(),this._timer=k$8((()=>this._dispatchChange()))),t){if(h=i.splice(e,t),this.hasEventListener("before-remove")){const t=g$d.acquire();t.target=this,t.cancellable=!0;for(let s=0,r=h.length;s<r;s++)n=h[s],t.reset(n),this.emit("before-remove",t),t.defaultPrevented&&(h.splice(s,1),i.splice(e,0,n),e+=1,s-=1,r-=1);g$d.release(t);}if(this.length=this._items.length,this.hasEventListener("after-remove")){const e=g$d.acquire();e.target=this,e.cancellable=!1;const t=h.length;for(let s=0;s<t;s++)e.reset(h[s]),this.emit("after-remove",e);g$d.release(e);}}if(s&&s.length){if(r){const e=[];for(const t of s){const s=r.ensureType(t);null==s&&null!=t||e.push(s);}s=e;}const t=this.hasEventListener("before-add"),n=this.hasEventListener("after-add"),h=e===this.length;if(t||n){const r=g$d.acquire();r.target=this,r.cancellable=!0;const o=g$d.acquire();o.target=this,o.cancellable=!1;for(const l of s)t?(r.reset(l),this.emit("before-add",r),r.defaultPrevented||(h?i.push(l):i.splice(e++,0,l),this._set("length",i.length),n&&(o.reset(l),this.emit("after-add",o)))):(h?i.push(l):i.splice(e++,0,l),this._set("length",i.length),o.reset(l),this.emit("after-add",o));g$d.release(o),g$d.release(r);}else {if(h)for(const e of s)i.push(e);else i.splice(e,0,...s);this._set("length",i.length);}}return (s&&s.length||h&&h.length)&&this._notifyChangeEvent(s,h),h}_emitBeforeChanges(e){let t=!1;if(this.hasEventListener("before-changes")){const s=g$d.acquire();s.target=this,s.cancellable=!0,s.type=e,this.emit("before-changes",s),t=s.defaultPrevented,g$d.release(s);}return t}_emitAfterChanges(e){if(this.hasEventListener("after-changes")){const t=g$d.acquire();t.target=this,t.cancellable=!1,t.type=e,this.emit("after-changes",t),g$d.release(t);}this._observable.notify();}_notifyChangeEvent(e,t){this.hasEventListener("change")&&this._notifications&&this._notifications[this._notifications.length-1].changes.push({added:e,removed:t});}_dispatchChange(){if(this._timer&&(this._timer.remove(),this._timer=null),!this._notifications)return;const e=this._notifications;this._notifications=null;for(const t of e){const e=t.changes;C$6.clear(),A$7.clear(),x$b.clear();for(const{added:t,removed:o}of e){if(t)if(0===x$b.size&&0===A$7.size)for(const e of t)C$6.add(e);else for(const e of t)A$7.has(e)?(x$b.add(e),A$7.delete(e)):x$b.has(e)||C$6.add(e);if(o)if(0===x$b.size&&0===C$6.size)for(const e of o)A$7.add(e);else for(const e of o)C$6.has(e)?C$6.delete(e):(x$b.delete(e),A$7.add(e));}const s=o$q.acquire();C$6.forEach((e=>{s.push(e);}));const i=o$q.acquire();A$7.forEach((e=>{i.push(e);}));const r=this._items,n=t.items,h=o$q.acquire();if(x$b.forEach((e=>{n.indexOf(e)!==r.indexOf(e)&&h.push(e);})),t.listeners&&(s.length||i.length||h.length)){const e={target:this,added:s,removed:i,moved:h},r=t.listeners.length;for(let s=0;s<r;s++){const i=t.listeners[s];i.removed||i.callback.call(this,e);}}o$q.release(s),o$q.release(i),o$q.release(h);}C$6.clear(),A$7.clear(),x$b.clear();}};B$3.ofType=t=>{if(!t)return m$u;if(E$2.has(t))return E$2.get(t);let s=null;if("function"==typeof t)s=t.prototype.declaredClass;else if(t.base)s=t.base.prototype.declaredClass;else for(const e in t.typeMap){const i=t.typeMap[e].prototype.declaredClass;s?s+=` | ${i}`:s=i;}let n=class extends m$u{};n=e$u([i$X(`esri.core.Collection<${s}>`)],n);const o={Type:t,ensureType:"function"==typeof t?d$E(t):k$a(t)};return Object.defineProperty(n.prototype,"itemType",{value:o}),E$2.set(t,n),n},e$u([y$r()],B$3.prototype,"length",void 0),e$u([y$r()],B$3.prototype,"items",null),B$3=m$u=e$u([i$X("esri.core.Collection")],B$3);var L$5=B$3;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let h$r=class extends u$D{constructor(r){super(r),this._groups=new Map;}destroy(){this.removeAll();}get size(){let r=0;return this._groups.forEach((e=>{r+=e.length;})),r}add(r,e){if(!this._isHandle(r)&&!Array.isArray(r)&&!L$5.isCollection(r))return this;const s=this._getOrCreateGroup(e);return Array.isArray(r)||L$5.isCollection(r)?r.forEach((r=>this._isHandle(r)&&s.push(r))):s.push(r),this.notifyChange("size"),this}forEach(r,e){if("function"==typeof r)this._groups.forEach((e=>e.forEach(r)));else {const s=this._getGroup(r);s&&e&&s.forEach(e);}}has(r){return this._groups.has(this._ensureGroupKey(r))}remove(r){if(Array.isArray(r)||L$5.isCollection(r))return r.forEach(this.remove,this),this;if(!this.has(r))return this;const e=this._getGroup(r);for(let s=0;s<e.length;s++)e[s].remove();return this._deleteGroup(r),this.notifyChange("size"),this}removeAll(){return this._groups.forEach((r=>{for(let e=0;e<r.length;e++)r[e].remove();})),this._groups.clear(),this.notifyChange("size"),this}_isHandle(r){return r&&!!r.remove}_getOrCreateGroup(r){if(this.has(r))return this._getGroup(r);const e=[];return this._groups.set(this._ensureGroupKey(r),e),e}_getGroup(r){return m$F(this._groups.get(this._ensureGroupKey(r)))}_deleteGroup(r){return this._groups.delete(this._ensureGroupKey(r))}_ensureGroupKey(r){return r||"_default_"}};e$u([y$r({readOnly:!0})],h$r.prototype,"size",null),h$r=e$u([i$X("esri.core.Handles")],h$r);var u$B=h$r;

// geoenrichment
/**
 * IntersectionObserver singleton used in order not to create observer in every TemplatedWidget
 */
let _intersectionObserver;
// may not be supported (case: in workers)
if (_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.g.IntersectionObserver) {
  _intersectionObserver = new IntersectionObserver((entries) => {
    for (const entry of entries) {
      if (entry.isIntersecting) {
        const resolve = _resolverMap.get(entry.target).resolve;
        _resolverMap.delete(entry.target);
        _intersectionObserver.unobserve(entry.target);
        resolve();
      }
    }
  }, { root: document.body });
}
const _resolverMap = new WeakMap();
function onDisplayed(node) {
  const promise = new Promise((resolve, reject) => {
    _intersectionObserver === null || _intersectionObserver === void 0 ? void 0 : _intersectionObserver.observe(node);
    const remove = () => {
      _resolverMap.delete(node);
      _intersectionObserver === null || _intersectionObserver === void 0 ? void 0 : _intersectionObserver.unobserve(node);
      reject("removed");
    };
    _resolverMap.set(node, { resolve, remove });
  });
  promise.__old_then = promise.then;
  promise.then = (onfulfilled) => promise.__old_then(onfulfilled).catch((reason) => {
    if (reason !== "removed") {
      throw reason;
    }
  });
  return {
    promise,
    remove: () => {
      const instance = _resolverMap.get(node);
      instance && instance.remove();
    }
  };
}

/**
 * Works with events.
 */
class Evented {
  constructor() {
    //--------------------------------------------------------------------------
    //
    //  Properties
    //
    //--------------------------------------------------------------------------
    this._emitter = new Evented.EventEmitter();
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Emits an event on the instance. This method should only be used when creating subclasses of this class.
   */
  emit(type, event) {
    return this._emitter.emit(type, event);
  }
  /**
   * Registers an event handler on the instance. Call this method to hook an
   * event with a listener.
   */
  on(type, listener) {
    return this._emitter.on(type, listener);
  }
  once(type, listener) {
    return this._emitter.once(type, listener);
  }
  /**
   * Indicates whether there is an event listener on the instance that matches
   * the provided event name.
   */
  hasEventListener(type) {
    return this._emitter.hasEventListener(type);
  }
}
function _handlesGroup(handles) {
  return _makeHandle(() => handles.forEach((handle) => handle && handle.remove()));
}
function _makeHandle(remove) {
  return {
    remove: () => {
      if (remove) {
        remove();
        remove = null;
      }
    }
  };
}
(function (Evented) {
  class EventEmitter {
    clear() {
      this._listenersMap && this._listenersMap.clear();
    }
    emit(type, event) {
      const listeners = this._listenersMap && this._listenersMap.get(type);
      if (!listeners) {
        return false;
      }
      // slice the array to handle listeners removing themselves
      listeners.slice().forEach((listener) => {
        listener.call(null, event);
      });
      return listeners.length > 0;
    }
    on(type, listener) {
      if (Array.isArray(type)) {
        const handles = type.map((oneType) => this.on(oneType, listener));
        return _handlesGroup(handles);
      }
      if (type.indexOf(",") > -1) {
        throw new TypeError("Evented.on() with a comma delimited string of event types is not supported");
      }
      if (!this._listenersMap) {
        this._listenersMap = new Map();
      }
      const listeners = this._listenersMap.get(type) || [];
      listeners.push(listener);
      this._listenersMap.set(type, listeners);
      return {
        remove: () => {
          const listeners = (this._listenersMap && this._listenersMap.get(type)) || [];
          const index = listeners.indexOf(listener);
          if (index >= 0) {
            listeners.splice(listeners.indexOf(listener), 1);
          }
        }
      };
    }
    once(type, listener) {
      let handle;
      handle = this.on(type, (event) => {
        handle.remove();
        listener.call(null, event);
      });
      return handle;
    }
    hasEventListener(type) {
      const listeners = this._listenersMap && this._listenersMap.get(type);
      return listeners != null && listeners.length > 0;
    }
  }
  Evented.EventEmitter = EventEmitter;
  let EventedAccessor = class EventedAccessor extends u$D {
    constructor() {
      super(...arguments);
      this._emitter = new Evented.EventEmitter();
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    emit(type, event) {
      return this._emitter.emit(type, event);
    }
    on(type, listener) {
      return this._emitter.on(type, listener);
    }
    once(type, listener) {
      return this._emitter.once(type, listener);
    }
    hasEventListener(type) {
      return this._emitter.hasEventListener(type);
    }
    //--------------------------------------------------------------------------
    //
    // Deprecate accessing properties via
    //
    //--------------------------------------------------------------------------
    /**
     * @deprecated Access properties directly.
     */
    get(name) {
      return super.get(name);
    }
    /**
     * @deprecated Access properties directly.
     */
    set(name, value) {
      return super.set(name, value);
    }
  };
  EventedAccessor = __decorate([
    i$X()
  ], EventedAccessor);
  Evented.EventedAccessor = EventedAccessor;
})(Evented || (Evented = {}));
const Evented$1 = Evented;

/**
 * This widget allows to migrate from dijit/_TemplatedWidget.js. Some interface and lifecycle are preserved.
 *
 * LIFECYCLE
 *
 * 1. buildRendering() => domNode is constructed from the template.
 * 2. setters are applied.
 * 3. postCreated() is called.
 */
const SPACES_RE = />\s+</g;
/**
 * Replaces NLS and provides references to nodes with "data-attach-point" specified.
 * Only one outer node is supported.
 * @example
 * <div>
 *    <div class="classA" data-attach-point="nodeA">Some text</div>
 * </div>
 */
function _parseTemplateString(widget) {
  const _widget = widget; // need to cast to any to access protected properties and assign arbitrary properties from the template
  let templateString = typeof _widget._templateString === "function" ? _widget._templateString() : _widget._templateString;
  // remove any formatting (not supported by TemplatedWidget.ts)
  templateString = templateString.replace(SPACES_RE, "><");
  const domNode = toDom(templateString);
  traverseChildren(domNode, (node) => {
    const dojoRef = node.getAttribute("data-dojo-attach-point");
    if (dojoRef) {
      console.error("Deprecated 'data-dojo-attach-point' is used. Replace with 'data-attach-point'.");
    }
    const ref = dojoRef || node.getAttribute("data-attach-point");
    if (ref) {
      _widget[ref] = node;
    }
  });
  return domNode;
}
function _byId(node) {
  return typeof node === "string" ? document.getElementById(node) : node;
}
let TemplatedWidget = class TemplatedWidget extends Evented$1.EventedAccessor {
  //--------------------------------------------------------------------------
  //
  // Lifecycle
  //
  //--------------------------------------------------------------------------
  /**
   * Constructs this widget.
   * @param params Parmeters to apply to the widget. For every parameter a corresponding setter will be triggered if implemented.
   * @param refNode Optional dom node to place the widget's dom node instead of or into. Can be specified by an HTML id. The behavior is controlled by _refNodeBehavoir attribute.
   */
  constructor(_params, refNode, position) {
    super(_params);
    /**
     * Specifies how to treat the refNode passed in the constructor.
     * - "replace" - the domNode will replace the ref node. It's the default behavior as in dijit/_TemplatedWidget.js.
     * - "add" - the domNode will be added to the ref node.
     */
    this._refNodeBehavoir = "replace"; // "add" | "replace"
    this._refNode = _byId(refNode);
    this._refPosition = position;
  }
  // override (see Accessor.js)
  // At this point all setters have been applied.
  initialize() {
    this.buildRendering();
    this.postCreate();
  }
  /**
   * Renders the widget's DOM and applies CSS classes.
   * Called after the setters are applied.
   */
  buildRendering() {
    this.domNode = this._templateString
      ? _parseTemplateString(this)
      : this._refNode && this._refNodeBehavoir === "replace"
        ? this._refNode
        : create("div"); // at this point render() method is called
    this.class && addClass(this.domNode, this.class);
    if (this._refNode && this.domNode !== this._refNode) {
      const id = this._refNode.id;
      place(this.domNode, this._refNode, this._refNodeBehavoir === "replace" ? "replace" : this._refPosition);
      // preserve id
      if (id && this._refNodeBehavoir === "replace") {
        this.domNode.id = id;
      }
    }
    // no need to hold these references
    this._refNode = null;
    this._refPosition = null;
  }
  /**
   * Called after the domNode is fully created from the template and setters are applied.
   */
  postCreate() { }
  /**
   * Must be called to dispose the widget.
   *
   * Note: this method is chained in Accessor.js, so there is no need to call super.destroy().
   */
  destroy() {
    destroy(this.domNode);
    this.domNode = null;
    this._internalHandles && this._internalHandles.destroy();
    this._onDisplayed && this._onDisplayed.remove();
  }
  //--------------------------------------------------------------------------
  //
  // Place in parent
  //
  //--------------------------------------------------------------------------
  /**
   * Method to place the domNode into another node.
   */
  placeAt(parentNode, position) {
    parentNode && place(this.domNode, _byId(parentNode), position);
    return this;
  }
  /**
   * Convenience method to own handles and other widget outside of the widget.
   */
  own(handleOrWidget) {
    const oneTimeHandle = {
      remove: () => {
        if (typeof handleOrWidget.destroy === "function") {
          if (handleOrWidget.destroyed) {
            console.error("WARNING: Multiple attempts to dispose resources!");
          }
          else {
            handleOrWidget.destroy();
          }
        }
        else {
          handleOrWidget.remove();
        }
        // prevent multiple remove
        oneTimeHandle.remove = () => {
          console.error("WARNING: Multiple attempts to dispose resources!");
        };
      }
    };
    this._internalHandles = this._internalHandles || new u$B();
    this._internalHandles.add(oneTimeHandle);
  }
  /**
   * Once element is visible on page promise gets resolved (really helpful if you need element's sizes or computed styles)
   */
  get onDisplayed() {
    if (!this._onDisplayed) {
      this._onDisplayed = onDisplayed(this.domNode);
    }
    return this._onDisplayed.promise;
  }
};
__decorate([
  y$r()
], TemplatedWidget.prototype, "class", void 0);
TemplatedWidget = __decorate([
  i$X()
], TemplatedWidget);

// esri4.core
function isCtrlKey(event) {
  return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("mac") ? event.metaKey : event.ctrlKey;
}

// geoenrichment.utils
const MOBILE_TOLERANCE = 10;
const LONG_PRESS_TIMEOUT = 500;
function addNoDragClickHandler(node, callback, params) {
  return isMobileDevice() ? _addMobile(node, callback, params) : _addPC(node, callback, params);
}
function _addPC(node, callback, params) {
  params = params || {};
  const tolerance = params.tolerance || 0;
  let moveH;
  let upH;
  const downH = on(node, "press", (event) => {
    upH && upH.remove();
    const sx = event.pageX;
    const sy = event.pageY;
    let moveHappened;
    moveH = on(document.body, "move", (event) => {
      if (event.shiftKey || isCtrlKey(event)) {
        return;
      }
      const cx = event.pageX;
      const cy = event.pageY;
      if (Math.abs(cx - sx) > tolerance || Math.abs(cy - sy) > tolerance) {
        moveHappened = true;
      }
    });
    upH = once(document.body, "release", (event) => {
      moveH.remove();
      const cx = event.pageX;
      const cy = event.pageY;
      if (!moveHappened && Math.abs(cx - sx) <= tolerance && Math.abs(cy - sy) <= tolerance) {
        callback(event);
      }
    });
  });
  return {
    remove() {
      moveH && moveH.remove();
      upH && upH.remove();
      downH && downH.remove();
    }
  };
}
function _addMobile(node, callback, params) {
  params = params || {};
  const tolerance = params.tolerance || MOBILE_TOLERANCE;
  let startH, endH, moveH, cancelH, longPressTimeoutH;
  function cleanup() {
    endH && endH.remove();
    moveH && moveH.remove();
    cancelH && cancelH.remove();
    clearTimeout(longPressTimeoutH);
  }
  startH = on(node, "touchstart", (eventStart) => {
    cleanup();
    let ignoreTouchEnd;
    function _canCallCallback(eventEnd) {
      const es = fixTouchEvent(eventStart);
      const ee = fixTouchEvent(eventEnd);
      return Math.abs(es.pageX - ee.pageX) < tolerance && Math.abs(es.pageY - ee.pageY) < tolerance;
    }
    if (params.detectLongPress) {
      let moveEvent;
      moveH = on(node, "touchmove", (event) => {
        moveEvent = event;
      });
      longPressTimeoutH = setTimeout(() => {
        if (_canCallCallback(moveEvent || eventStart)) {
          if (params.ignoreReleaseIfLongPressHappened) {
            ignoreTouchEnd = true;
          }
          params.longPressCallback(eventStart);
        }
      }, params.longPressTimeout || LONG_PRESS_TIMEOUT);
    }
    endH = once(node, "touchend", (eventEnd) => {
      !ignoreTouchEnd && _canCallCallback(eventEnd) && callback(eventEnd);
      cleanup();
    });
    cancelH = once(node, "touchcancel", cleanup);
  });
  return {
    remove: () => {
      startH && startH.remove();
      cleanup();
    }
  };
}

//--------------------------------------------------------------------------
//
//  Mixin
//
//--------------------------------------------------------------------------
function mixin(target = {}, ...sources) {
  for (const source of sources) {
    _mixin(target, source);
  }
  return target;
}
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function _mixin(dest, src, copyFunc) {
  let name, s;
  const empty = {};
  for (name in src) {
    // the (!(name in empty) || empty[name] !== s) condition avoids copying properties in "src"
    // inherited from Object.prototype.	 For example, if dest has a custom toString() method,
    // don't overwrite it with the toString() method that source inherited from Object.prototype
    s = src[name];
    const isPropNotInherited = !(name in empty) || empty[name] !== s;
    if (!(name in dest) || (dest[name] !== s && isPropNotInherited)) {
      dest[name] = copyFunc ? copyFunc(s) : s;
    }
  }
  return dest;
}

const XML_ENCODE_RE = /&|<|>/g, XML_ENCODE_RE_FULL = /&|<|>|"|'/g, XML_ENCODE_MAPPING = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&apos;"
};
//-----------------------------------------------------------------------------
//
// General replacement by mapping.
//
//-----------------------------------------------------------------------------
/**
 * Replaces tokens found by regexp with other tokens using the given mapping.
 * @param str             Converted string
 * @param re              Regular expression like /&|<|>|"|'/g.
 * @param mapping:        Tokens mapping like { "&": "&amp;", "<": "&lt;", ... }
 */
function replace(str, re, mapping) {
  return str == null ? "" : ("" + str).replace(re, (match) => mapping[match] || "");
}
//-----------------------------------------------------------------------------
//
// Encode/decode XML
//
//-----------------------------------------------------------------------------
/**
 * Encodes XML markup symbols with XML escape sequences:
 *
 * - '&' -> '\&amp;'
 * - '<' -> '\&lt;'
 * - '>' -> '\&gt;'
 * - etc.
 *
 * If maskQuotes is true, the double quote and single quote are also escaped.
 */
function encodeXML(str, maskQuotes) {
  return replace(str, maskQuotes ? XML_ENCODE_RE_FULL : XML_ENCODE_RE, XML_ENCODE_MAPPING);
}
const IS_URL_RE = /((www\.|http:\/\/|https:\/\/)[A-Za-z0-9_.\-~]+\.[A-Za-z0-9_.\-~/]+)|([A-Za-z0-9_.\-~]+\.com[A-Za-z0-9_.\-~/]*)/;
//Methods below are moved from esriAnalystX, but commented because not used.
/*
 /**
 * Creates a reg exp (escaping special symbols)
 * /
export function createRegExpEscapeSpecial(text: string, flags: string): RegExp {
  return new RegExp(escapeSpecial(text), flags);
}

export function escapeSpecial(text: string): string {
  return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}

export function getEmailValidationPattern(): string {
  return "\\s*[\\w\\W\\-]+@[\\w\\W\\-]+\\.[a-zA-Z]{2,4}(\\s*;\\s*[\\w\\W\\-]+@[\\w\\W\\-]+\\.[a-zA-Z]{2,4})*\\s*;*\\s*";
}
*/

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const t$u="4.19",o$m={request:(e,r)=>Promise.resolve().then(function () { return request; }).then((({default:t})=>{const o=e.options||{};return o.responseType="array-buffer",o.signal=null==r?void 0:r.signal,t(e.url,o)})).then((e=>({result:{data:e.data,ssl:e.ssl},transferList:[e.data]})))};let s$r;function n$E(e){s$r=e;}function i$Q(e){const t=s$r&&s$r.findCredential(e);return t&&t.token?bt(e,"token",t.token):e}(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("host-webworker")||((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("edge")||(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("trident"))&&console.warn("Deprecated browser - see http://esriurl.com/oldbrowser");

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const t$t=["elevation3d.arcgis.com","js.arcgis.com","jsdev.arcgis.com","jsqa.arcgis.com","static.arcgis.com"];function r$j(c){const r=M$a(c,!0);return r&&r.endsWith(".arcgis.com")&&!t$t.includes(r)&&!c.endsWith("/sharing/rest/generateToken")}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function t$s(t,i,s=!1,c){return new Promise(((d,a)=>{if(b$b(c))return void a(n$D());let m=()=>{v(),a(new Error(`Unable to load ${i}`));},l=()=>{const e=t;v(),d(e);},u=()=>{if(!t)return;const e=t;v(),e.src="",a(n$D());};const v=()=>{(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("esri-image-decode")||(t.removeEventListener("error",m),t.removeEventListener("load",l)),m=null,l=null,t=null,r$A(c)&&c.removeEventListener("abort",u),u=null,s&&URL.revokeObjectURL(i);};r$A(c)&&c.addEventListener("abort",u),(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("esri-image-decode")?t.decode().then(l,m):(t.addEventListener("error",m),t.addEventListener("load",l));}))}function n$D(){try{return new DOMException("Aborted","AbortError")}catch{const e=new Error;return e.name="AbortError",e}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
async function U$1(e,r){const o=G$6(e),n=F$5(e);n||o||(e=z$6(e));const c={url:e,requestOptions:{...e$I(r)}};let d=B$5(e);if(d){const e=await z$4(d,c);if(null!=e)return {data:e,getHeader:R$7,requestOptions:c.requestOptions,url:c.url};d.after||d.error||(d=null);}if(e=c.url,"image"===(r=c.requestOptions).responseType){if((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("host-webworker")||(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("host-node"))throw N$3("request:invalid-parameters",new Error("responseType 'image' is not supported in Web Workers or Node environment"),c)}else if(o)throw N$3("request:invalid-parameters",new Error("Data URLs are not supported for responseType = "+r.responseType),c);if("head"===r.method){if(r.body)throw N$3("request:invalid-parameters",new Error("body parameter cannot be set when method is 'head'"),c);if(o||n)throw N$3("request:invalid-parameters",new Error("data and blob URLs are not supported for method 'head'"),c)}if(await A$6(),P$5)return P$5.execute(e,r);const p=h$u();v$9(r,(()=>p.abort()));const m={controller:p,credential:null,credentialToken:null,fetchOptions:null,hasToken:!1,interceptor:d,params:c,redoRequest:!1,useIdentity:D$4.useIdentity,useProxy:!1,useSSL:!1,withCredentials:!1},h=await Q$1(m);return d&&d.after&&d.after(h),h}let P$5;const D$4=s$H.request,_$2="FormData" in _arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e,F$3=[499,498,403,401],I$3=["COM_0056","COM_0057","SB_0008"],M$8=[/\/arcgis\/tokens/i,/\/sharing(\/rest)?\/generatetoken/i,/\/rest\/info/i],R$7=()=>null;function H$2(e){if(F$5(e)||G$6(e))return;const t=M$a(e);t&&-1===U$1._corsServers.indexOf(t)&&U$1._corsServers.push(t);}function B$2(e){const t=M$a(e);return !t||t.endsWith(".arcgis.com")||-1!==U$1._corsServers.indexOf(t)||J$3(t)}function N$3(e,t,o,s){let a="Error";const i={url:o.url,requestOptions:o.requestOptions,getHeader:R$7,ssl:!1};if(t instanceof s$x)return t.details?(t.details=y$v(t.details),t.details.url=o.url,t.details.requestOptions=o.requestOptions):t.details=i,t;if(t){const e=s&&(e=>s.headers.get(e)),r=s&&s.status,o=t.message;o&&(a=o),e&&(i.getHeader=e),i.httpStatus=(null!=t.httpCode?t.httpCode:t.code)||r||0,i.subCode=t.subcode,i.messageCode=t.messageCode,"string"==typeof t.details?i.messages=[t.details]:i.messages=t.details;}return g$g(t)?m$x():new s$x(e,a,i)}async function A$6(){(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("host-webworker")?P$5||(P$5=await __webpack_require__.e(/*! import() */ "extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_esm_requ-da7f99").then(__webpack_require__.bind(__webpack_require__, /*! ./request-a7626e18.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/request-a7626e18.js"))):U$1._abortableFetch||(U$1._abortableFetch=_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.fetch.bind(_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e));}async function $$1(){s$r||await Promise.resolve().then(function () { return IdentityManager; });}async function K(t){const r=t.params.url,s=t.params.requestOptions,n=t.controller.signal,a=s.body;let i=null,l=null,u=null;if(_$2&&"HTMLFormElement" in _arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e&&(a instanceof FormData?i=a:a instanceof HTMLFormElement&&(l=a,i=new FormData(l))),"string"==typeof a&&(u=a),t.fetchOptions={cache:s.cacheBust&&!U$1._abortableFetch.polyfill?"no-cache":"default",credentials:"same-origin",headers:s.headers||{},method:"head"===s.method?"HEAD":"GET",mode:"cors",redirect:"follow",signal:n},(i||u)&&(t.fetchOptions.body=i||u),"anonymous"===s.authMode&&(t.useIdentity=!1),t.hasToken=!!(/token=/i.test(r)||s.query&&s.query.token||i&&i.get&&i.get("token")||l&&l.elements.token),!t.hasToken&&s$H.apiKey&&r$j(r)&&(s.query||(s.query={}),s.query.token=s$H.apiKey,t.hasToken=!0),t.useIdentity&&!t.hasToken&&!t.credentialToken&&!W$1(r)&&!b$b(n)){let e;"immediate"===s.authMode?(await $$1(),e=await s$r.getCredential(r,{signal:n}),t.credential=e):"no-prompt"===s.authMode?(await $$1(),e=await s$r.getCredential(r,{prompt:!1,signal:n}).catch((()=>{})),t.credential=e):s$r&&(e=s$r.findCredential(r)),e&&(t.credentialToken=e.token,t.useSSL=!!e.ssl);}}function W$1(e){return M$8.some((t=>t.test(e)))}async function G$5(e){let r=e.params.url;const o=e.params.requestOptions,s=e.fetchOptions,n=F$5(r)||G$6(r),l=o.responseType||"json",u=n?0:null!=o.timeout?o.timeout:D$4.timeout;let d=!1;if(!n){e.useSSL&&(r=ut(r)),o.cacheBust&&"default"===s.cache&&(r=bt(r,"request.preventCache",Date.now()));let n={...o.query};e.credentialToken&&(n.token=e.credentialToken);let a=C$9(n);(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.t)("esri-url-encodes-apostrophe")&&(a=a.replace(/'/g,"%27"));const i=r.length+1+a.length;let l;d="delete"===o.method||"post"===o.method||"put"===o.method||!!o.body||i>D$4.maxUrlLength;const u=o.useProxy||!!A$b(r);if(u){const e=q$5(r);l=e.path,!d&&l.length+1+i>D$4.maxUrlLength&&(d=!0),e.query&&(n={...e.query,...n});}if("HEAD"===s.method&&(d||u)){if(d){if(i>D$4.maxUrlLength)throw N$3("request:invalid-parameters",new Error("URL exceeds maximum length"),e.params);throw N$3("request:invalid-parameters",new Error("cannot use POST request when method is 'head'"),e.params)}if(u)throw N$3("request:invalid-parameters",new Error("cannot use proxy when method is 'head'"),e.params)}if(d?(s.method="delete"===o.method?"DELETE":"put"===o.method?"PUT":"POST",o.body?r=Rt(r,n):(s.body=C$9(n),s.headers["Content-Type"]="application/x-www-form-urlencoded")):r=Rt(r,n),u&&(e.useProxy=!0,r=`${l}?${r}`),n.token&&_$2&&s.body instanceof FormData){const e=s.body;e.set?e.set("token",n.token):e.append("token",n.token);}if(o.hasOwnProperty("withCredentials"))e.withCredentials=o.withCredentials;else if(!E$4(r,x$e))if(J$3(r))e.withCredentials=!0;else if(s$r){const t=s$r.findServerInfo(r);t&&t.webTierAuth&&(e.withCredentials=!0);}e.withCredentials&&(s.credentials="include");}let T,x,S=0,E=!1;u>0&&(S=setTimeout((()=>{E=!0,e.controller.abort();}),u));try{if("image"!==o.responseType||"default"!==s.cache||"GET"!==s.method||d||J$2(o.headers)||!n&&!e.useProxy&&D$4.proxyUrl&&!B$2(r)){if(T=await U$1._abortableFetch(r,s),e.useProxy||H$2(r),T.ok&&"HEAD"!==s.method){switch(l){case"array-buffer":x=await T.arrayBuffer();break;case"blob":case"image":x=await T.blob();break;default:x=await T.text();}if(S&&(clearTimeout(S),S=0),"json"===l||"xml"===l||"document"===l)if(x)switch(l){case"json":x=JSON.parse(x);break;case"xml":x=X$1(x,"application/xml");break;case"document":x=X$1(x,"text/html");}else x=null;if(x){if("array-buffer"===l||"blob"===l){const e=T.headers.get("Content-Type");if(/application\/json|text\/plain/i.test(e)&&x["blob"===l?"size":"byteLength"]<=750)try{const e=await new Response(x).json();e.error&&(x=e);}catch{}}"image"===l&&x instanceof Blob&&(x=await Y$1(URL.createObjectURL(x),e,!0));}}}else x=await Y$1(r,e);}catch(v){if("AbortError"===v.name){if(E)throw new Error("Timeout exceeded");throw m$x("Request canceled")}if(!(!T&&v instanceof TypeError&&D$4.proxyUrl)||o.body||"delete"===o.method||"head"===o.method||"post"===o.method||"put"===o.method||e.useProxy)throw v;e.redoRequest=!0,S$9({proxyUrl:D$4.proxyUrl,urlPrefix:ht(U$4(r).path)});}finally{S&&clearTimeout(S);}return [T,x]}async function z$4(e,t){if(null!=e.responseData)return e.responseData;if(e.headers&&(t.requestOptions.headers={...t.requestOptions.headers,...e.headers}),e.query&&(t.requestOptions.query={...t.requestOptions.query,...e.query}),e.before){let o,s;try{s=await e.before(t);}catch(r){o=N$3("request:interceptor",r,t);}if((s instanceof Error||s instanceof s$x)&&(o=N$3("request:interceptor",s,t)),o)throw e.error&&e.error(o),o;return s}}function J$2(e){if(e)for(const t of Object.getOwnPropertyNames(e))if(e[t])return !0;return !1}function X$1(e,t){let r;try{r=(new DOMParser).parseFromString(e,t);}catch{}if(!r||r.getElementsByTagName("parsererror").length)throw new SyntaxError("XML Parse error");return r}async function Q$1(e){let t,r;await K(e);try{do{[t,r]=await G$5(e);}while(!await V(e,t,r))}catch(n){const r=N$3("request:server",n,e.params,t);throw r.details.ssl=e.useSSL,e.interceptor&&e.interceptor.error&&e.interceptor.error(r),r}const o=e.params.url;if(/\/sharing\/rest\/(accounts|portals)\/self/i.test(o)&&!e.hasToken&&!e.credentialToken&&r&&r.user&&r.user.username&&!J$3(o)){const e=M$a(o,!0);e&&D$4.trustedServers.push(e);}const s=e.credential;if(s&&s$r){const e=s$r.findServerInfo(s.server);let t=e&&e.owningSystemUrl;if(t){t=t.replace(/\/?$/,"/sharing");const e=s$r.findCredential(t,s.userId);e&&-1===s$r._getIdenticalSvcIdx(t,e)&&e.resources.unshift(t);}}return {data:r,getHeader:t?e=>t.headers.get(e):R$7,requestOptions:e.params.requestOptions,ssl:e.useSSL,url:e.params.url}}async function V(e,t,r){if(e.redoRequest)return e.redoRequest=!1,!1;if(!t)return !0;if(!t.ok)throw new Error(`Unable to load ${t.url} status: ${t.status}`);let o,s,n,a;r&&r.error&&(o=Object.assign(new Error,r.error)),o&&(s=Number(o.code),n=o.hasOwnProperty("subcode")?Number(o.subcode):null,a=o.messageCode,a=a&&a.toUpperCase());const i=e.params.requestOptions.authMode;if(403===s&&(4===n||o.message&&o.message.toLowerCase().indexOf("ssl")>-1&&-1===o.message.toLowerCase().indexOf("permission"))){if(!e.useSSL)return e.useSSL=!0,!1}else if(!e.hasToken&&e.useIdentity&&("no-prompt"!==i||498===s)&&-1!==F$3.indexOf(s)&&!W$1(e.params.url)&&(403!==s||-1===I$3.indexOf(a)&&(null==n||2===n&&e.credentialToken))){await $$1();try{const t=await s$r.getCredential(e.params.url,{error:N$3("request:server",o,e.params),prompt:"no-prompt"!==i,signal:e.controller.signal,token:e.credentialToken});return e.credential=t,e.credentialToken=t.token,e.useSSL=e.useSSL||t.ssl,!1}catch(l){if("no-prompt"===i)return e.credential=null,e.credentialToken=null,!1;o=l;}}if(o)throw o;return !0}function Y$1(e,t,r=!1){const o=t.controller.signal,s=new Image;return t.withCredentials?s.crossOrigin="use-credentials":s.crossOrigin="anonymous",s.alt="",s.src=e,t$s(s,e,r,o)}U$1._abortableFetch=null,U$1._corsServers=["https://server.arcgisonline.com","https://services.arcgisonline.com"];

const request = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': U$1
});

// esri4
const securePortsMap = { "80": "443", "8080": "8443" };
//--------------------------------------------------------------------------
//
// URL conversions
//
//--------------------------------------------------------------------------
/**
 * Provides http:// part if it is missing.
 * @param url A source URL.
 * @returns The URL starting from http/https protocol.
 */
function toHttpUrl(url) {
  if (!url || /^http/i.test(url)) {
    return url;
  }
  return "http://" + url;
}
/**
 * Converts nonsecured HTTP URL to HTTPS URL.
 *
 * If the input URL is null or its protocol is not "http", the input URL is returned.
 * When converted, the "http" protocol is replaced with "https", port 80 is
 * replaced with 443, and port 8080 is replaced with 8443.
 * This behavior could be changed or extended.
 *
 * @param url Input URL string or null.
 * @returns HTTPS URL or an original URL if it is non-HTTP URL.
 */
function toHttpsUrl(url) {
  if (url) {
    url = toHttpUrl(url); // convert to a valid url
  }
  if (!url || !/^http:\/\//i.test(url)) {
    return url;
  }
  // assume implemented but not declared
  const parsedUrl = new $$2(url);
  url = url.replace(/^http/i, "https");
  const port = securePortsMap[parsedUrl.port];
  if (port) {
    url = url.replace(":" + parsedUrl.port, ":" + port);
  }
  return url;
}

/**
 * Fits a box into another box.
 * @param box                      Box to fit { w, h }
 * @param parentBox                Bot to fit into { w, h }
 * @param params.vAlign            top/middle/bottom. Default - middle.
 * @param params.hAlign            left/center/right. Default - center.
 *
 * @returns New box { x, y, w, h, ratio (scale) }
 */
function fitBox({ box, parentBox, vAlign = "middle", hAlign = "center" }) {
  // w & h ratios
  let wr = box.w / parentBox.w;
  let hr = box.h / parentBox.h;
  // direction (-1 - need to expand, +1 - need to shrink)
  const wd = wr > 1 ? 1 : -1;
  const hd = hr > 1 ? 1 : -1;
  // normalize
  wr = wr > 1 ? 1 / wr : wr; // => 0..1
  hr = hr > 1 ? 1 / hr : hr; // => 0..1
  // calc final ratio
  let ratio;
  if (wd === -1 && hd === -1) {
    ratio = 1 / Math.max(wr, hr);
  }
  else if (wd === -1 && hd === 1) {
    ratio = hr;
  }
  else if (wd === 1 && hd === -1) {
    ratio = wr;
  }
  else if (wd === 1 && hd === 1) {
    ratio = Math.min(wr, hr);
  }
  const newBox = {
    x: 0,
    y: 0,
    w: box.w * ratio,
    h: box.h * ratio,
    ratio
  };
  // align
  switch (hAlign) {
    case "left":
      newBox.x = 0;
      break;
    case "right":
      newBox.x = parentBox.w - newBox.w;
      break;
    default:
      newBox.x = (parentBox.w - newBox.w) / 2;
  }
  switch (vAlign) {
    case "top":
      newBox.y = 0;
      break;
    case "bottom":
      newBox.y = parentBox.h - newBox.h;
      break;
    default:
      newBox.y = (parentBox.h - newBox.h) / 2;
  }
  return newBox;
}

// geoenrichment.utils
/**
 * Position node adjacent or kitty-corner to anchor such that it's fully visible in viewport.
 * Place node such that corner of node touches a corner of
 * aroundNode, and that node is fully visible.
 */
function placeAround(node, anchor, positions, layoutFunc) {
  const aroundNodePos = position(anchor, true);
  const _positions = prepareOrient(positions);
  // For above and below dropdowns, subtract width of border so that popup and aroundNode borders
  // overlap, preventing a double-border effect.  Unfortunately, difficult to measure the border
  // width of either anchor or popup because in both cases the border may be on an inner node.
  if (/^(above|below)/.test(_positions[0] + "")) {
    const anchorBorder = getBorderExtents(anchor), anchorChildBorder = anchor.firstChild
      ? getBorderExtents(anchor.firstChild)
      : { t: 0, l: 0, b: 0, r: 0 }, nodeBorder = getBorderExtents(node), nodeChildBorder = node.firstChild
      ? getBorderExtents(node.firstChild)
      : { t: 0, l: 0, b: 0, r: 0 };
    aroundNodePos.y += Math.min(anchorBorder.t + anchorChildBorder.t, nodeBorder.t + nodeChildBorder.t);
    aroundNodePos.h -=
      Math.min(anchorBorder.t + anchorChildBorder.t, nodeBorder.t + nodeChildBorder.t) +
        Math.min(anchorBorder.b + anchorChildBorder.b, nodeBorder.b + nodeChildBorder.b);
  }
  // Compute position and size of visible part of anchor (it may be partially hidden by ancestor nodes w/scrollbars)
  if (anchor.parentNode) {
    // ignore nodes between position:relative and position:absolute
    let sawPosAbsolute = getComputedStyle$1(anchor).position === "absolute";
    let parent = anchor.parentNode;
    while (parent && parent.nodeType === 1 && parent.nodeName !== "BODY") {
      //ignoring the body will help performance
      const parentPos = position(parent), pcs = getComputedStyle$1(parent);
      if (/relative|absolute/.test(pcs.position)) {
        sawPosAbsolute = false;
      }
      if (!sawPosAbsolute && /hidden|auto|scroll/.test(pcs.overflow)) {
        const bottomYCoord = Math.min(aroundNodePos.y + aroundNodePos.h, parentPos.y + parentPos.h);
        const rightXCoord = Math.min(aroundNodePos.x + aroundNodePos.w, parentPos.x + parentPos.w);
        aroundNodePos.x = Math.max(aroundNodePos.x, parentPos.x);
        aroundNodePos.y = Math.max(aroundNodePos.y, parentPos.y);
        aroundNodePos.h = bottomYCoord - aroundNodePos.y;
        aroundNodePos.w = rightXCoord - aroundNodePos.x;
      }
      if (pcs.position === "absolute") {
        sawPosAbsolute = true;
      }
      parent = parent.parentNode;
    }
  }
  const x = aroundNodePos.x, y = aroundNodePos.y, width = aroundNodePos.w, height = aroundNodePos.h;
  // Convert positions arguments into choices argument for _place()
  const choices = [];
  function push(aroundCorner, corner) {
    choices.push({
      aroundCorner,
      corner,
      pos: {
        x: {
          L: x,
          R: x + width,
          M: x + (width >> 1)
        }[aroundCorner.charAt(1)],
        y: {
          T: y,
          B: y + height,
          M: y + (height >> 1)
        }[aroundCorner.charAt(0)]
      }
    });
  }
  _positions.forEach((pos) => {
    let ltr = isBodyLtr();
    switch (pos) {
      case "above-centered":
        push("TM", "BM");
        break;
      case "below-centered":
        push("BM", "TM");
        break;
      case "after-centered":
        ltr = !ltr;
      // fall through
      case "before-centered":
        push(ltr ? "ML" : "MR", ltr ? "MR" : "ML");
        break;
      case "after":
        ltr = !ltr;
      // fall through
      case "before":
        push(ltr ? "TL" : "TR", ltr ? "TR" : "TL");
        push(ltr ? "BL" : "BR", ltr ? "BR" : "BL");
        break;
      case "below-alt":
        ltr = !ltr;
      // fall through
      case "below":
        // first try to align left borders, next try to align right borders (or reverse for RTL mode)
        push(ltr ? "BL" : "BR", ltr ? "TL" : "TR");
        push(ltr ? "BR" : "BL", ltr ? "TR" : "TL");
        break;
      case "above-alt":
        ltr = !ltr;
      // fall through
      case "above":
        // first try to align left borders, next try to align right borders (or reverse for RTL mode)
        push(ltr ? "TL" : "TR", ltr ? "BL" : "BR");
        push(ltr ? "TR" : "TL", ltr ? "BR" : "BL");
        break;
      default:
        if (typeof pos === "object") {
          push(pos.aroundCorner, pos.corner);
        }
    }
  });
  const position$1 = _place(node, choices, layoutFunc, { w: width, h: height });
  position$1.aroundNodePos = aroundNodePos;
  return position$1;
}
function prepareOrient(orient) {
  if (!orient) {
    return ["below"];
  }
  const result = [];
  orient.forEach((position) => {
    // Provide additional variants of orientations with default alignment at the bottom
    let ltr = isBodyLtr();
    switch (position) {
      case "before-alt":
        ltr = !ltr;
      case "after-alt":
        result.push(ltr ? { aroundCorner: "BR", corner: "BL" } : { aroundCorner: "BL", corner: "BR" }); // Trick, see placeAround() method
        result.push(ltr ? { aroundCorner: "TR", corner: "TL" } : { aroundCorner: "TL", corner: "TR" }); // Trick, see placeAround() method
        return;
    }
    result.push(position);
  });
  return result;
}
/**
 * Given a list of spots to put node, put it at the first spot where it fits,
 * of if it doesn't fit anywhere then the place with the least overflow
 */
function _place(node, choices, layoutFunc, aroundNodeCoords) {
  const view = {
    l: 0,
    t: 0,
    w: document.body.clientWidth,
    h: document.body.clientHeight
  };
  // This won't work if the node is inside a <div style="position: relative">,
  // so reattach it to <body>.	 (Otherwise, the positioning will be wrong
  // and also it might get cutoff.)
  if (!node.parentNode || String(node.parentNode.nodeName).toLowerCase() !== "body") {
    document.body.appendChild(node);
  }
  let best = null;
  choices.some((choice) => {
    const corner = choice.corner;
    const pos = choice.pos;
    let overflow = 0;
    // calculate amount of space available given specified position of node
    const spaceAvailable = {
      w: {
        L: view.l + view.w - pos.x,
        R: pos.x - view.l,
        M: view.w
      }[corner.charAt(1)],
      h: {
        T: view.t + view.h - pos.y,
        B: pos.y - view.t,
        M: view.h
      }[corner.charAt(0)]
    };
    // Clear left/right position settings set earlier so they don't interfere with calculations,
    // specifically when layoutFunc() (a.k.a. Tooltip.orient()) measures natural width of Tooltip
    const s = node.style;
    s.left = s.right = "auto";
    // configure node to be displayed in given position relative to button
    // (need to do this in order to get an accurate size for the node, because
    // a tooltip's size changes based on position, due to triangle)
    if (layoutFunc) {
      const res = layoutFunc(node, choice.aroundCorner, corner, spaceAvailable, aroundNodeCoords);
      overflow = typeof res === "undefined" ? 0 : res;
    }
    // get node's size
    const style = node.style;
    const oldDisplay = style.display;
    const oldVis = style.visibility;
    if (style.display === "none") {
      style.visibility = "hidden";
      style.display = "";
    }
    const bb = position(node);
    style.display = oldDisplay;
    style.visibility = oldVis;
    // coordinates and size of node with specified corner placed at pos,
    // and clipped by viewport
    const startXpos = {
      L: pos.x,
      R: pos.x - bb.w,
      M: Math.max(view.l, Math.min(view.l + view.w, pos.x + (bb.w >> 1)) - bb.w) // M orientation is more flexible
    }[corner.charAt(1)], startYpos = {
      T: pos.y,
      B: pos.y - bb.h,
      M: Math.max(view.t, Math.min(view.t + view.h, pos.y + (bb.h >> 1)) - bb.h)
    }[corner.charAt(0)], startX = Math.max(view.l, startXpos), startY = Math.max(view.t, startYpos), endX = Math.min(view.l + view.w, startXpos + bb.w), endY = Math.min(view.t + view.h, startYpos + bb.h), width = endX - startX, height = endY - startY;
    overflow += bb.w - width + (bb.h - height);
    if (best == null || overflow < best.overflow) {
      best = {
        corner,
        aroundCorner: choice.aroundCorner,
        x: startX,
        y: startY,
        w: width,
        h: height,
        overflow,
        spaceAvailable
      };
    }
    return !overflow;
  });
  // In case the best position is not the last one we checked, need to call
  // layoutFunc() again.
  if (best.overflow && layoutFunc) {
    layoutFunc(node, best.aroundCorner, best.corner, best.spaceAvailable, aroundNodeCoords);
  }
  // compensate for margin on <body>, see #16148
  const top = best.y - +getStyle(document.body, "marginTop");
  const side = best.x - +getStyle(document.body, "marginLeft");
  node.style.top = top + "px";
  node.style.left = side + "px";
  node.style.right = "auto"; // needed for FF or else tooltip goes to far left
  return best;
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function t$r(t){return t}const u$A=t=>t*t,o$l=t=>1-u$A(1-t),i$P=t=>t<.5?u$A(2*t)/2:(o$l(2*(t-.5))+1)/2,n$C=t=>t*t*t,c$T=t=>1-n$C(1-t),a$G=t=>t<.5?n$C(2*t)/2:(c$T(2*(t-.5))+1)/2,s$q=t=>t*t*t*t,q$2=t=>1-s$q(1-t),r$i=t=>t<.5?s$q(2*t)/2:(q$2(2*(t-.5))+1)/2,e$m=t=>t*t*t*t*t,b$8=t=>1-e$m(1-t),d$v=t=>t<.5?e$m(2*t)/2:(b$8(2*(t-.5))+1)/2,h$q=t=>1-Math.cos(t*Math.PI/2),p$V=t=>1-h$q(1-t),x$a=t=>t<.5?h$q(2*t)/2:(p$V(2*(t-.5))+1)/2,M$7=t=>2**(10*(t-1)),f$n=t=>1-M$7(1-t),l$E=t=>t<.5?M$7(2*t)/2:(f$n(2*(t-.5))+1)/2,I$2=t=>-(Math.sqrt(1-t*t)-1),P$4=t=>1-I$2(1-t),g$c=t=>t<.5?I$2(2*t)/2:(P$4(2*(t-.5))+1)/2;function j$c(t){const u=2*(t-Math.sqrt((t-1)*t)),o=u/2/t;return i=>i<o?t*i*i:u*i-u+1}function k$6(t,u){return o=>o<u?u*t(o/u):1-t((1-o)/(1-u))*(1-u)}const m$t=k$6(j$c(1),1),v$7=k$6(j$c(1),0),w$7=k$6(j$c(1),.5),y$h=k$6(j$c(2),1),z$3=k$6(j$c(2),0),A$5=k$6(j$c(2),.5),B$1=k$6(j$c(3),1),C$5=k$6(j$c(3),0),D$3=k$6(j$c(3),.5),E$1=k$6(j$c(4),1),F$2=k$6(j$c(4),0),G$4=k$6(j$c(4),.5),H$1={linear:t$r,"in-quad":u$A,"out-quad":o$l,"in-out-quad":i$P,"in-coast-quad":m$t,"out-coast-quad":v$7,"in-out-coast-quad":w$7,"in-cubic":n$C,"out-cubic":c$T,"in-out-cubic":a$G,"in-coast-cubic":y$h,"out-coast-cubic":z$3,"in-out-coast-cubic":A$5,"in-quart":s$q,"out-quart":q$2,"in-out-quart":r$i,"in-coast-quart":B$1,"out-coast-quart":C$5,"in-out-coast-quart":D$3,"in-quint":e$m,"out-quint":b$8,"in-out-quint":d$v,"in-coast-quint":E$1,"out-coast-quint":F$2,"in-out-coast-quint":G$4,"in-sine":h$q,"out-sine":p$V,"in-out-sine":x$a,"in-expo":M$7,"out-expo":f$n,"in-out-expo":l$E,"in-circ":I$2,"out-circ":P$4,"in-out-circ":g$c};

// esri4.views.animation
function _executeAnimation(runInfo) {
  if (runInfo.progress < 1) {
    requestAnimationFrame(() => {
      if (runInfo._stopMethod) {
        return; // stopped
      }
      const currentTime = new Date().getTime();
      runInfo.progress = 1 - (runInfo.endTime - currentTime) / runInfo.duration;
      runInfo.progress = Math.min(1, runInfo.progress);
      _updateProperties(runInfo);
      _executeAnimation(runInfo);
    });
  }
  else {
    runInfo._onEnd();
  }
}
function _updateProperties(runInfo) {
  for (const id in runInfo.properties) {
    const propertyInfo = runInfo.properties[id];
    const easingFunc = !propertyInfo.easing
      ? null
      : typeof propertyInfo.easing === "function"
        ? propertyInfo.easing
        : H$1[propertyInfo.easing];
    const progress = easingFunc ? easingFunc(runInfo.progress) : runInfo.progress;
    const currentValue = propertyInfo.start + progress * (propertyInfo.end - propertyInfo.start);
    runInfo.obj[id] = propertyInfo.units ? currentValue + propertyInfo.units : currentValue;
    runInfo._onProgress(id, currentValue, progress);
  }
}
/**
 * Animates one or multple properties of a dom node or any object.
 * @example
 *    Animator.animateProperty({
 *        obj: object, - can be missing
 *        duration: 100, // ms
 *        properties: {
 *            prop1: {start: 0, end: 1, addPx: Boolean (default false), easing: Function | String }
 *        },
 *        onEnd: function(){ },
 *        onProgress: function(prop, value, progress){ }
 *    });
 *
 * @returns AnimationInfo, an object with a stop() method to stop animation, and Promise.
 */
function animateProperty({ obj, node, duration = 1000, properties, onProgress, onEnd, onStop, onCancel }) {
  const d = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.c)();
  const startTime = Date.now();
  const emitter = new Evented$1();
  const runInfo = {
    properties,
    obj: obj || node || {},
    progress: 0,
    promise: d.promise,
    duration,
    startTime,
    endTime: startTime + duration,
    stop: (goToEnd) => {
      runInfo._stopMethod = goToEnd ? "stopEnd" : "stop";
      // finalize animation
      if (runInfo._stopMethod === "stop") {
        runInfo._onEnd();
        return;
      }
      if (runInfo._stopMethod === "stopEnd") {
        runInfo.progress = 1;
        _updateProperties(runInfo);
        runInfo._onEnd();
        return;
      }
    },
    cancel: () => {
      runInfo._stopMethod = "cancel";
      runInfo._onCancel(); // finalize animation
    },
    // PromiseLike methods
    then: (onfulfilled, onrejected) => d.promise.then(onfulfilled, onrejected),
    // Events
    events: emitter,
    // internal
    _stopMethod: null,
    _onProgress: (propName, value, progress) => {
      onProgress && onProgress(propName, value, progress);
    },
    _onEnd: () => {
      onStop && onStop();
      onEnd && onEnd();
      d.resolve();
      emitter.emit("onEnd");
    },
    _onCancel: () => {
      onCancel && onCancel();
    }
  };
  _updateProperties(runInfo);
  _executeAnimation(runInfo);
  return runInfo;
}

// geoenrichment.utils
const ANIMATION_DURATION = 250; // ms
/**
 * Animates a node to fade in.
 * @param params.node          Dom node.
 * @param params.duration      Number. Default ANIMATION_DURATION.
 * @param params.onEnd         Function().
 *
 * @returns Promise.
 */
function animateFadeIn(params) {
  return animateProperty({
    obj: params.node.style,
    duration: params.duration || ANIMATION_DURATION,
    properties: {
      opacity: { start: 0, end: 1 }
    },
    onEnd() {
      params.onEnd && params.onEnd();
    }
  });
}
/**
 * Animates a node to fade out.
 * @param params.node          Dom node.
 * @param params.duration      Number. Default ANIMATION_DURATION.
 * @param params.onEnd         Function().
 *
 * @returns Promise.
 */
function animateFadeOut(params) {
  return animateProperty({
    obj: params.node.style,
    duration: params.duration || ANIMATION_DURATION,
    properties: {
      opacity: { start: 1, end: 0 }
    },
    onEnd() {
      params.onEnd && params.onEnd();
    }
  });
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const e$l={transparent:[0,0,0,0],black:[0,0,0,1],silver:[192,192,192,1],gray:[128,128,128,1],white:[255,255,255,1],maroon:[128,0,0,1],red:[255,0,0,1],purple:[128,0,128,1],fuchsia:[255,0,255,1],green:[0,128,0,1],lime:[0,255,0,1],olive:[128,128,0,1],yellow:[255,255,0,1],navy:[0,0,128,1],blue:[0,0,255,1],teal:[0,128,128,1],aqua:[0,255,255,1],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],blanchedalmond:[255,235,205,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],oldlace:[253,245,230,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],rebeccapurple:[102,51,153,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],whitesmoke:[245,245,245,1],yellowgreen:[154,205,5,10]};function r$h(r){var l;return null!=(l=e$l[r.toLowerCase()])?l:null}function a$F(e,r,l){l<0&&++l,l>1&&--l;const a=6*l;return a<1?e+(r-e)*a:2*l<1?r:3*l<2?e+(r-e)*(2/3-l)*6:e}function n$B(e,r,l,n=1){const i=(e%360+360)%360/360,o=l<=.5?l*(r+1):l+r-l*r,t=2*l-o;return [Math.round(256*a$F(t,o,i+1/3)),Math.round(256*a$F(t,o,i)),Math.round(256*a$F(t,o,i-1/3)),n]}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const n$A=new Float32Array(1);function u$z(n){--n;for(let t=1;t<32;t<<=1)n|=n>>t;return n+1}function e$k(n,t,r){return n<t?t:n>r?r:n}function i$O(n,t,r){return Math.min(Math.max(n,t),r)}function o$k(n){return 0==(n&n-1)}const h$p=Math.log2||function(n){return Math.log(n)/Math.LN2};function M$6(n,t,r){return n+(t-n)*r}function m$s(n){return n*Math.PI/180}function b$7(n){return 180*n/Math.PI}function N$2(n){return Math.acos(e$k(n,-1,1))}function g$b(n){return Math.asin(e$k(n,-1,1))}function p$U(t){return n$A[0]=t,n$A[0]}p$U(34028234663852886e22);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$z(t){return e$k(a$P(t),0,255)}function a$E(t,r,s){return t=Number(t),isNaN(t)?s:t<r?r:t>s?s:t}class o$j{constructor(t){this.r=255,this.g=255,this.b=255,this.a=1,t&&this.setColor(t);}static blendColors(t,r,s,i=new o$j){return i.r=Math.round(t.r+(r.r-t.r)*s),i.g=Math.round(t.g+(r.g-t.g)*s),i.b=Math.round(t.b+(r.b-t.b)*s),i.a=t.a+(r.a-t.a)*s,i._sanitize()}static fromRgb(t,r){const i=t.toLowerCase().match(/^(rgba?|hsla?)\(([\s\.\-,%0-9]+)\)/);if(i){const t=i[2].split(/\s*,\s*/),e=i[1];if("rgb"===e&&3===t.length||"rgba"===e&&4===t.length){const s=t[0];if("%"===s.charAt(s.length-1)){const s=t.map((t=>2.56*parseFloat(t)));return 4===t.length&&(s[3]=parseFloat(t[3])),o$j.fromArray(s,r)}return o$j.fromArray(t.map((t=>parseFloat(t))),r)}if("hsl"===e&&3===t.length||"hsla"===e&&4===t.length)return o$j.fromArray(n$B(parseFloat(t[0]),parseFloat(t[1])/100,parseFloat(t[2])/100,parseFloat(t[3])),r)}return null}static fromHex(t,r=new o$j){if(4!==t.length&&7!==t.length||"#"!==t[0])return null;const s=4===t.length?4:8,i=(1<<s)-1;let e=Number("0x"+t.substr(1));return isNaN(e)?null:(["b","g","r"].forEach((t=>{const n=e&i;e>>=s,r[t]=4===s?17*n:n;})),r.a=1,r)}static fromArray(t,r=new o$j){return r._set(Number(t[0]),Number(t[1]),Number(t[2]),Number(t[3])),isNaN(r.a)&&(r.a=1),r._sanitize()}static fromString(t,r){const s=r$h(t);return s&&o$j.fromArray(s,r)||o$j.fromRgb(t,r)||o$j.fromHex(t,r)}static fromJSON(t){return t&&new o$j([t[0],t[1],t[2],t[3]/255])}static toUnitRGB(r){return r$A(r)?[r.r/255,r.g/255,r.b/255]:null}static toUnitRGBA(r){return r$A(r)?[r.r/255,r.g/255,r.b/255,null!=r.a?r.a:1]:null}get isBright(){return .299*this.r+.587*this.g+.114*this.b>=127}setColor(t){if("string"==typeof t)o$j.fromString(t,this);else if(Array.isArray(t))o$j.fromArray(t,this);else {var r,s,i,e;this._set(null!=(r=t.r)?r:0,null!=(s=t.g)?s:0,null!=(i=t.b)?i:0,null!=(e=t.a)?e:1),t instanceof o$j||this._sanitize();}return this}toRgb(){return [this.r,this.g,this.b]}toRgba(){return [this.r,this.g,this.b,this.a]}toHex(){const t=this.r.toString(16),r=this.g.toString(16),s=this.b.toString(16);return `#${t.length<2?"0"+t:t}${r.length<2?"0"+r:r}${s.length<2?"0"+s:s}`}toCss(t=!1){const r=this.r+", "+this.g+", "+this.b;return t?`rgba(${r}, ${this.a})`:`rgb(${r})`}toString(){return this.toCss(!0)}toJSON(){return this.toArray()}toArray(t=0){const r=n$z(this.r),s=n$z(this.g),i=n$z(this.b);return 0===t||1!==this.a?[r,s,i,n$z(255*this.a)]:[r,s,i]}clone(){return new o$j(this.toRgba())}hash(){return this.r<<24|this.g<<16|this.b<<8|255*this.a}_sanitize(){return this.r=Math.round(a$E(this.r,0,255)),this.g=Math.round(a$E(this.g,0,255)),this.b=Math.round(a$E(this.b,0,255)),this.a=a$E(this.a,0,1),this}_set(t,r,s,i){this.r=t,this.g=r,this.b=s,this.a=i;}}o$j.prototype.declaredClass="esri.Color";

// esri4
/**
 * Converts a value to CSS color. If conversion fails, the default value is returned.
 *  @param value String | Color (esri Color) | Number | Number[] as [100, 100, 100, 0.5?].
 *      A color value could be a string, a number, or Color.
 *  @param ignoreAlpha Boolean.
 *      True value means ignore alpha value of color and forces conversion to hex CSS representation.
 *  @param defaultValue String | Color | Number.
 *      Default value. If the default value is missing, "#000000" is supposed.
 *
 * @returns CSS color in the form "#xxxxxx" or "rgba(R,G,B,A)".
 * If the conversion fails, a color representation for the default value is returned.
 */
function toCSSColor(value, ignoreAlpha = false, defaultValue) {
  // At first we convert a string to Color.
  // The special case is a hexadecimal string starting from 0x. We don't convert it.
  // The result could be null!
  if (typeof value === "string" && !/^0x/i.test(value)) {
    value = o$j.fromString(value);
  }
  if (Array.isArray(value)) {
    value = o$j.fromArray(value);
  }
  // Now we convert a color to CSS representation.
  if (isColorObject(value)) {
    return ignoreAlpha || value.a === 1 ? value.toHex() : value.toCss(true);
  }
  // Otherwise we threat the input as Number and manually convert it to hex CSS representation.
  if (value == null /*null or undefined*/ || isNaN(value)) {
    return defaultValue ? toCSSColor(defaultValue, ignoreAlpha) : "#000000";
  }
  value = "00000" + Number(value).toString(16);
  return "#" + value.substr(value.length - 6);
}
function isColorObject(color) {
  return color && typeof color.toHex === "function";
}
/**
 * Converts a value to a new Color object.
 * @param value String | Color | Number.
 *      A color value could be a string, a number, or Color.
 * @param defaultValue String | Color | Number.
 *      Default value. If the default value is missing, "#000000" is supposed.
 *
 * @returns a new instance of Color.
 * If the conversion fails, a color representation for the default value is returned.
 */
function toColor(value, defaultValue) {
  if (typeof value === "object") {
    return new o$j(value);
  }
  return o$j.fromString(toCSSColor(value, false, defaultValue));
}

// {x,y} => [x, y]
function degToRad(angleDeg) {
  return (angleDeg * Math.PI) / 180;
}
function radToDeg(angleRad) {
  return (angleRad * 180) / Math.PI;
}

// geoenrichment.utils
/**
 * @example
 *
 * [xx xy dx]
 * [yx yy dy]
 * [ 0  0  1]
 *
 * // SVG notation
 * matrix(a,b,c,d,e,f)
 * [a c e]
 * [b d f]
 * [0 0 1]
 * matrix(xx,yx,xy,yy,dx,dy)
 */
class GFXMatrix2D {
  constructor(params) {
    this.dx = 0;
    this.dy = 0;
    this.xx = 1;
    this.xy = 0;
    this.yx = 0;
    this.yy = 1;
    mixin(this, params);
  }
}
class GfxMatrixBuilder {
  // matrix creators
  create(params) {
    return new GFXMatrix2D(params);
  }
  normalize(matrix) {
    return matrix;
  }
  /**
   * Returns whether the specified matrix is the identity.
   */
  isIdentity(matrix) {
    return (matrix.xx === 1 && matrix.xy === 0 && matrix.yx === 0 && matrix.yy === 1 && matrix.dx === 0 && matrix.dy === 0);
  }
  translate(a, b) {
    return new GFXMatrix2D({ dx: a, dy: b });
  }
  scale(a, b) {
    return new GFXMatrix2D({ xx: a, yy: b });
  }
  rotate(angleRad) {
    const c = Math.cos(angleRad);
    const s = Math.sin(angleRad);
    return new GFXMatrix2D({ xx: c, xy: -s, yx: s, yy: c });
  }
  rotateg(degree) {
    return this.rotate(degToRad(degree));
  }
  rotategAt(degree, a, b) {
    return this._sandwich(this.rotateg(degree), a, b);
  }
  multiply(matrices) {
    matrices = matrices.filter((m) => !!m);
    let matrix = matrices[0];
    // combine matrices
    for (let i = 1; i < matrices.length; ++i) {
      const l = matrix, r = matrices[i];
      matrix = new GFXMatrix2D();
      matrix.xx = l.xx * r.xx + l.xy * r.yx;
      matrix.xy = l.xx * r.xy + l.xy * r.yy;
      matrix.yx = l.yx * r.xx + l.yy * r.yx;
      matrix.yy = l.yx * r.xy + l.yy * r.yy;
      matrix.dx = l.xx * r.dx + l.xy * r.dy + l.dx;
      matrix.dy = l.yx * r.dx + l.yy * r.dy + l.dy;
    }
    mixin(this, matrix);
    return matrix;
  }
  /**
   * Applies a matrix to a rectangle.
   * The method applies the transformation on all corners of the
   * rectangle and returns the smallest rectangle enclosing the 4 transformed points.
   */
  multiplyRectangle(matrix, rect) {
    const M = gfxMatrixBuilder.normalize(matrix);
    if (this.isIdentity(M)) {
      return { x: rect.x, y: rect.y, w: rect.w, h: rect.h };
    } // gfx.Rectangle
    const p0 = this.multiplyPoint(M, rect.x, rect.y), p1 = this.multiplyPoint(M, rect.x, rect.y + rect.h), p2 = this.multiplyPoint(M, rect.x + rect.w, rect.y), p3 = this.multiplyPoint(M, rect.x + rect.w, rect.y + rect.h), minx = Math.min(p0.x, p1.x, p2.x, p3.x), miny = Math.min(p0.y, p1.y, p2.y, p3.y), maxx = Math.max(p0.x, p1.x, p2.x, p3.x), maxy = Math.max(p0.y, p1.y, p2.y, p3.y);
    return {
      // gfx.Rectangle
      x: minx,
      y: miny,
      w: maxx - minx,
      h: maxy - miny
    };
  }
  /**
   * Applies a matrix to a point.
   */
  multiplyPoint(matrix, a, b) {
    const M = this.normalize(matrix);
    return this._multiplyPoint(M, a, b);
  }
  _multiplyPoint(matrix, x, y) {
    return { x: matrix.xx * x + matrix.xy * y + matrix.dx, y: matrix.yx * x + matrix.yy * y + matrix.dy };
  }
  // high level operations
  _sandwich(matrix, x, y) {
    return this.multiply([this.translate(x, y), matrix, this.translate(-x, -y)]);
  }
}
const gfxMatrixBuilder = new GfxMatrixBuilder();

// geoenrichment.utils
/**
 * Calculates the bounding box of content box inside container box, and considering the viewBox and preserveAspectRatio.
 * @param containerBox SVG size.
 * @param contentBox Own bounding box of the SVG content.
 * @param viewBox SVG view box.
 * @param preserveAspectRatio SVG aspect ratio rule.
 */
function getBoundingBoxInViewPort(containerBox, contentBox, viewBox, preserveAspectRatio) {
  let xmodifier;
  let ymodifier;
  preserveAspectRatio = preserveAspectRatio || "xMidYMin meet";
  switch (preserveAspectRatio) {
    case "none":
      const ratioX = containerBox.w / viewBox.width;
      const ratioY = containerBox.h / viewBox.height;
      xmodifier = (x) => ratioX * (x - viewBox.xmin);
      ymodifier = (y) => ratioY * (y - viewBox.ymin);
      break;
    case "xMidYMin meet":
      const fitViewBox = fitBox({
        box: { w: viewBox.width, h: viewBox.height },
        parentBox: containerBox
      });
      xmodifier = (x) => fitViewBox.x + fitViewBox.ratio * (x - viewBox.xmin);
      ymodifier = (y) => fitViewBox.y + fitViewBox.ratio * (y - viewBox.ymin);
      break;
    // TODO: support other cases
  }
  const x = xmodifier(contentBox.x);
  const y = ymodifier(contentBox.y);
  const r = containerBox.w - xmodifier(contentBox.x + contentBox.w);
  const b = containerBox.h - ymodifier(contentBox.y + contentBox.h);
  return {
    x,
    y,
    r,
    b,
    w: containerBox.w - r - x,
    h: containerBox.h - b - y
  };
}

// esri4.core
function _toNumber(value) {
  return (typeof value === "string" ? Number(value.replace("px", "")) : Number(value)) || 0;
}
function viewBoxFromString(viewBox, width, height) {
  if (viewBox) {
    const ps = viewBox.split(" ");
    return {
      xmin: _toNumber(ps[0]),
      ymin: _toNumber(ps[1]),
      width: _toNumber(ps[2]),
      height: _toNumber(ps[3])
    };
  }
  if (width && height) {
    return {
      xmin: 0,
      ymin: 0,
      width: _toNumber(width),
      height: _toNumber(height)
    };
  }
  return null;
}

// geoenrichment.utils
/**
 * Useful reading: https://developer.mozilla.org/ru/docs/Web/SVG/Attribute/d
 */
function getBBoxCalculator() {
  let _segmentBbox;
  const last = {};
  const calculator = {
    updateBBox: (segement) => {
      const action = segement.action;
      const n = segement.args;
      const l = n.length;
      let i;
      switch (action) {
        case "M":
        case "L":
          for (i = 0; i < l; i += 2) {
            _updateBBox(n[i], n[i + 1]);
          }
          last.x = n[l - 2];
          last.y = n[l - 1];
          if (action === "M") {
            last.xm = last.x;
            last.ym = last.y;
          }
          break;
        case "H":
          for (i = 0; i < l; ++i) {
            _updateBBox(n[i], last.y);
          }
          last.x = n[l - 1];
          break;
        case "V":
          for (i = 0; i < l; ++i) {
            _updateBBox(last.x, n[i]);
          }
          last.y = n[l - 1];
          break;
        case "m":
          let start = 0;
          if (!("x" in last)) {
            _updateBBox((last.x = n[0]), (last.y = n[1]));
            start = 2;
          }
          for (i = start; i < l; i += 2) {
            _updateBBox((last.x += n[i]), (last.y += n[i + 1]));
          }
          if (action === "m") {
            last.xm = last.x;
            last.ym = last.y;
          }
          break;
        case "l":
          for (i = 0; i < l; i += 2) {
            _updateBBox((last.x += n[i]), (last.y += n[i + 1]));
          }
          break;
        case "h":
          for (i = 0; i < l; ++i) {
            _updateBBox((last.x += n[i]), last.y);
          }
          break;
        case "v":
          for (i = 0; i < l; ++i) {
            _updateBBox(last.x, (last.y += n[i]));
          }
          break;
        case "C":
          for (i = 0; i < l; i += 6) {
            _updateBBoxCubic(last.x, last.y, n[i], n[i + 1], (last.cx = n[i + 2]), (last.cy = n[i + 3]), (last.x = n[i + 4]), (last.y = n[i + 5]));
          }
          break;
        case "c":
          for (i = 0; i < l; i += 6) {
            _updateBBoxCubic(last.x, last.y, last.x + n[i], last.y + n[i + 1], (last.cx = last.x + n[i + 2]), (last.cy = last.y + n[i + 3]), (last.x += n[i + 4]), (last.y += n[i + 5]));
          }
          break;
        case "S":
          for (i = 0; i < l; i += 4) {
            // equals to the starting point if the previous wasn't a curve
            const xc = typeof last.cx === "number" ? last.cx : last.x;
            const yc = typeof last.cy === "number" ? last.cy : last.y;
            // reflect
            const x1 = last.x + (last.x - xc);
            const y1 = last.y + (last.y - yc);
            _updateBBoxCubic(last.x, last.y, x1, y1, (last.cx = n[i]), (last.cy = n[i + 1]), (last.x = n[i + 2]), (last.y = n[i + 3]));
          }
          break;
        case "s":
          for (i = 0; i < l; i += 4) {
            // equals to the starting point if the previous wasn't a curve
            const xc = typeof last.cx === "number" ? last.cx : last.x;
            const yc = typeof last.cy === "number" ? last.cy : last.y;
            // reflect
            const x1 = last.x + (last.x - xc);
            const y1 = last.y + (last.y - yc);
            _updateBBoxCubic(last.x, last.y, x1, y1, (last.cx = last.x + n[i]), (last.cy = last.y + n[i + 1]), (last.x += n[i + 2]), (last.y += n[i + 3]));
          }
          break;
        case "Q":
          for (i = 0; i < l; i += 4) {
            _updateBBoxQuadratic(last.x, last.y, (last.qx = n[i]), (last.qy = n[i + 1]), (last.x = n[i + 2]), (last.y = n[i + 3]));
          }
          break;
        case "q":
          for (i = 0; i < l; i += 4) {
            _updateBBoxQuadratic(last.x, last.y, (last.qx = last.x + n[i]), (last.qy = last.y + n[i + 1]), (last.x += n[i + 2]), (last.y += n[i + 3]));
          }
          break;
        case "T":
          for (i = 0; i < l; i += 2) {
            // equals to the starting point if the previous wasn't a curve
            const xc = typeof last.qx === "number" ? last.qx : last.x;
            const yc = typeof last.qy === "number" ? last.qy : last.y;
            // reflect
            const x1 = last.x + (last.x - xc);
            const y1 = last.y + (last.y - yc);
            _updateBBoxQuadratic(last.x, last.y, (last.qx = x1), (last.qy = y1), (last.x = n[i]), (last.y = n[i + 1]));
          }
          break;
        case "t":
          for (i = 0; i < l; i += 2) {
            // equals to the starting point if the previous wasn't a curve
            const xc = typeof last.qx === "number" ? last.qx : last.x;
            const yc = typeof last.qy === "number" ? last.qy : last.y;
            // reflect
            const x1 = last.x + (last.x - xc);
            const y1 = last.y + (last.y - yc);
            _updateBBoxQuadratic(last.x, last.y, (last.qx = x1), (last.qy = y1), (last.x += n[i]), (last.y += n[i + 1]));
          }
          break;
        case "A":
          for (i = 0; i < l; i += 7) {
            _updateBBoxArc(last.x, last.y, n[i], n[i + 1], n[i + 2], n[i + 3], n[i + 4], (last.x = n[i + 5]), (last.y = n[i + 6]));
          }
          break;
        case "a":
          for (i = 0; i < l; i += 7) {
            _updateBBoxArc(last.x, last.y, n[i], n[i + 1], n[i + 2], n[i + 3], n[i + 4], (last.x += n[i + 5]), (last.y += n[i + 6]));
          }
          break;
        case "z":
        case "Z":
          last.x = last.xm;
          last.y = last.ym;
          break;
      }
      switch (action) {
        case "M":
        case "L":
        case "H":
        case "V":
        case "A":
        case "m":
        case "l":
        case "h":
        case "v":
        case "a":
          last.cx = null;
          last.cy = null;
          last.qx = null;
          last.qy = null;
          break;
      }
      last.prevAction = action;
      function _updateBBoxCubic(xFrom, yFrom, x1, y1, x2, y2, xTo, yTo) {
        function _getPoint(t, p1, p2, p3, p4) {
          const _t = 1 - t;
          return _t * _t * _t * p1 + 3 * _t * _t * t * p2 + 3 * _t * t * t * p3 + t * t * t * p4;
        }
        // skip the starting point
        for (let i = 0; i < 10; i++) {
          const t = 0.1 * (i + 1);
          _updateBBox(_getPoint(t, xFrom, x1, x2, xTo), _getPoint(t, yFrom, y1, y2, yTo));
        }
      }
      function _updateBBoxQuadratic(xFrom, yFrom, x1, y1, xTo, yTo) {
        function _getPoint(t, p1, p2, p3) {
          const _t = 1 - t;
          return _t * _t * p1 + 2 * _t * t * p2 + t * t * p3;
        }
        // skip the starting point
        for (let i = 0; i < 10; i++) {
          const t = 0.1 * (i + 1);
          _updateBBox(_getPoint(t, xFrom, x1, xTo), _getPoint(t, yFrom, y1, yTo));
        }
      }
      function _updateBBoxArc(xFrom, yFrom, rx, ry, rotationDeg, largeArcFlag, sweepFlag, xTo, yTo) {
        const arcParams = _calcArcParams(xFrom, yFrom, rx, ry, rotationDeg, largeArcFlag, sweepFlag, xTo, yTo);
        const cos_r = arcParams.rotationRad ? Math.cos(arcParams.rotationRad) : 1;
        const sin_r = arcParams.rotationRad ? Math.sin(arcParams.rotationRad) : 0;
        function _getPoint(t) {
          const angleRad = arcParams.angleFromRad + (arcParams.angleToRad - arcParams.angleFromRad) * t;
          const cos_a = angleRad ? Math.cos(angleRad) : 1;
          const sin_a = angleRad ? Math.sin(angleRad) : 0;
          const relX = arcParams.rx * cos_a;
          const relY = arcParams.ry * sin_a;
          const rotatedRelX = cos_r * relX - sin_r * relY;
          const rotatedRelY = sin_r * relX + cos_r * relY;
          return {
            x: arcParams.cx + rotatedRelX,
            y: arcParams.cy + rotatedRelY
          };
        }
        // skip the starting point
        for (let i = 0; i < 10; i++) {
          const t = 0.1 * (i + 1);
          const p = _getPoint(t);
          _updateBBox(p.x, p.y);
        }
      }
      // updates the bounding box of path with new point
      function _updateBBox(x, y) {
        const bbox = _segmentBbox;
        // we use {l, b, r, t} representation of a bbox
        if (bbox && "l" in bbox) {
          if (bbox.l > x) {
            bbox.l = x;
          }
          if (bbox.r < x) {
            bbox.r = x;
          }
          if (bbox.t > y) {
            bbox.t = y;
          }
          if (bbox.b < y) {
            bbox.b = y;
          }
        }
        else {
          _segmentBbox = { l: x, b: y, r: x, t: y };
        }
      }
    },
    getBBox: () => _segmentBbox
  };
  return calculator;
}
function _calcArcParams(xFrom, yFrom, rx, ry, rotationDeg, largeArcFlag, sweepFlag, xTo, yTo) {
  // https://www.w3.org/TR/SVG11/implnote.html
  // http://svn.apache.org/repos/asf/xmlgraphics/batik/branches/svg11/sources/org/apache/batik/ext/awt/geom/ExtendedGeneralPath.java
  //
  // Elliptical arc implementation based on the SVG specification notes
  //
  // Compute the half distance between the current and the final point
  const dx2 = (xFrom - xTo) / 2.0;
  const dy2 = (yFrom - yTo) / 2.0;
  // Convert angle from degrees to radians
  const rotationRad = degToRad(rotationDeg % 360.0);
  const cosAngle = Math.cos(rotationRad);
  const sinAngle = Math.sin(rotationRad);
  //
  // Step 1 : Compute (x1, y1)
  //
  const x1 = cosAngle * dx2 + sinAngle * dy2;
  const y1 = -sinAngle * dx2 + cosAngle * dy2;
  // Ensure radii are large enough
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  let Prx = rx * rx;
  let Pry = ry * ry;
  const Px1 = x1 * x1;
  const Py1 = y1 * y1;
  // check that radii are large enough
  const radiiCheck = Px1 / Prx + Py1 / Pry;
  if (radiiCheck > 1) {
    rx = Math.sqrt(radiiCheck) * rx;
    ry = Math.sqrt(radiiCheck) * ry;
    Prx = rx * rx;
    Pry = ry * ry;
  }
  //
  // Step 2 : Compute (cx1, cy1)
  //
  let sign = largeArcFlag === sweepFlag ? -1 : 1;
  let sq = (Prx * Pry - Prx * Py1 - Pry * Px1) / (Prx * Py1 + Pry * Px1);
  sq = sq < 0 ? 0 : sq;
  const coef = sign * Math.sqrt(sq);
  const cx1 = coef * ((rx * y1) / ry);
  const cy1 = coef * -((ry * x1) / rx);
  //
  // Step 3 : Compute (cx, cy) from (cx1, cy1)
  //
  const sx2 = (xFrom + xTo) / 2.0;
  const sy2 = (yFrom + yTo) / 2.0;
  const cx = sx2 + (cosAngle * cx1 - sinAngle * cy1);
  const cy = sy2 + (sinAngle * cx1 + cosAngle * cy1);
  //
  // Step 4 : Compute the angleStart (angle1) and the angleExtent (dangle)
  //
  const ux = (x1 - cx1) / rx;
  const uy = (y1 - cy1) / ry;
  const vx = (-x1 - cx1) / rx;
  const vy = (-y1 - cy1) / ry;
  let p, n;
  // Compute the angle start
  n = Math.sqrt(ux * ux + uy * uy);
  p = ux; // (1 * ux) + (0 * uy)
  sign = uy < 0 ? -1 : 1;
  let angleFromDeg = radToDeg(sign * Math.acos(p / n));
  // Compute the angle extent
  n = Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));
  p = ux * vx + uy * vy;
  sign = ux * vy - uy * vx < 0 ? -1 : 1;
  let angleExtentDeg = radToDeg(sign * Math.acos(p / n));
  if (!sweepFlag && angleExtentDeg > 0) {
    angleExtentDeg -= 360;
  }
  else if (sweepFlag && angleExtentDeg < 0) {
    angleExtentDeg += 360;
  }
  angleExtentDeg %= 360;
  angleFromDeg %= 360;
  return {
    cx,
    cy,
    rx,
    ry,
    angleFromRad: degToRad(angleFromDeg),
    angleToRad: degToRad(angleFromDeg + angleExtentDeg),
    rotationRad
  };
}

/**
 * This library allows to build SVG elements via json model and interface. Also can be used to separate data builing from the actual rendering.
 * This library can be used in the following ways.
 *
 * 1. LIVE
 * The surface is created on a DOM node. Every change in the shape elements is reflected in the DOM.
 *
 * @example
 * const surface = createGFXSurface(document.body, 100, 100);
 * surface.createRect({ w: 100, y: 100 }).setFill("red"); // will be rendered right away
 *
 *
 * 2. DEFERRED/DETACHED (hfx library)
 * The surface is created without a parent. Changes made to the shape elements are accumulated in _rawNode (DOM JSON).
 * Then you can call surface.render() method to create the DOM (_rawNode => rawNode). surface.rawNode will be created as a detached DOM node and
 * then can be added to the document.
 * From this time on, every change in the shape elements will be reflected in the DOM.
 * Can be used for off-screen rendering to optimize performance.
 *
 * @example
 * const surface = createGFXSurface(null, 100, 100);
 * surface.createRect({ w: 100, y: 100 }).setFill("red");
 * surface.render(); // creates a detached rawNode
 * document.body.appendChild(surface.rawNode);
 *
 *
 * 3. HTML STRING (hfx library)
 * The surface is created without a parent. Changes made to the shape elements are accumulated in _rawNode (DOM JSON).
 * Call surface._getHTMLString() to convert _rawNode => HTML String.
 * Can be used for off-screen or in-worker rendering to optimize performance.
 *
 * @example
 * const surface = createGFXSurface(null, 100, 100);
 * surface.createRect({ w: 100, y: 100 }).setFill("red");
 * document.body.innerHTML = surface._getHTMLString(); // this will not create surface.rawNode
 */
const dasharray = {
  shortdash: [4, 1],
  shortdot: [1, 1],
  shortdashdot: [4, 1, 1, 1],
  shortdashdotdot: [4, 1, 1, 1, 1, 1],
  dot: [1, 3],
  dash: [4, 3],
  longdash: [8, 3],
  dashdot: [4, 3, 1, 3],
  longdashdot: [8, 3, 1, 3],
  longdashdotdot: [8, 3, 1, 3, 1, 3]
};
const xmlns = {
  xlink: "http://www.w3.org/1999/xlink",
  svg: "http://www.w3.org/2000/svg"
};
const pathSvgRegExp = /([A-DF-Za-df-z])|([-+]?\d*[.]?\d+(?:[eE][-+]?\d+)?)/g;
let clipCount = 0;
const GFX_DEFAULTS = {
  defaultStroke: {
    type: "stroke",
    color: "black",
    style: "solid",
    width: 0,
    cap: "butt",
    join: 4
  },
  defaultPath: {
    type: "path",
    path: ""
  },
  defaultPolyline: {
    type: "polyline",
    points: []
  },
  defaultPolygon: {
    type: "polygon",
    points: []
  },
  defaultRect: {
    type: "rect",
    x: 0,
    y: 0,
    w: 100,
    h: 100,
    r: 0
  },
  defaultLine: {
    type: "line",
    x1: 0,
    y1: 0,
    x2: 100,
    y2: 100
  },
  defaultEllipse: {
    type: "ellipse",
    cx: 0,
    cy: 0,
    rx: 200,
    ry: 100
  },
  defaultCircle: {
    type: "circle",
    cx: 0,
    cy: 0,
    r: 100
  },
  defaultImage: {
    type: "image",
    x: 0,
    y: 0,
    w: 0,
    h: 0,
    src: ""
  },
  defaultText: {
    type: "text",
    x: 0,
    y: 0,
    text: "",
    align: "start",
    decoration: "none",
    rotated: false,
    kerning: true
  }
};
function _toAttrName(name) {
  return name === "w" ? "width" : name === "h" ? "height" : name;
}
function _createRawNodeSupport(source, isGroup = false) {
  const object = source;
  object._rawNode = null;
  // ATTRIBUTES
  object.getAttribute = (name) => object._rawNode.attrs[name];
  object.setAttribute = (name, value) => {
    object._rawNode.attrs[name] = value;
    // DOM
    object.rawNode && object.rawNode.setAttribute(name, value);
  };
  object._setAttributeNS = (ns, name, value) => {
    object._rawNode.attrs[name] = value;
    // DOM
    object.rawNode && object.rawNode.setAttributeNS(ns, name, value);
  };
  object.removeAttribute = (name) => {
    delete object._rawNode.attrs[name];
    // DOM
    object.rawNode && object.rawNode.removeAttribute(name);
  };
  // STYLE
  object.getStyle = () => object._rawNode.style;
  object.setStyle = (style) => {
    if (!object._rawNode.style) {
      object._rawNode.style = style;
    }
    else {
      object._rawNode.style = mixin(object._rawNode.style, style);
    }
    if (object.rawNode) {
      for (const id in style) {
        const value = style[id];
        object.rawNode.style[id] = value == null ? "" : value;
      }
    }
  };
  // SET RAW NODE
  object._setRawNode = (_namespace, nodeType, createDom) => {
    object._rawNode = {
      name: nodeType,
      attrs: {}
    };
    if (createDom) {
      object._assignRawNode(document.createElementNS(_namespace, nodeType));
    }
    // shape only
    if (isGroup || !object.shape) {
      return;
    }
    if (object.shape.type !== "image") {
      object.setAttribute("fill", "none");
    }
    object.setAttribute("fill-opacity", "0");
    object.setAttribute("stroke", "none");
    object.setAttribute("stroke-opacity", "0");
    object.setAttribute("stroke-width", "1");
    object.setAttribute("stroke-linecap", "butt");
    object.setAttribute("stroke-linejoin", "miter");
    object.setAttribute("stroke-miterlimit", "4");
  };
  object._assignRawNode = (node) => {
    if (!node) {
      console.error("Empty rawNode assignment. This might be a mistake.");
    }
    object.rawNode = node;
    // delegate event listeners
    if (object._rawNode.pendingEvents) {
      object._rawNode.pendingEvents.forEach((event) => {
        event.handle = on(object.rawNode, event.type, event.callback);
      });
      object._rawNode.pendingEvents = null;
    }
  };
  object._setText = (text) => {
    object._rawNode.text = text;
    // DOM
    if (object.rawNode) {
      const r = object.rawNode;
      if (r.firstChild) {
        r.firstChild.nodeValue = text;
      }
      else {
        r.appendChild(document.createTextNode(text));
      }
    }
  };
  object._appendRawNodeChild = (shape, noDom) => {
    // check against double referencing is made elsewhere
    object._rawNode.children = object._rawNode.children || [];
    object._rawNode.children.push(shape._rawNode);
    // DOM
    !noDom && object.rawNode && object.rawNode.appendChild(shape.rawNode);
  };
  object._removeRawNodeChild = (shape) => {
    // check for referencing is made elsewhere
    const index = object._rawNode.children.indexOf(shape._rawNode);
    index !== -1 && object._rawNode.children.splice(index, 1);
    // DOM
    if (object.rawNode && shape.rawNode && object.rawNode === shape.rawNode.parentNode) {
      object.rawNode.removeChild(shape.rawNode);
    }
  };
  object._emptryRawNode = () => {
    object._rawNode.children = null;
    // DOM
    const r = object.rawNode;
    while (r && r.lastChild) {
      r.removeChild(r.lastChild);
    }
  };
  object._createDefsNode = () => {
    object._rawNode.children = object._rawNode.children || [];
    object._rawNode.children.push({
      name: "defs"
    });
    // DOM
    object.rawNode && object.rawNode.appendChild(document.createElementNS(xmlns.svg, "defs"));
  };
  object._getHTMLString = (params) => {
    function _processNode(n) {
      if (params && params.removeHidden && n.style && n.style.display === "none") {
        return ""; // element is hidden
      }
      let result = "<" + n.name;
      if (n.name === "svg") {
        result += ' xmlns="' + xmlns.svg + '"';
        result += ' xmlns:xlink="' + xmlns.xlink + '"';
      }
      // ATTRIBUTES
      for (const id in n.attrs) {
        result += " " + id + '="' + n.attrs[id] + '"';
      }
      // STYLE
      if (!params || !params.noStyle) {
        let style;
        for (const id in n.style) {
          style = style || "";
          const value = n.style[id];
          if (value != null) {
            style += id + ":" + n.style[id] + ";";
          }
        }
        if (style) {
          result += ' style="' + style + '"';
        }
      }
      // CONTENT
      let content = n.text ? encodeXML(n.text) : "";
      if (!content && n.children) {
        n.children.forEach((c) => {
          content += _processNode(c);
        });
      }
      result += ">" + content + "</" + n.name + ">";
      return result;
    }
    return _processNode(object._rawNode);
  };
  object.on = (type, callback) => {
    if (object.rawNode) {
      return on(object.rawNode, type, callback);
    }
    // create an event wrapper to later delegate it to the rawNode when created
    object._rawNode.pendingEvents = object._rawNode.pendingEvents || [];
    const eventWrapper = {
      type,
      callback,
      handle: null
    };
    object._rawNode.pendingEvents.push(eventWrapper);
    return {
      remove: () => {
        if (eventWrapper.handle) {
          // remove from rawNode
          eventWrapper.handle.remove();
        }
        else if (object._rawNode.pendingEvents) {
          const index = object._rawNode.pendingEvents.indexOf(eventWrapper);
          index !== -1 && object._rawNode.pendingEvents.splice(index, 1);
        }
      }
    };
  };
  object._destroyRawNode = () => {
    object._rawNode = null;
    object.rawNode = null;
  };
}
function _createGFXShape(source, isGroup = false) {
  const shape = source || {};
  _createRawNodeSupport(shape, isGroup);
  shape.getFill = () => shape.fillStyle;
  shape.setFill = (fill) => {
    if (!fill) {
      shape.setAttribute("fill", "none");
      shape.setAttribute("fill-opacity", "0");
      shape.fillStyle = null;
    }
    else {
      const color = toColor(fill);
      shape.setAttribute("fill", color.toCss());
      shape.setAttribute("fill-opacity", color.a + "");
      shape.setAttribute("fill-rule", "evenodd");
      shape.fillStyle = color;
    }
    return shape;
  };
  shape.getStroke = () => shape.strokeStyle;
  shape.setStroke = (stroke) => {
    shape.strokeStyle = stroke;
    if (!stroke) {
      // don't stroke
      shape.strokeStyle = null;
      shape.setAttribute("stroke", "none");
      shape.setAttribute("stroke-opacity", "0");
      return shape;
    }
    const s = (shape.strokeStyle = mixin({}, GFX_DEFAULTS.defaultStroke, stroke));
    const color = (s.color = toColor(s.color));
    // generate attributes
    if (s) {
      const w = s.width < 0 ? 0 : s.width;
      shape.setAttribute("stroke", color.toCss());
      shape.setAttribute("stroke-opacity", color.a + "");
      shape.setAttribute("stroke-width", (w || 0) + "");
      shape.setAttribute("stroke-linecap", s.cap);
      if (typeof s.join === "number") {
        shape.setAttribute("stroke-linejoin", "miter");
        shape.setAttribute("stroke-miterlimit", s.join + "");
      }
      else {
        shape.setAttribute("stroke-linejoin", s.join);
      }
      const da = s.style.toLowerCase();
      if (da !== "solid") {
        if (da in dasharray) {
          const daValue = dasharray[da].slice();
          let i;
          for (i = 0; i < daValue.length; ++i) {
            daValue[i] *= w;
          }
          if (s.cap !== "butt") {
            for (i = 0; i < daValue.length; i += 2) {
              daValue[i] -= w;
              if (daValue[i] < 1) {
                daValue[i] = 1;
              }
            }
            for (i = 1; i < daValue.length; i += 2) {
              daValue[i] += w;
            }
          }
          shape.setAttribute("stroke-dasharray", daValue.join(","));
        }
        else {
          shape.setAttribute("stroke-dasharray", da);
        }
      }
    }
    return shape;
  };
  shape.applyTransform = (matrix) => {
    shape.setTransform(gfxMatrixBuilder.multiply([shape.matrix, matrix]));
    return shape;
  };
  shape.setTransform = (matrixOrArray) => {
    shape.matrix = Array.isArray(matrixOrArray)
      ? gfxMatrixBuilder.multiply(matrixOrArray)
      : new GFXMatrix2D(matrixOrArray);
    return _applyTransform();
  };
  function _applyTransform() {
    const matrix = shape.matrix;
    if (matrix) {
      const tm = shape.matrix;
      shape.setAttribute("transform", "matrix(" +
        tm.xx.toFixed(8) +
        "," +
        tm.yx.toFixed(8) +
        "," +
        tm.xy.toFixed(8) +
        "," +
        tm.yy.toFixed(8) +
        "," +
        tm.dx.toFixed(8) +
        "," +
        tm.dy.toFixed(8) +
        ")");
    }
    else {
      shape.removeAttribute("transform");
    }
    return shape;
  }
  shape._setShape = (newShape) => {
    shape.shape = mixin({}, shape.shape, newShape);
    for (const i in shape.shape) {
      if (i !== "type" && i !== "path") {
        let v = shape.shape[i];
        // validate values
        if (i === "w" || i === "h") {
          v = v < 0 ? 0 : v;
        }
        else if (v == null && (i === "x" || i === "y")) {
          v = 0;
        }
        shape.setAttribute(_toAttrName(i), v);
      }
    }
    return shape;
  };
  shape.setClip = (clip) => {
    shape.clip = clip;
    let clipNode;
    // search for the clipNode in the parent (limitation) and remove it
    let clipId = shape.getAttribute("clip-path");
    if (clipId) {
      clipId = clipId.substr(5).replace(")", "");
      shape.parent._rawNode.children &&
        shape.parent._rawNode.children.some((c) => {
          if (c.name === "clipPath" && c.attrs.id === clipId) {
            clipNode = c;
            return true; // stop the cycle
          }
          return false;
        });
      if (clipNode) {
        const index = shape.parent._rawNode.children.indexOf(clipNode);
        index !== -1 && shape.parent._rawNode.children.splice(index, 1);
        if (shape.rawNode && clipNode) {
          for (let i = 0, len = shape.rawNode.parentNode.children.length; i < len; i++) {
            const child = shape.rawNode.parentNode.children[i];
            if (child.getAttribute("id") === clipId) {
              shape.rawNode.parentNode.removeChild(child);
              break;
            }
          }
        }
      }
    }
    if (clip) {
      const clipType = "w" in clip ? "rect" : "ellipse";
      const clipId = "gfx_clip" + ++clipCount;
      shape.setAttribute("clip-path", "url(#" + clipId + ")");
      const clipShape = {
        name: clipType,
        attrs: {}
      };
      for (const id in clip) {
        clipShape.attrs[_toAttrName(id)] = clip[id];
      }
      clipNode = {
        name: "clipPath",
        attrs: {
          id: clipId
        },
        children: [clipShape]
      };
      shape.parent._rawNode.children.splice(shape.parent._rawNode.children.indexOf(shape._rawNode), 0, clipNode);
      // DOM
      if (shape.rawNode) {
        const clipNode = document.createElementNS(xmlns.svg, "clipPath");
        clipNode.setAttribute("id", clipId);
        const clipShape = document.createElementNS(xmlns.svg, clipType);
        for (const id in clip) {
          clipShape.setAttribute(_toAttrName(id), clip[id]);
        }
        clipNode.appendChild(clipShape);
        shape.rawNode.parentNode.insertBefore(clipNode, shape.rawNode);
      }
    }
    else {
      shape.removeAttribute("clip-path");
    }
    return shape;
  };
  shape._destroy = () => {
    shape._destroyRawNode();
  };
  return shape;
}
function _createGFXRect() {
  const rect = {};
  _createGFXShape(rect);
  rect.shape = mixin({}, GFX_DEFAULTS.defaultRect);
  const setShape_base = rect._setShape;
  rect._setShape = (newShape) => {
    setShape_base(newShape);
    if (rect.shape.r != null) {
      rect.setAttribute("ry", rect.shape.r + "");
      rect.setAttribute("rx", rect.shape.r + "");
    }
    return rect;
  };
  rect.getBoundingBox = () => rect.shape;
  return rect;
}
function _createGFXLine() {
  const line = {};
  _createGFXShape(line);
  line.shape = mixin({}, GFX_DEFAULTS.defaultLine);
  line.getBoundingBox = () => ({
    x: Math.min(line.shape.x1, line.shape.x2),
    y: Math.min(line.shape.y1, line.shape.y2),
    w: Math.abs(line.shape.x2 - line.shape.x1),
    h: Math.abs(line.shape.y2 - line.shape.y1)
  });
  return line;
}
function _createGFXCircle() {
  const circle = {};
  _createGFXShape(circle);
  circle.shape = mixin({}, GFX_DEFAULTS.defaultCircle);
  circle.getBoundingBox = () => ({
    x: circle.shape.cx - circle.shape.r,
    y: circle.shape.cy - circle.shape.r,
    w: 2 * circle.shape.r,
    h: 2 * circle.shape.r
  });
  return circle;
}
function _createGFXEllipse() {
  const ellipse = {};
  _createGFXShape(ellipse);
  ellipse.shape = mixin({}, GFX_DEFAULTS.defaultEllipse);
  ellipse.getBoundingBox = () => ({
    x: ellipse.shape.cx - ellipse.shape.rx,
    y: ellipse.shape.cy - ellipse.shape.ry,
    w: 2 * ellipse.shape.rx,
    h: 2 * ellipse.shape.ry
  });
  return ellipse;
}
function _createGFXPolyline() {
  return _createGFXPolylineOrPolygon(true);
}
function _createGFXPolygon() {
  return _createGFXPolylineOrPolygon(false);
}
function _createGFXPolylineOrPolygon(isPolyline) {
  const polyline = {};
  _createGFXShape(polyline);
  polyline.shape = mixin({}, isPolyline ? GFX_DEFAULTS.defaultPolyline : GFX_DEFAULTS.defaultPolygon);
  polyline._setShape = (newShape) => {
    polyline.shape = mixin({}, polyline.shape, newShape);
    const attr = [];
    polyline.shape.points.forEach((p) => {
      attr.push(p.x.toFixed(8), p.y.toFixed(8));
    });
    polyline.setAttribute("points", attr.join(" "));
    return polyline;
  };
  polyline.getBoundingBox = () => {
    if (!polyline.shape.points.length) {
      return null;
    }
    // summary:
    //		returns the bounding box
    const ps = polyline.shape.points;
    const l = ps.length;
    let t = ps[0];
    const bbox = { l: t.x, t: t.y, r: t.x, b: t.y };
    for (let i = 1; i < l; ++i) {
      t = ps[i];
      if (bbox.l > t.x) {
        bbox.l = t.x;
      }
      if (bbox.r < t.x) {
        bbox.r = t.x;
      }
      if (bbox.t > t.y) {
        bbox.t = t.y;
      }
      if (bbox.b < t.y) {
        bbox.b = t.y;
      }
    }
    return {
      x: bbox.l,
      y: bbox.t,
      w: bbox.r - bbox.l,
      h: bbox.b - bbox.t
    };
  };
  return polyline;
}
const validSegments = {
  m: 2,
  l: 2,
  h: 1,
  v: 1,
  c: 6,
  s: 4,
  q: 4,
  t: 2,
  a: 7,
  z: 0
};
function _createGFXPath() {
  const path = {};
  _createGFXShape(path);
  path.shape = mixin({}, GFX_DEFAULTS.defaultPath);
  path.segments = [];
  path.segmented = false;
  path.absolute = true;
  const setShape_base = path._setShape;
  path._setShape = (newShape) => {
    setShape_base(newShape);
    path.segmented = false;
    path.segments = [];
    _confirmSegmented();
    if (path.shape.path) {
      path.setAttribute("d", path.shape.path);
    }
    else {
      path.removeAttribute("d");
    }
    return path;
  };
  path.moveTo = (x, y) => {
    // summary:
    //		forms a move segment
    _confirmSegmented();
    _pushSegment(path.absolute ? "M" : "m", [x, y]);
    return path;
  };
  path.lineTo = (x, y) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "L" : "l", [x, y]);
    return path;
  };
  path.hLineTo = (x) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "H" : "h", [x]);
    return path;
  };
  path.vLineTo = (y) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "V" : "v", [y]);
    return path;
  };
  path.arcTo = (rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "A" : "a", [
      rx,
      ry,
      x_axis_rotation,
      large_arc_flag ? 1 : 0,
      sweep_flag ? 1 : 0,
      x,
      y
    ]);
    return path;
  };
  path.curveTo = (x1, y1, x2, y2, x, y) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "C" : "c", [x1, y1, x2, y2, x, y]);
    return path;
  };
  path.smoothCurveTo = (x2, y2, x, y) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "S" : "s", [x2, y2, x, y]);
    return path;
  };
  path.qCurveTo = (x1, y1, x, y) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "Q" : "q", [x1, y1, x, y]);
    return path;
  };
  path.qSmoothCurveTo = (x, y) => {
    _confirmSegmented();
    _pushSegment(path.absolute ? "T" : "t", [x, y]);
    return path;
  };
  path.closePath = () => {
    _confirmSegmented();
    _pushSegment("Z", []);
    return path;
  };
  let pathArray;
  function _confirmSegmented() {
    if (!path.segmented) {
      const pathString = path.shape.path;
      // switch to non-updating version of path building
      pathArray = [];
      _setPath(pathString);
      // switch back to the string path
      path.shape.path = pathArray.join("");
      pathArray = null;
      // become segmented
      path.segmented = true;
    }
  }
  function _setPath(pathString) {
    const p = pathString.match(pathSvgRegExp);
    path.segments = [];
    path.absolute = true;
    if (!p) {
      return;
    }
    // create segments
    let action; // current action
    let args = []; // current arguments
    const l = p.length;
    for (let i = 0; i < l; i++) {
      let t = p[i];
      const x = parseFloat(t);
      if (x === 0 && t === "00") {
        // fix a special case: 00 are two separate zeros
        t = "0";
        p[i] = "0";
        i--;
      }
      if (isNaN(x)) {
        if (action) {
          _pushSegment(action, args);
        }
        args = [];
        action = t;
      }
      else {
        args.push(x);
      }
    }
    _pushSegment(action, args);
  }
  /**
   * Adds a segment.
   */
  function _pushSegment(action, args) {
    const group = validSegments[action.toLowerCase()];
    let segment;
    if (typeof group === "number") {
      if (group) {
        if (args.length >= group) {
          segment = { action, args: args.slice(0, args.length - (args.length % group)) };
          path.segments.push(segment);
          _updateWithSegment(segment);
        }
      }
      else {
        segment = { action, args: [] };
        path.segments.push(segment);
        _updateWithSegment(segment);
      }
    }
  }
  /**
   * Updates the bounding box of path with new segment.
   */
  function _updateWithSegment(segment) {
    // update internal variables: absolute, last
    switch (segment.action) {
      case "M":
      case "L":
      case "H":
      case "V":
      case "C":
      case "S":
      case "Q":
      case "T":
      case "A":
        path.absolute = true;
        break;
      case "m":
      case "l":
      case "h":
      case "v":
      case "c":
      case "s":
      case "q":
      case "t":
      case "a":
        path.absolute = false;
        break;
    }
    const n = segment.args;
    const l = n.length;
    _bboxCalculator && _bboxCalculator.updateBBox(segment);
    let i;
    // add an SVG path segment
    if (pathArray) {
      pathArray.push(segment.action);
      for (i = 0; i < l; ++i) {
        pathArray.push(_formatNumber(n[i], true));
      }
    }
    else {
      path.shape.path += segment.action;
      for (i = 0; i < l; ++i) {
        path.shape.path += _formatNumber(n[i], true);
      }
      path.setAttribute("d", path.shape.path);
    }
  }
  function _formatNumber(x, addSpace) {
    return x >= 0 && addSpace ? " " + x : x + "";
  }
  let _bboxCalculator;
  path.getBoundingBox = () => {
    _bboxCalculator = getBBoxCalculator();
    path.segmented = false;
    _confirmSegmented(); // let it recalculate the entire path with updating the bbox this time
    const sBbox = _bboxCalculator.getBBox();
    _bboxCalculator = null;
    return sBbox
      ? {
        x: sBbox.l,
        y: sBbox.t,
        w: sBbox.r - sBbox.l,
        h: sBbox.b - sBbox.t
      }
      : {
        x: NaN,
        y: NaN,
        w: NaN,
        h: NaN
      };
  };
  return path;
}
function _createGFXText() {
  const text = {};
  _createGFXShape(text);
  text.shape = mixin({}, GFX_DEFAULTS.defaultText);
  text._setShape = (newShape) => {
    text.shape = mixin({}, text.shape, newShape);
    const s = text.shape;
    text.setAttribute("x", s.x + "");
    text.setAttribute("y", s.y + "");
    text.setAttribute("text-anchor", s.align);
    text.setAttribute("text-decoration", s.decoration);
    text.setAttribute("rotate", s.rotated ? "90" : "0");
    text.setAttribute("kerning", s.kerning ? "auto" : "0");
    text.setAttribute("text-rendering", "auto");
    // update the text content
    text._setText(s.text);
    return text;
  };
  text.setFont = (newFont) => {
    text.font = newFont;
    text.setAttribute("font-style", newFont.fontStyle || "normal");
    //text.setAttribute("font-variant", f.variant);
    text.setAttribute("font-weight", newFont.fontWeight || "normal");
    text.setAttribute("font-size", (newFont.fontSize || 0) + "px");
    text.setAttribute("font-family", newFont.fontFamily || "Verdana");
    return text;
  };
  text.getBoundingBox = () => null; // not supported (need to measure the text using the browser)
  return text;
}
function _createGFXImage() {
  const image = {};
  _createGFXShape(image);
  image.shape = mixin({}, GFX_DEFAULTS.defaultImage);
  image._setShape = (newShape) => {
    image.shape = mixin({}, image.shape, newShape);
    for (const i in image.shape) {
      if (i !== "type" && i !== "src") {
        let v = image.shape[i];
        if (i === "w" || i === "h") {
          v = v < 0 ? 0 : v;
        }
        image.setAttribute(_toAttrName(i), v);
      }
    }
    image.setAttribute("preserveAspectRatio", "none");
    image._setAttributeNS(xmlns.xlink, "xlink:href", image.shape.src);
    return image;
  };
  image.getBoundingBox = () => image.shape /* all properties are ensured upon initialization, the default ones were mixed in */;
  return image;
}
function _createGFXContainer(source, isSurface = false) {
  const container = source || {};
  container.children = [];
  let _batch = 0;
  let _fragment;
  container.openBatch = () => {
    if (!_batch &&
      container.rawNode /* otherwise batching doesn't make sence, since we are working in the DOM JSON mode */) {
      _fragment = document.createDocumentFragment();
    }
    ++_batch;
    return container;
  };
  container.closeBatch = () => {
    _batch = _batch > 0 ? --_batch : 0;
    if (_fragment && !_batch) {
      // If _fragment was created, it means we have rawNode.
      // There is no need to update _rawNode, because it was done in the add() method.
      container.rawNode.appendChild(_fragment);
      _fragment = null;
    }
    return container;
  };
  container.add = (shape) => {
    if (shape.parent) {
      throw new Error("The shape is already added.");
    }
    if (_fragment) {
      // DOM
      // batch mode
      _fragment.appendChild(shape.rawNode);
      container._appendRawNodeChild(shape, true /* no dom */);
    }
    else {
      container._appendRawNodeChild(shape, false);
    }
    container.children.push(shape);
    shape.parent = container;
    // update clipnode with new parent
    shape.setClip(shape.clip);
    return container;
  };
  container.remove = (shape) => {
    if (shape.parent !== container) {
      throw new Error("Shape doesn't belong to this parent.");
    }
    // removing either a batched child or the one added before
    container._removeRawNodeChild(shape);
    // DOM
    // batch mode
    if (_fragment && _fragment === shape.rawNode.parentNode) {
      _fragment.removeChild(shape.rawNode);
    }
    const index = container.children.indexOf(shape);
    index !== -1 && container.children.splice(index, 1);
    shape.parent = null;
    return container;
  };
  container.clear = (destroy) => {
    container._emptryRawNode();
    // restore the defs node
    isSurface && container._createDefsNode();
    let shape;
    for (let i = 0; i < container.children.length; ++i) {
      shape = container.children[i];
      shape.parent = null;
      destroy && shape._destroy();
    }
    container.children = [];
    return container;
  };
  container.getBoundingBox = () => {
    if (!container.children || !container.children.length) {
      return null;
    }
    // if this is a composite shape, then sum up all the children
    let result = null;
    container.children.forEach((shape) => {
      let bb = shape.getBoundingBox();
      if (!bb) {
        return; // not supported or empty
      }
      const ct = shape.matrix;
      if (ct) {
        bb = gfxMatrixBuilder.multiplyRectangle(ct, bb);
      }
      if (result) {
        // merge two bbox
        result.x = Math.min(result.x, bb.x);
        result.y = Math.min(result.y, bb.y);
        result.endX = Math.max(result.endX, bb.x + bb.w);
        result.endY = Math.max(result.endY, bb.y + bb.h);
      }
      else {
        // first bbox
        result = {
          x: bb.x,
          y: bb.y,
          endX: bb.x + bb.w,
          endY: bb.y + bb.h,
          w: null,
          h: null
        };
      }
    });
    if (result) {
      result.w = result.endX - result.x;
      result.h = result.endY - result.y;
    }
    // clean up
    result.endX = undefined;
    result.endY = undefined;
    return result;
  };
  return container;
}
function _createGFXCreator(source, isSurface = false) {
  const creator = source || {};
  _createGFXContainer(creator, isSurface);
  creator.createGroup = () => _processObject(_createGFXGroup(), "g");
  creator.createRect = (options) => _processObject(_createGFXRect(), "rect", options);
  creator.createLine = (options) => _processObject(_createGFXLine(), "line", options);
  creator.createCircle = (options) => _processObject(_createGFXCircle(), "circle", options);
  creator.createEllipse = (options) => _processObject(_createGFXEllipse(), "ellipse", options);
  creator.createPath = (options) => _processObject(_createGFXPath(), "path", options);
  creator.createPolyline = (options) => _processObject(_createGFXPolyline(), "polyline", options);
  creator.createPolygon = (options) => _processObject(_createGFXPolygon(), "polygon", options);
  creator.createText = (options) => _processObject(_createGFXText(), "text", options);
  creator.createImage = (options) => _processObject(_createGFXImage(), "image", options);
  creator.createShape = (shape) => {
    switch (shape.type) {
      case GFX_DEFAULTS.defaultPath.type:
        return creator.createPath(shape);
      case GFX_DEFAULTS.defaultRect.type:
        return creator.createRect(shape);
      case GFX_DEFAULTS.defaultLine.type:
        return creator.createLine(shape);
      case GFX_DEFAULTS.defaultCircle.type:
        return creator.createCircle(shape);
      case GFX_DEFAULTS.defaultEllipse.type:
        return creator.createEllipse(shape);
      case GFX_DEFAULTS.defaultPolyline.type:
        return creator.createPolyline(shape);
      case GFX_DEFAULTS.defaultPolygon.type:
        return creator.createPolygon(shape);
      case GFX_DEFAULTS.defaultImage.type:
        return creator.createImage(shape);
      case GFX_DEFAULTS.defaultText.type:
        return creator.createText(shape);
    }
    return null;
  };
  function _processObject(shape, nodeType, rawShape) {
    if (!creator._rawNode && !creator.rawNode) {
      return null; // destroyed
    }
    shape._setRawNode(xmlns.svg, nodeType, !!creator.rawNode);
    shape._setShape(rawShape);
    creator.add(shape);
    return shape;
  }
  return creator;
}
function _createGFXSurface() {
  const surface = {};
  surface.isSurface = true;
  _createRawNodeSupport(surface);
  _createGFXCreator(surface, true);
  surface.setDimensions = (width, height) => {
    if (!surface._rawNode && !surface.rawNode) {
      return surface; // destroyed
    }
    let w = width < 0 ? 0 : width, h = height < 0 ? 0 : height;
    if (surface.roundDimensions) {
      w = Math.round(w * 2) / 2;
      h = Math.round(h * 2) / 2;
    }
    surface.setAttribute("width", w + "");
    surface.setAttribute("height", h + "");
    return surface;
  };
  surface.getDimensions = () => ({
    w: parseFloat(surface.getAttribute("width")),
    h: parseFloat(surface.getAttribute("height"))
  });
  surface.getContentBoundingBoxInViewPort = () => {
    const sd = surface.getDimensions();
    const viewBox = viewBoxFromString(surface.getAttribute("viewBox"), sd.w, sd.h);
    return getBoundingBoxInViewPort(sd, surface.getBoundingBox(), viewBox, surface.getAttribute("preserveAspectRatio"));
  };
  surface._render = () => {
    if (surface.rawNode) {
      return; // already rendered
    }
    const renderParent = surface._parent || document.createElement("div"); // if there is no parent yet, render off screen
    renderParent.innerHTML = surface._getHTMLString();
    surface._assignRawNode(renderParent.children[0]);
  };
  // override
  const _assignRawNodeBase = surface._assignRawNode;
  surface._assignRawNode = (node) => {
    _assignRawNodeBase(node);
    function _assignRawNodes(container) {
      let index = 0;
      container.children.forEach((c) => {
        let rawChild = container.rawNode.children[index];
        while (rawChild.nodeName === "defs" || rawChild.nodeName === "clipPath") {
          rawChild = container.rawNode.children[++index];
        }
        index++;
        c._assignRawNode(rawChild);
        c.children && _assignRawNodes(c);
      });
    }
    _assignRawNodes(surface);
  };
  surface.destroy = () => {
    surface._destroyRawNode();
    if (surface._parent) {
      surface._parent.innerHTML = "";
      surface._parent = null;
    }
  };
  return surface;
}
/**
 * @param parentNode If passed, the library will work on live DOM nodes, otherwise, deferred rendering can be used.
 */
function createGFXSurface(parentNode, width, height, roundDimensions) {
  const s = _createGFXSurface();
  s.roundDimensions = roundDimensions;
  s._setRawNode(xmlns.svg, "svg", !!parentNode);
  s.setAttribute("overflow", "hidden");
  s.setDimensions(width, height);
  s.setStyle({
    position: "absolute",
    left: 0,
    top: 0
  });
  s._createDefsNode();
  if (parentNode) {
    s._parent = parentNode;
    parentNode.appendChild(s.rawNode);
  }
  return s;
}
function _createGFXGroup() {
  const group = {};
  _createGFXShape(group, true);
  _createGFXCreator(group);
  group._destroy = () => {
    group.clear(true);
    group._destroyRawNode();
  };
  return group;
}

const DEFAULT_POSITION = ["after-centered", "before-centered"];
let Tooltip = class Tooltip extends TemplatedWidget {
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class='esri4GETooltip esri4GETooltipLeft'>
    <div class='esri4GETooltipContainer esri4GETooltipContents' data-attach-point='_containerNode'></div>
    <div class='esri4GETooltipConnector' data-attach-point='_connectorNode'></div>
  </div>`;
    /**
     * Show duraction. In milliseconds.
     */
    this.duration = 200;
  }
  postCreate() {
    place(this.domNode, document.body);
  }
  /**
   * Shows a tooltip with the specified content.
   * @param textOrNodeOrWidget     Tooltip content.
   * @param aroundNode            Dom node.
   * @param position              String[].
   */
  show(textOrNodeOrWidget, aroundNode, position) {
    this._stopAnimation();
    this._lastRenderFunc = () => this._render(textOrNodeOrWidget, aroundNode, position);
    this._lastRenderFunc();
    // show it
    if (typeof this.duration === "number") {
      this.domNode.style.opacity = "0";
      this._fadeInHandle = animateFadeIn({ node: this.domNode, duration: this.duration });
    }
  }
  _render(textOrNodeOrWidget, aroundNode, position) {
    if (typeof textOrNodeOrWidget === "string") {
      this._containerNode.innerHTML = textOrNodeOrWidget;
    }
    else {
      // our code
      this._containerNode.innerHTML = "";
      place(textOrNodeOrWidget.domNode || textOrNodeOrWidget, this._containerNode);
    }
    const pos = placeAround(this.domNode, aroundNode, position && position.length ? position : DEFAULT_POSITION, this._orient.bind(this));
    const aroundNodeCoords = pos.aroundNodePos;
    if (pos.corner.charAt(0) === "M" && pos.aroundCorner.charAt(0) === "M") {
      this._connectorNode.style.top =
        aroundNodeCoords.y + ((aroundNodeCoords.h - this._connectorNode.offsetHeight) >> 1) - pos.y + "px";
      this._connectorNode.style.left = "";
    }
    else if (pos.corner.charAt(1) === "M" && pos.aroundCorner.charAt(1) === "M") {
      this._connectorNode.style.left =
        aroundNodeCoords.x + ((aroundNodeCoords.w - this._connectorNode.offsetWidth) >> 1) - pos.x + "px";
    }
    else {
      this._connectorNode.style.left = "";
      this._connectorNode.style.top = "";
    }
    this._drawBackground();
  }
  updatePosition() {
    this._lastRenderFunc && this._lastRenderFunc();
  }
  _orient(node, aroundCorner, tooltipCorner, spaceAvailable, aroundNodeCoords) {
    this._connectorNode.style.top = ""; //reset to default
    const widthAvailable = spaceAvailable.w;
    const heightAvailable = spaceAvailable.h;
    node.className =
      "esri4GETooltip " +
        {
          "MR-ML": "esri4GETooltipRight",
          "ML-MR": "esri4GETooltipLeft",
          "TM-BM": "esri4GETooltipAbove",
          "BM-TM": "esri4GETooltipBelow",
          "BL-TL": "esri4GETooltipBelow esri4GETooltipABLeft",
          "TL-BL": "esri4GETooltipAbove esri4GETooltipABLeft",
          "BR-TR": "esri4GETooltipBelow esri4GETooltipABRight",
          "TR-BR": "esri4GETooltipAbove esri4GETooltipABRight",
          "BR-BL": "esri4GETooltipRight",
          "BL-BR": "esri4GETooltipLeft"
        }[(this._orientKey = aroundCorner + "-" + tooltipCorner)] +
        " " +
        this.class;
    this.domNode.style.width = "auto";
    const size = position(this.domNode);
    size.w = Math.ceil(size.w);
    const width = Math.min(Math.max(widthAvailable, 1), size.w);
    setMarginBox(this.domNode, { w: width });
    if (tooltipCorner.charAt(0) === "B" && aroundCorner.charAt(0) === "B") {
      const bb = position(node);
      const tooltipConnectorHeight = this._connectorNode.offsetHeight;
      if (bb.h > heightAvailable) {
        const aroundNodePlacement = heightAvailable - ((aroundNodeCoords.h + tooltipConnectorHeight) >> 1);
        this._connectorNode.style.top = aroundNodePlacement + "px";
        this._connectorNode.style.bottom = "";
      }
      else {
        this._connectorNode.style.bottom =
          Math.min(Math.max(aroundNodeCoords.h / 2 - tooltipConnectorHeight / 2, 0), bb.h - tooltipConnectorHeight) +
            "px";
        this._connectorNode.style.top = "";
      }
    }
    else {
      this._connectorNode.style.top = "";
      this._connectorNode.style.bottom = "";
    }
    this._drawBackground();
    return Math.max(0, size.w - widthAvailable);
  }
  _drawBackground() {
    if (!this._orientKey) {
      return;
    }
    const customStyle = typeof this.customStyle === "function" ? this.customStyle() : this.customStyle;
    const w = this.domNode.clientWidth;
    const h = this.domNode.clientHeight;
    const parentBox = position(this.domNode);
    const tipBox = position(this._connectorNode);
    const contentBox = position(this._containerNode);
    tipBox.x -= parentBox.x;
    tipBox.y -= parentBox.y;
    contentBox.x -= parentBox.x;
    contentBox.y -= parentBox.y;
    // give room for the border
    contentBox.x += 1;
    contentBox.y += 1;
    contentBox.w -= 2;
    contentBox.h -= 2;
    this._surface && this._surface.destroy();
    this._surfaceContainer && destroy(this._surfaceContainer);
    const surfaceContainer = (this._surfaceContainer = create("div", { class: "esriGEAbsoluteStretched" }, this.domNode, "first"));
    surfaceContainer.style.pointerEvents = "none";
    const s = (this._surface = createGFXSurface(surfaceContainer, w, h));
    const points = [
      { x: contentBox.x, y: contentBox.y },
      { x: contentBox.x + contentBox.w, y: contentBox.y },
      { x: contentBox.x + contentBox.w, y: contentBox.y + contentBox.h },
      { x: contentBox.x, y: contentBox.y + contentBox.h },
      { x: contentBox.x, y: contentBox.y }
    ];
    const tipCx = tipBox.x + tipBox.w / 2;
    const tipCy = tipBox.y + tipBox.h / 2;
    const tipSize = 5;
    let tipPoints;
    switch (this._orientKey) {
      case "BL-TL":
      case "BM-TM":
      case "BR-TR":
        // below
        tipPoints = [
          { x: tipCx - tipSize, y: contentBox.y },
          { x: tipCx, y: tipCy },
          { x: tipCx + tipSize, y: contentBox.y }
        ];
        points.splice.apply(points, [1, 0].concat(tipPoints));
        break;
      case "ML-MR":
      case "BL-BR":
        // left
        tipPoints = [
          { x: contentBox.x + contentBox.w, y: tipCy - tipSize },
          { x: tipCx, y: tipCy },
          { x: contentBox.x + contentBox.w, y: tipCy + tipSize }
        ];
        points.splice.apply(points, [2, 0].concat(tipPoints));
        break;
      case "TM-BM":
      case "TL-BL":
      case "TR-BR":
        // above
        tipPoints = [
          { x: tipCx + tipSize, y: contentBox.y + contentBox.h },
          { x: tipCx, y: tipCy },
          { x: tipCx - tipSize, y: contentBox.y + contentBox.h }
        ];
        points.splice.apply(points, [3, 0].concat(tipPoints));
        break;
      case "MR-ML":
      case "BR-BL":
        // right
        tipPoints = [
          { x: contentBox.x, y: tipCy + tipSize },
          { x: tipCx, y: tipCy },
          { x: contentBox.x, y: tipCy - tipSize }
        ];
        points.splice.apply(points, [4, 0].concat(tipPoints));
        break;
    }
    const p = s.createPolyline({ points });
    const fillColor = (customStyle && customStyle.backgroundColor) || "white";
    const borderColor = (customStyle && customStyle.borderColor) || "#d3d3d3";
    p.setFill(fillColor).setStroke({
      color: borderColor,
      width: 1,
      join: "round"
    });
    if (customStyle && customStyle.color) {
      this._containerNode.style.color = customStyle.color;
    }
  }
  /**
   * Hides the shown tooltip.
   */
  hide() {
    this._stopAnimation();
    if (typeof this.duration === "number") {
      this._fadeOutHandle = animateFadeOut({ node: this.domNode, duration: this.duration });
    }
  }
  _stopAnimation() {
    this._fadeInHandle && this._fadeInHandle.stop();
    this._fadeInHandle = null;
    this._fadeOutHandle && this._fadeOutHandle.stop();
    this._fadeOutHandle = null;
  }
};
__decorate([
  y$r()
], Tooltip.prototype, "duration", void 0);
__decorate([
  y$r()
], Tooltip.prototype, "customStyle", void 0);
Tooltip = __decorate([
  i$X()
], Tooltip);

// geoenrichment.utils
//--------------------------------------------------------------------------
//
// Tooltip widget
//
//--------------------------------------------------------------------------
const activeTooltipNodes = [];
const TooltipBuilder = {
  show(params) {
    const textOrNodeOrWidget = params.textOrNodeOrWidget;
    const aroundNode = params.aroundNode;
    let position = params.position;
    const classes = params.classes;
    const style = params.style;
    // do not destroy, only hide shown tooltips to de-clutter the view
    // tooltips will be destroyed elsewhere in the utility class
    activeTooltipNodes.forEach((nd) => nd._shownTooltip && (nd._shownTooltip.domNode.style.display = "none"));
    activeTooltipNodes.length = 0;
    if (typeof position === "string") {
      position = [position];
    }
    const map = { after: "after-centered", before: "before-centered" };
    position = position && position.map((val) => map[val] || val);
    const tooltip = new Tooltip({
      class: Array.isArray(classes) ? classes.join(" ") : classes,
      customStyle: style,
      duration: params.duration
    });
    tooltip.show(textOrNodeOrWidget, aroundNode, position);
    aroundNode._shownTooltip = tooltip;
    if (!params.keepWhenOtherShown) {
      activeTooltipNodes.push(aroundNode);
    }
    return tooltip;
  },
  hide(aroundNode) {
    if (!aroundNode) {
      return;
    }
    aroundNode._shownTooltip && aroundNode._shownTooltip.destroy();
    aroundNode._shownTooltip = undefined;
    const index = activeTooltipNodes.indexOf(aroundNode);
    index !== -1 && activeTooltipNodes.splice(index, 1);
  }
};
/**
 * Sets a tooltip to node, that will be shown on mouse over.
 * @param node                                      Dome node. Required.
 * @param textOrFunc                                String|Function() => String or Widget.
 * @param params                                    Object. See util.showTooltipForNode() method for details.
 *
 * Other parameters:
 * @param params.showTooltip                        Boolean. If true, the tooltip will be shown right away.
 *
 * @returns a signal with remove(), suspend(), resume() and refresh() methods.
 */
function setTooltipToNode(node, textOrFunc, params) {
  const nd = node;
  params = params || {};
  if (!nd) {
    return null;
  }
  // clean up
  hideTooltipForNode(nd);
  nd.__setTooltipToNodeMouseEnterHandle && nd.__setTooltipToNodeMouseEnterHandle.remove();
  if (!textOrFunc) {
    return null;
  }
  let isSuspended = false;
  function showTooltipFunction() {
    !isSuspended && !isTooltipShown(nd) && showTooltipForNode(nd, textOrFunc, params);
  }
  if (isMobileDevice()) {
    nd.__setTooltipToNodeMouseEnterHandle = addNoDragClickHandler(nd, showTooltipFunction);
  }
  else {
    nd.__setTooltipToNodeMouseEnterHandle = on(nd, "over" /* former mouse.enter */, showTooltipFunction);
  }
  if (params.showTooltip) {
    showTooltipFunction();
  }
  return {
    remove() {
      textOrFunc = null;
      hideTooltipForNode(nd);
    },
    suspend() {
      hideTooltipForNode(nd);
      isSuspended = true;
    },
    resume() {
      isSuspended = false;
    },
    refresh() {
      nd._shownTooltip && showTooltipFunction();
    }
  };
}
//--------------------------------------------------------------------------
//
// Show tooltip
//
//--------------------------------------------------------------------------
/**
 * Shows a tooltip for a node.
 * @param node                                      Dome node. Required.
 * @param textNodeFunc                                String|Function() => String or Widget.
 * @param params.stayOnHover                        Boolean.
 * @param params.hideOnClick                        Boolean.
 * @param params.classes                            Array|String.
 * @param params.position                           Array|String. Default ["after", "before"].
 * @param params.ignoreNodeRemoval                  Boolean. If true, the tooltip will not be hidden even after the node is removed from the layout.
 * @param params.ignoreMousePosition                Boolean. If true, the mouse doesn't have to be over the tooltip or its node all the time.
 * @param params.textAlign                          String: start | center | end. Default "center".
 * @param params.style                              Object | Function() => Object.
 * @param params.notRestricted                      Boolean. If true, a special CSS class "notRestricted" will be applied.
 *                                                  Use it to specify that the tooltip should be wider than normal.
 *
 * @returns a new tooltip instance or null.
 */
function showTooltipForNode(node, textNodeFunc, params) {
  const nd = node;
  params = params || {};
  params.stayOnHover = params.stayOnHover == null ? "hyperlink" : params.stayOnHover;
  let stayOnHover = params.stayOnHover;
  if (!nd) {
    return null;
  }
  hideTooltipForNode(nd);
  let textOrNode = typeof textNodeFunc === "function" ? textNodeFunc() : textNodeFunc;
  if (!textOrNode) {
    return null;
  }
  if (params.textAlign && typeof textOrNode === "string") {
    textOrNode =
      "<div class='" +
        (params.textAlign === "start"
          ? "esriGEStart esriGEFlexStart"
          : params.textAlign === "end"
            ? "esriGEEnd esriGEFlexEnd"
            : "") +
        "'>" +
        textOrNode +
        "</div>";
  }
  // detect if should stay based on the presence of a hyperlink in the text
  if (params.stayOnHover === "hyperlink") {
    let text;
    if (typeof textOrNode === "string") {
      text = textOrNode;
    }
    else if (textOrNode instanceof HTMLElement) {
      text = textOrNode.outerHTML;
    }
    else if (textOrNode.domNode instanceof HTMLElement) {
      text = textOrNode.domNode.outerHTML;
    }
    stayOnHover = text && /href=|esriGELink|esri4GELink/.test(text);
  }
  addClass(nd, "esri4GESimpleTextTooltip");
  function _isMouseOver(node, event) {
    return isMouseOver(node, { checkAllChildren: true, event });
  }
  // SHOW
  let shownTooltip;
  function _showTooltip() {
    hideTooltipForNode(nd);
    // Define default params
    let classes = Array.isArray(params.classes) ? params.classes.join(" ") : params.classes;
    classes = classes || "";
    if (!stayOnHover) {
      // if doesn't have to stay on hover, shouldn't get in the way of the mouse cursor
      classes += " esriGENonInteractable";
    }
    if (params.notRestricted) {
      classes += " notRestricted";
    }
    shownTooltip = TooltipBuilder.show({
      textOrNodeOrWidget: textOrNode,
      aroundNode: nd,
      position: ["after", "before"],
      classes,
      style: params.style,
      duration: params.duration,
      keepWhenOtherShown: params.keepWhenOtherShown
    });
  }
  _showTooltip();
  // HIDE
  // Detect when need to hide
  // case 1: mouse left
  if (!params.ignoreMousePosition) {
    if (!isMobileDevice()) {
      nd.__setTooltipToNodeMouseLeaveHandle = once(nd, "mouseout" /* former mouse.leave */, () => {
        // not sure why mouseout can trigger for a node even though the mouse can be hovering it
        !stayOnHover && !_isMouseOver(nd) && hideTooltipForNode(nd);
      });
    }
    else {
      nd.__setTooltipToNodeMouseLeaveHandle = on(document.body, "press", (event) => {
        if (_isMouseOver(nd, event)) {
          return;
        }
        hideTooltipForNode(nd);
      });
    }
  }
  // case 2: node was removed from the layout
  if (!params.ignoreNodeRemoval) {
    nd.__setTooltipToNodeInLayoutHandle = setInterval(() => {
      // fallback in case "mouseout" didn't trigger
      !isNodeInLayout(nd) && hideTooltipForNode(nd);
    }, 50);
  }
  if (!isMobileDevice()) {
    // case 3: mouse is not over the node
    nd.__setTooltipToNodeMouseOverHandle = setInterval(() => {
      // fallback in case "mouseout" didn't trigger
      !params.ignoreMousePosition &&
        (!stayOnHover || !_isMouseOver(shownTooltip.domNode)) &&
        !_isMouseOver(nd) &&
        hideTooltipForNode(nd);
    }, 300);
    // Click action
    nd.__setTooltipToNodeClickHandle = on(nd, "click", () => {
      params.hideOnClick ? hideTooltipForNode(nd) : !nd._shownTooltip && _showTooltip();
    });
    // Listen to master
    if (stayOnHover) {
      nd.__setTooltipToNodeMouseLeaveMasterHandle = on(shownTooltip.domNode, "out" /* former mouse.leave */, () => {
        // not sure why mouseout can trigger for a node even though the mouse can be hovering it
        !_isMouseOver(shownTooltip.domNode) && hideTooltipForNode(nd);
      });
    }
  }
  // auto-correct position
  if (params.autoAdjustPosition) {
    let pos = position(nd);
    nd.__setTooltipToNodeAdjustHandle = setInterval(() => {
      const newPos = position(nd);
      if (pos.x !== newPos.x || pos.y !== newPos.y) {
        pos = newPos;
        nd._shownTooltip && nd._shownTooltip.updatePosition();
      }
    }, 30);
  }
  return nd._shownTooltip;
}
function isTooltipShown(node) {
  const nd = node;
  return !!(nd && nd._shownTooltip);
}
//--------------------------------------------------------------------------
//
// Hide tooltip
//
//--------------------------------------------------------------------------
/**
 * Hides shown tooltip on the given node.
 */
function hideTooltipForNode(node) {
  const nd = node;
  if (!nd) {
    return;
  }
  // remove the native tooltip
  nd.removeAttribute("title");
  removeClass(nd, "esri4GESimpleTextTooltip");
  TooltipBuilder.hide(nd);
  nd.__setTooltipToNodeMouseLeaveHandle && nd.__setTooltipToNodeMouseLeaveHandle.remove();
  clearInterval(nd.__setTooltipToNodeInLayoutHandle);
  clearInterval(nd.__setTooltipToNodeMouseOverHandle);
  nd.__setTooltipToNodeClickHandle && nd.__setTooltipToNodeClickHandle.remove();
  nd.__setTooltipToNodeMouseLeaveMasterHandle && nd.__setTooltipToNodeMouseLeaveMasterHandle.remove();
  nd.__setTooltipToNodeAdjustHandle && clearInterval(nd.__setTooltipToNodeAdjustHandle);
}
//--------------------------------------------------------------------------
//
// Auto-tooltip
//
//--------------------------------------------------------------------------
let autoTooltipNode;
let shownAutoTooltipInfo;
/**
 * Specific to `esriGETrimWithEllipses` CSS class.
 */
function autoTooltip(root) {
  return on(root, "over", (event) => {
    const _this = event.target;
    if (_this === autoTooltipNode || !containsClass(_this, "esriGETrimWithEllipses")) {
      return;
    }
    function _cleanUp() {
      if (shownAutoTooltipInfo) {
        TooltipBuilder.hide(autoTooltipNode);
        shownAutoTooltipInfo.mouseOutH.remove();
        shownAutoTooltipInfo.mouseMoveH.remove();
        shownAutoTooltipInfo = null;
      }
      autoTooltipNode = null;
    }
    if (_this.offsetWidth < _this.scrollWidth) {
      _cleanUp();
      autoTooltipNode = _this;
      TooltipBuilder.show({
        textOrNodeOrWidget: autoTooltipNode.textContent,
        aroundNode: autoTooltipNode,
        position: ["above", "below"]
      });
      shownAutoTooltipInfo = {
        mouseOutH: once(autoTooltipNode, ["mouseout", "mousedown", "touchstart"], _cleanUp),
        mouseMoveH: on(document.body, "mousemove", () => {
          if (!isMouseOver(autoTooltipNode)) {
            _cleanUp();
          }
        })
      };
    }
  });
}

// geoenrichment.utils
class FlowListDefaultItemRenderer {
  constructor(params) {
    // additional classes
    this.itemClass = "";
    this.itemClassSelected = "";
    this.labelClass = "";
    this.createLabelNode = false; // Boolean. If true, a separate dom node for the label will be created.
    this.createImageAfterLabel = false; // Boolean. If true, label will be created first.
    this.makeLabelFillSpace = false;
    mixin(this, params);
  }
  // creates a visual presentation and adds it to the listNode
  // Note: if you don't add it to the listNode it won't be in the list
  // The following item properties are supported:
  // IMAGE
  // item.imageUrl                String.
  // item.imageClass              String.
  // LABEL
  // item[list.labelProperty]
  // item.labelClass              String.
  // OTHER
  // item.tooltip                 String.
  // item.isSeparator             Boolean.
  // item.isLink                  Boolean.
  // item.enabled                 Boolean. Also supported by FlowList.js.
  // item.itemClass               String.
  // item.style                   String.
  createPresentation(item, isSelected, listNode, list, _itemWrapper /*Shallow copy of the item. In case you want to add some custom properties to the item*/) {
    if (item.isSeparator) {
      const sepRoot = create("div", { class: "flowList_listSeparator" }, listNode);
      if (item.hidden) {
        hide(sepRoot);
      }
      return sepRoot;
    }
    const root = create("div", { class: "listItem " + (this.itemClass || " ") + (item.itemClass || ""), style: item.style }, listNode);
    if (item.isLink) {
      addClass(root, "esri4GELink");
    }
    if (item.enabled === false) {
      addClass(root, "disabled");
    }
    this._createParts(item, root, list);
    this._setTooltip(item, root, list);
    this.selectPresentation(root, isSelected, item);
    if (item.hidden) {
      hide(root);
    }
    // Example:
    // this is how you can add a destroy function to a wrapper. It will be called on the next clear/refresh.
    // itemWrapper.destroyPresentation = function(){};
    return root;
  }
  _setTooltip(item, root, _list) {
    if (item.tooltip) {
      setTooltipToNode(root, item.tooltip);
    }
  }
  _createParts(item, root, list) {
    let labelCreated;
    if (this.createImageAfterLabel) {
      this._createLabel(item, root, list);
      labelCreated = true;
    }
    this._createImage(item, root, list);
    !labelCreated && this._createLabel(item, root, list);
  }
  _createImage(item, root, list) {
    const imageNode = this._createImageNode(item, root, list);
    if (!imageNode) {
      return;
    }
    if (item.imageClass) {
      addClass(imageNode, item.imageClass);
    }
    if (item.imageUrl) {
      imageNode.style.backgroundImage = "url(" + item.imageUrl + ");";
    }
  }
  _createImageNode(_item, root, _list) {
    return root;
  }
  /**
   * @returns New label node or root.
   */
  _createLabel(item, root, list) {
    if (this.createLabelNode) {
      const labelNode = create("div", { textContent: item[list.labelProperty], class: "esriGETrimWithEllipses listItemLabel" }, root);
      if (item.labelClass) {
        addClass(labelNode, item.labelClass);
      }
      if (this.labelClass) {
        addClass(labelNode, this.labelClass);
      }
      list.autoDetectUrlsInLabels && this._tryConvertToUrls(labelNode);
      if (this.makeLabelFillSpace) {
        labelNode.style.flexGrow = "1";
      }
      return labelNode;
    }
    if (item[list.labelProperty]) {
      root.textContent = item[list.labelProperty];
      list.autoDetectUrlsInLabels && this._tryConvertToUrls(root);
    }
    return null;
  }
  _tryConvertToUrls(labelNode) {
    const m = labelNode.innerHTML.match(IS_URL_RE);
    const url = m && m[0];
    if (url) {
      labelNode.innerHTML = labelNode.innerHTML.replace(url, "<a href='" + toHttpsUrl(url) + "' target='_blank'>" + url + "</a>");
    }
  }
  selectPresentation(root, value, _item) {
    toggleClass(root, "listItemSelected " + this.itemClassSelected, value);
  }
}

/**
 * Flexible list to render items.
 * - You can use an array of items or store as data.
 * - If store is used, the list can work in the on-demand mode. This allows to view up to 1,000,000 items.
 *
 * @example
 * 1. Create from items.
 *
 * new FlowList({
 *  idProperty: "id", // default is "value"
 *  items: [{ id: "0", label: "First item"}, ...]
 * }).placeAt(node);
 *
 * 2. Create from a store.
 *
 * new FlowList({
 *  store: new Memory({ idProperty: "id", data: [{ id: "0", label: "First item"}, ...] })
 * }).placeAt(node);
 *
 * 3. Using a custom item renderer.
 *
 * class MyItemRenderer extends FlowListDefaultItemRenderer {
 *  // overide
 *  createPresentation(item: FlowListItem, isSelected: boolean, listNode: HTMLElement): HTMLElement {
 *    const root = super.createPresentation(item, isSelected, listNode);
 *
 *    // custom changes
 *    root.style.fontSize = "16px";
 *
 *    return root;
 *  }
 *
 *  // override
 *  selectPresentation(root: HTMLElement, isSelected: boolean): void {
 *    root.style.color = isSelected ? "red" : "blue";
 *  }
 * }
 *
 * new FlowList({
 *  items: [{ value: "0", label: "First item"}, ...],
 *  itemRenderer: new MyItemRenderer()
 * }).placeAt(node);
 */
let FlowList = class FlowList extends TemplatedWidget {
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = "<div class='esri4GEFlowList esriGENonSelectable'></div>";
    this.idProperty = "value";
    this.labelProperty = "label";
    /**
     * Optional.
     */
    this.itemRenderer = null;
    /**
     * Will be passed to the item renderer.
     */
    this.itemClass = null;
    /**
     * Will be passed to the item renderer.
     */
    this.itemClassSelected = null;
    // FLAGS
    /**
     * If true, will keep the scroll position when refreshed.
     */
    this.keepScrollPosition = false;
    /**
     * If true, clicking an already selected item will trigger onChange() event.
     */
    this.allowRepetitiveSelection = true;
    /**
     * If true items will be selected on mouse down, not on click.
     */
    this.selectOnMouseDown = false;
    /**
     * If specified, no drag click handler will be used.
     */
    this.noDragTolerance = 0;
    /**
     * Validates a selected item (use it to prevent selection of disabled items).
     */
    this.selectionValidator = null;
    /**
     * If false, a user won't be able to select items with the mouse, default true.
     */
    this.allowManualSelection = true;
    /**
     * If true, propagation of a click event will be stopped.
     */
    this.stopMouseEventPropagation = true;
    /**
     * If false, items can't be marked as selected in the list.
     */
    this.hasSelectableItems = true;
    /**
     * If true, URL-like text will be converted to clickable hyperlinks in labels.
     */
    this.autoDetectUrlsInLabels = false;
    /**
     * If true, items will be rendered in the inner div and not in the domNode.
     */
    this.storeItemsInInnerDiv = false;
    /**
     * Dom node. Read-only. The container of the list items.
     * Can be used to add additional nodes to the list above or below the items.
     */
    this.itemsDiv = null;
    // ON-DEMAND options
    /**
     * Number of items per load iteration.
     */
    this.onDemandModeLoadStep = 1000;
    /**
     * Number of items to be loaded when the list is opened.
     */
    this.onDemandPopulateLimit = 1000;
    /**
     * In milliseconds.
     */
    this.onDemandPopulatePeriod = 200;
    // internal properties
    this._addedWrappers = [];
    this._clickHandles = null;
    this._valueOnCreation = null;
    this._isCreated = false;
    //--------------------------------------------------------------------------
    //
    // Prearing items and wrappers
    //
    //--------------------------------------------------------------------------
    this._selectedPresentation = null;
    //--------------------------------------------------------------------------
    //
    // Scroll
    //
    //--------------------------------------------------------------------------
    this._scrollTopMemo = 0;
  }
  postCreate() {
    if (this.storeItemsInInnerDiv) {
      this._set("itemsDiv", create("div", { class: "esri4GEFlowList_innerDiv" }, this.domNode));
    }
    else {
      this._set("itemsDiv", this.domNode);
    }
    this._clearHandlers();
    this._setUpItemRenderer();
    autoTooltip(this.domNode);
    this._isCreated = true;
    this.refresh();
    if (this._valueOnCreation) {
      this.value = this._valueOnCreation;
    }
  }
  _setUpItemRenderer() {
    if (!this.itemRenderer) {
      this.itemRenderer = new FlowListDefaultItemRenderer();
    }
    if (this.itemClass) {
      this.itemRenderer.itemClass = this.itemClass;
    }
    if (this.itemClassSelected) {
      this.itemRenderer.itemClassSelected = this.itemClassSelected;
    }
  }
  //--------------------------------------------------------------------------
  //
  // Getting & setting value
  //
  //--------------------------------------------------------------------------
  /**
   * Current selected item value.
   */
  get value() {
    return this.selectedItem && this.selectedItem[this.idProperty];
  }
  set value(value) {
    if (!this._isCreated) {
      this._valueOnCreation = value;
      return;
    }
    this._set("value", value);
    const source = this.items || (this.store && this.store.data);
    source &&
      source.some((item) => {
        if (item[this.idProperty] === value) {
          this.selectedItem = item;
          return true; // stop the cycle
        }
        return false;
      });
  }
  //--------------------------------------------------------------------------
  //
  // Setting items
  //
  //--------------------------------------------------------------------------
  /**
   * List items. A list can be fed with either an array of items or store.
   */
  set items(items) {
    this._setItems(items);
  }
  /**
   * Sets items to the list.
   */
  _setItems(items) {
    if (this.keepScrollPosition) {
      this.memoScroll();
    }
    this.clear();
    this._set("items", items);
    if (!this.items || !this._isCreated) {
      this._checkIfStillSelected();
      return;
    }
    this._addItems(items);
    this._checkIfStillSelected();
    if (this.keepScrollPosition) {
      this.applyScrollFromMemo();
    }
  }
  _checkIfStillSelected() {
    if (this.selectedIndex === -1 && !this.selectedItem) {
      return;
    }
    if (!this._addedWrappers || !this._addedWrappers.some((wrapper, index) => this._isItemSelected(wrapper, index))) {
      this._set("selectedIndex", -1);
      this._set("selectedItem", null);
    }
  }
  // DATA
  /**
   * Items store. A list can be fed with either an array of items or store.
   * The first onDemandPopulateLimit items will be loaded each onDemandPopulatePeriod interval.
   * The rest items will be loaded as a user scrolls down the list.
   * NOTE: if you want the list to be in the on-demand mode, use a store, not items.
   */
  set store(store) {
    this._setStore(store);
  }
  _setStore(store) {
    if (this.keepScrollPosition) {
      this.memoScroll();
    }
    this.clear();
    this._set("store", store);
    this.idProperty = store && store.idProperty;
    if (!this.store || !this._isCreated) {
      this._checkIfStillSelected();
      return;
    }
    // add initial amount of items
    this._loadNextPart();
    this._checkIfStillSelected();
    if (this.keepScrollPosition) {
      this.applyScrollFromMemo();
    }
    this._domNodeScrollH && this._domNodeScrollH.remove();
    this._domNodeScrollH = on(this.domNode, "scroll", () => {
      // try to get the one of the last elements in the list
      const wrapper = this._addedWrappers[this._addedWrappers.length - 30];
      const presentation = wrapper ? wrapper.itemPresentation : null;
      if (presentation && presentation.offsetTop < this.domNode.scrollTop) {
        this._loadNextPart();
      }
    });
  }
  _loadNextPart() {
    if (!this.store || this.store.data.length === this._addedWrappers.length) {
      return;
    }
    const items = this.store.query(null, {
      start: this._addedWrappers.length,
      count: this.onDemandModeLoadStep
    });
    this._addItems(items);
    if (items.length && this._addedWrappers.length < this.onDemandPopulateLimit) {
      setTimeout(() => this._loadNextPart(), this.onDemandPopulatePeriod);
    }
  }
  //--------------------------------------------------------------------------
  //
  // Selecting items by item or index
  //
  //--------------------------------------------------------------------------
  set selectedItem(item) {
    this._setSelectedPresentation(this.queryItem({ item }).node);
  }
  set selectedIndex(index) {
    this._setSelectedPresentation(this.queryItem({ index }).node);
  }
  //--------------------------------------------------------------------------
  //
  // Refresh
  //
  //--------------------------------------------------------------------------
  refresh() {
    if (this.store) {
      this._setStore(this.store);
    }
    else {
      this._setItems(this.items);
    }
  }
  _addItems(items) {
    this._addedWrappers = this._addedWrappers || [];
    // prepare wrappers so we can add private properties
    // just copy the items
    items.forEach((item) => {
      const wrapper = mixin({}, item);
      wrapper.itemRef = item;
      this._addWrapper(wrapper);
    });
  }
  _addWrapper(wrapper) {
    const i = this._addedWrappers.length;
    const itemPresentation = this.itemRenderer.createPresentation(wrapper.itemRef, this._isItemSelected(wrapper, i), this.itemsDiv, this, wrapper);
    if (!itemPresentation) {
      return;
    }
    itemPresentation.index = i;
    itemPresentation.item = wrapper.itemRef;
    wrapper.itemPresentation = itemPresentation;
    if (this._isItemSelected(wrapper, i)) {
      this._setSelectedPresentation(itemPresentation);
    }
    this._addClickHandler(itemPresentation);
    // provide internal id
    this._addedWrappers.push(wrapper);
    const wrapperIndex = this._addedWrappers.length - 1;
    addClass(itemPresentation, "listItem_" + wrapperIndex);
    addClass(itemPresentation, "listItem_" + (wrapperIndex % 2 === 0 ? "even" : "odd"));
  }
  _isItemSelected(wrapper, index) {
    if (!this.hasSelectableItems || !this._isItemClickable(wrapper)) {
      return false;
    }
    if (index === this.selectedIndex) {
      return true;
    }
    if (wrapper.itemRef === this.selectedItem) {
      return true;
    }
    if (wrapper.itemRef && this.selectedItem) {
      const value1 = wrapper.itemRef[this.idProperty];
      const value2 = this.selectedItem[this.idProperty];
      return value1 !== undefined && value1 === value2;
    }
    return false;
  }
  //--------------------------------------------------------------------------
  //
  // Working selection
  //
  //--------------------------------------------------------------------------
  _isItemClickable(item) {
    return this.selectionValidator ? this.selectionValidator(item) : this._selectionValidatorDefault(item);
  }
  _selectionValidatorDefault(item) {
    return !!item && !item.isSeparator && item.enabled !== false;
  }
  _addClickHandler(presentation) {
    if (!this.allowManualSelection) {
      return;
    }
    const processSelection = () => {
      if (!this.allowRepetitiveSelection && this._selectedPresentation === presentation) {
        return;
      }
      this._setSelectedPresentation(presentation) && this._dispatchChangeEvent();
    };
    let handle;
    if (this.selectOnMouseDown || !this.noDragTolerance) {
      handle = on(presentation, this.selectOnMouseDown ? "press" : "click", (event) => {
        this.stopMouseEventPropagation && event.stopPropagation();
        processSelection();
      });
    }
    else {
      handle = addNoDragClickHandler(presentation, processSelection, {
        tolerance: this.noDragTolerance
      });
    }
    this._clickHandles.push(handle);
  }
  /**
   * @returns true, if the selection was successful
   */
  _setSelectedPresentation(presentation) {
    this._set("selectedIndex", -1);
    this._set("selectedItem", null);
    // validate selection
    if (!this.hasSelectableItems || !(presentation && this._isItemClickable(presentation.item))) {
      return false;
    }
    if (this._selectedPresentation) {
      this.itemRenderer.selectPresentation &&
        this.itemRenderer.selectPresentation(this._selectedPresentation, false, this._selectedPresentation.item);
    }
    if (presentation) {
      this.itemRenderer.selectPresentation &&
        this.itemRenderer.selectPresentation(presentation, this.hasSelectableItems, presentation.item);
      this._selectedPresentation = presentation;
      this._set("selectedIndex", presentation.index);
      this._set("selectedItem", presentation.item);
    }
    return true;
  }
  _dispatchChangeEvent() {
    this._onChange({
      type: "change",
      selectedIndex: this.selectedIndex,
      selectedItem: this.selectedItem,
      value: this.value
    });
  }
  //--------------------------------------------------------------------------
  //
  // Clearing the list
  //
  //--------------------------------------------------------------------------
  clear() {
    this._selectedPresentation = null;
    this._addedWrappers = this._addedWrappers || [];
    // this can be used to destroy widgets created in the item renderer
    this._addedWrappers &&
      this._addedWrappers.forEach((wrapper) => {
        wrapper.destroyPresentation && wrapper.destroyPresentation();
      });
    this._addedWrappers.length = 0;
    this.itemsDiv && empty(this.itemsDiv);
    this._clearHandlers();
  }
  _clearHandlers() {
    this._clickHandles = this._clickHandles || [];
    this._clickHandles.forEach((h) => {
      h.remove();
    });
    this._clickHandles.length = 0;
  }
  memoScroll() {
    this._scrollTopMemo = this.domNode ? this.domNode.scrollTop : 0;
  }
  applyScrollFromMemo() {
    this.domNode.scrollTop = this._scrollTopMemo || 0;
  }
  //--------------------------------------------------------------------------
  //
  // Navigation
  //
  //--------------------------------------------------------------------------
  scrollToItem(item) {
    const node = this.queryItem({ item }).node;
    if (node) {
      this.domNode.scrollTop = node.offsetTop;
    }
  }
  //--------------------------------------------------------------------------
  //
  // Some query methods
  //
  //--------------------------------------------------------------------------
  /**
   * Queries the list for items or nodes.
   * @param query.item    Item to query by.
   * @param query.node    Node to query by.
   * @param query.value   Item value to query by.
   * @param query.index   Item index to query by.
   *
   * @returns Object { item: List item, node: Dom node, index: Item index }. Null is never returned.
   */
  queryItem(query) {
    const result = {
      item: null,
      node: null,
      index: -1
    };
    this._addedWrappers &&
      this._addedWrappers.some((w, index) => {
        if ((query.item && w.itemRef === query.item) ||
          (query.node && w.itemPresentation === query.node) ||
          (query.value !== undefined && w.itemRef[this.idProperty] === query.value) ||
          (query.index !== undefined && index === query.index)) {
          result.item = w.itemRef;
          result.node = w.itemPresentation;
          result.index = index;
          return true; // stop the cycle
        }
        return false;
      });
    return result;
  }
  //--------------------------------------------------------------------------
  //
  // Mouse over
  //
  //--------------------------------------------------------------------------
  isMouseOver(event) {
    return isMouseOver(this.domNode, { event });
  }
  //--------------------------------------------------------------------------
  //
  // Events
  //
  //--------------------------------------------------------------------------
  _onChange(event) {
    this.onChange(event);
  }
  // triggered when a selected item is changed
  onChange(_event) { }
  //--------------------------------------------------------------------------
  //
  // Destroy
  //
  //--------------------------------------------------------------------------
  destroy() {
    this.clear();
  }
};
__decorate([
  y$r()
], FlowList.prototype, "idProperty", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], FlowList.prototype, "labelProperty", void 0);
__decorate([
  y$r()
], FlowList.prototype, "itemRenderer", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], FlowList.prototype, "itemClass", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], FlowList.prototype, "itemClassSelected", void 0);
__decorate([
  y$r()
], FlowList.prototype, "keepScrollPosition", void 0);
__decorate([
  y$r()
], FlowList.prototype, "allowRepetitiveSelection", void 0);
__decorate([
  y$r()
], FlowList.prototype, "selectOnMouseDown", void 0);
__decorate([
  y$r()
], FlowList.prototype, "noDragTolerance", void 0);
__decorate([
  y$r()
], FlowList.prototype, "selectionValidator", void 0);
__decorate([
  y$r()
], FlowList.prototype, "allowManualSelection", void 0);
__decorate([
  y$r()
], FlowList.prototype, "stopMouseEventPropagation", void 0);
__decorate([
  y$r()
], FlowList.prototype, "hasSelectableItems", void 0);
__decorate([
  y$r()
], FlowList.prototype, "autoDetectUrlsInLabels", void 0);
__decorate([
  y$r()
], FlowList.prototype, "storeItemsInInnerDiv", void 0);
__decorate([
  y$r({
    readOnly: true
  })
], FlowList.prototype, "itemsDiv", void 0);
__decorate([
  y$r()
], FlowList.prototype, "onDemandModeLoadStep", void 0);
__decorate([
  y$r()
], FlowList.prototype, "onDemandPopulateLimit", void 0);
__decorate([
  y$r()
], FlowList.prototype, "onDemandPopulatePeriod", void 0);
__decorate([
  y$r({
    dependsOn: ["selectedItem"]
  })
], FlowList.prototype, "value", null);
__decorate([
  y$r()
], FlowList.prototype, "items", null);
__decorate([
  y$r()
], FlowList.prototype, "store", null);
__decorate([
  y$r()
], FlowList.prototype, "selectedItem", null);
__decorate([
  y$r({
    value: -1
  })
], FlowList.prototype, "selectedIndex", null);
__decorate([
  y$r()
], FlowList.prototype, "onChange", null);
FlowList = __decorate([
  i$X()
], FlowList);

/**
 * Extends FlowList.
 */
let ButtonBar = class ButtonBar extends FlowList {
  constructor() {
    super(...arguments);
    this.allowRepetitiveSelection = false;
    this.stopMouseEventPropagation = false;
  }
  postCreate() {
    addClass(this.domNode, "esri4GEButtonBar");
    super.postCreate();
  }
};
ButtonBar = __decorate([
  i$X()
], ButtonBar);

let VariableToggle = class VariableToggle extends ButtonBar {
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this.stopMouseEventPropagation = true;
  }
  postCreate() {
    this.items = this.states.ids.map((id, i) => ({
      value: id,
      label: this.states.labels[i]
    }));
    super.postCreate();
    addClass(this.domNode, "esri4GEVariableToggle");
  }
  getStateName(value) {
    return (this.states.names && this.states.names[this.queryItem({ value: value || this.value }).index]) || null;
  }
};
__decorate([
  y$r()
], VariableToggle.prototype, "states", void 0);
VariableToggle = __decorate([
  i$X()
], VariableToggle);

/**
 * Creates groups by the given variables.
 * @param variables   VariableStore.
 * @param ids         Array of variable IDs.
 * @param exactMatch  True value means that the hash will contain as keys only values from ids array.
 * Otherwise, every variable from the requested group will be hashed in the output hash.
 * The exact match mode allows multiple selection of variables in a group.
 *
 * @returns A collection of toggle groups:
 * The 'groups' property is an array of groups of related variables. See getToggleGroup.
 * The 'hash' object associates IDs of variables in groups with their groups.
 */
function getToggleGroups(variables, ids, exactMatch = false) {
  const hash = {};
  const groups = [];
  ids.forEach((id) => {
    groups.push(getToggleGroup(variables, id, hash, exactMatch));
  });
  return { groups, hash };
}
/**
 * Creates a group by the given variable.
 * @param variables  Variable store.
 * @param id         Variable identity (fullName).
 * @param hash       An optional object to collect references to the group by IDs of its variables.
 * @param exactMatch True value means collecting groups in the hash for the exactly matching variable IDs as key.
 *
 * @returns A toggle group:
 * The 'value' property is an ID of a variable selected in this group.
 * The optional 'states' property is a collection of states returned by variables.getStates(id) method.
 */
function getToggleGroup(variables, id, hash, exactMatch = false) {
  hash = hash || {};
  const states = variables.getStates && variables.getStates(id);
  const group = { value: id, states };
  hash[id] = group;
  if (states) {
    let idFound = false;
    states.ids.forEach((stateId) => {
      if (id === stateId) {
        idFound = true;
      }
      else if (!exactMatch) {
        hash[stateId] = group;
      }
    });
    // Ensure that the id is in the states. If not, we change it to the first state id.
    if (!idFound) {
      id = group.value = states.ids[0];
      hash[id] = group;
    }
  }
  return group;
}
/**
 * We used to get units in the upper case from the server. Now they come in the lower case.
 * Need to preserve the previous behavior.
 */
function toVariableUnits(units) {
  return typeof units === "string" ? units.toUpperCase() : null;
}

const nls$4 = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").ShoppingCart;
let ShoppingCart = class ShoppingCart extends TemplatedWidget {
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class="esri4GEShoppingCart">
    <table data-attach-point="_countLabel" class="ShoppingCart_Label">
      <tr>
        <td class="ShoppingCart_CounterTD">
          <div class="ShoppingCart_CounterDivLeftBorder"></div>
          <div data-attach-point="_divCounter" class="ShoppingCart_CounterDiv"></div>
          <div class="ShoppingCart_CounterDivRightBorder"></div>
        </td>
        <td class="ShoppingCart_LabelTd">
          <div data-attach-point="_selectedVariablesLabel"></div>
        </td>
        <td>
          <div class="ShoppingCartOpener" data-attach-point="_divShoppingCartOpener"></div>
        </td>
      </tr>
    </table>

    <div data-attach-point="_divOuter" class="ShoppingCart_OuterDiv">
      <div data-attach-point="_divList" class="ShoppingCart_DivList">
      </div>
      <div data-attach-point="_divEmpty" class="esriGEAbsoluteStretched ShoppingCart_DivEmpty">
        <div>${nls$4.noVariables}</div>
      </div>
    </div>
  </div>`;
    /**
     *  Allows variable toggles in shopping cart.
     */
    this.allowToggles = true;
    /**
     * Allows moving variables up and down in the list.
     */
    this.allowMoveButtons = false;
    /**
     * Allows editing individual variables (will work for custom variables).
     */
    this.allowEditButtons = false;
    /**
     * Allows replacing individual variables.
     */
    this.allowReplaceButtons = false;
  }
  postCreate() {
    on(this._countLabel, "click", this._toggleList.bind(this));
    this._buildVariableLabel();
    this._set("selection", []);
    this._content = [];
    this._list = new FlowList({
      hasSelectableItems: false,
      keepScrollPosition: true,
      itemRenderer: new FlowListDefaultItemRenderer({
        createPresentation: this._renderVariable.bind(this)
      })
    }).placeAt(this._divList);
    this._updateLabel();
    this._divOuter.style.display = "none";
    this.watch("selection", () => {
      (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this.variables.synchronize()).then(this._onSelectionChanged.bind(this));
    });
  }
  _buildVariableLabel() {
    // Find the best position for splitting a long "selected variables" label into two lines.
    let varLabel = nls$4.selectedVars;
    const words = varLabel.split(/\s+/);
    const numBreaks = words.length - 1;
    if (numBreaks < 2) {
      varLabel = words.join("<br/>");
    }
    else {
      // The number of nonspace symbols
      const wordsLen = varLabel.length - numBreaks;
      let sum = words[0].length;
      let index = 0;
      for (let i = 1; i < numBreaks; i++) {
        const nextSum = sum + words[i].length;
        if (Math.abs(sum * 2 - wordsLen) > Math.abs(nextSum * 2 - wordsLen)) {
          index = i;
        }
        sum = nextSum;
      }
      varLabel = words.slice(0, index + 1).join("&nbsp;") + "<br/>" + words.slice(index + 1).join("&nbsp;");
    }
    this._selectedVariablesLabel.innerHTML = varLabel;
  }
  //--------------------------------------------------------------------------
  //
  // Render list item
  //
  //--------------------------------------------------------------------------
  _renderVariable(data, _isSelected, listNode) {
    const div = create("div", { class: "ShoppingCartRow" }, listNode);
    function addSpacer() {
      create("div", { class: "ShoppingCartRowSpacer", innerHTML: "&nbsp;" }, div);
    }
    // LABEL
    const id = data.group.states && this.allowToggles ? data.group.states.ids[0] : data.group.value;
    const variable = this.variables.get(id);
    const label = create("div", { class: "esriGETrimWithEllipses ShoppingCartRowLabel", textContent: this._getLabel(variable) || "" }, div);
    // Check for a special case when a variable is missing from the store.
    if (variable && variable.isMissing) {
      addClass(label, "ShoppingCartRowLabel_missing");
    }
    // MOVE
    if (this.allowMoveButtons) {
      addSpacer();
      const moveButtonsRoot = create("div", { class: "upDownArrowsBlock" }, div);
      if (this._content.indexOf(data) > 0) {
        const upButton = create("div", { class: "upArrow" }, moveButtonsRoot);
        on(upButton, "click", () => {
          this._onMove(data, true);
        });
      }
      if (this._content.indexOf(data) < this._content.length - 1) {
        const downButton = create("div", { class: "downArrow" }, moveButtonsRoot);
        on(downButton, "click", () => {
          this._onMove(data, false);
        });
      }
    }
    // REPLACE
    if (this.allowReplaceButtons) {
      addSpacer();
      const replaceButton = create("div", { class: "ShoppingCartRowReplaceButton" }, div);
      setTooltipToNode(replaceButton, nls$4.replaceVariable);
      on(replaceButton, "click", () => {
        this._onReplaceData(data);
      });
    }
    // EDIT
    if (this.allowEditButtons && this._canEditData(data)) {
      addSpacer();
      const editButton = create("div", { class: "ShoppingCartRowEditButton" }, div);
      setTooltipToNode(editButton, nls$4.editVariable);
      on(editButton, "click", () => {
        this._onEditData(data);
      });
    }
    // TOGGLE
    // All items inside floating element should be inline elements to render them in a line.
    if (data.group.states && this.allowToggles) {
      addSpacer();
      const toggle = new VariableToggle({
        states: data.group.states,
        value: data.group.value,
        onChange: () => {
          this._onToggleChange(toggle, data);
        }
      }).placeAt(div);
    }
    // CLOSE
    addSpacer();
    const closer = create("div", { class: "esri4GECloseCrossButton" }, div);
    setTooltipToNode(closer, nls$4.removeVariable);
    on(closer, "click", () => {
      this._onRemove(data);
    });
    return div;
  }
  //--------------------------------------------------------------------------
  //
  // Handle selecton change
  //
  //--------------------------------------------------------------------------
  _onSelectionChanged() {
    // The selection can change in the following cases: add/remove/update.
    // In the case of adding, new items are added to the end.
    // In the case of removing, any items could be removed from any place.
    // In the case of updating, an item state can be changed.
    // We optimize this method for adding and updating only.
    const newContent = [];
    // Collect unchanged items.
    let len = Math.min(this._content.length, this.selection.length);
    for (let i = 0; i < len; i++) {
      const id = this.selection[i];
      const data = this._content[i];
      if (!data.hash[id]) {
        break;
      }
      data.group.value = id; // Synchronize selected ID for the update case
      newContent.push(data);
    }
    // Add other items.
    len = this.selection.length;
    for (let i = newContent.length; i < len; i++) {
      let id = this.selection[i];
      const data = {
        hash: {},
        group: null
      };
      data.group = getToggleGroup(this.variables, id, data.hash);
      // Title is an alias of the first variable in the group in the case of allowToggles.
      // Otherwise, it is an alias of the current variable.
      id = data.group.states && this.allowToggles ? data.group.states.ids[0] : data.group.value;
      const variable = this.variables.get(id);
      data.label = this._getLabel(variable);
      newContent.push(data);
    }
    this._content = newContent;
    this._updateLabel();
    if (!this._content.length) {
      this._hideList();
    }
  }
  //--------------------------------------------------------------------------
  //
  // Variable label
  //
  //--------------------------------------------------------------------------
  _getLabel(variable) {
    if (!variable) {
      return "";
    }
    if (typeof this.variables.getLabel === "function") {
      return this.variables.getLabel(variable);
    }
    return variable.alias || "";
  }
  //--------------------------------------------------------------------------
  //
  // Handle additional actions
  //
  //--------------------------------------------------------------------------
  _onRemove(data) {
    const newSelection = this.selection.slice();
    const dataIndex = this._content.indexOf(data);
    newSelection.splice(dataIndex, 1);
    this._content.splice(dataIndex, 1);
    this.selection = newSelection;
    this._refresh();
  }
  _onToggleChange(toggle, data) {
    data.group.value = toggle.value;
    const newSelection = this.selection.slice();
    newSelection[this._content.indexOf(data)] = toggle.value;
    this.selection = newSelection;
  }
  _onMove(data, isUp) {
    const newSelection = this.selection.slice();
    const dataIndex = this._content.indexOf(data);
    const selection = newSelection[dataIndex];
    // remove
    newSelection.splice(dataIndex, 1);
    this._content.splice(dataIndex, 1);
    // add
    newSelection.splice(isUp ? dataIndex - 1 : dataIndex + 1, 0, selection);
    this._content.splice(isUp ? dataIndex - 1 : dataIndex + 1, 0, data);
    this.selection = newSelection;
    this._refresh();
  }
  _canEditData(_data) {
    return false;
  }
  _onEditData(_data) {
    // not implemented
  }
  _onReplaceData(_data) {
    // not implemented
  }
  //--------------------------------------------------------------------------
  //
  // Refresh & update
  //
  //--------------------------------------------------------------------------
  _refresh() {
    this._list.items = this._content;
    this._updateLabel();
    this._divEmpty.style.visibility = !this._content.length ? "visible" : "hidden";
  }
  _updateLabel() {
    this._divCounter.textContent = this._content.length.toString();
  }
  //--------------------------------------------------------------------------
  //
  // Toggle list
  //
  //--------------------------------------------------------------------------
  isOpen() {
    return this._divOuter.style.display !== "none";
  }
  hideList() {
    this._hideList();
  }
  _toggleList() {
    if (this._divOuter.style.display === "none") {
      this._displayList();
    }
    else {
      this._hideList();
    }
  }
  _displayList() {
    this._refresh();
    this._divOuter.style.display = "";
    this._listenToMouseLeave();
  }
  _listenToMouseLeave() {
    this._mouseOutH && this._mouseOutH.remove();
    this._mouseOutH = addOutHandler({ node: this.domNode, onMouseOut: this._onMouseLeave.bind(this) });
  }
  _onMouseLeave() {
    this._mouseOutH && this._mouseOutH.remove();
    this._hideList();
  }
  _hideList() {
    this._divOuter.style.display = "none";
  }
  //--------------------------------------------------------------------------
  //
  // Events
  //
  //--------------------------------------------------------------------------
  onSelectionChanged(_event) { }
};
__decorate([
  y$r()
], ShoppingCart.prototype, "variables", void 0);
__decorate([
  y$r()
], ShoppingCart.prototype, "selection", void 0);
__decorate([
  y$r()
], ShoppingCart.prototype, "allowToggles", void 0);
__decorate([
  y$r()
], ShoppingCart.prototype, "allowMoveButtons", void 0);
__decorate([
  y$r()
], ShoppingCart.prototype, "allowEditButtons", void 0);
__decorate([
  y$r()
], ShoppingCart.prototype, "allowReplaceButtons", void 0);
__decorate([
  y$r()
], ShoppingCart.prototype, "onSelectionChanged", null);
ShoppingCart = __decorate([
  i$X()
], ShoppingCart);

// geoenrichment.utils
const UTIL_KEY = "__waitingDiv";
/**
 * Safe method to start waiting on a node.
 */
function showProgress(node, params) {
  if (!node || node[UTIL_KEY]) {
    return;
  }
  // relative or absolute position is required
  const pos = getStyle(node, "position");
  if (pos !== "absolute" && pos !== "relative") {
    node.style.position = "relative";
  }
  const position = params && params.position;
  const waitingNode = (node[UTIL_KEY] = create("div", {
    class: "esri4GEProgress " +
      (position === "bottom-right" ? "esri4GEProgressBottomRight" : "esriGEAbsoluteStretched ") +
      ((params && params.progressClass) || "")
  }, node));
  if (params && params.indicatorSize) {
    waitingNode.style.backgroundSize = params.indicatorSize + "px";
  }
  if (params && params.backgroundColor) {
    waitingNode.style.backgroundColor = params.backgroundColor;
  }
}
/**
 * Removes the current waiting from a node.
 */
function removeProgress(node) {
  if (!node || !node[UTIL_KEY]) {
    return;
  }
  destroy(node[UTIL_KEY]);
  delete node[UTIL_KEY];
}
/**
 * @param params.progressClass          String.
 * @param params.onShowProgress         Function(). Called once the waiting is started for the node, even after showProgressPromise() is called multiple times.
 * @param params.onRemoveProgress       Function(). Called once the waiting is finially finished for the node, even after showProgressPromise() is called multiple times.
 *
 * returns the passed Promise.
 */
function showProgressPromise(node, promise, params = {}) {
  const nd = node;
  if (!nd) {
    return promise;
  }
  nd.__progressIndex = nd.__progressIndex || 0;
  if (nd.__progressIndex === 0) {
    nd.__progressDfd = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.c)();
    showProgress(nd, {
      progressClass: params.progressClass,
      position: params.position,
      indicatorSize: params.indicatorSize,
      backgroundColor: params.backgroundColor
    });
    params.onShowProgress && params.onShowProgress();
  }
  nd.__progressIndex++;
  promise.finally(() => {
    nd.__progressIndex = Math.max(0, --nd.__progressIndex);
    if (nd.__progressIndex === 0) {
      nd.__progressDfd && nd.__progressDfd.resolve();
      delete nd.__progressDfd;
      removeProgress(nd);
      params.onRemoveProgress && params.onRemoveProgress();
    }
  });
  return promise;
}

let Wizard = class Wizard extends TemplatedWidget {
  constructor(params, refNode, position) {
    super(params, refNode, position);
    //
    /**
     * Stacking strategy of the wizard:
     *
     * - "stretch" - bottom panel will always be botton-aligned and center panel will be
     * stretched to fit the space in between. This is the default.
     *
     * - "stack" - center panel will be sized to content and bottom panel will be stacked right
     * below the center panel. Scroll will be shown in the center panel if contents are too
     * tall.
     */
    this.stacking = "stretch";
    this._pages = {};
    this._anim = new AnimationHelper();
  }
  postCreate() {
    addClass(this.domNode, "esri4GEWizard_Root");
  }
  loadPage(pageId) {
    const page = this._pages[pageId];
    const oldPage = this.currentPage;
    if (page === oldPage) {
      return;
    }
    this._anim.finish();
    if (oldPage) {
      this._animPage("Anim_FadeOut").then(() => {
        oldPage.pageIsActive = false;
        this.domNode.removeChild(oldPage.domNode);
      });
    }
    this._set("currentPage", page);
    this._set("currentPageId", pageId);
    place(this.currentPage.domNode, this.domNode, "first");
    if (oldPage) {
      this._animPage("Anim_FadeIn");
    }
    page.stacking = this.stacking;
    page.pageIsActive = true;
    page.resize();
  }
  _animPage(fadeClass) {
    return this._anim.start([
      {
        node: this.currentPage.domNode,
        classes: [fadeClass, "esri4GEWizard_FadeAnim"]
      }
    ]);
  }
  resize() {
    this.currentPage && this.currentPage.resize();
  }
  //--------------------------------------------------------------------------
  //
  // Progress
  //
  //--------------------------------------------------------------------------
  /**
   * Shows progress in the progressDiv of the page. Wraps the result in a promise.
   */
  _showProgress(promise) {
    return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(showProgressPromise(this.domNode, promise));
  }
  //--------------------------------------------------------------------------
  //
  // Destroy
  //
  //--------------------------------------------------------------------------
  destroy() {
    for (const id in this._pages) {
      this._pages[id].destroy();
    }
    this._pages = {};
  }
};
__decorate([
  y$r({
    readOnly: true
  })
], Wizard.prototype, "currentPage", void 0);
__decorate([
  y$r({
    readOnly: true
  })
], Wizard.prototype, "currentPageId", void 0);
__decorate([
  y$r()
], Wizard.prototype, "stacking", void 0);
Wizard = __decorate([
  i$X()
], Wizard);

/**
 * Widget to browse and select variables available in Geoenrichment.
 */
function sync(obj1, obj2, prop) {
  let isBusy = false;
  obj1.watch(prop, () => {
    if (isBusy) {
      return;
    }
    isBusy = true;
    obj2.set(prop, obj1.get(prop));
    isBusy = false;
  });
  obj2.watch(prop, () => {
    if (isBusy) {
      return;
    }
    isBusy = true;
    obj1.set(prop, obj2.get(prop));
    isBusy = false;
  });
}
let DataBrowserBase = class DataBrowserBase extends Wizard {
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  /**
   * Title to show in the top left hand corner. Defaults to "Data Browser".
   */
  set title(value) {
    this._set("title", value);
  }
  /**
   * Selected variables array. Each item is a full name of variable like "KeyGlobalFacts.TOTPOP".
   */
  set selection(value) {
    this._setSelection(value);
  }
  /**
   * Two-char country code selected in the country drop down.
   * Defaults to null which will show "Global" variables available for all countries.
   */
  set countryID(value) {
    this._setCountryID(value);
  }
  /**
   * ID of hierarchy selected for the given country.
   * It is available if allowHierarchies property value is true.
   */
  set hierarchyID(value) {
    this._setCountryID(this._getQueryCountryID(this.countryID, value));
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    /**
     * True value allows hierarchies selection in the country drop down.
     * It also allows to set a hierarchyID property value for data browser.
     */
    this.allowHierarchies = false;
    /**
     * Show/hide the country drop down. Defaults to true.
     * Object value specifies an instance of widget to be used for showing the country drop down.
     * It should follow the contact of ICountrySelect.
     */
    this.countryBox = true;
    /**
     * The maximum number of variables to select.
     * - -1 means unlimitted number of variables to select.
     * - 0 means no selection. In this case, selection check boxes and shopping cart are missing.
     * - 1 means a single selection mode. In this case, selection check boxes and shopping cart are missing
     * and the initial selection is ignored.
     * Greater value allows multiple selection with shopping cart.
     */
    this.selectionLimit = -1;
    /**
     * For the Global "country" allows users to override the hideInDataBrowser variable property, and show all variables.
     * - Defaults to false
     */
    this.displayAllGlobalVariables = false;
    /**
     * Customizes variable info tooltip behavior.
     *
     * - false value means showing variables without info icon
     *
     * - true value means showing a standard info tooltip with the default collection of
     * variable properties
     *
     * - String value provides a comma-separated list of additional info fields to be shown
     *
     * - String[] value provides a list of additional info fields to be shown
     *
     * - Object value specifies an instance of widget to be used for showing a variable info tooltip.
     * It should follow the contact of VariableInfo module.
     *
     * The following additional fields can be shown within the standard info tooltip:
     * - fullName        Unique variable name composed as "dataCollectionID.variableID".
     * This field is shown by default
     * - percentBase     ID of the base variable used for percentage calculation;
     * - averageBase     ID of the base variable used for average value calculation;
     * - indexBase       Index base value;
     * - filteringTags   Variable filtering tags.
     *
     * Special cases:
     * - "*"             All additional fields will be shown
     * - ""              No additional fields will be shown
     */
    this.variableInfo = true;
    /**
     * Controls the appearance of shopping cart in Data Browser in the multiple selection mode:
     * - false   Disable a shopping cart
     * - true    Enable the standard shopping cart (default)
     * - Widget  Already created shopping cart widget
     * - function(VariableStore) A factory function used for creating a shopping cart.
     * - It receives the variable store of this data browser.
     */
    this.shoppingCart = true;
    /**
     * If true, derivative varaibles will be allowed.
     */
    this.allowDerivativeVariables = false;
    this._isCreated = false;
  }
  postCreate() {
    this._set("title", (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataBrowser.title);
    this.applyButton = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").WizardButtons.apply;
    this.backButton = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").WizardButtons.back;
    this.pageBackButton = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").WizardButtons.back;
    this.cancelButton = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").WizardButtons.cancel;
    this._initialStartup();
    super.postCreate();
    this._isCreated = true;
  }
  _initialStartup() {
    // Create data browser manager
    this._manager = this._contentFactory.createManager(this);
    if (this._manager.selectionLimit > 0) {
      this._manager.onLimit = this._onLimit.bind(this);
      if (this._manager.selectionLimit === 1) {
        this._manager.watch("selection", this._onApply.bind(this));
      }
    }
    sync(this, this._manager, "variableQuery");
    if (this._manager.multipleSelectIsAllowed()) {
      this._manager.watch("selection", this._updateSelectionFromManager.bind(this));
    }
    // Create shopping cart if more than one variable is allowed in selection and the shopping cart is enabled.
    if (this._manager.allowShoppingCart) {
      this._shoppingCart =
        typeof this.shoppingCart === "function"
          ? this.shoppingCart(this.variables)
          : typeof this.shoppingCart === "object" && this.shoppingCart.placeAt
            ? this.shoppingCart
            : new ShoppingCart({ variables: this.variables });
      // We own a newly created shopping cart only.
      if (typeof this.shoppingCart !== "object") {
        this.own(this._shoppingCart); // need to own, because it can be external
      }
      this._syncManagerWithShoppingCart();
    }
    this._breadcrumb = this._contentFactory.createBreadcrumb({
      onCategoriesClick: this._loadCategoriesPage.bind(this),
      onDCsClick: this._loadCollectionsPage.bind(this)
    });
    this._breadcrumb.domNode.style.display = "none";
    this._manager.flyAnim = this._breadcrumb.flyAnim = new AnimationHelper(this.domNode);
    addClass(this.domNode, "esri4GEDataBrowser");
    this._shoppingCart && this._shoppingCart.placeAt(this.domNode);
    this._breadcrumb.placeAt(this.domNode);
    this._addTitleNode();
    this._manager.createVariableGrid = (options, refNode) => {
      options = options || {};
      options.manager = this._manager;
      return this._contentFactory.createVariableGrid(options, refNode);
    };
    this._addAutoTooltip();
  }
  _syncManagerWithShoppingCart() {
    sync(this._manager, this._shoppingCart, "selection");
  }
  _addAutoTooltip() {
    autoTooltip(this.domNode);
  }
  _addTitleNode() {
    const titleContainer = create("div", { style: "position: absolute; top: 0;" }, this.domNode);
    this._titleNode = create("div", { class: "esri4GEDataBrowser_Title", textContent: this.title }, titleContainer);
  }
  _updateSelectionFromManager() {
    if (this.selection !== this._manager.selection) {
      // Only send Select event when variable has been added.
      const sendSelectEvent = this._manager.selection.length > this.selection.length;
      this._set("selection", this._manager.selection);
      sendSelectEvent && this._onSelect();
    }
  }
  _setSelection(value) {
    // Selection change from outside of Data Browser is allowed in the multiple selection case only.
    if (!this._manager || !this._manager.multipleSelectIsAllowed()) {
      return null;
    }
    value = value || [];
    if (this.selection === value) {
      return null;
    }
    this._updateSelection(value);
    return this._manager.changeSelection(value); // Change selection after synchronization
  }
  _updateSelection(newSelection) {
    this._set("selection", newSelection.slice()); // Don't watch selection here (?)
  }
  _setCountryID(value, skipUpdates = false) {
    if (value === this._getQueryCountryID()) {
      return;
    }
    if (value && this.allowHierarchies) {
      const hierarchyID = value.substr(3); // Skip 2-char country code and '/'
      value = value.substr(0, 2); // Extract country code
      this._set("hierarchyID", hierarchyID);
    }
    this._set("countryID", value);
    if (!this._manager || skipUpdates) {
      // The case when this method is called in the constructor
      return;
    }
    value = this._getQueryCountryID();
    if (this._isCreated) {
      this._loadCategoriesPage().changeCountry(value);
    }
    else {
      this._manager.variableQuery = { countryID: value };
      this._manager.variables.synchronize(value);
    }
  }
  _getQueryCountryID(countryID, hierarchyID) {
    if (typeof countryID === "undefined") {
      countryID = this.countryID;
      hierarchyID = this.hierarchyID;
    }
    return this.allowHierarchies && countryID && hierarchyID ? countryID + "/" + hierarchyID : countryID;
  }
  /**
   * Allows to move Data Browser to a page depending on query parameters.
   * See variableQuery property description for detail.
   * If query parameter is missing, it restarts the current page.
   */
  launch(query) {
    if (query) {
      const queryCountryID = this._getQueryCountryID();
      query = Object.assign({}, query);
      if (typeof query.countryID === "undefined") {
        query.countryID = queryCountryID;
      }
      this._manager.variableQuery = query;
      if (queryCountryID !== query.countryID) {
        this._set("countryID", query.countryID);
      }
    }
    this._launch();
  }
  _launch() {
    this._showProgress(this._manager.validateQuery().then((queryResult) => {
      this._manager.validateSelection();
      this._loadNextPage(queryResult);
    }));
  }
  // Back button functionality, used to support external back buttons outside the DataBrowser
  back() {
    this.currentPage && this.currentPage.emit("back");
  }
  //----------------------------------------------------
  //
  //  Navigation between pages
  //
  //----------------------------------------------------
  _loadNextPage(queryResult) {
    const query = this._manager.variableQuery;
    if (query.searchString || query.favorites || query.dataCollectionID) {
      this._loadVariablesPage(queryResult);
    }
    else if (query.categoryID) {
      this._isNonEmptyCategory((nonempty) => {
        if (nonempty) {
          this._loadCollectionsPage();
        }
        else {
          this._loadVariablesPage();
        }
      });
    }
    else {
      this._loadCategoriesPage();
    }
  }
  _loadPreviousPage() {
    if (this.currentPageId === "collections") {
      this._loadCategoriesPage();
    }
    else {
      this._isNonEmptyCategory((nonempty) => {
        if (nonempty) {
          this._loadCollectionsPage();
        }
        else {
          this._loadCategoriesPage();
        }
      });
    }
  }
  _loadCategoriesPage() {
    let page = this._pages["categories"];
    if (!page) {
      page = this._pages["categories"] = this._contentFactory.createCategoriesPage({
        countryBox: this.countryBox,
        allowHierarchies: this.allowHierarchies,
        manager: this._manager,
        backButton: this.backButton,
        applyButton: this._manager.multipleSelectIsAllowed() ? this.applyButton : null,
        cancelButton: this.cancelButton,
        onSelect: () => this._loadNextPage(null),
        onSearch: this._loadNextPage.bind(this),
        onCountryChange: (countryID) => {
          this._setCountryID(countryID, true);
        }
      });
      page.on("back", this._onBack.bind(this));
      page.on("apply", this._onApply.bind(this));
      page.on("cancel", this._onCancel.bind(this));
    }
    this.loadPage("categories");
    return page;
  }
  _loadCollectionsPage() {
    let page = this._pages["collections"];
    if (!page) {
      page = this._pages["collections"] = this._contentFactory.createDataCollectionsPage({
        manager: this._manager,
        backButton: this.pageBackButton,
        applyButton: this._manager.multipleSelectIsAllowed() ? this.applyButton : null,
        cancelButton: this.cancelButton,
        onSelect: this._loadNextPage.bind(this)
      });
      page.on("back", this._loadPreviousPage.bind(this));
      page.on("apply", this._onApply.bind(this));
      page.on("cancel", this._onCancel.bind(this));
    }
    page.lastDataCollectionID = this._manager.variableQuery.dataCollectionID;
    this.loadPage("collections");
    return page;
  }
  _loadVariablesPage(searchResults) {
    let page = this._pages["variables"];
    if (!page) {
      page = this._pages["variables"] = this._contentFactory.createVariablesPage({
        manager: this._manager,
        backButton: this.pageBackButton,
        applyButton: this._manager.multipleSelectIsAllowed() ? this.applyButton : null,
        cancelButton: this.cancelButton
      });
      page.on("back", this._loadPreviousPage.bind(this));
      page.on("apply", this._onApply.bind(this));
      page.on("cancel", this._onCancel.bind(this));
    }
    page.searchResults = searchResults;
    this.loadPage("variables");
    return page;
  }
  //----------------------------------------------------
  //
  //  Load Page improved
  //
  //----------------------------------------------------
  loadPage(pageId) {
    // We allow reloading the same page with other query parameter.
    // So, we don't test that the current page differs from the required page.
    switch (pageId) {
      case "categories":
        this._manager.variableQuery = this._manager.composeQuery();
        break;
      case "collections":
        this._manager.variableQuery = this._manager.composeQuery("categoryID");
        break;
    }
    super.loadPage(pageId);
    // Should update breadcrumb when Data Browser is already shown.
    setTimeout(() => {
      this._updateBreadcrumb(pageId);
    });
    this.emit("pageLoaded", { pageName: pageId });
  }
  //----------------------------------------------------
  //
  //  Work with breadcrumb
  //
  //----------------------------------------------------
  _updateBreadcrumb(pageId) {
    if (!this._breadcrumb.domNode) {
      return; // Already destroyed
    }
    switch (pageId) {
      case "categories":
        this._breadcrumb.domNode.style.display = "none";
        this._breadcrumb.clearSelection();
        break;
      case "collections":
        this._breadcrumb.domNode.style.display = "";
        this._breadcrumb.selectCategory(this._manager.getCategory());
        break;
      case "variables":
        this._breadcrumb.domNode.style.display = "";
        this._isNonEmptyCategory((nonempty, category) => {
          if (nonempty || !category) {
            // only the title is needed
            let dataCollection = this._manager.getDataCollection();
            if (!dataCollection) {
              dataCollection = this._prepareNoDCBreadcrumbInfo();
            }
            this._breadcrumb.selectDataCollection(dataCollection, category);
          }
          else {
            this._breadcrumb.selectCategory(category);
          }
        });
        break;
    }
  }
  _prepareNoDCBreadcrumbInfo() {
    const query = this._manager.variableQuery;
    return {
      title: this._manager.variableQuery.favorites
        ? (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataVariablesPage.favoriteVariablesTitle
        : !query || !query.searchString || query.searchString === "*"
          ? (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataVariablesPage.allVariablesTitle
          : (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.s)((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataVariablesPage.customSearch, {
            searchKey: query.searchString
          })
    };
  }
  //----------------------------------------------------
  //
  //  Utilities
  //
  //----------------------------------------------------
  /**
   * Tests the current category to be nonempty (to have popular variables or more than one data collection).
   */
  _isNonEmptyCategory(callback) {
    (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this._manager.getCategory()).then((category) => {
      const nonempty = category
        ? this.variables.getPopularVariables(category).length || category.dataCollections.length > 1
        : false;
      callback(!!nonempty, category);
    });
  }
  //--------------------------------------------------------------------------
  //
  // Events
  //
  //--------------------------------------------------------------------------
  _onLimit() {
    setTimeout(() => {
      this.emit("limit", { selectionLimit: this._manager.selectionLimit });
    });
  }
  _onBack() {
    this.emit("back");
  }
  _onApply() {
    if (this._manager.selectionLimit === 1) {
      // Move selection from the manager to this object in the single
      // selection case to allow re-launch the data browser after selection is done.
      this._updateSelectionFromManager();
      if (this._manager.selection.length) {
        this._manager.selection = [];
      }
    }
    this.emit("apply", { selection: this.selection, variableQuery: this.variableQuery });
  }
  _onCancel() {
    this.emit("cancel");
  }
  _onSelect() {
    this.emit("select");
  }
};
__decorate([
  y$r()
], DataBrowserBase.prototype, "applyButton", void 0);
__decorate([
  y$r()
], DataBrowserBase.prototype, "backButton", void 0);
__decorate([
  y$r()
], DataBrowserBase.prototype, "pageBackButton", void 0);
__decorate([
  y$r()
], DataBrowserBase.prototype, "cancelButton", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "allowHierarchies", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "countryBox", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "variables", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "selectionLimit", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "displayAllGlobalVariables", void 0);
__decorate([
  y$r()
], DataBrowserBase.prototype, "variableQuery", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "favorites", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "variableInfo", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "shoppingCart", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "allowDerivativeVariables", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], DataBrowserBase.prototype, "allowMultipleSelectInGroup", void 0);
__decorate([
  y$r()
], DataBrowserBase.prototype, "title", null);
__decorate([
  y$r({
    value: []
  })
], DataBrowserBase.prototype, "selection", null);
__decorate([
  y$r()
], DataBrowserBase.prototype, "countryID", null);
__decorate([
  y$r()
], DataBrowserBase.prototype, "hierarchyID", null);
DataBrowserBase = __decorate([
  i$X()
], DataBrowserBase);

// geoenrichment.utils
/**
 * Creates a DOM node by category.
 * @param category Data collection category.
 * @param parentNode Parent HTML element.
 * @param params If passed and 'noLabel' is true, a text label under the icon will not be added.
 * @returns A data collection category node extended with icon node reference.
 */
function createCategoryNode(category, parentNode, params) {
  const node = create("div", { class: "DataCategoryItem esriGEClickable" }, parentNode);
  // Need wrap an icon with a margin container to provide a smooth fly animation.
  // The flying node should have the same width, margins and paddings as the destination node.
  // Otherwise, it will finally jump a bit.
  const margins = create("div", { class: "DataCategoryItemIconMargins" }, node);
  node.icon = create("div", null, margins);
  if (!params || !params.noLabel)
    create("div", { class: "DataCategoryItemLabel esriGETrimWithEllipses" }, node);
  updateCategoryNode(node, category);
  return node;
}
/**
 * Updates a DOM node earlier created with createCategoryNode method.
 * @param node Data collection category node.
 * @param category Data collection category.
 */
function updateCategoryNode(node, category) {
  node.icon.className = "DataCategoryItemIcon " + getCategoryImageClass(category);
  node.icon.setAttribute("categoryId", category ? category.id : ""); // helps identify icons if needed (used outside of this API)
  node.children[1] && (node.children[1].textContent = (category && category.name) || "");
}
/**
 * Creates a css image class by the category ID.
 * @param categoryOrId Category or category ID.
 * @returns Category imagee class.
 */
function getCategoryImageClass(categoryOrId) {
  let categoryId = typeof categoryOrId === "string" ? categoryOrId : categoryOrId && categoryOrId.id;
  let imageClass = "esri4GEDataCategoryImage";
  if (categoryId) {
    categoryId = categoryId.toLowerCase().replace(/(\s|_|\d|\(|\))/g, "");
    categoryId = categoryId.split(/\W+/)[0];
    if (categoryId) {
      imageClass += " esri4GEDataCategoryImage_" + categoryId;
    }
  }
  return imageClass;
}

let Breadcrumb = class Breadcrumb extends TemplatedWidget {
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class="Breadcrumb BreadcrumbHeight">
    <div class="Breadcrumb_Line" data-attach-point="_connect" style="display: none;"></div>
    <div class="Breadcrumb_Line Breadcrumb_AnimatedConnect" data-attach-point="_animatedConnect" style="display: none;"></div>
    <div class="Breadcrumb_AllCategories esri4GEDataCategoryImage_AllCategories" data-attach-point="_allCategoriesDiv">&nbsp;</div>
    <div data-attach-point="_dcIcon" style="display: none;"></div>
    <div class="Breadcrumb_Variables DataCollectionButton esriGETrimWithEllipses" data-attach-point="_varsNode" style="display: none;"></div>
  </div>`;
    this._categoryClickAllowed = false;
    this._animationRate = 700; // 700 pixels per second
  }
  postCreate() {
    on(this._allCategoriesDiv, "click", this._onCategoriesClick.bind(this));
    on(this._dcIcon, "click", this._onDCsClick.bind(this));
  }
  //------------------------------------------------------
  //
  // Select
  //
  //------------------------------------------------------
  selectCategory(categoryOrPromise) {
    if (!this._lastDataCollection) {
      this.clearSelection();
    }
    else {
      this._updateDataCollection();
    }
    if (categoryOrPromise) {
      this._selectCategory(categoryOrPromise, this._updateCategory.bind(this));
    }
  }
  selectDataCollection(dataCollectionOrPromise, categoryOrPromise) {
    if (!categoryOrPromise) {
      this.clearSelection();
    }
    else {
      this._updateConnectionLine("Breadcrumb_Connect");
    }
    this._selectCategory(categoryOrPromise, (category) => {
      this._updateCategory(category, true);
      (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(dataCollectionOrPromise).then(this._updateDataCollection.bind(this));
    });
  }
  _selectCategory(categoryOrPromise, callback) {
    (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(categoryOrPromise).then((category) => {
      (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this.flyAnim.getPromise()).then(() => {
        callback(category);
      });
    });
  }
  clearSelection() {
    this._updateCategory();
    this._updateDataCollection();
  }
  //------------------------------------------------------
  //
  // Update category
  //
  //------------------------------------------------------
  _updateCategory(category, clickable = false) {
    this._categoryClickAllowed = clickable;
    this._lastCategory = category;
    if (category) {
      this._dcIcon.className = "Breadcrumb_DataCollections";
      this._updateCategoryIcon(this._dcIcon, category);
      toggleClass(this._dcIcon, "esriGEClickable", clickable);
      if (!clickable) {
        this._updateConnectionLine("Breadcrumb_ConnectDC");
      }
    }
    this._dcIcon.style.display = category ? "" : "none";
  }
  _updateCategoryIcon(icon, category) {
    addClass(icon, getCategoryImageClass(category));
  }
  //------------------------------------------------------
  //
  // Update data collection
  //
  //------------------------------------------------------
  _updateDataCollection(dataCollection) {
    this._lastDataCollection = dataCollection;
    if (dataCollection) {
      toggleClass(this._varsNode, "Breadcrumb_VariablesNoDC", !this._lastCategory);
      this._varsNode.innerHTML = dataCollection.title;
    }
    this._varsNode.style.display = dataCollection ? "" : "none";
    let lineClass;
    if (!dataCollection) {
      lineClass = this._lastCategory ? "Breadcrumb_Connect" : "";
    }
    else {
      lineClass = this._lastCategory ? "Breadcrumb_ConnectDCVars" : "Breadcrumb_ConnectVars";
    }
    this._updateConnectionLine(lineClass);
  }
  //------------------------------------------------------
  //
  // Update connection line
  //
  //------------------------------------------------------
  _updateConnectionLine(lineClass) {
    this._stopAnimation();
    if (!lineClass) {
      this._connect.style.display = "none";
      this._animatedConnect.style.display = "none";
    }
    else {
      const noAnimation = lineClass === "Breadcrumb_Connect";
      replaceClass(this._connect, lineClass, "Breadcrumb_Connect Breadcrumb_ConnectDC Breadcrumb_ConnectDCVars Breadcrumb_ConnectVars");
      this._connect.style.display = "";
      this._animateConnect(getContentBox(this._connect), noAnimation);
    }
  }
  _animateConnect(finalBox, noAnimation = false) {
    if (noAnimation) {
      setStyle(this._animatedConnect, { width: finalBox.w + "px", height: finalBox.h + "px" });
      this._animatedConnect.style.display = "";
      return;
    }
    let currentBox;
    if (!this._animatedConnect.style.display) {
      currentBox = getContentBox(this._animatedConnect);
    }
    else {
      currentBox = { w: 0, h: 0 };
      setStyle(this._animatedConnect, { width: "0", height: "0" });
      this._animatedConnect.style.display = "";
    }
    this._doAnimation(currentBox, finalBox);
  }
  _doAnimation(fromBox, toBox) {
    this._animation = animateProperty({
      obj: this._animatedConnect.style,
      duration: ((toBox.w - fromBox.w) / this._animationRate) * 1000,
      properties: { width: { start: fromBox.w, end: toBox.w, units: "px" } },
      onEnd: () => {
        this._animation = animateProperty({
          obj: this._animatedConnect.style,
          duration: ((toBox.h - fromBox.h) / this._animationRate) * 1000,
          properties: { height: { start: fromBox.h, end: toBox.h, units: "px" } }
        });
      }
    });
  }
  _stopAnimation() {
    this._animation && this._animation.cancel();
  }
  //------------------------------------------------------
  //
  // Click handlers
  //
  //------------------------------------------------------
  _onCategoriesClick() {
    this.onCategoriesClick();
  }
  onCategoriesClick() { }
  _onDCsClick() {
    if (this._categoryClickAllowed) {
      this.onDCsClick();
    }
  }
  onDCsClick() { }
};
__decorate([
  y$r()
], Breadcrumb.prototype, "flyAnim", void 0);
__decorate([
  y$r()
], Breadcrumb.prototype, "onCategoriesClick", null);
__decorate([
  y$r()
], Breadcrumb.prototype, "onDCsClick", null);
Breadcrumb = __decorate([
  i$X()
], Breadcrumb);

let Pagination = class Pagination extends TemplatedWidget {
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class="esri4GEPagination">
    <div class="esri4GEPagination_PageAndArrows">
    <div class="esri4GEPagination_Items">
      <div data-attach-point="_itemsNode" class="esri4GEPaginationItemsNode"></div></div>
      <div data-attach-point="_backNode" class="esri4GEPagination_Triangle esri4GEPagination_TriangleBack" style="display: none;"></div>
      <div data-attach-point="_forwardNode" class="esri4GEPagination_Triangle esri4GEPagination_TriangleForward" style="display: none;"></div>
    </div>
    <div data-attach-point="_bulletsNode" class="esri4GEPagination_Bullets"></div>
  </div>`;
    // properties
    // autoCenter: Boolean | "width" | "height" | "stretch:w,h" | "stretch-width:w" | stretch-height:h"
    //      Specifies how to place pagination items within the pagination area:
    //      False value means placing items as is.
    //      True value means auto centering the pagination panel with items in the width and height.
    //      "width" value means auto centering in the width only.
    //      "height" value means auto centering in the height only.
    //      "stretch" value means auto stretching the pagination content in the width and height.
    //          Optional positive numbers after ":" specify the constraints on the number of items in width and height.
    //          For example, "stretch:4,2" means stretch the pagination in not more than 4 columns
    //          and 2 rows. Any other value means no constraint in this direction,
    //          e.g., "stretch" is equivalent to "stretch:*,*".
    //      "stretch-width" value means auto stretching in the width only and an optional positive number
    //          means the constraint on the number of items.
    //      "stretch-height" value auto stretching in the height only and an optional positive number
    //          means the constraint on the number of items.
    //      Any other nonempty string value is equivalent to true.
    //
    //      If the pagination is centered or stretched in width, its content is centered in the case of a single page
    //      containing a single row. To avoid content centering, add the prefix '$' to the autoCenter option,
    //      e.g. "$" value of autoCenter option is equivalent to auto-centering in both directions but without single row centering.
    //      Other examples: "$stretch-width", "$stretch:4,2".
    //
    //      If the pagination is centered or stretched in height, contains the single page only and the number of rows
    //      is less than the available capacity, the rows can be vertically centered using the prefix "@".
    //
    //      Both "$" and "@" prefixes can be added in any order.
    this.autoCenter = false;
    // scrollAnimation: Boolean | "fade1" | "fade2" | "slide"
    //      Specifies how to animate page changes by click on a page bullet.
    //          The false value means no animation.
    //          The true (default) value means replacing the page with fadeout animation.
    //          The "fade1" value means 1-step fade animation.
    //          The "fade2" value means 2-step fade animation.
    //          The "slide" value means 1-step animation with sliding the old content with the new one.
    this.scrollAnimation = true;
    // cyclicPagination: Boolean
    //      Allows make a cyclic pagination when click on pagination arrows.
    //      The false (default) value means no cyclic pagination.
    //      The true value means that the first and the last pages of the pagination are neighbors.
    //      Click on the arrow Back at the first page will show the last page and click on
    //      the arrow Next at the last page will show the first page.
    this.cyclicPagination = false;
    // alwayShowArrows: Boolean
    //      The true value means that pagination arrows are always shown.
    //      The false (default) value means that pagination arrows will be shown if more than one page is available.
    this.alwaysShowArrows = false;
    // internal members
    this._pageCount = 0;
    this._pageSize = 0;
  }
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  set items(items) {
    this._setItems(items);
  }
  set currentPage(value) {
    this.setCurrentPage(value, false);
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  postCreate() {
    this._animation = new AnimationHelper();
    on(this._backNode, "click", () => {
      this.setCurrentPage("prev", false);
    });
    on(this._forwardNode, "click", () => {
      this.setCurrentPage("next", false);
    });
  }
  //-------------------------------------------------------
  //
  // Bindable functions
  //
  //-------------------------------------------------------
  /**
   * Should create a dom node container for an item with already correct size.
   * This must be an inline-block node. In the case of stretch pagination its margins are ignored.
   */
  createItemContainer() {
    throw new Error("Not implemented");
  }
  /**
   * Should update a dom node container with the given item.
   */
  updateItemContainer(_node, _item) { }
  //-------------------------------------------------------
  //
  // Layout
  //
  //-------------------------------------------------------
  /**
   * Has to be called after items have been set to initialize layout.
   */
  resize(navigateToPageIndex) {
    let node;
    let rowCount;
    let lineHeight;
    let marginExtents;
    let columnCount;
    let margin;
    let marginBox;
    this._animation.finish();
    const items = this.items;
    if (!items || !items.length) {
      this.items = []; // Clean up the layout
      return;
    }
    const itemsPane = this._itemsNode.parentNode;
    // Ignore pagination on invisible pane
    if (!itemsPane || !itemsPane.clientHeight) {
      return;
    }
    const autoCenter = this._parseAutoCenterOption(this.autoCenter);
    if (autoCenter.type) {
      // Remove paddings before calculation
      setStyle(itemsPane, "padding", "0px");
    }
    let itemsNode = this._itemsNode.firstChild;
    if (!itemsNode) {
      itemsNode = create("div", null, this._itemsNode);
      addClass(itemsNode, "esri4GEPaginationItemsNodeChildDiv");
    }
    // Now we calculate the page size and page count.
    // In the case of stretch we at first vanish margins of all items
    if (autoCenter.type === "stretch") {
      this._itemMargins = {};
      this._emptyNode(itemsNode); // Should clear the content in this case, because its item margins are already corrected
    }
    // In the case of autoCenter we populate items node with the maximum possible number of
    // nodes to inspect its capacity.
    function needScroll() {
      return itemsPane.scrollHeight - 2 > itemsPane.clientHeight;
    }
    const childNodes = itemsNode.children;
    while (!needScroll() && (autoCenter.type || childNodes.length < items.length)) {
      node = this.createItemContainer();
      on(node, "click", this._onItemClick.bind(this, node));
      itemsNode.appendChild(node);
    }
    // Now we remove nodes which lead to scrolling. There may be more than one such node
    // if pagination width was reduced.
    while (needScroll() && childNodes.length > 1) {
      this._destroyNode(itemsNode.lastChild);
    }
    let emptyWidth, emptyHeight;
    // Now we calculate the number of rows and columns for the case of autoCenter
    // and calculate the empty spaces in width and height
    let capacity = childNodes.length;
    if (autoCenter.type) {
      node = itemsNode.firstChild;
      const nodeStyle = getComputedStyle$1(node);
      marginBox = getMarginBox(node, nodeStyle);
      if (autoCenter.type === "stretch") {
        marginExtents = getMarginExtents(node, nodeStyle);
      }
      rowCount = Math.max(1, Math.floor(itemsNode.clientHeight / marginBox.h));
      lineHeight = itemsNode.clientHeight / rowCount;
      rowCount = Math.max(Math.floor(itemsPane.clientHeight / lineHeight), rowCount);
      columnCount = Math.max(1, capacity / rowCount);
      if (autoCenter.heightLimit && rowCount > autoCenter.heightLimit) {
        rowCount = autoCenter.heightLimit;
      }
      if (autoCenter.widthLimit && columnCount > autoCenter.widthLimit) {
        columnCount = autoCenter.widthLimit;
      }
      capacity = rowCount * columnCount;
      lineHeight = marginBox.h;
      emptyWidth = Math.max(itemsPane.clientWidth - columnCount * marginBox.w, 0);
      emptyHeight = Math.max(itemsPane.clientHeight - rowCount * marginBox.h, 0);
    }
    // Calculate page size and count. The page size is always positive here.
    const pageSize = (this._pageSize = Math.min(capacity, items.length));
    const pageCount = (this._pageCount = Math.ceil(this.items.length / pageSize));
    // At first we calculate vertical margins of items and set vertical items pane paddings
    if (autoCenter.type && autoCenter.height) {
      if (autoCenter.type === "stretch") {
        margin = Math.floor(emptyHeight / rowCount);
        emptyHeight -= margin * rowCount;
        this._itemMargins.marginTop = (Math.floor(margin / 2) + marginExtents.t).toString() + "px";
        this._itemMargins.marginBottom = (Math.ceil(margin / 2) + marginExtents.b).toString() + "px";
        lineHeight += margin;
      }
      if (pageCount === 1 && autoCenter.allowVerticallyCenter) {
        const pageRows = Math.floor((pageSize - 1) / columnCount) + 1;
        if (pageRows < rowCount) {
          emptyHeight += lineHeight * (rowCount - pageRows);
        }
      }
      setStyle(itemsPane, {
        paddingTop: Math.floor(emptyHeight / 2).toString() + "px",
        paddingBottom: "0"
      });
    }
    // Now we prepare nodes for the current page
    this._set("currentPage", this._coerceCurrentPage(typeof navigateToPageIndex === "number" ? navigateToPageIndex : this.currentPage));
    let nodeIndex = 0;
    let itemIndex = pageSize * this.currentPage;
    while (nodeIndex < pageSize && itemIndex < items.length) {
      node = childNodes[nodeIndex++];
      const item = items[itemIndex++];
      this.updateItemContainer(node, item);
      this.onNodePlaced(node, item);
    }
    // and remove superfluous nodes
    while (nodeIndex < childNodes.length) {
      this._destroyNode(itemsNode.lastChild);
    }
    // Then we calculate horizontal margins for items and set horizontal items pane paddings
    if (autoCenter.type && autoCenter.width) {
      if (autoCenter.type === "stretch") {
        margin = Math.floor(emptyWidth / columnCount);
        emptyWidth -= margin * columnCount;
        this._itemMargins.marginLeft = (Math.floor(margin / 2) + marginExtents.l).toString() + "px";
        // Remove 1 additonal px, from margin to prevent the last item from sometimes "disappearing" (dropped to next line and out of view)
        this._itemMargins.marginRight = (Math.ceil(margin / 2) + marginExtents.r - 1).toString() + "px";
      }
      else {
        margin = 0;
      }
      // The special case of a single page with a single row
      if (pageCount === 1 && pageSize < columnCount && !autoCenter.preventSingleRowCenter) {
        emptyWidth = Math.max(itemsPane.clientWidth - (marginBox.w + margin) * pageSize, 0);
      }
      const emptyWidthPx = Math.floor(emptyWidth / 2).toString() + "px";
      setStyle(itemsPane, {
        paddingLeft: emptyWidthPx,
        paddingRight: emptyWidthPx
      });
    }
    // Now we update margins for child nodes
    nodeIndex = this._itemMargins ? 0 : childNodes.length;
    while (nodeIndex < childNodes.length) {
      setStyle(childNodes[nodeIndex++], this._itemMargins);
    }
    // Populate bullet nodes pane with bullets
    if (this._bulletsNode) {
      this._bulletsNode.innerHTML = "";
      if (pageCount > 1) {
        for (let i = 0; i < pageCount; i++) {
          const bullet = create("span", { class: "esri4GEPagination_Bullet", innerHTML: "&nbsp;" }, this._bulletsNode);
          ((i) => {
            on(bullet, "click", () => {
              this.currentPage = i;
              this.onPageChangedManually({ currentPage: this.currentPage });
            });
          })(i);
        }
      }
    }
    this._updateNavigationControls();
  }
  _parseAutoCenterOption(option) {
    if (!option) {
      return {};
    }
    // Recognize auto-centering cases
    const parsed = { type: "center" };
    if (typeof option !== "string") {
      option = "";
    }
    let hasFlag = true;
    while (hasFlag) {
      switch (option.charAt(0)) {
        case "$":
          parsed.preventSingleRowCenter = true;
          break;
        case "@":
          parsed.allowVerticallyCenter = true;
          break;
        default:
          hasFlag = false;
          break;
      }
      if (hasFlag) {
        option = option.substr(1);
      }
    }
    switch (option) {
      case "width":
        parsed.width = true;
        return parsed;
      case "height":
        parsed.height = true;
        return parsed;
      default:
        if (option.indexOf("stretch") !== 0) {
          parsed.width = parsed.height = true;
          return parsed;
        }
        break;
    }
    // Parse stretch cases
    parsed.type = "stretch";
    option = option.substr(7);
    let i = option.indexOf(":");
    const suffix = i < 0 ? option : option.substr(0, i); // Contains stretch type suffix
    option = i < 0 ? "" : option.substr(i + 1); // Contains constraints after ":"
    switch (suffix) {
      case "-width":
        parsed.width = true;
        break;
      case "-height":
        parsed.height = true;
        break;
      default:
        parsed.width = parsed.height = true;
        break;
    }
    if (!option) {
      return parsed;
    }
    // Parse constraints
    const options = option.split(",");
    i = 0;
    ["width", "height"].forEach((prop) => {
      if (!parsed[prop]) {
        return;
      }
      const value = Number(options[i++]);
      if (!isNaN(value) && value > 0) {
        parsed[prop + "Limit"] = value;
      }
    });
    return parsed;
  }
  _onItemClick(node) {
    this.onSelect(node);
  }
  _coerceCurrentPage(currentPage) {
    if (currentPage >= this._pageCount) {
      currentPage = this._pageCount - 1;
    }
    if (currentPage < 0) {
      currentPage = 0;
    }
    return currentPage;
  }
  _updateNavigationControls() {
    const currentPage = this.currentPage;
    const singlePage = this._pageCount <= 1;
    const navigationDisable = singlePage && !this.alwaysShowArrows ? "none" : "";
    const states = ["esri4GEPagination_TriangleDisabled", "esri4GEPagination_TriangleEnabled"];
    let enable;
    // Update triangle buttons visibility
    if (this._backNode) {
      enable = singlePage || (currentPage === 0 && !this.cyclicPagination) ? 0 : 1;
      replaceClass(this._backNode, states[enable], states[1 - enable]);
      this._backNode.style.display = navigationDisable;
    }
    if (this._forwardNode) {
      enable = singlePage || (currentPage === this._pageCount - 1 && !this.cyclicPagination) ? 0 : 1;
      replaceClass(this._forwardNode, states[enable], states[1 - enable]);
      this._forwardNode.style.display = navigationDisable;
    }
    // Update bullet buttons
    if (this._bulletsNode) {
      const bullets = this._bulletsNode.children;
      for (let i = 0; i < bullets.length; i++) {
        if (i === currentPage) {
          addClass(bullets[i], "esri4GEPagination_BulletCurrent");
        }
        else {
          removeClass(bullets[i], "esri4GEPagination_BulletCurrent");
        }
      }
    }
  }
  _setItems(items) {
    this._set("items", items);
    this._emptyNode(this._itemsNode);
    if (this._bulletsNode) {
      this._bulletsNode.innerHTML = "";
    }
    this._set("currentPage", 0);
    this._pageCount = 0;
    this._updateNavigationControls();
  }
  // Selects a page to be shown by an index of item.
  selectPageByItemIndex(index, skipAnimation) {
    if (index < 0 || !this.items || index >= this.items.length || this._pageCount <= 1) {
      return;
    }
    this.setCurrentPage(Math.floor(index / this._pageSize), skipAnimation);
  }
  selectItem(item) {
    const index = this.items.indexOf(item);
    if (index === -1) {
      return;
    }
    if (index < 0 || !this.items || index >= this.items.length || this._pageCount <= 1) {
      return;
    }
    const itemIndexOnPage = this.items.length % this._pageSize;
    const nodeToSelect = this._itemsNode.firstChild.children[itemIndexOnPage];
    if (nodeToSelect) {
      this.onSelect(nodeToSelect);
    }
  }
  navigateToItem(item) {
    const index = this.items.indexOf(item);
    this.selectPageByItemIndex(index, true);
  }
  setCurrentPageNoAnimation(currentPage) {
    this.setCurrentPage(currentPage, true);
  }
  // Sets the index of a new current page to be shown.
  // Two special values are also allowed:
  //      "next" moves to the next page with slide animation
  //      "prev" moves to the previous page with slide animation
  // In the case of cyclic pagination, the next page for the last page is the first page
  // and the previous page for the first page is the last page.
  setCurrentPage(currentPage, skipAnimation = false) {
    this._animation.finish();
    let animate;
    if (currentPage === "next") {
      animate = "forward";
      currentPage = this.currentPage + 1;
      if (this.cyclicPagination && currentPage === this._pageCount) {
        currentPage = 0;
      }
    }
    else if (currentPage === "prev") {
      animate = "backward";
      currentPage = this.currentPage - 1;
      if (this.cyclicPagination && currentPage === -1) {
        currentPage = this._pageCount - 1;
      }
    }
    else {
      animate = this.scrollAnimation === true ? "fade1" : this.scrollAnimation;
    }
    if (skipAnimation === true) {
      animate = "";
    }
    currentPage = this._coerceCurrentPage(currentPage);
    if (this.currentPage === currentPage) {
      return;
    }
    const items = this.items || [];
    const itemsNode = this._itemsNode;
    let nodeIndex = 0;
    let itemIndex = this._pageSize * currentPage;
    const oldItemsNode = this._itemsNode.firstChild;
    const newItemsNode = create("div");
    addClass(newItemsNode, "esri4GEPaginationItemsNodeChildDiv");
    const placedNodeInfos = [];
    while (nodeIndex++ < this._pageSize && itemIndex < items.length) {
      const node = this.createItemContainer();
      on(node, "click", this._onItemClick.bind(this, node));
      this._itemMargins && setStyle(node, this._itemMargins);
      newItemsNode.appendChild(node);
      const item = items[itemIndex++];
      this.updateItemContainer(node, item); // update after adding to the layout
      placedNodeInfos.push({ node, item });
    }
    switch (animate) {
      case "forward":
        this._slideAnimation(itemsNode, oldItemsNode, newItemsNode, true, placedNodeInfos);
        break;
      case "backward":
        this._slideAnimation(itemsNode, oldItemsNode, newItemsNode, false, placedNodeInfos);
        break;
      default:
        if (animate) {
          animate = animate ? "_" + animate + "Animation" : null;
          if (typeof this[animate] === "function") {
            this[animate](itemsNode, oldItemsNode, newItemsNode, currentPage > this.currentPage, placedNodeInfos);
            break;
          }
        }
        this._emptyNode(itemsNode);
        itemsNode.appendChild(newItemsNode);
        this._notifyNodesPlaced(placedNodeInfos);
        break;
    }
    this._set("currentPage", currentPage);
    this._updateNavigationControls();
    this.onPageChanged({ currentPage: this.currentPage });
  }
  _notifyNodesPlaced(placedNodeInfos) {
    placedNodeInfos.forEach((info) => {
      this.onNodePlaced(info.node, info.item);
    });
  }
  // Replaces an old items node with the new one using sliding.
  // forward: Boolean
  //      true value means moving forward to the next pagination node.
  _slideAnimation(itemsContainer, oldItemsNode, newItemsNode, forward, placedNodeInfos) {
    if (forward) {
      itemsContainer.appendChild(newItemsNode);
    }
    else {
      itemsContainer.insertBefore(newItemsNode, itemsContainer.firstChild);
    }
    this._notifyNodesPlaced(placedNodeInfos);
    itemsContainer.parentNode.style.overflow = "hidden";
    this._animation
      .start([
      {
        node: itemsContainer,
        classes: ["esri4GEPagination_SlideAnim", forward ? "Anim_SlideStart" : "Anim_SlideEnd"]
      }
    ], oldItemsNode)
      .then(() => {
      itemsContainer.parentNode.style.overflow = "";
    });
  }
  // 1-step fade out animation.
  _fade1Animation(itemsContainer, oldItemsNode, newItemsNode, _forward, placedNodeInfos) {
    itemsContainer.appendChild(newItemsNode);
    this._notifyNodesPlaced(placedNodeInfos);
    this._animation.start([
      {
        node: oldItemsNode,
        classes: ["esri4GEPagination_FadeAnim", "Anim_FadeOut"]
      },
      {
        node: newItemsNode,
        classes: ["esri4GEPagination_FadeAnim", "Anim_FadeIn"]
      }
    ], oldItemsNode);
  }
  // 2-step fade in animation.
  _fade2Animation(itemsContainer, oldItemsNode, newItemsNode, _forward, placedNodeInfos) {
    const animation = this._animation;
    animation
      .start([
      {
        node: oldItemsNode,
        classes: ["esri4GEPagination_FadeAnim", "Anim_FadeOut"]
      }
    ], oldItemsNode)
      .then(() => {
      itemsContainer.appendChild(newItemsNode);
      this._notifyNodesPlaced(placedNodeInfos);
      animation.start([
        {
          node: newItemsNode,
          classes: ["esri4GEPagination_FadeAnim", "Anim_FadeIn"]
        }
      ], oldItemsNode);
    });
  }
  _destroyNode(node) {
    node && node.parentNode && node.parentNode.removeChild(node);
  }
  _emptyNode(node) {
    if (node) {
      node.innerHTML = "";
    }
  }
  getNumShownItems() {
    return this._itemsNode.children[0] && this._itemsNode.children[0].children.length;
  }
  //-------------------------------------------------------
  //
  // Events
  //
  //-------------------------------------------------------
  /**
   * Called when a node is added to the layout.
   */
  onNodePlaced(_node, _item) { }
  /**
   * Is called on node selection.
   */
  onSelect(_node) { }
  /**
   * Called on every page change, both manual and programmatic.
   */
  onPageChanged(_event) { }
  /**
   * Called on every manual page change.
   */
  onPageChangedManually(_event) { }
};
__decorate([
  y$r()
], Pagination.prototype, "autoCenter", void 0);
__decorate([
  y$r()
], Pagination.prototype, "scrollAnimation", void 0);
__decorate([
  y$r()
], Pagination.prototype, "cyclicPagination", void 0);
__decorate([
  y$r()
], Pagination.prototype, "alwaysShowArrows", void 0);
__decorate([
  y$r()
], Pagination.prototype, "items", null);
__decorate([
  y$r({
    value: 0
  })
], Pagination.prototype, "currentPage", null);
__decorate([
  y$r()
], Pagination.prototype, "createItemContainer", null);
__decorate([
  y$r()
], Pagination.prototype, "updateItemContainer", null);
__decorate([
  y$r()
], Pagination.prototype, "onNodePlaced", null);
__decorate([
  y$r()
], Pagination.prototype, "onSelect", null);
__decorate([
  y$r()
], Pagination.prototype, "onPageChanged", null);
__decorate([
  y$r()
], Pagination.prototype, "onPageChangedManually", null);
Pagination = __decorate([
  i$X()
], Pagination);

let CountrySelect = class CountrySelect extends TemplatedWidget {
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = '<div class="esri4GEDataBrowser_CountryBoxContainer"><div class="DataBrowser_CountryBox" data-attach-point="_divCountrySelect"><calcite-select id="calciteCountrySelect" class="countrySelect calciteSelect" lang="he" /></div><div class="esri4GEDataBrowser_CountryBoxContainer" data-attach-point="_divHierarchySelect"><calcite-select id="calciteHierarchySelect" class="calciteSelect hierarchySelect" /></div></div>';
    this.allowHierarchies = false;
    // other properties
    this._countries = {};
  }
  postCreate() {
    this._countrySelectCalcite = this.domNode.querySelector("#calciteCountrySelect");
    this._countrySelectCalcite.addEventListener("calciteSelectChange", (e) => {
      this._tryShowHierarchies();
      this.onChange();
    });
    this._hierarchySelectCalcite = this.domNode.querySelector("#calciteHierarchySelect");
    this._hierarchySelectCalcite.addEventListener("calciteSelectChange", (e) => {
      this.onChange();
    });
    this._updateHierarchiesVisibility();
  }
  setCountries(data) {
    // Add Global option
    const globalOption = document.createElement("calcite-option");
    globalOption.label = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").CountrySelect.global;
    globalOption.value = this.globalCountryID;
    this._countrySelectCalcite.appendChild(globalOption);
    data.map((country) => {
      this._countries[country.id] = country;
      const option = document.createElement("calcite-option");
      option.value = country.id;
      option.label = country.name;
      this._countrySelectCalcite.appendChild(option);
    });
  }
  _tryShowHierarchies() {
    this._hierarchySelectCalcite.innerHTML = "";
    if (!this.allowHierarchies) {
      return;
    }
    const country = this._countries[this._countrySelectCalcite.value];
    const hierarchies = country && country.hierarchies;
    if (!hierarchies || hierarchies.length < 2) {
      this._updateHierarchiesVisibility();
      return;
    }
    // Find the default hierarchy
    const globalDataSets = country.defaultDatasetID.toUpperCase();
    hierarchies.some((hierarchy) => {
      if (hierarchy.datasets.some((dataset) => dataset.toUpperCase() === globalDataSets)) {
        this._defaultHierarchyID = hierarchy.ID;
        return true; // stop the cycle
      }
      return false;
    });
    const options = new Array;
    if (!country.disableMultiHierarchySupport) {
      const option = document.createElement("calcite-option");
      option.label = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").CountrySelect.allHierarchies;
      option.value = "all";
      options.push(option);
    }
    hierarchies.forEach((hierarchy) => {
      const option = document.createElement("calcite-option");
      option.label = hierarchy.alias;
      option.value = hierarchy.ID;
      options.push(option);
    });
    options.forEach((option) => {
      this._hierarchySelectCalcite.appendChild(option);
    });
    this._hierarchySelectCalcite.value = country.disableMultiHierarchySupport ? this._defaultHierarchyID : "all";
    this._updateHierarchiesVisibility();
  }
  _updateHierarchiesVisibility() {
    display(this._divHierarchySelect, !!this._hierarchySelectCalcite.children.length);
  }
  getValue() {
    return {
      countryID: this._countrySelectCalcite.value,
      hierarchyID: (this._hierarchySelectCalcite.children.length &&
        this._hierarchySelectCalcite.value !== "all" &&
        this._hierarchySelectCalcite.value) ||
        null
    };
  }
  setValue(value) {
    this._countrySelectCalcite.value = value.countryID;
    this._tryShowHierarchies();
    const country = this._countries[value.countryID];
    this._hierarchySelectCalcite.value = value.hierarchyID || country.disableMultiHierarchySupport ? this._defaultHierarchyID : "all";
  }
  onChange() { }
};
__decorate([
  y$r()
], CountrySelect.prototype, "globalCountryID", void 0);
__decorate([
  y$r()
], CountrySelect.prototype, "allowHierarchies", void 0);
__decorate([
  y$r()
], CountrySelect.prototype, "onChange", null);
CountrySelect = __decorate([
  i$X()
], CountrySelect);

let SearchTextBox = class SearchTextBox extends TemplatedWidget {
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  // VALUE
  get value() {
    return this._textBox && this._textBox.value;
  }
  set value(value) {
    this._set("value", value);
    this._textBox && (this._textBox.value = value);
  }
  // PROMPTS
  set prompt(value) {
    this._set("prompt", value);
    this._textBox && (this._textBox.placeholder = value);
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    //protected override _templateString = "<div class='esri4GESearchTextBox'></div><calcite-input-text />";
    this._templateString = '<calcite-input-text id="calciteSearchTextBox" icon="search" />';
  }
  postCreate() {
    this._textBox = this.domNode.parentElement.querySelector("#calciteSearchTextBox");
    this._textBox.placeholder = this.prompt;
    this._textBox.addEventListener("calciteInputTextChange", (e) => {
      this.value = this._textBox.value;
      this._onSearch();
    });
    /*
    new TextBox({
      class: "searchTextBoxInput",
      placeHolder: this.prompt,
      clearable: true,
      additionalButton: {
        class: "searchTextBoxButton",
        onClick: this._onSearch.bind(this)
      },
      onEnter: this._onSearch.bind(this),
      onChange: () => this.notifyChange("value")
    }).placeAt(this.domNode);
    */
    /*
    on(this._textBox.textbox, "keyup", (event) => {
      // Hiding toolbox on keyup so that it doesn't hinder visibility
      hideTooltipForNode(this._textBox.textbox);
      if (event.keyCode === KEYS.Enter) {
        this._onSearch();
      }
    });
    
    on(this._textBox.textbox, "blur", () => {
      hideTooltipForNode(this._textBox.textbox);
    });
    */
  }
  //--------------------------------------------------------------------------
  //
  // Tooltip
  //
  //--------------------------------------------------------------------------
  showTooltip(message) {
    showTooltipForNode(this.domNode, message, { position: ["above", "below"] });
  }
  hideTooltip() {
    hideTooltipForNode(this.domNode);
  }
  //--------------------------------------------------------------------------
  //
  // Focus
  //
  //--------------------------------------------------------------------------
  focus() {
    this._textBox.focus();
  }
  //--------------------------------------------------------------------------
  //
  // Events
  //
  //--------------------------------------------------------------------------
  _onSearch() {
    if (this.value) {
      this.onSearch();
    }
    else {
      this._textBox && this._textBox.focus();
    }
  }
  onSearch() { }
};
__decorate([
  y$r()
], SearchTextBox.prototype, "_textBox", void 0);
__decorate([
  y$r({
    dependsOn: ["_textBox.value"]
  })
], SearchTextBox.prototype, "value", null);
__decorate([
  y$r()
], SearchTextBox.prototype, "prompt", null);
__decorate([
  y$r()
], SearchTextBox.prototype, "onSearch", null);
SearchTextBox = __decorate([
  i$X()
], SearchTextBox);

function measureElementHeight(elem) {
  elem.style.position = "absolute";
  addClass(elem, "esri4GEGridCell_Measure");
  const height = elem.scrollHeight;
  removeClass(elem, "esri4GEGridCell_Measure");
  return height;
}
function calcRowHeights(rowHeights, gridHeights, freeHeight) {
  let flexibleRowCount = 0;
  let i;
  for (i = 0; i < rowHeights.length; i++) {
    switch (gridHeights[i]) {
      case "auto":
        freeHeight -= rowHeights[i];
        break;
      case "stretch":
      case "stack":
        flexibleRowCount++;
        break;
    }
  }
  if (flexibleRowCount > 1) {
    throw new Error("Multiple rows with flexible heights are not supported");
  }
  const ys = [0];
  for (i = 0; i < rowHeights.length; i++) {
    let height;
    switch (gridHeights[i]) {
      case "auto":
        height = rowHeights[i];
        break;
      case "stretch":
        height = freeHeight;
        break;
      case "stack":
        height = Math.min(freeHeight, rowHeights[i]);
        break;
    }
    ys.push(ys[i] + height);
  }
  return ys;
}
let LayoutGrid = class LayoutGrid extends TemplatedWidget {
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this.rows = [];
  }
  postCreate() {
    addClass(this.domNode, "esri4GELayoutGrid");
  }
  resize() {
    const rowHeights = [106]; // Fixed height for first row
    let i, child;
    for (i = 1; i < this.rows.length; i++) {
      rowHeights.push(0);
    }
    const children = this._getChildren();
    addClass(this.domNode, "esri4GEGrid_Measure");
    for (i = 0; i < children.length; i++) {
      child = children[i];
      const height = measureElementHeight(child);
      if (height > rowHeights[i]) {
        rowHeights[i] = height;
      }
    }
    const freeHeight = getContentBox(this.domNode).h;
    removeClass(this.domNode, "esri4GEGrid_Measure");
    const ys = calcRowHeights(rowHeights, this.rows, freeHeight);
    for (i = 0; i < children.length; i++) {
      child = children[i];
      // position & resize
      child.style.top = ys[i] + "px";
      child.style.height = ys[i + 1] - ys[i] + "px";
    }
    // provider the filler node to force the correct height
    if (!this._filler) {
      this._filler = create("div", null, this.domNode, "first");
    }
    this._filler.style.height = ys[ys.length - 2] + "px";
  }
  _getChildren() {
    const children = [];
    for (let i = 0; i < this.domNode.children.length; i++) {
      if (this.domNode.children[i] !== this._filler) {
        children.push(this.domNode.children[i]);
      }
    }
    return children;
  }
};
__decorate([
  y$r()
], LayoutGrid.prototype, "rows", void 0);
LayoutGrid = __decorate([
  i$X()
], LayoutGrid);

let WizardPage = class WizardPage extends LayoutGrid {
  set pageIsActive(_value) {
    // not implemented
  }
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  // STACKING
  set stacking(stacking) {
    switch (stacking) {
      case "stretch":
        this.rows[1] = stacking;
        break;
      case "stack":
        this.rows[1] = stacking;
        break;
    }
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this.rows = ["auto", "auto", "auto"];
  }
  postCreate() {
    super.postCreate();
    this._addButtons();
  }
  _addButtons() {
    const self = this;
    this._buttonInfos = [];
    function addButton(type) {
      let label = self[type + "Button"];
      if (label === true) {
        label = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").WizardButtons[type];
      }
      if (label) {
        const info = {
          id: type,
          label,
          onClick: () => {
            !info.disabled && self.emit(type);
          },
          node: null,
          disabled: false
        };
        self._buttonInfos.push(info);
      }
    }
    // Add buttons in the reverse order because they will be floated to the end of line
    addButton("cancel");
    addButton("apply");
    addButton("back");
    if (this._buttonInfos.length) {
      this._addButtonsPane();
    }
    else if (this._buttonsNode) {
      this._buttonsNode.style.display = "none";
    }
  }
  _addButtonsPane() {
    if (!this._buttonsNode) {
      this._buttonsNode = create("div", { class: "esri4GEWizard_Buttons" }, this.domNode.children[2] /* bottom pane, must be present in the widget */);
    }
    for (let i = 0; i < this._buttonInfos.length; i++) {
      const buttonInfo = this._buttonInfos[i];
      const button = create("div", { class: "esri4GEWizard_Button", textContent: buttonInfo.label || "" }, this._buttonsNode);
      if (buttonInfo.onClick) {
        on(button, "click", buttonInfo.onClick);
      }
      buttonInfo.node = button;
    }
  }
  //--------------------------------------------------------------------------
  //
  // Work with buttons
  //
  //--------------------------------------------------------------------------
  _setButtonEnabled(buttonId, value) {
    const info = this._buttonInfos.filter((info) => info.id === buttonId)[0];
    if (info) {
      info.disabled = !value;
      toggleClass(info.node, "disabled", info.disabled);
    }
  }
  //--------------------------------------------------------------------------
  //
  // Progress
  //
  //--------------------------------------------------------------------------
  /**
   * Shows progress in the progressDiv of the page. Wraps the result in a promise.
   */
  _showProgress(promise) {
    return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(showProgressPromise(this._progressDiv || this.domNode, promise));
  }
};
__decorate([
  y$r()
], WizardPage.prototype, "rows", void 0);
__decorate([
  y$r()
], WizardPage.prototype, "pageIsActive", null);
__decorate([
  y$r()
], WizardPage.prototype, "backButton", void 0);
__decorate([
  y$r()
], WizardPage.prototype, "applyButton", void 0);
__decorate([
  y$r()
], WizardPage.prototype, "cancelButton", void 0);
__decorate([
  y$r()
], WizardPage.prototype, "stacking", null);
WizardPage = __decorate([
  i$X()
], WizardPage);

const nls$3 = () => (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataCategoriesPage;
let DataCategoriesPage = class DataCategoriesPage extends WizardPage {
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  // ACTIVATE PAGE
  set pageIsActive(value) {
    this._set("pageIsActive", value);
    this._searchTextBox && (this._searchTextBox.value = "");
    // Synchronize the page with the current country on activation
    value && this.changeCountry(this.manager.variableQuery.countryID);
  }
  // ITEMS
  set items(items) {
    this._pagination.items = items;
    this.resize();
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class="DataCategoriesPage">
    <div>
      <div class="DataCategoriesPage_Country" data-attach-point="_divCountrySelect"></div>
      <div class="DataCategoriesPage_Search" data-attach-point="_txbSearchDiv"></div>
    </div>
    <div>
      <div class="DataCategoriesPage_Pagination">
        <div data-attach-point="_paginationDiv"></div>
      </div>
      <div data-attach-point="_progressDiv"></div>
    </div>
    <div>
      <div class="esri4GEWizard_Link DataCategoriesPage_ShowFavorites" data-attach-point="_spnShowFavorites"></div>
    </div>
  </div>`;
    /**
     * Country box widget or Boolean (default country box will be created).
     */
    this.countryBox = true;
    this.allowHierarchies = false;
    this._innerChange = false;
  }
  postCreate() {
    super.postCreate();
    // COUNTRY
    if (this.countryBox && this._getVariableStore().countries && this._divCountrySelect) {
      this._countrySelect =
        this.countryBox === true
          ? new CountrySelect()
          : typeof this.countryBox === "object" && this.countryBox.domNode
            ? this.countryBox
            : null;
      if (this._countrySelect) {
        this._countrySelect.globalCountryID = this._getVariableStore().globalCountryID;
        this._countrySelect.allowHierarchies = this.allowHierarchies;
        this._countrySelect.placeAt(this._divCountrySelect);
        this._countrySelect.onChange = () => {
          this._changeCountry(this._countrySelect.getValue());
        };
      }
    }
    this.countryBox = !!this._countrySelect;
    if (this._divCountrySelect) {
      this._divCountrySelect.style.display = this.countryBox ? "" : "none";
    }
    // SEARCH
    this._searchTextBox = new SearchTextBox({
      prompt: nls$3().search,
      onSearch: this._search.bind(this)
    }).placeAt(this._txbSearchDiv);
    // PAGINATION
    this._pagination = new Pagination({
      autoCenter: true,
      scrollAnimation: "fade2",
      createItemContainer: () => createCategoryNode(),
      updateItemContainer: (node, category) => {
        this._updateCategoryNode(node, category);
      },
      onSelect: this._onItemClick.bind(this)
    }).placeAt(this._paginationDiv);
    // FAVORITES
    on(this._spnShowFavorites, "click", this._showFavorites.bind(this));
    // APPLY BUTTON
    this.manager.watch("selection", this._updateApplyButtonAvailability.bind(this));
    this._updateApplyButtonAvailability();
    // Load countries & categories
    if (this.countryBox) {
      (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this._showProgress(this._getCountries())).then(this._onCountriesResponse.bind(this));
    }
    else {
      this._getCategories(true);
    }
  }
  _updateApplyButtonAvailability() {
    this._setButtonEnabled("apply", !!this.manager.selection.length);
  }
  _getVariableStore() {
    return this.manager.variables;
  }
  //--------------------------------------------------------------------------
  //
  // Working with countries
  //
  //--------------------------------------------------------------------------
  changeCountry(countryID) {
    // make sure async operations don't overlap
    return (this._changeCountryPromise = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this._changeCountryPromise).then(() => {
      this._updateFavorites();
      if (this.countryBox) {
        return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this._getCountries()).then(() => {
          this._setCountry(countryID);
        });
      }
      return this._changeCountry(this._toCountryBoxID(countryID));
    }));
  }
  _getCountries() {
    if (!this._getCountriesQuery && this.countryBox) {
      this._getCountriesQuery = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this._getVariableStore().countries.query());
    }
    return this._getCountriesQuery;
  }
  _onCountriesResponse(countries) {
    this._countrySelect.setCountries(countries);
    this._setCountry(this.manager.variableQuery.countryID);
  }
  // This method is called when countryBox presents!!!
  // It changes selected value in the countrySelect and applies country change if necessary
  _setCountry(countryID) {
    const fullValue = this._toCountryBoxID(countryID);
    if (this._fullValueToQName(fullValue) !== this._fullValueToQName(this._countrySelect.getValue())) {
      this._innerChange = true;
      this._countrySelect.setValue(fullValue);
      this._innerChange = false;
      return this._changeCountry(this._countrySelect.getValue());
    }
    return null;
  }
  _changeCountry(countryFullValue) {
    if (this._innerChange || !this.domNode /* Already destroyed */) {
      return null;
    }
    const countryID = this._toCountryID(countryFullValue);
    this.onCountryChange(countryID);
    const preserveSelection = !this._paginationCountryID /* Loaded first time */ ||
      this._paginationCountryID === this._fullValueToQName(countryFullValue);
    this._paginationCountryID = this._fullValueToQName(countryFullValue);
    if (!preserveSelection) {
      this.manager.variableQuery = { countryID };
    }
    return this._getCategories(preserveSelection);
  }
  _toCountryBoxID(countryID) {
    return this._qNameToFullName(countryID || this._getVariableStore().globalCountryID) || null;
  }
  _toCountryID(countryFullValue) {
    return countryFullValue.countryID === this._getVariableStore().globalCountryID
      ? null
      : this._fullValueToQName(countryFullValue);
  }
  _fullValueToQName(countryFullValue) {
    return countryFullValue.countryID + (countryFullValue.hierarchyID ? "/" + countryFullValue.hierarchyID : "");
  }
  _qNameToFullName(countryID) {
    return {
      countryID: countryID.split("/")[0],
      hierarchyID: countryID.split("/")[1] || null
    };
  }
  //--------------------------------------------------------------------------
  //
  // Working with categories & favorites
  //
  //--------------------------------------------------------------------------
  _getCategories(preserveSelection) {
    let categoryPageIndex = 0;
    if (preserveSelection) {
      // save the previous pagination index
      categoryPageIndex = this._pagination.currentPage;
    }
    else {
      this.manager.selection = [];
    }
    this.manager.categoryPageIndex = categoryPageIndex;
    return this._showProgress(this.manager.getCategories().then((categories) => {
      this.items = categories;
      this._paginationCountryID = this._fullValueToQName(this._countrySelect.getValue()); // will case to the global id if needed
      if (preserveSelection) {
        this._pagination.setCurrentPageNoAnimation(this.manager.categoryPageIndex);
      }
      return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this._getVariableStore().synchronize()).then(this._updateFavorites.bind(this));
    }));
  }
  _updateCategoryNode(node, category) {
    updateCategoryNode(node, category);
  }
  _updateFavorites() {
    if (this._spnShowFavorites) {
      this._spnShowFavorites.textContent =
        this._getVariableStore().favorites && this._getVariableStore().favorites.getItemsCount()
          ? nls$3().showFavorites
          : "";
    }
  }
  //--------------------------------------------------------------------------
  //
  // Resize
  //
  //--------------------------------------------------------------------------
  resize() {
    super.resize();
    this._pagination.resize();
  }
  //--------------------------------------------------------------------------
  //
  // Handle events
  //
  //--------------------------------------------------------------------------
  _onItemClick(node) {
    const clone = node.icon.cloneNode(true);
    removeClass(clone, "DataCategoryItemIcon");
    this.manager.flyAnim.fly(node.icon, "Breadcrumb_SelectCategory", null, clone);
    this.manager.variableQuery.categoryID = clone.getAttribute("categoryId");
    this.onSelect();
  }
  onSelect() { }
  _showFavorites() {
    this.manager.variableQuery.favorites = true;
    this.onSearch();
  }
  _search() {
    const key = this._searchTextBox.value;
    if (!key) {
      this._searchTextBox.value = "";
      return;
    }
    this.manager.variableQuery.searchString = key;
    this._showProgress(this.manager.queryVariables().then((results) => {
      if (results.length) {
        this._onSearch(results);
      }
      else {
        delete this.manager.variableQuery.searchString;
        this._searchTextBox.showTooltip((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.s)(nls$3().noResults, { seachKey: key }));
        // Maintaining focus on the search box
        this._searchTextBox.focus();
      }
    }));
  }
  _onSearch(results) {
    this.onSearch(results);
  }
  onSearch(_results) { }
  onCountryChange(_countryID) { }
};
__decorate([
  y$r()
], DataCategoriesPage.prototype, "manager", void 0);
__decorate([
  y$r()
], DataCategoriesPage.prototype, "countryBox", void 0);
__decorate([
  y$r()
], DataCategoriesPage.prototype, "allowHierarchies", void 0);
__decorate([
  y$r()
], DataCategoriesPage.prototype, "pageIsActive", null);
__decorate([
  y$r()
], DataCategoriesPage.prototype, "items", null);
__decorate([
  y$r()
], DataCategoriesPage.prototype, "onSelect", null);
__decorate([
  y$r()
], DataCategoriesPage.prototype, "onSearch", null);
__decorate([
  y$r()
], DataCategoriesPage.prototype, "onCountryChange", null);
DataCategoriesPage = __decorate([
  i$X()
], DataCategoriesPage);

const nls$2 = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataCollectionsPage;
let DataCollectionsPage = class DataCollectionsPage extends WizardPage {
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  // ACTIVATE
  set pageIsActive(value) {
    this._set("pageIsActive", value);
    if (this._grid) {
      this._grid.setVariables([]);
      this._pagination.items = [];
      this._searchTextBox.value = "";
    }
    value && this._querySelectedCategory();
  }
  // ITEMS
  set items(items) {
    this._pagination.items = items;
    this.resize();
    if (this.lastDataCollectionID) {
      const items = this._pagination.items;
      for (let index = 0; index < items.length; index++) {
        const item = items[index];
        if (item.id === this.lastDataCollectionID) {
          this._pagination.selectPageByItemIndex(index, true);
          break;
        }
      }
      this.lastDataCollectionID = null;
    }
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class="DataCollectionsPage">
    <div>
      <div class="BreadcrumbHeight"></div>
      <div class="DataCollectionsPage_Panel DataCollectionsPage_PanelTop">
        <div class="esri4GEDataBrowserVarHeader DataCollectionsPage_Header" data-attach-point="_categoryName"></div>
        <div class="DataCollectionsPage_Search" data-attach-point="_txbSearchDiv"></div>
        <div class="esri4GEDataBrowserVarHeader DataCollectionsPage_Header">
          ${nls$2.mapPopVar}
        </div>
        <div data-attach-point="_divVariables" class="DataCollectionsPage_PopularVariables"></div>
        <div class="esri4GEDataBrowserVarHeader DataCollectionsPage_Header">
          ${nls$2.keepBrowse}
        </div>
      </div>
    </div>
    <div class="DataCollectionsPage_ContentPane_DataCollectionContainer">
      <div class="DataCollectionsPage_DataCollectionContainer">
        <div data-attach-point="_paginationDiv"></div>
      </div>
      <div data-attach-point="_progressDiv"></div>
    </div>
    <div class="DataCollectionsPageBottomContainer">
      <div class="DataCollectionsPage_Panel DataCollectionsPage_PanelBottom">
        <div data-attach-point="_spnShowAll" class="esri4GEWizard_Link DataCollectionsPage_ShowAll"></div>
      </div>
    </div>
  <div>`;
  }
  postCreate() {
    super.postCreate();
    // SEARCH
    this._searchTextBox = new SearchTextBox({
      prompt: (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataCollectionsPage.search,
      onSearch: this._search.bind(this)
    }).placeAt(this._txbSearchDiv);
    // VARIABLES
    this._grid = this.manager.createVariableGrid({ groupCategories: false }, this._divVariables);
    // PAGINATION
    this._pagination = new Pagination({
      autoCenter: true,
      scrollAnimation: "slide",
      createItemContainer: () => {
        const container = create("div", { class: "DataCollectionButtonContainer" });
        create("div", { class: "DataCollectionButton esriGEClickable esriGETrimWithEllipses" }, container);
        return container;
      },
      updateItemContainer: (node, item) => {
        node.children[0].textContent = item.title;
        node.data = item;
      },
      onSelect: this._onSelectCollection.bind(this)
    }).placeAt(this._paginationDiv);
    // APPLY BUTTON
    this.manager.watch("selection", this._updateApplyButtonAvailability.bind(this));
    this._updateApplyButtonAvailability();
    // SHOW ALL
    on(this._spnShowAll, "click", this._showAll.bind(this));
    // Show category data
    this._querySelectedCategory();
  }
  _updateApplyButtonAvailability() {
    this._setButtonEnabled("apply", !!this.manager.selection.length);
  }
  //--------------------------------------------------------------------------
  //
  // Work with data collections
  //
  //--------------------------------------------------------------------------
  _querySelectedCategory() {
    // We query the required category and, if category found, populate the page.
    // This query can be async because data browser can start from the categories page.
    // When a category is received, all other queries will be sync.
    this._showProgress((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this.manager.getCategory()).then((category) => {
      if (category) {
        this._showCategory(category);
      }
    }));
  }
  _showCategory(category) {
    this._prepareCategoryTitle(category);
    this._spnShowAll.textContent = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.s)(nls$2.showAll, { categoryName: category.name });
    const variables = this.manager.variables.getPopularVariables(category, {
      sort: [{ attribute: "popularity", descending: true }],
      start: 0,
      count: 3
    });
    this._grid.setVariables(variables);
    const query = this.manager.composeQuery("categoryID");
    (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this._getDataCollections(query, { sort: [{ attribute: "title" }] })).then((dataCollections) => {
      this.items = dataCollections;
    });
  }
  // Could be overriden to query additional data collections
  _getDataCollections(query, options) {
    return this.manager.variables.dataCollections.query(query, options);
  }
  _prepareCategoryTitle(category) {
    this._categoryName.textContent = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.s)(nls$2.categoryName, { categoryName: category.name });
  }
  //--------------------------------------------------------------------------
  //
  // Resize
  //
  //--------------------------------------------------------------------------
  resize() {
    super.resize();
    this._pagination.resize();
  }
  //--------------------------------------------------------------------------
  //
  // Handle events
  //
  //--------------------------------------------------------------------------
  _onSelectCollection(selectedCollectionNode) {
    const selectedCollection = selectedCollectionNode.data;
    if (!isBodyLtr()) {
      const pos = position(selectedCollectionNode);
      const right = window.innerWidth - pos.x - pos.w;
      selectedCollectionNode.style.right = "" + right + "px";
    }
    this._animateButtonClick(selectedCollectionNode);
    if (!isBodyLtr()) {
      selectedCollectionNode.style.right = "auto";
    }
    this.manager.variableQuery.dataCollectionID = selectedCollection.id;
    this.onSelect();
  }
  _animateButtonClick(button) {
    return this.manager.flyAnim.fly(button.children[0], "Breadcrumb_SelectDC");
  }
  _showAll() {
    this.manager.variableQuery.searchString = "*";
    this.onSelect();
  }
  _search() {
    const key = this._searchTextBox.value;
    if (!key) {
      this._searchTextBox.value = "";
      return;
    }
    this.manager.variableQuery.searchString = key;
    this._showProgress(this.manager.queryVariables().then((results) => {
      if (results.length) {
        this._onSearch(results);
      }
      else {
        delete this.manager.variableQuery.searchString;
        this._searchTextBox.showTooltip((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.s)(nls$2.noResults, { seachKey: key }));
      }
    }));
  }
  _onSearch(results) {
    this.onSelect(results);
  }
  onSelect(_results) { }
};
__decorate([
  y$r()
], DataCollectionsPage.prototype, "manager", void 0);
__decorate([
  y$r()
], DataCollectionsPage.prototype, "lastDataCollectionID", void 0);
__decorate([
  y$r()
], DataCollectionsPage.prototype, "pageIsActive", null);
__decorate([
  y$r()
], DataCollectionsPage.prototype, "items", null);
__decorate([
  y$r()
], DataCollectionsPage.prototype, "onSelect", null);
DataCollectionsPage = __decorate([
  i$X()
], DataCollectionsPage);

function compareMissingValues(a, b, descending, _missingDescending) {
  const missingDescending = _missingDescending === undefined ? descending : _missingDescending;
  const amissing = a === undefined || a === null;
  const bmissing = b === undefined || b === null;
  if (amissing !== bmissing) {
    const result = amissing ? -1 : 1;
    return missingDescending ? -result : result;
  }
  return amissing ? 0 : null;
}
/**
 * The sort function used for sorting string values.
 * Use this function to sort an array alphabetically. E.g. array.sort(ObjectUtil.compareString);
 * @param a String to compare.
 * @param b String to compare.
 * @param descending The order of sorting. If true, the values will be sorted in a descending order.
 * @param missingDescending The order of sorting null and undefined values. Defaults to the value of 'descending' parameter.
 * @returns A number indicating whether a first string comes before or after or is the same as the second value in sort order.
 */
function compareString(a, b, descending, missingDescending) {
  let result = compareMissingValues(a, b, descending, missingDescending);
  if (result !== null) {
    return result;
  }
  // convert to String
  a = String(a);
  b = String(b);
  result = a.localeCompare(b);
  return descending ? -result : result;
}
/**
 * The sort function used for sorting an array.The type of the objects in the array are determined automatically.
 * E.g. array.sort(ObjectUtil.compare);
 * @param a Value to compare.
 * @param b Value to compare.
 * @param descending The order of sorting. If true, the values will be sorted in a descending order.
 * @param missingDescending The order of sorting null and undefined values. Defaults to the value of 'descending' parameter.
 * @returns A number indicating whether a first value comes before or after or is the same as the second value in sort order
 */
function compare(a, b, descending, missingDescending) {
  let result = compareMissingValues(a, b, descending, missingDescending);
  if (result !== null) {
    return result;
  }
  let compareType = typeof a;
  if (typeof b !== compareType) {
    compareType = "";
  }
  switch (compareType) {
    case "number":
    case "boolean":
      break;
    case "object":
      a = a.valueOf();
      b = b.valueOf();
      break;
    default:
      return compareString(String(a), String(b), descending, missingDescending);
  }
  result = a > b ? 1 : a < b ? -1 : 0;
  return descending ? -result : result;
}

// geoenrichment.utils
function createSimpleQueryEngine() {
  return function (query, options) {
    return (data) => {
      // execute the whole query, first we filter
      const queryFunc = typeof query === "function"
        ? query
        : (object) => {
          for (const key in query) {
            const required = query[key];
            if (required && typeof required.test === "function") {
              // an object can provide a test method, which makes it work with regex
              if (!required.test(object[key], object)) {
                return false;
              }
            }
            else if (required !== object[key]) {
              return false;
            }
          }
          return true;
        };
      let results = data.filter(queryFunc);
      // next we sort
      const sortSet = options && options.sort;
      if (sortSet) {
        results.sort(typeof sortSet === "function"
          ? sortSet
          : (a, b) => {
            let sortItem;
            for (let i = 0; i < sortSet.length; i++) {
              sortItem = sortSet[i];
              const compareResult = compare(a[sortItem.attribute], b[sortItem.attribute], sortItem.descending);
              if (compareResult !== 0) {
                return compareResult;
              }
            }
            return 0;
          });
      }
      // now we paginate
      if (options && (options.start || options.count)) {
        const total = results.length;
        results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));
        results.total = total;
      }
      return results;
    };
  };
}

// esri4.core
class SelectableTree extends n$F {
  //-----------------------------------------
  // Constructor
  //-----------------------------------------
  /**
   * @param rootNodes                   Array of root tree nodes.
   * @param options.idProperty          The identity property.
   * @param options.rootLabel           Root label.
   * @param options.autoIdentify        The mode of creation an identity. Default is true, which means auto creation of unique IDs for all nodes.
   *                                    If false, the ID value should be already provided with tree nodes.
   */
  constructor(rootNodes, options) {
    super();
    //-----------------------------------------
    // Events
    //-----------------------------------------
    // this.emit("updated") if the tree content is updated
    //-----------------------------------------
    // Instance properties
    //-----------------------------------------
    this.idProperty = "id";
    /**
     * True means autocreation of ID property on construction.
     */
    this.autoIdentify = true;
    /**
     * Default query engine.
     */
    this.queryEngine = createSimpleQueryEngine();
    if (options && options.idProperty) {
      this.idProperty = options.idProperty;
    }
    if (options && options.autoIdentify !== undefined) {
      this.autoIdentify = options.autoIdentify;
    }
    this.root = {
      label: options && options.rootLabel,
      deepness: -1,
      selectCount: 0,
      leafCount: 0,
      children: rootNodes || []
    };
    this._hash = {};
    // Start auto identity if necessary
    if (this.idProperty && this.autoIdentify) {
      this._autoId = 1;
    } // Should start from 1!
    this._initializeNode(this.root, 0);
    this.data = this.root.children;
  }
  //-----------------------------------------
  // Initialize node
  //-----------------------------------------
  _initializeNode(node, deepness) {
    node.selected = !!node.selected; // Boolean
    // Initialize counts for a leaf.
    // If leafCount is already initialized with a number, we don't change it.
    // So, we can associate any nonnegative "weight" with a leaf.
    // Zero weight is also allowed!
    if (!node.children) {
      if (typeof node.leafCount !== "number") {
        node.leafCount = 1;
      }
      node.selectCount = node.selected ? node.leafCount : 0;
      return;
    }
    // Initialize a branch
    node.selectCount = 0;
    node.leafCount = 0;
    node.children.forEach((child) => {
      this._registerNode(child);
      child.parent = node;
      child.deepness = deepness;
      this._initializeNode(child, deepness + 1);
      node.selectCount += child.selectCount;
      node.leafCount += child.leafCount;
    });
    // Update the selected state in the case when it can be detemined
    if (!node.selectCount) {
      node.selected = false;
    }
    else if (node.selectCount === node.leafCount) {
      node.selected = true;
    }
  }
  //-----------------------------------------
  // Test on owning
  //-----------------------------------------
  /**
   * @param node            Node to test.
   * @param skipRoot        True means that the root node is disallowed in the testing,
   * @returns true if the given node is owned by the tree.
   */
  isOwned(node, skipRoot = false) {
    if (!skipRoot && node === this.root) {
      return true;
    }
    const registeredNode = this.get(this.getIdentity(node));
    return registeredNode === node;
  }
  _registerNode(node) {
    if (this._autoId && node[this.idProperty] === undefined) {
      node[this.idProperty] = this._autoId++;
    }
    if (this.idProperty) {
      this._hash[node[this.idProperty]] = node;
    }
  }
  _unregisterNode(node) {
    if (this.isOwned(node, true)) {
      delete this._hash[node[this.idProperty]];
    }
  }
  //-----------------------------------------
  // Clear
  //-----------------------------------------
  /**
   * Clears the tree and removes the binding in all its tree nodes.
   */
  clear() {
    if (this.root.children.length) {
      this.root.children.forEach((child) => {
        this._unbindNode(child);
      });
      this.data = this.root.children = [];
    }
  }
  /**
   * Destroys the binding of all tree nodes.
   */
  destroy() {
    this.clear();
  }
  _unbindNode(node) {
    if (node.children) {
      node.children.forEach((child) => {
        delete child.parent; // Avoid propogation of _incrementCounts
        this._unbindNode(child);
      });
    }
    this._unregisterNode(node);
    if (node.parent) {
      this._incrementCounts(node.parent, -node.selectCount, -node.leafCount);
      delete node.parent;
    }
  }
  //-----------------------------------------
  // Remove nodes
  //-----------------------------------------
  /**
   * Removes nodes from the tree.
   * @param nodes       An array of nodes to remove.
   * @param silent      An array of nodes to remove.
   */
  removeNodes(nodes, silent = false) {
    nodes &&
      nodes.slice().forEach((node) => {
        if (!this.isOwned(node, true)) {
          return;
        }
        const parent = node.parent;
        const i = parent.children.indexOf(node);
        if (i >= 0) {
          parent.children.splice(i, 1);
        }
        this._unbindNode(node);
      });
    !silent && this.emit("updated");
  }
  //-----------------------------------------
  // Add nodes
  //-----------------------------------------
  /**
   * Adds nodes to children of the given tree node.
   * @param nodes       Adds nodes to children of the given tree node.
   * @param parent      Adds nodes to children of the given tree node.
   * @param silent      Adds nodes to children of the given tree node.
   */
  addNodes(nodes, parent, silent = false) {
    if (!parent) {
      parent = this.root;
    }
    else if (!this.isOwned(parent) || !parent.children) {
      return false;
    }
    const deepness = parent.deepness + 1;
    let selectCount = 0;
    let leafCount = 0;
    nodes.forEach((node) => {
      if (this.isOwned(node)) {
        return;
      } // Avoid adding a node twice
      parent.children.push(node);
      this._registerNode(node);
      node.parent = parent;
      node.deepness = deepness;
      this._initializeNode(node, deepness + 1);
      selectCount += node.selectCount;
      leafCount += node.leafCount;
    });
    this._incrementCounts(parent, selectCount, leafCount);
    !silent && this.emit("updated");
    return true;
  }
  //-----------------------------------------
  // Selection/deselection
  //-----------------------------------------
  /**
   * Selects a node and all its descendants.
   * @param selectionLimit  The optional selectionLimit parameter limits the maximum number of leaves to be selected
   *                        in the whole tree. With this limit exceeded, the method tries to select as more leaves in the tree as possible.
   *
   * @returns true if selection was successful and false in the case when some leaves were not selected because the selection limit was achieved.
   */
  select(node, selectionLimit) {
    return this.changeSelect(node, true, selectionLimit);
  }
  /**
   * Deselects a node and all its descendants.
   */
  deselect(node) {
    this.changeSelect(node, false);
  }
  /**
   * Selects/deselects a node and all its descendants.
   */
  changeSelect(node, selected, selectionLimit) {
    selectionLimit = selectionLimit || this.root.leafCount;
    if (!node) {
      return false;
    }
    selected = !!selected;
    const increment = (selected ? node.leafCount : 0) - node.selectCount;
    const canChangeSelect = increment < 0 || this.root.selectCount + increment <= selectionLimit;
    // Try change select for a leaf
    if (!node.children) {
      if (canChangeSelect) {
        node.selected = selected;
        if (increment) {
          this._incrementCounts(node, increment);
        }
      }
      return canChangeSelect;
    }
    // Try change select for a branch
    if (canChangeSelect) {
      node.selected = selected;
    }
    node.children.forEach((child) => {
      this.changeSelect(child, selected, selectionLimit);
    });
    return canChangeSelect;
  }
  _incrementCounts(node, increment, leafIncrement) {
    node.selectCount += increment;
    if (leafIncrement) {
      node.leafCount += leafIncrement;
    }
    if (!node.selectCount) {
      node.selected = false;
    }
    else if (node.selectCount === node.leafCount) {
      node.selected = true;
    }
    if (node.parent) {
      this._incrementCounts(node.parent, increment, leafIncrement);
    }
  }
  //-----------------------------------------
  // Get Selection State
  //-----------------------------------------
  /**
   * @returns selection state of a node that is a value from true|false|"mixed".
   */
  getSelectionState(node) {
    if (!this.isOwned(node)) {
      return false;
    }
    return node.selectCount && node.selectCount !== node.leafCount ? "mixed" : (node.selected = !!node.selectCount);
  }
  //-----------------------------------------
  // Collect nodes
  //-----------------------------------------
  /**
   * @param leavesOnly      The leavesOnly parameters affects on branch nodes whose all descendand leaves
   *                        are selected. If leavesOnly is missing or false, the whole branch node
   *                        will be added to results. Otherwise, its descending leaves will be added.
   * @returns an array of selected nodes.
   */
  getSelectedNodes(leavesOnly) {
    return this.getDescendingNodes(this.root, true, leavesOnly);
  }
  /**
   * This method can be used to test a precondition before selecting/unselecting a branch node.
   * @param leavesOnly      The leavesOnly parameters affects on branch nodes whose all descendand leaves
   *                        will be added to results. Otherwise, its descending leaves will be added.
   * @returns an array of decsending nodes which have the given state.
   */
  getDescendingNodes(node, selected, leavesOnly) {
    if (!this.isOwned(node)) {
      return [];
    }
    const collectedNodes = [];
    this._collectNodes(node.children, collectedNodes, selected, leavesOnly);
    return collectedNodes;
  }
  _collectNodes(nodes, collectedNodes, selected, leavesOnly) {
    nodes.forEach((node) => {
      const matchCount = selected === null || selected === undefined
        ? node.leafCount
        : selected
          ? node.selectCount
          : node.leafCount - node.selectCount;
      if (!matchCount) {
        return;
      }
      if (!node.children || (!leavesOnly && matchCount === node.leafCount)) {
        collectedNodes.push(node);
      }
      else {
        this._collectNodes(node.children, collectedNodes, selected, leavesOnly);
      }
    });
  }
  //-----------------------------------------
  // Inspect children of a tree node
  //-----------------------------------------
  /**
   * Inspects children of a tree node in the order specified by an optional sorting function.
   * @param node            A node whose child nodes are inspected. The null value means the root node of the tree.
   * @param inspector       Function(node). Here the 'node' parameter is the currently inspected node.
   *                        The inspector function could control the process of nodes inspection by a value returned:
   *                        - undefined   no control
   *                        - true        allows to inspect the next node including the child nodes of the given node.
   *                        - false       allows to inspect the next sibling node but disallows inspection of the child nodes of the given node.
   *                        - null        stops inspection
   * @param sorting         Function (obj1, obj2) => number.
   *                        An optional sorting function controlling the order of nodes inspections.
   *                        If it is missing, the tree nodes are inspected in the natural order.
   * @param scope           An optional scope of execution the inspector function.
   */
  inspectChildren(node, inspector, sorting, scope) {
    if (scope) {
      inspector = inspector.bind(scope);
    }
    node = node || this.root;
    let children = node.children;
    if (children && sorting) {
      children = children.slice();
      children.sort(sorting);
    }
    return children.every((node) => {
      const result = inspector(node);
      return result === null
        ? false
        : result === false || !node.children
          ? true
          : this.inspectChildren(node, inspector, sorting);
    });
  }
  //-----------------------------------------
  // Nodes expansion interface
  //-----------------------------------------
  /**
   * Updates Boolean 'expanded' property of all branch nodes and provides all 'visible' nodes with 'isOdd' property value.
   * @param expandedBranches    A cache of branch nodes whose expanded value is already known. A key is a node ID and its value is Boolean.
   * @param sorting             An optional tree nodes sorting function.
   */
  updateExpandedNodes(expandedBranches, sorting) {
    // Inspect all branch nodes
    for (const id in this._hash) {
      const node = this._hash[id];
      this.updateExpand(node, !!expandedBranches[id]);
    }
    // Inspect all visible nodes and update their isOdd property
    this._updateOddEven(null, sorting);
  }
  /**
   * Updates Boolean 'expanded' property of the given branch node and provides all 'visible' nodes
   * with 'isOdd' property value (0 or 1).
   * @param node                        A node to be updated.
   * @param expanded                    Expand value.
   * @param collectOddEvenChanges       Allows collecting 'visible' nodes whose 'isOdd' property value was changed.
   *                                    in this case, the result of this method will be a cache of node IDs as keys
   *                                    with their 'isOdd' property values.
   * @param sorting                     An optional tree nodes sorting function.
   *
   * @returns a cache of changed nodes or an empty object if changes were not collected.
   */
  updateExpand(node, expanded, collectOddEvenChanges = false, sorting) {
    if (!node) {
      return null;
    }
    let changed = false;
    if (node.children) {
      if (node.expanded !== expanded) {
        changed = true;
        node.expanded = expanded;
      }
    }
    const cache = {};
    if (changed && collectOddEvenChanges) {
      this._updateOddEven(cache, sorting);
    }
    return cache;
  }
  _updateOddEven(cache, sorting) {
    let isOdd = true;
    this.inspectChildren(null, (node) => {
      if (node.visible !== false) {
        isOdd = !isOdd;
      }
      if (cache && node.isOdd !== isOdd) {
        cache[this.getIdentity(node)] = isOdd;
      }
      node.isOdd = isOdd;
      return !!(node.children && node.expanded); // Boolean
    }, sorting, this);
  }
  /**
   * @returns true if the given node has an odd index.
   */
  isOdd(node) {
    return node && node.isOdd;
  }
  //-----------------------------------------
  // store interface
  //-----------------------------------------
  /**
   * Returns a stored node by id.
   */
  get(id) {
    return this._hash[id];
  }
  /**
   * Returns the node identity value.
   */
  getIdentity(node) {
    return this.idProperty ? node[this.idProperty] : null;
  }
  /**
   * Queries root nodes.
   */
  query(query, options) {
    return this._query(this.data, query, options);
  }
  _query(data, query, options) {
    return this.queryEngine(query, options)(data);
  }
  /**
   * Tests children availability
   */
  mayHaveChildren(node) {
    return !!node.children;
  }
}

// geoenrichment.utils
/**
 * Invokes a specified method of a given object after the given delay.
 * Allows to invoke a method multiple times, but call it only once.
 * @param object An object.
 * @param methodName A name of method to be called.
 * @param timeout A timeout to call this method after.
 * If it is missing or null and this method was already invoked before,
 * the previous invocation promise will be returned.
 * @param clearPreviousTimeout If the false value is passed and this method was already invoked before,
 * the previous invocation promise will be returned.
 * Otherwise, the waiting will start over again with the specified timeout.
 * @param args Arguments to be passed to the method.
 * @returns A promise resolved with the result of the method call.
 */
function invoke(object, methodName, timeout, clearPreviousTimeout, args) {
  const obj = object;
  // create an internal hash if necessary
  if (!obj.__invokeInfo) {
    obj.__invokeInfo = {};
  }
  let invokeInfo = obj.__invokeInfo[methodName];
  // check if need to remove the previous record
  if (invokeInfo) {
    if (timeout == null /* null or undefined */ || clearPreviousTimeout === false) {
      return invokeInfo.dfd.promise;
    }
    clearTimeout(invokeInfo.handle);
  }
  // create an info object
  if (!invokeInfo) {
    invokeInfo = {
      dfd: (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.c)(),
      handle: null
    };
    obj.__invokeInfo[methodName] = invokeInfo;
  }
  // start the timer
  invokeInfo.handle = setTimeout(() => {
    obj.__invokeInfo[methodName] = undefined;
    (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(args ? obj[methodName].apply(obj, args) : obj[methodName]()).then((result) => {
      invokeInfo.dfd.resolve(result);
    }, (error) => {
      invokeInfo.dfd.reject(error);
    });
  }, timeout || 0);
  return invokeInfo.dfd.promise;
}

/**
 * Registers a node as a button - sets "tabindex", "aria-label" and install the keyboard events listener.
 * @param node A button node.
 * @param listener A listener to be called on Enter/Return key press.
 * @param label Aria label.
 */
function registerButton(node, listener, label, tabIndex) {
  tabIndex && node.setAttribute("tabindex", tabIndex);
  label && node.setAttribute("aria-label", label);
  on(node, "keydown", (e) => {
    if (e.keyCode === 13) {
      // The Enter/Return key
      listener(e);
    }
  });
}

/**
 * Checkbox widget.
 *
 * @example
 * 1. Stand-alone checkbox with no label, placed inside a div.
 *      const checkbox = new TriStateItem({ checked: "mixed" }, divNode);
 *
 * 2. In-label checkbox.
 *      const checkbox = new TriStateItem({ checked: true }, labelNode);
 *
 * 3. In-label checkbox created from text.
 *      const checkbox = new TriStateItem({ checked: true, labelText: "This text will appear in a new label" }, divNode);
 *      checkbox.onClick = () => { }; // click handler
 */
let TriStateItem = class TriStateItem extends TemplatedWidget {
  /**
   * On click connector function.
   * The event.checked property contains the current checked state of this item.
   */
  onClick(_event) { }
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  get scale() {
    return this._checkbox.scale;
  }
  // 12x15, 14x17, 16x19
  set scale(value) {
    if (this._checkbox) {
      this._checkbox.scale = value;
      replaceClass(this._checkboxNode, "scale_" + value, "scale_s scale_m scale_l");
    }
    else {
      this._initialScale = value;
    }
  }
  get checked() {
    return this._checked;
  }
  set checked(value) {
    if (value === "mixed") {
      this._checked = value;
    }
    else {
      this._checked = this._lastChecked = !!value;
    }
    if (this._checkbox) {
      this._checkbox.indeterminate = value === "mixed";
      this._checkbox.checked = this._lastChecked;
    }
  }
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = value;
    this._checkbox && (this._checkbox.disabled = value);
  }
  get shadowRootReady() {
    return this._shadowRootReadyPromise
      ? this._shadowRootReadyPromise // we need to store this ended promise for shadowRootReady property
      : (this._shadowRootReadyPromise = new Promise((resolve) => {
        const observer = new MutationObserver((records, _) => {
          observer.disconnect(); // calcite adds these nodes by whole piece, so we can disconnect after recieving anything
          if (records[0].addedNodes[0].tagName === "STYLE") {
            // in firefox calcite injects additional <style> block
            resolve(records[1].addedNodes[0]);
          }
          else {
            // in chrome there's only one div.container block
            resolve(records[0].addedNodes[0]);
          }
        });
        observer.observe(this._checkbox.shadowRoot, { childList: true, subtree: true });
      }));
  }
  get inputNode() {
    var _a;
    return ((_a = this._inputNode) !== null && _a !== void 0 ? _a : (this._inputNode = this.shadowRootReady.then((_) => this._checkbox.querySelector("input"))));
  }
  set ariaLabel(text) {
    this._ariaLabel = text;
    this._focusNode && this._focusNode.setAttribute("aria-label", text);
  }
  get ariaLabel() {
    return this._ariaLabel;
  }
  get focusNode() {
    return this._focusNode;
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  /**
   * Ctor.
   * @example
   * const checkbox = new TriStateItem(null, this._checkboxLabel);
   *
   * @param params Checkbox parameters.
   *
   * If labelText is specified, the checkbox will be wrapped with label having this text.
   * If refNode is a label element, this text will be assigned to it.
   * Otherwise, a new label element will be created and will be set as domNode.
   * In this case, the additional labelAttrs can be provided for the label element.
   *
   * @param refNode A reference node to ADD checkbox into.
   * Opposite to other widgets, checkbox node doesn't replace the reference node.
   * In other words, this constructor works the same way as DomUtil.create.
   *
   * If reference node is a label element, the checkbox is added as the first child
   * of the reference node and click on label will work the same way as click on checkbox.
   *
   * @param position Position to add checkbox into children of reference node.
   * If reference node is a label element, the position is ignored.
   */
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._lastChecked = false;
  }
  buildRendering() {
    let refNode = this._refNode;
    let labelNode;
    if (this.labelText) {
      if (refNode instanceof HTMLLabelElement) {
        refNode.innerHTML = "&nbsp;" + this.labelText;
      }
      else {
        const labelAttrs = this.labelAttrs || {};
        labelAttrs.innerHTML = "&nbsp;" + this.labelText;
        labelNode = create("label", labelAttrs);
        refNode && place(labelNode, refNode);
        refNode = labelNode;
      }
    }
    this._checkboxNode = create("div", null, refNode, refNode instanceof HTMLLabelElement ? "first" : this._refPosition);
    refNode instanceof HTMLLabelElement && (this._parentLabel = refNode);
    this.class && addClass(this._checkboxNode, this.class);
    this.domNode = labelNode || this._checkboxNode;
    delete this._refNode;
    delete this._refPosition;
  }
  postCreate() {
    // Can't assign default values in properties! They will override settings from parameters.
    if (this.autoToggle === undefined) {
      this.autoToggle = true;
    }
    if (this._checked === undefined) {
      this._checked = false;
    }
    if (this._disabled === undefined) {
      this._disabled = false;
    }
    // Create checkbox
    this._checkbox = document.createElement("calcite-checkbox");
    this._checkbox.checked = this._lastChecked;
    this._checkbox.indeterminate = this._checked === "mixed";
    this._checkbox.disabled = this._disabled;
    this._checkbox.className = "esriTriStateItemCalcite_checkbox";
    place(this._checkbox, this._checkboxNode);
    addClass(this._checkboxNode, "esriTriStateItemCalcite");
    // Set scale
    this.scale = this._initialScale || "m";
    const onClick = (e) => {
      e.stopPropagation();
      e.preventDefault();
      if (!this._disabled) {
        if (this.autoToggle) {
          this.toggle();
          e.checked = this.checked;
          this.onClick(e);
        }
        else {
          // The event anyway propagates to shadow root.
          // Need restore the state of checkbox on the next stage.
          setTimeout(() => {
            this._checkbox.indeterminate = this._checked === "mixed";
            this._checkbox.checked = this._lastChecked;
            e.checked = this.checked;
            this.onClick(e);
          });
        }
      }
    };
    // Add event listener
    const refNode = this._checkboxNode.parentElement;
    if (refNode instanceof HTMLLabelElement) {
      on(refNode, "click", onClick);
      addClass(refNode, "esriTriStateCheckBoxLabel");
      this._focusNode = refNode;
    }
    else {
      on(this._checkboxNode, "click", onClick);
      this._focusNode = this._checkboxNode;
    }
    this.enableTabbing && registerButton(this._focusNode, onClick);
    // Set aria-label
    const label = this._ariaLabel || this.labelText;
    label && (this.ariaLabel = label);
  }
  /**
   * Toggle checkbox.
   * @returns The new state.
   */
  toggle() {
    this._checkbox.indeterminate = false;
    this._checkbox.checked = this._checked = this._lastChecked = !this._lastChecked;
    return this._checked;
  }
  updateLabel(text) {
    if (this._parentLabel) {
      this._parentLabel.removeChild(this._checkboxNode);
      this._parentLabel.innerHTML = "&nbsp;" + text;
      place(this._checkboxNode, this._parentLabel, "first");
      this.ariaLabel = text;
    }
  }
};
__decorate([
  y$r({
    constructOnly: true
  })
], TriStateItem.prototype, "labelText", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], TriStateItem.prototype, "labelAttrs", void 0);
__decorate([
  y$r()
], TriStateItem.prototype, "onClick", null);
__decorate([
  y$r()
], TriStateItem.prototype, "autoToggle", void 0);
__decorate([
  y$r({
    constructOnly: true
  })
], TriStateItem.prototype, "enableTabbing", void 0);
TriStateItem = __decorate([
  i$X()
], TriStateItem);

// geoenrichment.utils
class SelectableTreeListRenderer extends FlowListDefaultItemRenderer {
  constructor() {
    super(...arguments);
    this.childLists = {};
    this._lastClickedItem = null;
    this._cache = {};
  }
  createPresentation(item, _, listNode, list) {
    const hasChildren = item.children && item.children.length;
    const root = hasChildren && create("div", { class: "childrenListRoot" }, listNode);
    const rowRoot = create("div", { class: "esriGETrimWithEllipses listItem" }, root || listNode);
    const expandoIcon = create("div", { class: "expandoIcon" }, rowRoot);
    const checkbox = new TriStateItem(null, rowRoot);
    checkbox.autoToggle = false;
    const itemBinding = {
      item,
      rowRoot,
      list,
      expandoIcon,
      checkbox
    };
    this._cache[item[this.idProperty]] = itemBinding;
    if (this.topList.rowRenderer) {
      this.topList.rowRenderer(item, rowRoot, checkbox, itemBinding);
    }
    else {
      create("div", { class: "itemSpacer", innerHTML: "&nbsp;" }, rowRoot);
      create("span", { textContent: item[this.topList.labelProperty] }, rowRoot);
    }
    // RENDER CHILDREN
    if (hasChildren) {
      const childrenListRoot = (itemBinding.childrenListRoot = create("div", { class: "childrenListRoot" }, root));
      childrenListRoot.style[isBodyLtr() ? "marginLeft" : "marginRight"] = (item.deepness + 1) * 20 + "px";
      // EXPANDE HANDLING
      on(expandoIcon, "click", () => {
        this.setExpanded(item, !item.expanded, false, true);
        this.topList.onExpandChangedUser(item);
      });
      this._handleExpand(item, false);
    }
    else {
      if (this.topList.hideInvisibleExpandoIcons) {
        expandoIcon.style.display = "none";
      }
      else {
        expandoIcon.style.opacity = "0.001";
      }
      expandoIcon.style.cursor = "default";
    }
    // SELECTION
    this.updateSelection(item);
    // CLICK HANDLING
    checkbox.onClick = (event) => {
      this.executeSelectionClick(item, event);
    };
    return rowRoot;
  }
  executeSelectionClick(item, event) {
    const selectionState = this.topList.getSelectedState(true);
    const info = this._cache[item[this.idProperty]];
    const items = info.list.items;
    if (event && event.shiftKey && this._lastClickedItem && items.indexOf(this._lastClickedItem) !== -1) {
      const fromIndex = items.indexOf(this._lastClickedItem);
      const toIndex = items.indexOf(item);
      const minIndex = Math.min(fromIndex, toIndex);
      const maxIndex = Math.max(fromIndex, toIndex);
      for (let i = minIndex; i <= maxIndex; i++) {
        const itemToToggle = items[i];
        if (itemToToggle !== this._lastClickedItem) {
          this.tree.changeSelect(itemToToggle, !this.tree.getSelectionState(itemToToggle));
        }
      }
    }
    else {
      this.tree.changeSelect(item, !this.tree.getSelectionState(item));
    }
    this._lastClickedItem = item;
    this.topList._onCheckboxClicked(selectionState, info.rowRoot);
  }
  updateSelection(item) {
    const info = this._cache[item[this.idProperty]];
    if (!info || !info.checkbox) {
      return; // isn't rendered yet
    }
    const value = this.tree.getSelectionState(item);
    info.checkbox.checked = value;
    toggleClass(info.rowRoot, "listItemSelected", !!value);
  }
  setExpanded(item, value, doNotUpdate, showAnimation) {
    if (!item.children || !item.children.length) {
      return; // not applicable
    }
    this.tree.updateExpand(item, value);
    if (!doNotUpdate) {
      this._handleExpand(item, showAnimation);
    }
  }
  _handleExpand(item, showAnimation) {
    const info = this._cache[item[this.idProperty]];
    if (!info) {
      return; // isn't rendered yet
    }
    toggleClass(info.expandoIcon, "open", !!item.expanded);
    if (!showAnimation) {
      item.expanded && this._provideChildrenList(item);
      item.expanded ? show(info.childrenListRoot) : hide(info.childrenListRoot);
    }
    else {
      this._provideChildrenList(item);
      show(info.childrenListRoot);
      animateProperty({
        obj: info.childrenListRoot.style,
        duration: 200,
        properties: {
          height: {
            start: item.expanded ? 0 : info.childrenList.domNode.clientHeight,
            end: item.expanded ? info.childrenList.domNode.clientHeight : 0,
            units: "px"
          }
        },
        onEnd: () => {
          !item.expanded && hide(info.childrenListRoot);
          info.childrenListRoot.style.height = "";
        }
      });
    }
  }
  _provideChildrenList(item) {
    const info = this._cache[item[this.idProperty]];
    if (!info || info.childrenList) {
      return;
    }
    const marginLeft = info.childrenListRoot.style.marginLeft;
    const marginRight = info.childrenListRoot.style.marginRight;
    info.childrenList = this.createList(info.childrenListRoot /* will be replaced */);
    info.childrenListRoot = info.childrenList.domNode;
    info.childrenList.domNode.className = "childrenListRoot";
    info.childrenList.domNode.style.marginLeft = marginLeft;
    info.childrenList.domNode.style.marginRight = marginRight;
    info.childrenList.itemRenderer = this; // so we can have a single cache of item bindings
    this.childLists[item[this.idProperty]] = info.childrenList;
    info.childrenList.items = item.children;
  }
  getItemBinding(item) {
    return this._cache[item[this.idProperty]];
  }
  selectPresentation(_rowRoot, _value, _item) {
    // does nothing
  }
  // must be overriden by the wizard to avoid cyclic dependencies
  createList(_nodeToReplace) {
    return null;
  }
}

var SelectableTreeList_1;
let SelectableTreeList = SelectableTreeList_1 = class SelectableTreeList extends FlowList {
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    /**
     * If true, invisible expando icons will be hidden.
     */
    this.hideInvisibleExpandoIcons = false;
    this.hasSelectableItems = false;
    this.itemRenderer = new SelectableTreeListRenderer();
    this.keepScrollPosition = true;
  }
  postCreate() {
    addClass(this.domNode, "esri4GESelectableTreeList");
    super.postCreate();
  }
  _setStore(store) {
    this.itemRenderer.createList = (nodeToReplace) => new SelectableTreeList_1(null, nodeToReplace);
    this.itemRenderer.idProperty = this.idProperty = store.idProperty;
    this.itemRenderer.tree = store;
    this.itemRenderer.topList = this;
    this._setItems(this.itemRenderer.tree.data);
  }
  getTree() {
    return this.itemRenderer.tree;
  }
  // if the item isn't rendered yet, null will be returned.
  getItemBinding(item) {
    return this.itemRenderer.getItemBinding(item);
  }
  //--------------------------------------------------------------------------
  //
  // Work with checkbox selection
  //
  //--------------------------------------------------------------------------
  emulateManualSelectionToggle(item) {
    this.itemRenderer.executeSelectionClick(item);
  }
  isItemSelected(item) {
    return item && item.selected;
  }
  // considers indepSelection.
  getSelectedItems(leavesOnly) {
    return this.getTree() ? this.getTree().getSelectedNodes(leavesOnly) : [];
  }
  /**
   * Returns a cache, where key - item id, value - true if selected. False values are not included.
   */
  getSelectedState(leavesOnly) {
    const state = {};
    this.getTree() &&
      this.getTree()
        .getSelectedNodes(leavesOnly)
        .forEach((item) => {
        state[item[this.idProperty]] = true;
      });
    return state;
  }
  setSelectedState(state) {
    this.getTree().changeSelect(this.getTree().root, false); // unselect all first
    if (state) {
      for (const id in state) {
        const item = this.getTree().get(id);
        item && this.getTree().changeSelect(item, !!state[id]);
      }
    }
    this._refreshCheckboxes();
  }
  setItemSelected(item, value, doNotUpdate = false) {
    this.getTree().changeSelect(item, value);
    if (!doNotUpdate) {
      this._refreshCheckboxes();
    }
  }
  setItemsSelected(items, value, doNotUpdate = false) {
    items.forEach((item) => this.getTree().changeSelect(item, value));
    if (!doNotUpdate) {
      this._refreshCheckboxes();
    }
  }
  // used in item renderer
  _onCheckboxClicked(preSelectionState, rowRoot) {
    this._refreshCheckboxes();
    const currentState = this.getSelectedState(true);
    const selectedItems = [];
    for (const id in currentState) {
      if (currentState[id] && !preSelectionState[id]) {
        selectedItems.push(this.getTree().get(id));
      }
    }
    const unselectedItems = [];
    for (const id in preSelectionState) {
      if (preSelectionState[id] && !currentState[id]) {
        unselectedItems.push(this.getTree().get(id));
      }
    }
    this.onSelectionChanged({
      selectedItems,
      unselectedItems,
      clickNode: rowRoot
    });
  }
  _refreshCheckboxes() {
    function updateSelection(list) {
      list.items.forEach((item) => list.itemRenderer.updateSelection(item));
    }
    updateSelection(this);
    for (const id in this.itemRenderer.childLists) {
      updateSelection(this.itemRenderer.childLists[id]);
    }
  }
  // emitted on user action
  onSelectionChanged(_event) { }
  //--------------------------------------------------------------------------
  //
  // Work with expanded state
  //
  //--------------------------------------------------------------------------
  isExpanded(itemOrId) {
    const item = typeof itemOrId === "string" ? this.getTree().get(itemOrId) : itemOrId;
    return item && item.expanded;
  }
  setExpanded(itemOrId, value, doNotUpdate = false) {
    const item = typeof itemOrId === "string" ? this.getTree().get(itemOrId) : itemOrId;
    item && this.itemRenderer.setExpanded(item, value, doNotUpdate, false);
  }
  toggleExpand(itemOrId) {
    this.setExpanded(itemOrId, !this.isExpanded(itemOrId));
  }
  getExpandedState() {
    const state = {};
    this.getTree() &&
      this.getTree().inspectChildren(null, (item) => {
        if (item.children && item.children.length) {
          state[item[this.idProperty]] = !!item.expanded;
        }
        return true;
      });
    return state;
  }
  setExpandedState(state, doNotUpdate = false) {
    for (const id in state) {
      this.setExpanded(id, !!state[id], doNotUpdate);
    }
  }
  onExpandChangedUser(_item) { }
};
__decorate([
  y$r()
], SelectableTreeList.prototype, "hideInvisibleExpandoIcons", void 0);
__decorate([
  y$r()
], SelectableTreeList.prototype, "rowRenderer", void 0);
__decorate([
  y$r()
], SelectableTreeList.prototype, "hasSelectableItems", void 0);
__decorate([
  y$r()
], SelectableTreeList.prototype, "onSelectionChanged", null);
__decorate([
  y$r()
], SelectableTreeList.prototype, "onExpandChangedUser", null);
SelectableTreeList = SelectableTreeList_1 = __decorate([
  i$X()
], SelectableTreeList);

function _isVariableNode(node) {
  return !!node.variable;
}
let DataVariableGrid = class DataVariableGrid extends TemplatedWidget {
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    /**
     * Used for saving expansion info.
     */
    this.queryID = "/";
    /**
     * True if variables have to be grouped into categories.
     */
    this.groupCategories = true;
    /**
     * Internal flag preventing selection listening.
     */
    this._inUpdate = false;
    /**
     * Expansion states hash. Used to save expanded state for a concrete search.
     */
    this._expansionCache = {};
  }
  postCreate() {
    addClass(this.domNode, "DataVariableGrid");
    this._treeList = new SelectableTreeList({
      rowRenderer: this._renderNode.bind(this),
      onSelectionChanged: this._onSelectionChanged.bind(this),
      hideInvisibleExpandoIcons: !this.groupCategories
      // treeIndentWidth = this.manager.variables.favorites ? 1 : this.manager.multipleSelectIsAllowed() ? 16 : 8;
    }).placeAt(this.domNode);
    this.setVariables([]); // Set an empty store
  }
  refresh() {
    this._treeList.refresh();
  }
  setVariables(variables) {
    // save the expanded state
    if (this.groupCategories) {
      this._expansionCache[this.queryID] = Object.assign(Object.assign({}, this._expansionCache[this.queryID]), this._treeList.getExpandedState());
    }
    this._cleanup();
    const nodes = this._prepareVariables(variables);
    if (nodes.length) {
      this._selectionHandler = this.manager.watch("selection", this._selectionUpdated.bind(this));
    }
    this._treeList.store = new SelectableTree(nodes);
    // EXPAND
    if (this.groupCategories && nodes.length) {
      const expandedState = (this._expansionCache[this.queryID] = this._expansionCache[this.queryID] || {});
      // Expand a single category.
      if (nodes.length === 1) {
        expandedState[nodes[0].id] = true;
      }
      this._treeList.setExpandedState(expandedState);
    }
  }
  _prepareVariables(variables) {
    return this.groupCategories
      ? this._prepareVariableCategories(variables)
      : variables.map((variable) => this._prepareVariableItem(variable));
  }
  _prepareVariableCategories(variables) {
    const categories = {};
    variables.forEach((variable) => {
      const category = variable.fieldCategory;
      let categoryNode = categories[category];
      if (!categoryNode) {
        categoryNode = { label: category, id: category, children: [] };
        categories[category] = categoryNode;
      }
      categoryNode.children.push(this._prepareVariableItem(variable));
    });
    const nodes = [];
    for (const category in categories) {
      nodes.push(categories[category]);
    }
    return this.manager.variables.queryEngine(null, { sort: [{ attribute: "label" }] })(nodes);
  }
  _prepareVariableItem(variable) {
    const node = this._prepareVariableNode(variable);
    node.id = this.manager.variables.getIdentity(variable);
    return node;
  }
  _prepareVariableNode(variable) {
    const node = {
      label: variable.description,
      variable,
      group: getToggleGroup(this.manager.variables, this.manager.variables.getIdentity(variable))
    };
    const selectionGroup = this.manager.getSelectionGroups().hash[node.group.value];
    if (selectionGroup) {
      node.selected = true;
      node.group.value = selectionGroup.value; // Synchronize selection states
    }
    return node;
  }
  //------------------------------------------------------------
  //
  // Rendering
  //
  //------------------------------------------------------------
  _renderNode(node, root, checkbox, itemBinding) {
    addClass(root, "esri4GEDataBrowserVarCell");
    return _isVariableNode(node)
      ? this._renderVariableNode(node, root, checkbox, itemBinding)
      : this._renderCategoryNode(node, root);
  }
  _renderVariableNode(node, root, checkbox, itemBinding) {
    function beforeCb(node) {
      node && place(node, checkbox.domNode, "before");
      return node;
    }
    function addToRoot(node, position) {
      node && place(node, root, position);
      return node;
    }
    // FAVORITE
    // Add an icon with favorite first
    if (this.manager.variables.favorites) {
      const icon = beforeCb(this._createVariableFavoriteIcon());
      if (icon) {
        const favoriteId = this._getFavoriteId(node);
        this._updateFavorite(icon, this.manager.variables.favorites.contains(favoriteId));
        on(icon, "click", () => {
          this._toggleFavorite(icon, favoriteId);
        });
        beforeCb(this._createSpacer());
      }
    }
    // CHECKBOX
    if (!this.manager.multipleSelectIsAllowed()) {
      checkbox.domNode.style.display = "none";
    }
    else {
      addToRoot(this._createSpacer());
    }
    // LABEL
    const label = create("div", { class: "esriGETrimWithEllipses esri4GEDataBrowserVarLabel", textContent: node.label }, root);
    // TOGGLE
    // Add a variable toggle if necessary
    if (node.group.states) {
      addToRoot(this._createSpacer());
      const toggle = new VariableToggle({
        states: node.group.states,
        value: node.group.value,
        onChange: () => {
          this._onVariableToggleChange(node, toggle);
        }
      }).placeAt(root);
      itemBinding.variableToggle = toggle; // to be used in this class later
    }
    // INFO
    // Add info icon for a variable node
    const icon = this._createInfoIcon();
    if (icon) {
      addToRoot(this._createSpacer());
      addToRoot(icon);
      setTooltipToNode(icon, () => {
        this.manager.variableInfo.variable = node.variable;
        return this.manager.variableInfo.domNode.outerHTML;
      }, {
        position: ["above", "below"],
        stayOnHover: true,
        hideOnClick: true
      });
    }
    if (this.manager.selectionLimit) {
      addClass(label, "esriGEClickable");
      on(label, "click", () => {
        this._treeList.emulateManualSelectionToggle(node);
      });
      if (this.manager.selectionLimit === 1) {
        addClass(root, "DataBrowser_Selectable");
      }
    }
  }
  _renderCategoryNode(node, root) {
    place(this._createSpacer(), root);
    // Add a BLOCK with text label having a dynamic width as the last child. The order is important!!!
    const label = create("div", { class: "esriGETrimWithEllipses esri4GEDataBrowserVarLabel", textContent: node.label }, root);
    addClass(label, "esriGEClickable");
    on(label, "click", () => {
      this._onCategoryExpand(node.id);
    });
  }
  _createVariableFavoriteIcon() {
    return create("div", { class: "esri4GEDataBrowserVarIcon FavoriteItemIcon" });
  }
  _getFavoriteId(node) {
    return node.id;
  }
  _createInfoIcon() {
    if (this.manager.variableInfo) {
      const icon = create("div", {
        class: "esri4GEDataBrowserVarIcon esri4GEInfoIcon"
      });
      return icon;
    }
    return null;
  }
  _createSpacer() {
    return create("div", {
      class: "esri4GEDataBrowserVarSpacer",
      innerHTML: "&nbsp;"
    });
  }
  _onCategoryExpand(id) {
    this._treeList.toggleExpand(id);
  }
  //------------------------------------------------------------
  //
  // Work with favorites
  //
  //------------------------------------------------------------
  _toggleFavorite(icon, favoriteID) {
    const favorites = this.manager.variables.favorites;
    if (!favorites.contains(favoriteID)) {
      favorites.add(favoriteID);
    }
    else {
      favorites.remove(favoriteID);
    }
    const isFavorite = favorites.contains(favoriteID);
    this._updateFavorite(icon, isFavorite);
    invoke(this, "_saveFavorites", 1000);
    return isFavorite;
  }
  _updateFavorite(icon, checked) {
    if (checked) {
      removeClass(icon, "FavoriteItem");
      addClass(icon, "FavoriteItemChecked");
    }
    else {
      removeClass(icon, "FavoriteItemChecked");
      addClass(icon, "FavoriteItem");
    }
  }
  // keep public to allow typing in invoke
  _saveFavorites() {
    this.manager.variables.favorites.save();
  }
  //------------------------------------------------------------
  //
  // Work with checkboxes and toggles
  //
  //------------------------------------------------------------
  // CHECKBOX
  _onSelectionChanged(event) {
    // Update the current selection. The _inUpdate internal flag blocks the _selectionUpdated method.
    this._inUpdate = true;
    this.manager.removeFromSelection(event.unselectedItems.map((item) => item.group.value));
    const selectedItems = event.selectedItems.slice();
    // make sure we don't add more than the allowed limit
    if (this.manager.selectionLimit > 0) {
      const prevNumber = selectedItems.length;
      selectedItems.length = Math.max(0, Math.min(selectedItems.length, this.manager.selectionLimit - this.manager.selection.length));
      if (selectedItems.length < prevNumber) {
        // we've reached the limit, need to unselect items in the tree list
        const itemsToUnselect = event.selectedItems.slice(selectedItems.length);
        this._treeList.setItemsSelected(itemsToUnselect, false);
      }
    }
    // Limit is also handled in the manager, so we just pass the selection as is and let it emit the "limit" event if needed
    let hasSelected = false;
    if (event.selectedItems.length) {
      hasSelected = !!this.manager.addToSelection(event.selectedItems.map((item) => item.group.value));
    }
    this._inUpdate = false;
    const isSingleSelectionMode = this.manager.selectionLimit === 1;
    hasSelected &&
      !isSingleSelectionMode &&
      this.animateSelection &&
      this.animateSelection(query(".esri4GEDataBrowserVarLabel", event.clickNode)[0]);
  }
  // TOGGLE
  _onVariableToggleChange(node, toggle) {
    node.group.value = toggle.value;
    this._inUpdate = true;
    this.manager.updateSelection(toggle.value);
    this._inUpdate = false;
    // Force updates
    if (this.manager.allowMultipleSelectInGroup) {
      this._selectionUpdated();
    }
  }
  // SELECTION SYNC
  _selectionUpdated() {
    if (this._inUpdate) {
      return;
    }
    // Update selection state of nodes in the store
    const selectedState = {};
    const selectionGroups = this.manager.getSelectionGroups();
    this._treeList.getTree().data.forEach((node) => {
      (node.children || [node]).forEach((variableNode) => {
        let selectionGroup = selectionGroups.hash[variableNode.group.value];
        if (selectionGroup) {
          variableNode.group.value = selectionGroup.value;
        }
        // Synchronize variable toggle
        const itemBinding = this._treeList.getItemBinding(variableNode);
        const toggle = itemBinding && itemBinding.variableToggle;
        if (toggle) {
          selectionGroup = toggle && selectionGroups.hash[toggle.value];
          if (selectionGroup) {
            toggle.value = selectionGroup.value;
          }
        }
        // Synchronize selection states
        selectedState[variableNode.id] = !!selectionGroup;
      });
    });
    this._treeList.setSelectedState(selectedState);
  }
  //------------------------------------------------------------
  //
  // Animation
  //
  //------------------------------------------------------------
  animateSelection(node) {
    if (this.manager.allowShoppingCart) {
      this.manager.animateSelection(node);
    }
  }
  //------------------------------------------------------------
  //
  // Destroy
  //
  //------------------------------------------------------------
  destroy() {
    this._cleanup();
  }
  _cleanup() {
    if (this._selectionHandler) {
      this._selectionHandler.remove();
      this._selectionHandler = null;
    }
  }
};
__decorate([
  y$r()
], DataVariableGrid.prototype, "manager", void 0);
__decorate([
  y$r()
], DataVariableGrid.prototype, "queryID", void 0);
__decorate([
  y$r()
], DataVariableGrid.prototype, "groupCategories", void 0);
DataVariableGrid = __decorate([
  i$X()
], DataVariableGrid);

const nls$1 = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").DataVariablesPage;
let DataVariablesPage = class DataVariablesPage extends WizardPage {
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  set pageIsActive(value) {
    this._set("pageIsActive", value);
    this._grid && this._grid.setVariables([]);
    value && this._querySelectedVariables();
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class="DataVariablesPage">
    <div>
      <div class="BreadcrumbHeight"></div>
      <div class="esri4GEDataBrowserVarHeader DataVariablesPage_VarCount" data-attach-point="_varCountNode">&nbsp;</div>
    </div>
    <div>
      <div data-attach-point="_divTree" class="DataVariablesPage_Container DataVariablesPage_Variables"></div>
      <div data-attach-point="_progressDiv"></div>
    </div>
    <div></div>
  </div>`;
  }
  postCreate() {
    super.postCreate();
    // GRID
    this._grid = this.manager.createVariableGrid({ groupCategories: true }, this._divTree);
    // APPLY BUTTON
    this.manager.watch("selection", this._updateApplyButtonAvailability.bind(this));
    this._updateApplyButtonAvailability();
    // START
    this._querySelectedVariables();
  }
  _updateApplyButtonAvailability() {
    this._setButtonEnabled("apply", !!this.manager.selection.length);
  }
  //--------------------------------------------------------------------------
  //
  // Show variables
  //
  //--------------------------------------------------------------------------
  _querySelectedVariables() {
    this._varCountNode.innerHTML = "&nbsp;";
    const queryResults = this.searchResults || this.manager.queryVariables();
    this.searchResults = null;
    this._showProgress((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(queryResults).then((variables) => {
      this._showVariables(variables);
    }));
  }
  _showVariables(variables) {
    this._composeVarTitle(variables.length);
    this._grid.setVariables(variables);
  }
  _composeVarTitle(variableCount) {
    const query = this.manager.variableQuery;
    let searchKey = query.searchString;
    const groupPromiseLike = query.dataCollectionID
      ? this.manager.getDataCollection() || {}
      : query.categoryID
        ? this.manager.getCategory() || {}
        : null;
    return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(groupPromiseLike).then((group) => {
      if (searchKey === "*" && group) {
        searchKey = null;
      }
      const resource = !group
        ? query.favorites
          ? nls$1.favoriteVariables
          : searchKey === "*"
            ? nls$1.allVariables
            : nls$1.searchVariables
        : !searchKey
          ? nls$1.groupVariables
          : nls$1.searchInGroupVariables;
      const params = {
        searchKey,
        groupName: group && (group.title || group.name || "?")
      };
      this._varCountNode.textContent = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.s)(resource, params) + " (" + variableCount + ")";
      // Compose a unique id of the query to designate expansion nodes in the variable grid
      const ids = ["c:" + (query.countryID || "_")];
      if (params.searchKey) {
        ids.push("s:" + params.searchKey);
      }
      if (params.groupName) {
        ids.push("g:" + params.groupName);
      }
      if (query.favorites) {
        ids.push("f");
      }
      this._grid.queryID = ids.join("/");
    });
  }
};
__decorate([
  y$r()
], DataVariablesPage.prototype, "searchResults", void 0);
__decorate([
  y$r()
], DataVariablesPage.prototype, "manager", void 0);
__decorate([
  y$r()
], DataVariablesPage.prototype, "pageIsActive", null);
DataVariablesPage = __decorate([
  i$X()
], DataVariablesPage);

const nls = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.a)("DataBrowser").VariableInfo;
let VariableInfo = class VariableInfo extends TemplatedWidget {
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  set variable(variable) {
    this._set("variable", variable);
    this._buildInfoFromVariable(variable);
  }
  //--------------------------------------------------------------------------
  //
  // Initialization
  //
  //--------------------------------------------------------------------------
  constructor(params, refNode, position) {
    super(params, refNode, position);
    this._templateString = `
  <div class="VariableInfo">
    <div class="VariableInfo_Header" data-attach-point="descriptionHeader">${nls.name}</div>
    <div class="VariableInfo_Value" data-attach-point="_descriptionValue"></div>
    <div data-attach-point="fullNameGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="fullNameHeader">${nls.variable}</div>
      <div class="VariableInfo_Value" data-attach-point="fullNameValue"></div>
    </div>
    <div data-attach-point="percentBaseGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="percentBaseHeader">${nls.percentBase}</div>
      <div class="VariableInfo_Value" data-attach-point="percentBaseValue"></div>
    </div>
    <div data-attach-point="averageBaseGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="averageBaseHeader">${nls.averageBase}</div>
      <div class="VariableInfo_Value" data-attach-point="averageBaseValue"></div>
    </div>
    <div data-attach-point="sourceGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="sourceHeader">${nls.source}</div>
      <div class="VariableInfo_Value" data-attach-point="sourceValue"></div>
    </div>
    <div data-attach-point="vintageGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="vintageHeader">${nls.vintage}</div>
      <div class="VariableInfo_Value" data-attach-point="vintageValue"></div>
    </div>
    <div data-attach-point="definitionGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="definitionHeader">${nls.definition}</div>
      <div class="VariableInfo_Value" data-attach-point="definitionValue"></div>
    </div>
    <div data-attach-point="indexBaseGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="indexBaseHeader">${nls.indexBase}</div>
      <div class="VariableInfo_Value" data-attach-point="indexBaseValue"></div>
    </div>
    <div data-attach-point="_filteringTagsGroup">
      <div class="VariableInfo_Spacer">&nbsp;</div>
      <div class="VariableInfo_Header" data-attach-point="filteringTagsHeader">${nls.filters}</div>
      <div class="VariableInfo_Value" data-attach-point="_filteringTagsValue"></div>
    </div>
  </div>`;
  }
  postCreate() {
    this._fieldsCache = {};
    this.infoFields = typeof this.infoFields === "string" ? this.infoFields.split(",") : this.infoFields || [];
    for (let i = 0; i < this.infoFields.length; i++) {
      let field = this.infoFields[i];
      const headerIndex = field.indexOf(":");
      if (headerIndex > 0) {
        const header = field.substr(headerIndex + 1);
        field = field.substr(0, headerIndex);
        const headerDiv = this[field + "Header"];
        if (headerDiv) {
          headerDiv.textContent = header;
        }
      }
      this._fieldsCache[field] = true;
    }
  }
  //--------------------------------------------------------------------------
  //
  // Build info
  //
  //--------------------------------------------------------------------------
  _buildInfoFromVariable(variable) {
    this._descriptionValue.innerHTML = variable.description;
    this._updateGroup(variable, "vintage");
    // Variable tags are converted from array to hash while parsing data collections.
    // So, we directly get the Source tag and show its value.
    const sourceTag = variable.filteringTags.Source;
    this._updateGroup(variable, "source", sourceTag && sourceTag.value);
    // Update optional fields
    this._updateGroup(variable, "fullName", true);
    const percentBase = this._getOptionalField(variable, "percentBase");
    this._updateGroup(variable, "percentBase", percentBase && this._getBaseFieldDescription(variable, "percentBase"));
    const averageBase = this._getOptionalField(variable, "averageBase");
    this._updateGroup(variable, "averageBase", averageBase && this._getBaseFieldDescription(variable, "averageBase"));
    this._updateGroup(variable, "indexBase", true);
    this._updateGroup(variable, "definition");
    // In the case of filtering tags we add divs as "name: value" pairs
    const filters = this._getOptionalField(variable, "filteringTags");
    this._filteringTagsGroup.style.display = filters ? "" : "none";
    if (filters) {
      empty(this._filteringTagsValue);
      for (const id in filters) {
        const filter = filters[id];
        create("div", { textContent: filter.name + ": " + filter.value }, this._filteringTagsValue);
      }
    }
  }
  _getBaseFieldDescription(variable, baseField) {
    return variable[baseField + "Alias"] + " (" + variable[baseField] + ")";
  }
  _updateGroup(variable, field, value) {
    if (typeof value === "undefined") {
      // The case of required field
      value = variable[field];
    }
    else if (value === true) {
      // The case of an optional field
      value = this._getOptionalField(variable, field);
    }
    let div = this[field + "Value"];
    div.innerHTML = value;
    div = this[field + "Group"];
    div.style.display = value ? "" : "none";
  }
  _getOptionalField(variable, fieldName) {
    return this._fieldsCache["*"] || this._fieldsCache[fieldName] ? variable[fieldName] : null;
  }
};
__decorate([
  y$r()
], VariableInfo.prototype, "infoFields", void 0);
__decorate([
  y$r()
], VariableInfo.prototype, "variable", null);
VariableInfo = __decorate([
  i$X()
], VariableInfo);

let DataBrowserManager = class DataBrowserManager extends u$D {
  //--------------------------------------------------------------------------
  //
  // Getters & setters
  //
  //--------------------------------------------------------------------------
  /**
   * Array of selected variables full names.
   */
  set selection(value) {
    this._selectionGroups = null;
    this._set("selection", value);
  }
  //--------------------------------------------------------------------------
  //
  // Constructor
  //
  //--------------------------------------------------------------------------
  constructor(dataBrowser) {
    super();
    this.selectionLimit = -1;
    this.allowShoppingCart = false;
    /**
     * Undocumented feature used in Comparison Reports.
     */
    this.allowMultipleSelectInGroup = false;
    /**
     * Last pagination index on the category page.
     */
    this.categoryPageIndex = 0;
    this.variables = dataBrowser.variables;
    this.selectionLimit = isNaN(dataBrowser.selectionLimit) ? -1 : dataBrowser.selectionLimit;
    this.allowShoppingCart = this.multipleSelectIsAllowed() && !!dataBrowser.shoppingCart;
    this.allowMultipleSelectInGroup = this.multipleSelectIsAllowed() && !!dataBrowser.allowMultipleSelectInGroup;
    // Synchronize variable query with dataBrowser
    dataBrowser.variableQuery = this.variableQuery = dataBrowser.variableQuery || {};
    // Synchronize countryID with dataBrowser
    dataBrowser.countryID = this.variableQuery.countryID =
      this.variableQuery.countryID || dataBrowser.countryID || null;
    // Add favorites to variable store if necessary.
    if (dataBrowser.favorites && !this.variables.favorites) {
      this.variables.favorites = dataBrowser.favorites;
    }
    // Start the synchronization with the given country.
    this.variables.synchronize(dataBrowser.countryID);
    // We async apply the input selection in the case of multiple selection.
    if (dataBrowser.selection && dataBrowser.selection.length && this.multipleSelectIsAllowed()) {
      this.changeSelection(dataBrowser.selection);
    }
    // Anyway, the selection in dataBrowser is now synchronized with this selection.
    // It will be updated later when variable store will be synchronized.
    this._set("selection", []);
    dataBrowser.selection = this.selection;
    // Prepare variable info
    let info = dataBrowser.variableInfo;
    if (info === false) {
      return;
    }
    if (info === true) {
      info = "fullName";
    }
    else if (info instanceof VariableInfo) {
      this.variableInfo = info;
      return;
    }
    this.variableInfo = new VariableInfo({ infoFields: info });
  }
  // override
  postscript() {
    // do nothing
  }
  //--------------------------------------------------------------------------
  //
  // Work with selection
  //
  //--------------------------------------------------------------------------
  multipleSelectIsAllowed() {
    return this.selectionLimit < 0 || this.selectionLimit > 1;
  }
  /**
   * Asynchronously changes a selection when variable store completes
   * synchronization with the current country.
   */
  changeSelection(selection) {
    const dfd = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.c)();
    (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this.variables.synchronize()).then(() => {
      setTimeout(() => {
        this._set("selection", []);
        this.addToSelection(selection, true);
        dfd.resolve();
      });
    });
    return dfd.promise;
  }
  /**
   * Validates variables of the current selection to be available in the variable store.
   * This situation can when variables form a temporary source (e.g. Web Map variables)
   * are removed from the variable store.
   */
  validateSelection() {
    const validSelection = this.selection.filter((id) => this.variables.get(id));
    if (validSelection.length !== this.selection.length) {
      this.selection = validSelection;
    }
  }
  /**
   * Adds variable ID(s) to selection.
   * @returns a hash of IDs of variables added to selection.
   */
  addToSelection(idsOrId, forceSet = false) {
    const ids = typeof idsOrId === "string" ? [idsOrId] : idsOrId || [];
    const newSelection = this.selection.slice();
    let added = {};
    let limitReached = false;
    ids.forEach((id) => {
      if (!this.variables.get(id)) {
        return;
      }
      if (this.selectionLimit >= 0 && newSelection.length === this.selectionLimit) {
        limitReached = true;
        return;
      }
      const data = getToggleGroups(this.variables, [id], this.allowMultipleSelectInGroup);
      if (newSelection.every((newId) => !data.hash[newId])) {
        newSelection.push(data.groups[0].value);
        added[id] = true;
      }
    });
    if (newSelection.length && !this._ensureValidSelection(newSelection)) {
      return null;
    }
    if (forceSet || this.selection.length !== newSelection.length) {
      this.selection = newSelection;
    }
    else {
      added = null;
    }
    limitReached && this.onLimit();
    return added;
  }
  // Could be overriden to test that selected variables can be used together
  _ensureValidSelection(_selection) {
    return true;
  }
  /**
   * Removes variable ID(s) from selection.
   * @returns a hash of IDs of variables removed from the selection.
   */
  removeFromSelection(idsOrId, removeMultipleNodes = false) {
    const ids = typeof idsOrId === "string" ? [idsOrId] : idsOrId || [];
    const newSelection = [];
    const hash = getToggleGroups(this.variables, ids, !removeMultipleNodes && this.allowMultipleSelectInGroup).hash;
    const removed = {};
    this.selection.forEach((id) => {
      if (!hash[id]) {
        newSelection.push(id);
      }
      else {
        removed[id] = true;
      }
    });
    if (this.selection.length !== newSelection.length) {
      this.selection = newSelection;
      return removed;
    }
    return null;
  }
  /**
   * Updates the current selection by replacing ID of a related variable with the new ID.
   */
  updateSelection(id) {
    const data = getToggleGroups(this.variables, [id], this.allowMultipleSelectInGroup);
    let index = -1;
    this.selection.some((id, i) => {
      if (data.hash[id]) {
        index = i;
        return true;
      }
      return false;
    });
    if (index >= 0) {
      const newSelection = this.selection.slice();
      newSelection[index] = data.groups[0].value;
      this.selection = newSelection;
    }
  }
  /**
   * Gets variable groups for the current selection.
   */
  getSelectionGroups() {
    if (!this._selectionGroups) {
      this._selectionGroups = getToggleGroups(this.variables, this.selection, this.allowMultipleSelectInGroup);
    }
    return this._selectionGroups;
  }
  /**
   * Animates variables selection.
   */
  animateSelection(node) {
    this.flyAnim.fly(node, "esri4GEDataBrowser_SelectVar", ["top", isBodyLtr() ? "right" : "left"]);
  }
  //--------------------------------------------------------------------------
  //
  // Work with variables store
  //
  //--------------------------------------------------------------------------
  /**
   * Creates a query based on the current variable query and including the given properties only.
   * It is not necessary to specify countryID property because it is added automatically.
   */
  composeQuery(allowedProperties) {
    const props = typeof allowedProperties === "string" ? [allowedProperties] : allowedProperties || [];
    const newQuery = { countryID: this._getQueryCountryID() };
    props.forEach((property) => {
      const value = this.variableQuery[property];
      if (value) {
        newQuery[property] = value;
      }
    });
    return newQuery;
  }
  _getQueryCountryID() {
    return this.variableQuery.countryID;
  }
  /**
   * Validates the current variable query.
   * @returns a promise whose result is null or variable query result.
   * If variable query is invalid, all its properties except
   * countryID are removed, so that the starting page of Data Browser will be shown.
   */
  validateQuery() {
    const query = this.variableQuery;
    const promise = query.dataCollectionID
      ? this.getDataCollection()
      : query.categoryID
        ? this.getCategory()
        : this.queryVariables();
    return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(promise).then((result) => {
      if (!result) {
        this.variableQuery = this.composeQuery();
      }
      return query.dataCollectionID || query.categoryID ? null : result;
    }, () => {
      this.variableQuery = this.composeQuery();
    });
  }
  /**
   * Request all categories for the current country.
   */
  getCategories() {
    return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this.variables.categories.query(this.composeQuery()));
  }
  /**
   * Requests variables applying the current variable query.
   */
  queryVariables(options) {
    return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(this.variables.query(this.variableQuery, options));
  }
  /**
   * Requests a category by ID. If ID is absent, the category from the current variable query is requested.
   */
  getCategory(id) {
    id = id || this.variableQuery.categoryID;
    if (!id) {
      return null;
    }
    const query = this.composeQuery();
    query.id = id;
    const result = this.variables.categories.query(query);
    if ("then" in result) {
      return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(result).then((categories) => this._getCategory(categories, id));
    }
    return this._getCategory(result, id);
  }
  // Could be overriden to query additional categories
  _getCategory(categories, _id) {
    return categories[0];
  }
  /**
   * Requests a data collection by ID. If ID is absent, the data collection from the current variable query is requested.
   */
  getDataCollection(id) {
    id = id || this.variableQuery.dataCollectionID;
    if (!id) {
      return null;
    }
    const query = this.composeQuery();
    query.id = id;
    const result = this.variables.dataCollections.query(query);
    if ("then" in result) {
      return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.w)(result).then((dataCollections) => this._getDataCollection(dataCollections, id));
    }
    return this._getDataCollection(result, id);
  }
  // Could be overriden to query additional data collections
  _getDataCollection(dataCollections, _id) {
    return dataCollections[0];
  }
  onLimit() { }
};
__decorate([
  y$r()
], DataBrowserManager.prototype, "variables", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "selectionLimit", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "variableQuery", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "variableInfo", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "flyAnim", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "allowShoppingCart", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "allowMultipleSelectInGroup", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "categoryPageIndex", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "createVariableGrid", void 0);
__decorate([
  y$r()
], DataBrowserManager.prototype, "selection", null);
__decorate([
  y$r()
], DataBrowserManager.prototype, "onLimit", null);
DataBrowserManager = __decorate([
  i$X()
], DataBrowserManager);

// geoenrichment.widgets.DataBrowser
class DataBrowserContentFactory {
  createManager(dataBrowser) {
    return new DataBrowserManager(dataBrowser);
  }
  createBreadcrumb(options) {
    return new Breadcrumb(options);
  }
  createCategoriesPage(options) {
    return new DataCategoriesPage(options);
  }
  createDataCollectionsPage(options) {
    return new DataCollectionsPage(options);
  }
  createVariablesPage(options) {
    return new DataVariablesPage(options);
  }
  createVariableGrid(options, refNode) {
    return new DataVariableGrid(options).placeAt(refNode);
  }
}

// Executes the callback after the resolver's promise is fulfilled.
function resolveCallback(resolver, query, callback) {
  const promise = resolver && resolver(query);
  return (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.i)(promise) ? callback() : promise.catch(() => { }).then(() => callback());
}
class DeferredStore {
  //--------------------------------------------------------------------------
  //
  //  Methods
  //
  //--------------------------------------------------------------------------
  constructor(options) {
    //--------------------------------------------------------------------------
    //
    //  Instance variables
    //
    //--------------------------------------------------------------------------
    this.idProperty = "id";
    /**
     * True if id property should be case insensitive. Defaults to true.
     */
    this.indexIgnoreCase = true;
    this.queryEngine = createSimpleQueryEngine();
    mixin(this, options);
    this.setData(this.data);
  }
  setData(data) {
    this.data = [];
    this.index = {};
    data &&
      data.forEach((object, i) => {
        this.data[i] = object;
        let id = this.getIdentity(object);
        if (this.indexIgnoreCase) {
          id = id.toUpperCase();
        }
        this.index[id] = i;
      });
  }
  get(id) {
    if (this.indexIgnoreCase && id) {
      id = id.toUpperCase();
    }
    return this.data[this.index[id]];
  }
  getIdentity(object) {
    return object[this.idProperty];
  }
  query(query, options) {
    return resolveCallback(this.resolver, query, () => this.syncQuery(query, options));
  }
  syncQuery(query, options) {
    return this.queryEngine(query, options)(this.data);
  }
}
DeferredStore.resolveCallback = resolveCallback;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function s$p(e,t,o){if(!e||!e.read||!1===e.read.enabled||!e.read.source)return !1;const n=e.read.source;if("string"==typeof n){if(n===t)return !0;if(n.indexOf(".")>-1&&0===n.indexOf(t)&&f$x(n,o))return !0}else for(const s of n){if(s===t)return !0;if(s.indexOf(".")>-1&&0===s.indexOf(t)&&f$x(s,o))return !0}return !1}function i$N(e){return e&&(!e.read||!1!==e.read.enabled&&!e.read.source)}function f$m(e,t,r,n,f){let a=i$Y(t[r],f);i$N(a)&&(e[r]=!0);for(const i of Object.getOwnPropertyNames(t))a=i$Y(t[i],f),s$p(a,r,n)&&(e[i]=!0);}function a$D(e,t,r,o){const s=r.metadatas,i=a$M(s[t],"any",o),f=i&&i.default;if(void 0===f)return;const a="function"==typeof f?f.call(e,t,o):f;void 0!==a&&r.set(t,a);}const c$S={origin:"service"};function u$y(r,n,s=c$S){if(!n||"object"!=typeof n)return;const i=e$G(r),u=i.metadatas,d={};for(const e of Object.getOwnPropertyNames(n))f$m(d,u,e,n,s);i.setDefaultOrigin(s.origin);for(const e of Object.getOwnPropertyNames(d)){const f=i$Y(u[e],s).read,a=f&&f.source;let c;c=a&&"string"==typeof a?o$E(n,a):n[e],f&&f.reader&&(c=f.reader.call(r,c,n,s)),void 0!==c&&i.set(e,c);}if(!s||!s.ignoreDefaults)for(const e of Object.getOwnPropertyNames(u))d[e]||a$D(r,e,i,s);i.setDefaultOrigin("user");}function d$u(e,t,r,o=c$S){var n;const s={...o,messages:[]};r(s),null==(n=s.messages)||n.forEach((t=>{"warning"!==t.type||e.loaded?o&&o.messages&&o.messages.push(t):e.loadWarnings.push(t);}));}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const l$D=n$T.getLogger("esri.core.accessorSupport.write");function a$C(r,e,t,i,o){var n,s;const u={};return null==(n=e.write)||null==(s=n.writer)||s.call(r,i,u,t,o),u}function f$l(r,e,t,i,n,u){if(!i||!i.write)return !1;const a=r.get(t);if(!n&&i.write.overridePolicy){const e=i.write.overridePolicy.call(r,a,t,u);void 0!==e&&(n=e);}if(n||(n=i.write),!n||!1===n.enabled)return !1;if((null===a&&!n.allowNull||void 0===a)&&n.isRequired){const e=new s$x("web-document-write:property-required",`Missing value for required property '${t}' on '${r.declaredClass}'`,{propertyName:t,target:r});return e&&u&&u.messages?u.messages.push(e):e&&!u&&l$D.error(e.name,e.message),!1}if(void 0===a)return !1;if(null===a&&!n.allowNull)return !1;if(c$R(r,t,u,i,a))return !1;if(void 0!==i.default)return !0;if(!n.ignoreOrigin&&u&&u.origin){if(e.store.originOf(t)<t$G(u.origin))return !1}return !0}function c$R(r,e,t,i,o){const n=i.default;if(void 0===n)return !1;if(null!=i.defaultEquals)return i.defaultEquals(o);if("function"==typeof n){if(Array.isArray(o)){const i=n.call(r,e,t);return l$H(i,o)}return !1}return n===o}function p$T(r,t,o,n){const s=e$G(r),u=s.metadatas,l=s$z(u[t],n);return !!l&&f$l(r,s,t,l,o,n)}function g$a(r,o,s){if(r&&"function"==typeof r.toJSON&&(!r.toJSON.isDefaultToJSON||!r.write))return u$M(o,r.toJSON());const u=e$G(r),l=u.metadatas;for(const e in l){const g=s$z(l[e],s);if(!f$l(r,u,e,g,void 0,s))continue;const d=r.get(e),m=a$C(r,g,g.write&&"string"==typeof g.write.target?g.write.target:e,d,s);var c,p;if(Object.keys(m).length>0)o=u$M(o,m),null!=s&&null!=(c=s.resources)&&null!=(p=c.pendingOperations)&&p.length&&Promise.all(s.resources.pendingOperations).then((()=>u$M(o,m))),s&&s.writtenProperties&&s.writtenProperties.push({target:r,propName:e,oldOrigin:c$V(u.store.originOf(e)),newOrigin:s.origin});}return o}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const i$M=s=>{let i=class extends s{constructor(...r){super(...r);}read(r,t){u$y(this,r,t);}write(r={},t){return g$a(this,r,t)}toJSON(r){return this.write({},r)}static fromJSON(r,t){return c$Q.call(this,r,t)}};return i=e$u([i$X("esri.core.JSONSupport")],i),i.prototype.toJSON.isDefaultToJSON=!0,i};function c$Q(r,t){if(!r)return null;if(r.declaredClass)throw new Error("JSON object is already hydrated");const s=new this;return s.read(r,t),s}let a$B=class extends(i$M(u$D)){};a$B=e$u([i$X("esri.core.JSONSupport")],a$B);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let o$i;const r$g={values:[1,.3048,.3048006096012192,.3047972654,.9143917962,.201166195164,.9143984146160287,.3047994715386762,20.11676512155263,20.11678249437587,.9143985307444408,.91439523,.3047997101815088,20.116756,5e4,15e4],units:["Meter","Foot","Foot_US","Foot_Clarke","Yard_Clarke","Link_Clarke","Yard_Sears","Foot_Sears","Chain_Sears","Chain_Benoit_1895_B","Yard_Indian","Yard_Indian_1937","Foot_Gold_Coast","Chain_Sears_1922_Truncated","50_Kilometers","150_Kilometers"],2066:5,2136:12,2155:2,2157:0,2158:0,2159:12,2160:12,2204:2,2219:0,2220:0,2254:2,2255:2,2256:1,2265:1,2266:1,2267:2,2268:2,2269:1,2270:1,2271:2,2272:2,2273:1,2294:0,2295:0,2314:3,2899:2,2900:2,2901:1,2909:1,2910:1,2911:2,2912:2,2913:1,2914:1,2992:1,2993:0,2994:1,3080:1,3089:2,3090:0,3091:2,3102:2,3141:0,3142:0,3167:13,3359:2,3360:0,3361:1,3362:0,3363:2,3364:0,3365:2,3366:3,3404:2,3405:0,3406:0,3407:3,3439:0,3440:0,3479:1,3480:0,3481:1,3482:0,3483:1,3484:0,3485:2,3486:0,3487:2,3488:0,3489:0,3490:2,3491:0,3492:2,3493:0,3494:2,3495:0,3496:2,3497:0,3498:2,3499:0,3500:2,3501:0,3502:2,3503:0,3504:2,3505:0,3506:2,3507:0,3508:2,3509:0,3510:2,3511:0,3512:2,3513:0,3514:0,3515:2,3516:0,3517:2,3518:0,3519:2,3520:0,3521:2,3522:0,3523:2,3524:0,3525:2,3526:0,3527:2,3528:0,3529:2,3530:0,3531:2,3532:0,3533:2,3534:0,3535:2,3536:0,3537:2,3538:0,3539:2,3540:0,3541:2,3542:0,3543:2,3544:0,3545:2,3546:0,3547:2,3548:0,3549:2,3550:0,3551:2,3552:0,3553:2,3582:2,3583:0,3584:2,3585:0,3586:2,3587:0,3588:1,3589:0,3590:1,3591:0,3592:0,3593:1,3598:2,3599:0,3600:2,3605:1,3606:0,3607:0,3608:2,3609:0,3610:2,3611:0,3612:2,3613:0,3614:2,3615:0,3616:2,3617:0,3618:2,3619:0,3620:2,3621:0,3622:2,3623:0,3624:2,3625:0,3626:2,3627:0,3628:2,3629:0,3630:2,3631:0,3632:2,3633:0,3634:1,3635:0,3636:1,3640:2,3641:0,3642:2,3643:0,3644:1,3645:0,3646:1,3647:0,3648:1,3649:0,3650:2,3651:0,3652:2,3653:0,3654:2,3655:0,3656:1,3657:0,3658:2,3659:0,3660:2,3661:0,3662:2,3663:0,3664:2,3668:2,3669:0,3670:2,3671:0,3672:2,3673:0,3674:2,3675:0,3676:1,3677:2,3678:0,3679:1,3680:2,3681:0,3682:1,3683:2,3684:0,3685:0,3686:2,3687:0,3688:2,3689:0,3690:2,3691:0,3692:2,3696:2,3697:0,3698:2,3699:0,3700:2,3793:0,3794:0,3812:0,3854:0,3857:0,3920:0,3978:0,3979:0,3991:2,3992:2,4026:0,4037:0,4038:0,4071:0,4082:0,4083:0,4087:0,4088:0,4217:2,4414:0,4415:0,4417:0,4434:0,4437:0,4438:2,4439:2,4462:0,4467:0,4471:0,4474:0,4559:0,4647:0,4822:0,4826:0,4839:0,5018:0,5048:0,5167:0,5168:0,5221:0,5223:0,5234:0,5235:0,5243:0,5247:0,5266:0,5316:0,5320:0,5321:0,5325:0,5337:0,5361:0,5362:0,5367:0,5382:0,5383:0,5396:0,5456:0,5457:0,5469:0,5472:4,5490:0,5513:0,5514:0,5523:0,5559:0,5588:1,5589:3,5596:0,5627:0,5629:0,5641:0,5643:0,5644:0,5646:2,5654:2,5655:2,5659:0,5700:0,5825:0,5836:0,5837:0,5839:0,5842:0,5844:0,5858:0,5879:0,5880:0,5887:0,5890:0,6128:1,6129:1,6141:1,6204:0,6210:0,6211:0,6307:0,6312:0,6316:0,6362:0,6391:1,6405:1,6406:0,6407:1,6408:0,6409:1,6410:0,6411:2,6412:0,6413:2,6414:0,6415:0,6416:2,6417:0,6418:2,6419:0,6420:2,6421:0,6422:2,6423:0,6424:2,6425:0,6426:2,6427:0,6428:2,6429:0,6430:2,6431:0,6432:2,6433:0,6434:2,6435:0,6436:2,6437:0,6438:2,6439:0,6440:0,6441:2,6442:0,6443:2,6444:0,6445:2,6446:0,6447:2,6448:0,6449:2,6450:0,6451:2,6452:0,6453:2,6454:0,6455:2,6456:0,6457:2,6458:0,6459:2,6460:0,6461:2,6462:0,6463:2,6464:0,6465:2,6466:0,6467:2,6468:0,6469:2,6470:0,6471:2,6472:0,6473:2,6474:0,6475:2,6476:0,6477:2,6478:0,6479:2,6484:2,6485:0,6486:2,6487:0,6488:2,6489:0,6490:2,6491:0,6492:2,6493:0,6494:1,6495:0,6496:1,6497:0,6498:0,6499:1,6500:0,6501:2,6502:0,6503:2,6504:0,6505:2,6506:0,6507:2,6508:0,6509:0,6510:2,6515:1,6516:0,6518:0,6519:2,6520:0,6521:2,6522:0,6523:2,6524:0,6525:2,6526:0,6527:2,6528:0,6529:2,6530:0,6531:2,6532:0,6533:2,6534:0,6535:2,6536:0,6537:2,6538:0,6539:2,6540:0,6541:2,6542:0,6543:2,6544:0,6545:1,6546:0,6547:1,6548:0,6549:2,6550:0,6551:2,6552:0,6553:2,6554:0,6555:2,6556:0,6557:1,6558:0,6559:1,6560:0,6561:1,6562:0,6563:2,6564:0,6565:2,6566:0,6567:0,6568:2,6569:0,6570:1,6571:0,6572:2,6573:0,6574:2,6575:0,6576:2,6577:0,6578:2,6582:2,6583:0,6584:2,6585:0,6586:2,6587:0,6588:2,6589:0,6590:2,6591:0,6592:0,6593:2,6594:0,6595:2,6596:0,6597:2,6598:0,6599:2,6600:0,6601:2,6602:0,6603:2,6605:2,6606:0,6607:2,6608:0,6609:2,6610:0,6611:0,6612:2,6613:0,6614:2,6615:0,6616:2,6617:0,6618:2,6633:2,6646:0,6703:0,6784:0,6785:1,6786:0,6787:1,6788:0,6789:1,6790:0,6791:1,6792:0,6793:1,6794:0,6795:1,6796:0,6797:1,6798:0,6799:1,6800:0,6801:1,6802:0,6803:1,6804:0,6805:1,6806:0,6807:1,6808:0,6809:1,6810:0,6811:1,6812:0,6813:1,6814:0,6815:1,6816:0,6817:1,6818:0,6819:1,6820:0,6821:1,6822:0,6823:1,6824:0,6825:1,6826:0,6827:1,6828:0,6829:1,6830:0,6831:1,6832:0,6833:1,6834:0,6835:1,6836:0,6837:1,6838:0,6839:1,6840:0,6841:1,6842:0,6843:1,6844:0,6845:1,6846:0,6847:1,6848:0,6849:1,6850:0,6851:1,6852:0,6853:1,6854:0,6855:1,6856:0,6857:1,6858:0,6859:1,6860:0,6861:1,6862:0,6863:1,6867:0,6868:1,6870:0,6875:0,6876:0,6879:0,6880:2,6884:0,6885:1,6886:0,6887:1,6915:0,6922:0,6923:2,6924:0,6925:2,6962:0,6984:0,6991:0,7128:2,7131:0,7132:2,7142:0,7257:0,7258:2,7259:0,7260:2,7261:0,7262:2,7263:0,7264:2,7265:0,7266:2,7267:0,7268:2,7269:0,7270:2,7271:0,7272:2,7273:0,7274:2,7275:0,7276:2,7277:0,7278:2,7279:0,7280:2,7281:0,7282:2,7283:0,7284:2,7285:0,7286:2,7287:0,7288:2,7289:0,7290:2,7291:0,7292:2,7293:0,7294:2,7295:0,7296:2,7297:0,7298:2,7299:0,7300:2,7301:0,7302:2,7303:0,7304:2,7305:0,7306:2,7307:0,7308:2,7309:0,7310:2,7311:0,7312:2,7313:0,7314:2,7315:0,7316:2,7317:0,7318:2,7319:0,7320:2,7321:0,7322:2,7323:0,7324:2,7325:0,7326:2,7327:0,7328:2,7329:0,7330:2,7331:0,7332:2,7333:0,7334:2,7335:0,7336:2,7337:0,7338:2,7339:0,7340:2,7341:0,7342:2,7343:0,7344:2,7345:0,7346:2,7347:0,7348:2,7349:0,7350:2,7351:0,7352:2,7353:0,7354:2,7355:0,7356:2,7357:0,7358:2,7359:0,7360:2,7361:0,7362:2,7363:0,7364:2,7365:0,7366:2,7367:0,7368:2,7369:0,7370:2,7877:0,7878:0,7882:0,7883:0,7887:0,7899:0,7991:0,7992:0,8035:2,8036:2,8058:0,8059:0,8082:0,8083:0,8088:0,8090:0,8091:2,8092:0,8093:2,8095:0,8096:2,8097:0,8098:2,8099:0,8100:2,8101:0,8102:2,8103:0,8104:2,8105:0,8106:2,8107:0,8108:2,8109:0,8110:2,8111:0,8112:2,8113:0,8114:2,8115:0,8116:2,8117:0,8118:2,8119:0,8120:2,8121:0,8122:2,8123:0,8124:2,8125:0,8126:2,8127:0,8128:2,8129:0,8130:2,8131:0,8132:2,8133:0,8134:2,8135:0,8136:2,8137:0,8138:2,8139:0,8140:2,8141:0,8142:2,8143:0,8144:2,8145:0,8146:2,8147:0,8148:2,8149:0,8150:2,8151:0,8152:2,8153:0,8154:2,8155:0,8156:2,8157:0,8158:2,8159:0,8160:2,8161:0,8162:2,8163:0,8164:2,8165:0,8166:2,8167:0,8168:2,8169:0,8170:2,8171:0,8172:2,8173:0,8177:2,8179:0,8180:2,8181:0,8182:2,8184:0,8185:2,8187:0,8189:2,8191:0,8193:2,8196:0,8197:2,8198:0,8200:2,8201:0,8202:2,8203:0,8204:2,8205:0,8206:2,8207:0,8208:2,8209:0,8210:2,8212:0,8213:2,8214:0,8216:2,8218:0,8220:2,8222:0,8224:2,8225:0,8226:2,8311:0,8312:1,8313:0,8314:1,8315:0,8316:1,8317:0,8318:1,8319:0,8320:1,8321:0,8322:1,8323:0,8324:1,8325:0,8326:1,8327:0,8328:1,8329:0,8330:1,8331:0,8332:1,8333:0,8334:1,8335:0,8336:1,8337:0,8338:1,8339:0,8340:1,8341:0,8342:1,8343:0,8344:1,8345:0,8346:1,8347:0,8348:1,8352:0,8353:0,8379:0,8380:2,8381:0,8382:2,8383:0,8384:2,8385:0,8387:2,8391:0,8395:0,8433:0,8441:0,8455:0,8456:0,8531:2,8682:0,8686:0,8687:0,8692:0,8693:0,8826:0,8903:0,8950:0,8951:0,9039:0,9040:0,9141:0,9149:0,9150:0,9191:0,9221:0,9222:0,9249:0,9250:0,9252:0,9254:0,9265:0,9284:0,9285:0,9367:0,20499:0,20538:0,20539:0,20790:0,20791:0,21291:0,21292:0,21500:0,21817:0,21818:0,22032:0,22033:0,22091:0,22092:0,22332:0,22391:0,22392:0,22700:0,22770:0,22780:0,22832:0,23090:0,23095:0,23239:0,23240:0,23433:0,23700:0,24047:0,24048:0,24100:3,24200:0,24305:0,24306:0,24382:10,24383:0,24500:0,24547:0,24548:0,24571:9,24600:0,25e3:0,25231:0,25884:0,25932:0,26237:0,26331:0,26332:0,26432:0,26591:0,26592:0,26632:0,26692:0,27120:0,27200:0,27291:6,27292:6,27429:0,27492:0,27493:0,27500:0,27700:0,28232:0,28600:0,28991:0,28992:0,29100:0,29101:0,29220:0,29221:0,29333:0,29635:0,29636:0,29701:0,29738:0,29739:0,29849:0,29850:0,29871:8,29872:7,29873:0,30200:5,30339:0,30340:0,30591:0,30592:0,30791:0,30792:0,30800:0,31028:0,31121:0,31154:0,31170:0,31171:0,31370:0,31528:0,31529:0,31600:0,31700:0,31838:0,31839:0,31900:0,31901:0,32061:0,32062:0,32098:0,32099:2,32100:0,32104:0,32161:0,32766:0,53048:0,53049:0,54090:0,54091:0,65061:2,65062:2,65161:0,65163:0,102041:2,102064:11,102068:14,102069:15,102118:2,102119:1,102120:2,102121:2,102217:2,102218:0,102219:2,102220:2,102378:1,102379:1,102380:0,102381:1,102589:2,102599:2,102600:2,102604:2,102647:0,102704:2,102705:2,102706:0,102761:2,102762:0,102763:2,102764:0,102765:0,102766:2,102962:0,102963:0,102970:1,102974:2,102993:0,102994:0,102995:2,102996:2,103015:0,103016:2,103017:0,103018:2,103025:0,103026:0,103027:2,103028:2,103035:0,103036:0,103037:2,103038:2,103039:0,103040:0,103041:2,103042:2,103043:0,103044:0,103045:2,103046:2,103047:0,103048:0,103049:2,103050:2,103051:0,103052:2,103053:0,103054:2,103055:0,103056:2,103057:0,103058:0,103059:2,103060:2,103061:0,103062:0,103063:2,103064:2,103069:2,103070:0,103071:0,103072:2,103073:2,103086:0,103087:0,103088:2,103089:2,103094:1,103095:0,103096:2,103103:0,103104:2,103105:0,103106:2,103121:0,103122:2,103123:0,103124:0,103125:1,103126:1,103127:0,103128:0,103129:2,103130:2,103131:0,103132:0,103133:2,103134:2,103135:0,103136:0,103137:1,103138:1,103139:0,103140:2,103141:0,103142:2,103143:0,103144:2,103145:0,103146:1,103147:0,103148:0,103149:2,103150:2,103151:0,103152:2,103172:0,103173:2,103174:0,103175:0,103176:2,103177:2,103178:0,103179:0,103180:2,103181:2,103182:0,103183:0,103184:2,103185:2,103228:0,103229:0,103230:2,103231:2,103250:0,103251:2,103252:0,103253:2,103260:0,103261:0,103262:2,103263:2,103270:0,103271:0,103272:2,103273:2,103274:0,103275:0,103276:2,103277:2,103278:0,103279:0,103280:2,103281:2,103282:0,103283:0,103284:2,103285:2,103286:0,103287:2,103288:0,103289:2,103290:0,103291:2,103292:0,103293:0,103294:2,103295:2,103296:0,103297:0,103298:2,103299:2,103376:2,103377:0,103378:0,103379:2,103380:2,103393:0,103394:0,103395:2,103396:2,103472:0,103473:1,103474:0,103475:2,103482:0,103483:2,103484:0,103485:2,103500:0,103501:2,103502:0,103503:0,103504:1,103505:1,103506:0,103507:0,103508:2,103509:2,103510:0,103511:0,103512:2,103513:2,103514:0,103515:2,103516:0,103517:2,103518:0,103519:2,103520:0,103521:1,103522:0,103523:0,103524:2,103525:2,103526:0,103527:2,103561:2,103562:2,103563:0,103564:0,103565:2,103566:2,103567:0,103568:0,103569:2,103570:2,103584:0,103585:2,103586:0,103587:2,103588:1,103589:0,103590:2,103591:1,103592:0,103593:2,103594:1,103695:2};for(o$i=2e3;o$i<=2045;o$i++)r$g[o$i]=0;for(o$i=2056;o$i<=2065;o$i++)r$g[o$i]=0;for(o$i=2067;o$i<=2135;o$i++)r$g[o$i]=0;for(o$i=2137;o$i<=2154;o$i++)r$g[o$i]=0;for(o$i=2161;o$i<=2170;o$i++)r$g[o$i]=0;for(o$i=2172;o$i<=2193;o$i++)r$g[o$i]=0;for(o$i=2195;o$i<=2198;o$i++)r$g[o$i]=0;for(o$i=2200;o$i<=2203;o$i++)r$g[o$i]=0;for(o$i=2205;o$i<=2217;o$i++)r$g[o$i]=0;for(o$i=2222;o$i<=2224;o$i++)r$g[o$i]=1;for(o$i=2225;o$i<=2250;o$i++)r$g[o$i]=2;for(o$i=2251;o$i<=2253;o$i++)r$g[o$i]=1;for(o$i=2257;o$i<=2264;o$i++)r$g[o$i]=2;for(o$i=2274;o$i<=2279;o$i++)r$g[o$i]=2;for(o$i=2280;o$i<=2282;o$i++)r$g[o$i]=1;for(o$i=2283;o$i<=2289;o$i++)r$g[o$i]=2;for(o$i=2290;o$i<=2292;o$i++)r$g[o$i]=0;for(o$i=2308;o$i<=2313;o$i++)r$g[o$i]=0;for(o$i=2315;o$i<=2491;o$i++)r$g[o$i]=0;for(o$i=2494;o$i<=2866;o$i++)r$g[o$i]=0;for(o$i=2867;o$i<=2869;o$i++)r$g[o$i]=1;for(o$i=2870;o$i<=2888;o$i++)r$g[o$i]=2;for(o$i=2891;o$i<=2895;o$i++)r$g[o$i]=2;for(o$i=2896;o$i<=2898;o$i++)r$g[o$i]=1;for(o$i=2902;o$i<=2908;o$i++)r$g[o$i]=2;for(o$i=2915;o$i<=2920;o$i++)r$g[o$i]=2;for(o$i=2921;o$i<=2923;o$i++)r$g[o$i]=1;for(o$i=2924;o$i<=2930;o$i++)r$g[o$i]=2;for(o$i=2931;o$i<=2962;o$i++)r$g[o$i]=0;for(o$i=2964;o$i<=2968;o$i++)r$g[o$i]=2;for(o$i=2969;o$i<=2973;o$i++)r$g[o$i]=0;for(o$i=2975;o$i<=2991;o$i++)r$g[o$i]=0;for(o$i=2995;o$i<=3051;o$i++)r$g[o$i]=0;for(o$i=3054;o$i<=3079;o$i++)r$g[o$i]=0;for(o$i=3081;o$i<=3088;o$i++)r$g[o$i]=0;for(o$i=3092;o$i<=3101;o$i++)r$g[o$i]=0;for(o$i=3106;o$i<=3138;o$i++)r$g[o$i]=0;for(o$i=3146;o$i<=3151;o$i++)r$g[o$i]=0;for(o$i=3153;o$i<=3166;o$i++)r$g[o$i]=0;for(o$i=3168;o$i<=3172;o$i++)r$g[o$i]=0;for(o$i=3174;o$i<=3203;o$i++)r$g[o$i]=0;for(o$i=3294;o$i<=3358;o$i++)r$g[o$i]=0;for(o$i=3367;o$i<=3403;o$i++)r$g[o$i]=0;for(o$i=3408;o$i<=3416;o$i++)r$g[o$i]=0;for(o$i=3417;o$i<=3438;o$i++)r$g[o$i]=2;for(o$i=3441;o$i<=3446;o$i++)r$g[o$i]=2;for(o$i=3447;o$i<=3450;o$i++)r$g[o$i]=0;for(o$i=3451;o$i<=3459;o$i++)r$g[o$i]=2;for(o$i=3460;o$i<=3478;o$i++)r$g[o$i]=0;for(o$i=3554;o$i<=3559;o$i++)r$g[o$i]=0;for(o$i=3560;o$i<=3570;o$i++)r$g[o$i]=2;for(o$i=3571;o$i<=3581;o$i++)r$g[o$i]=0;for(o$i=3594;o$i<=3597;o$i++)r$g[o$i]=0;for(o$i=3601;o$i<=3604;o$i++)r$g[o$i]=0;for(o$i=3637;o$i<=3639;o$i++)r$g[o$i]=0;for(o$i=3665;o$i<=3667;o$i++)r$g[o$i]=0;for(o$i=3693;o$i<=3695;o$i++)r$g[o$i]=0;for(o$i=3701;o$i<=3727;o$i++)r$g[o$i]=0;for(o$i=3728;o$i<=3739;o$i++)r$g[o$i]=2;for(o$i=3740;o$i<=3751;o$i++)r$g[o$i]=0;for(o$i=3753;o$i<=3760;o$i++)r$g[o$i]=2;for(o$i=3761;o$i<=3773;o$i++)r$g[o$i]=0;for(o$i=3775;o$i<=3777;o$i++)r$g[o$i]=0;for(o$i=3779;o$i<=3781;o$i++)r$g[o$i]=0;for(o$i=3783;o$i<=3785;o$i++)r$g[o$i]=0;for(o$i=3788;o$i<=3791;o$i++)r$g[o$i]=0;for(o$i=3797;o$i<=3802;o$i++)r$g[o$i]=0;for(o$i=3814;o$i<=3816;o$i++)r$g[o$i]=0;for(o$i=3825;o$i<=3829;o$i++)r$g[o$i]=0;for(o$i=3832;o$i<=3841;o$i++)r$g[o$i]=0;for(o$i=3844;o$i<=3852;o$i++)r$g[o$i]=0;for(o$i=3873;o$i<=3885;o$i++)r$g[o$i]=0;for(o$i=3890;o$i<=3893;o$i++)r$g[o$i]=0;for(o$i=3907;o$i<=3912;o$i++)r$g[o$i]=0;for(o$i=3942;o$i<=3950;o$i++)r$g[o$i]=0;for(o$i=3968;o$i<=3970;o$i++)r$g[o$i]=0;for(o$i=3973;o$i<=3976;o$i++)r$g[o$i]=0;for(o$i=3986;o$i<=3989;o$i++)r$g[o$i]=0;for(o$i=3994;o$i<=3997;o$i++)r$g[o$i]=0;for(o$i=4048;o$i<=4051;o$i++)r$g[o$i]=0;for(o$i=4056;o$i<=4063;o$i++)r$g[o$i]=0;for(o$i=4093;o$i<=4096;o$i++)r$g[o$i]=0;for(o$i=4390;o$i<=4398;o$i++)r$g[o$i]=0;for(o$i=4399;o$i<=4413;o$i++)r$g[o$i]=2;for(o$i=4418;o$i<=4433;o$i++)r$g[o$i]=2;for(o$i=4455;o$i<=4457;o$i++)r$g[o$i]=2;for(o$i=4484;o$i<=4489;o$i++)r$g[o$i]=0;for(o$i=4491;o$i<=4554;o$i++)r$g[o$i]=0;for(o$i=4568;o$i<=4589;o$i++)r$g[o$i]=0;for(o$i=4652;o$i<=4656;o$i++)r$g[o$i]=0;for(o$i=4766;o$i<=4800;o$i++)r$g[o$i]=0;for(o$i=5014;o$i<=5016;o$i++)r$g[o$i]=0;for(o$i=5069;o$i<=5072;o$i++)r$g[o$i]=0;for(o$i=5105;o$i<=5130;o$i++)r$g[o$i]=0;for(o$i=5173;o$i<=5188;o$i++)r$g[o$i]=0;for(o$i=5253;o$i<=5259;o$i++)r$g[o$i]=0;for(o$i=5269;o$i<=5275;o$i++)r$g[o$i]=0;for(o$i=5292;o$i<=5311;o$i++)r$g[o$i]=0;for(o$i=5329;o$i<=5331;o$i++)r$g[o$i]=0;for(o$i=5343;o$i<=5349;o$i++)r$g[o$i]=0;for(o$i=5355;o$i<=5357;o$i++)r$g[o$i]=0;for(o$i=5387;o$i<=5389;o$i++)r$g[o$i]=0;for(o$i=5459;o$i<=5463;o$i++)r$g[o$i]=0;for(o$i=5479;o$i<=5482;o$i++)r$g[o$i]=0;for(o$i=5518;o$i<=5520;o$i++)r$g[o$i]=0;for(o$i=5530;o$i<=5539;o$i++)r$g[o$i]=0;for(o$i=5550;o$i<=5552;o$i++)r$g[o$i]=0;for(o$i=5562;o$i<=5583;o$i++)r$g[o$i]=0;for(o$i=5623;o$i<=5625;o$i++)r$g[o$i]=2;for(o$i=5631;o$i<=5639;o$i++)r$g[o$i]=0;for(o$i=5649;o$i<=5653;o$i++)r$g[o$i]=0;for(o$i=5663;o$i<=5680;o$i++)r$g[o$i]=0;for(o$i=5682;o$i<=5685;o$i++)r$g[o$i]=0;for(o$i=5875;o$i<=5877;o$i++)r$g[o$i]=0;for(o$i=5896;o$i<=5899;o$i++)r$g[o$i]=0;for(o$i=5921;o$i<=5940;o$i++)r$g[o$i]=0;for(o$i=6050;o$i<=6125;o$i++)r$g[o$i]=0;for(o$i=6244;o$i<=6275;o$i++)r$g[o$i]=0;for(o$i=6328;o$i<=6348;o$i++)r$g[o$i]=0;for(o$i=6350;o$i<=6356;o$i++)r$g[o$i]=0;for(o$i=6366;o$i<=6372;o$i++)r$g[o$i]=0;for(o$i=6381;o$i<=6387;o$i++)r$g[o$i]=0;for(o$i=6393;o$i<=6404;o$i++)r$g[o$i]=0;for(o$i=6480;o$i<=6483;o$i++)r$g[o$i]=0;for(o$i=6511;o$i<=6514;o$i++)r$g[o$i]=0;for(o$i=6579;o$i<=6581;o$i++)r$g[o$i]=0;for(o$i=6619;o$i<=6624;o$i++)r$g[o$i]=0;for(o$i=6625;o$i<=6627;o$i++)r$g[o$i]=2;for(o$i=6628;o$i<=6632;o$i++)r$g[o$i]=0;for(o$i=6634;o$i<=6637;o$i++)r$g[o$i]=0;for(o$i=6669;o$i<=6692;o$i++)r$g[o$i]=0;for(o$i=6707;o$i<=6709;o$i++)r$g[o$i]=0;for(o$i=6720;o$i<=6723;o$i++)r$g[o$i]=0;for(o$i=6732;o$i<=6738;o$i++)r$g[o$i]=0;for(o$i=6931;o$i<=6933;o$i++)r$g[o$i]=0;for(o$i=6956;o$i<=6959;o$i++)r$g[o$i]=0;for(o$i=7005;o$i<=7007;o$i++)r$g[o$i]=0;for(o$i=7057;o$i<=7070;o$i++)r$g[o$i]=2;for(o$i=7074;o$i<=7082;o$i++)r$g[o$i]=0;for(o$i=7109;o$i<=7118;o$i++)r$g[o$i]=0;for(o$i=7119;o$i<=7127;o$i++)r$g[o$i]=1;for(o$i=7374;o$i<=7376;o$i++)r$g[o$i]=0;for(o$i=7528;o$i<=7586;o$i++)r$g[o$i]=0;for(o$i=7587;o$i<=7645;o$i++)r$g[o$i]=2;for(o$i=7692;o$i<=7696;o$i++)r$g[o$i]=0;for(o$i=7755;o$i<=7787;o$i++)r$g[o$i]=0;for(o$i=7791;o$i<=7795;o$i++)r$g[o$i]=0;for(o$i=7799;o$i<=7801;o$i++)r$g[o$i]=0;for(o$i=7803;o$i<=7805;o$i++)r$g[o$i]=0;for(o$i=7825;o$i<=7831;o$i++)r$g[o$i]=0;for(o$i=7845;o$i<=7859;o$i++)r$g[o$i]=0;for(o$i=8013;o$i<=8032;o$i++)r$g[o$i]=0;for(o$i=8065;o$i<=8068;o$i++)r$g[o$i]=1;for(o$i=8518;o$i<=8529;o$i++)r$g[o$i]=2;for(o$i=8533;o$i<=8536;o$i++)r$g[o$i]=2;for(o$i=8538;o$i<=8540;o$i++)r$g[o$i]=2;for(o$i=8677;o$i<=8679;o$i++)r$g[o$i]=0;for(o$i=8836;o$i<=8840;o$i++)r$g[o$i]=0;for(o$i=8857;o$i<=8859;o$i++)r$g[o$i]=0;for(o$i=8908;o$i<=8910;o$i++)r$g[o$i]=0;for(o$i=9154;o$i<=9159;o$i++)r$g[o$i]=0;for(o$i=9205;o$i<=9218;o$i++)r$g[o$i]=0;for(o$i=9271;o$i<=9273;o$i++)r$g[o$i]=0;for(o$i=9295;o$i<=9297;o$i++)r$g[o$i]=0;for(o$i=20002;o$i<=20032;o$i++)r$g[o$i]=0;for(o$i=20062;o$i<=20092;o$i++)r$g[o$i]=0;for(o$i=20135;o$i<=20138;o$i++)r$g[o$i]=0;for(o$i=20248;o$i<=20258;o$i++)r$g[o$i]=0;for(o$i=20348;o$i<=20358;o$i++)r$g[o$i]=0;for(o$i=20436;o$i<=20440;o$i++)r$g[o$i]=0;for(o$i=20822;o$i<=20824;o$i++)r$g[o$i]=0;for(o$i=20934;o$i<=20936;o$i++)r$g[o$i]=0;for(o$i=21035;o$i<=21037;o$i++)r$g[o$i]=0;for(o$i=21095;o$i<=21097;o$i++)r$g[o$i]=0;for(o$i=21148;o$i<=21150;o$i++)r$g[o$i]=0;for(o$i=21413;o$i<=21423;o$i++)r$g[o$i]=0;for(o$i=21453;o$i<=21463;o$i++)r$g[o$i]=0;for(o$i=21473;o$i<=21483;o$i++)r$g[o$i]=0;for(o$i=21780;o$i<=21782;o$i++)r$g[o$i]=0;for(o$i=21891;o$i<=21894;o$i++)r$g[o$i]=0;for(o$i=21896;o$i<=21899;o$i++)r$g[o$i]=0;for(o$i=22171;o$i<=22177;o$i++)r$g[o$i]=0;for(o$i=22181;o$i<=22187;o$i++)r$g[o$i]=0;for(o$i=22191;o$i<=22197;o$i++)r$g[o$i]=0;for(o$i=22234;o$i<=22236;o$i++)r$g[o$i]=0;for(o$i=22521;o$i<=22525;o$i++)r$g[o$i]=0;for(o$i=22991;o$i<=22994;o$i++)r$g[o$i]=0;for(o$i=23028;o$i<=23038;o$i++)r$g[o$i]=0;for(o$i=23830;o$i<=23853;o$i++)r$g[o$i]=0;for(o$i=23866;o$i<=23872;o$i++)r$g[o$i]=0;for(o$i=23877;o$i<=23884;o$i++)r$g[o$i]=0;for(o$i=23886;o$i<=23894;o$i++)r$g[o$i]=0;for(o$i=23946;o$i<=23948;o$i++)r$g[o$i]=0;for(o$i=24311;o$i<=24313;o$i++)r$g[o$i]=0;for(o$i=24342;o$i<=24347;o$i++)r$g[o$i]=0;for(o$i=24370;o$i<=24374;o$i++)r$g[o$i]=10;for(o$i=24375;o$i<=24381;o$i++)r$g[o$i]=0;for(o$i=24718;o$i<=24721;o$i++)r$g[o$i]=0;for(o$i=24817;o$i<=24821;o$i++)r$g[o$i]=0;for(o$i=24877;o$i<=24882;o$i++)r$g[o$i]=0;for(o$i=24891;o$i<=24893;o$i++)r$g[o$i]=0;for(o$i=25391;o$i<=25395;o$i++)r$g[o$i]=0;for(o$i=25828;o$i<=25838;o$i++)r$g[o$i]=0;for(o$i=26191;o$i<=26195;o$i++)r$g[o$i]=0;for(o$i=26391;o$i<=26393;o$i++)r$g[o$i]=0;for(o$i=26701;o$i<=26722;o$i++)r$g[o$i]=0;for(o$i=26729;o$i<=26799;o$i++)r$g[o$i]=2;for(o$i=26801;o$i<=26803;o$i++)r$g[o$i]=2;for(o$i=26811;o$i<=26813;o$i++)r$g[o$i]=2;for(o$i=26847;o$i<=26870;o$i++)r$g[o$i]=2;for(o$i=26891;o$i<=26899;o$i++)r$g[o$i]=0;for(o$i=26901;o$i<=26923;o$i++)r$g[o$i]=0;for(o$i=26929;o$i<=26946;o$i++)r$g[o$i]=0;for(o$i=26948;o$i<=26998;o$i++)r$g[o$i]=0;for(o$i=27037;o$i<=27040;o$i++)r$g[o$i]=0;for(o$i=27205;o$i<=27232;o$i++)r$g[o$i]=0;for(o$i=27258;o$i<=27260;o$i++)r$g[o$i]=0;for(o$i=27391;o$i<=27398;o$i++)r$g[o$i]=0;for(o$i=27561;o$i<=27564;o$i++)r$g[o$i]=0;for(o$i=27571;o$i<=27574;o$i++)r$g[o$i]=0;for(o$i=27581;o$i<=27584;o$i++)r$g[o$i]=0;for(o$i=27591;o$i<=27594;o$i++)r$g[o$i]=0;for(o$i=28191;o$i<=28193;o$i++)r$g[o$i]=0;for(o$i=28348;o$i<=28358;o$i++)r$g[o$i]=0;for(o$i=28402;o$i<=28432;o$i++)r$g[o$i]=0;for(o$i=28462;o$i<=28492;o$i++)r$g[o$i]=0;for(o$i=29118;o$i<=29122;o$i++)r$g[o$i]=0;for(o$i=29168;o$i<=29172;o$i++)r$g[o$i]=0;for(o$i=29177;o$i<=29185;o$i++)r$g[o$i]=0;for(o$i=29187;o$i<=29195;o$i++)r$g[o$i]=0;for(o$i=29900;o$i<=29903;o$i++)r$g[o$i]=0;for(o$i=30161;o$i<=30179;o$i++)r$g[o$i]=0;for(o$i=30491;o$i<=30494;o$i++)r$g[o$i]=0;for(o$i=30729;o$i<=30732;o$i++)r$g[o$i]=0;for(o$i=31251;o$i<=31259;o$i++)r$g[o$i]=0;for(o$i=31265;o$i<=31268;o$i++)r$g[o$i]=0;for(o$i=31275;o$i<=31279;o$i++)r$g[o$i]=0;for(o$i=31281;o$i<=31297;o$i++)r$g[o$i]=0;for(o$i=31461;o$i<=31469;o$i++)r$g[o$i]=0;for(o$i=31491;o$i<=31495;o$i++)r$g[o$i]=0;for(o$i=31917;o$i<=31922;o$i++)r$g[o$i]=0;for(o$i=31965;o$i<=32e3;o$i++)r$g[o$i]=0;for(o$i=32001;o$i<=32003;o$i++)r$g[o$i]=2;for(o$i=32005;o$i<=32031;o$i++)r$g[o$i]=2;for(o$i=32033;o$i<=32060;o$i++)r$g[o$i]=2;for(o$i=32064;o$i<=32067;o$i++)r$g[o$i]=2;for(o$i=32074;o$i<=32077;o$i++)r$g[o$i]=2;for(o$i=32081;o$i<=32086;o$i++)r$g[o$i]=0;for(o$i=32107;o$i<=32130;o$i++)r$g[o$i]=0;for(o$i=32133;o$i<=32158;o$i++)r$g[o$i]=0;for(o$i=32164;o$i<=32167;o$i++)r$g[o$i]=2;for(o$i=32180;o$i<=32199;o$i++)r$g[o$i]=0;for(o$i=32201;o$i<=32260;o$i++)r$g[o$i]=0;for(o$i=32301;o$i<=32360;o$i++)r$g[o$i]=0;for(o$i=32601;o$i<=32662;o$i++)r$g[o$i]=0;for(o$i=32664;o$i<=32667;o$i++)r$g[o$i]=2;for(o$i=32701;o$i<=32761;o$i++)r$g[o$i]=0;for(o$i=53001;o$i<=53004;o$i++)r$g[o$i]=0;for(o$i=53008;o$i<=53019;o$i++)r$g[o$i]=0;for(o$i=53021;o$i<=53032;o$i++)r$g[o$i]=0;for(o$i=53034;o$i<=53037;o$i++)r$g[o$i]=0;for(o$i=53042;o$i<=53046;o$i++)r$g[o$i]=0;for(o$i=53074;o$i<=53080;o$i++)r$g[o$i]=0;for(o$i=54001;o$i<=54004;o$i++)r$g[o$i]=0;for(o$i=54008;o$i<=54019;o$i++)r$g[o$i]=0;for(o$i=54021;o$i<=54032;o$i++)r$g[o$i]=0;for(o$i=54034;o$i<=54037;o$i++)r$g[o$i]=0;for(o$i=54042;o$i<=54046;o$i++)r$g[o$i]=0;for(o$i=54048;o$i<=54053;o$i++)r$g[o$i]=0;for(o$i=54074;o$i<=54080;o$i++)r$g[o$i]=0;for(o$i=54098;o$i<=54101;o$i++)r$g[o$i]=0;for(o$i=102001;o$i<=102040;o$i++)r$g[o$i]=0;for(o$i=102042;o$i<=102063;o$i++)r$g[o$i]=0;for(o$i=102065;o$i<=102067;o$i++)r$g[o$i]=0;for(o$i=102070;o$i<=102117;o$i++)r$g[o$i]=0;for(o$i=102122;o$i<=102216;o$i++)r$g[o$i]=0;for(o$i=102221;o$i<=102377;o$i++)r$g[o$i]=0;for(o$i=102382;o$i<=102388;o$i++)r$g[o$i]=0;for(o$i=102389;o$i<=102398;o$i++)r$g[o$i]=2;for(o$i=102399;o$i<=102444;o$i++)r$g[o$i]=0;for(o$i=102445;o$i<=102447;o$i++)r$g[o$i]=2;for(o$i=102448;o$i<=102458;o$i++)r$g[o$i]=0;for(o$i=102459;o$i<=102468;o$i++)r$g[o$i]=2;for(o$i=102469;o$i<=102499;o$i++)r$g[o$i]=0;for(o$i=102500;o$i<=102519;o$i++)r$g[o$i]=1;for(o$i=102520;o$i<=102524;o$i++)r$g[o$i]=0;for(o$i=102525;o$i<=102529;o$i++)r$g[o$i]=2;for(o$i=102530;o$i<=102588;o$i++)r$g[o$i]=0;for(o$i=102590;o$i<=102598;o$i++)r$g[o$i]=0;for(o$i=102601;o$i<=102603;o$i++)r$g[o$i]=0;for(o$i=102605;o$i<=102628;o$i++)r$g[o$i]=0;for(o$i=102629;o$i<=102646;o$i++)r$g[o$i]=2;for(o$i=102648;o$i<=102700;o$i++)r$g[o$i]=2;for(o$i=102701;o$i<=102703;o$i++)r$g[o$i]=0;for(o$i=102707;o$i<=102730;o$i++)r$g[o$i]=2;for(o$i=102733;o$i<=102758;o$i++)r$g[o$i]=2;for(o$i=102767;o$i<=102900;o$i++)r$g[o$i]=0;for(o$i=102965;o$i<=102969;o$i++)r$g[o$i]=0;for(o$i=102971;o$i<=102973;o$i++)r$g[o$i]=0;for(o$i=102975;o$i<=102989;o$i++)r$g[o$i]=0;for(o$i=102990;o$i<=102992;o$i++)r$g[o$i]=1;for(o$i=102997;o$i<=103002;o$i++)r$g[o$i]=0;for(o$i=103003;o$i<=103008;o$i++)r$g[o$i]=2;for(o$i=103009;o$i<=103011;o$i++)r$g[o$i]=0;for(o$i=103012;o$i<=103014;o$i++)r$g[o$i]=2;for(o$i=103019;o$i<=103021;o$i++)r$g[o$i]=0;for(o$i=103022;o$i<=103024;o$i++)r$g[o$i]=2;for(o$i=103029;o$i<=103031;o$i++)r$g[o$i]=0;for(o$i=103032;o$i<=103034;o$i++)r$g[o$i]=2;for(o$i=103065;o$i<=103068;o$i++)r$g[o$i]=0;for(o$i=103074;o$i<=103076;o$i++)r$g[o$i]=0;for(o$i=103077;o$i<=103079;o$i++)r$g[o$i]=1;for(o$i=103080;o$i<=103082;o$i++)r$g[o$i]=0;for(o$i=103083;o$i<=103085;o$i++)r$g[o$i]=2;for(o$i=103090;o$i<=103093;o$i++)r$g[o$i]=0;for(o$i=103097;o$i<=103099;o$i++)r$g[o$i]=0;for(o$i=103100;o$i<=103102;o$i++)r$g[o$i]=2;for(o$i=103107;o$i<=103109;o$i++)r$g[o$i]=0;for(o$i=103110;o$i<=103112;o$i++)r$g[o$i]=2;for(o$i=103113;o$i<=103116;o$i++)r$g[o$i]=0;for(o$i=103117;o$i<=103120;o$i++)r$g[o$i]=2;for(o$i=103153;o$i<=103157;o$i++)r$g[o$i]=0;for(o$i=103158;o$i<=103162;o$i++)r$g[o$i]=2;for(o$i=103163;o$i<=103165;o$i++)r$g[o$i]=0;for(o$i=103166;o$i<=103168;o$i++)r$g[o$i]=1;for(o$i=103169;o$i<=103171;o$i++)r$g[o$i]=2;for(o$i=103186;o$i<=103188;o$i++)r$g[o$i]=0;for(o$i=103189;o$i<=103191;o$i++)r$g[o$i]=2;for(o$i=103192;o$i<=103195;o$i++)r$g[o$i]=0;for(o$i=103196;o$i<=103199;o$i++)r$g[o$i]=2;for(o$i=103200;o$i<=103224;o$i++)r$g[o$i]=0;for(o$i=103225;o$i<=103227;o$i++)r$g[o$i]=1;for(o$i=103232;o$i<=103237;o$i++)r$g[o$i]=0;for(o$i=103238;o$i<=103243;o$i++)r$g[o$i]=2;for(o$i=103244;o$i<=103246;o$i++)r$g[o$i]=0;for(o$i=103247;o$i<=103249;o$i++)r$g[o$i]=2;for(o$i=103254;o$i<=103256;o$i++)r$g[o$i]=0;for(o$i=103257;o$i<=103259;o$i++)r$g[o$i]=2;for(o$i=103264;o$i<=103266;o$i++)r$g[o$i]=0;for(o$i=103267;o$i<=103269;o$i++)r$g[o$i]=2;for(o$i=103300;o$i<=103375;o$i++)r$g[o$i]=0;for(o$i=103381;o$i<=103383;o$i++)r$g[o$i]=0;for(o$i=103384;o$i<=103386;o$i++)r$g[o$i]=1;for(o$i=103387;o$i<=103389;o$i++)r$g[o$i]=0;for(o$i=103390;o$i<=103392;o$i++)r$g[o$i]=2;for(o$i=103397;o$i<=103399;o$i++)r$g[o$i]=0;for(o$i=103400;o$i<=103471;o$i++)r$g[o$i]=2;for(o$i=103476;o$i<=103478;o$i++)r$g[o$i]=0;for(o$i=103479;o$i<=103481;o$i++)r$g[o$i]=2;for(o$i=103486;o$i<=103488;o$i++)r$g[o$i]=0;for(o$i=103489;o$i<=103491;o$i++)r$g[o$i]=2;for(o$i=103492;o$i<=103495;o$i++)r$g[o$i]=0;for(o$i=103496;o$i<=103499;o$i++)r$g[o$i]=2;for(o$i=103528;o$i<=103543;o$i++)r$g[o$i]=0;for(o$i=103544;o$i<=103548;o$i++)r$g[o$i]=2;for(o$i=103549;o$i<=103551;o$i++)r$g[o$i]=0;for(o$i=103552;o$i<=103554;o$i++)r$g[o$i]=1;for(o$i=103555;o$i<=103557;o$i++)r$g[o$i]=2;for(o$i=103558;o$i<=103560;o$i++)r$g[o$i]=0;for(o$i=103571;o$i<=103573;o$i++)r$g[o$i]=0;for(o$i=103574;o$i<=103576;o$i++)r$g[o$i]=2;for(o$i=103577;o$i<=103580;o$i++)r$g[o$i]=0;for(o$i=103581;o$i<=103583;o$i++)r$g[o$i]=2;for(o$i=103595;o$i<=103694;o$i++)r$g[o$i]=0;for(o$i=103696;o$i<=103699;o$i++)r$g[o$i]=0;for(o$i=103700;o$i<=103793;o$i++)r$g[o$i]=2;for(o$i=103794;o$i<=103872;o$i++)r$g[o$i]=0;for(o$i=103900;o$i<=103971;o$i++)r$g[o$i]=2;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const a$A={102113:!0,102100:!0,3857:!0,3785:!0},_$1={102113:!0,102100:!0,3857:!0,3785:!0,4326:!0},t$q='PROJCS["WGS_1984_Web_Mercator_Auxiliary_Sphere",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator_Auxiliary_Sphere"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],PARAMETER["Auxiliary_Sphere_Type",0.0],UNIT["Meter",1.0]]',l$C=[-20037508.342788905,20037508.342788905],M$5=[-20037508.342787,20037508.342787],E={102113:{wkTemplate:'PROJCS["WGS_1984_Web_Mercator",GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",DATUM["D_WGS_1984_Major_Auxiliary_Sphere",SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137.0,0.0]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],UNIT["Meter",1.0]]',valid:l$C,origin:M$5,dx:1e-5},102100:{wkTemplate:t$q,valid:l$C,origin:M$5,dx:1e-5},3785:{wkTemplate:'PROJCS["WGS_1984_Web_Mercator",GEOGCS["GCS_WGS_1984_Major_Auxiliary_Sphere",DATUM["D_WGS_1984_Major_Auxiliary_Sphere",SPHEROID["WGS_1984_Major_Auxiliary_Sphere",6378137.0,0.0]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Mercator"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],PARAMETER["Standard_Parallel_1",0.0],UNIT["Meter",1.0]]',valid:l$C,origin:M$5,dx:1e-5},3857:{wkTemplate:t$q,valid:l$C,origin:M$5,dx:1e-5},4326:{wkTemplate:'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",{Central_Meridian}],UNIT["Degree",0.0174532925199433]]',altTemplate:'PROJCS["WGS_1984_Plate_Carree",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Plate_Carree"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",{Central_Meridian}],UNIT["Degrees",111319.491]]',valid:[-180,180],origin:[-180,90],dx:1e-5},104971:{wkTemplate:'GEOGCS["Mars_2000_(Sphere)",DATUM["Mars_2000_(Sphere)",SPHEROID["Mars_2000_(Sphere)",3396190.0,0.0]],PRIMEM["Reference_Meridian",0.0],UNIT["Degree",0.0174532925199433]]',valid:[-180,180],origin:[-180,90],dx:1e-5},104905:{wkTemplate:'GEOGCS["GCS_Mars_2000",DATUM["D_Mars_2000",SPHEROID["Mars_2000_IAU_IAG",3396190.0,169.8944472236118]],PRIMEM["Reference_Meridian",0.0],UNIT["Degree",0.0174532925199433]]',valid:[-180,180],origin:[-180,90],dx:1e-5}};function d$t(e,i){return !t$M(e)&&!t$M(i)&&(e===i||(null!=e.wkid||null!=i.wkid?e.wkid===i.wkid||u$x(e)&&u$x(i)||null!=i.latestWkid&&e.wkid===i.latestWkid||null!=e.latestWkid&&i.wkid===e.latestWkid:!(!e.wkt||!i.wkt)&&e.wkt.toUpperCase()===i.wkt.toUpperCase()))}function S$8(e){return s$o(e)&&e.wkid?E[e.wkid]:null}function R$6(e){return !!s$o(e)&&(e.wkid?null==r$g[e.wkid]:!!e.wkt&&!!/^\s*GEOGCS/i.test(e.wkt))}function o$h(e){return !(k$5(e)||P$3(e))}function A$4(e){return s$o(e)&&4326===e.wkid}function u$x(e){return s$o(e)&&null!=e.wkid&&!0===a$A[e.wkid]}function G$3(e){return 104971===e||104905===e}function k$5(e){return s$o(e)&&null!=e.wkid&&G$3(e.wkid)}function w$6(e){return 104903===e}function P$3(e){return s$o(e)&&null!=e.wkid&&w$6(e.wkid)}function C$4(e){return s$o(e)&&null!=e.wkid&&!0===_$1[e.wkid]}function s$o(r){return r$A(r)&&(null!=r.wkid&&r.wkid>=2e3||null!=r.wkt)}const I$1={wkid:4326,wkt:r$z(E[4326].wkTemplate,{Central_Meridian:"0.0"})},c$P={wkid:102100,latestWkid:3857};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var y$g;let S$7=y$g=class extends a$B{constructor(e){super(e),this.latestWkid=null,this.wkid=null,this.wkt=null,this.vcsWkid=null,this.latestVcsWkid=null,this.imageCoordinateSystem=null;}static fromJSON(e){if(!e)return null;if(e.wkid){if(102100===e.wkid)return y$g.WebMercator;if(4326===e.wkid)return y$g.WGS84}const t=new y$g;return t.read(e),t}normalizeCtorArgs(e){if(e&&"object"==typeof e)return e;return {["string"==typeof e?"wkt":"wkid"]:e}}get isWGS84(){return A$4(this)}get isWebMercator(){return u$x(this)}get isGeographic(){return R$6(this)}get isWrappable(){return C$4(this)}writeWkt(e,t){this.wkid||(t.wkt=e);}clone(){if(this===y$g.WGS84)return y$g.WGS84;if(this===y$g.WebMercator)return y$g.WebMercator;const e=new y$g;return null!=this.wkid?(e.wkid=this.wkid,null!=this.latestWkid&&(e.latestWkid=this.latestWkid),null!=this.vcsWkid&&(e.vcsWkid=this.vcsWkid),null!=this.latestVcsWkid&&(e.latestVcsWkid=this.latestVcsWkid)):null!=this.wkt&&(e.wkt=this.wkt),this.imageCoordinateSystem&&(e.imageCoordinateSystem=y$v(this.imageCoordinateSystem)),e}equals(e){if(null==e)return !1;if(this.imageCoordinateSystem||e.imageCoordinateSystem){if(null==this.imageCoordinateSystem||null==e.imageCoordinateSystem)return !1;const{id:t,referenceServiceName:r}=e.imageCoordinateSystem,{geodataXform:i}=e.imageCoordinateSystem,o=this.imageCoordinateSystem;return null==t||i?JSON.stringify(o)===JSON.stringify(e.imageCoordinateSystem):r?o.id===t&&o.referenceServiceName===r:o.id===t}return d$t(this,e)}toJSON(e){return this.write(void 0,e)}};S$7.GCS_NAD_1927=null,S$7.WGS84=null,S$7.WebMercator=null,e$u([y$r({readOnly:!0})],S$7.prototype,"isWGS84",null),e$u([y$r({readOnly:!0})],S$7.prototype,"isWebMercator",null),e$u([y$r({readOnly:!0})],S$7.prototype,"isGeographic",null),e$u([y$r({readOnly:!0})],S$7.prototype,"isWrappable",null),e$u([y$r({type:N$5,json:{write:!0}})],S$7.prototype,"latestWkid",void 0),e$u([y$r({type:N$5,json:{write:!0,origins:{"web-scene":{write:{overridePolicy(){return {isRequired:null===this.wkt}}}}}}})],S$7.prototype,"wkid",void 0),e$u([y$r({type:String,json:{origins:{"web-scene":{write:{overridePolicy(){return {isRequired:null===this.wkid}}}}}}})],S$7.prototype,"wkt",void 0),e$u([o$v("wkt"),o$v("web-scene","wkt")],S$7.prototype,"writeWkt",null),e$u([y$r({type:N$5,json:{write:!0}})],S$7.prototype,"vcsWkid",void 0),e$u([y$r({type:N$5,json:{write:!0}})],S$7.prototype,"latestVcsWkid",void 0),e$u([y$r()],S$7.prototype,"imageCoordinateSystem",void 0),S$7=y$g=e$u([i$X("esri.geometry.SpatialReference")],S$7),S$7.prototype.toJSON.isDefaultToJSON=!0,S$7.GCS_NAD_1927=new S$7({wkid:4267,wkt:'GEOGCS["GCS_North_American_1927",DATUM["D_North_American_1927",SPHEROID["Clarke_1866",6378206.4,294.9786982]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]'}),S$7.WGS84=new S$7(I$1),S$7.WebMercator=new S$7(c$P),Object.freeze&&(Object.freeze(S$7.GCS_NAD_1927),Object.freeze(S$7.WGS84),Object.freeze(S$7.WebMercator));var k$4=S$7;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let p$S=class extends a$B{constructor(...e){super(...e),this.type=null,this.hasM=!1,this.hasZ=!1,this.spatialReference=k$4.WGS84;}get cache(){return this.commitProperty("spatialReference"),{}}get extent(){return null}readSpatialReference(e,r){if(e instanceof k$4)return e;if(null!=e){const t=new k$4;return t.read(e,r),t}return e}clone(){return console.warn(".clone() is not implemented for "+this.declaredClass),null}clearCache(){this.notifyChange("cache");}getCacheValue(e){return this.cache[e]}setCacheValue(e,r){this.cache[e]=r;}};e$u([y$r()],p$S.prototype,"type",void 0),e$u([y$r({readOnly:!0})],p$S.prototype,"cache",null),e$u([y$r({readOnly:!0})],p$S.prototype,"extent",null),e$u([y$r({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],p$S.prototype,"hasM",void 0),e$u([y$r({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],p$S.prototype,"hasZ",void 0),e$u([y$r({type:k$4,json:{write:!0}})],p$S.prototype,"spatialReference",void 0),e$u([e$C("spatialReference")],p$S.prototype,"readSpatialReference",null),p$S=e$u([i$X("esri.geometry.Geometry")],p$S);var c$O=p$S;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$y(n,u,r,t){return n.x=n.x+u,n.y=n.y+r,null!=t&&null!=n.z&&(n.z=n.z+t),n}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function t$p(t,n){const s=t.x-n.x,r=t.y-n.y,a=t.hasZ&&n.hasZ?t.z-n.z:0;return Math.sqrt(s*s+r*r+a*a)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class i$L{constructor(i,s,t,e){this.semiMajorAxis=i,this.flattening=s,this.outerAtmosphereRimWidth=t;const h=1-this.flattening;this.semiMinorAxis=this.semiMajorAxis*h,this.halfSemiMajorAxis=this.semiMajorAxis/2,this.halfCircumference=Math.PI*this.semiMajorAxis,this.metersPerDegree=this.halfCircumference/180,this.inverseFlattening=1/(1-this.flattening)-1,this.eccentricitySquared=e||2*this.flattening-this.flattening*this.flattening,this.meanRadiusSemiAxes=(2*this.semiMajorAxis+this.semiMinorAxis)/3;}get radius(){return this.semiMajorAxis}}const s$n=new i$L(6378137,1/298.257223563,3e5,.006694379990137799),t$o=new i$L(3396190,1/169.8944472236118,23e4),e$j=new i$L(1737400,0,0);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const a$z=57.29577951308232,o$g=.017453292519943;function u$w(n){return n*a$z}function l$B(n){return n*o$g}function f$k(n){return null!=n.wkid||null!=n.wkt}const h$o=[0,0];function m$r(n,t,e,i,r){const s=n,a=r;if(a.spatialReference=e,"x"in s&&"x"in a)[a.x,a.y]=t(s.x,s.y,h$o,i);else if("xmin"in s&&"xmin"in a)[a.xmin,a.ymin]=t(s.xmin,s.ymin,h$o,i),[a.xmax,a.ymax]=t(s.xmax,s.ymax,h$o,i);else if("paths"in s&&"paths"in a||"rings"in s&&"rings"in a){const n="paths"in s?s.paths:s.rings,e=[];let r;for(let s=0;s<n.length;s++){const a=n[s];r=[],e.push(r);for(let n=0;n<a.length;n++)r.push(t(a[n][0],a[n][1],[0,0],i)),a[n].length>2&&r[n].push(a[n][2]),a[n].length>3&&r[n].push(a[n][3]);}"paths"in a?a.paths=e:a.rings=e;}else if("points"in s&&"points"in a){const n=s.points,e=[];for(let r=0;r<n.length;r++)e[r]=t(n[r][0],n[r][1],[0,0],i),n[r].length>2&&e[r].push(n[r][2]),n[r].length>3&&e[r].push(n[r][3]);a.points=e;}return r}function x$9(n,r){const s=n&&(f$k(n)?n:n.spatialReference),a=r&&(f$k(r)?r:r.spatialReference);return !(n&&"type"in n&&"mesh"===n.type||r&&"type"in r&&"mesh"===r.type||!s||!a)&&(!!d$t(a,s)||(u$x(a)&&A$4(s)||u$x(s)&&A$4(a)))}function g$9(s,a){const o=s&&s.spatialReference,u=a&&(f$k(a)?a:a.spatialReference);return x$9(o,u)?d$t(o,u)?y$v(s):u$x(u)?m$r(s,M$4,k$4.WebMercator,!1,y$v(s)):A$4(u)?m$r(s,y$f,k$4.WGS84,!1,y$v(s)):null:null}function M$4(n,t,e=[0,0]){t>89.99999?t=89.99999:t<-89.99999&&(t=-89.99999);const i=l$B(t);return e[0]=l$B(n)*s$n.radius,e[1]=s$n.halfSemiMajorAxis*Math.log((1+Math.sin(i))/(1-Math.sin(i))),e}function y$f(n,t,e=[0,0],i=!1){const r=u$w(n/s$n.radius);return e[0]=i?r:r-360*Math.floor((r+180)/360),e[1]=u$w(Math.PI/2-2*Math.atan(Math.exp(-1*t/s$n.radius))),e}function d$s(t,e=!1,i=y$v(t)){return m$r(t,M$4,k$4.WebMercator,e,i)}function R$5(t,e=!1,i=y$v(t)){return m$r(t,y$f,k$4.WGS84,e,i)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var y$e;const f$j=[0,0];function g$8(e){return e&&("esri.geometry.SpatialReference"===e.declaredClass||null!=e.wkid)}const x$8=n$T.getLogger("esri.geometry.Point");let w$5=y$e=class extends c$O{constructor(...e){super(...e),this.x=0,this.y=0,this.z=void 0,this.m=void 0,this.type="point";}static copy(e,t){t._set("x",e._get("x")),t._set("y",e._get("y")),t._set("z",e._get("z")),t._set("m",e._get("m"));const r=e._get("spatialReference");t._set("spatialReference",Object.isFrozen(r)?r:r.clone());}normalizeCtorArgs(e,t,r,s,i){let o;if(Array.isArray(e))o=e,i=t,e=o[0],t=o[1],r=o[2],s=o[3];else if(e&&"object"==typeof e){if(o=e,e=null!=o.x?o.x:o.longitude,t=null!=o.y?o.y:o.latitude,r=o.z,s=o.m,(i=o.spatialReference)&&"esri.geometry.SpatialReference"!==i.declaredClass&&(i=new k$4(i)),null!=o.longitude||null!=o.latitude)if(null==o.longitude)x$8.warn(".longitude=","Latitude was defined without longitude");else if(null==o.latitude)x$8.warn(".latitude=","Longitude was defined without latitude");else if(!o.declaredClass&&i&&i.isWebMercator){const r=M$4(o.longitude,o.latitude,f$j);e=r[0],t=r[1];}}else g$8(r)?(i=r,r=null):g$8(s)&&(i=s,s=null);const a={x:e,y:t};return null==a.x&&null!=a.y?x$8.warn(".y=","Y coordinate was defined without an X coordinate"):null==a.y&&null!=a.x&&x$8.warn(".x=","X coordinate was defined without a Y coordinate"),null!=i&&(a.spatialReference=i),null!=r&&(a.z=r),null!=s&&(a.m=s),a}get cache(){return this.commitProperty("x"),this.commitProperty("y"),this.commitProperty("z"),this.commitProperty("m"),this.commitProperty("spatialReference"),{}}get hasM(){return void 0!==this.m}set hasM(e){e!==(void 0!==this._get("m"))&&(this._set("m",e?0:void 0),this._set("hasM",e));}get hasZ(){return void 0!==this.z}set hasZ(e){e!==(void 0!==this._get("z"))&&(this._set("z",e?0:void 0),this._set("hasZ",e));}get latitude(){const{spatialReference:e,x:t,y:r}=this;if(e){if(e.isWebMercator)return y$f(t,r,f$j)[1];if(e.isGeographic)return r}return null}set latitude(e){const{spatialReference:t,x:r}=this;t&&(t.isWebMercator?this._set("y",M$4(r,e,f$j)[1]):t.isGeographic&&this._set("y",e),this._set("latitude",e));}get longitude(){const{x:e,y:t,spatialReference:r}=this;if(r){if(r.isWebMercator)return y$f(e,t,f$j)[0];if(r.isGeographic)return e}return NaN}set longitude(e){const{y:t,spatialReference:r}=this;r&&(r.isWebMercator?this._set("x",M$4(e,t,f$j)[0]):r.isGeographic&&this._set("x",e),this._set("longitude",e));}writeX(e,t,r){t[r]=isNaN(e)?"NaN":e;}readX(e){return "string"==typeof e?NaN:e}clone(){const e=new y$e;return e.x=this.x,e.y=this.y,e.z=this.z,e.m=this.m,e.spatialReference=this.spatialReference,e}copy(e){return y$e.copy(e,this),this}equals(e){if(!e)return !1;const{x:t,y:r,z:s,m:i,spatialReference:o}=this,{z:a,m:n}=e;let{x:l,y:p,spatialReference:u}=e;if(!o.equals(u))if(o.isWebMercator&&u.isWGS84)[l,p]=M$4(l,p),u=o;else {if(!o.isWGS84||!u.isWebMercator)return !1;[l,p]=y$f(l,p),u=o;}return t===l&&r===p&&s===a&&i===n&&o.wkid===u.wkid}offset(e,t,r){return n$y(this,e,t,r)}normalize(){if(!this.spatialReference)return this;const e=S$8(this.spatialReference);if(!e)return this;let t=this.x;const[r,s]=e.valid,i=2*s;let o;return t>s?(o=Math.ceil(Math.abs(t-s)/i),t-=o*i):t<r&&(o=Math.ceil(Math.abs(t-r)/i),t+=o*i),this._set("x",t),this}distance(e){return t$p(this,e)}toArray(){const e=this.hasZ,t=this.hasM;return e&&t?[this.x,this.y,this.z,this.m]:e?[this.x,this.y,this.z]:t?[this.x,this.y,this.m]:[this.x,this.y]}toJSON(e){return this.write(null,e)}};e$u([y$r({readOnly:!0})],w$5.prototype,"cache",null),e$u([y$r({type:Boolean,json:{read:!1,write:{enabled:!1,overridePolicy:null}}})],w$5.prototype,"hasM",null),e$u([y$r({type:Boolean,json:{read:!1,write:{enabled:!1,overridePolicy:null}}})],w$5.prototype,"hasZ",null),e$u([y$r({type:Number})],w$5.prototype,"latitude",null),e$u([y$r({type:Number})],w$5.prototype,"longitude",null),e$u([y$r({type:Number,json:{type:[Number,String],write:{isRequired:!0,allowNull:!0}}}),c$_((e=>isNaN(e)?e:u$N(e)))],w$5.prototype,"x",void 0),e$u([o$v("x")],w$5.prototype,"writeX",null),e$u([e$C("x")],w$5.prototype,"readX",null),e$u([y$r({type:Number,json:{write:!0}})],w$5.prototype,"y",void 0),e$u([y$r({type:Number,json:{write:{overridePolicy(){return {enabled:this.hasZ}}}}})],w$5.prototype,"z",void 0),e$u([y$r({type:Number,json:{write:{overridePolicy(){return {enabled:this.hasM}}}}})],w$5.prototype,"m",void 0),w$5=y$e=e$u([i$X("esri.geometry.Point")],w$5),w$5.prototype.toJSON.isDefaultToJSON=!0;var j$b=w$5;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const n$x=[0,0];function t$n(n,t){return e$i(n,t.x,t.y,t.z)}function r$f(n,t){if(!t.points||t.points.length)return !1;for(const r of t.points)if(!i$K(n,r))return !1;return !0}function u$v(n,t){const{xmin:r,ymin:u,zmin:i,xmax:o,ymax:f,zmax:c}=t;return n.hasZ&&t.hasZ?e$i(n,r,u,i)&&e$i(n,r,f,i)&&e$i(n,o,f,i)&&e$i(n,o,u,i)&&e$i(n,r,u,c)&&e$i(n,r,f,c)&&e$i(n,o,f,c)&&e$i(n,o,u,c):e$i(n,r,u)&&e$i(n,r,f)&&e$i(n,o,f)&&e$i(n,o,u)}function i$K(n,t){return e$i(n,t[0],t[1])}function o$f(n,t){return e$i(n,t[0],t[1],t[2])}function e$i(n,t,r,u){return t>=n.xmin&&t<=n.xmax&&r>=n.ymin&&r<=n.ymax&&(null==u||!n.hasZ||u>=n.zmin&&u<=n.zmax)}function f$i(t,r){return n$x[1]=r.y,n$x[0]=r.x,c$N(t,n$x)}function c$N(n,t){return s$m(n.rings,t)}function s$m(n,t){if(!n)return !1;if(x$7(n))return m$q(!1,n,t);let r=!1;for(let u=0,i=n.length;u<i;u++)r=m$q(r,n[u],t);return r}function x$7(n){return !Array.isArray(n[0][0])}function m$q(n,t,r){const[u,i]=r;let o=n,e=0;for(let f=0,c=t.length;f<c;f++){e++,e===c&&(e=0);const[n,r]=t[f],[s,x]=t[e];(r<i&&x>=i||x<i&&r>=i)&&n+(i-r)/(x-r)*(s-n)<u&&(o=!o);}return o}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function i$J(t,e){return t$n(t,e)}function o$e(n,t){const e=n.hasZ&&t.hasZ;let r,i,o;if(n.xmin<=t.xmin){if(r=t.xmin,n.xmax<r)return !1}else if(r=n.xmin,t.xmax<r)return !1;if(n.ymin<=t.ymin){if(i=t.ymin,n.ymax<i)return !1}else if(i=n.ymin,t.ymax<i)return !1;if(e&&t.hasZ)if(n.zmin<=t.zmin){if(o=t.zmin,n.zmax<o)return !1}else if(o=n.zmin,t.zmax<o)return !1;return !0}function f$h(n,t){const{points:i,hasZ:o}=t,f=o?o$f:i$K;for(const e of i)if(f(n,e))return !0;return !1}const s$l=[0,0],c$M=[0,0],m$p=[0,0],u$u=[0,0],l$A=[s$l,c$M,m$p,u$u],a$y=[[m$p,s$l],[s$l,c$M],[c$M,u$u],[u$u,m$p]];function x$6(n,r){s$l[0]=n.xmin,s$l[1]=n.ymax,c$M[0]=n.xmax,c$M[1]=n.ymax,m$p[0]=n.xmin,m$p[1]=n.ymin,u$u[0]=n.xmax,u$u[1]=n.ymin;for(const e of l$A)if(c$N(r,e))return !0;for(const t of r.rings){if(!t.length)continue;let r=t[0];if(i$K(n,r))return !0;for(let i=1;i<t.length;i++){const o=t[i];if(i$K(n,o)||p$R(r,o,a$y))return !0;r=o;}}return !1}function y$d(n,t){s$l[0]=n.xmin,s$l[1]=n.ymax,c$M[0]=n.xmax,c$M[1]=n.ymax,m$p[0]=n.xmin,m$p[1]=n.ymin,u$u[0]=n.xmax,u$u[1]=n.ymin;const r=t.paths;for(const i of r){if(!r.length)continue;let t=i[0];if(i$K(n,t))return !0;for(let r=1;r<i.length;r++){const o=i[r];if(i$K(n,o)||p$R(t,o,a$y))return !0;t=o;}}return !1}const h$n=[0,0];function g$7(n){for(let t=0;t<n.length;t++){const e=n[t];for(let i=0;i<e.length-1;i++){const r=e[i],o=e[i+1];for(let e=t+1;e<n.length;e++)for(let t=0;t<n[e].length-1;t++){const i=n[e][t],f=n[e][t+1];if(z$2(r,o,i,f,h$n)&&!(h$n[0]===r[0]&&h$n[1]===r[1]||h$n[0]===i[0]&&h$n[1]===i[1]||h$n[0]===o[0]&&h$n[1]===o[1]||h$n[0]===f[0]&&h$n[1]===f[1]))return !0}}const r=e.length;if(!(r<=4))for(let n=0;n<r-3;n++){let t=r-1;0===n&&(t=r-2);const i=e[n],o=e[n+1];for(let r=n+2;r<t;r++){const n=e[r],t=e[r+1];if(z$2(i,o,n,t,h$n)&&!(h$n[0]===i[0]&&h$n[1]===i[1]||h$n[0]===n[0]&&h$n[1]===n[1]||h$n[0]===o[0]&&h$n[1]===o[1]||h$n[0]===t[0]&&h$n[1]===t[1]))return !0}}}return !1}function p$R(n,t,e){for(let r=0;r<e.length;r++)if(z$2(n,t,e[r][0],e[r][1]))return !0;return !1}function z$2(n,t,e,r,i){const[o,f]=n,[s,c]=t,[m,u]=e,[l,a]=r,x=l-m,y=o-m,h=s-o,g=a-u,p=f-u,z=c-f,G=g*h-x*z;if(0===G)return !1;const Z=(x*p-g*y)/G,P=(h*p-z*y)/G;return Z>=0&&Z<=1&&P>=0&&P<=1&&(i&&(i[0]=o+Z*(s-o),i[1]=f+Z*(c-f)),!0)}function G$2(n){switch(n){case"esriGeometryEnvelope":case"extent":return o$e;case"esriGeometryMultipoint":case"multipoint":return f$h;case"esriGeometryPoint":case"point":return i$J;case"esriGeometryPolygon":case"polygon":return x$6;case"esriGeometryPolyline":case"polyline":return y$d;case"mesh":return o$e}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var y$c;function f$g(t){return t&&("esri.geometry.SpatialReference"===t.declaredClass||null!=t.wkid)}function d$r(t,i,e){return null==i?e:null==e?i:t(i,e)}let z$1=y$c=class extends c$O{constructor(...t){super(...t),this.type="extent",this.xmin=0,this.ymin=0,this.mmin=void 0,this.zmin=void 0,this.xmax=0,this.ymax=0,this.mmax=void 0,this.zmax=void 0;}normalizeCtorArgs(t,i,e,s,n){return f$g(t)?{spatialReference:t,xmin:0,ymin:0,xmax:0,ymax:0}:"object"==typeof t?(t.spatialReference=null==t.spatialReference?k$4.WGS84:t.spatialReference,t):{xmin:t,ymin:i,xmax:e,ymax:s,spatialReference:null==n?k$4.WGS84:n}}static fromBounds(t,i){return new y$c({xmin:t[0],ymin:t[1],xmax:t[2],ymax:t[3],spatialReference:i})}get cache(){return this.commitProperty("xmin"),this.commitProperty("ymin"),this.commitProperty("zmin"),this.commitProperty("mmin"),this.commitProperty("xmax"),this.commitProperty("ymax"),this.commitProperty("zmax"),this.commitProperty("mmax"),this.commitProperty("spatialReference"),{}}get center(){const t=new j$b({x:.5*(this.xmin+this.xmax),y:.5*(this.ymin+this.ymax),spatialReference:this.spatialReference});return this.hasZ&&(t.z=.5*(this.zmin+this.zmax)),this.hasM&&(t.m=.5*(this.mmin+this.mmax)),t}get extent(){return this.clone()}get hasM(){return null!=this.mmin&&null!=this.mmax}get hasZ(){return null!=this.zmin&&null!=this.zmax}get height(){return Math.abs(this.ymax-this.ymin)}get width(){return Math.abs(this.xmax-this.xmin)}centerAt(t){const i=this.center;return null!=t.z&&this.hasZ?this.offset(t.x-i.x,t.y-i.y,t.z-i.z):this.offset(t.x-i.x,t.y-i.y)}clone(){const t=new y$c;return t.xmin=this.xmin,t.ymin=this.ymin,t.xmax=this.xmax,t.ymax=this.ymax,t.spatialReference=this.spatialReference,null!=this.zmin&&(t.zmin=this.zmin,t.zmax=this.zmax),null!=this.mmin&&(t.mmin=this.mmin,t.mmax=this.mmax),t}contains(t){if(!t)return !1;const i=this.spatialReference,e=t.spatialReference;return i&&e&&!i.equals(e)&&x$9(i,e)&&(t=i.isWebMercator?d$s(t):R$5(t,!0)),"point"===t.type?t$n(this,t):"extent"===t.type&&u$v(this,t)}equals(t){if(!t)return !1;const i=this.spatialReference,e=t.spatialReference;return i&&e&&!i.equals(e)&&x$9(i,e)&&(t=i.isWebMercator?d$s(t):R$5(t,!0)),this.xmin===t.xmin&&this.ymin===t.ymin&&this.zmin===t.zmin&&this.mmin===t.mmin&&this.xmax===t.xmax&&this.ymax===t.ymax&&this.zmax===t.zmax&&this.mmax===t.mmax}expand(t){const i=.5*(1-t),e=this.width*i,s=this.height*i;if(this.xmin+=e,this.ymin+=s,this.xmax-=e,this.ymax-=s,this.hasZ){const t=(this.zmax-this.zmin)*i;this.zmin+=t,this.zmax-=t;}if(this.hasM){const t=(this.mmax-this.mmin)*i;this.mmin+=t,this.mmax-=t;}return this}intersects(t){if(t$M(t))return !1;"mesh"===t.type&&(t=t.extent);const e=this.spatialReference,s=t.spatialReference;e&&s&&!e.equals(s)&&x$9(e,s)&&(t=e.isWebMercator?d$s(t):R$5(t,!0));return G$2(t.type)(this,t)}normalize(){const t=this._normalize(!1,!0);return Array.isArray(t)?t:[t]}offset(t,i,e){return this.xmin+=t,this.ymin+=i,this.xmax+=t,this.ymax+=i,null!=e&&(this.zmin+=e,this.zmax+=e),this}shiftCentralMeridian(){return this._normalize(!0)}union(t){return this.xmin=Math.min(this.xmin,t.xmin),this.ymin=Math.min(this.ymin,t.ymin),this.xmax=Math.max(this.xmax,t.xmax),this.ymax=Math.max(this.ymax,t.ymax),(this.hasZ||t.hasZ)&&(this.zmin=d$r(Math.min,this.zmin,t.zmin),this.zmax=d$r(Math.max,this.zmax,t.zmax)),(this.hasM||t.hasM)&&(this.mmin=d$r(Math.min,this.mmin,t.mmin),this.mmax=d$r(Math.max,this.mmax,t.mmax)),this}intersection(t){return this.intersects(t)?(this.xmin=Math.max(this.xmin,t.xmin),this.ymin=Math.max(this.ymin,t.ymin),this.xmax=Math.min(this.xmax,t.xmax),this.ymax=Math.min(this.ymax,t.ymax),(this.hasZ||t.hasZ)&&(this.zmin=d$r(Math.max,this.zmin,t.zmin),this.zmax=d$r(Math.min,this.zmax,t.zmax)),(this.hasM||t.hasM)&&(this.mmin=d$r(Math.max,this.mmin,t.mmin),this.mmax=d$r(Math.min,this.mmax,t.mmax)),this):null}toJSON(t){return this.write(null,t)}_shiftCM(t=S$8(this.spatialReference)){if(!t||!this.spatialReference)return this;const i=this.spatialReference,s=this._getCM(t);if(s){const n=i.isWebMercator?R$5(s):s;this.xmin-=s.x,this.xmax-=s.x,i.isWebMercator||(n.x=this._normalizeX(n.x,t).x),this.spatialReference=new k$4(r$z(i.isWGS84?t.altTemplate:t.wkTemplate,{Central_Meridian:n.x}));}return this}_getCM(t){let i=null;const[e,s]=t.valid,n=this.xmin,r=this.xmax;return n>=e&&n<=s&&(r>=e&&r<=s)||(i=this.center),i}_normalize(t,i,e){const s=this.spatialReference;if(!s)return this;if(!(e=e||S$8(s)))return this;const n=this._getParts(e).map((t=>t.extent));if(n.length<2)return n[0]||this;if(n.length>2)return t?this._shiftCM(e):this.set({xmin:e.valid[0],xmax:e.valid[1]});if(t)return this._shiftCM(e);if(i)return n;let m=!0,a=!0;return n.forEach((t=>{t.hasZ||(m=!1),t.hasM||(a=!1);})),{rings:n.map((t=>{const i=[[t.xmin,t.ymin],[t.xmin,t.ymax],[t.xmax,t.ymax],[t.xmax,t.ymin],[t.xmin,t.ymin]];if(m){const e=(t.zmax-t.zmin)/2;for(let t=0;t<i.length;t++)i[t].push(e);}if(a){const e=(t.mmax-t.mmin)/2;for(let t=0;t<i.length;t++)i[t].push(e);}return i})),hasZ:m,hasM:a,spatialReference:s}}_getParts(t){let i=this.cache._parts;if(!i){i=[];const{ymin:e,ymax:s,spatialReference:n}=this,m=this.width,a=this.xmin,h=this.xmax;let o;t=t||S$8(n);const[x,l]=t.valid;o=this._normalizeX(this.xmin,t);const p=o.x,c=o.frameId;o=this._normalizeX(this.xmax,t);const u=o.x,f=o.frameId,d=p===u&&m>0;if(m>2*l){const t=new y$c(a<h?p:u,e,l,s,n),r=new y$c(x,e,a<h?u:p,s,n),m=new y$c(0,e,l,s,n),o=new y$c(x,e,0,s,n),d=[],z=[];t.contains(m)&&d.push(c),t.contains(o)&&z.push(c),r.contains(m)&&d.push(f),r.contains(o)&&z.push(f);for(let i=c+1;i<f;i++)d.push(i),z.push(i);i.push({extent:t,frameIds:[c]},{extent:r,frameIds:[f]},{extent:m,frameIds:d},{extent:o,frameIds:z});}else p>u||d?i.push({extent:new y$c(p,e,l,s,n),frameIds:[c]},{extent:new y$c(x,e,u,s,n),frameIds:[f]}):i.push({extent:new y$c(p,e,u,s,n),frameIds:[c]});this.cache._parts=i;}const e=this.hasZ,s=this.hasM;if(e||s){const t={};e&&(t.zmin=this.zmin,t.zmax=this.zmax),s&&(t.mmin=this.mmin,t.mmax=this.mmax);for(let e=0;e<i.length;e++)i[e].extent.set(t);}return i}_normalizeX(t,i){const[e,s]=i.valid,n=2*s;let r,m=0;return t>s?(r=Math.ceil(Math.abs(t-s)/n),t-=r*n,m=r):t<e&&(r=Math.ceil(Math.abs(t-e)/n),t+=r*n,m=-r),{x:t,frameId:m}}};e$u([y$r({readOnly:!0})],z$1.prototype,"cache",null),e$u([y$r({readOnly:!0})],z$1.prototype,"center",null),e$u([y$r({readOnly:!0})],z$1.prototype,"extent",null),e$u([y$r({readOnly:!0,json:{write:{enabled:!1,overridePolicy:null}}})],z$1.prototype,"hasM",null),e$u([y$r({readOnly:!0,json:{write:{enabled:!1,overridePolicy:null}}})],z$1.prototype,"hasZ",null),e$u([y$r({readOnly:!0})],z$1.prototype,"height",null),e$u([y$r({readOnly:!0})],z$1.prototype,"width",null),e$u([y$r({type:Number,json:{type:[Number,String],write:{enabled:!0,allowNull:!0}}})],z$1.prototype,"xmin",void 0),e$u([y$r({type:Number,json:{write:!0}})],z$1.prototype,"ymin",void 0),e$u([y$r({type:Number,json:{origins:{"web-scene":{write:!1}},write:{overridePolicy(){return {enabled:this.hasM}}}}})],z$1.prototype,"mmin",void 0),e$u([y$r({type:Number,json:{origins:{"web-scene":{write:!1}},write:{overridePolicy(){return {enabled:this.hasZ}}}}})],z$1.prototype,"zmin",void 0),e$u([y$r({type:Number,json:{write:!0}})],z$1.prototype,"xmax",void 0),e$u([y$r({type:Number,json:{write:!0}})],z$1.prototype,"ymax",void 0),e$u([y$r({type:Number,json:{origins:{"web-scene":{write:!1}},write:{overridePolicy(){return {enabled:this.hasM}}}}})],z$1.prototype,"mmax",void 0),e$u([y$r({type:Number,json:{origins:{"web-scene":{write:!1}},write:{overridePolicy(){return {enabled:this.hasZ}}}}})],z$1.prototype,"zmax",void 0),z$1=y$c=e$u([i$X("esri.geometry.Extent")],z$1),z$1.prototype.toJSON.isDefaultToJSON=!0;var M$3=z$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function h$m(h,a,s=!1){let{hasM:t,hasZ:e}=h;Array.isArray(a)?4!==a.length||t||e?3===a.length&&s&&!t?(e=!0,t=!1):3===a.length&&t&&e&&(t=!1,e=!1):(t=!0,e=!0):(e=!e&&a.hasZ&&(!t||a.hasM),t=!t&&a.hasM&&(!e||a.hasZ)),h.hasZ=e,h.hasM=t;}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var h$l;function l$z(t){return (s,e)=>null==s?e:null==e?s:t(s,e)}function c$L(t){return t&&("esri.geometry.SpatialReference"===t.declaredClass||null!=t.wkid)}let u$t=h$l=class extends c$O{constructor(...t){super(...t),this.points=[],this.type="multipoint";}normalizeCtorArgs(t,s){if(!t&&!s)return null;const e={};Array.isArray(t)?(e.points=t,e.spatialReference=s):c$L(t)?e.spatialReference=t:(t.points&&(e.points=t.points),t.spatialReference&&(e.spatialReference=t.spatialReference),t.hasZ&&(e.hasZ=t.hasZ),t.hasM&&(e.hasM=t.hasM));const r=e.points&&e.points[0];return r&&(void 0===e.hasZ&&void 0===e.hasM?(e.hasZ=r.length>2,e.hasM=!1):void 0===e.hasZ?e.hasZ=r.length>3:void 0===e.hasM&&(e.hasM=r.length>3)),e}get cache(){return this.commitProperty("points"),this.commitProperty("hasZ"),this.commitProperty("hasM"),this.commitProperty("spatialReference"),{}}get extent(){const t=this.points;if(!t.length)return null;const s=new M$3,e=this.hasZ,r=this.hasM,i=e?3:2,o=t[0],n=l$z(Math.min),p=l$z(Math.max);let h,c,u,m,[f,y]=o,[d,g]=o;for(let a=0,l=t.length;a<l;a++){const s=t[a],[o,l]=s;if(f=n(f,o),y=n(y,l),d=p(d,o),g=p(g,l),e&&s.length>2){const t=s[2];h=n(h,t),u=p(u,t);}if(r&&s.length>i){const t=s[i];c=n(c,t),m=p(m,t);}}return s.xmin=f,s.ymin=y,s.xmax=d,s.ymax=g,s.spatialReference=this.spatialReference,e?(s.zmin=h,s.zmax=u):(s.zmin=null,s.zmax=null),r?(s.mmin=c,s.mmax=m):(s.mmin=null,s.mmax=null),s}writePoints(t,e){e.points=y$v(this.points);}addPoint(t){return h$m(this,t),Array.isArray(t)?this.points.push(t):this.points.push(t.toArray()),this.notifyChange("points"),this}clone(){const t={points:y$v(this.points),spatialReference:this.spatialReference};return this.hasZ&&(t.hasZ=!0),this.hasM&&(t.hasM=!0),new h$l(t)}getPoint(t){if(!this._validateInputs(t))return null;const s=this.points[t],e={x:s[0],y:s[1],spatialReference:this.spatialReference};let r=2;return this.hasZ&&(e.z=s[2],r=3),this.hasM&&(e.m=s[r]),new j$b(e)}removePoint(t){if(!this._validateInputs(t))return null;const s=new j$b(this.points.splice(t,1)[0],this.spatialReference);return this.notifyChange("points"),s}setPoint(t,s){return this._validateInputs(t)?(h$m(this,s),Array.isArray(s)||(s=s.toArray()),this.points[t]=s,this.notifyChange("points"),this):this}toJSON(t){return this.write(null,t)}_validateInputs(t){return null!=t&&t>=0&&t<this.points.length}};e$u([y$r({readOnly:!0})],u$t.prototype,"cache",null),e$u([y$r()],u$t.prototype,"extent",null),e$u([y$r({type:[[Number]],json:{write:{isRequired:!0}}})],u$t.prototype,"points",void 0),e$u([o$v("points")],u$t.prototype,"writePoints",null),u$t=h$l=e$u([i$X("esri.geometry.Multipoint")],u$t),u$t.prototype.toJSON.isDefaultToJSON=!0;var m$o=u$t;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$h(n,t){const e=t[0]-n[0],r=t[1]-n[1];if(n.length>2&&t.length>2){const o=n[2]-t[2];return Math.sqrt(e*e+r*r+o*o)}return Math.sqrt(e*e+r*r)}function r$e(n,t,e){const r=n[0]+e*(t[0]-n[0]),o=n[1]+e*(t[1]-n[1]);return n.length>2&&t.length>2?[r,o,n[2]+e*(t[2]-n[2])]:[r,o]}function i$I(n,t){return r$e(n,t,.5)}function f$f(n,t,e){const r=n.length;let o=0,i=0,s=0;for(let l=0;l<r;l++){const f=n[l],u=n[(l+1)%r];let h=2;o+=f[0]*u[1]-u[0]*f[1],f.length>2&&u.length>2&&e&&(i+=f[0]*u[2]-u[0]*f[2],h=3),f.length>h&&u.length>h&&t&&(s+=f[0]*u[h]-u[0]*f[h]);}return o<=0&&i<=0&&s<=0}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$g(n){return n?r$d(n.rings,n.hasZ):null}function r$d(n,t){if(!n||!n.length)return null;const l=[],e=[],r=t?[1/0,-1/0,1/0,-1/0,1/0,-1/0]:[1/0,-1/0,1/0,-1/0];for(let u=0,i=n.length;u<i;u++){const l=o$d(n[u],t,r);l&&e.push(l);}if(e.sort(((n,l)=>{let e=n[2]-l[2];return 0===e&&t&&(e=n[4]-l[4]),e})),e.length){let n=6*e[0][2];l[0]=e[0][0]/n,l[1]=e[0][1]/n,t&&(n=6*e[0][4],l[2]=0!==n?e[0][3]/n:0),(l[0]<r[0]||l[0]>r[1]||l[1]<r[2]||l[1]>r[3]||t&&(l[2]<r[4]||l[2]>r[5]))&&(l.length=0);}if(!l.length){const e=n[0]&&n[0].length?u$s(n[0],t):null;if(!e)return null;l[0]=e[0],l[1]=e[1],t&&e.length>2&&(l[2]=e[2]);}return l}function o$d(n,t,l){let e=0,r=0,o=0,u=0,i=0;for(let g=0;g<n.length;g++){const h=n[g],[s,f,c]=h,m=n[(g+1)%n.length],[x,a,y]=m;let p=s*a-x*f;u+=p,e+=(s+x)*p,r+=(f+a)*p,t&&h.length>2&&m.length>2&&(p=s*y-x*c,o+=(c+y)*p,i+=p),s<l[0]&&(l[0]=s),s>l[1]&&(l[1]=s),f<l[2]&&(l[2]=f),f>l[3]&&(l[3]=f),t&&(c<l[4]&&(l[4]=c),c>l[5]&&(l[5]=c));}if(u>0&&(u*=-1),i>0&&(i*=-1),!u)return null;const h=[e,r,.5*u];return t&&(h[3]=o,h[4]=.5*i),h}function u$s(l,e){const r=e?[0,0,0]:[0,0],o=e?[0,0,0]:[0,0];let u=0,i=0,h=0,g=0;for(let s=0,f=l.length;s<f-1;s++){const f=l[s],c=l[s+1];if(f&&c){r[0]=f[0],r[1]=f[1],o[0]=c[0],o[1]=c[1],e&&f.length>2&&c.length>2&&(r[2]=f[2],o[2]=c[2]);const l=e$h(r,o);if(l){u+=l;const n=i$I(f,c);i+=l*n[0],h+=l*n[1],e&&n.length>2&&(g+=l*n[2]);}}}return u>0?e?[i/u,h/u,g/u]:[i/u,h/u]:l.length?l[0]:null}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$w(n){return void 0!==n.xmin&&void 0!==n.ymin&&void 0!==n.xmax&&void 0!==n.ymax}function t$m(n){return void 0!==n.points}function e$f(n){return void 0!==n.x&&void 0!==n.y}function o$c(n){return void 0!==n.paths}function i$H(n){return void 0!==n.rings}function l$y(n){return (t,e)=>null==t?e:null==e?t:n(t,e)}const r$c=l$y(Math.min),u$r=l$y(Math.max);function c$K(l,r){return o$c(r)?h$k(l,r.paths,!1,!1):i$H(r)?h$k(l,r.rings,!1,!1):t$m(r)?s$k(l,r.points,!1,!1,!1,!1):n$w(r)?g$6(l,r):(e$f(r)&&(l[0]=r.x,l[1]=r.y,l[2]=r.x,l[3]=r.y),l)}function f$e(l,r){return o$c(r)?h$k(l,r.paths,!0,!1):i$H(r)?h$k(l,r.rings,!0,!1):t$m(r)?s$k(l,r.points,!0,!1,!0,!1):n$w(r)?g$6(l,r,!0,!1,!0,!1):(e$f(r)&&(l[0]=r.x,l[1]=r.y,l[2]=r.z,l[3]=r.x,l[4]=r.y,l[5]=r.z),l)}function h$k(n,t,e,o){const i=e?3:2;if(!t.length||!t[0].length)return null;let l,c,f,h,[g,s]=t[0][0],[x,m]=t[0][0];for(let a=0;a<t.length;a++){const n=t[a];for(let t=0;t<n.length;t++){const a=n[t],[d,v]=a;if(g=r$c(g,d),s=r$c(s,v),x=u$r(x,d),m=u$r(m,v),e&&a.length>2){const n=a[2];l=r$c(l,n),c=u$r(c,n);}if(o&&a.length>i){const n=a[i];f=r$c(l,n),h=u$r(c,n);}}}return e?o?(n[0]=g,n[1]=s,n[2]=l,n[3]=f,n[4]=x,n[5]=m,n[6]=c,n[7]=h,n.length=8,n):(n[0]=g,n[1]=s,n[2]=l,n[3]=x,n[4]=m,n[5]=c,n.length=6,n):o?(n[0]=g,n[1]=s,n[2]=f,n[3]=x,n[4]=m,n[5]=h,n.length=6,n):(n[0]=g,n[1]=s,n[2]=x,n[3]=m,n.length=4,n)}function g$6(n,t,e,o,i,l){const r=t.xmin,u=t.xmax,c=t.ymin,f=t.ymax;let h=t.zmin,g=t.zmax,s=t.mmin,x=t.mmax;return i?(h=h||0,g=g||0,l?(s=s||0,x=x||0,n[0]=r,n[1]=c,n[2]=h,n[3]=s,n[4]=u,n[5]=f,n[6]=g,n[7]=x,n):(n[0]=r,n[1]=c,n[2]=h,n[3]=u,n[4]=f,n[5]=g,n)):l?(s=s||0,x=x||0,n[0]=r,n[1]=c,n[2]=s,n[3]=u,n[4]=f,n[5]=x,n):(n[0]=r,n[1]=c,n[2]=u,n[3]=f,n)}function s$k(n,t,e,o,i,l){const c=e?3:2,f=o&&l,h=e&&i;if(!t.length||!t[0].length)return null;let g,s,x,m,[a,d]=t[0],[v,y]=t[0];for(let p=0;p<t.length;p++){const n=t[p],[e,o]=n;if(a=r$c(a,e),d=r$c(d,o),v=u$r(v,e),y=u$r(y,o),h&&n.length>2){const t=n[2];g=r$c(g,t),s=u$r(s,t);}if(f&&n.length>c){const t=n[c];x=r$c(g,t),m=u$r(s,t);}}return i?(g=g||0,s=s||0,l?(x=x||0,m=m||0,n[0]=a,n[1]=d,n[2]=g,n[3]=x,n[4]=v,n[5]=y,n[6]=s,n[7]=m,n):(n[0]=a,n[1]=d,n[2]=g,n[3]=v,n[4]=y,n[5]=s,n)):l?(x=x||0,m=m||0,n[0]=a,n[1]=d,n[2]=x,n[3]=v,n[4]=y,n[5]=m,n):(n[0]=a,n[1]=d,n[2]=v,n[3]=y,n)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function t$l(n){return void 0!==n.xmin&&void 0!==n.ymin&&void 0!==n.xmax&&void 0!==n.ymax}function u$q(n){return void 0!==n.points}function m$n(n){return void 0!==n.x&&void 0!==n.y}function o$b(n){return void 0!==n.paths}function r$b(n){return void 0!==n.rings}const x$5=[];function a$x(n,i,t,u){return {xmin:n,ymin:i,xmax:t,ymax:u}}function c$J(n,i,t,u,m,o){return {xmin:n,ymin:i,zmin:t,xmax:u,ymax:m,zmax:o}}function s$j(n,i,t,u,m,o){return {xmin:n,ymin:i,mmin:t,xmax:u,ymax:m,mmax:o}}function e$e(n,i,t,u,m,o,r,x){return {xmin:n,ymin:i,zmin:t,mmin:u,xmax:m,ymax:o,zmax:r,mmax:x}}function f$d(n,i=!1,t=!1){return i?t?e$e(n[0],n[1],n[2],n[3],n[4],n[5],n[6],n[7]):c$J(n[0],n[1],n[2],n[3],n[4],n[5]):t?s$j(n[0],n[1],n[2],n[3],n[4],n[5]):a$x(n[0],n[1],n[2],n[3])}function l$x(n){return n?t$l(n)?n:m$n(n)?d$q(n):r$b(n)?v$6(n):o$b(n)?h$j(n):u$q(n)?y$b(n):null:null}function y$b(i){const{hasZ:t,hasM:u,points:m}=i;return f$d(s$k(x$5,m,t,u),t,u)}function d$q(n){const{x:i,y:t,z:u,m}=n,o=null!=m;return null!=u?o?e$e(i,t,u,m,i,t,u,m):c$J(i,t,u,i,t,u):o?s$j(i,t,m,i,t,m):a$x(i,t,i,t)}function v$6(n){const{hasZ:t,hasM:u,rings:m}=n,o=h$k(x$5,m,t,u);return o?f$d(o,t,u):null}function h$j(n){const{hasZ:t,hasM:u,paths:m}=n,o=h$k(x$5,m,t,u);return o?f$d(o,t,u):null}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var d$p;function R$4(t){return !Array.isArray(t[0])}let j$a=d$p=class extends c$O{constructor(...t){super(...t),this.rings=[],this.type="polygon";}static fromExtent(t){const r=t.clone().normalize(),e=t.spatialReference;let s=!1,i=!1;r.map((t=>{t.hasZ&&(s=!0),t.hasM&&(i=!0);}));const n={rings:r.map((function(t){const r=[[t.xmin,t.ymin],[t.xmin,t.ymax],[t.xmax,t.ymax],[t.xmax,t.ymin],[t.xmin,t.ymin]];if(s&&t.hasZ){const e=t.zmin+.5*(t.zmax-t.zmin);for(let t=0;t<r.length;t++)r[t].push(e);}if(i&&t.hasM){const e=t.mmin+.5*(t.mmax-t.mmin);for(let t=0;t<r.length;t++)r[t].push(e);}return r})),spatialReference:e};return s&&(n.hasZ=!0),i&&(n.hasM=!0),new d$p(n)}normalizeCtorArgs(t,r){let e,s,i=null,o=null;return t&&!Array.isArray(t)?(i=t.rings?t.rings:null,r||(t.spatialReference?r=t.spatialReference:t.rings||(r=t)),e=t.hasZ,s=t.hasM):i=t,i=i||[],r=r||k$4.WGS84,i.length&&i[0]&&null!=i[0][0]&&"number"==typeof i[0][0]&&(i=[i]),o=i[0]&&i[0][0],o&&(void 0===e&&void 0===s?(e=o.length>2,s=!1):void 0===e?e=!s&&o.length>3:void 0===s&&(s=!e&&o.length>3)),{rings:i,spatialReference:r,hasZ:e,hasM:s}}get cache(){return this.commitProperty("rings"),this.commitProperty("hasZ"),this.commitProperty("hasM"),this.commitProperty("spatialReference"),{}}get centroid(){const t=e$g(this);if(!t||isNaN(t[0])||isNaN(t[1])||this.hasZ&&isNaN(t[2]))return null;const r=new j$b;return r.x=t[0],r.y=t[1],r.spatialReference=this.spatialReference,this.hasZ&&(r.z=t[2]),r}get extent(){const{spatialReference:t}=this,r=v$6(this);if(!r)return null;const e=new M$3(r);return e.spatialReference=t,e}get isSelfIntersecting(){return g$7(this.rings)}writeRings(t,e){e.rings=y$v(this.rings);}addRing(t){if(!t)return;const r=this.rings,e=r.length;if(R$4(t)){const s=[];for(let r=0,e=t.length;r<e;r++)s[r]=t[r].toArray();r[e]=s;}else r[e]=t.concat();return this.notifyChange("rings"),this}clone(){const t=new d$p;return t.spatialReference=this.spatialReference,t.rings=y$v(this.rings),t.hasZ=this.hasZ,t.hasM=this.hasM,t}contains(t){return !!t&&(x$9(t,this.spatialReference)&&(t=g$9(t,this.spatialReference)),f$i(this,t))}isClockwise(t){let r;return r=R$4(t)?t.map((t=>this.hasZ?this.hasM?[t.x,t.y,t.z,t.m]:[t.x,t.y,t.z]:[t.x,t.y])):t,f$f(r,this.hasM,this.hasZ)}getPoint(t,r){if(!this._validateInputs(t,r))return null;const e=this.rings[t][r],s=this.hasZ,i=this.hasM;return s&&!i?new j$b(e[0],e[1],e[2],void 0,this.spatialReference):i&&!s?new j$b(e[0],e[1],void 0,e[2],this.spatialReference):s&&i?new j$b(e[0],e[1],e[2],e[3],this.spatialReference):new j$b(e[0],e[1],this.spatialReference)}insertPoint(t,r,e){return this._validateInputs(t,r,!0)?(h$m(this,e),Array.isArray(e)||(e=e.toArray()),this.rings[t].splice(r,0,e),this.notifyChange("rings"),this):this}removePoint(t,r){if(!this._validateInputs(t,r))return null;const e=new j$b(this.rings[t].splice(r,1)[0],this.spatialReference);return this.notifyChange("rings"),e}removeRing(t){if(!this._validateInputs(t,null))return null;const r=this.rings.splice(t,1)[0],e=this.spatialReference,s=r.map((t=>new j$b(t,e)));return this.notifyChange("rings"),s}setPoint(t,r,e){return this._validateInputs(t,r)?(h$m(this,e),Array.isArray(e)||(e=e.toArray()),this.rings[t][r]=e,this.notifyChange("rings"),this):this}_validateInputs(t,r,e=!1){if(null==t||t<0||t>=this.rings.length)return !1;if(null!=r){const s=this.rings[t];if(e&&(r<0||r>s.length))return !1;if(!e&&(r<0||r>=s.length))return !1}return !0}toJSON(t){return this.write(null,t)}};e$u([y$r({readOnly:!0})],j$a.prototype,"cache",null),e$u([y$r({readOnly:!0})],j$a.prototype,"centroid",null),e$u([y$r({readOnly:!0})],j$a.prototype,"extent",null),e$u([y$r({readOnly:!0})],j$a.prototype,"isSelfIntersecting",null),e$u([y$r({type:[[[Number]]],json:{write:{isRequired:!0}}})],j$a.prototype,"rings",void 0),e$u([o$v("rings")],j$a.prototype,"writeRings",null),j$a=d$p=e$u([i$X("esri.geometry.Polygon")],j$a),j$a.prototype.toJSON.isDefaultToJSON=!0;var x$4=j$a;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var c$I;function u$p(t){return !Array.isArray(t[0])}let f$c=c$I=class extends c$O{constructor(...t){super(...t),this.paths=[],this.type="polyline";}normalizeCtorArgs(t,e){let r,s,i=null,a=null;return t&&!Array.isArray(t)?(i=t.paths?t.paths:null,e||(t.spatialReference?e=t.spatialReference:t.paths||(e=t)),r=t.hasZ,s=t.hasM):i=t,i=i||[],e=e||k$4.WGS84,i.length&&i[0]&&null!=i[0][0]&&"number"==typeof i[0][0]&&(i=[i]),a=i[0]&&i[0][0],a&&(void 0===r&&void 0===s?(r=a.length>2,s=!1):void 0===r?r=!s&&a.length>3:void 0===s&&(s=!r&&a.length>3)),{paths:i,spatialReference:e,hasZ:r,hasM:s}}get cache(){return this.commitProperty("paths"),this.commitProperty("hasZ"),this.commitProperty("hasM"),this.commitProperty("spatialReference"),{}}get extent(){const{spatialReference:t}=this,e=h$j(this);if(!e)return null;const r=new M$3(e);return r.spatialReference=t,r}writePaths(t,r){r.paths=y$v(this.paths);}addPath(t){if(!t)return;const e=this.paths,r=e.length;if(u$p(t)){const s=[];for(let e=0,r=t.length;e<r;e++)s[e]=t[e].toArray();e[r]=s;}else e[r]=t.concat();return this.notifyChange("paths"),this}clone(){const t=new c$I;return t.spatialReference=this.spatialReference,t.paths=y$v(this.paths),t.hasZ=this.hasZ,t.hasM=this.hasM,t}getPoint(t,e){if(!this._validateInputs(t,e))return null;const r=this.paths[t][e],s=this.hasZ,i=this.hasM;return s&&!i?new j$b(r[0],r[1],r[2],void 0,this.spatialReference):i&&!s?new j$b(r[0],r[1],void 0,r[2],this.spatialReference):s&&i?new j$b(r[0],r[1],r[2],r[3],this.spatialReference):new j$b(r[0],r[1],this.spatialReference)}insertPoint(t,e,r){return this._validateInputs(t,e,!0)?(h$m(this,r),Array.isArray(r)||(r=r.toArray()),this.paths[t].splice(e,0,r),this.notifyChange("paths"),this):this}removePath(t){if(!this._validateInputs(t,null))return null;const e=this.paths.splice(t,1)[0],r=this.spatialReference,s=e.map((t=>new j$b(t,r)));return this.notifyChange("paths"),s}removePoint(t,e){if(!this._validateInputs(t,e))return null;const r=new j$b(this.paths[t].splice(e,1)[0],this.spatialReference);return this.notifyChange("paths"),r}setPoint(t,e,r){return this._validateInputs(t,e)?(h$m(this,r),Array.isArray(r)||(r=r.toArray()),this.paths[t][e]=r,this.notifyChange("paths"),this):this}_validateInputs(t,e,r=!1){if(null==t||t<0||t>=this.paths.length)return !1;if(null!=e){const s=this.paths[t];if(r&&(e<0||e>s.length))return !1;if(!r&&(e<0||e>=s.length))return !1}return !0}toJSON(t){return this.write(null,t)}};e$u([y$r({readOnly:!0})],f$c.prototype,"cache",null),e$u([y$r({readOnly:!0})],f$c.prototype,"extent",null),e$u([y$r({type:[[[Number]]],json:{write:{isRequired:!0}}})],f$c.prototype,"paths",void 0),e$u([o$v("paths")],f$c.prototype,"writePaths",null),f$c=c$I=e$u([i$X("esri.geometry.Polyline")],f$c),f$c.prototype.toJSON.isDefaultToJSON=!0;var m$m=f$c;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const i$G=o$A()({esriGeometryPoint:"point",esriGeometryMultipoint:"multipoint",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon"}),t$k=o$A()({esriGeometryPoint:"point",esriGeometryMultipoint:"multipoint",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"extent",mesh:"mesh"});

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function u$o(o){return void 0!==o.xmin&&void 0!==o.ymin&&void 0!==o.xmax&&void 0!==o.ymax}function s$i(o){return void 0!==o.points}function l$w(o){return void 0!==o.x&&void 0!==o.y}function f$b(o){return void 0!==o.paths}function y$a(o){return void 0!==o.rings}function p$Q(m){return m?m instanceof c$O?m:l$w(m)?j$b.fromJSON(m):f$b(m)?m$m.fromJSON(m):y$a(m)?x$4.fromJSON(m):s$i(m)?m$o.fromJSON(m):u$o(m)?M$3.fromJSON(m):null:null}function d$o(o){return o?l$w(o)?"esriGeometryPoint":f$b(o)?"esriGeometryPolyline":y$a(o)?"esriGeometryPolygon":u$o(o)?"esriGeometryEnvelope":s$i(o)?"esriGeometryMultipoint":null:null}const v$5={esriGeometryPoint:j$b,esriGeometryPolyline:m$m,esriGeometryPolygon:x$4,esriGeometryEnvelope:M$3,esriGeometryMultipoint:m$o};function G$1(o){return o&&v$5[o]||null}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const i$F={base:c$O,key:"type",typeMap:{extent:M$3,multipoint:m$o,point:j$b,polyline:m$m,polygon:x$4}};k$a(i$F);

/**
 * Identifies a standard geography level in Geoenrichment data.
 * Examples of standard geography levels are: ZIP codes in USA; provinces in Canada; districts in GB.
 * Full list of standard geography levels in all countries can be obtained with 'GeoenrichmentTask.getStandardGeographyLevels' method.
 */
class GeographyLevel {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    if (source) {
      this.layerID = source.layer || source.layerID || null;
      this.hierarchy = source.hierarchy || null;
      this.countryID = source.sourceCountry || source.countryID || null;
    }
  }
  toJSON() {
    const json = {};
    if (this.layerID) {
      json.layer = this.layerID;
    }
    if (this.hierarchy) {
      json.hierarchy = this.hierarchy;
    }
    if (this.countryID) {
      json.sourceCountry = this.countryID;
    }
    return json;
  }
  static fromJsonArray(jsonArray) {
    const result = [];
    if (!jsonArray) {
      return result;
    }
    for (let i = 0; i < jsonArray.length; i++) {
      let obj = jsonArray[i];
      if (!(obj instanceof GeographyLevel)) {
        obj = new GeographyLevel(obj);
      }
      result.push(obj);
    }
    return result;
  }
  static toJsonArray(array) {
    if (!array || array.length === 0) {
      return null;
    }
    const result = [];
    for (let i = 0; i < array.length; i++) {
      result.push(array[i].toJSON());
    }
    return result;
  }
}

class StudyAreaOptions {
}

/**
 * When used with point-type study areas, indicates that drive time buffer will be built aroud given point.
 */
class DriveBuffer extends StudyAreaOptions {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super();
    if (source) {
      if (source.bufferRadii) {
        this.radii = source.bufferRadii;
      }
      else if (source.radius) {
        this.radii = [source.radius];
      }
      else if (source.radii) {
        this.radii = source.radii;
      }
      this.units = source.bufferUnits || source.units;
    }
    // default parameters
    if (!this.radii) {
      this.radii = [5];
    }
    if (!this.units) {
      this.units = "esriDriveTimeUnitsMinutes";
    }
  }
  toJSON() {
    return {
      areaType: "DriveTimeBuffer",
      bufferUnits: this.units,
      bufferRadii: this.radii && this.radii.slice()
    };
  }
}

/**
 *  Indicates that study area will be used to retrive intersecting standard geographies and Enrichment calculations will be performed for those standard geographies rather than the original study area.
 *
 * For example, if study area is a point then the default Enrichment behaviour is to build 1-mile circle around that point; using IntersectingGeographies as study area options changes the behaviour to retrieve e.g. ZIP code intersecting that point.
 */
class IntersectingGeographies extends StudyAreaOptions {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super();
    let levels;
    if (source) {
      levels = source.intersectingGeographies || source.levels || source.geographyLevels;
    }
    else {
      levels = [{ layer: "Admin2" }];
    }
    this.geographyLevels = GeographyLevel.fromJsonArray(levels);
  }
  toJSON() {
    return {
      areaType: "StandardGeography",
      intersectingGeographies: GeographyLevel.toJsonArray(this.geographyLevels)
    };
  }
}

/**
 * When used with point-type or line-type study areas, indicates that buffer will be built aroud given feature
 */
class RingBuffer extends StudyAreaOptions {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super();
    if (source) {
      if (source.bufferRadii) {
        this.radii = source.bufferRadii;
      }
      else if (source.radius) {
        this.radii = [source.radius];
      }
      else if (source.radii) {
        this.radii = source.radii;
      }
      this.units = source.bufferUnits || source.units;
    }
    // default parameters
    if (!this.radii) {
      this.radii = [1];
    }
    if (!this.units) {
      this.units = "esriMiles";
    }
  }
  toJSON() {
    return {
      areaType: "RingBuffer",
      bufferUnits: this.units,
      bufferRadii: this.radii && this.radii.slice()
    };
  }
}

// geoenrichment.tasks
/**
 * Utility function to deserialize study area options from JSON.
 */
const studyAreaOptionsFromJson = function (json) {
  if (json) {
    switch (json.areaType) {
      case "DriveTimeBuffer":
        return new DriveBuffer(json);
      case "StandardGeography":
        return new IntersectingGeographies(json);
    }
    /*
    Probably some legacy format
    switch (json.type) {
      case "DriveTime":
        return new DriveBuffer(json);
      case "StdGeo":
        return new IntersectingGeographies(json);
    }
    */
    return new RingBuffer(json);
  }
  return new RingBuffer();
};

// geoenrichment.tasks
/**
 * Represents a study area. This class is abstract, see GeometryStudyArea, StandardGeographyStudyArea and AddressStudyArea instead.
 */
class StudyArea {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    /**
     * Determines whether response will also include actual study area geometry.
     * For example, if input study area is a line, the response will inlude buffer polygon built around the line.
     * Defaults to false. Settings EnrichParameters.returnGeometry to true will take precedence over this value and geometry will be returned anyway.
     */
    this.returnGeometry = false;
    if (source) {
      if (source.attributes) {
        this.attributes = source.attributes;
      }
      if (source.areaType) {
        this.options = studyAreaOptionsFromJson(source);
      }
      else if (source.options instanceof StudyAreaOptions) {
        this.options = source.options;
      }
      this.returnGeometry = !!source.returnGeometry;
      this.comparisonGeographyLevels = GeographyLevel.fromJsonArray(source.comparisonGeographyLevels || source.comparisonLevels);
    }
    this.comparisonGeographyLevels = this.comparisonGeographyLevels || [];
  }
  getGeomType() {
    throw new Error("Not implemented"); // abstract
  }
  /**
   * Converts this study area to serializable JSON.
   */
  toJSON() {
    const json = this.options ? this.options.toJSON() : {};
    if (this.attributes) {
      json.attributes = this.attributes;
    }
    if (this.returnGeometry) {
      json.returnGeometry = true;
    }
    const comparisonLevels = GeographyLevel.toJsonArray(this.comparisonGeographyLevels);
    if (comparisonLevels) {
      json.comparisonLevels = comparisonLevels;
    }
    return json;
  }
}

/**
 * Study area defined by address.
 */
class AddressStudyArea extends StudyArea {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super(source);
    /**
     * Object with address fields.
     * @example
     * 1. { text: "380 New York St. Redlands, CA 92373" }
     * 2. { Address: "380 New York St.", Admin1: "Redlands", Admin2: "CA", Postal: "92373", CountryCode: "USA" }
     * 3. { text: "12 Concorde Place Toronto ON M3C 3R8", sourceCountry: "Canada" }
     */
    this.address = null;
    this.address = source && source.address;
  }
  getGeomType() {
    return "point";
  }
  toJSON() {
    const json = super.toJSON();
    json.address = this.address;
    return json;
  }
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const c$H=new t$I({inherited:"inherited",codedValue:"coded-value",range:"range"});let i$E=class extends a$B{constructor(r){super(r),this.name=null,this.type=null;}};e$u([y$r({type:String,json:{write:!0}})],i$E.prototype,"name",void 0),e$u([r$v(c$H)],i$E.prototype,"type",void 0),i$E=e$u([i$X("esri.layers.support.Domain")],i$E);var a$w=i$E;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var t$j;let p$P=t$j=class extends a$B{constructor(r){super(r),this.name=null,this.code=null;}clone(){return new t$j({name:this.name,code:this.code})}};e$u([y$r({type:String,json:{write:!0}})],p$P.prototype,"name",void 0),e$u([y$r({type:[String,Number],json:{write:!0}})],p$P.prototype,"code",void 0),p$P=t$j=e$u([i$X("esri.layers.support.CodedValue")],p$P);var c$G=p$P;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var a$v;let i$D=a$v=class extends a$w{constructor(o){super(o),this.codedValues=null,this.type="coded-value";}getName(o){let e=null;if(this.codedValues){const r=String(o);this.codedValues.some((o=>(String(o.code)===r&&(e=o.name),!!e)));}return e}clone(){return new a$v({codedValues:y$v(this.codedValues),name:this.name})}};e$u([y$r({type:[c$G],json:{write:!0}})],i$D.prototype,"codedValues",void 0),e$u([r$v({codedValue:"coded-value"})],i$D.prototype,"type",void 0),i$D=a$v=e$u([i$X("esri.layers.support.CodedValueDomain")],i$D);var u$n=i$D;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var t$i;let p$O=t$i=class extends a$w{constructor(r){super(r),this.type="inherited";}clone(){return new t$i}};e$u([r$v({inherited:"inherited"})],p$O.prototype,"type",void 0),p$O=t$i=e$u([i$X("esri.layers.support.InheritedDomain")],p$O);var i$C=p$O;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var s$h;let i$B=s$h=class extends a$w{constructor(e){super(e),this.maxValue=null,this.minValue=null,this.type="range";}clone(){return new s$h({maxValue:this.maxValue,minValue:this.minValue,name:this.name})}};e$u([y$r({type:Number,json:{type:[Number],read:{source:"range",reader:(e,r)=>r.range&&r.range[1]},write:{enabled:!1,overridePolicy(){return {enabled:null!=this.maxValue&&null==this.minValue}},target:"range",writer(e,r,o){r[o]=[this.minValue||0,e];}}}})],i$B.prototype,"maxValue",void 0),e$u([y$r({type:Number,json:{type:[Number],read:{source:"range",reader:(e,r)=>r.range&&r.range[0]},write:{target:"range",writer(e,r,o){r[o]=[e,this.maxValue||0];}}}})],i$B.prototype,"minValue",void 0),e$u([r$v({range:"range"})],i$B.prototype,"type",void 0),i$B=s$h=e$u([i$X("esri.layers.support.RangeDomain")],i$B);var n$v=i$B;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var o$a;function t$h(e,n){switch(e.type){case"range":{const a="range"in e?e.range[0]:e.minValue,r="range"in e?e.range[1]:e.maxValue;if(+n<a||+n>r)return o$a.VALUE_OUT_OF_RANGE;break}case"coded-value":case"codedValue":if(null==e.codedValues||e.codedValues.every((e=>null==e||e.code!==n)))return o$a.INVALID_CODED_VALUE}return null}!function(e){e.VALUE_OUT_OF_RANGE="domain-validation-error::value-out-of-range",e.INVALID_CODED_VALUE="domain-validation-error::invalid-coded-value";}(o$a||(o$a={}));const u$m={key:"type",base:a$w,typeMap:{range:n$v,"coded-value":u$n,inherited:i$C}};function d$n(e){if(!e||!e.type)return null;switch(e.type){case"range":return n$v.fromJSON(e);case"codedValue":return u$n.fromJSON(e);case"inherited":return i$C.fromJSON(e)}return null}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let t$g;async function a$u(){return t$g||(t$g=(async()=>{const e=await Promise.all(/*! import() */[__webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-0eb39a"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-c7e495")]).then(__webpack_require__.bind(__webpack_require__, /*! ./arcadeUtils-d1c69dcc.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/arcadeUtils-d1c69dcc.js")).then(function (n) { return n.aq; });return await e.arcade.load(),{arcade:e.arcade,arcadeUtils:e,Dictionary:e.Dictionary,Feature:e.arcadeFeature}})()),t$g}const s$g=(e,r,t)=>o$9.create(e,r,t,null,["$feature"]),i$A=(e,r,t)=>o$9.create(e,r,t,null,["$feature","$view"]),n$u=(e,r,t,a)=>o$9.create(e,r,t,a,["$feature","$view"]);class o$9{constructor(e,r,t,a,s,i,c,n){this.script=e,this.evaluate=s,this.fields=c,this._syntaxTree=a,this._arcade=r,this._arcadeDictionary=t,this._arcadeFeature=i,this._spatialReference=n,this._referencesGeometry=r.scriptTouchesGeometry(this._syntaxTree),this._referencesScale=this._arcade.referencesMember(this._syntaxTree,"scale");}static async create(t,s,i,c,n,l){const{arcade:u,Feature:p,Dictionary:d}=await a$u(),f=k$4.fromJSON(s),h=u.parseScript(t,l),m=n.reduce(((e,r)=>({...e,[r]:null})),{});let y=null;r$A(c)&&(y=new d(c),y.immutable=!0,m.$config=null);const _=u.scriptUsesGeometryEngine(h)&&u.enableGeometrySupport(),F=u.scriptUsesFeatureSet(h)&&u.enableFeatureSetSupport(),w=u.scriptIsAsync(h)&&u.enableAsyncSupport(),S={vars:m,spatialReference:f,useAsync:!!w},b=new d;b.immutable=!1,b.setField("scale",0);const $=u.compileScript(h,S),x=e=>("$view"in e&&e.$view&&(b.setField("scale",e.$view.scale),e.$view=b),y&&(e.$config=y),$({vars:e,spatialReference:f}));return await Promise.all([_,F,w]),new o$9(t,u,d,h,x,new p,i,f)}repurposeFeature(e){return e.geometry&&!e.geometry.spatialReference&&(e.geometry.spatialReference=this._spatialReference),this._arcadeFeature.repurposeFromGraphicLikeObject(e.geometry,e.attributes,{fields:this.fields}),this._arcadeFeature}repurposeAdapter(e){return this._arcadeFeature.repurposeFromAdapter(e,{fields:this.fields}),this._arcadeFeature}createDictionary(){return new this._arcadeDictionary}referencesMember(e){return this._arcade.referencesMember(this._syntaxTree,e)}referencesFunction(e){return this._arcade.referencesFunction(this._syntaxTree,e)}referencesGeometry(){return this._referencesGeometry}referencesScale(){return this._referencesScale}extractFieldLiterals(e){return this._arcade.extractFieldLiterals(this._syntaxTree,e)}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const u$l=["field","field2","field3","normalizationField","rotationInfo.field","proportionalSymbolInfo.field","proportionalSymbolInfo.normalizationField","colorInfo.field","colorInfo.normalizationField"],f$a=["field","normalizationField"];function c$F(e,n){if(null!=e&&null!=n)for(const i of Array.isArray(e)?e:[e])if(d$m(u$l,i,n),"visualVariables"in i&&i.visualVariables)for(const e of i.visualVariables)d$m(f$a,e,n);}function d$m(i,t,r){if(i)for(const o of i){const i=t$N(o,t),l=i&&"function"!=typeof i&&T$4(r,i);l&&o$I(o,l.name,t);}}function m$l(e,n){if(null!=e&&null!=n)if("startField"in e){const i=T$4(n,e.startField),t=T$4(n,e.endField);e.startField=i&&i.name||null,e.endField=t&&t.name||null;}else {const i=T$4(n,e.startTimeField),t=T$4(n,e.endTimeField);e.startTimeField=i&&i.name||null,e.endTimeField=t&&t.name||null;}}const p$N=new Set;function y$9(e,n){return e&&n?(p$N.clear(),g$5(p$N,e,n),Array.from(p$N).sort()):[]}function g$5(e,n,i){if(i)if(n&&n.length)if(i.includes("*"))for(const{name:t}of n)e.add(t);else for(const t of i)F$1(e,n,t);else {if(i.includes("*"))return e.clear(),void e.add("*");for(const n of i)e.add(n);}}function F$1(e,n,i){if(n&&n.length){const t=T$4(n,i);t&&e.add(t.name);}else "string"==typeof i&&e.add(i);}function T$4(e,n){if("string"!=typeof n)return null;if(null!=e){n=n.toLowerCase();for(const i of e)if(i&&i.name.toLowerCase()===n)return i}return null}function h$i(e,n){if(!e||!n||"string"!=typeof n)return !1;n=n.toLowerCase();for(const i of e)if(i&&i.name.toLowerCase()===n)return !0;return !1}async function w$4(e,n,i){if(!i)return;const{arcadeUtils:t}=await a$u(),r=t.extractFieldNames(i);for(const o of r)F$1(e,n,o);}function S$6({displayField:e,fields:n}){return e||(n&&n.length?A$3(n,"name-or-title")||A$3(n,"unique-identifier")||A$3(n,"type-or-category")||x$3(n):null)}function x$3(e){for(const n of e){if(!n||!n.name)continue;const e=n.name.toLowerCase();if(e.indexOf("name")>-1||e.indexOf("title")>-1)return n.name}return null}function A$3(e,n){for(const i of e)if(i&&i.valueType&&i.valueType===n)return i.name;return null}function j$9(e){const n=e.defaultValue;return void 0!==n&&W(e,n)?n:e.nullable?null:void 0}function z(e){return "number"==typeof e&&!isNaN(e)&&isFinite(e)}function k$3(e){return null===e||z(e)}const P$2="isInteger"in Number?Number.isInteger:e=>"number"==typeof e&&isFinite(e)&&Math.floor(e)===e;function R$3(e){return null===e||P$2(e)}function G(e){return null!=e&&"string"==typeof e}function q$1(e){return null===e||G(e)}function M$2(){return !0}function W(e,n){let i;switch(e.type){case"date":case"integer":case"long":case"small-integer":case"esriFieldTypeDate":case"esriFieldTypeInteger":case"esriFieldTypeLong":case"esriFieldTypeSmallInteger":i=e.nullable?R$3:P$2;break;case"double":case"single":case"esriFieldTypeSingle":case"esriFieldTypeDouble":i=e.nullable?k$3:z;break;case"string":case"esriFieldTypeString":i=e.nullable?q$1:G;break;default:i=M$2;}return 1===arguments.length?i:i(n)}const Y=["integer","small-integer","single","double"],J$1=new Set([...Y,"esriFieldTypeInteger","esriFieldTypeSmallInteger","esriFieldTypeSingle","esriFieldTypeDouble"]);function X(e){return null!=e&&J$1.has(e.type)}function B(e){return null!=e&&("string"===e.type||"esriFieldTypeString"===e.type)}var Q,Z;function ee(e){return null==e||"number"==typeof e&&isNaN(e)?null:e}function ne(e,n){return e.nullable&&null===n?null:X(e)&&!ie(e.type,Number(n))?Q.OUT_OF_RANGE:W(e,n)?e.domain?t$h(e.domain,n):null:Z.INVALID_TYPE}function ie(e,n){const i="string"==typeof e?re(e):e;return !!i&&(i.isInteger?P$2(n)&&n>=i.min&&n<=i.max:n>=i.min&&n<=i.max)}function re(e){switch(e){case"esriFieldTypeSmallInteger":case"small-integer":return le;case"esriFieldTypeInteger":case"integer":return ae;case"esriFieldTypeSingle":case"single":return se;case"esriFieldTypeDouble":case"double":return ue}}!function(e){e.OUT_OF_RANGE="numeric-range-validation-error::out-of-range";}(Q||(Q={})),function(e){e.INVALID_TYPE="type-validation-error::invalid-type";}(Z||(Z={}));const le={min:-32768,max:32767,isInteger:!0},ae={min:-2147483648,max:2147483647,isInteger:!0},se={min:-34e37,max:12e37,isInteger:!1},ue={min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isInteger:!1};function fe(e,n,i){switch(e){case o$a.INVALID_CODED_VALUE:return `Value ${i} is not in the coded domain - field: ${n.name}, domain: ${JSON.stringify(n.domain)}`;case o$a.VALUE_OUT_OF_RANGE:return `Value ${i} is out of the range of valid values - field: ${n.name}, domain: ${JSON.stringify(n.domain)}`;case Z.INVALID_TYPE:return `Value ${i} is not a valid value for the field type - field: ${n.name}, type: ${n.type}, nullable: ${n.nullable}`;case Q.OUT_OF_RANGE:{const{min:e,max:t}=re(n.type);return `Value ${i} is out of range for the number type - field: ${n.name}, type: ${n.type}, value range is ${e} to ${t}`}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let s$f=class extends a$B{constructor(r){super(r),this.type=null;}};e$u([y$r({type:["attachments","custom","fields","media","text"],readOnly:!0,json:{read:!1,write:!0}})],s$f.prototype,"type",void 0),s$f=e$u([i$X("esri.popup.content.Content")],s$f);var p$M=s$f;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var s$e;let i$z=s$e=class extends p$M{constructor(t){super(t),this.description=null,this.displayType=null,this.title=null,this.type="attachments";}clone(){return new s$e({description:this.description,displayType:this.displayType,title:this.title})}};e$u([y$r({json:{write:!0,origins:{"web-scene":{write:!1,read:!1}}}})],i$z.prototype,"description",void 0),e$u([y$r({type:["preview","list"],json:{write:!0}})],i$z.prototype,"displayType",void 0),e$u([y$r({json:{write:!0,origins:{"web-scene":{write:!1,read:!1}}}})],i$z.prototype,"title",void 0),e$u([y$r({type:["attachments"],readOnly:!0,json:{read:!1,write:!0}})],i$z.prototype,"type",void 0),i$z=s$e=e$u([i$X("esri.popup.content.AttachmentsContent")],i$z);var p$L=i$z;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$K;let i$y=p$K=class extends p$M{constructor(r){super(r),this.creator=null,this.destroyer=null,this.outFields=null,this.type="custom";}clone(){return new p$K({creator:this.creator,destroyer:this.destroyer,outFields:Array.isArray(this.outFields)?y$v(this.outFields):null})}};e$u([y$r()],i$y.prototype,"creator",void 0),e$u([y$r()],i$y.prototype,"destroyer",void 0),e$u([y$r()],i$y.prototype,"outFields",void 0),e$u([y$r({type:["custom"],readOnly:!0})],i$y.prototype,"type",void 0),i$y=p$K=e$u([i$X("esri.popup.content.CustomContent")],i$y);var c$E=i$y;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const a$t=o$A()({shortDate:"short-date",shortDateShortTime:"short-date-short-time",shortDateShortTime24:"short-date-short-time-24",shortDateLongTime:"short-date-long-time",shortDateLongTime24:"short-date-long-time-24",shortDateLE:"short-date-le",shortDateLEShortTime:"short-date-le-short-time",shortDateLEShortTime24:"short-date-le-short-time-24",shortDateLELongTime:"short-date-le-long-time",shortDateLELongTime24:"short-date-le-long-time-24",longMonthDayYear:"long-month-day-year",longMonthDayYearShortTime:"long-month-day-year-short-time",longMonthDayYearShortTime24:"long-month-day-year-short-time-24",longMonthDayYearLongTime:"long-month-day-year-long-time",longMonthDayYearLongTime24:"long-month-day-year-long-time-24",dayShortMonthYear:"day-short-month-year",dayShortMonthYearShortTime:"day-short-month-year-short-time",dayShortMonthYearShortTime24:"day-short-month-year-short-time-24",dayShortMonthYearLongTime:"day-short-month-year-long-time",dayShortMonthYearLongTime24:"day-short-month-year-long-time-24",longDate:"long-date",longDateShortTime:"long-date-short-time",longDateShortTime24:"long-date-short-time-24",longDateLongTime:"long-date-long-time",longDateLongTime24:"long-date-long-time-24",longMonthYear:"long-month-year",shortMonthYear:"short-month-year",year:"year"});a$t.toJSON.bind(a$t);a$t.fromJSON.bind(a$t);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const r$a={year:"numeric",month:"numeric",day:"numeric"},n$t={year:"numeric",month:"long",day:"numeric"},a$s={year:"numeric",month:"short",day:"numeric"},h$h={year:"numeric",month:"long",weekday:"long",day:"numeric"},m$k={hour:"numeric",minute:"numeric"},i$x={...m$k,second:"numeric"},s$d={"short-date":r$a,"short-date-short-time":{...r$a,...m$k},"short-date-short-time-24":{...r$a,...m$k,hour12:!1},"short-date-long-time":{...r$a,...i$x},"short-date-long-time-24":{...r$a,...i$x,hour12:!1},"short-date-le":r$a,"short-date-le-short-time":{...r$a,...m$k},"short-date-le-short-time-24":{...r$a,...m$k,hour12:!1},"short-date-le-long-time":{...r$a,...i$x},"short-date-le-long-time-24":{...r$a,...i$x,hour12:!1},"long-month-day-year":n$t,"long-month-day-year-short-time":{...n$t,...m$k},"long-month-day-year-short-time-24":{...n$t,...m$k,hour12:!1},"long-month-day-year-long-time":{...n$t,...i$x},"long-month-day-year-long-time-24":{...n$t,...i$x,hour12:!1},"day-short-month-year":a$s,"day-short-month-year-short-time":{...a$s,...m$k},"day-short-month-year-short-time-24":{...a$s,...m$k,hour12:!1},"day-short-month-year-long-time":{...a$s,...i$x},"day-short-month-year-long-time-24":{...a$s,...i$x,hour12:!1},"long-date":h$h,"long-date-short-time":{...h$h,...m$k},"long-date-short-time-24":{...h$h,...m$k,hour12:!1},"long-date-long-time":{...h$h,...i$x},"long-date-long-time-24":{...h$h,...i$x,hour12:!1},"long-month-year":{month:"long",year:"numeric"},"short-month-year":{month:"short",year:"numeric"},year:{year:"numeric"},"short-time":m$k,"long-time":i$x},l$v=o$A()({shortDate:"short-date",shortDateShortTime:"short-date-short-time",shortDateShortTime24:"short-date-short-time-24",shortDateLongTime:"short-date-long-time",shortDateLongTime24:"short-date-long-time-24",shortDateLE:"short-date-le",shortDateLEShortTime:"short-date-le-short-time",shortDateLEShortTime24:"short-date-le-short-time-24",shortDateLELongTime:"short-date-le-long-time",shortDateLELongTime24:"short-date-le-long-time-24",longMonthDayYear:"long-month-day-year",longMonthDayYearShortTime:"long-month-day-year-short-time",longMonthDayYearShortTime24:"long-month-day-year-short-time-24",longMonthDayYearLongTime:"long-month-day-year-long-time",longMonthDayYearLongTime24:"long-month-day-year-long-time-24",dayShortMonthYear:"day-short-month-year",dayShortMonthYearShortTime:"day-short-month-year-short-time",dayShortMonthYearShortTime24:"day-short-month-year-short-time-24",dayShortMonthYearLongTime:"day-short-month-year-long-time",dayShortMonthYearLongTime24:"day-short-month-year-long-time-24",longDate:"long-date",longDateShortTime:"long-date-short-time",longDateShortTime24:"long-date-short-time-24",longDateLongTime:"long-date-long-time",longDateLongTime24:"long-date-long-time-24",longMonthYear:"long-month-year",shortMonthYear:"short-month-year",year:"year"});l$v.toJSON.bind(l$v);l$v.fromJSON.bind(l$v);const u$k={ar:"ar-u-nu-latn-ca-gregory"};let c$D=new WeakMap,D$2=s$d["short-date-short-time"];function T$3(t){const e=t||D$2;if(!c$D.has(e)){const t=(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)(),r=u$k[(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)()]||t;c$D.set(e,new Intl.DateTimeFormat(r,e));}return c$D.get(e)}function S$5(t){return s$d[t]||null}function L$4(t,o){return T$3(o).format(t)}(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.d)((()=>{c$D=new WeakMap,D$2=s$d["short-date-short-time"];}));

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const a$r={ar:"ar-u-nu-latn"};let e$d=new WeakMap,o$8={};function i$w(r){const i=r||o$8;if(!e$d.has(i)){const t=(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)(),o=a$r[(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)()]||t;e$d.set(i,new Intl.NumberFormat(o,r));}return m$F(e$d.get(i))}function u$j(t={}){const n={};return null!=t.digitSeparator&&(n.useGrouping=t.digitSeparator),null!=t.places&&(n.minimumFractionDigits=n.maximumFractionDigits=t.places),n}function m$j(t,n){return i$w(n).format(t)}(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.d)((()=>{e$d=new WeakMap,o$8={};}));

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var d$l;let l$u=d$l=class extends a$B{constructor(r){super(r),this.dateFormat=null,this.digitSeparator=!1,this.places=null;}clone(){return new d$l({dateFormat:this.dateFormat,digitSeparator:this.digitSeparator,places:this.places})}format(r){return this.dateFormat?L$4(r,S$5(this.dateFormat)):m$j(r,u$j(this))}};e$u([r$v(a$t)],l$u.prototype,"dateFormat",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],l$u.prototype,"digitSeparator",void 0),e$u([y$r({type:N$5,json:{write:!0}})],l$u.prototype,"places",void 0),l$u=d$l=e$u([i$X("esri.popup.support.FieldInfoFormat")],l$u);var n$s=l$u;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var a$q;let n$r=a$q=class extends a$B{constructor(t){super(t),this.fieldName=null,this.format=null,this.isEditable=!1,this.label=null,this.stringFieldOption="text-box",this.statisticType=null,this.tooltip=null,this.visible=!0;}clone(){return new a$q({fieldName:this.fieldName,format:this.format?y$v(this.format):null,isEditable:this.isEditable,label:this.label,stringFieldOption:this.stringFieldOption,statisticType:this.statisticType,tooltip:this.tooltip,visible:this.visible})}};e$u([y$r({type:String,json:{write:!0}})],n$r.prototype,"fieldName",void 0),e$u([y$r({type:n$s,json:{write:!0}})],n$r.prototype,"format",void 0),e$u([y$r({type:Boolean,json:{write:!0,default:!1}})],n$r.prototype,"isEditable",void 0),e$u([y$r({type:String,json:{write:!0}})],n$r.prototype,"label",void 0),e$u([r$v(new t$I({richtext:"rich-text",textarea:"text-area",textbox:"text-box"}),{default:"text-box"})],n$r.prototype,"stringFieldOption",void 0),e$u([y$r({type:["count","sum","min","max","avg","stddev","var"],json:{write:!0}})],n$r.prototype,"statisticType",void 0),e$u([y$r({type:String,json:{write:!0}})],n$r.prototype,"tooltip",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],n$r.prototype,"visible",void 0),n$r=a$q=e$u([i$X("esri.popup.FieldInfo")],n$r);var c$C=n$r;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var n$q;let l$t=n$q=class extends p$M{constructor(o){super(o),this.description=null,this.fieldInfos=null,this.title=null,this.type="fields";}writeFieldInfos(o,r){r.fieldInfos=o&&o.map((o=>o.toJSON()));}clone(){return new n$q({description:this.description,fieldInfos:Array.isArray(this.fieldInfos)?y$v(this.fieldInfos):null,title:this.title})}};e$u([y$r({json:{write:!0,origins:{"web-scene":{write:!1,read:!1}}}})],l$t.prototype,"description",void 0),e$u([y$r({type:[c$C]})],l$t.prototype,"fieldInfos",void 0),e$u([o$v("fieldInfos")],l$t.prototype,"writeFieldInfos",null),e$u([y$r({json:{write:!0,origins:{"web-scene":{write:!1,read:!1}}}})],l$t.prototype,"title",void 0),e$u([y$r({type:["fields"],readOnly:!0,json:{read:!1,write:!0}})],l$t.prototype,"type",void 0),l$t=n$q=e$u([i$X("esri.popup.content.FieldsContent")],l$t);var c$B=l$t;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let p$J=class extends a$B{constructor(t){super(t),this.altText=null,this.caption="",this.title="",this.type=null;}};e$u([y$r({type:String,json:{write:!0}})],p$J.prototype,"altText",void 0),e$u([y$r({type:String,json:{write:!0}})],p$J.prototype,"caption",void 0),e$u([y$r({type:String,json:{write:!0}})],p$J.prototype,"title",void 0),e$u([y$r({type:["image","bar-chart","column-chart","line-chart","pie-chart"],readOnly:!0,json:{read:!1,write:!0}})],p$J.prototype,"type",void 0),p$J=e$u([i$X("esri.popup.content.mixins.MediaInfo")],p$J);var s$c=p$J;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$I;let i$v=p$I=class extends u$D{constructor(o){super(o),this.tooltip=null,this.value=null,this.x=null,this.y=null;}clone(){return new p$I({tooltip:this.tooltip,value:this.value})}};e$u([y$r()],i$v.prototype,"tooltip",void 0),e$u([y$r()],i$v.prototype,"value",void 0),e$u([o$C("value")],i$v.prototype,"x",void 0),e$u([o$C("tooltip")],i$v.prototype,"y",void 0),i$v=p$I=e$u([i$X("esri.popup.content.support.ChartMediaInfoValueSeries")],i$v);var c$A=i$v;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$H;let l$s=p$H=class extends a$B{constructor(o){super(o),this.fields=[],this.normalizeField=null,this.series=[],this.tooltipField=null;}clone(){return new p$H({fields:y$v(this.fields),normalizeField:this.normalizeField,tooltipField:this.tooltipField})}};e$u([y$r({type:[String],json:{write:!0}})],l$s.prototype,"fields",void 0),e$u([y$r({type:String,json:{write:!0}})],l$s.prototype,"normalizeField",void 0),e$u([y$r({type:[c$A],json:{read:!1}})],l$s.prototype,"series",void 0),e$u([y$r({type:String,json:{write:!0}})],l$s.prototype,"tooltipField",void 0),l$s=p$H=e$u([i$X("esri.popup.content.support.ChartMediaInfoValue")],l$s);var n$p=l$s;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let p$G=class extends s$c{constructor(r){super(r),this.type=null,this.value=null;}};e$u([y$r({type:["bar-chart","column-chart","line-chart","pie-chart"],readOnly:!0,json:{read:!1,write:!0}})],p$G.prototype,"type",void 0),e$u([y$r({type:n$p,json:{write:!0}})],p$G.prototype,"value",void 0),p$G=e$u([i$X("esri.popup.content.mixins.ChartMediaInfo")],p$G);var i$u=p$G;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const c$z=o$A()({barchart:"bar-chart",columnchart:"column-chart",linechart:"line-chart",piechart:"pie-chart"});

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$F;let a$p=p$F=class extends i$u{constructor(r){super(r),this.type="bar-chart";}clone(){return new p$F({altText:this.altText,title:this.title,caption:this.caption,value:this.value?this.value.clone():null})}};e$u([y$r({type:["bar-chart"],readOnly:!0,json:{type:["barchart"],read:!1,write:c$z.write}})],a$p.prototype,"type",void 0),a$p=p$F=e$u([i$X("esri.popup.content.BarChartMediaInfo")],a$p);var i$t=a$p;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$E;let i$s=p$E=class extends i$u{constructor(r){super(r),this.type="column-chart";}clone(){return new p$E({altText:this.altText,title:this.title,caption:this.caption,value:this.value?this.value.clone():null})}};e$u([y$r({type:["column-chart"],readOnly:!0,json:{type:["columnchart"],read:!1,write:c$z.write}})],i$s.prototype,"type",void 0),i$s=p$E=e$u([i$X("esri.popup.content.ColumnChartMediaInfo")],i$s);var c$y=i$s;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var t$f;let p$D=t$f=class extends a$B{constructor(r){super(r),this.linkURL=null,this.sourceURL=null;}clone(){return new t$f({linkURL:this.linkURL,sourceURL:this.sourceURL})}};e$u([y$r({type:String,json:{write:!0}})],p$D.prototype,"linkURL",void 0),e$u([y$r({type:String,json:{write:!0}})],p$D.prototype,"sourceURL",void 0),p$D=t$f=e$u([i$X("esri.popup.content.support.ImageMediaInfoValue")],p$D);var i$r=p$D;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$C;let i$q=p$C=class extends s$c{constructor(e){super(e),this.refreshInterval=null,this.type="image",this.value=null;}clone(){return new p$C({altText:this.altText,title:this.title,caption:this.caption,refreshInterval:this.refreshInterval,value:this.value?this.value.clone():null})}};e$u([y$r({type:Number,json:{write:!0}})],i$q.prototype,"refreshInterval",void 0),e$u([y$r({type:["image"],readOnly:!0,json:{read:!1,write:!0}})],i$q.prototype,"type",void 0),e$u([y$r({type:i$r,json:{write:!0}})],i$q.prototype,"value",void 0),i$q=p$C=e$u([i$X("esri.popup.content.ImageMediaInfo")],i$q);var a$o=i$q;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var i$p;let p$B=i$p=class extends i$u{constructor(r){super(r),this.type="line-chart";}clone(){return new i$p({altText:this.altText,title:this.title,caption:this.caption,value:this.value?this.value.clone():null})}};e$u([y$r({type:["line-chart"],readOnly:!0,json:{type:["linechart"],read:!1,write:c$z.write}})],p$B.prototype,"type",void 0),p$B=i$p=e$u([i$X("esri.popup.content.LineChartMediaInfo")],p$B);var a$n=p$B;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$A;let i$o=p$A=class extends i$u{constructor(r){super(r),this.type="pie-chart";}clone(){return new p$A({altText:this.altText,title:this.title,caption:this.caption,value:this.value?this.value.clone():null})}};e$u([y$r({type:["pie-chart"],readOnly:!0,json:{type:["piechart"],read:!1,write:c$z.write}})],i$o.prototype,"type",void 0),i$o=p$A=e$u([i$X("esri.popup.content.PieChartMediaInfo")],i$o);var a$m=i$o;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const m$i={base:s$c,key:"type",defaultKeyValue:"image",typeMap:{"bar-chart":i$t,"column-chart":c$y,"line-chart":a$n,"pie-chart":a$m,image:a$o}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var l$r;let u$i=l$r=class extends p$M{constructor(o){super(o),this.activeMediaInfoIndex=null,this.description=null,this.mediaInfos=null,this.title=null,this.type="media";}readMediaInfos(o){return o&&o.map((o=>"image"===o.type?a$o.fromJSON(o):"barchart"===o.type?i$t.fromJSON(o):"columnchart"===o.type?c$y.fromJSON(o):"linechart"===o.type?a$n.fromJSON(o):"piechart"===o.type?a$m.fromJSON(o):void 0)).filter(Boolean)}writeMediaInfos(o,e){e.mediaInfos=o&&o.map((o=>o.toJSON()));}clone(){return new l$r({activeMediaInfoIndex:this.activeMediaInfoIndex,description:this.description,mediaInfos:this.mediaInfos?y$v(this.mediaInfos):null,title:this.title})}};e$u([y$r()],u$i.prototype,"activeMediaInfoIndex",void 0),e$u([y$r({json:{write:!0,origins:{"web-scene":{write:!1,read:!1}}}})],u$i.prototype,"description",void 0),e$u([y$r({types:[m$i]})],u$i.prototype,"mediaInfos",void 0),e$u([e$C("mediaInfos")],u$i.prototype,"readMediaInfos",null),e$u([o$v("mediaInfos")],u$i.prototype,"writeMediaInfos",null),e$u([y$r({json:{write:!0,origins:{"web-scene":{write:!1,read:!1}}}})],u$i.prototype,"title",void 0),e$u([y$r({type:["media"],readOnly:!0,json:{read:!1,write:!0}})],u$i.prototype,"type",void 0),u$i=l$r=e$u([i$X("esri.popup.content.MediaContent")],u$i);var I=u$i;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var s$b;let p$z=s$b=class extends p$M{constructor(t){super(t),this.text=null,this.type="text";}clone(){return new s$b({text:this.text})}};e$u([y$r({type:String,json:{write:!0}})],p$z.prototype,"text",void 0),e$u([y$r({type:["text"],readOnly:!0,json:{read:!1,write:!0}})],p$z.prototype,"type",void 0),p$z=s$b=e$u([i$X("esri.popup.content.TextContent")],p$z);var c$x=p$z;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const r$9={base:null,key:"type",typeMap:{attachment:p$L,media:I,text:c$x,field:c$B}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var s$a;let p$y=s$a=class extends a$B{constructor(r){super(r),this.name=null,this.title=null,this.expression=null,this.returnType=null;}clone(){return new s$a({name:this.name,title:this.title,expression:this.expression,returnType:this.returnType})}};e$u([y$r({type:String,json:{write:!0}})],p$y.prototype,"name",void 0),e$u([y$r({type:String,json:{write:!0}})],p$y.prototype,"title",void 0),e$u([y$r({type:String,json:{write:!0}})],p$y.prototype,"expression",void 0),e$u([y$r({type:["string","number"],json:{write:!0}})],p$y.prototype,"returnType",void 0),p$y=s$a=e$u([i$X("esri.popup.ExpressionInfo")],p$y);var i$n=p$y;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var e$c;let p$x=e$c=class extends a$B{constructor(o){super(o),this.returnTopmostRaster=null,this.showNoDataRecords=null;}clone(){return new e$c({showNoDataRecords:this.showNoDataRecords,returnTopmostRaster:this.returnTopmostRaster})}};e$u([y$r({type:Boolean,json:{write:!0}})],p$x.prototype,"returnTopmostRaster",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],p$x.prototype,"showNoDataRecords",void 0),p$x=e$c=e$u([i$X("esri.popup.LayerOptions")],p$x);var a$l=p$x;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var t$e;let p$w=t$e=class extends a$B{constructor(r){super(r),this.field=null,this.order=null;}clone(){return new t$e({field:this.field,order:this.order})}};e$u([y$r({type:String,json:{write:!0}})],p$w.prototype,"field",void 0),e$u([y$r({type:["asc","desc"],json:{write:!0}})],p$w.prototype,"order",void 0),p$w=t$e=e$u([i$X("esri.popup.support.RelatedRecordsInfoFieldOrder")],p$w);var i$m=p$w;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var i$l;let d$k=i$l=class extends a$B{constructor(r){super(r),this.showRelatedRecords=null,this.orderByFields=null;}clone(){return new i$l({showRelatedRecords:this.showRelatedRecords,orderByFields:this.orderByFields?y$v(this.orderByFields):null})}};e$u([y$r({type:Boolean,json:{write:!0}})],d$k.prototype,"showRelatedRecords",void 0),e$u([y$r({type:[i$m],json:{write:!0}})],d$k.prototype,"orderByFields",void 0),d$k=i$l=e$u([i$X("esri.popup.RelatedRecordsInfo")],d$k);var c$w=d$k;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let t$d=0;const r$8=r=>{let o=class extends r{constructor(...e){super(...e),Object.defineProperty(this,"uid",{writable:!1,configurable:!1,value:Date.now().toString(16)+"-object-"+t$d++});}};return o=e$u([i$X("esri.core.Identifiable")],o),o};let o$7=class extends(r$8(class{})){};o$7=e$u([i$X("esri.core.Identifiable")],o$7);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var r$7;let p$v=r$7=class extends(r$8(u$D)){constructor(t){super(t),this.active=!1,this.className=null,this.disabled=!1,this.id=null,this.indicator=!1,this.title=null,this.type=null,this.visible=!0;}clone(){return new r$7({active:this.active,className:this.className,disabled:this.disabled,id:this.id,indicator:this.indicator,title:this.title,visible:this.visible})}};e$u([y$r()],p$v.prototype,"active",void 0),e$u([y$r()],p$v.prototype,"className",void 0),e$u([y$r()],p$v.prototype,"disabled",void 0),e$u([y$r()],p$v.prototype,"id",void 0),e$u([y$r()],p$v.prototype,"indicator",void 0),e$u([y$r()],p$v.prototype,"title",void 0),e$u([y$r()],p$v.prototype,"type",void 0),e$u([y$r()],p$v.prototype,"visible",void 0),p$v=r$7=e$u([i$X("esri.support.actions.ActionBase")],p$v);var c$v=p$v;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var i$k;let e$b=i$k=class extends c$v{constructor(s){super(s),this.image=null,this.type="button";}clone(){return new i$k({active:this.active,className:this.className,disabled:this.disabled,id:this.id,indicator:this.indicator,title:this.title,visible:this.visible,image:this.image})}};e$u([y$r()],e$b.prototype,"image",void 0),e$b=i$k=e$u([i$X("esri.support.Action.ActionButton")],e$b);var c$u=e$b;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var r$6;let i$j=r$6=class extends c$v{constructor(s){super(s),this.image=null,this.type="toggle",this.value=!1;}clone(){return new r$6({active:this.active,className:this.className,disabled:this.disabled,id:this.id,indicator:this.indicator,title:this.title,visible:this.visible,image:this.image,value:this.value})}};e$u([y$r()],i$j.prototype,"image",void 0),e$u([y$r()],i$j.prototype,"value",void 0),i$j=r$6=e$u([i$X("esri.support.Action.ActionToggle")],i$j);var a$k=i$j;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var O$1;const S$4=L$5.ofType({key:"type",defaultKeyValue:"button",base:c$v,typeMap:{button:c$u,toggle:a$k}}),T$2={base:p$M,key:"type",typeMap:{media:I,custom:c$E,text:c$x,attachments:p$L,fields:c$B}},b$6="esri.PopupTemplate",R$2=n$T.getLogger(b$6),L$3=["attachments","fields","media","text"];let J=O$1=class extends a$B{constructor(){super(...arguments),this.actions=null,this.content="",this.expressionInfos=null,this.fieldInfos=null,this.layerOptions=null,this.lastEditInfoEnabled=!0,this.outFields=null,this.overwriteActions=!1,this.returnGeometry=!1,this.title="",this.relatedRecordsInfo=null;}castContent(t){return Array.isArray(t)?t.map((t=>k$a(T$2,t))):"string"==typeof t||"function"==typeof t||t instanceof HTMLElement||U$2(t)?t:(R$2.error("content error","unsupported content value",{value:t}),null)}readContent(t,e){const{popupElements:o}=e;return Array.isArray(o)&&o.length>0?this._readPopupInfoElements(e):this._readPopupInfo(e)}writeContent(t,e,o,s){"string"!=typeof t?Array.isArray(t)&&(e.popupElements=t.filter((t=>-1!==L$3.indexOf(t.type))).map((t=>t&&t.toJSON(s))),e.popupElements.forEach((t=>{"attachments"===t.type?this._writeAttachmentContent(e):"media"===t.type?this._writeMediaContent(t,e):"text"===t.type&&this._writeTextContent(t,e);}))):e.description=t;}writeFieldInfos(t,e,o,s){const{content:r}=this,i=Array.isArray(r)?r:null;if(t){const o=i?i.filter((t=>"fields"===t.type)):[],r=o.length&&o.every((t=>{var e;return null==(e=t.fieldInfos)?void 0:e.length}));e.fieldInfos=t.filter(Boolean).map((t=>{const e=t.toJSON(s);return r&&(e.visible=!1),e}));}if(i)for(const n of i)"fields"===n.type&&this._writeFieldsContent(n,e);}writeLayerOptions(t,e,o,s){e[o]=!t||null===t.showNoDataRecords&&null===t.returnTopmostRaster?null:t.toJSON(s);}writeTitle(t,e){e.title=t||"";}clone(){const{actions:t}=this,o=t?y$v(t.toArray()):[];return new O$1({actions:o,content:Array.isArray(this.content)?y$v(this.content):this.content,expressionInfos:Array.isArray(this.expressionInfos)?y$v(this.expressionInfos):null,fieldInfos:Array.isArray(this.fieldInfos)?y$v(this.fieldInfos):null,layerOptions:this.layerOptions?y$v(this.layerOptions):null,lastEditInfoEnabled:this.lastEditInfoEnabled,outFields:Array.isArray(this.outFields)?y$v(this.outFields):null,overwriteActions:this.overwriteActions,returnGeometry:this.returnGeometry,title:this.title,relatedRecordsInfo:this.relatedRecordsInfo?y$v(this.relatedRecordsInfo):null})}async collectRequiredFields(t,e){await this._collectExpressionInfoFields(t,e,this.expressionInfos),g$5(t,e,[...this.outFields||[],...this._getActionsFields(this.actions),...this._getTitleFields(this.title),...this._getContentFields(this.content)]);}async getRequiredFields(t){const e=new Set;return await this.collectRequiredFields(e,t),[...e].sort()}_writeFieldsContent(t,o){if(!Array.isArray(t.fieldInfos)||!t.fieldInfos.length)return;const s=y$v(t.fieldInfos);Array.isArray(o.fieldInfos)?s.forEach((t=>{const e=o.fieldInfos.find((e=>e.fieldName.toLowerCase()===t.fieldName.toLowerCase()));e?e.visible=!0:o.fieldInfos.push(t);})):o.fieldInfos=s;}_writeAttachmentContent(t){t.showAttachments||(t.showAttachments=!0);}_writeTextContent(t,e){!e.description&&t.text&&(e.description=t.text);}_writeMediaContent(t,o){if(!Array.isArray(t.mediaInfos)||!t.mediaInfos.length)return;const s=y$v(t.mediaInfos);Array.isArray(o.mediaInfos)?o.mediaInfos=[...o.mediaInfos,...s]:o.mediaInfos=s;}_readPopupInfoElements({description:t,mediaInfos:e,popupElements:o}){const s={description:!1,mediaInfos:!1};return o.map((o=>"media"===o.type?(o.mediaInfos||!e||s.mediaInfos||(o.mediaInfos=e,s.mediaInfos=!0),I.fromJSON(o)):"text"===o.type?(o.text||!t||s.description||(o.text=t,s.description=!0),c$x.fromJSON(o)):"attachments"===o.type?p$L.fromJSON(o):"fields"===o.type?c$B.fromJSON(o):void 0)).filter(Boolean)}_readPopupInfo({description:t,mediaInfos:e,showAttachments:o}){const s=[];return t?s.push(new c$x({text:t})):s.push(new c$B),Array.isArray(e)&&e.length&&s.push(I.fromJSON({mediaInfos:e})),o&&s.push(p$L.fromJSON({displayType:"list"})),s.length?s:t}_getContentElementFields(t){if(!t||"attachments"===t.type)return [];if("custom"===t.type)return t.outFields||[];if("fields"===t.type)return this._getFieldInfoFields(t.fieldInfos||this.fieldInfos);if("media"===t.type){return (t.mediaInfos||[]).reduce(((t,e)=>[...t,...this._getMediaInfoFields(e)]),[])}return "text"===t.type?this._extractFieldNames(t.text):void 0}_getMediaInfoFields(t){const{caption:e,title:o,value:s}=t,r=s||{},{fields:i=[],normalizeField:n,tooltipField:p,sourceURL:l,linkURL:a}=r,d=[...this._extractFieldNames(o),...this._extractFieldNames(e),...this._extractFieldNames(l),...this._extractFieldNames(a),...i];return n&&d.push(n),p&&d.push(p),d}_getContentFields(t){return "string"==typeof t?this._extractFieldNames(t):Array.isArray(t)?t.reduce(((t,e)=>[...t,...this._getContentElementFields(e)]),[]):[]}async _collectExpressionInfoFields(t,e,o){o&&await Promise.all(o.map((o=>w$4(t,e,o.expression))));}_getFieldInfoFields(t){return t?t.filter((t=>void 0===t.visible||!!t.visible)).map((t=>t.fieldName)).filter((t=>-1===t.indexOf("relationships/")&&-1===t.indexOf("expression/"))):[]}_getActionsFields(t){return t?t.toArray().reduce(((t,e)=>[...t,...this._getActionFields(e)]),[]):[]}_getActionFields(t){const{className:e,title:o,type:s}=t,r="button"===s||"toggle"===s?t.image:"";return [...this._extractFieldNames(o),...this._extractFieldNames(e),...this._extractFieldNames(r)]}_getTitleFields(t){return "string"==typeof t?this._extractFieldNames(t):[]}_extractFieldNames(t){if(!t||"string"!=typeof t)return [];const e=/{[^}]*}/g,o=t.match(e);if(!o)return [];const s=/\{(\w+):.+\}/,r=o.filter((t=>!(0===t.indexOf("{relationships/")||0===t.indexOf("{expression/")))).map((t=>t.replace(s,"{$1}")));return r?r.map((t=>t.slice(1,-1))):[]}};e$u([y$r({type:S$4})],J.prototype,"actions",void 0),e$u([y$r()],J.prototype,"content",void 0),e$u([c$_("content")],J.prototype,"castContent",null),e$u([e$C("content",["description","fieldInfos","popupElements","mediaInfos","showAttachments"])],J.prototype,"readContent",null),e$u([o$v("content",{popupElements:{type:L$5.ofType(r$9)},showAttachments:{type:Boolean},mediaInfos:{type:L$5.ofType(m$i)},description:{type:String}})],J.prototype,"writeContent",null),e$u([y$r({type:[i$n],json:{write:!0}})],J.prototype,"expressionInfos",void 0),e$u([y$r({type:[c$C]})],J.prototype,"fieldInfos",void 0),e$u([o$v("fieldInfos")],J.prototype,"writeFieldInfos",null),e$u([y$r({type:a$l})],J.prototype,"layerOptions",void 0),e$u([o$v("layerOptions")],J.prototype,"writeLayerOptions",null),e$u([y$r({type:Boolean,json:{read:{source:"showLastEditInfo"},write:{target:"showLastEditInfo"},default:!0}})],J.prototype,"lastEditInfoEnabled",void 0),e$u([y$r()],J.prototype,"outFields",void 0),e$u([y$r()],J.prototype,"overwriteActions",void 0),e$u([y$r()],J.prototype,"returnGeometry",void 0),e$u([y$r({json:{type:String}})],J.prototype,"title",void 0),e$u([o$v("title")],J.prototype,"writeTitle",null),e$u([y$r({type:c$w,json:{write:!0}})],J.prototype,"relatedRecordsInfo",void 0),J=O$1=e$u([i$X(b$6)],J);var M$1=J;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const p$u=new t$I({esriSMS:"simple-marker",esriPMS:"picture-marker",esriSLS:"simple-line",esriSFS:"simple-fill",esriPFS:"picture-fill",esriTS:"text",esriSHD:"shield-label-symbol",PointSymbol3D:"point-3d",LineSymbol3D:"line-3d",PolygonSymbol3D:"polygon-3d",WebStyleSymbol:"web-style",MeshSymbol3D:"mesh-3d",LabelSymbol3D:"label-3d",CIMSymbolReference:"cim"});let c$t=0,m$h=class extends a$B{constructor(r){super(r),this.id="sym"+c$t++,this.type=null;}set color(r){this._set("color",r);}readColor(r){return r&&null!=r[0]?[r[0],r[1],r[2],r[3]/255]:r}async collectRequiredFields(r,o){}hash(){return JSON.stringify(this.toJSON())}clone(){}};e$u([y$r({type:p$u.apiValues,readOnly:!0,json:{read:!1,write:{ignoreOrigin:!0,writer:p$u.write}}})],m$h.prototype,"type",void 0),e$u([y$r({type:o$j,value:new o$j([0,0,0,1]),json:{write:{allowNull:!0}}})],m$h.prototype,"color",null),e$u([e$C("color")],m$h.prototype,"readColor",null),m$h=e$u([i$X("esri.symbols.Symbol")],m$h);var n$o=m$h;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var n$n;let l$q=n$n=class extends n$o{constructor(r){super(r),this.data=null,this.type="cim";}readData(r,o){return o}writeData(r,o){if(r)for(const t in r)o[t]=r[t];}async collectRequiredFields(r,o){if("CIMSymbolReference"===this.data.type){const t=this.data.primitiveOverrides;if(t){const e=t.map((t=>{const e=t.valueExpressionInfo;return w$4(r,o,e.expression)}));await Promise.all(e);}}}clone(){return new n$n({data:y$v(this.data)})}hash(){return c$12(JSON.stringify(this.data)).toString()}};e$u([y$r({json:{write:!1}})],l$q.prototype,"color",void 0),e$u([y$r({json:{write:!0}})],l$q.prototype,"data",void 0),e$u([e$C("data",["symbol"])],l$q.prototype,"readData",null),e$u([o$v("data")],l$q.prototype,"writeData",null),e$u([r$v({CIMSymbolReference:"cim"},{readOnly:!0})],l$q.prototype,"type",void 0),l$q=n$n=e$u([i$X("esri.symbols.CIMSymbol")],l$q);var d$j=l$q;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let p$t=class extends a$B{constructor(r){super(r),this.enabled=!0,this.type=null;}writeEnabled(r,e,o){r||(e[o]=r);}};e$u([y$r({type:Boolean,json:{read:{source:"enable"},write:{target:"enable"}}})],p$t.prototype,"enabled",void 0),e$u([o$v("enabled")],p$t.prototype,"writeEnabled",null),e$u([y$r({type:["icon","object","line","path","fill","water","extrude","text"],readOnly:!0})],p$t.prototype,"type",void 0),p$t=e$u([i$X("esri.symbols.Symbol3DLayer")],p$t);var c$s=p$t;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const n$m=/^-?(\d+(\.\d+)?)\s*((px)|(pt))?$/i,t$c="screenUtils.toPt: input not recognized!",r$5=96;function u$h(n){return n?n/72*r$5:0}function e$a(n){return n?72*n/r$5:0}function o$6(r){if("string"==typeof r){if(n$m.test(r)){const t=r.match(n$m),u=Number(t[1]),o=t[3]&&t[3].toLowerCase(),c="-"===r.charAt(0),i="px"===o?e$a(u):u;return c?-i:i}return console.warn(t$c),null}return r}function c$r(n=0,t=0){return {x:n,y:t}}function p$s(n){return n}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$l(n){const r=a$P(100*(1-n));return Math.max(0,Math.min(r,100))}function r$4(t){const n=1-t/100;return Math.max(0,Math.min(n,1))}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function s$9(r,t){const n=null!=t.transparency?r$4(t.transparency):1,s=t.color;return s&&Array.isArray(s)?new o$j([s[0]||0,s[1]||0,s[2]||0,n]):null}function a$j(r,e){e.color=r.toJSON().slice(0,3);const t=n$l(r.a);0!==t&&(e.transparency=t);}const c$q={type:o$j,json:{type:[N$5],default:null,read:{source:["color","transparency"],reader:s$9},write:{target:{color:{type:[N$5]},transparency:{type:N$5}},writer:a$j}}},p$r={type:Number,cast:o$6,json:{write:!0}},l$p={type:[Number],cast:r=>null!=r?r:Array.isArray(r)?r.map(o$6):null,json:{read:!1,write:!1}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let l$o=class extends a$B{constructor(o){super(o),this.color=new o$j([0,0,0,1]),this.extensionLength=0,this.size=e$a(1);}clone(){}cloneProperties(){return {color:y$v(this.color),size:this.size,extensionLength:this.extensionLength}}};e$u([y$r({type:["solid","sketch"],readOnly:!0,json:{read:!0,write:{ignoreOrigin:!0}}})],l$o.prototype,"type",void 0),e$u([y$r(c$q)],l$o.prototype,"color",void 0),e$u([y$r({...p$r,json:{write:{overridePolicy:o=>({enabled:!!o})}}})],l$o.prototype,"extensionLength",void 0),e$u([y$r(p$r)],l$o.prototype,"size",void 0),l$o=e$u([i$X("esri.symbols.edges.Edges3D")],l$o);var m$g=l$o;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var t$b;let p$q=t$b=class extends m$g{constructor(r){super(r),this.type="sketch";}clone(){return new t$b(this.cloneProperties())}};e$u([r$v({sketch:"sketch"},{readOnly:!0})],p$q.prototype,"type",void 0),p$q=t$b=e$u([i$X("esri.symbols.edges.SketchEdges3D")],p$q);var c$p=p$q;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var t$a;let p$p=t$a=class extends m$g{constructor(r){super(r),this.type="solid";}clone(){return new t$a(this.cloneProperties())}};e$u([r$v({solid:"solid"},{readOnly:!0})],p$p.prototype,"type",void 0),p$p=t$a=e$u([i$X("esri.symbols.support.SolidEdges3D")],p$p);var c$o=p$p;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const t$9={types:{key:"type",base:m$g,typeMap:{solid:c$o,sketch:c$p}},json:{write:!0}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var c$n;let i$i=c$n=class extends a$B{constructor(){super(...arguments),this.color=null;}clone(){return new c$n({color:r$A(this.color)?this.color.clone():null})}};e$u([y$r(c$q)],i$i.prototype,"color",void 0),i$i=c$n=e$u([i$X("esri.symbols.support.Symbol3DMaterial")],i$i);var l$n=i$i;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var l$m;let m$f=l$m=class extends c$s{constructor(e){super(e),this.type="extrude",this.size=1,this.material=null,this.castShadows=!0,this.edges=null;}clone(){return new l$m({edges:this.edges&&this.edges.clone(),enabled:this.enabled,material:r$A(this.material)?this.material.clone():null,castShadows:this.castShadows,size:this.size})}};e$u([r$v({Extrude:"extrude"},{readOnly:!0})],m$f.prototype,"type",void 0),e$u([y$r({type:Number,json:{write:{enabled:!0,isRequired:!0}},nonNullable:!0})],m$f.prototype,"size",void 0),e$u([y$r({type:l$n,json:{write:!0}})],m$f.prototype,"material",void 0),e$u([y$r({type:Boolean,nonNullable:!0,json:{write:!0,default:!0}})],m$f.prototype,"castShadows",void 0),e$u([y$r(t$9)],m$f.prototype,"edges",void 0),m$f=l$m=e$u([i$X("esri.symbols.ExtrudeSymbol3DLayer")],m$f);var c$m=m$f;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let i$h=class extends n$o{constructor(r){super(r),this.type="simple-line",this.width=.75;}hash(){return `${this.type}.${this.width}`}};e$u([r$v({esriSLS:"simple-line"},{readOnly:!0})],i$h.prototype,"type",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],i$h.prototype,"width",void 0),i$h=e$u([i$X("esri.symbols.LineSymbol")],i$h);var c$l=i$h;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var a$i;let n$k=a$i=class extends a$B{constructor(r){super(r),this.placement="begin-end",this.type="line-marker",this.style="arrow";}writeStyle(r,o,e,t){"web-map"===(null==t?void 0:t.origin)?o[e]="arrow":o[e]=r;}set color(r){this._set("color",r);}readColor(r){return r&&null!=r[0]?[r[0],r[1],r[2],r[3]/255]:r}writeColor(r,o,e,t){"web-map"===(null==t?void 0:t.origin)||(o[e]=r);}clone(){return new a$i({color:y$v(this.color),placement:this.placement,style:this.style})}hash(){var r;return `${this.placement}.${null==(r=this.color)?void 0:r.hash()}.${this.style}`}};e$u([y$r({type:["begin","end","begin-end"],json:{write:!0}})],n$k.prototype,"placement",void 0),e$u([r$v({"line-marker":"line-marker"},{readOnly:!0}),y$r({json:{origins:{"web-map":{write:!1}}}})],n$k.prototype,"type",void 0),e$u([y$r({type:["arrow","circle","square","diamond","cross","x"]})],n$k.prototype,"style",void 0),e$u([o$v("style")],n$k.prototype,"writeStyle",null),e$u([y$r({type:o$j,value:null,json:{write:{allowNull:!0}}})],n$k.prototype,"color",null),e$u([e$C("color")],n$k.prototype,"readColor",null),e$u([o$v("color")],n$k.prototype,"writeColor",null),n$k=a$i=e$u([i$X("esri.symbols.LineSymbolMarker")],n$k);var m$e=n$k;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$o;const h$g=new t$I({esriSLSSolid:"solid",esriSLSDash:"dash",esriSLSDot:"dot",esriSLSDashDot:"dash-dot",esriSLSDashDotDot:"long-dash-dot-dot",esriSLSNull:"none",esriSLSInsideFrame:"inside-frame",esriSLSShortDash:"short-dash",esriSLSShortDot:"short-dot",esriSLSShortDashDot:"short-dash-dot",esriSLSShortDashDotDot:"short-dash-dot-dot",esriSLSLongDash:"long-dash",esriSLSLongDashDot:"long-dash-dot"});let m$d=p$o=class extends c$l{constructor(...r){super(...r),this.type="simple-line",this.style="solid",this.cap="round",this.join="round",this.marker=null,this.miterLimit=2;}normalizeCtorArgs(r,o,e,t,s,i){if(r&&"string"!=typeof r)return r;const n={};return null!=r&&(n.style=r),null!=o&&(n.color=o),null!=e&&(n.width=o$6(e)),null!=t&&(n.cap=t),null!=s&&(n.join=s),null!=i&&(n.miterLimit=o$6(i)),n}clone(){var r;return new p$o({color:y$v(this.color),style:this.style,width:this.width,cap:this.cap,join:this.join,miterLimit:this.miterLimit,marker:null==(r=this.marker)?void 0:r.clone()})}hash(){var r,o;return `${super.hash()}.${null==(r=this.color)?void 0:r.hash()}.${this.style}.${this.cap}.${this.join}.${this.miterLimit}.${null==(o=this.marker)?void 0:o.hash()}`}};e$u([r$v({esriSLS:"simple-line"},{readOnly:!0})],m$d.prototype,"type",void 0),e$u([y$r({type:h$g.apiValues,json:{read:h$g.read,write:h$g.write}})],m$d.prototype,"style",void 0),e$u([y$r({type:["butt","round","square"],json:{write:{overridePolicy:(r,o,e)=>({enabled:"round"!==r&&(null==e||null==e.origin)})}}})],m$d.prototype,"cap",void 0),e$u([y$r({type:["miter","round","bevel"],json:{write:{overridePolicy:(r,o,e)=>({enabled:"round"!==r&&(null==e||null==e.origin)})}}})],m$d.prototype,"join",void 0),e$u([y$r({types:{key:"type",base:null,defaultKeyValue:"line-marker",typeMap:{"line-marker":m$e}},json:{write:!0,origins:{"web-scene":{write:!1}}}})],m$d.prototype,"marker",void 0),e$u([y$r({type:Number,json:{read:!1,write:!1}})],m$d.prototype,"miterLimit",void 0),m$d=p$o=e$u([i$X("esri.symbols.SimpleLineSymbol")],m$d);var d$i=m$d;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let p$n=class extends n$o{constructor(e){super(e),this.outline=null,this.type=null;}hash(){return `${this.type}.${this.outline&&this.outline.hash()}`}};e$u([y$r({types:{key:"type",base:null,defaultKeyValue:"simple-line",typeMap:{"simple-line":d$i}},json:{default:null,write:!0}})],p$n.prototype,"outline",void 0),e$u([y$r({type:["simple-fill","picture-fill"],readOnly:!0})],p$n.prototype,"type",void 0),p$n=e$u([i$X("esri.symbols.FillSymbol")],p$n);var l$l=p$n;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let t$8=class extends a$B{constructor(r){super(r);}clone(){}};e$u([y$r({type:["style"],readOnly:!0,json:{read:!0,write:{ignoreOrigin:!0}}})],t$8.prototype,"type",void 0),t$8=e$u([i$X("esri.symbols.patterns.Pattern3D")],t$8);var p$m=t$8;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var a$h=["backward-diagonal","cross","diagonal-cross","forward-diagonal","horizontal","none","solid","vertical"];

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$l;let i$g=p$l=class extends p$m{constructor(r){super(r),this.type="style",this.style="solid";}clone(){return new p$l({style:this.style})}};e$u([y$r({type:["style"]})],i$g.prototype,"type",void 0),e$u([y$r({type:a$h,json:{read:!0,write:!0}})],i$g.prototype,"style",void 0),i$g=p$l=e$u([i$X("esri.symbols.patterns.StylePattern3D")],i$g);var c$k=i$g;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function r$3(t,r,s){if(!t)return t;switch(t.type){case"style":{const r=new c$k;return r.read(t,s),r}}}const s$8={types:{key:"type",base:p$m,typeMap:{style:c$k}},json:{read:r$3,write:!0}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const o$5=new o$j("white");new o$j("black");const e$9=new o$j([255,255,255,0]);function t$7(n){return 0===n.r&&0===n.g&&0===n.b}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$k;let c$j=p$k=class extends l$n{clone(){return new p$k({color:r$A(this.color)?this.color.clone():null,colorMixMode:this.colorMixMode})}};e$u([r$v({multiply:"multiply",replace:"replace",tint:"tint"})],c$j.prototype,"colorMixMode",void 0),c$j=p$k=e$u([i$X("esri.symbols.support.Symbol3DFillMaterial")],c$j);var i$f=c$j;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var n$j;let u$g=n$j=class extends a$B{constructor(){super(...arguments),this.color=new o$j([0,0,0,1]),this.size=e$a(1),this.stipplePattern=null,this.stippleOffColor=null;}clone(){return new n$j({color:r$A(this.color)?this.color.clone():null,size:this.size,stipplePattern:this.stipplePattern?this.stipplePattern.slice():null,stippleOffColor:this.stippleOffColor?this.stippleOffColor.clone():null})}};e$u([y$r(c$q)],u$g.prototype,"color",void 0),e$u([y$r(p$r)],u$g.prototype,"size",void 0),e$u([y$r(l$p)],u$g.prototype,"stipplePattern",void 0),e$u([y$r({type:o$j})],u$g.prototype,"stippleOffColor",void 0),u$g=n$j=e$u([i$X("esri.symbols.support.Symbol3DOutline")],u$g);var a$g=u$g;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var d$h;let y$8=d$h=class extends c$s{constructor(t){super(t),this.type="fill",this.material=null,this.pattern=null,this.castShadows=!0,this.outline=null,this.edges=null;}clone(){return new d$h({edges:r$A(this.edges)?this.edges.clone():null,enabled:this.enabled,material:r$A(this.material)?this.material.clone():null,pattern:r$A(this.pattern)?this.pattern.clone():null,castShadows:this.castShadows,outline:r$A(this.outline)?this.outline.clone():null})}static fromSimpleFillSymbol(t){return new d$h({material:{color:(t.color||e$9).clone()},pattern:t.style&&"solid"!==t.style?new c$k({style:t.style}):null,outline:t.outline?new a$g({size:t.outline.width||0,color:(t.outline.color||o$5).clone()}):null})}};e$u([r$v({Fill:"fill"},{readOnly:!0})],y$8.prototype,"type",void 0),e$u([y$r({type:i$f,json:{write:!0}})],y$8.prototype,"material",void 0),e$u([y$r(s$8)],y$8.prototype,"pattern",void 0),e$u([y$r({type:Boolean,nonNullable:!0,json:{write:!0,default:!0}})],y$8.prototype,"castShadows",void 0),e$u([y$r({type:a$g,json:{write:!0}})],y$8.prototype,"outline",void 0),e$u([y$r(t$9)],y$8.prototype,"edges",void 0),y$8=d$h=e$u([i$X("esri.symbols.FillSymbol3DLayer")],y$8);var h$f=y$8;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$j;let l$k=p$j=class extends a$B{constructor(o){super(o),this.decoration="none",this.family="sans-serif",this.size=9,this.style="normal",this.weight="normal";}castSize(o){return o$6(o)}clone(){return new p$j({decoration:this.decoration,family:this.family,size:this.size,style:this.style,weight:this.weight})}hash(){return `${this.decoration}.${this.family}.${this.size}.${this.style}.${this.weight}`}};e$u([y$r({type:["underline","line-through","none"],json:{default:"none",write:!0}})],l$k.prototype,"decoration",void 0),e$u([y$r({type:String,json:{write:!0}})],l$k.prototype,"family",void 0),e$u([y$r({type:Number,json:{write:{overridePolicy:(o,t,e)=>({enabled:!e||!e.textSymbol3D})}}})],l$k.prototype,"size",void 0),e$u([c$_("size")],l$k.prototype,"castSize",null),e$u([y$r({type:["normal","italic","oblique"],json:{default:"normal",write:!0}})],l$k.prototype,"style",void 0),e$u([y$r({type:["normal","bold","bolder","lighter"],json:{default:"normal",write:!0}})],l$k.prototype,"weight",void 0),l$k=p$j=e$u([i$X("esri.symbols.Font")],l$k);var n$i=l$k;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var l$j;const d$g=o$A()({circle:"circle",square:"square",cross:"cross",x:"x",kite:"kite",triangle:"triangle"});let j$8=l$j=class extends a$B{constructor(r){super(r);}readHref(r,e,o){return r?c$U(r,o):e.dataURI}writeHref(r,e,o,t){r&&(G$6(r)?e.dataURI=r:(e.href=i$W(r,t),Q$2(e.href)&&(e.href=z$6(e.href))));}clone(){return new l$j({href:this.href,primitive:this.primitive})}};e$u([y$r({type:String,json:{write:!0,read:{source:["href","dataURI"]}}})],j$8.prototype,"href",void 0),e$u([e$C("href")],j$8.prototype,"readHref",null),e$u([o$v("href",{href:{type:String},dataURI:{type:String}})],j$8.prototype,"writeHref",null),e$u([r$v(d$g)],j$8.prototype,"primitive",void 0),j$8=l$j=e$u([i$X("esri.symbols.support.IconSymbol3DLayerResource")],j$8);var y$7=j$8;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var e$8;let p$i=e$8=class extends u$D{constructor(){super(...arguments),this.x=0,this.y=0;}clone(){return new e$8({x:this.x,y:this.y})}};e$u([y$r({type:Number})],p$i.prototype,"x",void 0),e$u([y$r({type:Number})],p$i.prototype,"y",void 0),p$i=e$8=e$u([i$X("esri.symbols.support.Symbol3DAnchorPosition2D")],p$i);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var d$f;const f$9=n$T.getLogger("esri.symbols.IconSymbol3DLayer");let b$5=d$f=class extends c$s{constructor(o){super(o),this.material=null,this.resource=null,this.type="icon",this.size=12,this.anchor="center",this.anchorPosition=void 0,this.outline=void 0;}clone(){return new d$f({anchor:this.anchor,anchorPosition:this.anchorPosition&&this.anchorPosition.clone(),enabled:this.enabled,material:r$A(this.material)?this.material.clone():null,outline:r$A(this.outline)?this.outline.clone():null,resource:this.resource&&this.resource.clone(),size:this.size})}static fromSimpleMarkerSymbol(o){const t=o.color||o$5,r=j$7(o),e=o.outline&&o.outline.width>0?{size:o.outline.width,color:(o.outline.color||o$5).clone()}:null;return new d$f({size:o.size,resource:{primitive:w$3(o.style)},material:{color:t},outline:e,anchor:r?"relative":void 0,anchorPosition:r})}static fromPictureMarkerSymbol(o){const t=!o.color||t$7(o.color)?o$5:o.color,r=j$7(o);return new d$f({size:o.width<=o.height?o.height:o.width,resource:{href:o.url},material:{color:t.clone()},anchor:r?"relative":void 0,anchorPosition:r})}static fromCIMSymbol(o){return new d$f({resource:{href:X$2({mediaType:"application/json",data:JSON.stringify(o.data)})}})}};function j$7(o){const t="width"in o?o.width:o.size,r="height"in o?o.height:o.size,e=v$4(o.xoffset),i=v$4(o.yoffset);return (e||i)&&t&&r?{x:-e/t,y:i/r}:null}function v$4(o){return isFinite(o)?o:0}e$u([y$r({type:l$n,json:{write:!0}})],b$5.prototype,"material",void 0),e$u([y$r({type:y$7,json:{write:!0}})],b$5.prototype,"resource",void 0),e$u([r$v({Icon:"icon"},{readOnly:!0})],b$5.prototype,"type",void 0),e$u([y$r(p$r)],b$5.prototype,"size",void 0),e$u([r$v({center:"center",left:"left",right:"right",top:"top",bottom:"bottom",topLeft:"top-left",topRight:"top-right",bottomLeft:"bottom-left",bottomRight:"bottom-right",relative:"relative"}),y$r({json:{default:"center"}})],b$5.prototype,"anchor",void 0),e$u([y$r({type:p$i,json:{type:[Number],read:{reader:o=>new p$i({x:o[0],y:o[1]})},write:{writer:(o,t)=>{t.anchorPosition=[o.x,o.y];},overridePolicy(){return {enabled:"relative"===this.anchor}}}}})],b$5.prototype,"anchorPosition",void 0),e$u([y$r({type:a$g,json:{write:!0}})],b$5.prototype,"outline",void 0),b$5=d$f=e$u([i$X("esri.symbols.IconSymbol3DLayer")],b$5);const g$4={circle:"circle",cross:"cross",diamond:"kite",square:"square",x:"x",triangle:"triangle",path:null};function w$3(o){const t=g$4[o];return t||(f$9.warn(`${o} cannot be mapped to Icon symbol. Fallback to "circle"`),"circle")}var S$3=b$5;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var u$f;let j$6=u$f=class extends c$s{constructor(t){super(t),this.material=null,this.type="line",this.join="miter",this.cap="butt",this.size=e$a(1),this.stipplePattern=null,this.stippleOffColor=null;}clone(){return new u$f({enabled:this.enabled,material:r$A(this.material)?this.material.clone():null,size:this.size,join:this.join,cap:this.cap,stipplePattern:this.stipplePattern?this.stipplePattern.slice():null,stippleOffColor:this.stippleOffColor?this.stippleOffColor.clone():null})}static fromSimpleLineSymbol(t){return new u$f({size:t.width||1,cap:t.cap||"butt",join:t.join||"miter",material:{color:(t.color||o$5).clone()}})}};e$u([y$r({type:l$n,json:{write:!0}})],j$6.prototype,"material",void 0),e$u([r$v({Line:"line"},{readOnly:!0})],j$6.prototype,"type",void 0),e$u([y$r({type:["miter","bevel","round"],json:{write:!0,default:"miter"}})],j$6.prototype,"join",void 0),e$u([y$r({type:["butt","square","round"],json:{write:!0,default:"butt"}})],j$6.prototype,"cap",void 0),e$u([y$r(p$r)],j$6.prototype,"size",void 0),e$u([y$r(l$p)],j$6.prototype,"stipplePattern",void 0),e$u([y$r({type:o$j})],j$6.prototype,"stippleOffColor",void 0),j$6=u$f=e$u([i$X("esri.symbols.LineSymbol3DLayer")],j$6);var f$8=j$6;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var m$c;const n$h=o$A()({sphere:"sphere",cylinder:"cylinder",cube:"cube",cone:"cone",diamond:"diamond",tetrahedron:"tetrahedron",invertedCone:"inverted-cone"});let a$f=m$c=class extends a$B{clone(){return new m$c({href:this.href,primitive:this.primitive})}};e$u([y$r({type:String,json:{read:m$B,write:p$10}})],a$f.prototype,"href",void 0),e$u([r$v(n$h)],a$f.prototype,"primitive",void 0),a$f=m$c=e$u([i$X("esri.symbols.support.ObjectSymbol3DLayerResource")],a$f);var d$e=a$f;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var e$7;let p$h=e$7=class extends u$D{constructor(){super(...arguments),this.x=0,this.y=0,this.z=0;}clone(){return new e$7({x:this.x,y:this.y,z:this.z})}};e$u([y$r({type:Number})],p$h.prototype,"x",void 0),e$u([y$r({type:Number})],p$h.prototype,"y",void 0),e$u([y$r({type:Number})],p$h.prototype,"z",void 0),p$h=e$7=e$u([i$X("esri.symbols.support.Symbol3DAnchorPosition3D")],p$h);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var n$g;let c$i=n$g=class extends c$s{constructor(o){super(o),this.material=null,this.castShadows=!0,this.resource=null,this.type="object",this.width=void 0,this.height=void 0,this.depth=void 0,this.anchor=void 0,this.anchorPosition=void 0,this.heading=void 0,this.tilt=void 0,this.roll=void 0;}clone(){return new n$g({heading:this.heading,tilt:this.tilt,roll:this.roll,anchor:this.anchor,anchorPosition:this.anchorPosition&&this.anchorPosition.clone(),depth:this.depth,enabled:this.enabled,height:this.height,material:r$A(this.material)?this.material.clone():null,castShadows:this.castShadows,resource:this.resource&&this.resource.clone(),width:this.width})}get isPrimitive(){return !this.resource||"string"!=typeof this.resource.href}};e$u([y$r({type:l$n,json:{write:!0}})],c$i.prototype,"material",void 0),e$u([y$r({type:Boolean,nonNullable:!0,json:{write:!0,default:!0}})],c$i.prototype,"castShadows",void 0),e$u([y$r({type:d$e,json:{write:!0}})],c$i.prototype,"resource",void 0),e$u([r$v({Object:"object"},{readOnly:!0})],c$i.prototype,"type",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$i.prototype,"width",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$i.prototype,"height",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$i.prototype,"depth",void 0),e$u([r$v({center:"center",top:"top",bottom:"bottom",origin:"origin",relative:"relative"}),y$r({json:{default:"origin"}})],c$i.prototype,"anchor",void 0),e$u([y$r({type:p$h,json:{type:[Number],read:{reader:o=>new p$h({x:o[0],y:o[1],z:o[2]})},write:{writer:(o,t)=>{t.anchorPosition=[o.x,o.y,o.z];},overridePolicy(){return {enabled:"relative"===this.anchor}}}}})],c$i.prototype,"anchorPosition",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$i.prototype,"heading",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$i.prototype,"tilt",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$i.prototype,"roll",void 0),e$u([y$r({readOnly:!0})],c$i.prototype,"isPrimitive",null),c$i=n$g=e$u([i$X("esri.symbols.ObjectSymbol3DLayer")],c$i);var l$i=c$i;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var a$e;let l$h=a$e=class extends c$s{constructor(t){super(t),this.material=null,this.castShadows=!0,this.type="path",this.profile="circle",this.join="miter",this.cap="butt",this.width=void 0,this.height=void 0,this.anchor="center",this.profileRotation="all";}get size(){return this.width&&this.height?this.width===this.height?this.width:void 0:this.width?this.width:this.height?this.height:void 0}set size(t){this.width=t,this.height=t;}readSize(t,e){return e.height||e.width?t:e.size}clone(){return new a$e({enabled:this.enabled,material:r$A(this.material)?this.material.clone():null,castShadows:this.castShadows,size:this.size,profile:this.profile,join:this.join,cap:this.cap,width:this.width,height:this.height,profileRotation:this.profileRotation,anchor:this.anchor})}};e$u([y$r({type:l$n,json:{write:!0}})],l$h.prototype,"material",void 0),e$u([y$r({type:Boolean,nonNullable:!0,json:{write:!0,default:!0}})],l$h.prototype,"castShadows",void 0),e$u([r$v({Path:"path"},{readOnly:!0})],l$h.prototype,"type",void 0),e$u([y$r({type:Number})],l$h.prototype,"size",null),e$u([e$C("size")],l$h.prototype,"readSize",null),e$u([y$r({type:["circle","quad"],json:{write:!0,default:"circle"}})],l$h.prototype,"profile",void 0),e$u([y$r({type:["miter","bevel","round"],json:{write:!0,default:"miter"}})],l$h.prototype,"join",void 0),e$u([y$r({type:["none","butt","square","round"],json:{write:!0,default:"butt"}})],l$h.prototype,"cap",void 0),e$u([y$r({type:Number,json:{write:{enabled:!0,target:{width:{type:Number},size:{type:Number}}}}})],l$h.prototype,"width",void 0),e$u([y$r({type:Number,json:{write:!0}})],l$h.prototype,"height",void 0),e$u([y$r({type:["center","bottom","top"],json:{write:!0,default:"center"}})],l$h.prototype,"anchor",void 0),e$u([y$r({type:["heading","all"],json:{write:!0,default:"all"}})],l$h.prototype,"profileRotation",void 0),l$h=a$e=e$u([i$X("esri.symbols.PathSymbol3DLayer")],l$h);var d$d=l$h;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var m$b;let l$g=m$b=class extends a$B{constructor(){super(...arguments),this.color=new o$j([0,0,0,1]),this.size=0;}clone(){return new m$b({color:y$v(this.color),size:this.size})}};e$u([y$r(c$q)],l$g.prototype,"color",void 0),e$u([y$r(p$r)],l$g.prototype,"size",void 0),l$g=m$b=e$u([i$X("esri.symbols.support.Symbol3DHalo")],l$g);var a$d=l$g;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var c$h;let h$e=c$h=class extends c$s{constructor(t){super(t),this._userSize=void 0,this.halo=null,this.material=null,this.text=void 0,this.type="text";}get font(){return this._get("font")||null}set font(t){t&&this._userSize&&(t.size=this._userSize),this._set("font",t);}writeFont(t,o,e,r){const s={...r,textSymbol3D:!0};o.font=t.write({},s),delete o.font.size;}get size(){return null!=this._userSize?this._userSize:this.font&&null!=this.font.size?this.font.size:9}set size(t){this._userSize=t,this.font&&(this.font.size=this._userSize),this.notifyChange("size");}clone(){return new c$h({enabled:this.enabled,font:this.font&&y$v(this.font),halo:this.halo&&y$v(this.halo),material:r$A(this.material)?this.material.clone():null,size:this.size,text:this.text})}static fromTextSymbol(t){const o=f$7(t.haloColor,t.haloSize),e=t.font?t.font.clone():new n$i;return new c$h({size:e.size,font:e,halo:o,material:t.color?{color:t.color.clone()}:null,text:t.text})}};function f$7(t,e){return t&&e>0?{color:y$v(t),size:e}:null}e$u([y$r({type:n$i,json:{write:!0}})],h$e.prototype,"font",null),e$u([o$v("font")],h$e.prototype,"writeFont",null),e$u([y$r({type:a$d,json:{write:!0}})],h$e.prototype,"halo",void 0),e$u([y$r({type:l$n,json:{write:!0}})],h$e.prototype,"material",void 0),e$u([y$r(p$r),y$r()],h$e.prototype,"size",null),e$u([y$r({type:String,json:{write:!0}})],h$e.prototype,"text",void 0),e$u([r$v({Text:"text"},{readOnly:!0})],h$e.prototype,"type",void 0),h$e=c$h=e$u([i$X("esri.symbols.TextSymbol3DLayer")],h$e);var y$6=h$e;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var l$f;let c$g=l$f=class extends c$s{constructor(e){super(e),this.color=m$a.clone(),this.type="water",this.waterbodySize="medium",this.waveDirection=null,this.waveStrength="moderate";}clone(){return new l$f({color:y$v(this.color),waterbodySize:this.waterbodySize,waveDirection:this.waveDirection,waveStrength:this.waveStrength})}};e$u([y$r({type:o$j,nonNullable:!0,json:{type:[N$5],write:(e,o,r)=>o[r]=e.toArray(1),default:()=>m$a.clone(),defaultEquals:e=>e.toCss(!0)===m$a.toCss(!0)}})],c$g.prototype,"color",void 0),e$u([r$v({Water:"water"},{readOnly:!0})],c$g.prototype,"type",void 0),e$u([y$r({type:["small","medium","large"],json:{write:!0,default:"medium"}})],c$g.prototype,"waterbodySize",void 0),e$u([y$r({type:Number,json:{write:!0,default:null}})],c$g.prototype,"waveDirection",void 0),e$u([y$r({type:["calm","rippled","slight","moderate"],json:{write:!0,default:"moderate"}})],c$g.prototype,"waveStrength",void 0),c$g=l$f=e$u([i$X("esri.symbols.WaterSymbol3DLayer")],c$g);const m$a=new o$j([0,119,190]);var n$f=c$g;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function n$e(n,t,i=L$5){return t||(t=new i),t===n||(t.removeAll(),e$6(n)?t.addMany(n):n&&t.add(n)),t}function t$6(r){return r}function e$6(r){return r&&(Array.isArray(r)||"items"in r&&Array.isArray(r.items))}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const i$e=n$T.getLogger("esri.intl");function s$7(t,e,n={}){const{format:o={}}=n;return r$z(t,(t=>u$e(t,e,o)))}function u$e(r,e,n){let o,i;const s=r.indexOf(":");if(-1===s?o=r.trim():(o=r.slice(0,s).trim(),i=r.slice(s+1).trim()),!o)return "";const u=t$N(o,e);if(null==u)return "";const m=n[i]||n[o];return m?c$f(u,m):i?a$c(u,i):f$6(u)}function c$f(t,r){switch(r.type){case"date":return L$4(t,r.intlOptions);case"number":return m$j(t,r.intlOptions);default:return i$e.warn("missing format descriptor for key {key}"),f$6(t)}}function a$c(t,r){switch(r.toLowerCase()){case"dateformat":return L$4(t);case"numberformat":return m$j(t);default:return i$e.warn(`inline format is unsupported since 4.12: ${r}`),/^(dateformat|datestring)/i.test(r)?L$4(t):/^numberformat/i.test(r)?m$j(t):f$6(t)}}function f$6(t){switch(typeof t){case"string":return t;case"number":return m$j(t);case"boolean":return ""+t;default:return t instanceof Date?L$4(t):""}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const n$d=/^([a-z]{2})(?:[-_]([A-Za-z]{2}))?$/,o$4=new Set(["ar","bs","ca","cs","da","de","el","en","es","et","fi","fr","he","hi","hr","hu","id","it","ja","ko","lt","lv","nb","nl","pl","pt-BR","pt-PT","ro","ru","sk","sl","sr","sv","th","tr","uk","vi","zh-CN","zh-HK","zh-TW"]),i$d=[],a$b=new Map;function d$c(t){if(!i$d.includes(t)){for(const e of a$b.keys())u$d(t.pattern,e)&&a$b.delete(e);i$d.unshift(t);}}async function c$e(t){const e=(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)();a$b.has(t)||a$b.set(t,l$e(t,e));const r=a$b.get(t);return await f$5.add(r),r}function h$d(t){if(!n$d.test(t))return null;const[,e,s]=n$d.exec(t),r=e+(s?"-"+s.toUpperCase():"");return o$4.has(r)?r:o$4.has(e)?e:null}async function l$e(e,s){const r=[];for(const t of i$d)if(u$d(t.pattern,e))try{return await t.fetchMessageBundle(e,s)}catch(n){r.push(n);}if(r.length)throw new s$x("intl:message-bundle-error",`Errors occurred while loading "${e}"`,{errors:r});throw new s$x("intl:no-message-bundle-loader",`No loader found for message bundle "${e}"`)}function u$d(t,e){return "string"==typeof t?e.startsWith(t):t.test(e)}(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.d)((()=>{a$b.clear();}));const f$5=new class{constructor(){this._numLoading=0;}async waitForAll(){this._dfd&&await this._dfd.promise;}add(t){return this._increase(),t.then((()=>this._decrease()),(()=>this._decrease())),this.waitForAll()}_increase(){this._numLoading++,this._dfd||(this._dfd=E$3());}_decrease(){this._numLoading=Math.max(this._numLoading-1,0),this._dfd&&0===this._numLoading&&(this._dfd.resolve(),this._dfd=null);}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
async function s$6(e,t,o,s){const a=t.exec(o);if(!a)throw new s$x("esri-intl:invalid-bundle",`Bundle id "${o}" is not compatible with the pattern "${t}"`);const c=a[1]?`${a[1]}/`:"",l=a[2],h=h$d(s),u=`${c}${l}.json`,w=h?`${c}${l}_${h}.json`:u;let f;try{f=await i$c(e(w));}catch(d){if(w===u)throw new s$x("intl:unknown-bundle",`Bundle "${o}" cannot be loaded`,{error:d});try{f=await i$c(e(u));}catch(d){throw new s$x("intl:unknown-bundle",`Bundle "${o}" cannot be loaded`,{error:d})}}return f}async function i$c(e){if(r$A(l$d.fetchBundleAsset))return l$d.fetchBundleAsset(e);const n=await U$1(e,{responseType:"text"});return JSON.parse(n.data)}class a$a{constructor({base:t="",pattern:n,location:r=new URL(window.location.href)}){let o;o="string"==typeof r?t=>new URL(t,new URL(r,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.location)).href:r instanceof URL?e=>new URL(e,r).href:r,this.pattern="string"==typeof n?new RegExp(`^${n}`):n,this.getAssetUrl=o,t=t?t.endsWith("/")?t:t+"/":"",this.matcher=new RegExp(`^${t}(?:(.*)/)?(.*)$`);}fetchMessageBundle(e,t){return s$6(this.getAssetUrl,this.matcher,e,t)}}function c$d(e){return new a$a(e)}const l$d={};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const i$b=n$T.getLogger("esri.assets");function a$9(t){if(!s$H.assetsPath)throw i$b.errorOnce("The API assets location needs to be set using config.assetsPath. More information: https://arcg.is/1OzLe50"),new s$x("assets:path-not-set","config.assetsPath is not set");return D$6(s$H.assetsPath,t)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
d$c(c$d({pattern:"esri/",location:a$9}));

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
class h$c{constructor(s){this.instance=s,this._resolver=E$3(),this._status=0,this._resolvingPromises=[],this._resolver.promise.then((()=>{this._status=1,this._cleanUp();}),(()=>{this._status=2,this._cleanUp();}));}addResolvingPromise(s){this._resolvingPromises.push(s),this._tryResolve();}isResolved(){return 1===this._status}isRejected(){return 2===this._status}isFulfilled(){return 0!==this._status}abort(){this._resolver.reject(m$x());}when(s,e){return this._resolver.promise.then(s,e)}_cleanUp(){this._allPromise=this._resolvingPromises=this._allPromise=null;}_tryResolve(){if(this.isFulfilled())return;const s=E$3(),i=[...this._resolvingPromises,m$F(s.promise)],t=this._allPromise=Promise.all(i);t.then((()=>{this.isFulfilled()||this._allPromise!==t||this._resolver.resolve(this.instance);}),(s=>{this.isFulfilled()||this._allPromise!==t||g$g(s)||this._resolver.reject(s);})),s.resolve();}}const n$c=e=>{let r=class extends e{constructor(...s){super(...s),this._promiseProps=new h$c(this),this.addResolvingPromise(Promise.resolve());}isResolved(){return this._promiseProps.isResolved()}isRejected(){return this._promiseProps.isRejected()}isFulfilled(){return this._promiseProps.isFulfilled()}when(s,e){return new Promise(((s,e)=>{this._promiseProps.when(s,e);})).then(s,e)}catch(s){return this.when(null,s)}addResolvingPromise(s){s&&!this._promiseProps.isFulfilled()&&this._promiseProps.addResolvingPromise("_promiseProps"in s?s.when():s);}};return r=e$u([i$X("esri.core.Promise")],r),r};let m$9=class extends(n$c(u$D)){};m$9=e$u([i$X("esri.core.Promise")],m$9);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const d$b="not-loaded",u$c="loading",c$c="failed",h$b="loaded",p$g=n=>{let p=class extends n{constructor(...o){super(...o),this._loadController=null,this.loadError=null,this.loadStatus="not-loaded",this._set("loadWarnings",[]),this.addResolvingPromise(new Promise((o=>{const t=this.load.bind(this);this.load=s=>{const r=new Promise(((o,t)=>{const r=P$7(s,t);this.destroyed&&t(new s$x("load:instance-destroyed",`Instance of '${this.declaredClass||this.constructor.name}' is already destroyed`,{instance:this})),this._promiseProps.when(o,t).finally((()=>{r&&r.remove();}));}));if(this.loadStatus===d$b){this._set("loadStatus",u$c);const o=this._loadController=h$u();t({signal:o.signal}),v$9(o.signal,(()=>{this._promiseProps.abort();}));}return o(),r};}))),this.when((()=>{this._set("loadStatus",h$b),this._loadController=null;}),(o=>{this._set("loadStatus",c$c),this._set("loadError",o),this._loadController=null;}));}get loaded(){return this.loadStatus===h$b}get loadWarnings(){return this._get("loadWarnings")}load(){return null}cancelLoad(){var o;return this.isFulfilled()||(this._set("loadError",new s$x("load:cancelled","Cancelled")),null==(o=this._loadController)||o.abort()),this}};return e$u([y$r({readOnly:!0})],p.prototype,"loaded",null),e$u([y$r({readOnly:!0})],p.prototype,"loadError",void 0),e$u([y$r()],p.prototype,"loadStatus",void 0),e$u([y$r({type:[t$H],readOnly:!0})],p.prototype,"loadWarnings",null),p=e$u([i$X("esri.core.Loadable")],p),p};let m$8=class extends(p$g(m$9)){};m$8=e$u([i$X("esri.core.Loadable")],m$8),function(o){function t(o){return !(!o||!o.load)}o.LoadableMixin=p$g,o.isLoadable=t;}(m$8||(m$8={}));var f$4=m$8;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var u$b;const m$7=new t$I({avgRating:"avg-rating",numRatings:"num-ratings",numComments:"num-comments",numViews:"num-views"});let l$c=u$b=class extends u$D{constructor(t){super(t),this.categories=null,this.disableExtraQuery=!1,this.extent=null,this.num=10,this.query=null,this.sortField=null,this.start=1;}get sortOrder(){return this._get("sortOrder")||"asc"}set sortOrder(t){"asc"!==t&&"desc"!==t||this._set("sortOrder",t);}clone(){return new u$b({categories:this.categories?y$v(this.categories):null,disableExtraQuery:this.disableExtraQuery,extent:this.extent?this.extent.clone():null,num:this.num,query:this.query,sortField:this.sortField,sortOrder:this.sortOrder,start:this.start})}toRequestOptions(t,r){let e,s;if(this.categories&&(e=this.categories.map((t=>Array.isArray(t)?JSON.stringify(t):t))),this.extent){const t=g$9(this.extent,k$4.WGS84);t&&(s=`${t.xmin},${t.ymin},${t.xmax},${t.ymax}`);}let o=this.query;!this.disableExtraQuery&&t.extraQuery&&(o="("+o+")"+t.extraQuery);const i={categories:e,bbox:s,q:o,num:this.num,sortField:null,sortOrder:null,start:this.start};return this.sortField&&(i.sortField=this.sortField.split(",").map((t=>m$7.toJSON(t.trim()))).join(","),i.sortOrder=this.sortOrder),{query:{...r,...i}}}};e$u([y$r()],l$c.prototype,"categories",void 0),e$u([y$r()],l$c.prototype,"disableExtraQuery",void 0),e$u([y$r({type:M$3})],l$c.prototype,"extent",void 0),e$u([y$r()],l$c.prototype,"num",void 0),e$u([y$r()],l$c.prototype,"query",void 0),e$u([y$r()],l$c.prototype,"sortField",void 0),e$u([y$r()],l$c.prototype,"sortOrder",null),e$u([y$r()],l$c.prototype,"start",void 0),l$c=u$b=e$u([i$X("esri.portal.PortalQueryParams")],l$c);var c$b=l$c;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let e$5=class extends u$D{constructor(r){super(r),this.nextQueryParams=null,this.queryParams=null,this.results=null,this.total=null;}};e$u([y$r()],e$5.prototype,"nextQueryParams",void 0),e$u([y$r()],e$5.prototype,"queryParams",void 0),e$u([y$r()],e$5.prototype,"results",void 0),e$u([y$r()],e$5.prototype,"total",void 0),e$5=e$u([i$X("esri.portal.PortalQueryResult")],e$5);var p$f=e$5;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let p$e=class extends a$B{constructor(r){super(r),this.created=null,this.id=null,this.portal=null,this.title=null,this.username=null;}get url(){const r=this.get("portal.restUrl");return r?`${r}/content/users/${this.username}/${this.id}`:null}toJSON(){throw new s$x("internal:not-yet-implemented","PortalFolder.toJSON is not yet implemented")}};e$u([y$r({type:Date})],p$e.prototype,"created",void 0),e$u([y$r()],p$e.prototype,"id",void 0),e$u([y$r()],p$e.prototype,"portal",void 0),e$u([y$r()],p$e.prototype,"title",void 0),e$u([y$r({readOnly:!0})],p$e.prototype,"url",null),e$u([y$r()],p$e.prototype,"username",void 0),p$e=e$u([i$X("esri.portal.PortalFolder")],p$e);var i$a=p$e;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let l$b=class extends a$B{constructor(t){super(t),this.access=null,this.created=null,this.description=null,this.id=null,this.isInvitationOnly=!1,this.modified=null,this.owner=null,this.portal=null,this.snippet=null,this.sortField=null,this.sortOrder=null,this.tags=null,this.title=null;}get thumbnailUrl(){const t=this.url,r=this.thumbnail;return t&&r?this.portal._normalizeUrl(`${t}/info/${r}?f=json`):null}get url(){const t=this.get("portal.restUrl");return t?t+"/community/groups/"+this.id:null}fetchCategorySchema(t){return this.portal._request(this.url+"/categorySchema",t).then((r=>{const e=r.categorySchema||[];return e.some((t=>"contentCategorySetsGroupQuery.LivingAtlas"===t.source))?this._fetchCategorySchemaSet("LivingAtlas",t):e}))}fetchMembers(t){return this.portal._request(this.url+"/users",t)}getThumbnailUrl(t){let r=this.thumbnailUrl;return r&&t&&(r+=`&w=${t}`),r}toJSON(){throw new s$x("internal:not-yet-implemented","PortalGroup.toJSON is not yet implemented")}queryItems(t,e){let o=d$E(c$b,t);return parseFloat(this.portal.currentVersion)>5?(o=o||new c$b,this.portal._queryPortal(`/content/groups/${this.id}/search`,o,"PortalItem",e)):(o=o?o.clone():new c$b,o.query="group:"+this.id+(o.query?" "+o.query:""),this.portal.queryItems(o,e))}_fetchCategorySchemaSet(t,r){return this.portal._fetchSelf(this.portal.authMode,!0,r).then((t=>{const e=t.contentCategorySetsGroupQuery;if(e){const t=new c$b;return t.disableExtraQuery=!0,t.num=1,t.query=e,this.portal.queryGroups(t,r)}throw new s$x("portal-group:fetchCategorySchema","contentCategorySetsGroupQuery value not found")})).then((e=>{if(e.total){const o=e.results[0],s=new c$b;return s.num=1,s.query=`typekeywords:"${t}"`,o.queryItems(s,r)}throw new s$x("portal-group:fetchCategorySchema","contentCategorySetsGroupQuery group not found")})).then((t=>{if(t.total){return t.results[0].fetchData("json",r).then((t=>{const r=t&&t.categorySchema;return r&&r.length?r:[]}))}return []}))}};e$u([y$r()],l$b.prototype,"access",void 0),e$u([y$r({type:Date})],l$b.prototype,"created",void 0),e$u([y$r()],l$b.prototype,"description",void 0),e$u([y$r()],l$b.prototype,"id",void 0),e$u([y$r()],l$b.prototype,"isInvitationOnly",void 0),e$u([y$r({type:Date})],l$b.prototype,"modified",void 0),e$u([y$r()],l$b.prototype,"owner",void 0),e$u([y$r()],l$b.prototype,"portal",void 0),e$u([y$r()],l$b.prototype,"snippet",void 0),e$u([y$r()],l$b.prototype,"sortField",void 0),e$u([y$r()],l$b.prototype,"sortOrder",void 0),e$u([y$r()],l$b.prototype,"tags",void 0),e$u([y$r()],l$b.prototype,"thumbnail",void 0),e$u([y$r({readOnly:!0})],l$b.prototype,"thumbnailUrl",null),e$u([y$r()],l$b.prototype,"title",void 0),e$u([y$r({readOnly:!0})],l$b.prototype,"url",null),l$b=e$u([i$X("esri.portal.PortalGroup")],l$b);var p$d=l$b;

const PortalGroup = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': p$d
});

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var n$b;let u$a=n$b=class extends a$B{constructor(...t){super(...t),this.access=null,this.created=null,this.culture=null,this.description=null,this.email=null,this.fullName=null,this.modified=null,this.orgId=null,this.portal=null,this.preferredView=null,this.privileges=null,this.region=null,this.role=null,this.roleId=null,this.sourceJSON=null,this.units=null,this.username=null,this.userType=null;}get thumbnailUrl(){const t=this.url,r=this.thumbnail;return t&&r?this.portal._normalizeUrl(`${t}/info/${r}?f=json`):null}get userContentUrl(){const t=this.get("portal.restUrl");return t?`${t}/content/users/${this.username}`:null}get url(){const t=this.get("portal.restUrl");return t?`${t}/community/users/${this.username}`:null}addItem(t){const r=t&&t.item,e=t&&t.data,o=t&&t.folder,s={method:"post"};r&&(s.query=r.createPostQuery(),null!=e&&("string"==typeof e?s.query.text=e:"object"==typeof e&&(s.query.text=JSON.stringify(e))));let l=this.userContentUrl;return o&&(l+="/"+("string"==typeof o?o:o.id)),this.portal._request(l+"/addItem",s).then((t=>(r.id=t.id,r.portal=this.portal,r.loaded?r.reload():r.load())))}deleteItem(t){let r=this.userContentUrl;return t.ownerFolder&&(r+="/"+t.ownerFolder),this.portal._request(r+`/items/${t.id}/delete`,{method:"post"}).then((()=>{t.id=null,t.portal=null;}))}deleteItems(t){const r=this.userContentUrl+"/deleteItems",e=t.map((t=>t.id));if(e.length){const o={method:"post",query:{items:e.join(",")}};return this.portal._request(r,o).then((()=>{t.forEach((t=>{t.id=null,t.portal=null;}));}))}return Promise.resolve(void 0)}fetchFolders(){const t={query:{num:1}};return this.portal._request(this.userContentUrl,t).then((t=>{let r;return r=t&&t.folders?t.folders.map((t=>{const r=i$a.fromJSON(t);return r.portal=this.portal,r})):[],r}))}fetchGroups(){return this.portal._request(this.url).then((t=>{let r;return r=t&&t.groups?t.groups.map((t=>{const r=p$d.fromJSON(t);return r.portal=this.portal,r})):[],r}))}fetchItems(t){t||(t={});let r,e=this.userContentUrl;return t.folder&&(e+="/"+t.folder.id),__webpack_require__.e(/*! import() */ "vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-025cfd").then(__webpack_require__.bind(__webpack_require__, /*! ./PortalItem-036182cd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/PortalItem-036182cd.js")).then((({default:o})=>{r=o;const s={folders:!1,num:t.num||10,start:t.start||1,sortField:t.sortField||"created",sortOrder:t.sortOrder||"asc"};return this.portal._request(e,{query:s})})).then((t=>{let e;return t&&t.items?(e=t.items.map((t=>{const e=r.fromJSON(t);return e.portal=this.portal,e})),Promise.all(e.map((t=>t.load()))).catch((t=>t)).then((()=>({items:e,nextStart:t.nextStart,total:t.total})))):{items:[],nextStart:-1,total:0}}))}fetchTags(){return this.portal._request(this.url+"/tags").then((t=>t.tags))}getThumbnailUrl(t){let r=this.thumbnailUrl;return r&&t&&(r+=`&w=${t}`),r}queryFavorites(t){return this.favGroupId?(this._favGroup||(this._favGroup=new p$d({id:this.favGroupId,portal:this.portal})),this._favGroup.queryItems(t)):Promise.reject(new s$x("internal:unknown","Unknown internal error",{internalError:"Unknown favGroupId"}))}toJSON(){throw new s$x("internal:not-yet-implemented","PortalGroup.toJSON is not yet implemented")}static fromJSON(t){if(!t)return null;if(t.declaredClass)throw new Error("JSON object is already hydrated");const r=new n$b;return r.sourceJSON=t,r.read(t),r}};e$u([y$r()],u$a.prototype,"access",void 0),e$u([y$r({type:Date})],u$a.prototype,"created",void 0),e$u([y$r()],u$a.prototype,"culture",void 0),e$u([y$r()],u$a.prototype,"description",void 0),e$u([y$r()],u$a.prototype,"email",void 0),e$u([y$r()],u$a.prototype,"favGroupId",void 0),e$u([y$r()],u$a.prototype,"fullName",void 0),e$u([y$r({type:Date})],u$a.prototype,"modified",void 0),e$u([y$r()],u$a.prototype,"orgId",void 0),e$u([y$r()],u$a.prototype,"portal",void 0),e$u([y$r()],u$a.prototype,"preferredView",void 0),e$u([y$r()],u$a.prototype,"privileges",void 0),e$u([y$r()],u$a.prototype,"region",void 0),e$u([y$r()],u$a.prototype,"role",void 0),e$u([y$r()],u$a.prototype,"roleId",void 0),e$u([y$r()],u$a.prototype,"sourceJSON",void 0),e$u([y$r()],u$a.prototype,"thumbnail",void 0),e$u([y$r({readOnly:!0})],u$a.prototype,"thumbnailUrl",null),e$u([y$r()],u$a.prototype,"units",void 0),e$u([y$r({readOnly:!0})],u$a.prototype,"userContentUrl",null),e$u([y$r({readOnly:!0})],u$a.prototype,"url",null),e$u([y$r()],u$a.prototype,"username",void 0),e$u([y$r()],u$a.prototype,"userType",void 0),u$a=n$b=e$u([i$X("esri.portal.PortalUser")],u$a);var p$c=u$a;

const PortalUser = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': p$c
});

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var _;let O;const U={PortalGroup:()=>Promise.resolve().then(function () { return PortalGroup; }),PortalItem:()=>__webpack_require__.e(/*! import() */ "vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-025cfd").then(__webpack_require__.bind(__webpack_require__, /*! ./PortalItem-036182cd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/PortalItem-036182cd.js")),PortalUser:()=>Promise.resolve().then(function () { return PortalUser; })};let j$5=_=class extends(i$M(f$4)){constructor(e){super(e),this.access=null,this.allSSL=!1,this.authMode="auto",this.authorizedCrossOriginDomains=null,this.basemapGalleryGroupQuery=null,this.bingKey=null,this.canListApps=!1,this.canListData=!1,this.canListPreProvisionedItems=!1,this.canProvisionDirectPurchase=!1,this.canSearchPublic=!0,this.canShareBingPublic=!1,this.canSharePublic=!1,this.canSignInArcGIS=!1,this.canSignInIDP=!1,this.colorSetsGroupQuery=null,this.commentsEnabled=!1,this.created=null,this.culture=null,this.customBaseUrl=null,this.defaultBasemap=null,this.defaultExtent=null,this.defaultVectorBasemap=null,this.description=null,this.eueiEnabled=null,this.featuredGroups=null,this.featuredItemsGroupQuery=null,this.galleryTemplatesGroupQuery=null,this.livingAtlasGroupQuery=null,this.hasCategorySchema=!1,this.helperServices=null,this.homePageFeaturedContent=null,this.homePageFeaturedContentCount=null,this.httpPort=null,this.httpsPort=null,this.id=null,this.ipCntryCode=null,this.isPortal=!1,this.isReadOnly=!1,this.layerTemplatesGroupQuery=null,this.maxTokenExpirationMinutes=null,this.modified=null,this.name=null,this.portalHostname=null,this.portalMode=null,this.portalProperties=null,this.region=null,this.rotatorPanels=null,this.showHomePageDescription=!1,this.sourceJSON=null,this.supportsHostedServices=!1,this.symbolSetsGroupQuery=null,this.templatesGroupQuery=null,this.units=null,this.url=s$H.portalUrl,this.urlKey=null,this.user=null,this.useStandardizedQuery=!1,this.useVectorBasemaps=!1,this.vectorBasemapGalleryGroupQuery=null;}normalizeCtorArgs(e){return "string"==typeof e?{url:e}:e}destroy(){this._esriId_credentialCreateHandle&&(this._esriId_credentialCreateHandle.remove(),this._esriId_credentialCreateHandle=null);}readAuthorizedCrossOriginDomains(e){if(e)for(const r of e)-1===s$H.request.trustedServers.indexOf(r)&&s$H.request.trustedServers.push(r);return e}readDefaultBasemap(e){if(e){const t=O.fromJSON(e);return t.portalItem={portal:this},t}return null}readDefaultVectorBasemap(e){if(e){const t=O.fromJSON(e);return t.portalItem={portal:this},t}return null}get extraQuery(){const e=!(this.user&&this.user.orgId)||this.canSearchPublic;return this.id&&!e?` AND orgid:${this.id}`:null}get isOrganization(){return !!this.access}get restUrl(){let e=this.url;if(e){const t=e.indexOf("/sharing");e=t>0?e.substring(0,t):this.url.replace(/\/+$/,""),e+="/sharing/rest";}return e}get thumbnailUrl(){const e=this.restUrl,t=this.thumbnail;return e&&t?this._normalizeSSL(e+"/portals/self/resources/"+t):null}readUrlKey(e){return e?e.toLowerCase():e}readUser(e){let t=null;return e&&(t=p$c.fromJSON(e),t.portal=this),t}load(e){const t=Promise.all(/*! import() */[__webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-025cfd"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-463023")]).then(__webpack_require__.bind(__webpack_require__, /*! ./Basemap-d60454fd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/Basemap-d60454fd.js")).then((({default:t})=>{a$I(e),O=t;})).then((()=>this.sourceJSON?this.sourceJSON:this._fetchSelf(this.authMode,!1,e))).then((e=>{if(s$r){const e=s$r;this.credential=e.findCredential(this.restUrl),this.credential||this.authMode!==_.AUTH_MODE_AUTO||(this._esriId_credentialCreateHandle=e.on("credential-create",(()=>{e.findCredential(this.restUrl)&&this._signIn();})));}this.sourceJSON=e,this.read(e);}));return this.addResolvingPromise(t),Promise.resolve(this)}async createClosestFacilityTask(){await this.load();const e=this._getHelperServiceUrl("closestFacility");return new((await Promise.all(/*! import() */[__webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-f9256f"), __webpack_require__.e("extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_esm_Clos-1c93e2")]).then(__webpack_require__.bind(__webpack_require__, /*! ./ClosestFacilityTask-2470bbd9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/ClosestFacilityTask-2470bbd9.js"))).default)(e)}async createElevationLayers(){await this.load();const e=this._getHelperService("defaultElevationLayers"),t=(await Promise.all(/*! import() */[__webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-5d17d2"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-90c5a0"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-3d8fe4"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-d42402"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-025cfd"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-6222b1"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-ba5514")]).then(__webpack_require__.bind(__webpack_require__, /*! ./ElevationLayer-24ca6c8f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/ElevationLayer-24ca6c8f.js"))).default;return e?e.map((e=>new t({id:e.id,url:e.url}))):[]}async createGeometryService(){await this.load();const e=this._getHelperServiceUrl("geometry");return new((await __webpack_require__.e(/*! import() */ "vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-4d17a6").then(__webpack_require__.bind(__webpack_require__, /*! ./GeometryService-3924f2b1.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/GeometryService-3924f2b1.js"))).default)({url:e})}async createPrintTask(){await this.load();const e=this._getHelperServiceUrl("printTask");return new((await Promise.all(/*! import() */[__webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-5d17d2"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-a81bb1"), __webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-9a7411")]).then(__webpack_require__.bind(__webpack_require__, /*! ./PrintTask-762f6dba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/PrintTask-762f6dba.js"))).default)(e)}async createRouteTask(){await this.load();const e=this._getHelperServiceUrl("route");return new((await Promise.all(/*! import() */[__webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-f9256f"), __webpack_require__.e("extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_esm_Rout-daa2eb")]).then(__webpack_require__.bind(__webpack_require__, /*! ./RouteTask-3efce404.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/RouteTask-3efce404.js"))).default)(e)}async createServiceAreaTask(){await this.load();const e=this._getHelperServiceUrl("serviceArea");return new((await Promise.all(/*! import() */[__webpack_require__.e("vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_-f9256f"), __webpack_require__.e("extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_esm_Serv-7feba7")]).then(__webpack_require__.bind(__webpack_require__, /*! ./ServiceAreaTask-7dc395c4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/ServiceAreaTask-7dc395c4.js"))).default)(e)}fetchBasemaps(e,t){const r=new c$b;return r.query=e||(this.useVectorBasemaps?this.vectorBasemapGalleryGroupQuery:this.basemapGalleryGroupQuery),r.disableExtraQuery=!0,this.queryGroups(r,t).then((e=>{if(r.num=100,r.query='type:"Web Map" -type:"Web Application"',e.total){const o=e.results[0];return r.sortField=o.sortField||"name",r.sortOrder=o.sortOrder||"desc",o.queryItems(r,t)}return null})).then((e=>{let t;return t=e&&e.total?e.results.filter((e=>"Web Map"===e.type)).map((e=>new O({portalItem:e}))):[],t}))}fetchCategorySchema(e){return this.hasCategorySchema?this._request(this.restUrl+"/portals/self/categorySchema",e).then((e=>e.categorySchema)):b$b(e)?Promise.reject(m$x()):Promise.resolve([])}fetchFeaturedGroups(e){const t=this.featuredGroups,r=new c$b;if(r.num=100,r.sortField="title",t&&t.length){const o=[];for(const e of t)o.push(`(title:"${e.title}" AND owner:${e.owner})`);return r.query=o.join(" OR "),this.queryGroups(r,e).then((e=>e.results))}return b$b(e)?Promise.reject(m$x()):Promise.resolve([])}fetchRegions(e){const t=this.user&&this.user.culture||this.culture||(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)();return this._request(this.restUrl+"/portals/regions",{...e,query:{culture:t}})}static getDefault(){return _._default&&!_._default.destroyed||(_._default=new _),_._default}queryGroups(e,t){return this._queryPortal("/community/groups",e,"PortalGroup",t)}queryItems(e,t){return this._queryPortal("/search",e,"PortalItem",t)}queryUsers(e,t){return e.sortField||(e.sortField="username"),this._queryPortal("/community/users",e,"PortalUser",t)}toJSON(){throw new s$x("internal:not-yet-implemented","Portal.toJSON is not yet implemented")}static fromJSON(e){if(!e)return null;if(e.declaredClass)throw new Error("JSON object is already hydrated");return new _({sourceJSON:e})}_getHelperService(e){const t=this.helperServices&&this.helperServices[e];if(!t)throw new s$x("portal:service-not-found",`The \`helperServices\` do not include an entry named "${e}"`);return t}_getHelperServiceUrl(e){const t=this._getHelperService(e);if(!t.url)throw new s$x("portal:service-url-not-found",`The \`helperServices\` entry "${e}" does not include a \`url\` value`);return t.url}_fetchSelf(e=this.authMode,t=!1,r){const o=this.restUrl+"/portals/self",s={authMode:e,query:{culture:(0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)().toLowerCase()},...r};return "auto"===s.authMode&&(s.authMode="no-prompt"),t&&(s.query.default=!0),this._request(o,s)}_queryPortal(e,t,r,s){const i=d$E(c$b,t),a=t=>this._request(this.restUrl+e,{...i.toRequestOptions(this),...s}).then((e=>{const r=i.clone();return r.start=e.nextStart,new p$f({nextQueryParams:r,queryParams:i,total:e.total,results:_._resultsToTypedArray(t,{portal:this},e,s)})})).then((e=>Promise.all(e.results.map((t=>"function"==typeof t.when?t.when():e))).then((()=>e),(t=>(w$9(t),e)))));return r&&U[r]?U[r]().then((({default:e})=>(a$I(s),a(e)))):a()}_signIn(){if(this.authMode===_.AUTH_MODE_ANONYMOUS)return Promise.reject(new s$x("portal:invalid-auth-mode",`Current "authMode"' is "${this.authMode}"`));if("failed"===this.loadStatus)return Promise.reject(this.loadError);const e=e=>Promise.resolve().then((()=>"not-loaded"===this.loadStatus?(e||(this.authMode="immediate"),this.load().then((()=>null))):"loading"===this.loadStatus?this.load().then((()=>this.credential?null:(this.credential=e,this._fetchSelf("immediate")))):this.user&&this.credential===e?null:(this.credential=e,this._fetchSelf("immediate")))).then((e=>{e&&(this.sourceJSON=e,this.read(e));}));return s$r?s$r.getCredential(this.restUrl).then((t=>e(t))):e(this.credential)}_normalizeSSL(e){return e.replace(/^http:/i,"https:").replace(":7080",":7443")}_normalizeUrl(e){const t=this.credential&&this.credential.token;return this._normalizeSSL(t?e+(e.indexOf("?")>-1?"&":"?")+"token="+t:e)}_requestToTypedArray(e,t,r){return this._request(e,t).then((e=>{const t=_._resultsToTypedArray(r,{portal:this},e);return Promise.all(t.map((t=>"function"==typeof t.when?t.when():e))).then((()=>t),(()=>t))}))}_request(e,t={}){const r={f:"json",...t.query},{authMode:o=(this.authMode===_.AUTH_MODE_ANONYMOUS?"anonymous":"auto"),body:s=null,cacheBust:i=!1,method:a="auto",responseType:l="json",signal:n}=t,u={authMode:o,body:s,cacheBust:i,method:a,query:r,responseType:l,timeout:0,signal:n};return U$1(this._normalizeSSL(e),u).then((e=>e.data))}static _resultsToTypedArray(e,t,o,s){let i;if(o){const a=r$A(s)?s.signal:null;i=o.listings||o.notifications||o.userInvitations||o.tags||o.items||o.groups||o.comments||o.provisions||o.results||o.relatedItems||o,(e||t)&&(i=i.map((r=>{const o=Object.assign(e?e.fromJSON(r):r,t);return "function"==typeof o.load&&o.load(a),o})));}else i=[];return i}};j$5.AUTH_MODE_ANONYMOUS="anonymous",j$5.AUTH_MODE_AUTO="auto",j$5.AUTH_MODE_IMMEDIATE="immediate",e$u([y$r()],j$5.prototype,"access",void 0),e$u([y$r()],j$5.prototype,"allSSL",void 0),e$u([y$r()],j$5.prototype,"authMode",void 0),e$u([y$r()],j$5.prototype,"authorizedCrossOriginDomains",void 0),e$u([e$C("authorizedCrossOriginDomains")],j$5.prototype,"readAuthorizedCrossOriginDomains",null),e$u([y$r()],j$5.prototype,"basemapGalleryGroupQuery",void 0),e$u([y$r()],j$5.prototype,"bingKey",void 0),e$u([y$r()],j$5.prototype,"canListApps",void 0),e$u([y$r()],j$5.prototype,"canListData",void 0),e$u([y$r()],j$5.prototype,"canListPreProvisionedItems",void 0),e$u([y$r()],j$5.prototype,"canProvisionDirectPurchase",void 0),e$u([y$r()],j$5.prototype,"canSearchPublic",void 0),e$u([y$r()],j$5.prototype,"canShareBingPublic",void 0),e$u([y$r()],j$5.prototype,"canSharePublic",void 0),e$u([y$r()],j$5.prototype,"canSignInArcGIS",void 0),e$u([y$r()],j$5.prototype,"canSignInIDP",void 0),e$u([y$r()],j$5.prototype,"colorSetsGroupQuery",void 0),e$u([y$r()],j$5.prototype,"commentsEnabled",void 0),e$u([y$r({type:Date})],j$5.prototype,"created",void 0),e$u([y$r()],j$5.prototype,"credential",void 0),e$u([y$r()],j$5.prototype,"culture",void 0),e$u([y$r()],j$5.prototype,"currentVersion",void 0),e$u([y$r()],j$5.prototype,"customBaseUrl",void 0),e$u([y$r()],j$5.prototype,"defaultBasemap",void 0),e$u([e$C("defaultBasemap")],j$5.prototype,"readDefaultBasemap",null),e$u([y$r({type:M$3})],j$5.prototype,"defaultExtent",void 0),e$u([y$r()],j$5.prototype,"defaultVectorBasemap",void 0),e$u([e$C("defaultVectorBasemap")],j$5.prototype,"readDefaultVectorBasemap",null),e$u([y$r()],j$5.prototype,"description",void 0),e$u([y$r()],j$5.prototype,"eueiEnabled",void 0),e$u([y$r({readOnly:!0})],j$5.prototype,"extraQuery",null),e$u([y$r()],j$5.prototype,"featuredGroups",void 0),e$u([y$r()],j$5.prototype,"featuredItemsGroupQuery",void 0),e$u([y$r()],j$5.prototype,"galleryTemplatesGroupQuery",void 0),e$u([y$r()],j$5.prototype,"livingAtlasGroupQuery",void 0),e$u([y$r()],j$5.prototype,"hasCategorySchema",void 0),e$u([y$r()],j$5.prototype,"helpBase",void 0),e$u([y$r()],j$5.prototype,"helperServices",void 0),e$u([y$r()],j$5.prototype,"helpMap",void 0),e$u([y$r()],j$5.prototype,"homePageFeaturedContent",void 0),e$u([y$r()],j$5.prototype,"homePageFeaturedContentCount",void 0),e$u([y$r()],j$5.prototype,"httpPort",void 0),e$u([y$r()],j$5.prototype,"httpsPort",void 0),e$u([y$r()],j$5.prototype,"id",void 0),e$u([y$r()],j$5.prototype,"ipCntryCode",void 0),e$u([y$r({readOnly:!0})],j$5.prototype,"isOrganization",null),e$u([y$r()],j$5.prototype,"isPortal",void 0),e$u([y$r()],j$5.prototype,"isReadOnly",void 0),e$u([y$r()],j$5.prototype,"layerTemplatesGroupQuery",void 0),e$u([y$r()],j$5.prototype,"maxTokenExpirationMinutes",void 0),e$u([y$r({type:Date})],j$5.prototype,"modified",void 0),e$u([y$r()],j$5.prototype,"name",void 0),e$u([y$r()],j$5.prototype,"portalHostname",void 0),e$u([y$r()],j$5.prototype,"portalMode",void 0),e$u([y$r()],j$5.prototype,"portalProperties",void 0),e$u([y$r()],j$5.prototype,"region",void 0),e$u([y$r({readOnly:!0})],j$5.prototype,"restUrl",null),e$u([y$r()],j$5.prototype,"rotatorPanels",void 0),e$u([y$r()],j$5.prototype,"showHomePageDescription",void 0),e$u([y$r()],j$5.prototype,"sourceJSON",void 0),e$u([y$r()],j$5.prototype,"staticImagesUrl",void 0),e$u([y$r()],j$5.prototype,"stylesGroupQuery",void 0),e$u([y$r()],j$5.prototype,"supportsHostedServices",void 0),e$u([y$r()],j$5.prototype,"symbolSetsGroupQuery",void 0),e$u([y$r()],j$5.prototype,"templatesGroupQuery",void 0),e$u([y$r()],j$5.prototype,"thumbnail",void 0),e$u([y$r({readOnly:!0})],j$5.prototype,"thumbnailUrl",null),e$u([y$r()],j$5.prototype,"units",void 0),e$u([y$r()],j$5.prototype,"url",void 0),e$u([y$r()],j$5.prototype,"urlKey",void 0),e$u([e$C("urlKey")],j$5.prototype,"readUrlKey",null),e$u([y$r()],j$5.prototype,"user",void 0),e$u([e$C("user")],j$5.prototype,"readUser",null),e$u([y$r()],j$5.prototype,"useStandardizedQuery",void 0),e$u([y$r()],j$5.prototype,"useVectorBasemaps",void 0),e$u([y$r()],j$5.prototype,"vectorBasemapGalleryGroupQuery",void 0),j$5=_=e$u([i$X("esri.portal.Portal")],j$5);var w$2=j$5;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$b;let i$9=p$b=class extends u$D{constructor(){super(...arguments),this.portal=null;}clone(){return new p$b({name:this.name,styleUrl:this.styleUrl,styleName:this.styleName,portal:this.portal})}};e$u([y$r({type:String})],i$9.prototype,"name",void 0),e$u([y$r({type:String})],i$9.prototype,"styleUrl",void 0),e$u([y$r({type:String})],i$9.prototype,"styleName",void 0),e$u([y$r({type:w$2})],i$9.prototype,"portal",void 0),i$9=p$b=e$u([i$X("esri.symbols.support.StyleOrigin")],i$9);var l$a=i$9;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var t$5;let p$a=t$5=class extends u$D{clone(){return new t$5({url:this.url})}};e$u([y$r({type:String})],p$a.prototype,"url",void 0),p$a=t$5=e$u([i$X("esri.symbols.support.Thumbnail")],p$a);var c$a=p$a;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const v$3={icon:S$3,object:l$i,line:f$8,path:d$d,fill:h$f,extrude:c$m,text:y$6,water:n$f},C$3=L$5.ofType({base:c$s,key:"type",typeMap:v$3,errorContext:"symbol-layer"}),T$1=n$T.getLogger("esri.symbols.Symbol3D");let k$2=class extends n$o{constructor(e){super(e),this.styleOrigin=null,this.thumbnail=null,this.type=null;const r=this.__accessor__&&this.__accessor__.metadatas&&this.__accessor__.metadatas.symbolLayers,o=r&&r.type||L$5;this._set("symbolLayers",new o);}get color(){return null}set color(e){T$1.error("Symbol3D does not support colors on the symbol level. Colors may be set on individual symbol layer materials instead.");}set symbolLayers(e){n$e(e,this._get("symbolLayers"));}readStyleOrigin(e,r,o){if(e.styleUrl&&e.name){const r=c$U(e.styleUrl,o);return new l$a({styleUrl:r,name:e.name})}if(e.styleName&&e.name)return new l$a({portal:o&&o.portal||w$2.getDefault(),styleName:e.styleName,name:e.name});o&&o.messages&&o.messages.push(new t$H("symbol3d:incomplete-style-origin","Style origin requires either a 'styleUrl' or 'styleName' and a 'name' property",{context:o,definition:e}));}writeStyleOrigin(e,r,o,t){if(e.styleUrl&&e.name){let o=i$W(e.styleUrl,t);Q$2(o)&&(o=z$6(o)),r.styleOrigin={styleUrl:o,name:e.name};}else e.styleName&&e.name&&(e.portal&&t&&t.portal&&!P$8(e.portal.restUrl,t.portal.restUrl)?t&&t.messages&&t.messages.push(new t$H("symbol:cross-portal","The symbol style origin cannot be persisted because it refers to an item on a different portal than the one being saved to.",{symbol:this})):r.styleOrigin={styleName:e.styleName,name:e.name});}normalizeCtorArgs(e){return e instanceof c$s||e&&v$3[e.type]?{symbolLayers:[e]}:Array.isArray(e)?{symbolLayers:e}:e}};e$u([y$r({json:{read:!1,write:!1}})],k$2.prototype,"color",null),e$u([y$r({type:C$3,nonNullable:!0,json:{write:!0}}),c$_(t$6)],k$2.prototype,"symbolLayers",null),e$u([y$r({type:l$a})],k$2.prototype,"styleOrigin",void 0),e$u([e$C("styleOrigin")],k$2.prototype,"readStyleOrigin",null),e$u([o$v("styleOrigin",{"styleOrigin.styleUrl":{type:String},"styleOrigin.styleName":{type:String},"styleOrigin.name":{type:String}})],k$2.prototype,"writeStyleOrigin",null),e$u([y$r({type:c$a,json:{read:!1}})],k$2.prototype,"thumbnail",void 0),e$u([y$r({type:["point-3d","line-3d","polygon-3d","mesh-3d","label-3d"],readOnly:!0})],k$2.prototype,"type",void 0),k$2=e$u([i$X("esri.symbols.Symbol3D")],k$2);var A$2=k$2;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var l$9;let i$8=l$9=class extends a$B{constructor(){super(...arguments),this.color=new o$j("white");}clone(){return new l$9({color:y$v(this.color)})}};e$u([y$r(c$q)],i$8.prototype,"color",void 0),i$8=l$9=e$u([i$X("esri.symbols.callouts.LineCallout3DBorder")],i$8);var a$8=i$8;Object.freeze({__proto__:null,get LineCallout3DBorder(){return i$8},default:a$8});

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let t$4=class extends a$B{constructor(r){super(r),this.visible=!0;}clone(){}};e$u([y$r({type:["line"],readOnly:!0,json:{read:!1,write:{ignoreOrigin:!0}}})],t$4.prototype,"type",void 0),e$u([y$r({readOnly:!0})],t$4.prototype,"visible",void 0),t$4=e$u([i$X("esri.symbols.callouts.Callout3D")],t$4);var p$9=t$4;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var u$9;let j$4=u$9=class extends p$9{constructor(o){super(o),this.type="line",this.color=new o$j([0,0,0,1]),this.size=e$a(1),this.border=null;}get visible(){return this.size>0&&r$A(this.color)&&this.color.a>0}clone(){return new u$9({color:y$v(this.color),size:this.size,border:y$v(this.border)})}};e$u([r$v({line:"line"},{readOnly:!0})],j$4.prototype,"type",void 0),e$u([y$r(c$q)],j$4.prototype,"color",void 0),e$u([y$r(p$r)],j$4.prototype,"size",void 0),e$u([y$r({type:a$8,json:{write:!0}})],j$4.prototype,"border",void 0),e$u([y$r({readOnly:!0})],j$4.prototype,"visible",null),j$4=u$9=e$u([i$X("esri.symbols.callouts.LineCallout3D")],j$4);var d$a=j$4;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p$8;let i$7=p$8=class extends a$B{constructor(){super(...arguments),this.screenLength=0,this.minWorldLength=0;}clone(){return new p$8({screenLength:this.screenLength,minWorldLength:this.minWorldLength,maxWorldLength:this.maxWorldLength})}};e$u([y$r(p$r)],i$7.prototype,"screenLength",void 0),e$u([y$r({type:Number,json:{write:!0,default:0}})],i$7.prototype,"minWorldLength",void 0),e$u([y$r({type:Number,json:{write:!0}})],i$7.prototype,"maxWorldLength",void 0),i$7=p$8=e$u([i$X("esri.symbols.support.Symbol3DVerticalOffset")],i$7);var n$a=i$7;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function r$2(t){if(!t)return !1;const e=t.verticalOffset;return !!e&&!(e.screenLength<=0||e.maxWorldLength<=0)}function n$9(t){if(!t)return !1;if(!t.supportsCallout||!t.supportsCallout())return !1;const e=t.callout;return !!e&&(!!e.visible&&!!r$2(t))}const l$8={types:{key:"type",base:p$9,typeMap:{line:d$a}},json:{write:!0}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var u$8;const n$8=L$5.ofType({base:null,key:"type",typeMap:{text:y$6}});let f$3=u$8=class extends A$2{constructor(t){super(t),this.verticalOffset=null,this.callout=null,this.styleOrigin=null,this.symbolLayers=new n$8,this.type="label-3d";}supportsCallout(){return !0}hasVisibleCallout(){return n$9(this)}hasVisibleVerticalOffset(){return r$2(this)}clone(){return new u$8({styleOrigin:y$v(this.styleOrigin),symbolLayers:y$v(this.symbolLayers),thumbnail:y$v(this.thumbnail),callout:y$v(this.callout),verticalOffset:y$v(this.verticalOffset)})}static fromTextSymbol(t){return new u$8({symbolLayers:[y$6.fromTextSymbol(t)]})}};e$u([y$r({type:n$a,json:{write:!0}})],f$3.prototype,"verticalOffset",void 0),e$u([y$r(l$8)],f$3.prototype,"callout",void 0),e$u([y$r({json:{read:!1,write:!1}})],f$3.prototype,"styleOrigin",void 0),e$u([y$r({type:n$8})],f$3.prototype,"symbolLayers",void 0),e$u([r$v({LabelSymbol3D:"label-3d"},{readOnly:!0})],f$3.prototype,"type",void 0),f$3=u$8=e$u([i$X("esri.symbols.LabelSymbol3D")],f$3);var b$4=f$3;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var y$5;const a$7=L$5.ofType({base:null,key:"type",typeMap:{line:f$8,path:d$d}}),n$7=L$5.ofType({base:null,key:"type",typeMap:{line:f$8,path:d$d}});let c$9=y$5=class extends A$2{constructor(o){super(o),this.symbolLayers=new a$7,this.type="line-3d";}clone(){return new y$5({styleOrigin:y$v(this.styleOrigin),symbolLayers:y$v(this.symbolLayers),thumbnail:y$v(this.thumbnail)})}static fromSimpleLineSymbol(o){return new y$5({symbolLayers:[f$8.fromSimpleLineSymbol(o)]})}};e$u([y$r({type:a$7,json:{type:n$7}})],c$9.prototype,"symbolLayers",void 0),e$u([r$v({LineSymbol3D:"line-3d"},{readOnly:!0})],c$9.prototype,"type",void 0),c$9=y$5=e$u([i$X("esri.symbols.LineSymbol3D")],c$9);var u$7=c$9;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let p$7=class extends n$o{constructor(r){super(r),this.angle=0,this.type=null,this.xoffset=0,this.yoffset=0,this.size=9;}hash(){return `${this.type}.${this.angle}.${this.size}.${this.xoffset}.${this.yoffset}`}};e$u([y$r({type:Number,json:{read:r=>r&&-1*r,write:(r,e)=>e.angle=r&&-1*r}})],p$7.prototype,"angle",void 0),e$u([y$r({type:["simple-marker","picture-marker"],readOnly:!0})],p$7.prototype,"type",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],p$7.prototype,"xoffset",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],p$7.prototype,"yoffset",void 0),e$u([y$r({type:Number,cast:r=>"auto"===r?r:o$6(r),json:{write:!0}})],p$7.prototype,"size",void 0),p$7=e$u([i$X("esri.symbols.MarkerSymbol")],p$7);var i$6=p$7;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var l$7;const c$8=L$5.ofType({base:null,key:"type",typeMap:{fill:h$f}});let y$4=l$7=class extends A$2{constructor(o){super(o),this.symbolLayers=new c$8,this.type="mesh-3d";}clone(){return new l$7({styleOrigin:y$v(this.styleOrigin),symbolLayers:y$v(this.symbolLayers),thumbnail:y$v(this.thumbnail)})}};e$u([y$r({type:c$8})],y$4.prototype,"symbolLayers",void 0),e$u([r$v({MeshSymbol3D:"mesh-3d"},{readOnly:!0})],y$4.prototype,"type",void 0),y$4=l$7=e$u([i$X("esri.symbols.MeshSymbol3D")],y$4);var a$6=y$4;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function s$5(a,r,t){return r.imageData?X$2({mediaType:r.contentType||"image/png",isBase64:!0,data:r.imageData}):l$6(r.url,t)}function l$6(e,t){return p$6(t)&&!Q$2(e)&&t.layer.parsedUrl?D$6(t.layer.parsedUrl.path,"images",e):c$U(e,t)}function u$6(e,a,r,n){if(G$6(e)){const t=V$2(e);a.contentType=t.mediaType,a.imageData=t.data,r&&r.imageData===a.imageData&&r.url&&p$10(r.url,a,"url",n);}else p$10(e,a,"url",n);}const m$6={json:{read:{source:["imageData","url"],reader:s$5},write:{writer(e,a,r,t){u$6(e,a,this.source,t);}}}},c$7={readOnly:!0,json:{read:{source:["imageData","url"],reader(e,a,r){const t={};return a.imageData&&(t.imageData=a.imageData),a.contentType&&(t.contentType=a.contentType),a.url&&(t.url=l$6(a.url,r)),t}}}};function p$6(e){return e&&("service"===e.origin||"portal-item"===e.origin)&&e.layer&&("feature"===e.layer.type||"stream"===e.layer.type)}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var h$a;let u$5=h$a=class extends l$l{constructor(...t){super(...t),this.type="picture-fill",this.url=null,this.xscale=1,this.yscale=1,this.width=12,this.height=12,this.xoffset=0,this.yoffset=0,this.source=null;}normalizeCtorArgs(t,o,s,r){if(t&&"string"!=typeof t&&null==t.imageData)return t;const e={};return t&&(e.url=t),o&&(e.outline=o),null!=s&&(e.width=o$6(s)),null!=r&&(e.height=o$6(r)),e}clone(){const t=new h$a({color:y$v(this.color),height:this.height,outline:this.outline&&this.outline.clone(),url:this.url,width:this.width,xoffset:this.xoffset,xscale:this.xscale,yoffset:this.yoffset,yscale:this.yscale});return t._set("source",y$v(this.source)),t}hash(){var t;return `${super.hash()}.${null==(t=this.color)?void 0:t.hash()}.${this.height}.${this.url}.${this.width}.${this.xoffset}.${this.xscale}.${this.yoffset}.${this.yscale}`}};e$u([r$v({esriPFS:"picture-fill"},{readOnly:!0})],u$5.prototype,"type",void 0),e$u([y$r(m$6)],u$5.prototype,"url",void 0),e$u([y$r({type:Number,json:{write:!0}})],u$5.prototype,"xscale",void 0),e$u([y$r({type:Number,json:{write:!0}})],u$5.prototype,"yscale",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],u$5.prototype,"width",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],u$5.prototype,"height",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],u$5.prototype,"xoffset",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],u$5.prototype,"yoffset",void 0),e$u([y$r(c$7)],u$5.prototype,"source",void 0),u$5=h$a=e$u([i$X("esri.symbols.PictureFillSymbol")],u$5);var a$5=u$5;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var l$5;let a$4=l$5=class extends i$6{constructor(...r){super(...r),this.color=null,this.type="picture-marker",this.url=null,this.source=null,this.height=12,this.width=12,this.size=null;}normalizeCtorArgs(r,t,o){if(r&&"string"!=typeof r&&null==r.imageData)return r;const e={};return r&&(e.url=r),null!=t&&(e.width=o$6(t)),null!=o&&(e.height=o$6(o)),e}readHeight(r,t){return t.size||r}readWidth(r,t){return t.size||r}clone(){const r=new l$5({angle:this.angle,height:this.height,url:this.url,width:this.width,xoffset:this.xoffset,yoffset:this.yoffset});return r._set("source",y$v(this.source)),r}hash(){return `${super.hash()}.${this.height}.${this.url}.${this.width}`}};e$u([y$r({json:{write:!1}})],a$4.prototype,"color",void 0),e$u([r$v({esriPMS:"picture-marker"},{readOnly:!0})],a$4.prototype,"type",void 0),e$u([y$r(m$6)],a$4.prototype,"url",void 0),e$u([y$r(c$7)],a$4.prototype,"source",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],a$4.prototype,"height",void 0),e$u([e$C("height",["height","size"])],a$4.prototype,"readHeight",null),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],a$4.prototype,"width",void 0),e$u([y$r({json:{write:!1}})],a$4.prototype,"size",void 0),a$4=l$5=e$u([i$X("esri.symbols.PictureMarkerSymbol")],a$4);var n$6=a$4;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var S$2;const h$9=L$5.ofType({base:null,key:"type",typeMap:{icon:S$3,object:l$i,text:y$6}}),j$3=L$5.ofType({base:null,key:"type",typeMap:{icon:S$3,object:l$i}});let d$9=S$2=class extends A$2{constructor(o){super(o),this.verticalOffset=null,this.callout=null,this.symbolLayers=new h$9,this.type="point-3d";}writeSymbolLayers(o,t,e,r){const s=o.filter((o=>"text"!==o.type));if(r&&r.messages&&s.length<o.length){const t=o.find((o=>"text"===o.type));r.messages.push(new s$x("symbol-layer:unsupported","Symbol layers of type 'text' cannot be persisted in PointSymbol3D",{symbolLayer:t}));}t[e]=s.map((o=>o.write({},r))).toArray();}supportsCallout(){if((this.symbolLayers?this.symbolLayers.length:0)<1)return !1;for(const o of this.symbolLayers.items)switch(o.type){case"icon":case"text":case"object":continue;default:return !1}return !0}hasVisibleCallout(){return n$9(this)}hasVisibleVerticalOffset(){return r$2(this)}clone(){return new S$2({verticalOffset:y$v(this.verticalOffset),callout:y$v(this.callout),styleOrigin:y$v(this.styleOrigin),symbolLayers:y$v(this.symbolLayers),thumbnail:y$v(this.thumbnail)})}static fromSimpleMarkerSymbol(o){return new S$2({symbolLayers:[S$3.fromSimpleMarkerSymbol(o)]})}static fromPictureMarkerSymbol(o){return new S$2({symbolLayers:[S$3.fromPictureMarkerSymbol(o)]})}static fromCIMSymbol(o){if(o.data&&o.data.symbol){const t=o.data.symbol;if("CIMPointSymbol"===t.type&&t.callout)return new S$2({symbolLayers:[S$3.fromCIMSymbol(o)],callout:{type:"line",size:.5,color:[0,0,0]},verticalOffset:{screenLength:40}})}return new S$2({symbolLayers:[S$3.fromCIMSymbol(o)]})}static fromTextSymbol(o){return new S$2({symbolLayers:[y$6.fromTextSymbol(o)]})}};e$u([y$r({type:n$a,json:{write:!0}})],d$9.prototype,"verticalOffset",void 0),e$u([y$r(l$8)],d$9.prototype,"callout",void 0),e$u([y$r({type:h$9,json:{type:j$3,origins:{"web-scene":{type:j$3}}}})],d$9.prototype,"symbolLayers",void 0),e$u([o$v("web-scene","symbolLayers")],d$9.prototype,"writeSymbolLayers",null),e$u([r$v({PointSymbol3D:"point-3d"},{readOnly:!0})],d$9.prototype,"type",void 0),d$9=S$2=e$u([i$X("esri.symbols.PointSymbol3D")],d$9);var L$2=d$9;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var L$1;const S$1=L$5.ofType({base:null,key:"type",typeMap:{extrude:c$m,fill:h$f,icon:S$3,line:f$8,object:l$i,text:y$6,water:n$f}}),d$8=L$5.ofType({base:null,key:"type",typeMap:{extrude:c$m,fill:h$f,icon:S$3,line:f$8,object:l$i,water:n$f}});let g$3=L$1=class extends A$2{constructor(e){super(e),this.symbolLayers=new S$1,this.type="polygon-3d";}writeSymbolLayers(e,o,r,t){const s=e.filter((e=>"text"!==e.type));if(t&&t.messages&&s.length<e.length){const o=e.find((e=>"text"===e.type));t.messages.push(new s$x("symbol-layer:unsupported","Symbol layers of type 'text' cannot be persisted in PolygonSymbol3D",{symbolLayer:o}));}o[r]=s.map((e=>e.write({},t))).toArray();}clone(){return new L$1({styleOrigin:y$v(this.styleOrigin),symbolLayers:y$v(this.symbolLayers),thumbnail:y$v(this.thumbnail)})}static fromJSON(e){const o=new L$1;if(o.read(e),2===o.symbolLayers.length&&"fill"===o.symbolLayers.getItemAt(0).type&&"line"===o.symbolLayers.getItemAt(1).type){const t=o.symbolLayers.getItemAt(0),s=o.symbolLayers.getItemAt(1);!s.enabled||e.symbolLayers&&e.symbolLayers[1]&&!1===e.symbolLayers[1].enable||(t.outline={size:s.size,color:r$A(s.material)?s.material.color:null}),o.symbolLayers.removeAt(1);}return o}static fromSimpleFillSymbol(e){return new L$1({symbolLayers:[h$f.fromSimpleFillSymbol(e)]})}};e$u([y$r({type:S$1,json:{type:d$8}})],g$3.prototype,"symbolLayers",void 0),e$u([o$v("web-scene","symbolLayers")],g$3.prototype,"writeSymbolLayers",null),e$u([r$v({PolygonSymbol3D:"polygon-3d"},{readOnly:!0})],g$3.prototype,"type",void 0),g$3=L$1=e$u([i$X("esri.symbols.PolygonSymbol3D")],g$3);var h$8=g$3;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var c$6;const n$5=new t$I({esriSFSSolid:"solid",esriSFSNull:"none",esriSFSHorizontal:"horizontal",esriSFSVertical:"vertical",esriSFSForwardDiagonal:"forward-diagonal",esriSFSBackwardDiagonal:"backward-diagonal",esriSFSCross:"cross",esriSFSDiagonalCross:"diagonal-cross"});let m$5=c$6=class extends l$l{constructor(...o){super(...o),this.color=new o$j([0,0,0,.25]),this.outline=new d$i,this.type="simple-fill",this.style="solid";}normalizeCtorArgs(o,r,s){if(o&&"string"!=typeof o)return o;const e={};return o&&(e.style=o),r&&(e.outline=r),s&&(e.color=s),e}clone(){return new c$6({color:y$v(this.color),outline:this.outline&&this.outline.clone(),style:this.style})}hash(){return `${super.hash()}${this.style}.${this.color&&this.color.hash()}`}};e$u([y$r()],m$5.prototype,"color",void 0),e$u([y$r()],m$5.prototype,"outline",void 0),e$u([r$v({esriSFS:"simple-fill"},{readOnly:!0})],m$5.prototype,"type",void 0),e$u([y$r({type:n$5.apiValues,json:{read:n$5.read,write:n$5.write}})],m$5.prototype,"style",void 0),m$5=c$6=e$u([i$X("esri.symbols.SimpleFillSymbol")],m$5);var u$4=m$5;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var m$4;const u$3=new t$I({esriSMSCircle:"circle",esriSMSSquare:"square",esriSMSCross:"cross",esriSMSX:"x",esriSMSDiamond:"diamond",esriSMSTriangle:"triangle",esriSMSPath:"path"});let h$7=m$4=class extends i$6{constructor(...r){super(...r),this.color=new o$j([255,255,255,.25]),this.type="simple-marker",this.size=12,this.style="circle",this.outline=new d$i;}normalizeCtorArgs(r,o,e,t){if(r&&"string"!=typeof r)return r;const s={};return r&&(s.style=r),null!=o&&(s.size=o$6(o)),e&&(s.outline=e),t&&(s.color=t),s}writeColor(r,o){r&&"x"!==this.style&&"cross"!==this.style&&(o.color=r.toJSON()),null===r&&(o.color=null);}set path(r){this.style="path",this._set("path",r);}clone(){return new m$4({angle:this.angle,color:y$v(this.color),outline:this.outline&&this.outline.clone(),path:this.path,size:this.size,style:this.style,xoffset:this.xoffset,yoffset:this.yoffset})}hash(){var r;return `${super.hash()}.${this.color&&this.color.hash()}.${this.path}.${this.style}.${null==(r=this.outline)?void 0:r.hash()}`}};e$u([y$r()],h$7.prototype,"color",void 0),e$u([o$v("color")],h$7.prototype,"writeColor",null),e$u([r$v({esriSMS:"simple-marker"},{readOnly:!0})],h$7.prototype,"type",void 0),e$u([y$r()],h$7.prototype,"size",void 0),e$u([y$r({type:u$3.apiValues,json:{read:u$3.read,write:u$3.write}})],h$7.prototype,"style",void 0),e$u([y$r({type:String,json:{write:!0}})],h$7.prototype,"path",null),e$u([y$r({types:{key:"type",base:null,defaultKeyValue:"simple-line",typeMap:{"simple-line":d$i}},json:{default:null,write:!0}})],h$7.prototype,"outline",void 0),h$7=m$4=e$u([i$X("esri.symbols.SimpleMarkerSymbol")],h$7);var y$3=h$7;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var d$7;let c$5=d$7=class extends n$o{constructor(...t){super(...t),this.backgroundColor=null,this.borderLineColor=null,this.borderLineSize=null,this.font=new n$i,this.horizontalAlignment="center",this.kerning=!0,this.haloColor=null,this.haloSize=null,this.rightToLeft=null,this.rotated=!1,this.text="",this.type="text",this.verticalAlignment=null,this.xoffset=0,this.yoffset=0,this.angle=0,this.width=null,this.lineWidth=192,this.lineHeight=1;}normalizeCtorArgs(t,o,e){if(t&&"string"!=typeof t)return t;const i={};return t&&(i.text=t),o&&(i.font=o),e&&(i.color=e),i}writeLineWidth(t,o,e,i){i&&"string"!=typeof i?i.origin:o[e]=t;}castLineWidth(t){return o$6(t)}writeLineHeight(t,o,e,i){i&&"string"!=typeof i?i.origin:o[e]=t;}clone(){return new d$7({angle:this.angle,backgroundColor:y$v(this.backgroundColor),borderLineColor:y$v(this.borderLineColor),borderLineSize:this.borderLineSize,color:y$v(this.color),font:this.font&&this.font.clone(),haloColor:y$v(this.haloColor),haloSize:this.haloSize,horizontalAlignment:this.horizontalAlignment,kerning:this.kerning,lineHeight:this.lineHeight,lineWidth:this.lineWidth,rightToLeft:this.rightToLeft,rotated:this.rotated,text:this.text,verticalAlignment:this.verticalAlignment,width:this.width,xoffset:this.xoffset,yoffset:this.yoffset})}hash(){return `${this.backgroundColor&&this.backgroundColor.hash()}.${this.borderLineColor}.${this.borderLineSize}.${this.color.hash()}.${this.font&&this.font.hash()}.${this.haloColor&&this.haloColor.hash()}.${this.haloSize}.${this.horizontalAlignment}.${this.kerning}.${this.rightToLeft}.${this.rotated}.${this.text}.${this.verticalAlignment}.${this.width}.${this.xoffset}.${this.yoffset}.${this.lineHeight}.${this.lineWidth}.${this.angle}`}};e$u([y$r({type:o$j,json:{write:!0}})],c$5.prototype,"backgroundColor",void 0),e$u([y$r({type:o$j,json:{write:!0}})],c$5.prototype,"borderLineColor",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$5.prototype,"borderLineSize",void 0),e$u([y$r({type:n$i,json:{write:!0}})],c$5.prototype,"font",void 0),e$u([y$r({type:["left","right","center","justify"],json:{write:!0}})],c$5.prototype,"horizontalAlignment",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],c$5.prototype,"kerning",void 0),e$u([y$r({type:o$j,json:{write:!0}})],c$5.prototype,"haloColor",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],c$5.prototype,"haloSize",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],c$5.prototype,"rightToLeft",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],c$5.prototype,"rotated",void 0),e$u([y$r({type:String,json:{write:!0}})],c$5.prototype,"text",void 0),e$u([r$v({esriTS:"text"},{readOnly:!0})],c$5.prototype,"type",void 0),e$u([y$r({type:["baseline","top","middle","bottom"],json:{write:!0}})],c$5.prototype,"verticalAlignment",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],c$5.prototype,"xoffset",void 0),e$u([y$r({type:Number,cast:o$6,json:{write:!0}})],c$5.prototype,"yoffset",void 0),e$u([y$r({type:Number,json:{read:t=>t&&-1*t,write:(t,o)=>o.angle=t&&-1*t}})],c$5.prototype,"angle",void 0),e$u([y$r({type:Number,json:{write:!0}})],c$5.prototype,"width",void 0),e$u([y$r({type:Number})],c$5.prototype,"lineWidth",void 0),e$u([o$v("lineWidth")],c$5.prototype,"writeLineWidth",null),e$u([c$_("lineWidth")],c$5.prototype,"castLineWidth",null),e$u([y$r({type:Number})],c$5.prototype,"lineHeight",void 0),e$u([o$v("lineHeight")],c$5.prototype,"writeLineHeight",null),c$5=d$7=e$u([i$X("esri.symbols.TextSymbol")],c$5);var y$2=c$5;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var c$4;const n$4=n$T.getLogger("esri.symbols.WebStyleSymbol");let u$2=c$4=class extends n$o{constructor(t){super(t),this.styleName=null,this.portal=null,this.styleUrl=null,this.thumbnail=null,this.name=null,this.type="web-style";}read(t,r){this.portal=r?r.portal:void 0,super.read(t,r);}clone(){return new c$4({name:this.name,styleUrl:this.styleUrl,styleName:this.styleName,portal:this.portal})}fetchSymbol(t){return this._fetchSymbol("webRef",t)}fetchCIMSymbol(t){return this._fetchSymbol("cimRef",t)}async _fetchSymbol(t,r){const o=await h$6();a$I(r);const e=o.resolveWebStyleSymbol(this,{portal:this.portal},t,r);return e.catch((t=>{n$4.error("#fetchSymbol()","Failed to create symbol from style",t);})),e}};function h$6(){return __webpack_require__.e(/*! import() */ "extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_esm_styl-7aa056").then(__webpack_require__.bind(__webpack_require__, /*! ./styleUtils-6019f3b9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/geoenrichment-components/dist/esm/styleUtils-6019f3b9.js")).then(function (n) { return n.s; })}e$u([y$r({json:{write:!1}})],u$2.prototype,"color",void 0),e$u([y$r({type:String,json:{write:!0}})],u$2.prototype,"styleName",void 0),e$u([y$r({type:w$2,json:{write:!1}})],u$2.prototype,"portal",void 0),e$u([y$r({type:String,json:{read:m$B,write:p$10}})],u$2.prototype,"styleUrl",void 0),e$u([y$r({type:c$a,json:{read:!1}})],u$2.prototype,"thumbnail",void 0),e$u([y$r({type:String,json:{write:!0}})],u$2.prototype,"name",void 0),e$u([r$v({styleSymbolReference:"web-style"},{readOnly:!0})],u$2.prototype,"type",void 0),u$2=c$4=e$u([i$X("esri.symbols.WebStyleSymbol")],u$2);var b$3=u$2;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function x$2(e){if(!e)return !1;switch(e.type){case"picture-fill":case"picture-marker":case"simple-fill":case"simple-line":case"simple-marker":case"text":case"cim":return !0;default:return !1}}function c$3(e){if(!e)return !1;switch(e.type){case"label-3d":case"line-3d":case"mesh-3d":case"point-3d":case"polygon-3d":return !0;default:return !1}}const j$2={base:n$o,key:"type",typeMap:{"simple-fill":u$4,"picture-fill":a$5,"picture-marker":n$6,"simple-line":d$i,"simple-marker":y$3,text:y$2,"label-3d":b$4,"line-3d":u$7,"mesh-3d":a$6,"point-3d":L$2,"polygon-3d":h$8,"web-style":b$3,cim:d$j},errorContext:"symbol"},D$1={base:n$o,key:"type",typeMap:{"picture-marker":n$6,"simple-marker":y$3,text:y$2,"web-style":b$3,cim:d$j},errorContext:"symbol"},k$1=u$K({types:j$2}),M={base:n$o,key:"type",typeMap:{"simple-fill":u$4,"picture-fill":a$5,"picture-marker":n$6,"simple-line":d$i,"simple-marker":y$3,text:y$2,"line-3d":u$7,"mesh-3d":a$6,"point-3d":L$2,"polygon-3d":h$8,"web-style":b$3,cim:d$j},errorContext:"symbol"},P$1={base:n$o,key:"type",typeMap:{text:y$2,"label-3d":b$4},errorContext:"symbol"},h$5={base:n$o,key:"type",typeMap:{"line-3d":u$7,"mesh-3d":a$6,"point-3d":L$2,"polygon-3d":h$8,"web-style":b$3},errorContext:"symbol"},F={base:n$o,key:"type",typeMap:{"label-3d":b$4},errorContext:"symbol"},g$2=k$a(j$2);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let t$3=0;function e$4(){return ++t$3}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var m$3;let h$4=m$3=class extends a$B{constructor(...t){super(...t),this.isAggregate=!1,this.layer=null,this.popupTemplate=null,this.sourceLayer=null,Object.defineProperty(this,"uid",{value:e$4(),configurable:!0});}normalizeCtorArgs(t,e,r,s){return t&&!t.declaredClass?t:{geometry:t,symbol:e,attributes:r,popupTemplate:s}}set attributes(t){const e=this._get("attributes");e!==t&&(this._set("attributes",t),this._notifyLayer("attributes",e,t));}set geometry(t){const e=this._get("geometry");e!==t&&(this._set("geometry",t),this._notifyLayer("geometry",e,t));}set symbol(t){const e=this._get("symbol");e!==t&&(this._set("symbol",t),this._notifyLayer("symbol",e,t));}set visible(t){const e=this._get("visible");e!==t&&(this._set("visible",t),this._notifyLayer("visible",e,t));}getEffectivePopupTemplate(t=!1){return this.popupTemplate?this.popupTemplate:this.sourceLayer?"popupTemplate"in this.sourceLayer&&this.sourceLayer.popupTemplate?this.sourceLayer.popupTemplate:t&&"defaultPopupTemplate"in this.sourceLayer&&r$A(this.sourceLayer.defaultPopupTemplate)?this.sourceLayer.defaultPopupTemplate:null:null}getAttribute(t){return this.attributes&&this.attributes[t]}setAttribute(t,e){if(this.attributes){const r=this.getAttribute(t);this.attributes[t]=e,this._notifyLayer("attributes",r,e,t);}else this.attributes={[t]:e},this._notifyLayer("attributes",void 0,e,t);}getObjectId(){return this.sourceLayer&&"objectIdField"in this.sourceLayer&&this.sourceLayer.objectIdField?this.getAttribute(this.sourceLayer.objectIdField):null}toJSON(){return {geometry:r$A(this.geometry)?this.geometry.toJSON():null,symbol:r$A(this.symbol)?this.symbol.toJSON():null,attributes:{...this.attributes},popupTemplate:this.popupTemplate&&this.popupTemplate.toJSON()}}clone(){return new m$3(this.cloneProperties())}cloneProperties(){return {attributes:y$v(this.attributes),geometry:y$v(this.geometry),layer:this.layer,popupTemplate:this.popupTemplate&&this.popupTemplate.clone(),sourceLayer:this.sourceLayer,symbol:y$v(this.symbol),visible:this.visible}}_notifyLayer(t,e,r,s){if(!this.layer||!("graphicChanged"in this.layer))return;const o={graphic:this,property:t,oldValue:e,newValue:r};"attributes"===t&&(o.attributeName=s),this.layer.graphicChanged(o);}};e$u([y$r({value:null})],h$4.prototype,"attributes",null),e$u([y$r({value:null,types:i$F,json:{read:p$Q}})],h$4.prototype,"geometry",null),e$u([y$r({type:Boolean})],h$4.prototype,"isAggregate",void 0),e$u([y$r()],h$4.prototype,"layer",void 0),e$u([y$r({type:M$1})],h$4.prototype,"popupTemplate",void 0),e$u([y$r()],h$4.prototype,"sourceLayer",void 0),e$u([y$r({value:null,types:j$2})],h$4.prototype,"symbol",null),e$u([y$r({type:Boolean,value:!0})],h$4.prototype,"visible",null),h$4=m$3=e$u([i$X("esri.Graphic")],h$4),function(t){t.generateUID=e$4;}(h$4||(h$4={}));var n$3=h$4;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const i$5=new t$I({esriFieldTypeSmallInteger:"small-integer",esriFieldTypeInteger:"integer",esriFieldTypeSingle:"single",esriFieldTypeDouble:"double",esriFieldTypeLong:"long",esriFieldTypeString:"string",esriFieldTypeDate:"date",esriFieldTypeOID:"oid",esriFieldTypeGeometry:"geometry",esriFieldTypeBlob:"blob",esriFieldTypeRaster:"raster",esriFieldTypeGUID:"guid",esriFieldTypeGlobalID:"global-id",esriFieldTypeXML:"xml"});

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var u$1;const c$2=new t$I({binary:"binary",coordinate:"coordinate",countOrAmount:"count-or-amount",dateAndTime:"date-and-time",description:"description",locationOrPlaceName:"location-or-place-name",measurement:"measurement",nameOrTitle:"name-or-title",none:"none",orderedOrRanked:"ordered-or-ranked",percentageOrRatio:"percentage-or-ratio",typeOrCategory:"type-or-category",uniqueIdentifier:"unique-identifier"});let m$2=u$1=class extends a$B{constructor(e){super(e),this.alias=null,this.defaultValue=void 0,this.description=null,this.domain=null,this.editable=!0,this.length=-1,this.name=null,this.nullable=!0,this.type=null,this.valueType=null;}readDescription(e,{description:t}){let o;try{o=JSON.parse(t);}catch(r){}return o?o.value:null}readValueType(e,{description:t}){let o;try{o=JSON.parse(t);}catch(r){}return o?c$2.fromJSON(o.fieldValueType):null}clone(){return new u$1({alias:this.alias,defaultValue:this.defaultValue,description:this.description,domain:this.domain&&this.domain.clone()||null,editable:this.editable,length:this.length,name:this.name,nullable:this.nullable,type:this.type,valueType:this.valueType})}};e$u([y$r({type:String,json:{write:!0}})],m$2.prototype,"alias",void 0),e$u([y$r({type:[String,Number],json:{write:{allowNull:!0}}})],m$2.prototype,"defaultValue",void 0),e$u([y$r()],m$2.prototype,"description",void 0),e$u([e$C("description")],m$2.prototype,"readDescription",null),e$u([y$r({types:u$m,json:{read:{reader:d$n},write:!0}})],m$2.prototype,"domain",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],m$2.prototype,"editable",void 0),e$u([y$r({type:N$5,json:{write:!0}})],m$2.prototype,"length",void 0),e$u([y$r({type:String,json:{write:!0}})],m$2.prototype,"name",void 0),e$u([y$r({type:Boolean,json:{write:!0}})],m$2.prototype,"nullable",void 0),e$u([r$v(i$5)],m$2.prototype,"type",void 0),e$u([y$r()],m$2.prototype,"valueType",void 0),e$u([e$C("valueType",["description"])],m$2.prototype,"readValueType",null),m$2=u$1=e$u([i$X("esri.layers.support.Field")],m$2);var y$1=m$2;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const h$3=new t$I({esriGeometryPoint:"point",esriGeometryMultipoint:"multipoint",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"extent",mesh:"mesh","":null});let d$6=class extends a$B{constructor(e){super(e),this.displayFieldName=null,this.exceededTransferLimit=!1,this.features=[],this.fields=null,this.geometryType=null,this.hasM=!1,this.hasZ=!1,this.queryGeometry=null,this.spatialReference=null;}readFeatures(e,r){const o=k$4.fromJSON(r.spatialReference),s=[];for(let i=0;i<e.length;i++){const r=e[i],n=n$3.fromJSON(r),p=r.geometry&&r.geometry.spatialReference;r$A(n.geometry)&&!p&&(n.geometry.spatialReference=o),s.push(n);}return s}writeGeometryType(e,r,o,s){if(e)return void h$3.write(e,r,o,s);const{features:i}=this;if(i)for(const n of i)if(n&&r$A(n.geometry))return void h$3.write(n.geometry.type,r,o,s)}readQueryGeometry(e,t){if(!e)return null;const r=!!e.spatialReference,o=p$Q(e);return !r&&t.spatialReference&&(o.spatialReference=k$4.fromJSON(t.spatialReference)),o}writeSpatialReference(e,r){if(e)return void(r.spatialReference=e.toJSON());const{features:o}=this;if(o)for(const s of o)if(s&&r$A(s.geometry)&&s.geometry.spatialReference)return void(r.spatialReference=s.geometry.spatialReference.toJSON())}toJSON(e){const t=this.write(null);if(t.features&&Array.isArray(e)&&e.length>0)for(let r=0;r<t.features.length;r++){const o=t.features[r];if(o.geometry){const t=e&&e[r];o.geometry=t&&t.toJSON()||o.geometry;}}return t}quantize(e){const{scale:[t,o],translate:[s,i]}=e,n=e=>Math.round((e-s)/t),p=e=>Math.round((i-e)/o),l=this.features,a=this._getQuantizationFunction(this.geometryType,n,p);for(let y=0,u=l.length;y<u;y++)a(e$I(l[y].geometry))||(l.splice(y,1),y--,u--);return this.transform=e,this}unquantize(){const{geometryType:e,features:r,transform:o}=this;if(!o)return this;const{translate:[s,i],scale:[n,p]}=o,l=e=>e*n+s,a=e=>i-e*p,y=this._getHydrationFunction(e,l,a);for(const{geometry:u}of r)r$A(u)&&y(u);return this.transform=null,this}_quantizePoints(e,t,r){let o,s;const i=[];for(let n=0,p=e.length;n<p;n++){const p=e[n];if(n>0){const e=t(p[0]),n=r(p[1]);e===o&&n===s||(i.push([e-o,n-s]),o=e,s=n);}else o=t(p[0]),s=r(p[1]),i.push([o,s]);}return i.length>0?i:null}_getQuantizationFunction(e,t,r){return "point"===e?e=>(e.x=t(e.x),e.y=r(e.y),e):"polyline"===e||"polygon"===e?e=>{const o=y$a(e)?e.rings:e.paths,s=[];for(let i=0,n=o.length;i<n;i++){const e=o[i],n=this._quantizePoints(e,t,r);n&&s.push(n);}return s.length>0?(y$a(e)?e.rings=s:e.paths=s,e):null}:"multipoint"===e?e=>{const o=this._quantizePoints(e.points,t,r);return o.length>0?(e.points=o,e):null}:"extent"===e?e=>e:null}_getHydrationFunction(e,t,r){return "point"===e?e=>{e.x=t(e.x),e.y=r(e.y);}:"polyline"===e||"polygon"===e?e=>{const o=y$a(e)?e.rings:e.paths;let s,i;for(let n=0,p=o.length;n<p;n++){const e=o[n];for(let o=0,n=e.length;o<n;o++){const n=e[o];o>0?(s+=n[0],i+=n[1]):(s=n[0],i=n[1]),n[0]=t(s),n[1]=r(i);}}}:"extent"===e?e=>{e.xmin=t(e.xmin),e.ymin=r(e.ymin),e.xmax=t(e.xmax),e.ymax=r(e.ymax);}:"multipoint"===e?e=>{const o=e.points;let s,i;for(let n=0,p=o.length;n<p;n++){const e=o[n];n>0?(s+=e[0],i+=e[1]):(s=e[0],i=e[1]),e[0]=t(s),e[1]=r(i);}}:void 0}};e$u([y$r({type:String,json:{write:!0}})],d$6.prototype,"displayFieldName",void 0),e$u([y$r({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],d$6.prototype,"exceededTransferLimit",void 0),e$u([y$r({type:[n$3],json:{write:!0}})],d$6.prototype,"features",void 0),e$u([e$C("features")],d$6.prototype,"readFeatures",null),e$u([y$r({type:[y$1],json:{write:!0}})],d$6.prototype,"fields",void 0),e$u([y$r({type:["point","multipoint","polyline","polygon","extent","mesh"],json:{read:{reader:h$3.read}}})],d$6.prototype,"geometryType",void 0),e$u([o$v("geometryType")],d$6.prototype,"writeGeometryType",null),e$u([y$r({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],d$6.prototype,"hasM",void 0),e$u([y$r({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],d$6.prototype,"hasZ",void 0),e$u([y$r({types:i$F,json:{write:!0}})],d$6.prototype,"queryGeometry",void 0),e$u([e$C("queryGeometry")],d$6.prototype,"readQueryGeometry",null),e$u([y$r({type:k$4,json:{write:!0}})],d$6.prototype,"spatialReference",void 0),e$u([o$v("spatialReference")],d$6.prototype,"writeSpatialReference",null),e$u([y$r({json:{write:!0}})],d$6.prototype,"transform",void 0),d$6=e$u([i$X("esri.tasks.support.FeatureSet")],d$6),d$6.prototype.toJSON.isDefaultToJSON=!0,d$6||(d$6={});var g$1=d$6;

const FeatureSet = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': g$1
});

/**
 * Study area defined by a feature set.
 */
class FeatureSetStudyArea extends StudyArea {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super(source);
    if (source) {
      if (source.featureSet) {
        if (source.featureSet instanceof g$1) {
          this.featureSet = source.featureSet;
        }
        else {
          this.featureSet = g$1.fromJSON(source.featureSet);
        }
      }
    }
  }
  toJSON() {
    const json = super.toJSON();
    json.featureSet = this.featureSet && this.featureSet.toJSON();
    return json;
  }
}

/**
 * Study area defined by a geometry.
 */
const PRECISION = 10;
function _processPoints(points) {
  points.forEach((point) => {
    point[0] = parseFloat(point[0].toFixed(PRECISION));
    point[1] = parseFloat(point[1].toFixed(PRECISION));
  });
}
class GeometryStudyArea extends StudyArea {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super(source);
    if (source) {
      if (source.geometry) {
        if (source.geometry instanceof c$O) {
          this.geometry = source.geometry;
        }
        else {
          this.geometry = p$Q(source.geometry);
        }
      }
    }
  }
  getGeomType() {
    return this.geometry.type;
  }
  toJSON() {
    const json = super.toJSON();
    json.geometry = this.geometry && this.geometry.toJSON();
    const geometry = json.geometry;
    // Some number do not get used correctly in Chrome & FF, e.g. Numbers 33.861252372599345 or 33.861252372599347
    // appear to be 33.861252372599346 in the run time.
    // This becomes a problem when using keys accross different browers that might work with numbers differently.
    // need to reduce the precision of points in geometry
    if (geometry) {
      // multipoint
      if (geometry.points) {
        _processPoints(geometry.points);
      }
      // polyline
      else if (geometry.paths) {
        geometry.paths.forEach(_processPoints);
      }
      // polygon
      else if (geometry.rings) {
        geometry.rings.forEach(_processPoints);
      }
    }
    return json;
  }
}

/**
 * Study area defined by a standard geography.
 */
class StandardGeographyStudyArea extends StudyArea {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super(source);
    if (source) {
      const countryID = source.sourceCountry || source.countryID;
      if (countryID) {
        this.countryID = countryID;
      }
      const layer = source.layer || source.geographyLayerID;
      if (layer) {
        this.geographyLayerID = layer;
      }
      if (source.ids) {
        this.ids = source.ids;
      }
    }
  }
  getGeomType() {
    return "polygon";
  }
  toJSON() {
    const json = super.toJSON();
    if (this.countryID) {
      json.sourceCountry = this.countryID;
    }
    if (this.geographyLayerID) {
      json.layer = this.geographyLayerID;
    }
    if (this.ids) {
      json.ids = this.ids.slice();
    }
    return json;
  }
}

// geoenrichment.tasks
/**
 * Utility function to deserialize study area from JSON
 */
const studyAreaFromJson = function (json) {
  if (json.geometry) {
    return new GeometryStudyArea(json);
  }
  if (json.featureSet) {
    return new FeatureSetStudyArea(json);
  }
  if (json.address) {
    return new AddressStudyArea(json);
  }
  if (json.layer) {
    return new StandardGeographyStudyArea(json);
  }
  return null;
};

function isGeometryStudyArea(studyArea) {
  return !!studyArea.geometry;
}

/**
 * Base class for parameters of GeoenrichmentTask.enrich and GeoenrichmentTask.createReport methods.
 */
class EnrichParametersBase {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    this.studyAreas = [];
    if (!source) {
      return;
    }
    if (source.studyAreas) {
      let inSR;
      if (source.inSR) {
        inSR = source.inSR;
      }
      const studyAreas = source.studyAreas;
      for (let i = 0; i < studyAreas.length; i++) {
        const studyArea = studyAreaFromJson(studyAreas[i]);
        if (inSR && isGeometryStudyArea(studyArea)) {
          studyArea.geometry.spatialReference = new k$4(inSR);
        }
        this.studyAreas.push(studyArea);
      }
    }
    if (source.studyAreasOptions) {
      this.studyAreaOptions = studyAreaOptionsFromJson(source.studyAreasOptions);
    }
    else if (source.studyAreaOptions) {
      if (source.studyAreaOptions instanceof StudyAreaOptions) {
        this.studyAreaOptions = source.studyAreaOptions;
      }
      else {
        this.studyAreaOptions = studyAreaOptionsFromJson(source.studyAreaOptions);
      }
    }
    const usedata = source.useData;
    if (usedata) {
      if (usedata.sourceCountry) {
        this.countryID = usedata.sourceCountry;
      }
      if (usedata.hierarchy) {
        this.hierarchy = usedata.hierarchy;
      }
    }
    else {
      if (source.countryID) {
        this.countryID = source.countryID;
      }
      if (source.hierarchy) {
        this.hierarchy = source.hierarchy;
      }
    }
  }
  toJSON() {
    const json = {};
    const studyAreas = [];
    for (let i = 0; i < this.studyAreas.length; i++) {
      const studyArea = this.studyAreas[i];
      studyAreas.push(studyArea.toJSON());
    }
    //TO DO: use inSR if all study areas are in the same spatial reference
    //if (inSR) {
    //    json.inSR = inSR;
    //}
    if (studyAreas.length > 0) {
      json.studyAreas = studyAreas;
    }
    if (this.studyAreaOptions) {
      json.studyAreasOptions = this.studyAreaOptions.toJSON();
    }
    if (this.countryID || this.hierarchy) {
      const usedata = {};
      if (this.countryID) {
        usedata.sourceCountry = this.countryID;
      }
      if (this.hierarchy) {
        usedata.hierarchy = this.hierarchy;
      }
      json.useData = usedata;
    }
    return json;
  }
}

class IntersectingGeography {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    this.geometryType = "esriGeometryPoint";
    this.spatialRel = "esriSpatialRelIntersects";
    if (source) {
      this.name = source.name || null;
      this.outFields = source.outFields || null;
      if (source.intersectionInfo) {
        if (source.intersectionInfo.geometryType) {
          this.geometryType = source.intersectionInfo.geometryType;
        }
        if (source.intersectionInfo.spatialRel) {
          this.spatialRel = source.intersectionInfo.spatialRel;
        }
      }
      else {
        if (source.geometryType) {
          this.geometryType = source.geometryType;
        }
        if (source.spatialRel) {
          this.spatialRel = source.spatialRel;
        }
      }
    }
  }
  toJSON() {
    return {
      name: this.name,
      outFields: this.outFields,
      intersectionInfo: {
        geometryType: this.geometryType,
        spatialRel: this.spatialRel
      }
    };
  }
}

class StandardIntersectingGeography extends IntersectingGeography {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super(source);
    if (source) {
      this.geographyLayerID = source.geographyLayer || source.geographyLayerID || null;
    }
  }
  toJSON() {
    const json = super.toJSON();
    json.geographyType = "standard";
    json.geographyLayer = this.geographyLayerID;
    return json;
  }
}

/**
 * Represents GeoenrichmentTask.enrich parameters.
 */
class EnrichParameters extends EnrichParametersBase {
  /**
   * Can be created from a json object or by passing some parameters directly.
   */
  constructor(source) {
    super(source);
    /**
     * Determines whether response will also include actual study area geometry.
     * For example, if input study area is a line, the response will inlude buffer polygon built around the line. Defaults to false.
     */
    this.returnGeometry = false;
    /**
     * The price for using the "Enrich" method varies according to whether the data returned is being persisted, i.e. being stored, or whether it is merely being used in an interactive context and is discarded after being viewed. If the data is being stored, the terms of use for the GeoEnrichment service require that you specify the "forStorage" parameter to true.
     */
    this.forStorage = true;
    this.variables = [];
    if (source) {
      this.variables = source.analysisVariables || source.variables || null;
      if (source.returnGeometry) {
        this.returnGeometry = true;
      }
      if (source.outSR) {
        this.outSR = new k$4(source.outSR);
      }
      if (source.forStorage) {
        this.forStorage = source.forStorage;
      }
      if (source.intersectingGeographies) {
        this.intersectingGeographies = [];
        for (let i = 0; i < source.intersectingGeographies.length; i++) {
          const intGeo = source.intersectingGeographies[i];
          if (intGeo.geographyType === "standard") {
            this.intersectingGeographies.push(new StandardIntersectingGeography(intGeo));
          }
          else if (intGeo.geographyType === "external") {
            //
            //TO DO: contruct "external" intersecting geos here
            //
            throw new Error("Not implemented");
          }
        }
      }
    }
  }
  toJSON() {
    const json = super.toJSON();
    json.analysisVariables = this.variables;
    if (this.returnGeometry) {
      json.returnGeometry = true;
    }
    if (this.outSR) {
      json.outSR = this.outSR.toJSON();
    }
    if (!this.forStorage) {
      json.forStorage = false;
    }
    if (this.intersectingGeographies) {
      json.intersectingGeographies = [];
      for (let i = 0; i < this.intersectingGeographies.length; i++) {
        json.intersectingGeographies.push(this.intersectingGeographies[i].toJSON());
      }
    }
    return json;
  }
}

/**
 * Adds some properties to the standard FeatureSet class that came from geoenrichment.enrich endpoint.
 */
function fieldTypeFromJSON(type) {
  return (type && type.replace("esriFieldType", "").toLowerCase());
}
function geomTypeFromJSON(type) {
  return (type && type.replace("esriGeometry", "").toLowerCase());
}
function fieldTypeToJSON(type) {
  return (type && ("esriFieldType" + type.charAt(0).toUpperCase() + type.substr(1)));
}
function geomTypeToJSON(type) {
  return (type && ("esriGeometry" + type.charAt(0).toUpperCase() + type.substr(1)));
}
/*
    Feature Set Example (This is how GE/Enrich returns it now):
  {
        "fieldAliases": {
          "TOP1NUM": "Top 1 Segment Number",
          "TOP1NAME": "Top 1 Segment Name",
            ...
        },
        "fields": [{
            "name": "TOP1NUM",
            "type": "esriFieldTypeDouble",
            "alias": "Top 1 Segment Number",
            "fullName": "TapestryNEW.TOP1NUM",
            "component": "demographics",
            "decimals": 0,
            "units": "count"
          }, {
            "name": "TOP1NAME",
            "type": "esriFieldTypeString",
            "alias": "Top 1 Segment Name",
            "fullName": "TapestryNEW.TOP1NAME",
            "component": "demographics",
            "length": 100,
            "units": "other"
          },
            ...
        ],
        "features": [{
            "attributes": {
              "TOP1NUM": 28,
              "TOP1NAME": "Urban Villages",
                    ...
            }
          }
        ]
    }
*/
class GEFeatureSet {
  constructor(json) {
    if (!json) {
      return;
    }
    this.fields =
      (json.fields &&
        json.fields.map((field) => ({
          name: field.name,
          type: fieldTypeFromJSON(field.type),
          alias: field.alias,
          description: field.description,
          length: field.length,
          // additional properties from Geoenrichment
          units: field.units,
          decimals: field.decimals,
          fullName: field.fullName
        }))) ||
        [];
    this.features =
      (json.features &&
        json.features.map((fJson) => {
          if (fJson.geometry) {
            fJson.geometry.spatialReference = json.spatialReference && y$v(json.spatialReference);
          }
          return new n$3({
            attributes: fJson.attributes,
            geometry: fJson.geometry && p$Q(fJson.geometry)
          });
        })) ||
        [];
    this.geometryType = geomTypeFromJSON(json.geometryType);
    this.fieldAliases = json.fieldAliases;
    this.spatialReference = json.spatialReference && new k$4(json.spatialReference);
  }
  toJSON() {
    return {
      fields: this.fields.map((field) => ({
        name: field.name,
        type: fieldTypeToJSON(field.type),
        alias: field.alias,
        description: field.description,
        length: field.length,
        // additional properties from Geoenrichment
        units: field.units,
        decimals: field.decimals,
        fullName: field.fullName
      })),
      features: this.features.map((feature) => feature.toJSON()),
      geometryType: geomTypeToJSON(this.geometryType),
      fieldAliases: this.fieldAliases && y$v(this.fieldAliases),
      spatialReference: this.spatialReference && this.spatialReference.toJSON()
    };
  }
  static fromField(field) {
    return {
      name: field.name,
      type: field.type,
      alias: field.alias,
      description: field.description,
      length: field.length
    };
  }
  static toField(field) {
    return new y$1({
      name: field.name,
      type: field.type,
      alias: field.alias,
      description: field.description,
      length: field.length
    });
  }
  static fromFeatureSet(fs) {
    if (fs instanceof GEFeatureSet) {
      return fs;
    }
    const geFs = new GEFeatureSet();
    geFs.fields = fs.fields.map(this.fromField) || [];
    geFs.features = fs.features.slice();
    geFs.geometryType = fs.geometryType;
    geFs.spatialReference = fs.spatialReference;
    return geFs;
  }
  static toFeatureSet(geFs) {
    const fs = new g$1();
    fs.fields = geFs.fields.map(this.toField) || [];
    fs.features = geFs.features.slice();
    fs.geometryType = geFs.geometryType;
    fs.spatialReference = geFs.spatialReference;
    return fs;
  }
}

/*!
 * @esri/arcgis-html-sanitizer - v2.5.0 - Mon Nov 09 2020 11:08:35 GMT-0500 (Eastern Standard Time)
 * Copyright (c) 2020 - Environmental Systems Research Institute, Inc.
 * Apache-2.0
 * 
 * js-xss
 * Copyright (c) 2012-2017 Zongmin Lei(雷宗民) <leizongmin@gmail.com>
 * http://ucdok.com
 * MIT License, see https://github.com/leizongmin/js-xss/blob/master/LICENSE for details
 * 
 * Lodash/isPlainObject
 * Copyright (c) JS Foundation and other contributors <https://js.foundation/>
 * MIT License, see https://raw.githubusercontent.com/lodash/lodash/4.17.10-npm/LICENSE for details
 */
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) ||
      objectToString.call(value) != objectTag || isHostObject(value)) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

var lodash_isplainobject = isPlainObject;

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire();
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

function getDefaultWhiteList () {
  // 白名单值说明：
  // true: 允许该属性
  // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
  // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
  // 除上面列出的值外均表示不允许
  var whiteList = {};

  whiteList['align-content'] = false; // default: auto
  whiteList['align-items'] = false; // default: auto
  whiteList['align-self'] = false; // default: auto
  whiteList['alignment-adjust'] = false; // default: auto
  whiteList['alignment-baseline'] = false; // default: baseline
  whiteList['all'] = false; // default: depending on individual properties
  whiteList['anchor-point'] = false; // default: none
  whiteList['animation'] = false; // default: depending on individual properties
  whiteList['animation-delay'] = false; // default: 0
  whiteList['animation-direction'] = false; // default: normal
  whiteList['animation-duration'] = false; // default: 0
  whiteList['animation-fill-mode'] = false; // default: none
  whiteList['animation-iteration-count'] = false; // default: 1
  whiteList['animation-name'] = false; // default: none
  whiteList['animation-play-state'] = false; // default: running
  whiteList['animation-timing-function'] = false; // default: ease
  whiteList['azimuth'] = false; // default: center
  whiteList['backface-visibility'] = false; // default: visible
  whiteList['background'] = true; // default: depending on individual properties
  whiteList['background-attachment'] = true; // default: scroll
  whiteList['background-clip'] = true; // default: border-box
  whiteList['background-color'] = true; // default: transparent
  whiteList['background-image'] = true; // default: none
  whiteList['background-origin'] = true; // default: padding-box
  whiteList['background-position'] = true; // default: 0% 0%
  whiteList['background-repeat'] = true; // default: repeat
  whiteList['background-size'] = true; // default: auto
  whiteList['baseline-shift'] = false; // default: baseline
  whiteList['binding'] = false; // default: none
  whiteList['bleed'] = false; // default: 6pt
  whiteList['bookmark-label'] = false; // default: content()
  whiteList['bookmark-level'] = false; // default: none
  whiteList['bookmark-state'] = false; // default: open
  whiteList['border'] = true; // default: depending on individual properties
  whiteList['border-bottom'] = true; // default: depending on individual properties
  whiteList['border-bottom-color'] = true; // default: current color
  whiteList['border-bottom-left-radius'] = true; // default: 0
  whiteList['border-bottom-right-radius'] = true; // default: 0
  whiteList['border-bottom-style'] = true; // default: none
  whiteList['border-bottom-width'] = true; // default: medium
  whiteList['border-collapse'] = true; // default: separate
  whiteList['border-color'] = true; // default: depending on individual properties
  whiteList['border-image'] = true; // default: none
  whiteList['border-image-outset'] = true; // default: 0
  whiteList['border-image-repeat'] = true; // default: stretch
  whiteList['border-image-slice'] = true; // default: 100%
  whiteList['border-image-source'] = true; // default: none
  whiteList['border-image-width'] = true; // default: 1
  whiteList['border-left'] = true; // default: depending on individual properties
  whiteList['border-left-color'] = true; // default: current color
  whiteList['border-left-style'] = true; // default: none
  whiteList['border-left-width'] = true; // default: medium
  whiteList['border-radius'] = true; // default: 0
  whiteList['border-right'] = true; // default: depending on individual properties
  whiteList['border-right-color'] = true; // default: current color
  whiteList['border-right-style'] = true; // default: none
  whiteList['border-right-width'] = true; // default: medium
  whiteList['border-spacing'] = true; // default: 0
  whiteList['border-style'] = true; // default: depending on individual properties
  whiteList['border-top'] = true; // default: depending on individual properties
  whiteList['border-top-color'] = true; // default: current color
  whiteList['border-top-left-radius'] = true; // default: 0
  whiteList['border-top-right-radius'] = true; // default: 0
  whiteList['border-top-style'] = true; // default: none
  whiteList['border-top-width'] = true; // default: medium
  whiteList['border-width'] = true; // default: depending on individual properties
  whiteList['bottom'] = false; // default: auto
  whiteList['box-decoration-break'] = true; // default: slice
  whiteList['box-shadow'] = true; // default: none
  whiteList['box-sizing'] = true; // default: content-box
  whiteList['box-snap'] = true; // default: none
  whiteList['box-suppress'] = true; // default: show
  whiteList['break-after'] = true; // default: auto
  whiteList['break-before'] = true; // default: auto
  whiteList['break-inside'] = true; // default: auto
  whiteList['caption-side'] = false; // default: top
  whiteList['chains'] = false; // default: none
  whiteList['clear'] = true; // default: none
  whiteList['clip'] = false; // default: auto
  whiteList['clip-path'] = false; // default: none
  whiteList['clip-rule'] = false; // default: nonzero
  whiteList['color'] = true; // default: implementation dependent
  whiteList['color-interpolation-filters'] = true; // default: auto
  whiteList['column-count'] = false; // default: auto
  whiteList['column-fill'] = false; // default: balance
  whiteList['column-gap'] = false; // default: normal
  whiteList['column-rule'] = false; // default: depending on individual properties
  whiteList['column-rule-color'] = false; // default: current color
  whiteList['column-rule-style'] = false; // default: medium
  whiteList['column-rule-width'] = false; // default: medium
  whiteList['column-span'] = false; // default: none
  whiteList['column-width'] = false; // default: auto
  whiteList['columns'] = false; // default: depending on individual properties
  whiteList['contain'] = false; // default: none
  whiteList['content'] = false; // default: normal
  whiteList['counter-increment'] = false; // default: none
  whiteList['counter-reset'] = false; // default: none
  whiteList['counter-set'] = false; // default: none
  whiteList['crop'] = false; // default: auto
  whiteList['cue'] = false; // default: depending on individual properties
  whiteList['cue-after'] = false; // default: none
  whiteList['cue-before'] = false; // default: none
  whiteList['cursor'] = false; // default: auto
  whiteList['direction'] = false; // default: ltr
  whiteList['display'] = true; // default: depending on individual properties
  whiteList['display-inside'] = true; // default: auto
  whiteList['display-list'] = true; // default: none
  whiteList['display-outside'] = true; // default: inline-level
  whiteList['dominant-baseline'] = false; // default: auto
  whiteList['elevation'] = false; // default: level
  whiteList['empty-cells'] = false; // default: show
  whiteList['filter'] = false; // default: none
  whiteList['flex'] = false; // default: depending on individual properties
  whiteList['flex-basis'] = false; // default: auto
  whiteList['flex-direction'] = false; // default: row
  whiteList['flex-flow'] = false; // default: depending on individual properties
  whiteList['flex-grow'] = false; // default: 0
  whiteList['flex-shrink'] = false; // default: 1
  whiteList['flex-wrap'] = false; // default: nowrap
  whiteList['float'] = false; // default: none
  whiteList['float-offset'] = false; // default: 0 0
  whiteList['flood-color'] = false; // default: black
  whiteList['flood-opacity'] = false; // default: 1
  whiteList['flow-from'] = false; // default: none
  whiteList['flow-into'] = false; // default: none
  whiteList['font'] = true; // default: depending on individual properties
  whiteList['font-family'] = true; // default: implementation dependent
  whiteList['font-feature-settings'] = true; // default: normal
  whiteList['font-kerning'] = true; // default: auto
  whiteList['font-language-override'] = true; // default: normal
  whiteList['font-size'] = true; // default: medium
  whiteList['font-size-adjust'] = true; // default: none
  whiteList['font-stretch'] = true; // default: normal
  whiteList['font-style'] = true; // default: normal
  whiteList['font-synthesis'] = true; // default: weight style
  whiteList['font-variant'] = true; // default: normal
  whiteList['font-variant-alternates'] = true; // default: normal
  whiteList['font-variant-caps'] = true; // default: normal
  whiteList['font-variant-east-asian'] = true; // default: normal
  whiteList['font-variant-ligatures'] = true; // default: normal
  whiteList['font-variant-numeric'] = true; // default: normal
  whiteList['font-variant-position'] = true; // default: normal
  whiteList['font-weight'] = true; // default: normal
  whiteList['grid'] = false; // default: depending on individual properties
  whiteList['grid-area'] = false; // default: depending on individual properties
  whiteList['grid-auto-columns'] = false; // default: auto
  whiteList['grid-auto-flow'] = false; // default: none
  whiteList['grid-auto-rows'] = false; // default: auto
  whiteList['grid-column'] = false; // default: depending on individual properties
  whiteList['grid-column-end'] = false; // default: auto
  whiteList['grid-column-start'] = false; // default: auto
  whiteList['grid-row'] = false; // default: depending on individual properties
  whiteList['grid-row-end'] = false; // default: auto
  whiteList['grid-row-start'] = false; // default: auto
  whiteList['grid-template'] = false; // default: depending on individual properties
  whiteList['grid-template-areas'] = false; // default: none
  whiteList['grid-template-columns'] = false; // default: none
  whiteList['grid-template-rows'] = false; // default: none
  whiteList['hanging-punctuation'] = false; // default: none
  whiteList['height'] = true; // default: auto
  whiteList['hyphens'] = false; // default: manual
  whiteList['icon'] = false; // default: auto
  whiteList['image-orientation'] = false; // default: auto
  whiteList['image-resolution'] = false; // default: normal
  whiteList['ime-mode'] = false; // default: auto
  whiteList['initial-letters'] = false; // default: normal
  whiteList['inline-box-align'] = false; // default: last
  whiteList['justify-content'] = false; // default: auto
  whiteList['justify-items'] = false; // default: auto
  whiteList['justify-self'] = false; // default: auto
  whiteList['left'] = false; // default: auto
  whiteList['letter-spacing'] = true; // default: normal
  whiteList['lighting-color'] = true; // default: white
  whiteList['line-box-contain'] = false; // default: block inline replaced
  whiteList['line-break'] = false; // default: auto
  whiteList['line-grid'] = false; // default: match-parent
  whiteList['line-height'] = false; // default: normal
  whiteList['line-snap'] = false; // default: none
  whiteList['line-stacking'] = false; // default: depending on individual properties
  whiteList['line-stacking-ruby'] = false; // default: exclude-ruby
  whiteList['line-stacking-shift'] = false; // default: consider-shifts
  whiteList['line-stacking-strategy'] = false; // default: inline-line-height
  whiteList['list-style'] = true; // default: depending on individual properties
  whiteList['list-style-image'] = true; // default: none
  whiteList['list-style-position'] = true; // default: outside
  whiteList['list-style-type'] = true; // default: disc
  whiteList['margin'] = true; // default: depending on individual properties
  whiteList['margin-bottom'] = true; // default: 0
  whiteList['margin-left'] = true; // default: 0
  whiteList['margin-right'] = true; // default: 0
  whiteList['margin-top'] = true; // default: 0
  whiteList['marker-offset'] = false; // default: auto
  whiteList['marker-side'] = false; // default: list-item
  whiteList['marks'] = false; // default: none
  whiteList['mask'] = false; // default: border-box
  whiteList['mask-box'] = false; // default: see individual properties
  whiteList['mask-box-outset'] = false; // default: 0
  whiteList['mask-box-repeat'] = false; // default: stretch
  whiteList['mask-box-slice'] = false; // default: 0 fill
  whiteList['mask-box-source'] = false; // default: none
  whiteList['mask-box-width'] = false; // default: auto
  whiteList['mask-clip'] = false; // default: border-box
  whiteList['mask-image'] = false; // default: none
  whiteList['mask-origin'] = false; // default: border-box
  whiteList['mask-position'] = false; // default: center
  whiteList['mask-repeat'] = false; // default: no-repeat
  whiteList['mask-size'] = false; // default: border-box
  whiteList['mask-source-type'] = false; // default: auto
  whiteList['mask-type'] = false; // default: luminance
  whiteList['max-height'] = true; // default: none
  whiteList['max-lines'] = false; // default: none
  whiteList['max-width'] = true; // default: none
  whiteList['min-height'] = true; // default: 0
  whiteList['min-width'] = true; // default: 0
  whiteList['move-to'] = false; // default: normal
  whiteList['nav-down'] = false; // default: auto
  whiteList['nav-index'] = false; // default: auto
  whiteList['nav-left'] = false; // default: auto
  whiteList['nav-right'] = false; // default: auto
  whiteList['nav-up'] = false; // default: auto
  whiteList['object-fit'] = false; // default: fill
  whiteList['object-position'] = false; // default: 50% 50%
  whiteList['opacity'] = false; // default: 1
  whiteList['order'] = false; // default: 0
  whiteList['orphans'] = false; // default: 2
  whiteList['outline'] = false; // default: depending on individual properties
  whiteList['outline-color'] = false; // default: invert
  whiteList['outline-offset'] = false; // default: 0
  whiteList['outline-style'] = false; // default: none
  whiteList['outline-width'] = false; // default: medium
  whiteList['overflow'] = false; // default: depending on individual properties
  whiteList['overflow-wrap'] = false; // default: normal
  whiteList['overflow-x'] = false; // default: visible
  whiteList['overflow-y'] = false; // default: visible
  whiteList['padding'] = true; // default: depending on individual properties
  whiteList['padding-bottom'] = true; // default: 0
  whiteList['padding-left'] = true; // default: 0
  whiteList['padding-right'] = true; // default: 0
  whiteList['padding-top'] = true; // default: 0
  whiteList['page'] = false; // default: auto
  whiteList['page-break-after'] = false; // default: auto
  whiteList['page-break-before'] = false; // default: auto
  whiteList['page-break-inside'] = false; // default: auto
  whiteList['page-policy'] = false; // default: start
  whiteList['pause'] = false; // default: implementation dependent
  whiteList['pause-after'] = false; // default: implementation dependent
  whiteList['pause-before'] = false; // default: implementation dependent
  whiteList['perspective'] = false; // default: none
  whiteList['perspective-origin'] = false; // default: 50% 50%
  whiteList['pitch'] = false; // default: medium
  whiteList['pitch-range'] = false; // default: 50
  whiteList['play-during'] = false; // default: auto
  whiteList['position'] = false; // default: static
  whiteList['presentation-level'] = false; // default: 0
  whiteList['quotes'] = false; // default: text
  whiteList['region-fragment'] = false; // default: auto
  whiteList['resize'] = false; // default: none
  whiteList['rest'] = false; // default: depending on individual properties
  whiteList['rest-after'] = false; // default: none
  whiteList['rest-before'] = false; // default: none
  whiteList['richness'] = false; // default: 50
  whiteList['right'] = false; // default: auto
  whiteList['rotation'] = false; // default: 0
  whiteList['rotation-point'] = false; // default: 50% 50%
  whiteList['ruby-align'] = false; // default: auto
  whiteList['ruby-merge'] = false; // default: separate
  whiteList['ruby-position'] = false; // default: before
  whiteList['shape-image-threshold'] = false; // default: 0.0
  whiteList['shape-outside'] = false; // default: none
  whiteList['shape-margin'] = false; // default: 0
  whiteList['size'] = false; // default: auto
  whiteList['speak'] = false; // default: auto
  whiteList['speak-as'] = false; // default: normal
  whiteList['speak-header'] = false; // default: once
  whiteList['speak-numeral'] = false; // default: continuous
  whiteList['speak-punctuation'] = false; // default: none
  whiteList['speech-rate'] = false; // default: medium
  whiteList['stress'] = false; // default: 50
  whiteList['string-set'] = false; // default: none
  whiteList['tab-size'] = false; // default: 8
  whiteList['table-layout'] = false; // default: auto
  whiteList['text-align'] = true; // default: start
  whiteList['text-align-last'] = true; // default: auto
  whiteList['text-combine-upright'] = true; // default: none
  whiteList['text-decoration'] = true; // default: none
  whiteList['text-decoration-color'] = true; // default: currentColor
  whiteList['text-decoration-line'] = true; // default: none
  whiteList['text-decoration-skip'] = true; // default: objects
  whiteList['text-decoration-style'] = true; // default: solid
  whiteList['text-emphasis'] = true; // default: depending on individual properties
  whiteList['text-emphasis-color'] = true; // default: currentColor
  whiteList['text-emphasis-position'] = true; // default: over right
  whiteList['text-emphasis-style'] = true; // default: none
  whiteList['text-height'] = true; // default: auto
  whiteList['text-indent'] = true; // default: 0
  whiteList['text-justify'] = true; // default: auto
  whiteList['text-orientation'] = true; // default: mixed
  whiteList['text-overflow'] = true; // default: clip
  whiteList['text-shadow'] = true; // default: none
  whiteList['text-space-collapse'] = true; // default: collapse
  whiteList['text-transform'] = true; // default: none
  whiteList['text-underline-position'] = true; // default: auto
  whiteList['text-wrap'] = true; // default: normal
  whiteList['top'] = false; // default: auto
  whiteList['transform'] = false; // default: none
  whiteList['transform-origin'] = false; // default: 50% 50% 0
  whiteList['transform-style'] = false; // default: flat
  whiteList['transition'] = false; // default: depending on individual properties
  whiteList['transition-delay'] = false; // default: 0s
  whiteList['transition-duration'] = false; // default: 0s
  whiteList['transition-property'] = false; // default: all
  whiteList['transition-timing-function'] = false; // default: ease
  whiteList['unicode-bidi'] = false; // default: normal
  whiteList['vertical-align'] = false; // default: baseline
  whiteList['visibility'] = false; // default: visible
  whiteList['voice-balance'] = false; // default: center
  whiteList['voice-duration'] = false; // default: auto
  whiteList['voice-family'] = false; // default: implementation dependent
  whiteList['voice-pitch'] = false; // default: medium
  whiteList['voice-range'] = false; // default: medium
  whiteList['voice-rate'] = false; // default: normal
  whiteList['voice-stress'] = false; // default: normal
  whiteList['voice-volume'] = false; // default: medium
  whiteList['volume'] = false; // default: medium
  whiteList['white-space'] = false; // default: normal
  whiteList['widows'] = false; // default: 2
  whiteList['width'] = true; // default: auto
  whiteList['will-change'] = false; // default: auto
  whiteList['word-break'] = true; // default: normal
  whiteList['word-spacing'] = true; // default: normal
  whiteList['word-wrap'] = true; // default: normal
  whiteList['wrap-flow'] = false; // default: auto
  whiteList['wrap-through'] = false; // default: wrap
  whiteList['writing-mode'] = false; // default: horizontal-tb
  whiteList['z-index'] = false; // default: auto

  return whiteList;
}


/**
 * 匹配到白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onAttr (name, value, options) {
  // do nothing
}

/**
 * 匹配到不在白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onIgnoreAttr (name, value, options) {
  // do nothing
}

var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;

/**
 * 过滤属性值
 *
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function safeAttrValue(name, value) {
  if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
  return value;
}


var whiteList = getDefaultWhiteList();
var getDefaultWhiteList_1 = getDefaultWhiteList;
var onAttr_1 = onAttr;
var onIgnoreAttr_1 = onIgnoreAttr;
var safeAttrValue_1 = safeAttrValue;

var _default = {
	whiteList: whiteList,
	getDefaultWhiteList: getDefaultWhiteList_1,
	onAttr: onAttr_1,
	onIgnoreAttr: onIgnoreAttr_1,
	safeAttrValue: safeAttrValue_1
};

var util = {
  indexOf: function (arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function (arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function (str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, '');
  },
  trimRight: function (str) {
    if (String.prototype.trimRight) {
      return str.trimRight();
    }
    return str.replace(/(\s*$)/g, '');
  }
};

/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */




/**
 * 解析style
 *
 * @param {String} css
 * @param {Function} onAttr 处理属性的函数
 *   参数格式： function (sourcePosition, position, name, value, source)
 * @return {String}
 */
function parseStyle (css, onAttr) {
  css = util.trimRight(css);
  if (css[css.length - 1] !== ';') css += ';';
  var cssLength = css.length;
  var isParenthesisOpen = false;
  var lastPos = 0;
  var i = 0;
  var retCSS = '';

  function addNewAttr () {
    // 如果没有正常的闭合圆括号，则直接忽略当前属性
    if (!isParenthesisOpen) {
      var source = util.trim(css.slice(lastPos, i));
      var j = source.indexOf(':');
      if (j !== -1) {
        var name = util.trim(source.slice(0, j));
        var value = util.trim(source.slice(j + 1));
        // 必须有属性名称
        if (name) {
          var ret = onAttr(lastPos, retCSS.length, name, value, source);
          if (ret) retCSS += ret + '; ';
        }
      }
    }
    lastPos = i + 1;
  }

  for (; i < cssLength; i++) {
    var c = css[i];
    if (c === '/' && css[i + 1] === '*') {
      // 备注开始
      var j = css.indexOf('*/', i + 2);
      // 如果没有正常的备注结束，则后面的部分全部跳过
      if (j === -1) break;
      // 直接将当前位置调到备注结尾，并且初始化状态
      i = j + 1;
      lastPos = i + 1;
      isParenthesisOpen = false;
    } else if (c === '(') {
      isParenthesisOpen = true;
    } else if (c === ')') {
      isParenthesisOpen = false;
    } else if (c === ';') {
      if (isParenthesisOpen) ; else {
        addNewAttr();
      }
    } else if (c === '\n') {
      addNewAttr();
    }
  }

  return util.trim(retCSS);
}

var parser = parseStyle;

/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */






/**
 * 返回值是否为空
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull (obj) {
  return (obj === undefined || obj === null);
}

/**
 * 浅拷贝对象
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject (obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

/**
 * 创建CSS过滤器
 *
 * @param {Object} options
 *   - {Object} whiteList
 *   - {Function} onAttr
 *   - {Function} onIgnoreAttr
 *   - {Function} safeAttrValue
 */
function FilterCSS (options) {
  options = shallowCopyObject(options || {});
  options.whiteList = options.whiteList || _default.whiteList;
  options.onAttr = options.onAttr || _default.onAttr;
  options.onIgnoreAttr = options.onIgnoreAttr || _default.onIgnoreAttr;
  options.safeAttrValue = options.safeAttrValue || _default.safeAttrValue;
  this.options = options;
}

FilterCSS.prototype.process = function (css) {
  // 兼容各种奇葩输入
  css = css || '';
  css = css.toString();
  if (!css) return '';

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onAttr = options.onAttr;
  var onIgnoreAttr = options.onIgnoreAttr;
  var safeAttrValue = options.safeAttrValue;

  var retCSS = parser(css, function (sourcePosition, position, name, value, source) {

    var check = whiteList[name];
    var isWhite = false;
    if (check === true) isWhite = check;
    else if (typeof check === 'function') isWhite = check(value);
    else if (check instanceof RegExp) isWhite = check.test(value);
    if (isWhite !== true) isWhite = false;

    // 如果过滤后 value 为空则直接忽略
    value = safeAttrValue(name, value);
    if (!value) return;

    var opts = {
      position: position,
      sourcePosition: sourcePosition,
      source: source,
      isWhite: isWhite
    };

    if (isWhite) {

      var ret = onAttr(name, value, opts);
      if (isNull(ret)) {
        return name + ':' + value;
      } else {
        return ret;
      }

    } else {

      var ret = onIgnoreAttr(name, value, opts);
      if (!isNull(ret)) {
        return ret;
      }

    }
  });

  return retCSS;
};


var css = FilterCSS;

var lib = createCommonjsModule(function (module, exports) {
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */





/**
 * XSS过滤
 *
 * @param {String} css 要过滤的CSS代码
 * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
 * @return {String}
 */
function filterCSS (html, options) {
  var xss = new css(options);
  return xss.process(html);
}


// 输出
exports = module.exports = filterCSS;
exports.FilterCSS = css;
for (var i in _default) exports[i] = _default[i];
});

var util$1 = {
  indexOf: function(arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function(arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function(str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, "");
  },
  spaceIndex: function(str) {
    var reg = /\s|\n|\t/;
    var match = reg.exec(str);
    return match ? match.index : -1;
  }
};

/**
 * default settings
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS$1 = lib.FilterCSS;
var getDefaultCSSWhiteList = lib.getDefaultWhiteList;


function getDefaultWhiteList$1() {
  return {
    a: ["target", "href", "title"],
    abbr: ["title"],
    address: [],
    area: ["shape", "coords", "href", "alt"],
    article: [],
    aside: [],
    audio: ["autoplay", "controls", "loop", "preload", "src"],
    b: [],
    bdi: ["dir"],
    bdo: ["dir"],
    big: [],
    blockquote: ["cite"],
    br: [],
    caption: [],
    center: [],
    cite: [],
    code: [],
    col: ["align", "valign", "span", "width"],
    colgroup: ["align", "valign", "span", "width"],
    dd: [],
    del: ["datetime"],
    details: ["open"],
    div: [],
    dl: [],
    dt: [],
    em: [],
    font: ["color", "size", "face"],
    footer: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    header: [],
    hr: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    ins: ["datetime"],
    li: [],
    mark: [],
    nav: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    section: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    table: ["width", "border", "align", "valign"],
    tbody: ["align", "valign"],
    td: ["width", "rowspan", "colspan", "align", "valign"],
    tfoot: ["align", "valign"],
    th: ["width", "rowspan", "colspan", "align", "valign"],
    thead: ["align", "valign"],
    tr: ["rowspan", "align", "valign"],
    tt: [],
    u: [],
    ul: [],
    video: ["autoplay", "controls", "loop", "preload", "src", "height", "width"]
  };
}

var defaultCSSFilter = new FilterCSS$1();

/**
 * default onTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onTag(tag, html, options) {
  // do nothing
}

/**
 * default onIgnoreTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onIgnoreTag(tag, html, options) {
  // do nothing
}

/**
 * default onTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default onIgnoreTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onIgnoreTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default escapeHtml function
 *
 * @param {String} html
 */
function escapeHtml(html) {
  return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
}

/**
 * default safeAttrValue function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @param {Object} cssFilter
 * @return {String}
 */
function safeAttrValue$1(tag, name, value, cssFilter) {
  // unescape attribute value firstly
  value = friendlyAttrValue(value);

  if (name === "href" || name === "src") {
    // filter `href` and `src` attribute
    // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
    value = util$1.trim(value);
    if (value === "#") return "#";
    if (
      !(
        value.substr(0, 7) === "http://" ||
        value.substr(0, 8) === "https://" ||
        value.substr(0, 7) === "mailto:" ||
        value.substr(0, 4) === "tel:" ||
        value.substr(0, 11) === "data:image/" ||
        value.substr(0, 6) === "ftp://" ||
        value.substr(0, 2) === "./" ||
        value.substr(0, 3) === "../" ||
        value[0] === "#" ||
        value[0] === "/"
      )
    ) {
      return "";
    }
  } else if (name === "background") {
    // filter `background` attribute (maybe no use)
    // `javascript:`
    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
      return "";
    }
  } else if (name === "style") {
    // `expression()`
    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
      return "";
    }
    // `url()`
    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    }
    if (cssFilter !== false) {
      cssFilter = cssFilter || defaultCSSFilter;
      value = cssFilter.process(value);
    }
  }

  // escape `<>"` before returns
  value = escapeAttrValue(value);
  return value;
}

// RegExp list
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;

/**
 * escape doube quote
 *
 * @param {String} str
 * @return {String} str
 */
function escapeQuote(str) {
  return str.replace(REGEXP_QUOTE, "&quot;");
}

/**
 * unescape double quote
 *
 * @param {String} str
 * @return {String} str
 */
function unescapeQuote(str) {
  return str.replace(REGEXP_QUOTE_2, '"');
}

/**
 * escape html entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeHtmlEntities(str) {
  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
    return code[0] === "x" || code[0] === "X"
      ? String.fromCharCode(parseInt(code.substr(1), 16))
      : String.fromCharCode(parseInt(code, 10));
  });
}

/**
 * escape html5 new danger entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeDangerHtml5Entities(str) {
  return str
    .replace(REGEXP_ATTR_VALUE_COLON, ":")
    .replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
}

/**
 * clear nonprintable characters
 *
 * @param {String} str
 * @return {String}
 */
function clearNonPrintableCharacter(str) {
  var str2 = "";
  for (var i = 0, len = str.length; i < len; i++) {
    str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
  }
  return util$1.trim(str2);
}

/**
 * get friendly attribute value
 *
 * @param {String} str
 * @return {String}
 */
function friendlyAttrValue(str) {
  str = unescapeQuote(str);
  str = escapeHtmlEntities(str);
  str = escapeDangerHtml5Entities(str);
  str = clearNonPrintableCharacter(str);
  return str;
}

/**
 * unescape attribute value
 *
 * @param {String} str
 * @return {String}
 */
function escapeAttrValue(str) {
  str = escapeQuote(str);
  str = escapeHtml(str);
  return str;
}

/**
 * `onIgnoreTag` function for removing all the tags that are not in whitelist
 */
function onIgnoreTagStripAll() {
  return "";
}

/**
 * remove tag body
 * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
 *
 * @param {array} tags
 * @param {function} next
 */
function StripTagBody(tags, next) {
  if (typeof next !== "function") {
    next = function() {};
  }

  var isRemoveAllTag = !Array.isArray(tags);
  function isRemoveTag(tag) {
    if (isRemoveAllTag) return true;
    return util$1.indexOf(tags, tag) !== -1;
  }

  var removeList = [];
  var posStart = false;

  return {
    onIgnoreTag: function(tag, html, options) {
      if (isRemoveTag(tag)) {
        if (options.isClosing) {
          var ret = "[/removed]";
          var end = options.position + ret.length;
          removeList.push([
            posStart !== false ? posStart : options.position,
            end
          ]);
          posStart = false;
          return ret;
        } else {
          if (!posStart) {
            posStart = options.position;
          }
          return "[removed]";
        }
      } else {
        return next(tag, html, options);
      }
    },
    remove: function(html) {
      var rethtml = "";
      var lastPos = 0;
      util$1.forEach(removeList, function(pos) {
        rethtml += html.slice(lastPos, pos[0]);
        lastPos = pos[1];
      });
      rethtml += html.slice(lastPos);
      return rethtml;
    }
  };
}

/**
 * remove html comments
 *
 * @param {String} html
 * @return {String}
 */
function stripCommentTag(html) {
  return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
}
var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;

/**
 * remove invisible characters
 *
 * @param {String} html
 * @return {String}
 */
function stripBlankChar(html) {
  var chars = html.split("");
  chars = chars.filter(function(char) {
    var c = char.charCodeAt(0);
    if (c === 127) return false;
    if (c <= 31) {
      if (c === 10 || c === 13) return true;
      return false;
    }
    return true;
  });
  return chars.join("");
}

var whiteList$1 = getDefaultWhiteList$1();
var getDefaultWhiteList_1$1 = getDefaultWhiteList$1;
var onTag_1 = onTag;
var onIgnoreTag_1 = onIgnoreTag;
var onTagAttr_1 = onTagAttr;
var onIgnoreTagAttr_1 = onIgnoreTagAttr;
var safeAttrValue_1$1 = safeAttrValue$1;
var escapeHtml_1 = escapeHtml;
var escapeQuote_1 = escapeQuote;
var unescapeQuote_1 = unescapeQuote;
var escapeHtmlEntities_1 = escapeHtmlEntities;
var escapeDangerHtml5Entities_1 = escapeDangerHtml5Entities;
var clearNonPrintableCharacter_1 = clearNonPrintableCharacter;
var friendlyAttrValue_1 = friendlyAttrValue;
var escapeAttrValue_1 = escapeAttrValue;
var onIgnoreTagStripAll_1 = onIgnoreTagStripAll;
var StripTagBody_1 = StripTagBody;
var stripCommentTag_1 = stripCommentTag;
var stripBlankChar_1 = stripBlankChar;
var cssFilter = defaultCSSFilter;
var getDefaultCSSWhiteList_1 = getDefaultCSSWhiteList;

var _default$1 = {
	whiteList: whiteList$1,
	getDefaultWhiteList: getDefaultWhiteList_1$1,
	onTag: onTag_1,
	onIgnoreTag: onIgnoreTag_1,
	onTagAttr: onTagAttr_1,
	onIgnoreTagAttr: onIgnoreTagAttr_1,
	safeAttrValue: safeAttrValue_1$1,
	escapeHtml: escapeHtml_1,
	escapeQuote: escapeQuote_1,
	unescapeQuote: unescapeQuote_1,
	escapeHtmlEntities: escapeHtmlEntities_1,
	escapeDangerHtml5Entities: escapeDangerHtml5Entities_1,
	clearNonPrintableCharacter: clearNonPrintableCharacter_1,
	friendlyAttrValue: friendlyAttrValue_1,
	escapeAttrValue: escapeAttrValue_1,
	onIgnoreTagStripAll: onIgnoreTagStripAll_1,
	StripTagBody: StripTagBody_1,
	stripCommentTag: stripCommentTag_1,
	stripBlankChar: stripBlankChar_1,
	cssFilter: cssFilter,
	getDefaultCSSWhiteList: getDefaultCSSWhiteList_1
};

/**
 * Simple HTML Parser
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */



/**
 * get tag name
 *
 * @param {String} html e.g. '<a hef="#">'
 * @return {String}
 */
function getTagName(html) {
  var i = util$1.spaceIndex(html);
  if (i === -1) {
    var tagName = html.slice(1, -1);
  } else {
    var tagName = html.slice(1, i + 1);
  }
  tagName = util$1.trim(tagName).toLowerCase();
  if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
  if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
  return tagName;
}

/**
 * is close tag?
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */
function isClosing(html) {
  return html.slice(0, 2) === "</";
}

/**
 * parse input html and returns processed html
 *
 * @param {String} html
 * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml
 * @return {String}
 */
function parseTag(html, onTag, escapeHtml) {

  var rethtml = "";
  var lastPos = 0;
  var tagStart = false;
  var quoteStart = false;
  var currentPos = 0;
  var len = html.length;
  var currentTagName = "";
  var currentHtml = "";

  chariterator: for (currentPos = 0; currentPos < len; currentPos++) {
    var c = html.charAt(currentPos);
    if (tagStart === false) {
      if (c === "<") {
        tagStart = currentPos;
        continue;
      }
    } else {
      if (quoteStart === false) {
        if (c === "<") {
          rethtml += escapeHtml(html.slice(lastPos, currentPos));
          tagStart = currentPos;
          lastPos = currentPos;
          continue;
        }
        if (c === ">") {
          rethtml += escapeHtml(html.slice(lastPos, tagStart));
          currentHtml = html.slice(tagStart, currentPos + 1);
          currentTagName = getTagName(currentHtml);
          rethtml += onTag(
            tagStart,
            rethtml.length,
            currentTagName,
            currentHtml,
            isClosing(currentHtml)
          );
          lastPos = currentPos + 1;
          tagStart = false;
          continue;
        }
        if ((c === '"' || c === "'")) {
          var i = 1;
          var ic = html.charAt(currentPos - i);

          while ((ic === " ") || (ic === "=")) {
            if (ic === "=") {
              quoteStart = c;
              continue chariterator;
            }
            ic = html.charAt(currentPos - ++i);
          }
        }
      } else {
        if (c === quoteStart) {
          quoteStart = false;
          continue;
        }
      }
    }
  }
  if (lastPos < html.length) {
    rethtml += escapeHtml(html.substr(lastPos));
  }

  return rethtml;
}

var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;

/**
 * parse input attributes and returns processed attributes
 *
 * @param {String} html e.g. `href="#" target="_blank"`
 * @param {Function} onAttr e.g. `function (name, value)`
 * @return {String}
 */
function parseAttr(html, onAttr) {

  var lastPos = 0;
  var retAttrs = [];
  var tmpName = false;
  var len = html.length;

  function addAttr(name, value) {
    name = util$1.trim(name);
    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
    if (name.length < 1) return;
    var ret = onAttr(name, value || "");
    if (ret) retAttrs.push(ret);
  }

  // 逐个分析字符
  for (var i = 0; i < len; i++) {
    var c = html.charAt(i);
    var v, j;
    if (tmpName === false && c === "=") {
      tmpName = html.slice(lastPos, i);
      lastPos = i + 1;
      continue;
    }
    if (tmpName !== false) {
      if (
        i === lastPos &&
        (c === '"' || c === "'") &&
        html.charAt(i - 1) === "="
      ) {
        j = html.indexOf(c, i + 1);
        if (j === -1) {
          break;
        } else {
          v = util$1.trim(html.slice(lastPos + 1, j));
          addAttr(tmpName, v);
          tmpName = false;
          i = j;
          lastPos = i + 1;
          continue;
        }
      }
    }
    if (/\s|\n|\t/.test(c)) {
      html = html.replace(/\s|\n|\t/g, " ");
      if (tmpName === false) {
        j = findNextEqual(html, i);
        if (j === -1) {
          v = util$1.trim(html.slice(lastPos, i));
          addAttr(v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          i = j - 1;
          continue;
        }
      } else {
        j = findBeforeEqual(html, i - 1);
        if (j === -1) {
          v = util$1.trim(html.slice(lastPos, i));
          v = stripQuoteWrap(v);
          addAttr(tmpName, v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          continue;
        }
      }
    }
  }

  if (lastPos < html.length) {
    if (tmpName === false) {
      addAttr(html.slice(lastPos));
    } else {
      addAttr(tmpName, stripQuoteWrap(util$1.trim(html.slice(lastPos))));
    }
  }

  return util$1.trim(retAttrs.join(" "));
}

function findNextEqual(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function findBeforeEqual(str, i) {
  for (; i > 0; i--) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function isQuoteWrapString(text) {
  if (
    (text[0] === '"' && text[text.length - 1] === '"') ||
    (text[0] === "'" && text[text.length - 1] === "'")
  ) {
    return true;
  } else {
    return false;
  }
}

function stripQuoteWrap(text) {
  if (isQuoteWrapString(text)) {
    return text.substr(1, text.length - 2);
  } else {
    return text;
  }
}

var parseTag_1 = parseTag;
var parseAttr_1 = parseAttr;

var parser$1 = {
	parseTag: parseTag_1,
	parseAttr: parseAttr_1
};

/**
 * filter xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS$2 = lib.FilterCSS;


var parseTag$1 = parser$1.parseTag;
var parseAttr$1 = parser$1.parseAttr;


/**
 * returns `true` if the input value is `undefined` or `null`
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull$1(obj) {
  return obj === undefined || obj === null;
}

/**
 * get attributes for a tag
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */
function getAttrs(html) {
  var i = util$1.spaceIndex(html);
  if (i === -1) {
    return {
      html: "",
      closing: html[html.length - 2] === "/"
    };
  }
  html = util$1.trim(html.slice(i + 1, -1));
  var isClosing = html[html.length - 1] === "/";
  if (isClosing) html = util$1.trim(html.slice(0, -1));
  return {
    html: html,
    closing: isClosing
  };
}

/**
 * shallow copy
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject$1(obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

/**
 * FilterXSS class
 *
 * @param {Object} options
 *        whiteList, onTag, onTagAttr, onIgnoreTag,
 *        onIgnoreTagAttr, safeAttrValue, escapeHtml
 *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
 *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
 */
function FilterXSS(options) {
  options = shallowCopyObject$1(options || {});

  if (options.stripIgnoreTag) {
    if (options.onIgnoreTag) {
      console.error(
        'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
      );
    }
    options.onIgnoreTag = _default$1.onIgnoreTagStripAll;
  }

  options.whiteList = options.whiteList || _default$1.whiteList;
  options.onTag = options.onTag || _default$1.onTag;
  options.onTagAttr = options.onTagAttr || _default$1.onTagAttr;
  options.onIgnoreTag = options.onIgnoreTag || _default$1.onIgnoreTag;
  options.onIgnoreTagAttr = options.onIgnoreTagAttr || _default$1.onIgnoreTagAttr;
  options.safeAttrValue = options.safeAttrValue || _default$1.safeAttrValue;
  options.escapeHtml = options.escapeHtml || _default$1.escapeHtml;
  this.options = options;

  if (options.css === false) {
    this.cssFilter = false;
  } else {
    options.css = options.css || {};
    this.cssFilter = new FilterCSS$2(options.css);
  }
}

/**
 * start process and returns result
 *
 * @param {String} html
 * @return {String}
 */
FilterXSS.prototype.process = function(html) {
  // compatible with the input
  html = html || "";
  html = html.toString();
  if (!html) return "";

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onTag = options.onTag;
  var onIgnoreTag = options.onIgnoreTag;
  var onTagAttr = options.onTagAttr;
  var onIgnoreTagAttr = options.onIgnoreTagAttr;
  var safeAttrValue = options.safeAttrValue;
  var escapeHtml = options.escapeHtml;
  var cssFilter = me.cssFilter;

  // remove invisible characters
  if (options.stripBlankChar) {
    html = _default$1.stripBlankChar(html);
  }

  // remove html comments
  if (!options.allowCommentTag) {
    html = _default$1.stripCommentTag(html);
  }

  // if enable stripIgnoreTagBody
  var stripIgnoreTagBody = false;
  if (options.stripIgnoreTagBody) {
    var stripIgnoreTagBody = _default$1.StripTagBody(
      options.stripIgnoreTagBody,
      onIgnoreTag
    );
    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
  }

  var retHtml = parseTag$1(
    html,
    function(sourcePosition, position, tag, html, isClosing) {
      var info = {
        sourcePosition: sourcePosition,
        position: position,
        isClosing: isClosing,
        isWhite: whiteList.hasOwnProperty(tag)
      };

      // call `onTag()`
      var ret = onTag(tag, html, info);
      if (!isNull$1(ret)) return ret;

      if (info.isWhite) {
        if (info.isClosing) {
          return "</" + tag + ">";
        }

        var attrs = getAttrs(html);
        var whiteAttrList = whiteList[tag];
        var attrsHtml = parseAttr$1(attrs.html, function(name, value) {
          // call `onTagAttr()`
          var isWhiteAttr = util$1.indexOf(whiteAttrList, name) !== -1;
          var ret = onTagAttr(tag, name, value, isWhiteAttr);
          if (!isNull$1(ret)) return ret;

          if (isWhiteAttr) {
            // call `safeAttrValue()`
            value = safeAttrValue(tag, name, value, cssFilter);
            if (value) {
              return name + '="' + value + '"';
            } else {
              return name;
            }
          } else {
            // call `onIgnoreTagAttr()`
            var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull$1(ret)) return ret;
            return;
          }
        });

        // build new tag html
        var html = "<" + tag;
        if (attrsHtml) html += " " + attrsHtml;
        if (attrs.closing) html += " /";
        html += ">";
        return html;
      } else {
        // call `onIgnoreTag()`
        var ret = onIgnoreTag(tag, html, info);
        if (!isNull$1(ret)) return ret;
        return escapeHtml(html);
      }
    },
    escapeHtml
  );

  // if enable stripIgnoreTagBody
  if (stripIgnoreTagBody) {
    retHtml = stripIgnoreTagBody.remove(retHtml);
  }

  return retHtml;
};

var xss = FilterXSS;

var lib$1 = createCommonjsModule(function (module, exports) {
/**
 * xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */





/**
 * filter xss function
 *
 * @param {String} html
 * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
 * @return {String}
 */
function filterXSS(html, options) {
  var xss$1 = new xss(options);
  return xss$1.process(html);
}

exports = module.exports = filterXSS;
exports.filterXSS = filterXSS;
exports.FilterXSS = xss;
for (var i in _default$1) exports[i] = _default$1[i];
for (var i in parser$1) exports[i] = parser$1[i];

// using `xss` on the WebWorker, output `filterXSS` to the globals
function isWorkerEnv() {
  return typeof self !== 'undefined' && typeof DedicatedWorkerGlobalScope !== 'undefined' && self instanceof DedicatedWorkerGlobalScope;
}
if (isWorkerEnv()) {
  self.filterXSS = module.exports;
}
});

/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.
 * Apache-2.0
 *
 * js-xss
 * Copyright (c) 2012-2018 Zongmin Lei(雷宗民) <leizongmin@gmail.com>
 * http://ucdok.com
 * The MIT License, see
 * https://github.com/leizongmin/js-xss/blob/master/LICENSE for details
 *
 * Lodash/isPlainObject
 * Copyright (c) JS Foundation and other contributors <https://js.foundation/>
 * MIT License, see https://raw.githubusercontent.com/lodash/lodash/4.17.10-npm/LICENSE for details
 * */
/**
 * The Sanitizer Class
 *
 * @export
 * @class Sanitizer
 */
var Sanitizer = /** @class */ (function () {
    function Sanitizer(filterOptions, extendDefaults) {
        var _this = this;
        // Supported HTML Spec: https://doc.arcgis.com/en/arcgis-online/reference/supported-html.htm
        this.arcgisWhiteList = {
            a: ["href", "target", "style"],
            img: ["src", "width", "height", "border", "alt", "style"],
            video: [
                "autoplay",
                "controls",
                "height",
                "loop",
                "muted",
                "poster",
                "preload",
                "width"
            ],
            audio: ["autoplay", "controls", "loop", "muted", "preload"],
            source: ["media", "src", "type"],
            span: ["style"],
            table: ["width", "height", "cellpadding", "cellspacing", "border", "style"],
            div: ["style", "align"],
            font: ["size", "color", "style"],
            tr: ["height", "valign", "align", "style"],
            td: [
                "height",
                "width",
                "valign",
                "align",
                "colspan",
                "rowspan",
                "nowrap",
                "style"
            ],
            th: [
                "height",
                "width",
                "valign",
                "align",
                "colspan",
                "rowspan",
                "nowrap",
                "style"
            ],
            p: ["style"],
            b: [],
            strong: [],
            i: [],
            em: [],
            u: [],
            br: [],
            li: [],
            ul: [],
            ol: [],
            hr: [],
            tbody: []
        };
        this.allowedProtocols = [
            "http",
            "https",
            "mailto",
            "iform",
            "tel",
            "flow",
            "lfmobile",
            "arcgis-navigator",
            "arcgis-appstudio-player",
            "arcgis-survey123",
            "arcgis-collector",
            "arcgis-workforce",
            "arcgis-explorer",
            "arcgis-trek2there",
            "mspbi",
            "comgooglemaps",
            "pdfefile",
            "pdfehttp",
            "pdfehttps",
            "boxapp",
            "boxemm",
            "awb",
            "awbs",
            "gropen",
            "radarscope"
        ];
        this.arcgisFilterOptions = {
            allowCommentTag: true,
            safeAttrValue: function (tag, name, value, cssFilter) {
                // Take over safe attribute filtering for `a` `href`, `img` `src`,
                // and `source` `src` attributes, otherwise pass onto the
                // default `XSS.safeAttrValue` method.
                if ((tag === "a" && name === "href") ||
                    ((tag === "img" || tag === "source") && name === "src")) {
                    return _this.sanitizeUrl(value);
                }
                return lib$1.safeAttrValue(tag, name, value, cssFilter);
            }
        };
        var xssFilterOptions;
        if (filterOptions && !extendDefaults) {
            // Override the defaults
            xssFilterOptions = filterOptions;
        }
        else if (filterOptions && extendDefaults) {
            // Extend the defaults
            xssFilterOptions = Object.create(this.arcgisFilterOptions);
            Object.keys(filterOptions).forEach(function (key) {
                if (key === "whiteList") {
                    // Extend the whitelist by concatenating arrays
                    xssFilterOptions.whiteList = _this._extendObjectOfArrays([
                        _this.arcgisWhiteList,
                        filterOptions.whiteList || {}
                    ]);
                }
                else {
                    xssFilterOptions[key] = filterOptions[key];
                }
            });
        }
        else {
            // Only use the defaults
            xssFilterOptions = Object.create(this.arcgisFilterOptions);
            xssFilterOptions.whiteList = this.arcgisWhiteList;
        }
        this.xssFilterOptions = xssFilterOptions;
        // Make this readable to tests
        this._xssFilter = new lib$1.FilterXSS(xssFilterOptions);
    }
    /**
     * Sanitizes value to remove invalid HTML tags.
     *
     * Note: If the value passed does not contain a valid JSON data type (String,
     * Number, JSON Object, Array, Boolean, or null), the value will be nullified.
     *
     * @param {any} value The value to sanitize.
     * @returns {any} The sanitized value.
     * @memberof Sanitizer
     */
    Sanitizer.prototype.sanitize = function (value, options) {
        if (options === void 0) { options = {}; }
        switch (typeof value) {
            case "number":
                if (isNaN(value) || !isFinite(value)) {
                    return null;
                }
                return value;
            case "boolean":
                return value;
            case "string":
                return this._xssFilter.process(value);
            case "object":
                return this._iterateOverObject(value, options);
            default:
                if (options.allowUndefined && typeof value === "undefined") {
                    return;
                }
                return null;
        }
    };
    /**
     * Sanitizes a URL string following the allowed protocols and sanitization rules.
     *
     * @param {string} value The URL to sanitize.
     * @returns {string} The sanitized URL.
     */
    Sanitizer.prototype.sanitizeUrl = function (value) {
        var protocol = this._trim(value.substring(0, value.indexOf(":")));
        if (!(value === "/" ||
            value === "#" ||
            value[0] === "#" ||
            this.allowedProtocols.indexOf(protocol.toLowerCase()) > -1)) {
            return "";
        }
        else {
            return lib$1.escapeAttrValue(value);
        }
    };
    /**
     * Sanitizes an HTML attribute value.
     *
     * @param {string} tag The tagname of the HTML element.
     * @param {string} attribute The attribute name of the HTML element.
     * @param {string} value The raw value to be used for the HTML attribute value.
     * @param {XSS.ICSSFilter} [cssFilter] The CSS filter to be used.
     * @returns {string} The sanitized attribute value.
     * @memberof Sanitizer
     */
    Sanitizer.prototype.sanitizeHTMLAttribute = function (tag, attribute, value, cssFilter) {
        // use the custom safeAttrValue function if provided
        if (typeof this.xssFilterOptions.safeAttrValue === 'function') {
            // @ts-ignore safeAttrValue does handle undefined cssFilter
            return this.xssFilterOptions.safeAttrValue(tag, attribute, value, cssFilter);
        }
        // otherwise use the default
        // @ts-ignore safeAttrValue does handle undefined cssFilter
        return lib$1.safeAttrValue(tag, attribute, value, cssFilter);
    };
    /**
     * Checks if a value only contains valid HTML.
     *
     * @param {any} value The value to validate.
     * @returns {boolean}
     * @memberof Sanitizer
     */
    Sanitizer.prototype.validate = function (value, options) {
        if (options === void 0) { options = {}; }
        var sanitized = this.sanitize(value, options);
        return {
            isValid: value === sanitized,
            sanitized: sanitized
        };
    };
    /**
     * Extends an object of arrays by by concatenating arrays of the same object
     * keys. If the if the previous key's value is not an array, the next key's
     * value will replace the previous key. This method is used for extending the
     * whiteList in the XSS filter options.
     *
     * @private
     * @param {Array<{}>} objects An array of objects.
     * @returns {{}} The extended object.
     * @memberof Sanitizer
     */
    Sanitizer.prototype._extendObjectOfArrays = function (objects) {
        var finalObj = {};
        objects.forEach(function (obj) {
            Object.keys(obj).forEach(function (key) {
                if (Array.isArray(obj[key]) && Array.isArray(finalObj[key])) {
                    finalObj[key] = finalObj[key].concat(obj[key]);
                }
                else {
                    finalObj[key] = obj[key];
                }
            });
        });
        return finalObj;
    };
    /**
     * Iterate over a plain object or array to deeply sanitize each value.
     *
     * @private
     * @param {object} obj The object to iterate over.
     * @returns {(object | null)} The sanitized object.
     * @memberof Sanitizer
     */
    Sanitizer.prototype._iterateOverObject = function (obj, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        try {
            var hasChanged_1 = false;
            var changedObj = void 0;
            if (Array.isArray(obj)) {
                changedObj = obj.reduce(function (prev, value) {
                    var validation = _this.validate(value, options);
                    if (validation.isValid) {
                        return prev.concat([value]);
                    }
                    else {
                        hasChanged_1 = true;
                        return prev.concat([validation.sanitized]);
                    }
                }, []);
            }
            else if (!lodash_isplainobject(obj)) {
                if (options.allowUndefined && typeof obj === "undefined") {
                    return;
                }
                return null;
            }
            else {
                var keys = Object.keys(obj);
                changedObj = keys.reduce(function (prev, key) {
                    var value = obj[key];
                    var validation = _this.validate(value, options);
                    if (validation.isValid) {
                        prev[key] = value;
                    }
                    else {
                        hasChanged_1 = true;
                        prev[key] = validation.sanitized;
                    }
                    return prev;
                }, {});
            }
            if (hasChanged_1) {
                return changedObj;
            }
            return obj;
        }
        catch (err) {
            return null;
        }
    };
    /**
     * Trim whitespace from the start and ends of a string.
     * @param {string} val The string to trim.
     * @returns {string} The trimmed string.
     */
    Sanitizer.prototype._trim = function (val) {
        // @ts-ignore This is used by Jest,
        // but TypeScript errors since it assumes `trim` is always available.
        return String.prototype.trim
            ? val.trim()
            : val.replace(/(^\s*)|(\s*$)/g, "");
    };
    return Sanitizer;
}());

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
n$T.getLogger("esri.widgets.support.widgetUtils");function l$4(t){const n=o$q.acquire();for(let e=0;e<arguments.length;e++){const t=arguments[e],i=typeof t;if("string"===i)n.push(t);else if(Array.isArray(t))n.push.apply(n,t);else if("object"===i)for(const e in t)t[e]&&n.push(e);}const i=n.join(" ");return o$q.release(n),i}function p$5(t){const e="data-node-ref";this[t.getAttribute(e)]=t;}const m$1=["dd","dl","dt","h1","h2","h3","h4","h5","h6","sub","sup",...["animate","animatetransform","circle","clippath","defs","ellipse","g","image","line","lineargradient","marker","mask","path","pattern","polygon","polyline","radialgradient","rect","stop","svg","switch","symbol","text","textpath","tspan","use"]],f$2=m$1.reduce(((t,e)=>(t[e]=[],t)),{}),h$2=["align","alink","alt","bgcolor","border","cellpadding","cellspacing","class","color","cols","colspan","coords","dir","face","height","hspace","ismap","lang","marginheight","marginwidth","multiple","nohref","noresize","noshade","nowrap","ref","rel","rev","rows","rowspan","scrolling","shape","span","summary","tabindex","title","usemap","valign","value","vlink","vspace","width"],v$2=new Sanitizer({whiteList:f$2,onTagAttr:(t,e,n)=>{const i=`${e}="${n}"`;if(h$2.includes(e))return i},stripIgnoreTag:!0,stripIgnoreTagBody:["script","style"]},!0);function w$1(){return getComputedStyle(document.body).getPropertyValue("--esri-calcite-theme-name").replace(/\s|'|"/g,"")}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$3(e){return function(s,n){s.hasOwnProperty("_messageBundleProps")||(s._messageBundleProps=s._messageBundleProps?s._messageBundleProps.slice():[]);s._messageBundleProps.push({bundlePath:e,propertyName:n});}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var e$2=function(e){return {vnodeSelector:"",properties:void 0,children:void 0,text:e.toString(),domNode:null}},r$1=function(o,t){for(var n=0,d=o.length;n<d;n++){var i=o[n];Array.isArray(i)?r$1(i,t):null!=i&&!1!==i&&(i.hasOwnProperty("vnodeSelector")||(i=e$2(i)),t.push(i));}},o$3=function(e,o){for(var t=[],n=2;n<arguments.length;n++)t[n-2]=arguments[n];if(1===t.length&&"string"==typeof t[0])return {vnodeSelector:e,properties:o||void 0,children:void 0,text:t[0],domNode:null};var d=[];return r$1(t,d),{vnodeSelector:e,properties:o||void 0,children:d,text:void 0,domNode:null}};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function c$1(n,t,r,e,o){const u=n.watch(t,((t,o,u,c)=>{r&&!r(t)||null==e||e.call(n,t,o,u,c);}),o);if(Array.isArray(t))for(const c of t){const o=n.get(c);r&&r(o)&&(null==e||e.call(n,o,o,t,n));}else {const o=n.get(t);r&&r(o)&&(null==e||e.call(n,o,o,t,n));}return u}function i$4(n,t,r,i,f){const l="function"==typeof i?i:null,s="object"==typeof i?i:null;"boolean"==typeof i&&(f=i);let a,m=!1;function p(){a&&(a.remove(),a=null);}const v=E$3();v$9(s,(()=>{p(),v.reject(m$x());}));const d={then:v.promise.then.bind(v.promise),catch:v.promise.catch.bind(v.promise),remove:p};return Object.freeze(d),a=c$1(n,t,r,((t,r,e,o)=>{m=!0,p(),l&&l.call(n,t,r,e,o),v.resolve({value:t,oldValue:r,propertyName:e,target:o});}),f),m&&p(),d}function f$1(n){return !!n}function l$3(n){return !n}function s$4(n){return !0===n}function a$3(n){return !1===n}const v$1=/\?(\.|$)/g;function d$5(n,t,r,e){const o=Array.isArray(t)?t:t.indexOf(",")>-1?t.split(","):[t],u=h$1(n,t,r,e);for(const c of o){const t=c.trim().replace(v$1,"$1"),e=n.get(t);r.call(n,e,e,t,n);}return u}function h$1(n,t,r,e){return n.watch(t,r,e)}function j$1(n,t,r,e){return i$4(n,t,f$1,r,e)}function A$1(n,t,r,e){return i$4(n,t,l$3,r,e)}function x$1(n,t,r,e){return i$4(n,t,s$4,r,e)}function $(n,t,r,e){return i$4(n,t,a$3,r,e)}function C$2(n,e,o,u,c,i,f){const l={};function s(t){const r=l[t];r&&(i&&i(r.target,t,n,o),r.handle.remove(),delete l[t]);}const a=d$5(n,e,((e,i,f)=>{s(f),e$v(e)&&(l[f]={handle:r$r(e,o,u),target:e},c&&c(e,f,n,o));}),f);return {remove(){a.remove();for(const n in l)s(n);}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e$1(e){return "string"==typeof e?document.getElementById(e):e}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const t$2="http://www.w3.org/",r=`${t$2}2000/svg`,o$2=`${t$2}1999/xlink`;let i$3,l$2=[],n$2=(e,t)=>{let r={};return Object.keys(e).forEach((t=>{r[t]=e[t];})),t&&Object.keys(t).forEach((e=>{r[e]=t[e];})),r},s$3=(e,t)=>e.vnodeSelector===t.vnodeSelector&&(e.properties&&t.properties?e.properties.key===t.properties.key&&e.properties.bind===t.properties.bind:!e.properties&&!t.properties),p$4=e=>{if("string"!=typeof e)throw new Error("Style values must be strings")},d$4=(e,t,r)=>{if(""!==t.vnodeSelector)for(let o=r;o<e.length;o++)if(s$3(e[o],t))return o;return -1},a$2=(e,t,r,o)=>{let i=e[t];if(""===i.vnodeSelector)return;let l=i.properties;if(!(l?void 0===l.key?l.bind:l.key:void 0))for(let n=0;n<e.length;n++)if(n!==t){let t=e[n];if(s$3(t,i))throw new Error(`${r.vnodeSelector} had a ${i.vnodeSelector} child ${"added"===o?o:"removed"}, but there is now more than one. You must add unique key properties to make them distinguishable.`)}},f=e=>{if(e.properties){let t=e.properties.enterAnimation;t&&t(e.domNode,e.properties);}},c=[],u=!1,h=e=>{(e.children||[]).forEach(h),e.properties&&e.properties.afterRemoved&&e.properties.afterRemoved.apply(e.properties.bind||e.properties,[e.domNode]);},m=()=>{u=!1,c.forEach(h),c.length=0;},v=e=>{c.push(e),u||(u=!0,"undefined"!=typeof window&&"requestIdleCallback"in window?window.requestIdleCallback(m,{timeout:16}):setTimeout(m,16));},y=e=>{let t=e.domNode;if(e.properties){let r=e.properties.exitAnimation;if(r){t.style.pointerEvents="none";let o=()=>{t.parentNode&&(t.parentNode.removeChild(t),v(e));};return void r(t,o,e.properties)}}t.parentNode&&(t.parentNode.removeChild(t),v(e));},g=(t,i,l)=>{if(!i)return;let n=l.eventHandlerInterceptor,s=Object.keys(i),d=s.length;for(let a=0;a<d;a++){let d=s[a],f=i[d];if("className"===d)throw new Error('Property "className" is not supported, use "class".');if("class"===d)x(t,f,!0);else if("classes"===d){let e=Object.keys(f),r=e.length;for(let o=0;o<r;o++){let r=e[o];f[r]&&t.classList.add(r);}}else if("styles"===d){let e=Object.keys(f),r=e.length;for(let o=0;o<r;o++){let r=e[o],i=f[r];i&&(p$4(i),l.styleApplyer(t,r,i));}}else if("key"!==d&&null!=f){let s=typeof f;"function"===s?(0===d.lastIndexOf("on",0)&&(n&&(f=n(d,f,t,i)),"oninput"===d&&function(){let e=f;f=function(t){e.apply(this,[t]),t.target["oninput-value"]=t.target.value;};}()),t[d]=f):l.namespace===r?"href"===d?t.setAttributeNS(o$2,d,f):t.setAttribute(d,f):"string"===s&&"value"!==d?"innerHTML"===d?t[d]=v$2.sanitize(f):t.setAttribute(d,f):t[d]=f;}}},b$2=(e,t,r)=>{if(t)for(let o of t)w(o,e,void 0,r);},N$1=(e,t,r)=>{b$2(e,t.children,r),t.text&&(e.textContent=t.text),g(e,t.properties,r),t.properties&&t.properties.afterCreate&&t.properties.afterCreate.apply(t.properties.bind||t.properties,[e,r,t.vnodeSelector,t.properties,t.children]);},w=(e,t,o,i)=>{let l,s=0,p=e.vnodeSelector,d=t.ownerDocument;if(""===p)l=e.domNode=d.createTextNode(e.text),void 0!==o?t.insertBefore(l,o):t.appendChild(l);else {for(let a=0;a<=p.length;++a){let f=p.charAt(a);if(a===p.length||"."===f||"#"===f){let f=p.charAt(s-1),c=p.slice(s,a);"."===f?l.classList.add(c):"#"===f?l.id=c:("svg"===c&&(i=n$2(i,{namespace:r})),void 0!==i.namespace?l=e.domNode=d.createElementNS(i.namespace,c):(l=e.domNode=e.domNode||d.createElement(c),"input"===c&&e.properties&&void 0!==e.properties.type&&l.setAttribute("type",e.properties.type)),void 0!==o?t.insertBefore(l,o):l.parentNode!==t&&t.appendChild(l)),s=a+1;}}N$1(l,e,i);}},x=(e,t,r)=>{t&&t.split(" ").forEach((t=>{t&&e.classList.toggle(t,r);}));},k=(t,i,l,n)=>{if(!l)return;let s=!1,d=Object.keys(l),a=d.length;for(let f=0;f<a;f++){let a=d[f],c=l[a],u=i[a];if("class"===a)u!==c&&(x(t,u,!1),x(t,c,!0));else if("classes"===a){let e=t.classList,r=Object.keys(c),o=r.length;for(let t=0;t<o;t++){let o=r[t],i=!!c[o];i!==!!u[o]&&(s=!0,i?e.add(o):e.remove(o));}}else if("styles"===a){let e=Object.keys(c),r=e.length;for(let o=0;o<r;o++){let r=e[o],i=c[r];i!==u[r]&&(s=!0,i?(p$4(i),n.styleApplyer(t,r,i)):n.styleApplyer(t,r,""));}}else if(c||"string"!=typeof u||(c=""),"value"===a){let e=t[a];e!==c&&(t["oninput-value"]?e===t["oninput-value"]:c!==u)&&(t[a]=c,t["oninput-value"]=void 0),c!==u&&(s=!0);}else if(c!==u){let i=typeof c;"function"===i&&n.eventHandlerInterceptor||(n.namespace===r?"href"===a?t.setAttributeNS(o$2,a,c):t.setAttribute(a,c):"string"===i?"innerHTML"===a?t[a]=v$2.sanitize(c):"role"===a&&""===c?t.removeAttribute(a):t.setAttribute(a,c):t[a]!==c&&(t[a]=c),s=!0);}}return s},A=(e,t,r,o,n)=>{if(r===o)return !1;o=o||l$2;let p,c=(r=r||l$2).length,u=o.length,h=0,m=0,v=!1;for(;m<u;){let l=h<c?r[h]:void 0,u=o[m];if(void 0!==l&&s$3(l,u))v=i$3(l,u,n)||v,h++;else {let l=d$4(r,u,h+1);if(l>=0){for(p=h;p<l;p++)y(r[p]),a$2(r,p,e,"removed");v=i$3(r[l],u,n)||v,h=l+1;}else w(u,t,h<c?r[h].domNode:void 0,n),f(u),a$2(o,m,e,"added");}m++;}if(c>h)for(p=h;p<c;p++)y(r[p]),a$2(r,p,e,"removed");return v};i$3=(e,t,o)=>{let i=e.domNode,l=!1;if(e===t)return !1;let s=!1;if(""===t.vnodeSelector){if(t.text!==e.text){let e=i.ownerDocument.createTextNode(t.text);return i.parentNode.replaceChild(e,i),t.domNode=e,l=!0,l}t.domNode=i;}else 0===t.vnodeSelector.lastIndexOf("svg",0)&&(o=n$2(o,{namespace:r})),e.text!==t.text&&(s=!0,void 0===t.text?i.removeChild(i.firstChild):i.textContent=t.text),t.domNode=i,s=A(t,i,e.children,t.children,o)||s,s=k(i,e.properties,t.properties,o)||s,t.properties&&t.properties.afterUpdate&&t.properties.afterUpdate.apply(t.properties.bind||t.properties,[i,o,t.vnodeSelector,t.properties,t.children]);return s&&t.properties&&t.properties.updateAnimation&&t.properties.updateAnimation(i,t.properties,e.properties),l};let S=(e,t)=>({getLastRender:()=>e,update:r=>{if(e.vnodeSelector!==r.vnodeSelector)throw new Error("The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)");let o=e;e=r,i$3(o,r,t);},domNode:e.domNode});

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const p$3={namespace:void 0,performanceLogger:()=>{},eventHandlerInterceptor:void 0,styleApplyer:(e,r,o)=>{"-"===r.charAt(0)?e.style.setProperty(r,o):e.style[r]=o;}};let d$3=r=>n$2(p$3,r),n$1={create:(e,t)=>(t=d$3(t),w(e,document.createElement("div"),void 0,t),S(e,t)),append:(e,t,p)=>(p=d$3(p),w(t,e,void 0,p),S(t,p)),insertBefore:(e,t,p)=>(p=d$3(p),w(t,e.parentNode,e,p),S(t,p)),merge:(e,r,p)=>(p=d$3(p),r.domNode=e,N$1(e,r,p),S(r,p)),replace:(e,t,p)=>(p=d$3(p),w(t,e.parentNode,e,p),e.parentNode.removeChild(e),S(t,p))};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let t$1,n=(e,r)=>{let t=[];for(;e&&e!==r;)t.push(e),e=e.parentNode;return t};t$1=Array.prototype.find?(e,r)=>e.find(r):(e,r)=>e.filter(r)[0];let o$1=(e,r)=>{let n=e;return r.forEach((e=>{n=n&&n.children?t$1(n.children,(r=>r.domNode===e)):void 0;})),n},d$2=(e,r,t)=>{let d=function(d){t("domEvent",d);let i=r(),p=n(d.currentTarget,i.domNode);p.reverse();let l,a=o$1(i.getLastRender(),p);return e.scheduleRender(),a&&(l=a.properties[`on${d.type}`].apply(a.properties.bind||this,arguments)),t("domEventProcessed",d),l};return (e,r,t,n)=>d},i$2=t=>{let n,o,i=d$3(t),p=i.performanceLogger,l=!0,a=!1,s=[],c=[],u=(e,r,t)=>{let o,l=()=>o;i.eventHandlerInterceptor=d$2(n,l,p),o=e(r,t(),i),s.push(o),c.push(t);},f=()=>{if(o=void 0,l){l=!1,p("renderStart",void 0);for(let e=0;e<s.length;e++){let r=c[e]();p("rendered",void 0),s[e].update(r),p("patched",void 0);}p("renderDone",void 0),l=!0;}};return n={renderNow:f,scheduleRender:()=>{o||a||(o=requestAnimationFrame(f));},stop:()=>{o&&(cancelAnimationFrame(o),o=void 0),a=!0;},resume:()=>{a=!1,l=!0,n.scheduleRender();},append:(e,t)=>{u(n$1.append,e,t);},insertBefore:(e,t)=>{u(n$1.insertBefore,e,t);},merge:(e,t)=>{u(n$1.merge,e,t);},replace:(e,t)=>{u(n$1.replace,e,t);},detach:e=>{for(let r=0;r<c.length;r++)if(c[r]===e)return c.splice(r,1),s.splice(r,1)[0];throw new Error("renderFunction was not found")}},n};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const b$1=n$T.getLogger("esri.widgets.Widget");let H=0;const N={widgetIcon:"esri-icon-checkbox-unchecked"},C$1=i$2();let R$1=!1,T=class extends(n$c(n$F.EventedAccessor)){constructor(e,t){super(e,t),this._attached=!1,this._internalHandles=new u$B,this._projector=C$1,this.domNode=null,this.iconClass=N.widgetIcon,this.label=this.declaredClass.split(".").pop(),this.visible=!0,this._loadLocale=z$5((async()=>{if(this._messageBundleProps&&this._messageBundleProps.length){const e=await A$8(this._messageBundleProps.map((async({bundlePath:e,propertyName:t})=>{this[t]=await c$e(e);})));for(const t of e)t.error&&b$1.error("widget-intl:locale-error",this.declaredClass,t.error);}await this.loadLocale();}));const r=["light","dark"],s=w$1()||"light";r.includes(s)||s$C(b$1,"The following themes are deprecated: light-blue, dark-blue, light-green, dark-green, light-purple, dark-purple, light-red, and dark-red.",{version:"4.19",warnOnce:!0,see:"https://developers.arcgis.com/javascript/latest/styling/"});const o="esri-widget-uid-"+o$u(),d=this.render.bind(this);let p=!1;this._trackingTarget=new s$s((()=>this.scheduleRender()));const m=()=>{if(!p||this.destroyed)return null;const e=d();return e.properties?e.properties.key||(e.properties.key=o):e.properties={key:o},e};this.render=()=>{if(R$1)return m();let e;this._trackingTarget.clear(),R$1=!0;try{e=a$J(this._trackingTarget,m);}finally{R$1=!1;}return e},this.addResolvingPromise(this._resourcesFetch=this.beforeFirstRender().then((()=>{p=!0,this._postInitialize();})));}normalizeCtorArgs(e,t){const r={...e};return t&&(r.container=t),r}postInitialize(){}beforeFirstRender(){return this._loadLocale().catch(j$f)}async loadLocale(){}destroy(){this.destroyed||(this._trackingTarget.destroy(),this._trackingTarget=null,this.viewModel&&(this.viewModel.destroy(),this.viewModel=null),this._detach(this.container),this._set("container",null),this._internalHandles.destroy(),this._emitter.clear(),this.render=()=>null,this._projector=null);}set container(e){this._get("container")||this._set("container",e);}castContainer(e){return e$1(e)}get id(){return this._get("id")||this.get("container.id")||Date.now().toString(16)+"-widget-"+H++}set id(e){e&&this._set("id",e);}get renderable(){return this._resourcesFetch}render(){throw new Error("not implemented")}scheduleRender(){this.destroyed||this._projector.scheduleRender();}classes(...e){return l$4.apply(this,e)}own(e){arguments.length>1&&(e=Array.prototype.slice.call(arguments)),this._internalHandles.add(e);}renderNow(){this._projector.renderNow();}_postInitialize(){var e;this.destroyed||(this.scheduleRender(),null!=(e=this._delegatedEventNames)&&e.length&&this._internalHandles.add(d$5(this,"viewModel",((e,t)=>{t&&this._internalHandles.remove("delegated-events"),e&&this._internalHandles.add(this._delegatedEventNames.map((t=>e.on(t,(e=>{this.emit(t,e);})))),"delegated-events");}))),this.postInitialize(),this._internalHandles.add((0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.f)((async()=>{await this._loadLocale().catch(j$f),this.scheduleRender();}))),this._internalHandles.add(j$1(this,"container",(async e=>{this.destroyed||this._attach(e);}))));}_attach(e){e&&(this._projector.merge(e,this.render),this._attached=!0);}_detach(e){e&&this._attached&&(this._projector.detach(this.render),e.parentNode&&e.parentNode.removeChild(e),this._attached=!1);}};e$u([y$r({value:null})],T.prototype,"container",null),e$u([c$_("container")],T.prototype,"castContainer",null),e$u([y$r({aliasOf:"container"})],T.prototype,"domNode",void 0),e$u([y$r()],T.prototype,"iconClass",void 0),e$u([y$r()],T.prototype,"id",null),e$u([y$r()],T.prototype,"label",void 0),e$u([y$r()],T.prototype,"renderable",null),e$u([y$r()],T.prototype,"viewModel",void 0),e$u([y$r()],T.prototype,"visible",void 0),T=e$u([i$X("esri.widgets.Widget")],T);var L=T;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const l$1={base:"esri-identity-form",group:"esri-identity-form__group",label:"esri-identity-form__label",footer:"esri-identity-form__footer",esriInput:"esri-input",esriButton:"esri-button",esriButtonSecondary:"esri-button--secondary"},p$2="ArcGIS Online";let a$1=class extends L{constructor(s,e){super(s,e),this._usernameInputNode=null,this._passwordInputNode=null,this.messages=null,this.signingIn=!1,this.server=null,this.resource=null,this.error=null,this.oAuthPrompt=!1;}render(){const{error:s,server:e,resource:t,signingIn:i,oAuthPrompt:u,messages:a}=this,d=o$3("div",{class:l$1.group},s$7(u?a.oAuthInfo:a.info,{server:/\.arcgis\.com/i.test(e)?p$2:e,resource:`(${t||a.lblItem})`})),c=u?null:o$3("div",{class:l$1.group},o$3("label",{class:l$1.label},a.lblUser,o$3("input",{value:"",required:!0,autocomplete:"off",spellcheck:!1,type:"text",bind:this,afterCreate:p$5,"data-node-ref":"_usernameInputNode",class:l$1.esriInput}))),m=u?null:o$3("div",{class:l$1.group},o$3("label",{class:l$1.label},a.lblPwd,o$3("input",{value:"",required:!0,type:"password",bind:this,afterCreate:p$5,"data-node-ref":"_passwordInputNode",class:l$1.esriInput}))),h=o$3("div",{class:this.classes(l$1.group,l$1.footer)},o$3("input",{type:"submit",disabled:!!i,value:i?a.lblSigning:a.lblOk,class:l$1.esriButton}),o$3("input",{type:"button",value:a.lblCancel,bind:this,onclick:this._cancel,class:this.classes(l$1.esriButton,l$1.esriButtonSecondary)})),b=s?o$3("div",null,s.details&&s.details.httpStatus?a.invalidUser:a.noAuthService):null;return o$3("form",{class:l$1.base,bind:this,onsubmit:this._submit},d,b,c,m,h)}_cancel(){this._set("signingIn",!1),this._usernameInputNode&&(this._usernameInputNode.value=""),this._passwordInputNode&&(this._passwordInputNode.value=""),this.emit("cancel");}_submit(s){s.preventDefault(),this._set("signingIn",!0);const e=this.oAuthPrompt?{}:{username:this._usernameInputNode&&this._usernameInputNode.value,password:this._passwordInputNode&&this._passwordInputNode.value};this.emit("submit",e);}};e$u([y$r(),e$3("esri/identity/t9n/identity")],a$1.prototype,"messages",void 0),e$u([y$r()],a$1.prototype,"signingIn",void 0),e$u([y$r()],a$1.prototype,"server",void 0),e$u([y$r()],a$1.prototype,"resource",void 0),e$u([y$r()],a$1.prototype,"error",void 0),e$u([y$r()],a$1.prototype,"oAuthPrompt",void 0),a$1=e$u([i$X("esri.identity.IdentityForm")],a$1);var d$1=a$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
function e(e){return e&&"function"==typeof e.render}

/*!
* tabbable 5.3.3
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/
var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
var candidateSelector = /* #__PURE__ */candidateSelectors.join(',');
var NoElement = typeof Element === 'undefined';
var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
  return element.getRootNode();
} : function (element) {
  return element.ownerDocument;
};
/**
 * @param {Element} el container to check in
 * @param {boolean} includeContainer add container to check
 * @param {(node: Element) => boolean} filter filter candidates
 * @returns {Element[]}
 */

var getCandidates = function getCandidates(el, includeContainer, filter) {
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));

  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }

  candidates = candidates.filter(filter);
  return candidates;
};
/**
 * @callback GetShadowRoot
 * @param {Element} element to check for shadow root
 * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.
 */

/**
 * @callback ShadowRootFilter
 * @param {Element} shadowHostNode the element which contains shadow content
 * @returns {boolean} true if a shadow root could potentially contain valid candidates.
 */

/**
 * @typedef {Object} CandidatesScope
 * @property {Element} scope contains inner candidates
 * @property {Element[]} candidates
 */

/**
 * @typedef {Object} IterativeOptions
 * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;
 *  if a function, implies shadow support is enabled and either returns the shadow root of an element
 *  or a boolean stating if it has an undisclosed shadow root
 * @property {(node: Element) => boolean} filter filter candidates
 * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list
 * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;
 */

/**
 * @param {Element[]} elements list of element containers to match candidates from
 * @param {boolean} includeContainer add container list to check
 * @param {IterativeOptions} options
 * @returns {Array.<Element|CandidatesScope>}
 */


var getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);

  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();

    if (element.tagName === 'SLOT') {
      // add shadow dom slot scope (slot itself cannot be focusable)
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively(content, true, options);

      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scope: element,
          candidates: nestedCandidates
        });
      }
    } else {
      // check candidate element
      var validCandidate = matches.call(element, candidateSelector);

      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      } // iterate over shadow content if possible


      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);
      var validShadowRoot = !options.shadowRootFilter || options.shadowRootFilter(element);

      if (shadowRoot && validShadowRoot) {
        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed
        //  shadow exists, so look at light dom children as fallback BUT create a scope for any
        //  child candidates found because they're likely slotted elements (elements that are
        //  children of the web component element (which has the shadow), in the light dom, but
        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,
        //  _after_ we return from this recursive call
        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);

        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scope: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        // there's not shadow so just dig into the element's (light dom) children
        //  __without__ giving the element special scope treatment
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }

  return candidates;
};

var getTabindex = function getTabindex(node, isScope) {
  if (node.tabIndex < 0) {
    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
    // yet they are still part of the regular tab order; in FF, they get a default
    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab
    // order, consider their tab index to be 0.
    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;
    // so if they don't have a tabindex attribute specifically set, assume it's 0.
    //
    // isScope is positive for custom element with shadow root or slot that by default
    // have tabIndex -1, but need to be sorted by document order in order for their
    // content to be inserted in the correct position
    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {
      return 0;
    }
  }

  return node.tabIndex;
};

var sortOrderedTabbables = function sortOrderedTabbables(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
};

var isInput = function isInput(node) {
  return node.tagName === 'INPUT';
};

var isHiddenInput = function isHiddenInput(node) {
  return isInput(node) && node.type === 'hidden';
};

var isDetailsWithSummary = function isDetailsWithSummary(node) {
  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
    return child.tagName === 'SUMMARY';
  });
  return r;
};

var getCheckedRadio = function getCheckedRadio(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};

var isTabbableRadio = function isTabbableRadio(node) {
  if (!node.name) {
    return true;
  }

  var radioScope = node.form || getRootNode(node);

  var queryRadios = function queryRadios(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };

  var radioSet;

  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);
      return false;
    }
  }

  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};

var isRadio = function isRadio(node) {
  return isInput(node) && node.type === 'radio';
};

var isNonTabbableRadio = function isNonTabbableRadio(node) {
  return isRadio(node) && !isTabbableRadio(node);
};

var isZeroArea = function isZeroArea(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(),
      width = _node$getBoundingClie.width,
      height = _node$getBoundingClie.height;

  return width === 0 && height === 0;
};

var isHidden = function isHidden(node, _ref) {
  var displayCheck = _ref.displayCheck,
      getShadowRoot = _ref.getShadowRoot;

  // NOTE: visibility will be `undefined` if node is detached from the document
  //  (see notes about this further down), which means we will consider it visible
  //  (this is legacy behavior from a very long way back)
  // NOTE: we check this regardless of `displayCheck="none"` because this is a
  //  _visibility_ check, not a _display_ check
  if (getComputedStyle(node).visibility === 'hidden') {
    return true;
  }

  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
    return true;
  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
  //  (but NOT _the_ document; see second 'If' comment below for more).
  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
  //  is attached, and the one we need to check if it's in the document or not (because the
  //  shadow, and all nodes it contains, is never considered in the document since shadows
  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
  //  visibility, including all the nodes it contains). The host could be any normal node,
  //  or a custom element (i.e. web component). Either way, that's the one that is considered
  //  part of the document, not the shadow root, nor any of its children (i.e. the node being
  //  tested).
  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
  //  document (per the docs) and while it's a Document-type object, that document does not
  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
  //  node is actually detached.


  var nodeRootHost = getRootNode(node).host;
  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);

  if (!displayCheck || displayCheck === 'full') {
    if (typeof getShadowRoot === 'function') {
      // figure out if we should consider the node to be in an undisclosed shadow and use the
      //  'non-zero-area' fallback
      var originalNode = node;

      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);

        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
        ) {
          // node has an undisclosed shadow which means we can only treat it as a black box, so we
          //  fall back to a non-zero-area test
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          // iterate up slot
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          // cross shadow boundary
          node = rootNode.host;
        } else {
          // iterate up normal dom
          node = parentElement;
        }
      }

      node = originalNode;
    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
    //  it might be a falsy value, which means shadow DOM support is disabled
    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
    //  now we can just test to see if it would normally be visible or not, provided it's
    //  attached to the main document.
    // NOTE: We must consider case where node is inside a shadow DOM and given directly to
    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.


    if (nodeIsAttached) {
      // this works wherever the node is: if there's at least one client rect, it's
      //  somehow displayed; it also covers the CSS 'display: contents' case where the
      //  node itself is hidden in place of its contents; and there's no need to search
      //  up the hierarchy either
      return !node.getClientRects().length;
    } // Else, the node isn't attached to the document, which means the `getClientRects()`
    //  API will __always__ return zero rects (this can happen, for example, if React
    //  is used to render nodes onto a detached tree, as confirmed in this thread:
    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
    //
    // It also means that even window.getComputedStyle(node).display will return `undefined`
    //  because styles are only computed for nodes that are in the document.
    //
    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
    //  somehow. Though it was never stated officially, anyone who has ever used tabbable
    //  APIs on nodes in detached containers has actually implicitly used tabbable in what
    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
    //  considering __everything__ to be visible because of the innability to determine styles.

  } else if (displayCheck === 'non-zero-area') {
    // NOTE: Even though this tests that the node's client rect is non-zero to determine
    //  whether it's displayed, and that a detached node will __always__ have a zero-area
    //  client rect, we don't special-case for whether the node is attached or not. In
    //  this mode, we do want to consider nodes that have a zero area to be hidden at all
    //  times, and that includes attached or not.
    return isZeroArea(node);
  } // visible, as far as we can tell, or per current `displayCheck` mode


  return false;
}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
//  unless they are in the _first_ <legend> element of the top-most disabled
//  fieldset


var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>

    while (parentNode) {
      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
        // look for the first <legend> among the children of the disabled <fieldset>
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found

          if (child.tagName === 'LEGEND') {
            // if its parent <fieldset> is not nested in another disabled <fieldset>,
            // return whether `node` is a descendant of its first <legend>
            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
          }
        } // the disabled <fieldset> containing `node` has no <legend>


        return true;
      }

      parentNode = parentNode.parentElement;
    }
  } // else, node's tabbable/focusable state should not be affected by a fieldset's
  //  enabled/disabled state


  return false;
};

var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }

  return true;
};

var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {
  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }

  return true;
};

var isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);

  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  } // If a custom element has an explicit negative tabindex,
  // browsers will not allow tab targeting said element's children.


  return false;
};
/**
 * @param {Array.<Element|CandidatesScope>} candidates
 * @returns Element[]
 */


var sortByOrder = function sortByOrder(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function (item, i) {
    var isScope = !!item.scope;
    var element = isScope ? item.scope : item;
    var candidateTabindex = getTabindex(element, isScope);
    var elements = isScope ? sortByOrder(item.candidates) : element;

    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item: item,
        isScope: isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};

var tabbable = function tabbable(el, options) {
  options = options || {};
  var candidates;

  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([el], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }

  return sortByOrder(candidates);
};

var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

var isFocusable = function isFocusable(node, options) {
  options = options || {};

  if (!node) {
    throw new Error('No node provided');
  }

  if (matches.call(node, focusableCandidateSelector) === false) {
    return false;
  }

  return isNodeMatchingSelectorFocusable(options, node);
};

/*!
* focus-trap 6.3.0
* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
*/

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var activeFocusDelay;

var activeFocusTraps = function () {
  var trapQueue = [];
  return {
    activateTrap: function activateTrap(trap) {
      if (trapQueue.length > 0) {
        var activeTrap = trapQueue[trapQueue.length - 1];

        if (activeTrap !== trap) {
          activeTrap.pause();
        }
      }

      var trapIndex = trapQueue.indexOf(trap);

      if (trapIndex === -1) {
        trapQueue.push(trap);
      } else {
        // move this existing trap to the front of the queue
        trapQueue.splice(trapIndex, 1);
        trapQueue.push(trap);
      }
    },
    deactivateTrap: function deactivateTrap(trap) {
      var trapIndex = trapQueue.indexOf(trap);

      if (trapIndex !== -1) {
        trapQueue.splice(trapIndex, 1);
      }

      if (trapQueue.length > 0) {
        trapQueue[trapQueue.length - 1].unpause();
      }
    }
  };
}();

var isSelectableInput = function isSelectableInput(node) {
  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';
};

var isEscapeEvent = function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
};

var isTabEvent = function isTabEvent(e) {
  return e.key === 'Tab' || e.keyCode === 9;
};

var delay = function delay(fn) {
  return setTimeout(fn, 0);
}; // Array.find/findIndex() are not supported on IE; this replicates enough
//  of Array.findIndex() for our needs


var findIndex = function findIndex(arr, fn) {
  var idx = -1;
  arr.every(function (value, i) {
    if (fn(value)) {
      idx = i;
      return false; // break
    }

    return true; // next
  });
  return idx;
};
/**
 * Get an option's value when it could be a plain value, or a handler that provides
 *  the value.
 * @param {*} value Option's value to check.
 * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.
 * @returns {*} The `value`, or the handler's returned value.
 */


var valueOrHandler = function valueOrHandler(value) {
  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  return typeof value === 'function' ? value.apply(void 0, params) : value;
};

var createFocusTrap = function createFocusTrap(elements, userOptions) {
  var doc = document;

  var config = _objectSpread2({
    returnFocusOnDeactivate: true,
    escapeDeactivates: true,
    delayInitialFocus: true
  }, userOptions);

  var state = {
    // @type {Array<HTMLElement>}
    containers: [],
    // list of objects identifying the first and last tabbable nodes in all containers/groups in
    //  the trap
    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
    //  is active, but the trap should never get to a state where there isn't at least one group
    //  with at least one tabbable node in it (that would lead to an error condition that would
    //  result in an error being thrown)
    // @type {Array<{ container: HTMLElement, firstTabbableNode: HTMLElement|null, lastTabbableNode: HTMLElement|null }>}
    tabbableGroups: [],
    nodeFocusedBeforeActivation: null,
    mostRecentlyFocusedNode: null,
    active: false,
    paused: false
  };
  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later

  var containersContain = function containersContain(element) {
    return state.containers.some(function (container) {
      return container.contains(element);
    });
  };

  var getNodeForOption = function getNodeForOption(optionName) {
    var optionValue = config[optionName];

    if (!optionValue) {
      return null;
    }

    var node = optionValue;

    if (typeof optionValue === 'string') {
      node = doc.querySelector(optionValue);

      if (!node) {
        throw new Error("`".concat(optionName, "` refers to no known node"));
      }
    }

    if (typeof optionValue === 'function') {
      node = optionValue();

      if (!node) {
        throw new Error("`".concat(optionName, "` did not return a node"));
      }
    }

    return node;
  };

  var getInitialFocusNode = function getInitialFocusNode() {
    var node;

    if (getNodeForOption('initialFocus') !== null) {
      node = getNodeForOption('initialFocus');
    } else if (containersContain(doc.activeElement)) {
      node = doc.activeElement;
    } else {
      var firstTabbableGroup = state.tabbableGroups[0];
      var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
      node = firstTabbableNode || getNodeForOption('fallbackFocus');
    }

    if (!node) {
      throw new Error('Your focus-trap needs to have at least one focusable element');
    }

    return node;
  };

  var updateTabbableNodes = function updateTabbableNodes() {
    state.tabbableGroups = state.containers.map(function (container) {
      var tabbableNodes = tabbable(container);

      if (tabbableNodes.length > 0) {
        return {
          container: container,
          firstTabbableNode: tabbableNodes[0],
          lastTabbableNode: tabbableNodes[tabbableNodes.length - 1]
        };
      }

      return undefined;
    }).filter(function (group) {
      return !!group;
    }); // remove groups with no tabbable nodes
    // throw if no groups have tabbable nodes and we don't have a fallback focus node either

    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus')) {
      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');
    }
  };

  var tryFocus = function tryFocus(node) {
    if (node === doc.activeElement) {
      return;
    }

    if (!node || !node.focus) {
      tryFocus(getInitialFocusNode());
      return;
    }

    node.focus({
      preventScroll: !!config.preventScroll
    });
    state.mostRecentlyFocusedNode = node;

    if (isSelectableInput(node)) {
      node.select();
    }
  };

  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {
    var node = getNodeForOption('setReturnFocus');
    return node ? node : previousActiveElement;
  }; // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event.


  var checkPointerDown = function checkPointerDown(e) {
    if (containersContain(e.target)) {
      // allow the click since it ocurred inside the trap
      return;
    }

    if (valueOrHandler(config.clickOutsideDeactivates, e)) {
      // immediately deactivate the trap
      trap.deactivate({
        // if, on deactivation, we should return focus to the node originally-focused
        //  when the trap was activated (or the configured `setReturnFocus` node),
        //  then assume it's also OK to return focus to the outside node that was
        //  just clicked, causing deactivation, as long as that node is focusable;
        //  if it isn't focusable, then return focus to the original node focused
        //  on activation (or the configured `setReturnFocus` node)
        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
        //  which will result in the outside click setting focus to the node
        //  that was clicked, whether it's focusable or not; by setting
        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
        //  on activation (or the configured `setReturnFocus` node)
        returnFocus: config.returnFocusOnDeactivate && !isFocusable(e.target)
      });
      return;
    } // This is needed for mobile devices.
    // (If we'll only let `click` events through,
    // then on mobile they will be blocked anyways if `touchstart` is blocked.)


    if (valueOrHandler(config.allowOutsideClick, e)) {
      // allow the click outside the trap to take place
      return;
    } // otherwise, prevent the click


    e.preventDefault();
  }; // In case focus escapes the trap for some strange reason, pull it back in.


  var checkFocusIn = function checkFocusIn(e) {
    var targetContained = containersContain(e.target); // In Firefox when you Tab out of an iframe the Document is briefly focused.

    if (targetContained || e.target instanceof Document) {
      if (targetContained) {
        state.mostRecentlyFocusedNode = e.target;
      }
    } else {
      // escaped! pull it back in to where it just left
      e.stopImmediatePropagation();
      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
    }
  }; // Hijack Tab events on the first and last focusable nodes of the trap,
  // in order to prevent focus from escaping. If it escapes for even a
  // moment it can end up scrolling the page and causing confusion so we
  // kind of need to capture the action at the keydown phase.


  var checkTab = function checkTab(e) {
    updateTabbableNodes();
    var destinationNode = null;

    if (state.tabbableGroups.length > 0) {
      // make sure the target is actually contained in a group
      var containerIndex = findIndex(state.tabbableGroups, function (_ref) {
        var container = _ref.container;
        return container.contains(e.target);
      });

      if (containerIndex < 0) {
        // target not found in any group: quite possible focus has escaped the trap,
        //  so bring it back in to...
        if (e.shiftKey) {
          // ...the last node in the last group
          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
        } else {
          // ...the first node in the first group
          destinationNode = state.tabbableGroups[0].firstTabbableNode;
        }
      } else if (e.shiftKey) {
        // REVERSE
        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {
          var firstTabbableNode = _ref2.firstTabbableNode;
          return e.target === firstTabbableNode;
        });

        if (startOfGroupIndex >= 0) {
          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
          var destinationGroup = state.tabbableGroups[destinationGroupIndex];
          destinationNode = destinationGroup.lastTabbableNode;
        }
      } else {
        // FORWARD
        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {
          var lastTabbableNode = _ref3.lastTabbableNode;
          return e.target === lastTabbableNode;
        });

        if (lastOfGroupIndex >= 0) {
          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;

          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
          destinationNode = _destinationGroup.firstTabbableNode;
        }
      }
    } else {
      destinationNode = getNodeForOption('fallbackFocus');
    }

    if (destinationNode) {
      e.preventDefault();
      tryFocus(destinationNode);
    }
  };

  var checkKey = function checkKey(e) {
    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
      e.preventDefault();
      trap.deactivate();
      return;
    }

    if (isTabEvent(e)) {
      checkTab(e);
      return;
    }
  };

  var checkClick = function checkClick(e) {
    if (valueOrHandler(config.clickOutsideDeactivates, e)) {
      return;
    }

    if (containersContain(e.target)) {
      return;
    }

    if (valueOrHandler(config.allowOutsideClick, e)) {
      return;
    }

    e.preventDefault();
    e.stopImmediatePropagation();
  }; //
  // EVENT LISTENERS
  //


  var addListeners = function addListeners() {
    if (!state.active) {
      return;
    } // There can be only one listening focus trap at a time


    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event
    // that caused the focus trap activation.

    activeFocusDelay = config.delayInitialFocus ? delay(function () {
      tryFocus(getInitialFocusNode());
    }) : tryFocus(getInitialFocusNode());
    doc.addEventListener('focusin', checkFocusIn, true);
    doc.addEventListener('mousedown', checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener('touchstart', checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener('click', checkClick, {
      capture: true,
      passive: false
    });
    doc.addEventListener('keydown', checkKey, {
      capture: true,
      passive: false
    });
    return trap;
  };

  var removeListeners = function removeListeners() {
    if (!state.active) {
      return;
    }

    doc.removeEventListener('focusin', checkFocusIn, true);
    doc.removeEventListener('mousedown', checkPointerDown, true);
    doc.removeEventListener('touchstart', checkPointerDown, true);
    doc.removeEventListener('click', checkClick, true);
    doc.removeEventListener('keydown', checkKey, true);
    return trap;
  }; //
  // TRAP DEFINITION
  //


  trap = {
    activate: function activate(activateOptions) {
      if (state.active) {
        return this;
      }

      updateTabbableNodes();
      state.active = true;
      state.paused = false;
      state.nodeFocusedBeforeActivation = doc.activeElement;
      var onActivate = activateOptions && activateOptions.onActivate ? activateOptions.onActivate : config.onActivate;

      if (onActivate) {
        onActivate();
      }

      addListeners();
      return this;
    },
    deactivate: function deactivate(deactivateOptions) {
      if (!state.active) {
        return this;
      }

      clearTimeout(activeFocusDelay);
      removeListeners();
      state.active = false;
      state.paused = false;
      activeFocusTraps.deactivateTrap(trap);
      var onDeactivate = deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate;

      if (onDeactivate) {
        onDeactivate();
      }

      var returnFocus = deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate;

      if (returnFocus) {
        delay(function () {
          tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
        });
      }

      return this;
    },
    pause: function pause() {
      if (state.paused || !state.active) {
        return this;
      }

      state.paused = true;
      removeListeners();
      return this;
    },
    unpause: function unpause() {
      if (!state.paused || !state.active) {
        return this;
      }

      state.paused = false;
      updateTabbableNodes();
      addListeners();
      return this;
    },
    updateContainerElements: function updateContainerElements(containerElements) {
      var elementsAsArray = [].concat(containerElements).filter(Boolean);
      state.containers = elementsAsArray.map(function (element) {
        return typeof element === 'string' ? doc.querySelector(element) : element;
      });

      if (state.active) {
        updateTabbableNodes();
      }

      return this;
    }
  }; // initialize container elements

  trap.updateContainerElements(elements);
  return trap;
};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const l={base:"esri-identity-modal",open:"esri-identity-modal--open",closed:"esri-identity-modal--closed",title:"esri-identity-modal__title",dialog:"esri-identity-modal__dialog",content:"esri-identity-modal__content",closeButton:"esri-identity-modal__close-button",iconClose:"esri-icon-close"};let d=class extends L{constructor(t,e){super(t,e),this.container=document.createElement("div"),this.content=null,this.open=!1,this._close=()=>{this.open=!1;},document.body.appendChild(this.container),this.own(this.watch("open",(()=>this._toggleFocusTrap())));}destroy(){this._destroyFocusTrap();}render(){const t=this.id,{open:e,content:o,title:s,messages:i}=this,n=e&&!!o,a={[l.open]:n,[l.closed]:!n},c=o$3("button",{class:l.closeButton,"aria-label":i.close,title:i.close,bind:this,onclick:this._close},o$3("span",{"aria-hidden":"true",class:l.iconClose})),d=`${t}_title`,p=`${t}_content`,u=s?o$3("h1",{id:d,class:l.title},s):null,m=n?o$3("div",{bind:this,class:l.dialog,role:"dialog","aria-labelledby":d,"aria-describedby":p,afterCreate:this._createFocusTrap},c,u,this._renderContent(p)):null;return o$3("div",{tabIndex:-1,class:this.classes(l.base,a)},m)}_destroyFocusTrap(){var t;null==(t=this._focusTrap)||t.deactivate({onDeactivate:null}),this._focusTrap=null;}_toggleFocusTrap(){const{_focusTrap:t,open:e}=this;t&&(e?t.activate():t.deactivate());}_createFocusTrap(t){this._destroyFocusTrap();const o=requestAnimationFrame((()=>{this._focusTrap=createFocusTrap(t,{initialFocus:"input",onDeactivate:this._close}),this._toggleFocusTrap();}));this.own(n$R((()=>cancelAnimationFrame(o))));}_renderContent(t){const e$1=this.content;return "string"==typeof e$1?o$3("div",{class:l.content,id:t,innerHTML:e$1}):e(e$1)?o$3("div",{class:l.content,id:t},e$1.render()):e$1 instanceof HTMLElement?o$3("div",{class:l.content,id:t,bind:e$1,afterCreate:this._attachToNode}):null}_attachToNode(t){const e=this;t.appendChild(e);}};e$u([y$r({readOnly:!0})],d.prototype,"container",void 0),e$u([y$r()],d.prototype,"content",void 0),e$u([y$r()],d.prototype,"open",void 0),e$u([y$r(),e$3("esri/t9n/common")],d.prototype,"messages",void 0),e$u([y$r({aliasOf:"messages.auth.signIn"})],d.prototype,"title",void 0),d=e$u([i$X("esri.identity.IdentityModal")],d);var p$1=d;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const t="esriJSAPIOAuth";class s$2{constructor(t,s){this.oAuthInfo=null,this.storage=null,this.appId=null,this.expires=null,this.ssl=null,this.token=null,this.userId=null,this.oAuthInfo=t,this.storage=s,this._init();}isValid(){let t=!1;if(this.oAuthInfo&&this.token&&this.userId){const s=Date.now();if(this.expires>s){(this.expires-s)/1e3>60*this.oAuthInfo.minTimeUntilExpiration&&(t=!0);}}return t}save(){if(!this.storage)return;const s=this._load(),e=this.oAuthInfo;if(e&&e.authNamespace&&e.portalUrl){let o=s[e.authNamespace];o||(o=s[e.authNamespace]={}),o[e.portalUrl]={appId:this.appId=e.appId,expires:this.expires,ssl:this.ssl,token:this.token,userId:this.userId};try{this.storage.setItem(t,JSON.stringify(s));}catch(i){console.log(i);}}}destroy(){const s=this._load(),e=this.oAuthInfo;if(e&&e.appId&&e.portalUrl&&this.token&&this.expires>Date.now()){const t=e.portalUrl.replace(/^http:/i,"https:")+"/sharing/rest/oauth2/revokeToken",s=new FormData;if(s.append("f","json"),s.append("auth_token",this.token),s.append("client_id",e.appId),s.append("token_type_hint","access_token"),"function"==typeof navigator.sendBeacon)navigator.sendBeacon(t,s);else {const e=new XMLHttpRequest;e.open("POST",t),e.send(s);}}if(e&&e.authNamespace&&e.portalUrl&&this.storage){const o=s[e.authNamespace];if(o){delete o[e.portalUrl];try{this.storage.setItem(t,JSON.stringify(s));}catch(i){console.log(i);}}}e&&(e._oAuthCred=null,this.oAuthInfo=null);}_init(){const t=this._load(),s=this.oAuthInfo;if(s&&s.authNamespace&&s.portalUrl){let e=t[s.authNamespace];e&&(e=e[s.portalUrl],e&&(this.appId=e.appId,this.expires=e.expires,this.ssl=e.ssl,this.token=e.token,this.userId=e.userId));}}_load(){let s={};if(this.storage){const i=this.storage.getItem(t);if(i)try{s=JSON.parse(i);}catch(e){console.log(e);}}return s}}s$2.prototype.declaredClass="esri.identity.OAuthCredential";

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
var p;let s$1=p=class extends a$B{constructor(o){super(o),this._oAuthCred=null,this.appId=null,this.authNamespace="/",this.expiration=20160,this.forceLogin=!1,this.forceUserId=!1,this.locale=null,this.minTimeUntilExpiration=30,this.popup=!1,this.popupCallbackUrl="oauth-callback.html",this.popupWindowFeatures="height=490,width=800,resizable,scrollbars,status",this.portalUrl="https://www.arcgis.com",this.preserveUrlHash=!1,this.userId=null;}clone(){return p.fromJSON(this.toJSON())}};e$u([y$r({json:{write:!0}})],s$1.prototype,"appId",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"authNamespace",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"expiration",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"forceLogin",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"forceUserId",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"locale",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"minTimeUntilExpiration",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"popup",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"popupCallbackUrl",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"popupWindowFeatures",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"portalUrl",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"preserveUrlHash",void 0),e$u([y$r({json:{write:!0}})],s$1.prototype,"userId",void 0),s$1=p=e$u([i$X("esri.identity.OAuthInfo")],s$1);var i$1=s$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let s=class extends a$B{constructor(r){super(r),this.adminTokenServiceUrl=null,this.currentVersion=null,this.hasPortal=null,this.hasServer=null,this.owningSystemUrl=null,this.owningTenant=null,this.server=null,this.shortLivedTokenValidity=null,this.tokenServiceUrl=null,this.webTierAuth=null;}};e$u([y$r({json:{write:!0}})],s.prototype,"adminTokenServiceUrl",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"currentVersion",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"hasPortal",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"hasServer",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"owningSystemUrl",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"owningTenant",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"server",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"shortLivedTokenValidity",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"tokenServiceUrl",void 0),e$u([y$r({json:{write:!0}})],s.prototype,"webTierAuth",void 0),s=e$u([i$X("esri.identity.ServerInfo")],s);var i=s;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
const R={},b=e=>{const t=new $$2(e.owningSystemUrl).host,s=new $$2(e.server).host,r=/.+\.arcgis\.com$/i;return r.test(t)&&r.test(s)},P=(e,t)=>!!(b(e)&&t&&t.some((t=>t.test(e.server))));let C=null,D=null;try{C=window.localStorage,D=window.sessionStorage;}catch{}let j=class extends n$F{constructor(){super(),this._portalConfig=_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e.esriGeowConfig,this.serverInfos=[],this.oAuthInfos=[],this.credentials=[],this._soReqs=[],this._xoReqs=[],this._portals=[],this.defaultOAuthInfo=null,this.defaultTokenValidity=60,this.dialog=null,this.formConstructor=d$1,this.tokenValidity=null,this.normalizeWebTierAuth=!1,this._appUrlObj=U$4(window.location.href),this._busy=null,this._rejectOnPersistedPageShow=!1,this._oAuthHash=null,this._gwTokenUrl="/sharing/rest/generateToken",this._agsRest="/rest/services",this._agsPortal=/\/sharing(\/|$)/i,this._agsAdmin=/(https?:\/\/[^\/]+\/[^\/]+)\/admin\/?(\/.*)?$/i,this._adminSvcs=/\/rest\/admin\/services(\/|$)/i,this._gwDomains=[{regex:/^https?:\/\/www\.arcgis\.com/i,customBaseUrl:"maps.arcgis.com",tokenServiceUrl:"https://www.arcgis.com/sharing/rest/generateToken"},{regex:/^https?:\/\/(?:dev|[a-z\d-]+\.mapsdev)\.arcgis\.com/i,customBaseUrl:"mapsdev.arcgis.com",tokenServiceUrl:"https://dev.arcgis.com/sharing/rest/generateToken"},{regex:/^https?:\/\/(?:devext|[a-z\d-]+\.mapsdevext)\.arcgis\.com/i,customBaseUrl:"mapsdevext.arcgis.com",tokenServiceUrl:"https://devext.arcgis.com/sharing/rest/generateToken"},{regex:/^https?:\/\/(?:qaext|[a-z\d-]+\.mapsqa)\.arcgis\.com/i,customBaseUrl:"mapsqa.arcgis.com",tokenServiceUrl:"https://qaext.arcgis.com/sharing/rest/generateToken"},{regex:/^https?:\/\/[a-z\d-]+\.maps\.arcgis\.com/i,customBaseUrl:"maps.arcgis.com",tokenServiceUrl:"https://www.arcgis.com/sharing/rest/generateToken"}],this._legacyFed=[],this._regexSDirUrl=/http.+\/rest\/services\/?/gi,this._regexServerType=/(\/(FeatureServer|GPServer|GeoDataServer|GeocodeServer|GeoenrichmentServer|GeometryServer|GlobeServer|ImageServer|MapServer|MobileServer|NAServer|NetworkDiagramServer|ParcelFabricServer|RelationalCatalogServer|SceneServer|StreamServer|UtilityNetworkServer|ValidationServer|VectorTileServer|VersionManagementServer)).*/gi,this._gwUser=/http.+\/users\/([^\/]+)\/?.*/i,this._gwItem=/http.+\/items\/([^\/]+)\/?.*/i,this._gwGroup=/http.+\/groups\/([^\/]+)\/?.*/i,this._rePortalTokenSvc=/\/sharing(\/rest)?\/generatetoken/i,this._createDefaultOAuthInfo=!0,this._hasTestedIfAppIsOnPortal=!1,this._getOAuthHash(),window.addEventListener("pageshow",(e=>{this._pageShowHandler(e);}));}registerServers(e){const t=this.serverInfos;t?(e=e.filter((e=>!this.findServerInfo(e.server))),this.serverInfos=t.concat(e)):this.serverInfos=e,e.forEach((e=>{e.owningSystemUrl&&this._portals.push(e.owningSystemUrl),e.hasPortal&&this._portals.push(e.server);}));}registerOAuthInfos(e){const t=this.oAuthInfos;if(t){for(const s of e){const e=this.findOAuthInfo(s.portalUrl);e&&t.splice(t.indexOf(e),1);}this.oAuthInfos=t.concat(e);}else this.oAuthInfos=e;}registerToken(e){e={...e};const t=this._sanitizeUrl(e.server),s=this._isServerRsrc(t);let r,i$1=this.findServerInfo(t),o=!0;i$1||(i$1=new i,i$1.server=this._getServerInstanceRoot(t),s?i$1.hasServer=!0:(i$1.tokenServiceUrl=this._getTokenSvcUrl(t),i$1.hasPortal=!0),this.registerServers([i$1])),r=this._findCredential(t),r?(delete e.server,Object.assign(r,e),o=!1):(r=new q({userId:e.userId,server:i$1.server,token:e.token,expires:e.expires,ssl:e.ssl,scope:s?"server":"portal"}),r.resources=[t],this.credentials.push(r)),r.emitTokenChange(!1),o||r.refreshServerTokens();}toJSON(){return p$18({serverInfos:this.serverInfos.map((e=>e.toJSON())),oAuthInfos:this.oAuthInfos.map((e=>e.toJSON())),credentials:this.credentials.map((e=>e.toJSON()))})}initialize(e){if(!e)return;"string"==typeof e&&(e=JSON.parse(e));const t=e.serverInfos,s=e.oAuthInfos,r=e.credentials;if(t){const e=[];t.forEach((t=>{t.server&&t.tokenServiceUrl&&e.push(t.declaredClass?t:new i(t));})),e.length&&this.registerServers(e);}if(s){const e=[];s.forEach((t=>{t.appId&&e.push(t.declaredClass?t:new i$1(t));})),e.length&&this.registerOAuthInfos(e);}r&&r.forEach((e=>{e.server&&e.token&&e.expires&&e.expires>Date.now()&&((e=e.declaredClass?e:new q(e)).emitTokenChange(),this.credentials.push(e));}));}findServerInfo(e){let t;e=this._sanitizeUrl(e);for(const s of this.serverInfos)if(this._hasSameServerInstance(s.server,e)){t=s;break}return t}findOAuthInfo(e){let t;e=this._sanitizeUrl(e);for(const s of this.oAuthInfos)if(this._hasSameServerInstance(s.portalUrl,e)){t=s;break}return t}findCredential(e,t){let s;e=this._sanitizeUrl(e);const r=this._isServerRsrc(e)?"server":"portal";if(t){for(const i of this.credentials)if(this._hasSameServerInstance(i.server,e)&&t===i.userId&&i.scope===r){s=i;break}}else for(const i of this.credentials)if(this._hasSameServerInstance(i.server,e)&&-1!==this._getIdenticalSvcIdx(e,i)&&i.scope===r){s=i;break}return s}getCredential(e,t){let s,r,i$1=!0;t&&(s=!!t.token,r=t.error,i$1=!1!==t.prompt),t={...t},e=this._sanitizeUrl(e);const o=h$u(),n=B$4();if(t.signal&&v$9(t.signal,(()=>{o.abort();})),v$9(o,(()=>{n.reject(new s$x("identity-manager:user-aborted","ABORTED"));})),b$b(o))return n.promise;t.signal=o.signal;const h=this._isAdminResource(e),c=s?this.findCredential(e):null;let d;if(c&&r&&r.details&&498===r.details.httpStatus)c.destroy();else if(c)return d=new s$x("identity-manager:not-authorized","You are currently signed in as: '"+c.userId+"'. You do not have access to this resource: "+e,{error:r}),n.reject(d),n.promise;const u=this._findCredential(e,t);if(u)return n.resolve(u),n.promise;let p=this.findServerInfo(e);if(p)!p.hasServer&&this._isServerRsrc(e)&&(p._restInfoPms=this._getTokenSvcUrl(e),p.hasServer=!0);else {const t=this._getTokenSvcUrl(e);if(!t)return d=new s$x("identity-manager:unknown-resource","Unknown resource - could not find token service endpoint."),n.reject(d),n.promise;p=new i,p.server=this._getServerInstanceRoot(e),"string"==typeof t?(p.tokenServiceUrl=t,p.hasPortal=!0):(p._restInfoPms=t,p.hasServer=!0),this.registerServers([p]);}return p.hasPortal&&void 0===p._selfReq&&(i$1||E$4(p.tokenServiceUrl,window.location.origin)||this._gwDomains.some((e=>e.tokenServiceUrl===p.tokenServiceUrl)))&&(p._selfReq={owningTenant:t&&t.owningTenant,selfDfd:this._getPortalSelf(p.tokenServiceUrl.replace(this._rePortalTokenSvc,"/sharing/rest/portals/self"),e)}),this._enqueue(e,p,t,n,h)}getResourceName(e){return this._isRESTService(e)?e.replace(this._regexSDirUrl,"").replace(this._regexServerType,"")||"":this._gwUser.test(e)&&e.replace(this._gwUser,"$1")||this._gwItem.test(e)&&e.replace(this._gwItem,"$1")||this._gwGroup.test(e)&&e.replace(this._gwGroup,"$1")||""}generateToken(e,t,s){const r=this._rePortalTokenSvc.test(e.tokenServiceUrl),i=new $$2(window.location.href.toLowerCase()),o=e.shortLivedTokenValidity;let n,h,d,u,p,_,f,g;t&&(g=this.tokenValidity||o||this.defaultTokenValidity,g>o&&o>0&&(g=o)),s&&(n=s.isAdmin,h=s.serverUrl,d=s.token,_=s.signal,f=s.ssl,e.customParameters=s.customParameters),n?u=e.adminTokenServiceUrl:(u=e.tokenServiceUrl,p=new $$2(u.toLowerCase()),e.webTierAuth&&s&&s.serverUrl&&!f&&"http"===i.scheme&&(E$4(i.uri,u,!0)||"https"===p.scheme&&i.host===p.host&&"7080"===i.port&&"7443"===p.port)&&(u=u.replace(/^https:/i,"http:").replace(/:7443/i,":7080")));const m={query:{request:"getToken",username:null==t?void 0:t.username,password:null==t?void 0:t.password,serverUrl:h,token:d,expiration:g,referer:n||r?window.location.host:null,client:n?"referer":null,f:"json",...e.customParameters},method:"post",authMode:"anonymous",useProxy:this._useProxy(e,s),signal:_,...null==s?void 0:s.ioArgs};r||(m.withCredentials=!1);return U$1(u,m).then((s=>{const r=s.data;if(!r||!r.token)return new s$x("identity-manager:authentication-failed","Unable to generate token");const i=e.server;return R[i]||(R[i]={}),t&&(R[i][t.username]=t.password),r.validity=g,r}))}isBusy(){return !!this._busy}checkSignInStatus(e){return this.checkAppAccess(e,"").then((e=>e.credential))}checkAppAccess(e,t,s){let r=!1;return this.getCredential(e,{prompt:!1}).then((i=>{let o;const n={f:"json"};if("portal"===i.scope)if(t&&(this._doPortalSignIn(e)||s&&s.force))o=i.server+"/sharing/rest/oauth2/validateAppAccess",n.client_id=t;else {if(!i.token)return {credential:i};o=i.server+"/sharing/rest";}else {if(!i.token)return {credential:i};o=i.server+"/rest/services";}return i.token&&(n.token=i.token),U$1(o,{query:n,authMode:"anonymous"}).then((e=>{if(!1===e.data.valid)throw new s$x("identity-manager:not-authorized",`You are currently signed in as: '${i.userId}'.`,e.data);return r=!!e.data.viewOnlyUserTypeApp,{credential:i}})).catch((e=>{if("identity-manager:not-authorized"===e.name)throw e;const t=e.details&&e.details.httpStatus;if(498===t)throw i.destroy(),new s$x("identity-manager:not-authenticated","User is not signed in.");if(400===t)throw new s$x("identity-manager:invalid-request");return {credential:i}}))})).then((e=>({credential:e.credential,viewOnly:r})))}setOAuthResponseHash(e){var t;const s=this._oAuthDfd;if(this._oAuthDfd=null,!s||!e)return;clearInterval(this._oAuthIntervalId),null==(t=this._oAuthOnHashHandle)||t.remove(),"#"===e.charAt(0)&&(e=e.substring(1));const r=b$d(e);if(r.error){const e="access_denied"===r.error,t=new s$x(e?"identity-manager:user-aborted":"identity-manager:authentication-failed",e?"ABORTED":"OAuth: "+r.error+" - "+r.error_description);s.reject(t);}else {const e=s.sinfo_,t=s.oinfo_,i=t._oAuthCred,o=new q({userId:r.username,server:e.server,token:r.access_token,expires:Date.now()+1e3*Number(r.expires_in),ssl:"true"===r.ssl,_oAuthCred:i});t.userId=o.userId,i.storage=r.persist?C:D,i.token=o.token,i.expires=o.expires,i.userId=o.userId,i.ssl=o.ssl,i.save(),s.resolve(o);}}setOAuthRedirectionHandler(e){this._oAuthRedirectFunc=e;}setProtocolErrorHandler(e){this._protocolFunc=e;}signIn(e,t,s={}){const r=B$4(),i=()=>{var e,t,s,r,i;null==(e=h)||e.remove(),null==(t=l)||t.remove(),null==(s=c)||s.remove(),null==(r=n)||r.destroy(),null==(i=this.dialog)||i.destroy(),this.dialog=n=h=l=c=null;},o=()=>{i(),this._oAuthDfd=null,r.reject(new s$x("identity-manager:user-aborted","ABORTED"));};s.signal&&v$9(s.signal,(()=>{o();}));let n=new this.formConstructor;n.resource=this.getResourceName(e),n.server=t.server,this.dialog=new p$1,this.dialog.content=n,this.dialog.open=!0,this.emit("dialog-create");let h=n.on("cancel",o),l=this.dialog.watch("open",o),c=n.on("submit",(e=>{this.generateToken(t,e,{isAdmin:s.isAdmin,signal:s.signal}).then((o=>{i();const n=new q({userId:e.username,server:t.server,token:o.token,expires:null!=o.expires?Number(o.expires):null,ssl:!!o.ssl,isAdmin:s.isAdmin,validity:o.validity});r.resolve(n);})).catch((e=>{n.error=e,n.signingIn=!1;}));}));return r.promise}oAuthSignIn(e,t,s,r){this._oAuthDfd=B$4();const i=this._oAuthDfd;null!=r&&r.signal&&v$9(r.signal,(()=>{const e=this._oAuthDfd&&this._oAuthDfd.oAuthWin_;e&&!e.closed?e.close():this.dialog&&h();})),i.resUrl_=e,i.sinfo_=t,i.oinfo_=s;const o=!r||!1!==r.oAuthPopupConfirmation;if(!s.popup||!o)return this._doOAuthSignIn(e,t,s),i.promise;const n=new this.formConstructor;n.oAuthPrompt=!0,n.server=t.server,this.dialog=new p$1,this.dialog.content=n,this.dialog.open=!0,this.emit("dialog-create");const h=()=>{u(),this._oAuthDfd=null,i.reject(new s$x("identity-manager:user-aborted","ABORTED"));},l=n.on("cancel",h),c=this.dialog.watch("open",h),d=n.on("submit",(()=>{u(),this._doOAuthSignIn(e,t,s);})),u=()=>{l.remove(),c.remove(),d.remove(),n.destroy(),this.dialog.destroy(),this.dialog=null;};return i.promise}destroyCredentials(){if(this.credentials){this.credentials.slice().forEach((e=>{e.destroy();}));}this.emit("credentials-destroy");}enablePostMessageAuth(e="https://www.arcgis.com/sharing/rest"){this._postMessageAuthHandle&&this._postMessageAuthHandle.remove(),this._postMessageAuthHandle=r$r(window,"message",(t=>{var s;if((t.origin===window.location.origin||t.origin.endsWith(".arcgis.com"))&&"arcgis:auth:requestCredential"===(null==(s=t.data)?void 0:s.type)){const s=t.source;this.getCredential(e).then((e=>{s.postMessage({type:"arcgis:auth:credential",credential:{expires:e.expires,server:e.server,ssl:e.ssl,token:e.token,userId:e.userId}},t.origin);})).catch((e=>{s.postMessage({type:"arcgis:auth:error",error:{name:e.name,message:e.message}},t.origin);}));}}));}disablePostMessageAuth(){this._postMessageAuthHandle&&(this._postMessageAuthHandle.remove(),this._postMessageAuthHandle=null);}_getOAuthHash(){let e=window.location.hash;if(e){"#"===e.charAt(0)&&(e=e.substring(1));const t=b$d(e);let s=!1;if(t.access_token&&t.expires_in&&t.state&&t.hasOwnProperty("username"))try{t.state=JSON.parse(t.state),"object"==typeof t.state&&t.state.portalUrl&&(this._oAuthHash=t,s=!0);}catch{}else t.error&&t.error_description&&(console.log("IdentityManager OAuth Error: ",t.error," - ",t.error_description),"access_denied"===t.error&&(s=!0));s&&(window.location.hash="object"==typeof t.state&&t.state.hash||"");}}_pageShowHandler(e){if(e.persisted&&this.isBusy()&&this._rejectOnPersistedPageShow){const e=new s$x("identity-manager:user-aborted","ABORTED");this._errbackFunc(e);}}_findCredential(e,t){let s,r,i,o,n=-1;const a=t&&t.token,h=t&&t.resource,l=this._isServerRsrc(e)?"server":"portal",c=this.credentials.filter((t=>this._hasSameServerInstance(t.server,e)&&t.scope===l));if(e=h||e,c.length)if(1===c.length){if(s=c[0],o=this.findServerInfo(s.server),r=o&&o.owningSystemUrl,i=r&&this.findCredential(r,s.userId),n=this._getIdenticalSvcIdx(e,s),!a)return -1===n&&s.resources.push(e),this._addResource(e,i),s;-1!==n&&(s.resources.splice(n,1),this._removeResource(e,i));}else {let t,s;if(c.some((a=>(s=this._getIdenticalSvcIdx(e,a),-1!==s&&(t=a,o=this.findServerInfo(t.server),r=o&&o.owningSystemUrl,i=r&&this.findCredential(r,t.userId),n=s,!0)))),a)t&&(t.resources.splice(n,1),this._removeResource(e,i));else if(t)return this._addResource(e,i),t}}_findOAuthInfo(e){let t=this.findOAuthInfo(e);if(!t)for(const s of this.oAuthInfos)if(this._isIdProvider(s.portalUrl,e)){t=s;break}return t}_addResource(e,t){t&&-1===this._getIdenticalSvcIdx(e,t)&&t.resources.push(e);}_removeResource(e,t){let s=-1;t&&(s=this._getIdenticalSvcIdx(e,t),s>-1&&t.resources.splice(s,1));}_useProxy(e,t){return t&&t.isAdmin&&!E$4(e.adminTokenServiceUrl,window.location.href)||!this._isPortalDomain(e.tokenServiceUrl)&&"10.1"===String(e.currentVersion)&&!E$4(e.tokenServiceUrl,window.location.href)}_getOrigin(e){const t=new $$2(e);return t.scheme+"://"+t.host+(null!=t.port?":"+t.port:"")}_getServerInstanceRoot(e){const t=e.toLowerCase();let s=t.indexOf(this._agsRest);return -1===s&&this._isAdminResource(e)&&(s=this._agsAdmin.test(e)?e.replace(this._agsAdmin,"$1").length:e.search(this._adminSvcs)),-1===s&&(s=t.indexOf("/sharing")),-1===s&&"/"===t.substr(-1)&&(s=t.length-1),s>-1?e.substring(0,s):e}_hasSameServerInstance(e,t){return "/"===e.substr(-1)&&(e=e.slice(0,-1)),e=e.toLowerCase(),t=this._getServerInstanceRoot(t).toLowerCase(),e=this._normalizeAGOLorgDomain(e),t=this._normalizeAGOLorgDomain(t),(e=e.substr(e.indexOf(":")))===(t=t.substr(t.indexOf(":")))}_normalizeAGOLorgDomain(e){const t=/^https?:\/\/(?:cdn|[a-z\d-]+\.maps)\.arcgis\.com/i,s=/^https?:\/\/(?:cdndev|[a-z\d-]+\.mapsdevext)\.arcgis\.com/i,r=/^https?:\/\/(?:cdnqa|[a-z\d-]+\.mapsqa)\.arcgis\.com/i;return t.test(e)?e=e.replace(t,"https://www.arcgis.com"):s.test(e)?e=e.replace(s,"https://devext.arcgis.com"):r.test(e)&&(e=e.replace(r,"https://qaext.arcgis.com")),e}_sanitizeUrl(e){const t=(s$H.request.proxyUrl||"").toLowerCase(),s=t?e.toLowerCase().indexOf(t+"?"):-1;return -1!==s&&(e=e.substring(s+t.length+1)),e=z$6(e),U$4(e).path}_isRESTService(e){return e.indexOf(this._agsRest)>-1}_isAdminResource(e){return this._agsAdmin.test(e)||this._adminSvcs.test(e)}_isServerRsrc(e){return this._isRESTService(e)||this._isAdminResource(e)}_isIdenticalService(e,t){let s;if(this._isRESTService(e)&&this._isRESTService(t)){const r=this._getSuffix(e).toLowerCase(),i=this._getSuffix(t).toLowerCase();if(s=r===i,!s){const e=/(.*)\/(MapServer|FeatureServer).*/gi;s=r.replace(e,"$1")===i.replace(e,"$1");}}else this._isAdminResource(e)&&this._isAdminResource(t)?s=!0:this._isServerRsrc(e)||this._isServerRsrc(t)||!this._isPortalDomain(e)||(s=!0);return s}_isPortalDomain(e){const t=new $$2(e.toLowerCase()),s=this._portalConfig;let r=this._gwDomains.some((e=>e.regex.test(t.uri)));return !r&&s&&(r=this._hasSameServerInstance(this._getServerInstanceRoot(s.restBaseUrl),t.uri)),r||s$H.portalUrl&&(r=E$4(t,s$H.portalUrl,!0)),r||(r=this._portals.some((e=>this._hasSameServerInstance(e,t.uri)))),r=r||this._agsPortal.test(t.path),r}_isIdProvider(e,t){let s=-1,r=-1;this._gwDomains.forEach(((i,o)=>{-1===s&&i.regex.test(e)&&(s=o),-1===r&&i.regex.test(t)&&(r=o);}));let i=!1;if(s>-1&&r>-1&&(0===s||4===s?0!==r&&4!==r||(i=!0):1===s?1!==r&&2!==r||(i=!0):2===s?2===r&&(i=!0):3===s&&3===r&&(i=!0)),!i){const s=this.findServerInfo(t),r=s&&s.owningSystemUrl;r&&b(s)&&this._isPortalDomain(r)&&this._isIdProvider(e,r)&&(i=!0);}return i}_getIdenticalSvcIdx(e,t){let s=-1;for(let r=0;r<t.resources.length;r++){const i=t.resources[r];if(this._isIdenticalService(e,i)){s=r;break}}return s}_getSuffix(e){return e.replace(this._regexSDirUrl,"").replace(this._regexServerType,"$1")}_getTokenSvcUrl(e){let t,s,r;if(this._isRESTService(e)||this._isAdminResource(e)){const r=this._getServerInstanceRoot(e);return t=r+"/admin/generateToken",s=U$1(e=r+"/rest/info",{query:{f:"json"}}).then((e=>e.data)),{adminUrl:t,promise:s}}if(this._isPortalDomain(e)){let t="";if(this._gwDomains.some((s=>(s.regex.test(e)&&(t=s.tokenServiceUrl),!!t))),t||this._portals.some((s=>(this._hasSameServerInstance(s,e)&&(t=s+this._gwTokenUrl),!!t))),t||(r=e.toLowerCase().indexOf("/sharing"),-1!==r&&(t=e.substring(0,r)+this._gwTokenUrl)),t||(t=this._getOrigin(e)+this._gwTokenUrl),t){const s=new $$2(e).port;/^http:\/\//i.test(e)&&"7080"===s&&(t=t.replace(/:7080/i,":7443")),t=t.replace(/http:/i,"https:");}return t}if(-1!==e.toLowerCase().indexOf("premium.arcgisonline.com"))return "https://premium.arcgisonline.com/server/tokens"}_exchangeToken(e,t,s){return U$1(`${e}/sharing/rest/oauth2/exchangeToken`,{authMode:"anonymous",method:"post",query:{f:"json",client_id:t,token:s}}).then((e=>e.data.token))}_getPlatformSelf(e,t){return U$1(`${e}/sharing/rest/oauth2/platformSelf`,{authMode:"anonymous",headers:{"X-Esri-Auth-Client-Id":t,"X-Esri-Auth-Redirect-Uri":window.location.href.replace(/#.*$/,"")},method:"post",query:{f:"json"},withCredentials:!0}).then((e=>e.data))}_getPortalSelf(e,t){let s;if(this._gwDomains.some((t=>(t.regex.test(e)&&(s=t.customBaseUrl),!!s))),s)return Promise.resolve({allSSL:!0,currentVersion:"4.4",customBaseUrl:s,portalMode:"multitenant",supportsOAuth:!0});"https:"===window.location.protocol?e=e.replace(/^http:/i,"https:").replace(/:7080/i,":7443"):/^http:/i.test(t)&&(e=e.replace(/^https:/i,"http:").replace(/:7443/i,":7080"));return U$1(e,{query:{f:"json"},authMode:"anonymous",withCredentials:!0}).then((e=>e.data))}_doPortalSignIn(e){const t=this._portalConfig,s=window.location.href,r=this.findServerInfo(e);return !(!t&&!this._isPortalDomain(s)||!(r?r.hasPortal||r.owningSystemUrl&&this._isPortalDomain(r.owningSystemUrl):this._isPortalDomain(e))||!(this._isIdProvider(s,e)||t&&(this._hasSameServerInstance(this._getServerInstanceRoot(t.restBaseUrl),e)||this._isIdProvider(t.restBaseUrl,e))||E$4(s,e,!0)))}_checkProtocol(e,t,s,r){let i=!0;const o=r?t.adminTokenServiceUrl:t.tokenServiceUrl;if(0===o.trim().toLowerCase().indexOf("https:")&&0!==window.location.href.toLowerCase().indexOf("https:")&&A$b(o)&&(i=!!this._protocolFunc&&!!this._protocolFunc({resourceUrl:e,serverInfo:t}),!i)){s(new s$x("identity-manager:aborted","Aborted the Sign-In process to avoid sending password over insecure connection."));}return i}_enqueue(e,t,s,r,i,o){return r||(r=B$4()),r.resUrl_=e,r.sinfo_=t,r.options_=s,r.admin_=i,r.refresh_=o,this._busy?this._hasSameServerInstance(this._getServerInstanceRoot(e),this._busy.resUrl_)?(this._oAuthDfd&&this._oAuthDfd.oAuthWin_&&this._oAuthDfd.oAuthWin_.focus(),this._soReqs.push(r)):this._xoReqs.push(r):this._doSignIn(r),r.promise}_doSignIn(e){this._busy=e,this._rejectOnPersistedPageShow=!1;const t=t=>{const s=e.options_&&e.options_.resource,r=e.resUrl_,i=e.refresh_;let o=!1;-1===this.credentials.indexOf(t)&&(i&&-1!==this.credentials.indexOf(i)?(i.userId=t.userId,i.token=t.token,i.expires=t.expires,i.validity=t.validity,i.ssl=t.ssl,i.creationTime=t.creationTime,o=!0,t=i):this.credentials.push(t)),t.resources||(t.resources=[]),t.resources.push(s||r),t.scope=this._isServerRsrc(r)?"server":"portal",t.emitTokenChange();const n=this._soReqs,a={};this._soReqs=[],n.forEach((e=>{if(!this._isIdenticalService(r,e.resUrl_)){const s=this._getSuffix(e.resUrl_);a[s]||(a[s]=!0,t.resources.push(e.resUrl_));}})),e.resolve(t),n.forEach((e=>{this._hasSameServerInstance(this._getServerInstanceRoot(r),e.resUrl_)?e.resolve(t):this._soReqs.push(e);})),this._busy=e.resUrl_=e.sinfo_=e.refresh_=null,o||this.emit("credential-create",{credential:t}),this._soReqs.length?this._doSignIn(this._soReqs.shift()):this._xoReqs.length&&this._doSignIn(this._xoReqs.shift());},s=t=>{e.reject(t),this._busy=e.resUrl_=e.sinfo_=e.refresh_=null,this._soReqs.length?this._doSignIn(this._soReqs.shift()):this._xoReqs.length&&this._doSignIn(this._xoReqs.shift());},i=(r,i,o,n)=>{var h,c;const d=e.sinfo_,u=!e.options_||!1!==e.options_.prompt,p=d.hasPortal&&this._findOAuthInfo(e.resUrl_);let _,f;if(r)t(new q({userId:r,server:d.server,token:o||null,expires:null!=n?Number(n):null,ssl:!!i}));else if(window!==window.parent&&null!=(h=this._appUrlObj.query)&&h["arcgis-auth-origin"]&&null!=(c=this._appUrlObj.query)&&c["arcgis-auth-portal"]&&this._hasSameServerInstance(this._getServerInstanceRoot(this._appUrlObj.query["arcgis-auth-portal"]),e.resUrl_)){var m;window.parent.postMessage({type:"arcgis:auth:requestCredential"},this._appUrlObj.query["arcgis-auth-origin"]);const r=r$r(window,"message",(e=>{e.source===window.parent&&e.data&&("arcgis:auth:credential"===e.data.type?(r.remove(),t(new q(e.data.credential))):"arcgis:auth:error"===e.data.type&&(r.remove(),s(s$x.fromJSON(e.data.error))));}));v$9(null==(m=e.options_)?void 0:m.signal,(()=>{r.remove();}));}else if(p){let r=p._oAuthCred;if(!r){const e=new s$2(p,C),t=new s$2(p,D);e.isValid()&&t.isValid()?e.expires>t.expires?(r=e,t.destroy()):(r=t,e.destroy()):r=e.isValid()?e:t,p._oAuthCred=r;}if(r.isValid())_=new q({userId:r.userId,server:d.server,token:r.token,expires:r.expires,ssl:r.ssl,_oAuthCred:r}),p.appId!==r.appId&&this._doPortalSignIn(e.resUrl_)?e._pendingDfd=this._exchangeToken(_.server,p.appId,_.token).then((e=>{_.token=e,r.token=e,r.save(),t(_);})).catch((()=>{t(_);})):t(_);else if(this._oAuthHash&&this._hasSameServerInstance(p.portalUrl,this._oAuthHash.state.portalUrl)){const e=this._oAuthHash;_=new q({userId:e.username,server:d.server,token:e.access_token,expires:Date.now()+1e3*Number(e.expires_in),ssl:"true"===e.ssl,oAuthState:e.state,_oAuthCred:r}),p.userId=_.userId,r.storage=e.persist?C:D,r.token=_.token,r.expires=_.expires,r.userId=_.userId,r.ssl=_.ssl,r.save(),this._oAuthHash=null,t(_);}else {const r=()=>{u?e._pendingDfd=this.oAuthSignIn(e.resUrl_,d,p,e.options_).then(t,s):(f=new s$x("identity-manager:not-authenticated","User is not signed in."),s(f));};this._doPortalSignIn(e.resUrl_)?e._pendingDfd=this._getPlatformSelf(d.server,p.appId).then((({portalUrl:e,token:s,username:i})=>{!e||E$4(e,window.location.origin,!0)?(_=new q({server:d.server,userId:i,token:s}),t(_)):r();})).catch(r):r();}}else if(u){if(this._checkProtocol(e.resUrl_,d,s,e.admin_)){let r=e.options_;e.admin_&&(r=r||{},r.isAdmin=!0),e._pendingDfd=this.signIn(e.resUrl_,d,r).then(t,s);}}else f=new s$x("identity-manager:not-authenticated","User is not signed in."),s(f);},o=()=>{const r=e.sinfo_,i=r.owningSystemUrl,o=e.options_;let n,a,h,l;if(o&&(n=o.token,a=o.error,h=o.prompt),l=this._findCredential(i,{token:n,resource:e.resUrl_}),!l)for(const e of this.credentials)if(this._isIdProvider(i,e.server)){l=e;break}if(l){const i=this.findCredential(e.resUrl_,l.userId);if(i)t(i);else if(P(r,this._legacyFed)){const e=l.toJSON();e.server=r.server,e.resources=null,t(new q(e));}else {(e._pendingDfd=this.generateToken(this.findServerInfo(l.server),null,{serverUrl:e.resUrl_,token:l.token,signal:e.options_.signal,ssl:l.ssl})).then((s=>{t(new q({userId:l.userId,server:r.server,token:s.token,expires:null!=s.expires?Number(s.expires):null,ssl:!!s.ssl,isAdmin:e.admin_,validity:s.validity}));}),s);}}else {this._busy=null,n&&(e.options_.token=null);(e._pendingDfd=this.getCredential(i.replace(/\/?$/,"/sharing"),{resource:e.resUrl_,owningTenant:r.owningTenant,signal:e.options_.signal,token:n,error:a,prompt:h})).then((()=>{this._enqueue(e.resUrl_,e.sinfo_,e.options_,e,e.admin_);}),(e=>{s(e);}));}};this._errbackFunc=s;const n=e.sinfo_.owningSystemUrl,h=this._isServerRsrc(e.resUrl_),c=e.sinfo_._restInfoPms;c?c.promise.then((t=>{const s=e.sinfo_;if(s._restInfoPms){s.adminTokenServiceUrl=s._restInfoPms.adminUrl,s._restInfoPms=null,s.tokenServiceUrl=t$N("authInfo.tokenServicesUrl",t)||t$N("authInfo.tokenServiceUrl",t)||t$N("tokenServiceUrl",t),s.shortLivedTokenValidity=t$N("authInfo.shortLivedTokenValidity",t),s.currentVersion=t.currentVersion,s.owningTenant=t.owningTenant;const e=s.owningSystemUrl=t.owningSystemUrl;e&&this._portals.push(e);}h&&s.owningSystemUrl?o():i();}),(()=>{e.sinfo_._restInfoPms=null;const t=new s$x("identity-manager:server-identification-failed","Unknown resource - could not find token service endpoint.");s(t);})):h&&n?o():e.sinfo_._selfReq?e.sinfo_._selfReq.selfDfd.then((t=>{const s={};let r,i,o,n;return t&&(r=t.user&&t.user.username,s.username=r,s.allSSL=t.allSSL,i=t.supportsOAuth,o=t.currentVersion,"multitenant"===t.portalMode&&(n=t.customBaseUrl)),e.sinfo_.webTierAuth=!!r,r&&this.normalizeWebTierAuth?this.generateToken(e.sinfo_,null,{ssl:s.allSSL}).catch((()=>null)).then((e=>(s.portalToken=e&&e.token,s.tokenExpiration=e&&e.expires,s))):!r&&i&&parseFloat(o)>=4.4&&!this._findOAuthInfo(e.resUrl_)?this._generateOAuthInfo({portalUrl:e.sinfo_.server,customBaseUrl:n,owningTenant:e.sinfo_._selfReq.owningTenant}).catch((()=>null)).then((()=>s)):s})).catch((()=>null)).then((t=>{e.sinfo_._selfReq=null,t?i(t.username,t.allSSL,t.portalToken,t.tokenExpiration):i();})):i();}_generateOAuthInfo(e){let t,s,r=e.portalUrl;const i=e.customBaseUrl,o=e.owningTenant,n=!this.defaultOAuthInfo&&this._createDefaultOAuthInfo&&!this._hasTestedIfAppIsOnPortal;if(n){s=window.location.href;let e=s.indexOf("?");e>-1&&(s=s.slice(0,e)),e=s.search(/\/(apps|home)\//),s=e>-1?s.slice(0,e):null;}return n&&s?(this._hasTestedIfAppIsOnPortal=!0,t=U$1(s+"/sharing/rest",{query:{f:"json"}}).then((()=>{this.defaultOAuthInfo=new i$1({appId:"arcgisonline",popupCallbackUrl:s+"/home/oauth-callback.html"});}))):t=Promise.resolve(),t.then((()=>{if(this.defaultOAuthInfo)return r=r.replace(/^http:/i,"https:"),U$1(r+"/sharing/rest/oauth2/validateRedirectUri",{query:{accountId:o,client_id:this.defaultOAuthInfo.appId,redirect_uri:T$6(this.defaultOAuthInfo.popupCallbackUrl),f:"json"}}).then((e=>{if(e.data.valid){const t=this.defaultOAuthInfo.clone();e.data.urlKey&&i?t.portalUrl="https://"+e.data.urlKey.toLowerCase()+"."+i:t.portalUrl=r,t.popup=window!==window.top||!(E$4(r,window.location.origin)||this._gwDomains.some((e=>e.regex.test(r)&&e.regex.test(window.location.origin)))),this.oAuthInfos.push(t);}}))}))}_doOAuthSignIn(e,s,r){const i={portalUrl:r.portalUrl};!r.popup&&r.preserveUrlHash&&window.location.hash&&(i.hash=window.location.hash);const o={client_id:r.appId,response_type:"token",state:JSON.stringify(i),expiration:r.expiration,locale:r.locale,redirect_uri:r.popup?T$6(r.popupCallbackUrl):window.location.href.replace(/#.*$/,"")};r.forceLogin&&(o.force_login=!0),r.forceUserId&&r.userId&&(o.prepopulatedusername=r.userId),!r.popup&&this._doPortalSignIn(e)&&(o.redirectToUserOrgUrl=!0);const n=r.portalUrl.replace(/^http:/i,"https:")+"/sharing/oauth2/authorize",h=n+"?"+C$9(o);if(r.popup){const e=window.open(h,"esriJSAPIOAuth",r.popupWindowFeatures);if(e)e.focus(),this._oAuthDfd.oAuthWin_=e,this._oAuthIntervalId=setInterval((()=>{if(e.closed){clearInterval(this._oAuthIntervalId),this._oAuthOnHashHandle.remove();const e=this._oAuthDfd;if(e){const t=new s$x("identity-manager:user-aborted","ABORTED");e.reject(t);}}}),500),this._oAuthOnHashHandle=r$r(_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.e,"arcgis:auth:hash",(e=>{this.setOAuthResponseHash(e.detail);}));else {const e=new s$x("identity-manager:popup-blocked","ABORTED");this._oAuthDfd.reject(e);}}else this._rejectOnPersistedPageShow=!0,this._oAuthRedirectFunc?this._oAuthRedirectFunc({authorizeParams:o,authorizeUrl:n,resourceUrl:e,serverInfo:s,oAuthInfo:r}):window.location.href=h;}};j=e$u([i$X("esri.identity.IdentityManagerBase")],j);let q=class extends n$F.EventedAccessor{constructor(e){super(e),this._oAuthCred=null,this.tokenRefreshBuffer=2,e&&e._oAuthCred&&(this._oAuthCred=e._oAuthCred);}initialize(){this.resources=this.resources||[],null==this.creationTime&&(this.creationTime=Date.now());}refreshToken(){const e=s$r.findServerInfo(this.server),t=e&&e.owningSystemUrl,s=!!t&&"server"===this.scope,r=s&&P(e,s$r._legacyFed),i=e.webTierAuth,o=i&&s$r.normalizeWebTierAuth,n=R[this.server],a=n&&n[this.userId];let h,l=this.resources&&this.resources[0],c=s&&s$r.findServerInfo(t),d={username:this.userId,password:a};if(i&&!o)return;s&&!c&&s$r.serverInfos.some((e=>(s$r._isIdProvider(t,e.server)&&(c=e),!!c)));const u=c&&s$r.findCredential(c.server,this.userId);if(!s||u){if(!r){if(s)h={serverUrl:l,token:u&&u.token,ssl:u&&u.ssl};else if(o)d=null,h={ssl:this.ssl};else {if(!a){let t;return l&&(l=s$r._sanitizeUrl(l),this._enqueued=1,t=s$r._enqueue(l,e,null,null,this.isAdmin,this),t.then((()=>{this._enqueued=0,this.refreshServerTokens();})).catch((()=>{this._enqueued=0;}))),t}this.isAdmin&&(h={isAdmin:!0});}return s$r.generateToken(s?c:e,s?null:d,h).then((e=>{this.token=e.token,this.expires=null!=e.expires?Number(e.expires):null,this.creationTime=Date.now(),this.validity=e.validity,this.emitTokenChange(),this.refreshServerTokens();})).catch((()=>{}))}u.refreshToken();}}refreshServerTokens(){"portal"===this.scope&&s$r.credentials.forEach((e=>{const t=s$r.findServerInfo(e.server),s=t&&t.owningSystemUrl;e!==this&&e.userId===this.userId&&s&&"server"===e.scope&&(s$r._hasSameServerInstance(this.server,s)||s$r._isIdProvider(s,this.server))&&(P(t,s$r._legacyFed)?(e.token=this.token,e.expires=this.expires,e.creationTime=this.creationTime,e.validity=this.validity,e.emitTokenChange()):e.refreshToken());}));}emitTokenChange(e){clearTimeout(this._refreshTimer);const t=this.server&&s$r.findServerInfo(this.server),s=t&&t.owningSystemUrl,r=s&&s$r.findServerInfo(s);!1===e||s&&"portal"!==this.scope&&(!r||!r.webTierAuth||s$r.normalizeWebTierAuth)||null==this.expires&&null==this.validity||this._startRefreshTimer(),this.emit("token-change");}destroy(){this.userId=this.server=this.token=this.expires=this.validity=this.resources=this.creationTime=null,this._oAuthCred&&(this._oAuthCred.destroy(),this._oAuthCred=null);const e=s$r.credentials.indexOf(this);e>-1&&s$r.credentials.splice(e,1),this.emitTokenChange(),this.emit("destroy");}toJSON(){const e=p$18({userId:this.userId,server:this.server,token:this.token,expires:this.expires,validity:this.validity,ssl:this.ssl,isAdmin:this.isAdmin,creationTime:this.creationTime,scope:this.scope}),t=this.resources;return t&&t.length>0&&(e.resources=t.slice()),e}_startRefreshTimer(){clearTimeout(this._refreshTimer);const e=6e4*this.tokenRefreshBuffer,t=2**31-1;let s=(this.validity?this.creationTime+6e4*this.validity:this.expires)-Date.now();s<0?s=0:s>t&&(s=t),this._refreshTimer=setTimeout(this.refreshToken.bind(this),s>e?s-e:s);}};e$u([y$r()],q.prototype,"creationTime",void 0),e$u([y$r()],q.prototype,"expires",void 0),e$u([y$r()],q.prototype,"isAdmin",void 0),e$u([y$r()],q.prototype,"oAuthState",void 0),e$u([y$r()],q.prototype,"resources",void 0),e$u([y$r()],q.prototype,"scope",void 0),e$u([y$r()],q.prototype,"server",void 0),e$u([y$r()],q.prototype,"ssl",void 0),e$u([y$r()],q.prototype,"token",void 0),e$u([y$r()],q.prototype,"tokenRefreshBuffer",void 0),e$u([y$r()],q.prototype,"userId",void 0),e$u([y$r()],q.prototype,"validity",void 0),q=e$u([i$X("esri.identity.Credential")],q);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
let o=class extends j{};o=e$u([i$X("esri.identity.IdentityManager")],o);const a=new o;n$E(a);

const IdentityManager = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': a
});

const amd = "define" in window && typeof window.define === 'function' && "amd" in window.define;
function invokeTaskMethod(task, url, createParams, readResponse) {
  const _deferred = (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.c)();
  function onComplete(response) {
    let result;
    try {
      result = readResponse(response);
    }
    catch (e) {
      onError(e);
      return;
    }
    _deferred.resolve(result);
  }
  function onError(error) {
    _deferred.reject(error);
  }
  try {
    const restParams = createParams ? createParams() : {};
    restParams.f = restParams.f || "json";
    getCredential(task.url).then((credential) => {
      if (credential === null || credential === void 0 ? void 0 : credential.token) {
        restParams.token = credential.token;
      }
      U$1(task.url + url, {
        query: restParams,
        responseType: "json"
      }).then(onComplete, onError);
    });
  }
  catch (e) {
    onError(e);
  }
  return _deferred.promise;
}
async function requireModule(modulePath) {
  return new Promise((resolve) => window.require([modulePath], (moduleDefault) => {
    resolve(moduleDefault);
  }));
}
async function getIdentityManager() {
  return requireModule("esri/identity/IdentityManager");
}
async function getCredential(url) {
  if (amd) {
    const amdIdentityManager = await getIdentityManager();
    const credential = await amdIdentityManager.getCredential(url, { oAuthPopupConfirmation: false });
    return credential;
  }
  else {
    const credential = await a.getCredential(url, { oAuthPopupConfirmation: false });
    return credential;
  }
}
/**
 * Copies the json object into the optional rest object.
 * @param json Object to copy.
 * @param rest Default 'rest' parameter.
 */
function jsonToRest(json, rest) {
  rest = Object.assign({}, rest);
  for (const p in json) {
    if (typeof json[p] === "string") {
      rest[p] = json[p];
    }
    else {
      const value = json[p];
      rest[p] = JSON.stringify(ensureSerialized(value));
    }
  }
  return rest;
}
function ensureSerialized(object) {
  return typeof object.toJSON === "function" ? object.toJSON() : object;
}
function throwEmptyTaskResponse() {
  throw new Error("Geoenrichment service returned empty response");
}

/**
 * Executes Geoenrichment methods.
 */
function getCenter(geometry) {
  const extent = geometry.extent;
  return new j$b({
    x: (extent.xmin + extent.xmax) / 2,
    y: (extent.ymin + extent.ymax) / 2,
    spatialReference: extent.spatialReference
  });
}
class GeoenrichmentTask {
  constructor(url, token) {
    // The url parameter can contain static query parameters such as appID, langCode.
    // We extract these parameters from the URL and pass them later in all requests to Geoenrichment server.
    if (url) {
      const urlObj = U$4(url);
      url = urlObj.path;
      this._query = mixin({
        langCode: (0,_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.b)()
      }, urlObj.query || {});
      // always pass token to the Geoenrichment server
      if (token) {
        this._query.token = token;
      }
    }
    const protocol = "https:"; // always HTTPS
    this.url = url || protocol + "//geoenrich.arcgis.com/arcgis/rest/services/World/GeoenrichmentServer";
    this.token = token;
  }
  //--------------------------------------------------------------------------
  //
  // Enrich
  //
  //--------------------------------------------------------------------------
  /**
   * Calculates contextual data such as demographic characteristics about input study areas
   * @param params EnrichParameters. Parameters for the enrich operation. See EnrichParameters class for full list of available parameters.
   *
   * @returns Promise => { featureSets: [] of FeatureSet, message: string }.
   *
   * @example
   *
   * var task = new GeoenrichmentTask();
   *     task.enrich({
   *         studyAreas: [{ geometry: { x: -117.1956, y: 34.0572 } }],
   *         studyAreaOptions: new DriveBuffer({ radii: [5, 10, 15] }), // minutes by default
   *         variables: ["Wealth.MEDNW_CY", "KeyUSFacts.*"]
   *     }).then(function(result) {
   *         // process result here
   *     }, function(error) {
   *         // handle error here
   *     });
   */
  enrich(params) {
    return invokeTaskMethod(this, "/Geoenrichment/enrich", () => jsonToRest(params instanceof EnrichParameters ? params.toJSON() : new EnrichParameters(params).toJSON(), this._query), (response) => {
      const data = response.data;
      if (!data.results ||
        data.results.length < 1 ||
        !data.results[0].value ||
        !data.results[0].value.FeatureSet ||
        data.results[0].value.FeatureSet.length < 1) {
        throwEmptyTaskResponse();
      }
      const result = {
        featureSets: [],
        messages: data.messages
      };
      const featureSets = data.results[0].value.FeatureSet;
      for (let i = 0; i < featureSets.length; i++) {
        result.featureSets.push(new GEFeatureSet(featureSets[i]));
      }
      return result;
    });
  }
  //--------------------------------------------------------------------------
  //
  // Data collections
  //
  //--------------------------------------------------------------------------
  /**
   * Gets the list of available data collections. Each data collection consists of a set of variables.
   * @param countryID String. Optional. Two-digit code of country of interest. If not provided, the method will only return those data collections that span the whole world.
   * @param dataCollectionID String. Optional. Useful to get information about one specific data collection.
   * @param outFields String[] | "*". Optional. List of metadata fields to return for each variable. Useful to optimize response size. If not provided, the method will return all metadata fields.
   * @param derivativeVariablesToAdd String[]. Optional. Array of derivative variable types to be added to requested data collections. It could contain the following values:
   *  - "percent" Add derivative variables providing a percentage value.
   *  - "average" Add derivative variables providing an average value.
   *  - "index"   Add derivative variables providing an index value.
   *  - "all"     Add all derivative variables.
   *
   * @returns Promise => [] of data collections.
   *
   * @example
   * var task = new GeoenrichmentTask();
   *     task.getDataCollections("GB").then(function(dataCollections) {
   *         // process result here
   *     }, function(error) {
   *         // handle error here
   *     });
   */
  getDataCollections(countryID, dataCollectionID, outFields, derivativeVariablesToAdd) {
    let url;
    if (dataCollectionID) {
      url = "/GetDataCollections/execute";
    }
    else {
      url = "/Geoenrichment/DataCollections";
      if (countryID) {
        url += "/" + countryID;
      }
    }
    return invokeTaskMethod(this, url, () => {
      const restParams = Object.assign({}, this._query);
      restParams.suppressNullValues = true;
      if (outFields) {
        if (outFields.length === 0) {
          restParams.outFields = "none";
        }
        else {
          restParams.outFields = JSON.stringify(outFields);
        }
      }
      if (dataCollectionID) {
        if (countryID) {
          restParams.sourcecountry = countryID;
        }
        restParams.searchtext = "id:" + dataCollectionID;
      }
      if (derivativeVariablesToAdd) {
        restParams.addDerivativeVariables = JSON.stringify(derivativeVariablesToAdd);
      }
      return restParams;
    }, (response) => {
      const data = response.data;
      if (data.error) {
        throw data.error;
      }
      return data.results || data.dataCollections || data.DataCollections;
    });
  }
  //--------------------------------------------------------------------------
  //
  // Reports
  //
  //--------------------------------------------------------------------------
  /**
   * Gets the list of reports available for specified country
   * @param countryID String. Required. Two-digit code of country of interest.
   *
   * @returns Promise => [] of reports.
   */
  getReports(countryID) {
    return invokeTaskMethod(this, "/Geoenrichment/Reports/" + countryID, () => (Object.assign({}, this._query)), (response) => response.data.reports);
  }
  //--------------------------------------------------------------------------
  //
  // Countries
  //
  //--------------------------------------------------------------------------
  /**
   * Gets the list of many countries Geoenrichment has data for.
   *
   * @returns Promise => [] of countries.
   */
  getAvailableCountries() {
    return invokeTaskMethod(this, "/Geoenrichment/Countries", () => (Object.assign({}, this._query)), (response) => {
      const data = response.data;
      if (data.error) {
        throw data.error;
      }
      return data.countries;
    });
  }
  /**
   * Determines country the given geometry belongs to.
   * @param geometry Geometry.
   *
   * @returns A promise of array of countries. The first item in this array the the country of interest.
   */
  getCountries(geometry) {
    let center;
    switch (geometry.type) {
      case "point":
        center = geometry;
        break;
      case "polyline":
        //
        //Pick one segment from the geometry and obtain its center
        //
        const path = geometry.paths[0];
        const polyline = new m$m({
          spatialReference: geometry.spatialReference
        });
        polyline.addPath(path);
        center = getCenter(polyline);
        break;
      case "polygon":
        //
        //Pick one ring from the geometry and obtain its center
        //
        const ring = geometry.rings[0];
        const polygon = new x$4({
          spatialReference: geometry.spatialReference
        });
        polygon.addRing(ring);
        center = getCenter(polygon);
        break;
    }
    return this.enrich(new EnrichParameters({
      analysisVariables: ["GlobalIntersect.*"],
      studyAreas: [{ geometry: center }],
      forStorage: false
    })).then((enrichResult) => {
      const countries = [];
      const features = enrichResult.featureSets[0].features;
      for (let i = 0; i < features.length; i++) {
        const countryID = features[i].attributes.sourceCountry;
        if (countries.indexOf(countryID) < 0) {
          countries.push(countryID);
        }
      }
      if (countries.length === 0) {
        throw new Error("There is no data for the selected area.");
      }
      return countries;
    });
  }
  //--------------------------------------------------------------------------
  //
  // Data layers
  //
  //--------------------------------------------------------------------------
  getDataLayerInfos(countryID) {
    return invokeTaskMethod(this, "/Geoenrichment/DataLayers" + countryID, () => (Object.assign({}, this._query)), (response) => response.data.layers);
  }
  getDataLayerInfo(countryID, layerID) {
    return invokeTaskMethod(this, "/Geoenrichment/DataLayers" + countryID + "/" + layerID, () => (Object.assign({}, this._query)), (response) => response.data.layer);
  }
}

const NumberState = "n_", PercentState = "p_", AverageState = "a_", IndexState = "i_", suffixCache = { n_: "", p_: " (%)", a_: " (avg)", i_: " (index)" }, statesCache = {
  n_p_: { labels: ["#", "%"], names: ["n_", "p_"], ids: null },
  n_a_: { labels: ["#", "Avg"], names: ["n_", "a_"], ids: null },
  n_i_: { labels: ["#", "Index"], names: ["n_", "i_"], ids: null },
  n_p_i_: { labels: ["#", "%", "Index"], names: ["n_", "p_", "i_"], ids: null },
  n_a_i_: { labels: ["#", "Avg", "Index"], names: ["n_", "a_", "i_"], ids: null }
};
class DerivativeVariables {
  setCache(variables) {
    this._variables = variables;
  }
  get(id) {
    if (!id) {
      return null;
    }
    const parsedId = this._parseId(id);
    let variable = this._variables[parsedId.id];
    if (variable && parsedId.state !== NumberState) {
      // Create a virtual variable
      variable = {
        fullName: id,
        alias: variable.alias + suffixCache[parsedId.state],
        description: variable.description + suffixCache[parsedId.state]
      };
    }
    return variable;
  }
  getStates(id) {
    id = id && this._parseId(id).id; // Get id without prefix
    const variable = this._variables[id];
    if (!variable) {
      return null;
    }
    let statesId = NumberState;
    if (variable.percentBase) {
      statesId += PercentState;
    }
    if (variable.averageBase) {
      statesId += AverageState;
    }
    if (Number(variable.indexBase)) {
      statesId += IndexState;
    }
    let states = statesCache[statesId];
    if (states) {
      states = Object.assign({}, states); // Create shallow copy
      states.ids = states.names.map((name) => name + id);
    }
    return states || null;
  }
  _parseId(id) {
    const state = id.substr(0, 2);
    return suffixCache.hasOwnProperty(state) ? { id: id.substr(2), state } : { id, state: NumberState };
  }
}

class KeywordFilter {
  //-----------------------------------------------------------
  // Constructor
  //-----------------------------------------------------------
  // Ctor.
  // searchString: String
  //      A search string containing comma and/or space separated keywords.
  // searchFields: String | String[]
  //      A field or an array of fields to search in.
  //      If it is missing, the text fields of a variable are used.
  constructor(searchString, searchFields) {
    this.isKeywordFilter = true;
    this.searchString = "";
    this.delimiters = /[\s;,\/?:@&=\$#'%"`~!^\(\)\[\]\{\}\\*|\u0000-\u001f\u007f-\u009f\u2000-\u2bff\ud800-\uffff]+/;
    this.totalCount = 0;
    this.bitIndex = 0;
    this.matchCount = 0;
    this.update(searchString);
    this.searchFields = !searchFields
      ? ["alias", "description", "fieldCategory"]
      : typeof searchFields === "string"
        ? [searchFields]
        : searchFields;
  }
  //-----------------------------------------------------------
  // update
  //-----------------------------------------------------------
  // Updates the filter with a new search string
  update(searchString) {
    this.searchString = (searchString && searchString.trim()) || "";
    this._keywords =
      !this.searchString || this.searchString === "*" ? null : this.searchString.toLowerCase().split(this.delimiters);
  }
  //-----------------------------------------------------------
  // isActive
  //-----------------------------------------------------------
  isActive() {
    return !!this._keywords;
  }
  //-----------------------------------------------------------
  //  match
  //-----------------------------------------------------------
  // Tests an object to match the keyword filter
  match(object) {
    return !this._keywords || this.searchFields.some((searchField) => this._matchField(object[searchField]));
  }
  _matchField(field) {
    if (!field) {
      return false;
    }
    field = field.toLowerCase();
    return this._keywords.every((keyword) => field.indexOf(keyword) >= 0);
  }
}

// geoenrichment.stores
class VariableStore {
  //--------------------------------------------------------------------------
  //
  // Constructor
  //
  //--------------------------------------------------------------------------
  constructor(params) {
    /**
     * For the Global "country" allows users to override the hideInDataBrowser variable property, and show all variables.
     * - Defaults to false
     */
    this.displayAllGlobalVariables = false;
    /**
     * FullName property is associated with one of full names of a variable.
     * If the same variable appears in more than one data collection,
     * its full name is generated from the first appearance, but the
     * variable is hashed under every of its full names. So, you can pass any of full names of
     * of a variable in the 'get' method.
     */
    this.idProperty = "fullName";
    /**
     * Query engine used.
     */
    this.queryEngine = createSimpleQueryEngine();
    /**
     * Module to provide derivative variables. If true, the default module will be used.
     */
    this.derivativeVariables = false;
    mixin(this, params);
    this.categories = new DeferredStore({ syncQuery: this._queryCategories.bind(this) });
    this.dataCollections = new DeferredStore({ syncQuery: this._queryDataCollections.bind(this) });
    if (this.derivativeVariables === true) {
      this.derivativeVariables = new DerivativeVariables();
    }
  }
  //--------------------------------------------------------------------------
  //
  // Category and data collection stores support
  //
  //--------------------------------------------------------------------------
  _queryCategories(query, options) {
    query = this._cleanUpCountryID(query);
    let data;
    if (query && query.dataCollectionID) {
      const dataCollection = this.dataCollections.get(query.dataCollectionID);
      delete query.dataCollectionID;
      data = !dataCollection ? [] : dataCollection.categories;
    }
    else {
      data = this.categories.data;
    }
    return this.categories.queryEngine(query, options)(data);
  }
  _queryDataCollections(query, options) {
    query = this._cleanUpCountryID(query);
    let data;
    if (typeof query === "object" && query.categoryID) {
      const category = this.categories.get(query.categoryID);
      delete query.categoryID;
      data = !category ? [] : category.dataCollections;
    }
    else {
      data = this.dataCollections.data;
    }
    return this.dataCollections.queryEngine(query, options)(data);
  }
  _cleanUpCountryID(query) {
    if (query) {
      query = Object.assign({}, query);
      delete query.countryID;
    }
    return query;
  }
  //--------------------------------------------------------------------------
  //
  // Clearing of all stores is applied when country changes.
  //
  //--------------------------------------------------------------------------
  _clearAllStores() {
    this._data = [];
    this._variables = {};
    this.derivativeVariables && this.derivativeVariables.setCache(this._variables);
    this.categories.setData();
    this.dataCollections.setData();
  }
  //--------------------------------------------------------------------------
  //
  // Public interface
  //
  //--------------------------------------------------------------------------
  //----------------------------------------------
  // Variable store synchronization
  //----------------------------------------------
  /**
   * Returns synchronization promise. Should be overriden in subclasses supporting countries.
   * @param countryID ID of country to synchronize the store with.
   * If this parameter is undefined, the method should return the current synchronization promise.
   */
  synchronize(_countryID) {
    return Promise.resolve();
  }
  //----------------------------------------------
  // Variable store methods
  //----------------------------------------------
  /**
   * Retrieves an variable by its identity.
   * @param id The identity to use to lookup the variable.
   * @returns The variable in the store that matches the given id.
   */
  get(id) {
    return this.derivativeVariables
      ? this.derivativeVariables.get(id)
      : this._variables[id] || null;
  }
  /**
   * Returns a variables's identity.
   * @param object The variable to get the identity from.
   * @returns The full name of the variable in the form 'dataCollectionID.variableID'.
   */
  getIdentity(object) {
    return (object && object[this.idProperty]) || null;
  }
  getLabel(object) {
    return object.alias;
  }
  /**
   * Queries the store for variables.
   * Additional parameters could be passed in the query and a query function case is also allowed.
   */
  query(query, options) {
    return this._asyncQuery(query, options);
  }
  /**
   * Async query used in friendly classes.
   * @param storeOptions Store options modifying the default behavior of the query.
   */
  _asyncQuery(query, options, storeOptions) {
    return DeferredStore.resolveCallback((storeOptions && storeOptions.resolver) || this.categories.resolver, query, () => this._syncQuery(query, options, storeOptions));
  }
  /**
   * Sync query used in friendly classes.
   */
  _syncQuery(query, options, storeOptions) {
    // Prepare variables query and filters.
    const variablesQuery = {}, filters = [(storeOptions && storeOptions.queryFilter) || this.queryFilter.bind(this)];
    let additionalData;
    if (typeof query === "function") {
      filters.push(query);
    }
    else {
      query = query || {};
      let additionalQuery;
      for (const key in query) {
        switch (key) {
          case "countryID": // Already resolved. Should ignore it.
            break;
          case "categoryID":
          case "dataCollectionID":
            variablesQuery[key] = query[key];
            break;
          case "searchString":
            const keywordFilter = new KeywordFilter(query[key]);
            filters.push((variable) => keywordFilter.match(variable));
            break;
          case "favorites":
            if (query[key]) {
              const favorites = (storeOptions && storeOptions.favorites) || this.favorites;
              filters.push((variable) => favorites && favorites.contains && favorites.contains(this.getIdentity(variable)));
            }
            break;
          case "filters":
            const filterHash = this._prepareFilterHash(query[key]);
            if (filterHash) {
              filters.push((variable) => {
                for (const id in variable.filteringTags) {
                  if (filterHash[id] || filterHash["*"]) {
                    return true;
                  }
                }
                return false;
              });
            }
            break;
          case "additionalData":
            additionalData = query[key];
            break;
          default:
            additionalQuery = additionalQuery || {};
            additionalQuery[key] = query[key];
            break;
        }
      }
      // If additional query parameters were collected, we add a filter for these parameters
      if (additionalQuery) {
        filters.push((variable) => {
          // The code below is just copied from the simple query engine
          for (const key in additionalQuery) {
            const required = additionalQuery[key];
            if (required && typeof required === "object" && "test" in required) {
              // an object can provide a test method, which makes it work with regex
              if (!required.test(variable[key], variable)) {
                return false;
              }
            }
            else if (required !== variable[key]) {
              return false;
            }
          }
          return true;
        });
      }
    }
    // Compose the query from the collected filters.
    const queryFilter = this._composeQuery(filters);
    return variablesQuery.dataCollectionID
      ? this._queryDCVariables(variablesQuery.dataCollectionID, queryFilter, options, additionalData)
      : variablesQuery.categoryID
        ? this._queryCategoryVariables(variablesQuery.categoryID, queryFilter, options, additionalData)
        : this._queryAllVariables(queryFilter, options, additionalData);
  }
  // Can be overriden
  _queryDCVariables(id, queryFilter, options, additionalData) {
    let dc = this.dataCollections.get(id);
    if (!dc && additionalData) {
      dc = additionalData.getDataCollection(id);
    }
    return (dc && this._query(dc.getVisibleVariables(), queryFilter, options)) || [];
  }
  // Can be overriden
  _queryCategoryVariables(id, queryFilter, options, additionalData) {
    let category = this.categories.get(id);
    if (!category && additionalData) {
      category = additionalData.getCategory(id);
    }
    return (category && this._query(category.data, queryFilter, options)) || [];
  }
  // Can be overriden
  _queryAllVariables(queryFilter, options, additionalData) {
    return this._query(this._data, queryFilter, options, additionalData && additionalData.getVariables());
  }
  /**
   * Composes a query from an array of filters.
   */
  _composeQuery(filters) {
    return filters.length === 1 ? filters[0] : (variable) => filters.every((filter) => filter(variable));
  }
  /**
   * Default query filter which filters out variables disallowed in the data browser.
   */
  queryFilter(variable) {
    return !variable.missedInCategories;
  }
  /**
   * The base query.
   * The additionalData is an array of additional variables.
   * It could also contain inner arrays.
   */
  _query(data, queryFilter, options, additionalData) {
    // We temporary add additional variables to the end of data array,
    // apply query, and then remove additional variables.
    const length = data.length;
    this._addAdditionalData(data, additionalData);
    const result = this.queryEngine(queryFilter, options)(data);
    data.length = length;
    return result;
  }
  /**
   * Recursively collects additional variables.
   */
  _addAdditionalData(data, additionalData) {
    additionalData &&
      additionalData.forEach((object) => {
        if (Array.isArray(object)) {
          this._addAdditionalData(data, object);
        }
        else if (object) {
          data.push(object);
        }
      });
  }
  /**
   * Requests popular variables for a category.
   * @param category        Variable category to request variables for.
   * @param options         Query options.
   * @param storeOptions    Additional store options. If storeOptions.queryFilter is specified, it overrides the default query filter.
   *
   * @returns Array of popular variables.
   */
  getPopularVariables(category, options, storeOptions) {
    return category && category.getPopularVariables ? category.getPopularVariables(options, storeOptions) : [];
  }
  //----------------------------------------------
  // Get refine filters
  //----------------------------------------------
  /**
   * Gets an array of all possible refine filters corresponding to the given variables query.
   * It is supposed that the Variable Store is already synchronized with the requested country.
   * @param query Variables query (see query method). Only 'categoryID', 'dataCollectionID', 'filters', and 'additionalData' properties are taken into account.
   * @returns a hash object with possible refine filters.
   */
  getRefineFilters(query) {
    let collectedFilters = {};
    if (query.dataCollectionID) {
      let dataCollection = this.dataCollections.get(query.dataCollectionID);
      if (!dataCollection && query.additionalData) {
        dataCollection = query.additionalData.getDataCollection(query.dataCollectionID);
      }
      if (dataCollection && dataCollection.filters) {
        this._combineFilters(dataCollection.filters, collectedFilters);
      }
    }
    else if (query.categoryID) {
      let category = this.categories.get(query.categoryID);
      if (!category && query.additionalData) {
        category = query.additionalData.getCategory(query.categoryID);
      }
      if (category) {
        this._collectCategoryFilters(category, collectedFilters);
      }
    }
    else {
      this._collectAllFilters(collectedFilters, query.additionalData);
    }
    // If query.filters property is specified, we filter already collected filters.
    const filterHash = this._prepareFilterHash(query.filters);
    if (filterHash && !filterHash["*"]) {
      const oldFilters = collectedFilters;
      collectedFilters = {};
      for (const id in oldFilters) {
        if (filterHash[id]) {
          collectedFilters[id] = oldFilters[id];
        }
      }
    }
    return collectedFilters;
  }
  _prepareFilterHash(filters) {
    if (typeof filters === "string") {
      filters = filters.split(",");
    }
    if (!filters || !filters.length) {
      return null;
    }
    const filterHash = {};
    filters.forEach((filter) => {
      filterHash[filter.trim()] = true;
    });
    return filterHash;
  }
  _collectAllFilters(collectedFilters, additionalData) {
    this.categories.data.forEach((category) => {
      this._collectCategoryFilters(category, collectedFilters);
    });
    additionalData &&
      additionalData.getCategories().forEach((category) => {
        this._collectCategoryFilters(category, collectedFilters);
      });
  }
  _collectCategoryFilters(category, collectedFilters) {
    category.dataCollections.forEach((dataCollection) => {
      this._combineFilters(dataCollection.filters, collectedFilters);
    });
  }
  _combineFilters(filters, collectedFilters) {
    for (const id in filters) {
      const newFilter = filters[id];
      let oldFilter = collectedFilters[newFilter.id];
      if (!oldFilter) {
        oldFilter = Object.assign({}, newFilter);
        collectedFilters[newFilter.id] = oldFilter;
      }
      else {
        this._mergeFilter(oldFilter, newFilter);
      }
    }
  }
  /**
   * Merges the new filter with the old one.
   */
  _mergeFilter(oldFilter, newFilter) {
    // Both merged filters should have the same type. If not, we ignore the new filter.
    if (oldFilter.type === "Range" && newFilter.type === "Range") {
      // In the case of a range filter, we just enlarge the range of values
      // of the old filter with new values.
      let oldValue = oldFilter.rangeMin;
      let newValue = newFilter.rangeMin;
      if (!isNaN(oldValue) && !isNaN(newValue) && oldValue > newValue) {
        oldFilter.rangeMin = newValue;
      }
      oldValue = oldFilter.rangeMax;
      newValue = newFilter.rangeMax;
      if (!isNaN(oldValue) && !isNaN(newValue) && oldValue < newValue) {
        oldFilter.rangeMax = newValue;
      }
    }
    else if (oldFilter.type === "Enumeration" && newFilter.type === "Enumeration") {
      // In the case of a enumeration filter, we add values from the new filter
      // that are missing in the old filter.
      const oldValue = this._arrayToObject(oldFilter.enumValues.split(","));
      const newValue = newFilter.enumValues.split(",");
      newValue.forEach((item) => {
        if (!oldValue[item]) {
          oldFilter.enumValues += "," + item;
        }
      });
    }
  }
  //----------------------------------------------
  // Get available states
  //----------------------------------------------
  /**
   * Returns an object of states available for the given variable.
   * If states are not supported on this store or the variable has a single state, null should be returned.
   */
  getStates(id) {
    return this.derivativeVariables ? this.derivativeVariables.getStates(id) : null;
  }
  //--------------------------------------------------------------------------
  //
  // Protected methods: Processing data collections
  //
  //--------------------------------------------------------------------------
  // Processes GE data collections and prepares the internal store structure.
  _processDataCollections(dataCollections, processedData) {
    // While processing data collections we collect results in the processedData object.
    // Variables are hashed in it using a combination of variable ID and variable description.
    // Also, we add variables to this._data array and register them in this._variables hash and
    // in internal hashes of created categories and data collections.
    // To allow collect variables from different data collection sources, we pass processedData in
    // parameters of this method and return it as a result of this method.
    processedData = processedData || {
      variables: {},
      categories: {},
      dataCollections: []
    };
    dataCollections.forEach((originalDataCollection) => {
      if (this._isDataCollectionDisallowed(originalDataCollection)) {
        return;
      }
      const originalData = originalDataCollection.data;
      // Modify the object to have more convenient interface
      const dataCollection = originalDataCollection;
      // Provide a more convenient id property
      dataCollection.id = originalDataCollection.dataCollectionID;
      // Move data collection metadata to the top.
      const metadata = originalDataCollection.metadata;
      dataCollection.title = metadata.title;
      dataCollection.name = metadata.name;
      dataCollection.shortDescription = metadata.shortDescription;
      dataCollection.longDescription = metadata.longDescription;
      dataCollection.countries = metadata.countries;
      dataCollection.keywords = metadata.keywords;
      dataCollection.datasets = metadata.datasets;
      dataCollection.hierarchies = metadata.hierarchies;
      dataCollection.author = metadata.author;
      // We need to normalize data collection filters.
      // For a range filter, its bounds are converted to numbers.
      // For a enum filter, we trim values in its string list.
      // Convert filters to hash.
      dataCollection.filters = this._arrayToObject(originalDataCollection.metadata.filters, "id", (filter) => this._prepareFilter(filter));
      // provide hasVariable method to ensure the given variable belongs to the data collection.
      dataCollection.hasVariable = function (variable) {
        const id = variable && variable.id;
        // let's convert to the upper case every time, because the variable may not be from this data collection
        return !!(id && this.hash[id.toUpperCase()] !== undefined);
      };
      // Provide a data collection with 'getVisibleVariables' method
      dataCollection.getVisibleVariables = function () {
        // TODO: toUpperCase is not needed here, because it should be already in the upper case, see _prepareVariable method
        return this.data.filter((variable) => this.hash[variable.id.toUpperCase()]);
      };
      // Prepare categories used in this data collection.
      dataCollection.categories = [];
      originalDataCollection.metadata.categories.map((category) => {
        const storeCateogry = this._prepareCategory(category, dataCollection, processedData);
        storeCateogry && dataCollection.categories.push(storeCateogry);
      });
      dataCollection.data = [];
      // We will cache data collection variable short IDs in its own hash as Boolean values
      // and also place variables in its own data array.
      dataCollection.hash = {};
      this._testOneYearIncrements(originalData);
      // Now we fill all hashes with variables within a data collection.
      originalData.forEach((variable) => {
        this._processVariable(variable, dataCollection, processedData);
      });
      // Finally, we add the data collection to processedData.
      processedData.dataCollections.push(dataCollection);
    });
    // Update stores of categories and data collections.
    const data = this.categories.queryEngine({}, { sort: [{ attribute: "displayOrder", descending: true }] })(this._objectToArray(processedData.categories));
    this.categories.setData(data);
    this.dataCollections.setData(processedData.dataCollections);
    return processedData;
  }
  _testOneYearIncrements(variables) {
    function getAgeTagValue(variable) {
      const tags = variable.filteringTags;
      let ageTagValue;
      for (let j = 0, count = tags ? tags.length : 0; j < count; j++) {
        if (tags[j].id === "Age") {
          ageTagValue = tags[j].value;
          break;
        }
      }
      return ageTagValue;
    }
    const length = variables.length;
    let oneYearCount = 0;
    // Test that all variables of a data collection have the Age tag as "N-N".
    for (let i = 0; i < length; i++) {
      const ageTagValue = getAgeTagValue(variables[i]);
      if (!ageTagValue) {
        // Ignore variables without Age tag.
        continue;
      }
      const range = ageTagValue.split("-");
      if (range.length !== 2 || range[0] !== range[1]) {
        return;
      }
      oneYearCount++;
    }
    // One-year increments data collection contains essentially more than 50 variables
    // with one-year ranges. We use the threshold of 50 to ensure that the number of
    // such variables is big enough.
    if (oneYearCount < 50) {
      return;
    }
    // This is the one-year increments data collection.
    // Add strictFilterTag property to all variables having the Age filter tag.
    for (let i = 0; i < length; i++) {
      if (getAgeTagValue(variables[i])) {
        variables[i].strictFilterTag = "Age";
      }
    }
  }
  _prepareFilter(filter) {
    if (filter.type === "Range") {
      const storeFilter = filter;
      // In the case of a range filter, we convert range values to numbers.
      // If rangeMin is missing, zero will be assigned.
      storeFilter.rangeMin = Number(filter.rangeMin);
      if (!storeFilter.rangeMin) {
        storeFilter.rangeMin = 0;
      }
      storeFilter.rangeMax = Number(filter.rangeMax);
      return storeFilter;
    }
    // In the case of a enumeration filter, we trim spaces aroung enumeration items.
    filter.enumValues = this._trimArray(filter.enumValues.split(",")).join(",");
    return filter;
  }
  _prepareCategory(sourceCategory, dataCollection, processedData) {
    // Convert display order to Number if it is not a number
    const displayOrder = Number(sourceCategory.displayOrder) || 0;
    let category = processedData.categories[sourceCategory.id];
    if (!category) {
      // If the category is new, we just registed it.
      category = sourceCategory;
      category.hash = {}; // A hash of variables belonging to the category (use the uppercase long ID as a key)
      category.data = []; // A list of variables belonging to the category
      category.dataCollections = []; // A list of data collections associated with the category
      category.displayOrder = displayOrder;
      category.popularityHash = {}; // The hash of popular variables is replaced later with array
      // Provide getting popular variables for a category
      const self = this;
      category.getPopularVariables = function (options, storeOptions) {
        if (!this.popularityArray) {
          this.popularityArray = self._objectToArray(this.popularityHash);
        }
        return self._queryPopularVariables(this.popularityArray, options, storeOptions);
      };
      processedData.categories[sourceCategory.id] = category;
    }
    else {
      category.displayOrder = Math.max(displayOrder, category.displayOrder);
    }
    category.dataCollections.push(dataCollection);
    return category;
  }
  _queryPopularVariables(popularityArray, options, storeOptions) {
    const filter = (storeOptions && storeOptions.queryFilter) || this.queryFilter;
    const data = this.queryEngine((popularityData) => {
      const variable = this.get(popularityData.id);
      return variable ? filter(variable) : false;
    }, options)(popularityArray);
    return data.map((data) => this.get(data.id));
  }
  _processVariable(sourceVariable, dataCollection, processedData) {
    // Popular variables fix should be the first action.
    let popularity = sourceVariable.popularity;
    if (popularity !== undefined) {
      delete sourceVariable.popularity;
      popularity = Number(popularity);
    }
    if (!dataCollection.categories || !dataCollection.categories.length) {
      sourceVariable.missedInCategories = true;
    }
    // Then we ensure that the variable is allowed.
    if (this._isVariableDisallowed(sourceVariable)) {
      return;
    }
    this._prepareVariable(sourceVariable);
    // The id of variable is used for collecting variables only. It is case insensitive.
    // In variables store we use the fullName as ID property.
    const id = this._createUniqueVariableId(sourceVariable).toUpperCase();
    let fullName = dataCollection.id + "." + sourceVariable.id; // variable id is in upper case here, see _prepareVariable() method
    const isAllowed = this._isVariableAllowedInCategories(sourceVariable, dataCollection);
    let variable = processedData.variables[id];
    if (!variable) {
      // The variable is new. Add the variable to the hash of unique variable instances.
      variable = sourceVariable;
      variable[this.idProperty] = fullName;
      processedData.variables[id] = variable;
      const isHidden = variable.hideInDataBrowser && sourceVariable.hideInDataBrowser && this._hideGlobalHiddenVariables();
      if (!!isHidden) {
        return;
      }
      this._data.push(variable);
    }
    else {
      const trustedSource = !sourceVariable.missedInCategories;
      const isHidden = variable.hideInDataBrowser && sourceVariable.hideInDataBrowser && this._hideGlobalHiddenVariables();
      let desc = variable.missedInCategories
        ? sourceVariable.__sourceDesc || variable.__sourceDesc
        : variable.__sourceDesc || sourceVariable.__sourceDesc;
      if (variable.missedInCategories && trustedSource) {
        delete variable.missedInCategories;
      }
      // The variable is already registered.
      // We update the old instance with the new one if the new variable has filtering tags
      // (_rep variables don't have filtering tags and are untrusted).
      if (trustedSource && Object.keys(sourceVariable.filteringTags).length) {
        if (Object.keys(variable.filteringTags).length) {
          // We merge key properties of variable instances if they both have filtering tags.
          // The old variable properties are more preferable.
          mixin(sourceVariable.filteringTags, variable.filteringTags);
          sourceVariable.indexBase = variable.indexBase || sourceVariable.indexBase;
          sourceVariable[this.idProperty] = variable[this.idProperty];
        }
        else {
          // The new variable is more preferable.
          sourceVariable[this.idProperty] = fullName;
          desc = sourceVariable.__sourceDesc || variable.__sourceDesc;
        }
        mixin(variable, sourceVariable);
      }
      // Update the description
      variable.__sourceDesc = desc;
      if (desc) {
        variable.description = desc;
      }
      variable.hideInDataBrowser = !!isHidden;
    }
    // We register this variable under fullName key to allow get it from the store by any of its full names.
    // This behavior could be overriden in subclasses.
    this._registerVariable(variable, fullName);
    // Get the primary full name of the variable.
    fullName = variable[this.idProperty];
    const fullNameUpperCase = fullName.toUpperCase();
    // Add the variable to the dataCollection.
    // We save the natural order of variables within the data collection.
    if (!dataCollection.hasVariable(variable)) {
      dataCollection.hash[variable.id] = !!isAllowed; // We save variable visibility for query in this hash
      dataCollection.data.push(variable);
    }
    // If the source variable isn't allowed in categories, we don't add it.
    if (!isAllowed) {
      return;
    }
    // Add the variable to the categories.
    // We save a natural order of variables within categories.
    // We also update popular variables if necessary.
    dataCollection.categories.forEach((category) => {
      if (!category.hash[fullNameUpperCase]) {
        category.hash[fullNameUpperCase] = variable;
        category.data.push(variable);
      }
      if (popularity) {
        let popularityData = category.popularityHash[fullNameUpperCase];
        if (!popularityData) {
          popularityData = { id: fullName, popularity };
          category.popularityHash[fullNameUpperCase] = popularityData;
        }
        else if (popularityData.popularity < popularity) {
          popularityData.popularity = popularity;
        }
      }
    });
  }
  //--------------------------------------------------------------------------
  //
  // Protected hooks
  //
  //--------------------------------------------------------------------------
  // This hook returns true if the data collection should be filtered out.
  _isDataCollectionDisallowed(dataCollection) {
    return !dataCollection.metadata || !dataCollection.metadata.categories;
  }
  // This hook returns true if the variable should be filtered out.
  _isVariableDisallowed(variable) {
    // If there's no field category, variable is not valid
    return !variable.fieldCategory;
  }
  // This hook returns a value uniquely identifying the given variable.
  // By default we provide a unique combination of variable ID and alias.
  _createUniqueVariableId(variable) {
    // We use alias instead of description because the description could be missing.
    return variable.id + "." + variable.alias;
  }
  // This hook returns true if the given variable can be added to category collections.
  _isVariableAllowedInCategories(_variable, _dataCollection) {
    return true;
  }
  // Prepares a source variable.
  // Default implementation converts filtering tags from an array to object, provides values for base properties of valiables,
  // and assigns an alias as a description if the description is missing.
  _prepareVariable(variable) {
    const storeVariable = variable;
    // GE variable IDs are case insensitive. Convert them to upper case.
    storeVariable.id = variable.id.toUpperCase();
    storeVariable.units = toVariableUnits(variable.units);
    // Convert filtering tags from an array to object.
    storeVariable.filteringTags = this._arrayToObject(variable.filteringTags, "id");
    // Replace missing base properties with null values.
    storeVariable.percentBase = variable.percentBase || null;
    storeVariable.percentBaseAlias = variable.percentBaseAlias || null;
    storeVariable.averageBase = variable.averageBase || null;
    storeVariable.averageBaseAlias = variable.averageBaseAlias || null;
    storeVariable.indexBase = variable.indexBase || null;
    // Ensure that the description property presents.
    // If it is missing (e.g. for KeyGlobalFacts), we assign alias as a description.
    storeVariable.__sourceDesc = variable.description;
    if (!storeVariable.description) {
      storeVariable.description = storeVariable.alias;
    }
  }
  // This hook registers a variable with the given full name in the variable hash
  _registerVariable(variable, fullName) {
    this._variables[fullName] = variable;
  }
  //--------------------------------------------------------------------------
  //
  // Protected utility methods
  //
  //--------------------------------------------------------------------------
  // Trims source array elements and returns the source array.
  _trimArray(source) {
    for (let i = 0; i < source.length; i++) {
      source[i] = source[i].trim();
    }
    return source;
  }
  // Converts a source object to array.
  _objectToArray(source) {
    const target = [];
    for (const id in source) {
      target.push(source[id]);
    }
    return target;
  }
  // Converts a source array to object.
  _arrayToObject(source, idProperty, converter) {
    const target = {};
    source.forEach((item) => {
      const id = idProperty ? item[idProperty] : item;
      target[id] = converter ? converter(item) : item;
    });
    return target;
  }
  // Overriden in GeoenrichmentVariableStore
  _hideGlobalHiddenVariables() {
    return !this.displayAllGlobalVariables;
  }
}

// geoenrichment.stores
class GeoenrichmentVariableStore extends VariableStore {
  //--------------------------------------------------------------------------
  //
  // Constructor
  //
  //--------------------------------------------------------------------------
  constructor(params) {
    super(params);
    /**
     * ID used for designating global settings in Country dropdown.
     */
    this.globalCountryID = "_";
    this.countries = new DeferredStore({ resolver: this._getCountries.bind(this) });
    this.categories.resolver = this.dataCollections.resolver = this._resolveCountryID.bind(this);
  }
  synchronize(countryID) {
    return countryID === undefined ? this._resolveCountryIDPromise : this._resolveCountryID({ countryID });
  }
  /**
   * @returns country ID or this.globalCountryID.
   */
  getCurrentCountryID() {
    return this._currentCountryID;
  }
  _getCountries(_query) {
    if (!this._getCountriesPromise) {
      this._getCountriesPromise = this._getGeoenrichmentTask()
        .getAvailableCountries()
        .then((countries) => {
        this.countries.setData(countries);
      });
    }
    return this._getCountriesPromise;
  }
  _resolveCountryID(query) {
    query = query || {};
    // We don't resolve countryID property in the case of non-object query.
    if (typeof query !== "object") {
      return null;
    }
    const countryID = query.countryID || this.globalCountryID;
    if (countryID !== this._currentCountryID) {
      this._currentCountryID = countryID;
      this._clearAllStores();
      this._resolveCountryIDPromise = this._getDataCollections(countryID === this.globalCountryID ? null : countryID).then((dataCollections) => {
        this._processDataCollections(dataCollections);
      });
      // If favorites are specified, the promise will also wait for their synchronization.
      // The synchronization of favorites should NEVER complete with error!
      if (this.favorites && this.favorites.synchronize) {
        this._resolveCountryIDPromise = Promise.all([
          this._resolveCountryIDPromise,
          this.favorites.synchronize(countryID)
        ]);
      }
    }
    return this._resolveCountryIDPromise;
  }
  _getDataCollections(countryID) {
    // If variableFields are not specified use * to retrieve the definition to display in info icon popup
    return this._getGeoenrichmentTask().getDataCollections(countryID, null, this.variableFields || "*");
  }
  _getGeoenrichmentTask() {
    return new GeoenrichmentTask(_arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.j.server, _arcgis_geoenrichment_databrowser_6ca8ea14_js__WEBPACK_IMPORTED_MODULE_0__.j.token);
  }
  // Returns true if Global Variables should be hidden
  _hideGlobalHiddenVariables() {
    return !this.displayAllGlobalVariables || this._currentCountryID !== this.globalCountryID;
  }
}

let DataBrowser = class DataBrowser extends DataBrowserBase {
  postCreate() {
    this._set("variables", this.variables || new GeoenrichmentVariableStore({ derivativeVariables: this.allowDerivativeVariables, displayAllGlobalVariables: this.displayAllGlobalVariables }));
    this._contentFactory = this._contentFactory || new DataBrowserContentFactory();
    super.postCreate();
  }
};
DataBrowser = __decorate([
  i$X()
], DataBrowser);

const DataBrowser$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get DataBrowser () { return DataBrowser; }
});



//# sourceMappingURL=DataBrowser-5ce2ade9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,