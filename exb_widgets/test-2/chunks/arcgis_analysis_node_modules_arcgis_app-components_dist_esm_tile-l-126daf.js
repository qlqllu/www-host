"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_tile-l-126daf"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-f8be7028.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-f8be7028.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ canUseLayerForPublishTiles),
/* harmony export */   b: () => (/* binding */ getTileLayerInfo),
/* harmony export */   c: () => (/* binding */ canUseRendererForPublishTiles),
/* harmony export */   d: () => (/* binding */ getPublishTileLayerParams),
/* harmony export */   e: () => (/* binding */ getSuggestedScaleRange),
/* harmony export */   f: () => (/* binding */ formUpdateItemDataForTileLayer),
/* harmony export */   g: () => (/* binding */ getDatastoreServers),
/* harmony export */   h: () => (/* binding */ checkTilesOnDemandSupport),
/* harmony export */   l: () => (/* binding */ layerHasClustering),
/* harmony export */   p: () => (/* binding */ publishTileLayer)
/* harmony export */ });
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tile-layer-90a6b901.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-90a6b901.js");
/* harmony import */ var _feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./feature-layer-38cdae87.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-layer-38cdae87.js");
/* harmony import */ var _functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-9f648bee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js");
/* harmony import */ var _server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./server-item-f12153e6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-f12153e6.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */








// TODO: test --- add unit test!
var __rest = ( false) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const addScaleLabels = (tileInfo) => (Object.assign(Object.assign({}, tileInfo), { lods: (tileInfo.lods || []).map((lod) => (Object.assign(Object.assign({}, lod), { label: `1:${Math.round(lod.scale).toLocaleString("en-EN", { maximumFractionDigits: 0 })}` }))) }));
const normalizeMaxScale = (min, max, lods) => {
  var _a, _b;
  // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/10524
  if (min <= max && (lods === null || lods === void 0 ? void 0 : lods.length) > 0) {
    let maxIdx = -1;
    // go through lods and find closest lod to min scale, then find max scale two lods down, or last one
    for (let i = lods.length - 1; i >= 0; i--) {
      if (min < lods[i].scale) {
        maxIdx = i + 2;
        break;
      }
    }
    maxIdx = maxIdx > lods.length - 1 ? lods.length - 1 : maxIdx;
    return (_b = (_a = lods[maxIdx]) === null || _a === void 0 ? void 0 : _a.scale) !== null && _b !== void 0 ? _b : max;
  }
  return max;
};
/** Check if we support on demand, exclusively for "tiles" type */
const checkTilesOnDemandSupport = (layers, tilesOnDemandEnabled) => {
  let canShowTilesOnDemand = false;
  if (tilesOnDemandEnabled && (layers === null || layers === void 0 ? void 0 : layers.length) > 0) {
    canShowTilesOnDemand = !layers.some(
    // tiles on demand aren't allowed when labeling turned on
    (layer) => !canUseLayerForPublish(layer, false, "tiles"));
  }
  return canShowTilesOnDemand;
};
// * --- Publishing tile stuff
function canUseLayerForPublish(layerInfo, allowLabels, type) {
  if (layerInfo.type !== "Feature Layer" || !layerInfo.drawingInfo) {
    // Wrong layer type
    return false;
  }
  if (type === "scenes") {
    return canUseLayerForPublishScene(layerInfo, allowLabels);
  }
  return canUseLayerForPublishTiles(layerInfo, allowLabels);
}
function canUseLayerForPublishTiles(layerInfo, allowLabels) {
  var _a, _b;
  if (layerInfo.geometryType === "esriGeometryMultiPatch") {
    // MultiPatch
    return false;
  }
  const renderer = (_a = layerInfo.drawingInfo) === null || _a === void 0 ? void 0 : _a.renderer;
  const labelingInfo = (_b = layerInfo.drawingInfo) === null || _b === void 0 ? void 0 : _b.labelingInfo;
  const fields = layerInfo.fields;
  // clustering
  if (layerHasClustering(layerInfo)) {
    return false;
  }
  if (renderer &&
    layerInfo.geometryType &&
    (fields === null || fields === void 0 ? void 0 : fields.length) > 0 &&
    !canUseRendererForPublishTiles(renderer, layerInfo.geometryType, fields)) {
    return false;
  }
  // labels
  if (!allowLabels && (labelingInfo === null || labelingInfo === void 0 ? void 0 : labelingInfo.length)) {
    return false;
  }
  return true;
}
const layerHasClustering = (layerInfo) => {
  var _a, _b;
  const featureReduction = (_a = layerInfo.featureReduction) !== null && _a !== void 0 ? _a : (_b = layerInfo.layerDefinition) === null || _b === void 0 ? void 0 : _b.featureReduction;
  return !!featureReduction && Object.keys(featureReduction).length > 0;
};
const canUseRendererForPublishTiles = (renderer, geometryType, fields) => {
  var _a;
  // heatmap renderer
  if (renderer.type === "heatmap") {
    return false;
  }
  // scale dependent marker sizing on polygon layer
  /*
    if (layerInfo.geometryType === "esriGeometryPolygon" && renderer.visualVariables) {
      if (array.some(renderer.visualVariables, function (visVar) {
          // {target: "outline"} is OK
          if (visVar.type === "sizeInfo" && !visVar.target &&
            (typeof visVar.minSize === "object" || typeof visVar.maxSize === "object")) {
            return true;
          }
        })
      ) {
        return false;
      }
    }
    */
  // type + size on polygon layer
  if (geometryType === "esriGeometryPolygon" && renderer.uniqueValueInfos && renderer.visualVariables) {
    if (renderer.visualVariables.some((visVar) => {
      if (visVar.type === "sizeInfo" && !visVar.target) {
        return true;
      }
    })) {
      return false;
    }
  }
  // date fields
  const dateFields = fields.filter((field) => field.type === "esriFieldTypeDate").map((field) => field.name);
  if (dateFields.length) {
    // renderer using date field
    if (dateFields.indexOf(renderer.field) > -1 || dateFields.indexOf(renderer.field1) > -1) {
      return false;
    }
    // visual variables with date field
    if ((_a = renderer.visualVariables) === null || _a === void 0 ? void 0 : _a.some((visVar) => dateFields.indexOf(visVar.field) > -1)) {
      return false;
    }
  }
  return true;
};
function canUseLayerForPublishScene(layerInfo, allowLabels) {
  var _a, _b, _c;
  const renderer = layerInfo.drawingInfo.renderer;
  const labelingInfo = layerInfo.drawingInfo.labelingInfo;
  const featureReduction = layerInfo.featureReduction;
  const fields = layerInfo.fields;
  // only point or multiPatch layers
  if (["esriGeometryPoint", "esriGeometryMultiPatch"].indexOf(layerInfo.geometryType) === -1) {
    return false;
  }
  // stream layer
  if (renderer.observationRenderer || renderer.latestObservationRenderer) {
    return false;
  }
  // heatmap renderer
  if (renderer.type === "heatmap") {
    return false;
  }
  // Arcade expressions
  if ((_a = renderer.valueExpression) === null || _a === void 0 ? void 0 : _a.length) {
    return false;
  }
  if ((_b = renderer.visualVariables) === null || _b === void 0 ? void 0 : _b.some((visVar) => visVar.valueExpression.length)) {
    return false;
  }
  // date fields
  const dateFields = fields.filter((field) => field.type === "esriFieldTypeDate").map((field) => field.name);
  if (dateFields.length) {
    // renderer using date field
    if (dateFields.indexOf(renderer.field) > -1 || dateFields.indexOf(renderer.field1) > -1) {
      return false;
    }
    // visual variables with date field
    if ((_c = renderer.visualVariables) === null || _c === void 0 ? void 0 : _c.some((visVar) => visVar.field && dateFields.indexOf(visVar.field) > -1)) {
      return false;
    }
  }
  // clustering
  if (featureReduction) {
    return false;
  }
  // labels
  if (!allowLabels && (labelingInfo === null || labelingInfo === void 0 ? void 0 : labelingInfo.length)) {
    return false;
  }
  return true;
}
const getPublishTileLayerParams = (itemInfo, publishInfo, isEnterprise) => {
  const { publishType, cacheOnDemand, tileInfo, cacheOnDemandMinScale, scale, layers } = publishInfo;
  const { maxScale, minScale } = scale;
  const cacheStorageInfo = {
    storageFormat: isEnterprise || publishInfo.publishType === "vectorTiles"
      ? "esriMapCacheStorageModeCompactV2"
      : "esriMapCacheStorageModeExploded",
    packetSize: 128
  };
  const tileCacheInfo = Object.assign(Object.assign({}, (publishType === "vectorTiles" ? _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_2__.p : _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_2__.a)), tileInfo);
  if (tileCacheInfo.dpi && !tileCacheInfo.preciseDpi) {
    tileCacheInfo.preciseDpi = tileCacheInfo.dpi;
  }
  tileCacheInfo.lods = tileCacheInfo.lods.map((_a) => {
    var lod = __rest(_a, ["label"]);
    return lod;
  });
  // --- Main info
  const tileImageInfo = publishType === "vectorTiles" ? Object.assign({}, _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_2__.b) : Object.assign({}, _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_2__.c);
  let publishParameters = {
    name: (0,_functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_4__.a)(itemInfo.title),
    tilingSchema: { tileCacheInfo, tileImageInfo, cacheStorageInfo },
    minScale,
    maxScale
  };
  if (layers) {
    publishParameters.layers = layers.map(({ layerDefinition, id, drawingInfo }) => 
    // Override drawingInfo if it exists
    (layerDefinition === null || layerDefinition === void 0 ? void 0 : layerDefinition.drawingInfo)
      ? { id, drawingInfo: Object.assign(Object.assign({}, drawingInfo), layerDefinition.drawingInfo) }
      : { id, drawingInfo });
  }
  if (publishType !== "vectorTiles") {
    // On demand stuff
    publishParameters.cacheOnDemand = cacheOnDemand;
    if (cacheOnDemand) {
      publishParameters = Object.assign(Object.assign({}, publishParameters), { capabilities: "Map,ChangeTracking", cacheOnDemandMinScale });
    }
  }
  const publishContent = {
    itemId: itemInfo.id,
    filetype: "featureService",
    outputType: publishType,
    publishParameters: JSON.stringify(publishParameters),
    buildInitialCache: false
  };
  return { publishContent, publishParameters };
};

const getTileLayerInfo = async (url, isVectorTiles) => {
  const isValidUrlType = url.includes(isVectorTiles ? "/VectorTileServer" : "/MapServer");
  if (!isValidUrlType) {
    return { error: { code: "invalidUrl" } };
  }
  try {
    const result = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_6__.r)(url, {}, { addTokenManually: false });
    if (result && result.singleFusedMapCache && result.tileInfo) {
      return { result: addScaleLabels(result.tileInfo) };
    }
    else if (result && isVectorTiles && result.tileInfo) {
      return { result: result.tileInfo };
    }
    return { error: { code: "noTilingSchemeFound" } };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "mapServiceError", message: JSON.stringify(error) } };
  }
};
const getSuggestedScaleRangeForLayer = async (url) => {
  try {
    // TODO: Test more thoroughly as this has only been tested with 0 sampling
    const [FeatureLayer] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/layers/FeatureLayer"]);
    const featureLayer = new FeatureLayer(url);
    const pluggedInFeatureLayer = await featureLayer.addPlugin("esri/plugins/FeatureLayerStatistics");
    const suggestedScale = await pluggedInFeatureLayer.target.statisticsPlugin.getSuggestedScaleRange({
      sampleSize: 100,
      forPublishingTiles: true
    });
    return { result: suggestedScale };
  }
  catch (error) {
    if (typeof error === "string" && error.toLowerCase().includes("sampling returned 0 features")) {
      return { result: null, error: null };
    }
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const getSuggestedScaleRange = async (constraints, curLods, featureLayerInfos, itemUrl) => {
  // constraints and initial min/maxScale values will be the same initially
  const lod15Scale = 18055.954822;
  let maxSupportedMinScale = null;
  let cacheOnDemandMinScale = _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_2__.T;
  const calculatedScale = {
    constraints: constraints,
    minScale: constraints.minScale,
    maxScale: constraints.maxScale || lod15Scale
  };
  if (!itemUrl) {
    return { maxSupportedMinScale, cacheOnDemandMinScale, calculatedScale };
  }
  try {
    const results = await Promise.allSettled(featureLayerInfos.map(({ id }) => getSuggestedScaleRangeForLayer(`${itemUrl}/${id}`)));
    let maxOfMinScale = 0;
    let minOfMaxScale = Infinity;
    results.forEach((result) => {
      if (result.status === "rejected") {
        return;
      }
      const fetchData = result.value.result;
      if (!fetchData) {
        return;
      }
      const { maxScale, minScale } = fetchData;
      maxOfMinScale = minScale == null || minScale <= maxOfMinScale ? maxOfMinScale : minScale;
      minOfMaxScale = maxScale == null || maxScale >= minOfMaxScale ? minOfMaxScale : maxScale;
      // find the floor of the minScales for multi-layer feature services for the cache on demand min scale
      cacheOnDemandMinScale = minScale == null || minScale >= cacheOnDemandMinScale ? cacheOnDemandMinScale : minScale;
    });
    maxSupportedMinScale = constraints.minScale || _tile_layer_90a6b901_js__WEBPACK_IMPORTED_MODULE_2__.T;
    cacheOnDemandMinScale || (cacheOnDemandMinScale = maxOfMinScale);
    calculatedScale.minScale = cacheOnDemandMinScale || constraints.minScale;
    calculatedScale.maxScale = minOfMaxScale || calculatedScale.maxScale; // don't allow maxScale of 0
    // * --- Normalize min and max scale downward to match feature layer constraints if necessary
    if (calculatedScale.minScale > constraints.minScale && constraints.minScale > 0) {
      calculatedScale.minScale = constraints.minScale;
    }
    if (calculatedScale.maxScale >= calculatedScale.minScale && calculatedScale.minScale > 0) {
      calculatedScale.maxScale = normalizeMaxScale(calculatedScale.minScale, calculatedScale.maxScale, curLods);
    }
  }
  catch (error) {
    console.error(error);
    // * --- Error retrieving suggested scale range, continue without notification
    calculatedScale.minScale = constraints.minScale;
  }
  return { maxSupportedMinScale, cacheOnDemandMinScale, calculatedScale };
};
const publishTileLayer = async (tileLayerPublishContent, publishInfo, updateData) => {
  var _a;
  const { publishType, user, folder, title, tags, snippet, categories } = publishInfo;
  let publishContent = Object.assign({}, tileLayerPublishContent);
  if (title) {
    const publishParameters = JSON.parse(publishContent.publishParameters);
    publishParameters.name = (0,_functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_4__.a)(title);
    publishContent.publishParameters = JSON.stringify(publishParameters);
  }
  const url = `${user.userContentUrl}/publish`;
  const { services } = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_6__.r)(url, publishContent, {}, "post");
  const { jobId, serviceItemId, serviceurl, error, type } = services[0] || {};
  if (error) {
    console.error(error);
    // TODO: refactor to the new error system
    throw error;
  }
  await (0,_feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_3__.w)(serviceItemId, { jobId, success: true });
  publishType !== "scenes" && (await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_5__.e)(serviceItemId, { title, tags, snippet, categories }));
  updateData && (await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_5__.e)(serviceItemId, { text: JSON.stringify(updateData) }));
  folder.id !== ((_a = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.initialFolder) === null || _a === void 0 ? void 0 : _a.id) &&
    (await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_5__.m)(serviceItemId, (0,_feature_layer_38cdae87_js__WEBPACK_IMPORTED_MODULE_3__.q)(folder) ? "/" : folder.id));
  return { id: serviceItemId, jobId, serviceType: type, serviceUrl: serviceurl };
};
const getDatastoreServers = async (datastoreId) => {
  var _a;
  // https://developers.arcgis.com/rest/users-groups-and-items/get-servers-for-data-store.htm
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_0__.c.portal;
  const restBaseUrl = `${(_a = portal.restUrl) !== null && _a !== void 0 ? _a : portal.portalUrl}portals/${portal.id}`;
  const serverIdApiUrl = `${restBaseUrl}/datastores/getServers`;
  const serverIdApiPayload = { datastoreId: datastoreId, f: "json" };
  try {
    const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_6__.r)(serverIdApiUrl, serverIdApiPayload, {}, "post");
    return { result: response.servers };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};
const formUpdateItemDataForTileLayer = async ({ itemId, itemUrl, portal, publishType, fullLayers }) => {
  try {
    const itemData = await (0,_server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_5__.p)(itemId, portal);
    // update the layers with a popup to include the url property for the feature service layer
    const layerList = ((itemData === null || itemData === void 0 ? void 0 : itemData.layers) || [])
      .map((layer, index) => {
      var _a, _b, _c, _d;
      if (!layer) {
        return null;
      }
      const layerId = (_a = layer.id) !== null && _a !== void 0 ? _a : index;
      let newLayer = Object.assign(Object.assign({}, layer), { id: layerId, layerUrl: `${itemUrl}/${layerId}`, layerItemId: itemId, layerDefinition: layer.layerDefinition });
      if (publishType === "vector") {
        delete newLayer.popupInfo;
      }
      if (layer.popupInfo) {
        newLayer = Object.assign(Object.assign({}, newLayer), { popupInfo: layer.popupInfo });
      }
      if (layer.showLegend != null) {
        newLayer = Object.assign(Object.assign({}, newLayer), { showLegend: layer.showLegend });
      }
      const correspondingFullLayer = fullLayers.find((fullLayer) => fullLayer.id === layerId);
      // Using the correspondingFullLayer as the fallback of the drawingInfo
      newLayer = Object.assign(Object.assign({}, newLayer), { drawingInfo: Object.assign(Object.assign(Object.assign({}, correspondingFullLayer === null || correspondingFullLayer === void 0 ? void 0 : correspondingFullLayer.drawingInfo), layer.drawingInfo), { renderer: (_c = (_b = layer.drawingInfo) === null || _b === void 0 ? void 0 : _b.renderer) !== null && _c !== void 0 ? _c : (_d = correspondingFullLayer === null || correspondingFullLayer === void 0 ? void 0 : correspondingFullLayer.drawingInfo) === null || _d === void 0 ? void 0 : _d.renderer }) });
      return newLayer;
    })
      .filter((layer) => layer != null);
    return { result: Object.assign(Object.assign({}, itemData), { layers: layerList }) };
  }
  catch (error) {
    console.error(error);
    return { error: { code: "unhandledError", message: JSON.stringify(error) } };
  }
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,