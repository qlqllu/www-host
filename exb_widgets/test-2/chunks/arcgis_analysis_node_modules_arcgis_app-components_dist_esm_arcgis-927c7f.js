"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-927c7f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-label_3.entry.js":
/*!*****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-label_3.entry.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_label: () => (/* binding */ ArcgisLabel),
/* harmony export */   arcgis_label_content: () => (/* binding */ ArcgisLabelContent),
/* harmony export */   arcgis_label_content_style: () => (/* binding */ ArcgisLabelContentStyle)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./guid-4f4176ba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./labelStore-a0cf76c4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/labelStore-a0cf76c4.js");
/* harmony import */ var _fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fontUtil-1aa3a32c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/fontUtil-1aa3a32c.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */












const CSS$1 = {
  enableLabel: "enable-label",
  enableLabelLabel: "enable-label-label",
  labelSwitch: "label-switch",
  componentDiv: "component-ul"
};

const arcgisLabelCss = ".enable-label{background-color:var(--arcgis-app-background);display:flex;padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-cap-spacing-half) var(--arcgis-app-cap-spacing-quarter);border-bottom:solid 1px var(--arcgis-app-border)}.enable-label-label{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.label-switch{margin:0;flex:0 0 0%;justify-self:flex-end}.component-ul{margin:0 0 var(--arcgis-app-cap-spacing);padding:0}";

const ArcgisLabel = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.labelUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "labelUpdated", 7);
    this.arcgisLabelDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLabelDismissedChange", 7);
    this.internalLabelUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalLabelUpdated", 7);
    this.closeLabelPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeLabelPopovers", 7);
    this.arcgisFilterDone = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFilterDone", 7);
    this.labelReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "labelReRender", 7);
    // rendor methods
    this.labelComponent = (uniqueGuid, labelClass, blockOpen) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueGuid, id: uniqueGuid }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-label-content", { guid: uniqueGuid, labelClass: labelClass, blockOpen: blockOpen, calciteFlowItem: ((_a = this.calciteFlowProps) === null || _a === void 0 ? void 0 : _a.calciteFlowItem) ||
          this.hostElement.shadowRoot.getElementById("labelFlowItem_Id") })));
    };
    this.mapView = undefined;
    this.layer = undefined;
    this.portal = undefined;
    this.config = undefined;
    this.layerDisplayType = _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature;
    this.dismissible = false;
    this.hideLayerTitle = false;
    this.calciteFlowProps = null;
    this.labelComponents = [];
    this.reRender = undefined;
  }
  // lifecycle methods
  async componentWillLoad() {
    [this.strings, this.currentLanguage] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.layerGeometryType = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.h)(this.layer);
    this.serviceType = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.c)(this.layer);
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layer = this.layer;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.mapView = this.mapView;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.portal = this.portal;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.config = this.config;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.strings = this.strings;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.currentLanguage = this.currentLanguage;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layerGeometryType = this.layerGeometryType;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.serviceType = this.serviceType;
    _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layerDisplayType = this.layerDisplayType;
    this.labelingInfo =
      this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature
        ? this.layer.labelingInfo
        : this.layer.featureReduction.labelingInfo;
    // temp
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature) {
      this.layer.labelsVisible = this.layer.labelsVisible || false;
    }
    else if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster) {
      this.layer.featureReduction.labelsVisible =
        this.layer.featureReduction.labelsVisible ||
          false;
    }
    // add for existing
    if (Array.isArray(this.labelingInfo)) {
      this.labelingInfo.forEach((labelClass) => {
        this.addLabelClass(labelClass, this.labelingInfo.length === 1 ? true : false);
      });
    }
  }
  componentDidLoad() {
    var _a;
    this.sortableComponents = this.hostElement.shadowRoot.getElementById("SortableComponents_Id");
    this.calciteFab =
      ((_a = this.calciteFlowProps) === null || _a === void 0 ? void 0 : _a.calciteFab) ||
        this.hostElement.shadowRoot.getElementById("addComponentBtn_Id");
    this.enableDisableLabel(this.getLabelEnabledProp());
    this.calciteFab.onclick = async (event) => {
      event.stopPropagation();
      this.closeLabelPopovers.emit();
      const labelClass = await this.getLabelClass();
      if (this.labelingInfo) {
        this.labelingInfo.push(labelClass);
      }
      else {
        this.labelingInfo = [labelClass];
      }
      this.addLabelClass(labelClass, true);
      this.focusLastLabelClass();
    };
    if (this.flowItemNode) {
      requestAnimationFrame(() => this.flowItemNode.setFocus());
    }
  }
  componentDidUpdate() {
    this.internalLabelUpdated.emit();
  }
  // Events
  mainPopupReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = this.reRender ? false : true;
  }
  deleteComponentHandler(event) {
    event.stopPropagation();
    this.closeLabelPopovers.emit();
    // each div has id. Find id, and splice by index
    const allComponents = this.sortableComponents.getElementsByTagName("div");
    for (let x = 0; x < allComponents.length; x++) {
      if (allComponents[x].id === event.detail) {
        this.labelingInfo.splice(x, 1);
        this.labelComponents.splice(x, 1);
        break;
      }
    }
    this.labelReRender.emit();
    this.calciteFab.setFocus();
  }
  duplicateComponentHandler(event) {
    event.stopPropagation();
    this.closeLabelPopovers.emit();
    // each div has id. Find id, and clone
    const allComponents = this.sortableComponents.getElementsByTagName("div");
    for (let x = 0; x < allComponents.length; x++) {
      if (allComponents[x].id === event.detail) {
        const tempLabelClass = this.labelingInfo[x].clone();
        this.labelingInfo.push(tempLabelClass);
        this.addLabelClass(tempLabelClass, true);
        this.focusLastLabelClass();
        break;
      }
    }
  }
  internalLabelUpdatedHandler(event) {
    event.stopPropagation();
    // if event.detail is true, only update external
    if (this.labelingInfo && !event.detail) {
      if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature) {
        this.layer.labelingInfo = [...this.labelingInfo];
      }
      else {
        this.layer.featureReduction.labelingInfo = [
          ...this.labelingInfo
        ];
      }
    }
    this.labelUpdated.emit();
  }
  disableLabelPanelHandler(event) {
    var _a;
    event.stopPropagation();
    const panel = ((_a = this.calciteFlowProps) === null || _a === void 0 ? void 0 : _a.calciteFlowItem) ||
      this.hostElement.shadowRoot.getElementById("labelFlowItem_Id");
    panel.disabled = event.detail;
  }
  // Public Methods
  async done() {
    this.arcgisFilterDone.emit();
    this.closeLabelPopovers.emit();
  }
  async setFocus() {
    var _a;
    if (this.flowItemNode) {
      this.flowItemNode.setFocus();
    }
    else {
      (_a = this.labelSwitch) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }
  // private methods and properties
  enableDisableLabel(labelBool) {
    // hide rest of the component.
    const labelDiv = this.hostElement.shadowRoot.getElementById("labelDiv_Id");
    labelDiv.style.display = labelBool ? "block" : "none";
    this.calciteFab.style.display = labelBool ? "block" : "none";
    this.closeLabelPopovers.emit();
  }
  getLabelEnabledProp() {
    switch (this.layerDisplayType) {
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature: {
        return this.layer.labelsVisible;
      }
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster: {
        return this.layer.featureReduction
          .labelsVisible;
      }
      default: {
        return this.layer.labelsVisible;
      }
    }
  }
  addLabelClass(labelClass, blockOpen = false) {
    this.labelComponents = [
      ...this.labelComponents,
      this.labelComponent((0,_guid_4f4176ba_js__WEBPACK_IMPORTED_MODULE_3__.g)(), labelClass, blockOpen)
    ];
  }
  async getLabelClass() {
    var _a, _b, _c, _d, _e, _f;
    const [LabelClass, colorUtils, clusterLabelCreator, binLabelCreator] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
      "esri/layers/support/LabelClass",
      "esri/views/support/colorUtils",
      "esri/smartMapping/labels/clusters",
      "esri/smartMapping/labels/bins"
    ]);
    // feature or cluster
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature) {
      return new LabelClass(this.defaultLabelProps(this.defaultSymbolProps(await colorUtils.getBackgroundColor(this.mapView), await colorUtils.getBackgroundColorTheme(this.mapView))));
    }
    else if (((_a = this.layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
      return (((_c = (_b = (await binLabelCreator.getLabelSchemes({
        layer: this.layer
      }))) === null || _b === void 0 ? void 0 : _b.primaryScheme) === null || _c === void 0 ? void 0 : _c.labelingInfo[0]) || null);
    }
    else {
      return (((_f = (_e = (await clusterLabelCreator.getLabelSchemes({
        layer: this.layer,
        renderer: (_d = this.layer) === null || _d === void 0 ? void 0 : _d.renderer,
        view: this.mapView
      }))) === null || _e === void 0 ? void 0 : _e.primaryScheme) === null || _f === void 0 ? void 0 : _f.labelingInfo[0]) || null);
    }
  }
  defaultLabelProps(symbolProps) {
    const defaultFieldName = this.defaultLabelField();
    return {
      // autocasts as new LabelClass()
      symbol: {
        type: "text",
        color: symbolProps.fontColor,
        haloColor: symbolProps.haloColor,
        haloSize: symbolProps.haloSize,
        font: {
          family: symbolProps.fontFamily,
          size: symbolProps.fontSize
        }
      },
      labelExpressionInfo: this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster
        ? {
          expression: `$feature["${defaultFieldName}"]`
        }
        : this.serviceType !== _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.mapImage
          ? {
            expression: defaultFieldName
              ? this.layer.fields.some((field) => {
                var _a;
                if (field.name === defaultFieldName) {
                  return ((_a = field === null || field === void 0 ? void 0 : field.domain) === null || _a === void 0 ? void 0 : _a.type) === "coded-value";
                }
              })
                ? `$feature["${defaultFieldName}"]\nDomainName($feature, "${defaultFieldName}")`
                : `$feature["${defaultFieldName}"]`
              : null
          }
          : null,
      labelExpression: this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.mapImage ? `[${defaultFieldName}]` : null,
      labelPlacement: this.defaultPlacement(),
      maxScale: this.layer.maxScale || 0,
      minScale: this.layer.minScale || 0
    };
  }
  defaultLabelField() {
    let defaultField = null;
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster) {
      // we know we have at least one field
      defaultField = this.layer.featureReduction
        .fields[0].name;
    }
    else if ("displayField" in this.layer &&
      this.layer.displayField &&
      this.layer.fieldsIndex.get(this.layer.displayField)) {
      defaultField = this.layer.displayField;
    }
    else {
      this.layer.fields.find((field) => {
        if (field.type.toLowerCase().includes("string")) {
          return (defaultField = field.name);
        }
      });
    }
    return defaultField ? defaultField : this.layer.fields[0].name;
  }
  defaultSymbolProps(backgroundColor, backgroundColorTheme) {
    if (backgroundColorTheme === "light") {
      return {
        fontFamily: "Arial",
        fontSize: 13 * 0.75,
        fontColor: "#696969",
        haloColor: "#d3d3d3",
        haloSize: 1
      };
    }
    else if (backgroundColorTheme === "dark") {
      return {
        fontFamily: "Arial",
        fontSize: 13 * 0.75,
        fontColor: "#d3d3d3",
        haloColor: "#696969",
        haloSize: 1
      };
    }
    else {
      return {
        fontFamily: "Arial",
        fontSize: 13 * 0.75,
        fontColor: backgroundColor || "#696969",
        haloColor: "#d3d3d3",
        haloSize: 1 * 0.75
      };
    }
  }
  defaultPlacement() {
    var _a;
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster &&
      ((_a = this.layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
      return "always-horizontal";
    }
    else if (this.layerGeometryType === "point" || this.layerGeometryType === "multipoint") {
      return "above-center";
    }
    else if (this.layerGeometryType === "polyline") {
      return "center-along";
    }
    else if (this.layerGeometryType === "polygon") {
      return "always-horizontal";
    }
    else {
      return null;
    }
  }
  focusLastLabelClass() {
    setTimeout(() => requestAnimationFrame(() => {
      const blocks = this.hostElement.shadowRoot.querySelectorAll("arcgis-label-content");
      if (blocks === null || blocks === void 0 ? void 0 : blocks.length) {
        blocks[blocks.length - 1].setFocus();
      }
    }), 200);
  }
  labelSwitchAndContent() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: CSS$1.enableLabel, alignment: "start", layout: "inline-space-between" }, this.strings.enableLabels, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { ref: (el) => (this.labelSwitch = el), scale: "s", class: CSS$1.labelSwitch, checked: this.getLabelEnabledProp(), onCalciteSwitchChange: (event) => {
        const checked = event.target.checked;
        switch (this.layerDisplayType) {
          case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature: {
            this.layer.labelsVisible = checked;
            break;
          }
          case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster: {
            this.layer.featureReduction.labelsVisible = checked;
            break;
          }
          default: {
            this.layer.labelsVisible = checked;
          }
        }
        this.enableDisableLabel(checked);
        this.internalLabelUpdated.emit(true);
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "labelDiv_Id" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "SortableComponents_Id", class: CSS$1.componentDiv }, this.labelComponents))));
  }
  render() {
    const addLabelBtn = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { id: "addComponentBtn_Id", icon: "plus", slot: "fab", scale: "s", appearance: "outline-fill", kind: "neutral", label: this.strings.addLabel, text: this.strings.addLabel, "text-enabled": true }));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { style: this.calciteFlowProps ? {} : { display: "flex", flex: "1 1 auto", overflow: "hidden" } }, this.calciteFlowProps ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.hostElement) }, this.labelSwitchAndContent())) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { id: "labelFlowItem_Id", heading: this.strings.labelFeatures, description: !this.hideLayerTitle ? this.layer.title : undefined, closable: this.dismissible, onCalciteFlowItemClose: (event) => {
        event.stopPropagation();
        this.closeLabelPopovers.emit();
        this.arcgisLabelDismissedChange.emit();
      }, ref: (node) => (this.flowItemNode = node) }, this.labelSwitchAndContent(), addLabelBtn)))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLabel.style = arcgisLabelCss;

const CSS = {
  labelContentButtonSection: "label-content-btn-section",
  labelContentButtonExp: "label-content-btn-exp",
  labelContentButton: "label-content-btn",
  labelContentButtonText: "label-content-btn-text",
  labelContentButtonIcon: "label-content-btn-icon",
  fieldExpressionDiv: "field-expression-div"
};

const arcgisLabelContentCss = ".label-content-btn-section{background-color:var(--arcgis-app-background);min-width:100%}.label-content-btn{background:var(--arcgis-app-background-clear);border:1px solid var(--arcgis-app-border);border-radius:var(--arcgis-app-border-radius);display:flex;align-items:center;justify-content:space-between;padding:var(--arcgis-app-cap-spacing-half) var(--arcgis-app-side-spacing-quarter);cursor:pointer;width:100%;text-align:unset;transition:background-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function), border-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function)}.label-content-btn:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.label-content-btn-exp{width:calc(100% - 32px)}.label-content-btn-exp .label-content-btn{border:none;border-radius:0;border-right:1px solid var(--arcgis-app-border)}.label-content-btn-text{font-family:var(--arcgis-app-font-family);font-size:var(--arcgis-app-font-size-0);flex:0 1 auto;overflow:hidden;padding:0 var(--arcgis-app-side-spacing-eighth);text-overflow:ellipsis;white-space:nowrap}.label-content-btn-icon{flex:0 0 0%;padding:0 var(--arcgis-app-side-spacing-half)}.field-expression-div{align-items:center;display:flex;justify-content:space-between;width:100%;border:1px solid var(--arcgis-app-border);border-radius:var(--arcgis-app-border-radius)}.field-expression-div calcite-action{flex:0 0 auto}#slider_Id{min-width:100%}";

const ArcgisLabelContent = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closeLabelPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeLabelPopovers", 7);
    this.internalLabelUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalLabelUpdated", 7);
    this.labelContentReRender = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "labelContentReRender", 7);
    this.disableLabelPanel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "disableLabelPanel", 7);
    this.defaultScript = "";
    this.aggregationExpressionMapping = new Map();
    this.fieldPickListChanges = async (event) => {
      var _a, _b;
      event.stopPropagation();
      const selectedField = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) === null || _b === void 0 ? void 0 : _b[0];
      if (selectedField) {
        if (this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.mapImage) {
          this.labelClass.labelExpression = `[${selectedField}]`;
        }
        else {
          if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster) {
            if (this.aggregationExpressionMapping.has(selectedField)) {
              this.labelClass.labelExpressionInfo.expression =
                this.aggregationExpressionMapping.get(selectedField);
            }
            else {
              for (const [fieldName, expression] of this.aggregationExpressionMapping) {
                if (fieldName === selectedField) {
                  this.labelClass.labelExpressionInfo.expression = expression;
                }
              }
            }
          }
          else {
            this.labelClass.labelExpressionInfo = this.layer.fields.some((field) => {
              var _a;
              if (field.name === selectedField) {
                return ((_a = field === null || field === void 0 ? void 0 : field.domain) === null || _a === void 0 ? void 0 : _a.type) === "coded-value";
              }
            })
              ? {
                expression: `$feature["${selectedField}"]\nDomainName($feature, "${selectedField}")`
              }
              : {
                expression: `$feature["${selectedField}"]`
              };
          }
        }
        this.labelContentReRender.emit();
      }
      this.closeLabelPopovers.emit();
    };
    this.guid = undefined;
    this.blockOpen = false;
    this.labelClass = undefined;
    this.calciteFlowItem = undefined;
    this.reRender = undefined;
  }
  // lifecycle methods
  async componentWillLoad() {
    this.layer = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layer;
    this.mapView = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.mapView;
    this.portal = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.portal;
    this.config = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.config;
    this.strings = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.strings;
    this.currentLanguage = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.currentLanguage;
    this.layerDisplayType = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layerDisplayType;
    this.serviceType = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.serviceType;
    this.popupTemplate =
      this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature
        ? this.layer.popupTemplate
        : this.layer.featureReduction.popupTemplate;
    this.labelFields = await this.getFieldsForLabeling();
    this.defaultScript = `// ${this.strings.arcadeScriptLine1} \n// ${this.strings.arcadeScriptLine2}\n// $feature.name + " " + $feature.status\n`;
    if (!this.calciteFlowItem) {
      this.calciteFlowItem = this.hostElement.closest("#labelFlowItem_Id");
    }
    // setup mapping for cluster case. We dont want to use default values since there is no formatting.
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster) {
      [this.binLabelCreator, this.clusterLabelCreator] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
        "esri/smartMapping/labels/bins",
        "esri/smartMapping/labels/clusters"
      ]);
      const getSchemesForField = async (fieldName) => {
        var _a, _b;
        let labelSchemes;
        if (((_a = this.layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
          labelSchemes = await this.binLabelCreator.getLabelSchemes({
            layer: this.layer,
            field: fieldName
          });
        }
        else {
          labelSchemes = await this.clusterLabelCreator.getLabelSchemes({
            layer: this.layer,
            renderer: (_b = this.layer) === null || _b === void 0 ? void 0 : _b.renderer,
            view: this.mapView,
            field: fieldName
          });
        }
        const allSchemes = [labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.primaryScheme, ...labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.secondarySchemes];
        allSchemes.forEach((clusterScheme) => {
          var _a, _b, _c;
          this.aggregationExpressionMapping.set(clusterScheme === null || clusterScheme === void 0 ? void 0 : clusterScheme.fieldName, (_c = (_b = (_a = clusterScheme === null || clusterScheme === void 0 ? void 0 : clusterScheme.labelingInfo) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.labelExpressionInfo) === null || _c === void 0 ? void 0 : _c.expression);
        });
      };
      const calls = [];
      this.labelFields.forEach((field) => {
        calls.push(getSchemesForField(field.name));
      });
      await Promise.all(calls);
    }
  }
  componentDidLoad() {
    this.addScaleRangeSlider();
  }
  componentDidUpdate() {
    this.internalLabelUpdated.emit();
  }
  disconnectedCallback() {
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
    }
    if (this.labelStyle) {
      document.body.removeChild(this.labelStyle);
    }
    if (this.popoverRenameForm) {
      document.body.removeChild(this.popoverRenameForm);
    }
    if (this.labelFilter) {
      document.body.removeChild(this.labelFilter);
    }
  }
  async setFocus() {
    if (this.blockOpen) {
      this.blockOptions.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
      this.blockOptions.setFocus();
    }
  }
  // Events
  calciteBlockToggleHandler() {
    this.closeLabelPopovers.emit();
  }
  labelContentReRenderHandler(event) {
    event.stopPropagation();
    this.reRender = this.reRender ? false : true;
  }
  closeLabelPopoversHandler() {
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
      this.arcgisFieldPickList = null;
      this.attributesBtn.focus();
    }
    if (this.labelStyle) {
      document.body.removeChild(this.labelStyle);
      this.labelStyle = null;
      this.styleBtn.focus();
    }
    if (this.popoverRenameForm) {
      document.body.removeChild(this.popoverRenameForm);
      this.popoverRenameForm = null;
      this.blockOptions.setFocus();
    }
    if (this.labelFilter) {
      document.body.removeChild(this.labelFilter);
      this.labelFilter = null;
      this.filterBtn.focus();
    }
    this.disableLabelPanel.emit(false);
  }
  notifySymbolChangesHandler(event) {
    if (this.guid === event.detail) {
      event.stopPropagation();
      this.labelContentReRender.emit();
    }
  }
  notifyFilterUpdatedHandler(event) {
    if (this.guid === event.detail) {
      event.stopPropagation();
      this.labelContentReRender.emit();
    }
  }
  renameComponentHandler(event) {
    if (this.guid === event.detail) {
      this.closeLabelPopovers.emit();
      event.stopPropagation();
      if (!this.popoverRenameForm) {
        this.popoverRenameForm = document.createElement("arcgis-popover-rename-form");
        this.popoverRenameForm.guid = this.guid;
        this.popoverRenameForm.refElement = this.hostElement;
        this.popoverRenameForm.popoverPanelWidth = this.hostElement.getBoundingClientRect().width;
        this.popoverRenameForm.intlRenameHeader = this.strings.popoverRenameHeader;
        this.popoverRenameForm.intlOk = this.strings.ok;
        this.popoverRenameForm.intlCancel = this.strings.cancel;
        this.popoverRenameForm.intlClose = this.strings.close;
        this.popoverRenameForm.inputValue =
          this.labelClass.name || this.getDisplayFieldName() || this.strings.label;
        document.body.appendChild(this.popoverRenameForm);
        this.disableLabelPanel.emit(true);
      }
    }
  }
  popoverRenameFormEventHandler(event) {
    if (this.guid === event.detail[0]) {
      event.stopPropagation();
      this.closeLabelPopovers.emit();
      if (event.detail[1]) {
        this.labelClass.name = event.detail[1];
        this.labelContentReRender.emit();
      }
    }
  }
  // private methods and properties
  // lookup popupinfo for alias
  async getFieldsForLabeling() {
    var _a;
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature) {
      const layerFields = await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.j)(this.layer);
      if ((_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.fieldInfos) {
        let fieldsWithAlias = [];
        layerFields
          .filter((layerField) => [
          "string",
          "small-integer",
          "big-integer",
          "integer",
          "single",
          "double",
          "long",
          "date",
          "date-only",
          "time-only",
          "timestamp-offset",
          "oid",
          "guid",
          "global-id"
        ].indexOf(layerField.type) > -1)
          .forEach((layerField) => {
          fieldsWithAlias = [...fieldsWithAlias, layerField.clone()];
          this.popupTemplate.fieldInfos.find((popupField) => {
            if (popupField.fieldName === layerField.name) {
              fieldsWithAlias[fieldsWithAlias.length - 1].alias = popupField.label;
            }
          });
        });
        return fieldsWithAlias;
      }
      else {
        return layerFields;
      }
    }
    else {
      return (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.k)(this.popupTemplate, false);
    }
  }
  // open popover
  async openAttributesList() {
    // close first since we can have multiple attributes open
    this.closeLabelPopovers.emit();
    this.calciteFlowItem.loading = true;
    // lazy load attribute selection component
    if (!this.arcgisFieldPickList) {
      this.arcgisFieldPickList = document.createElement("arcgis-field-pick-list");
      this.arcgisFieldPickList.popoverProps = {
        refElement: this.calciteFlowItem,
        offsetSkidding: 50
      };
      this.arcgisFieldPickList.fields = this.labelFields;
      this.arcgisFieldPickList.layer = this.layer;
      this.arcgisFieldPickList.mapView = this.mapView;
      this.arcgisFieldPickList.showFieldInfo =
        this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.feature;
      this.arcgisFieldPickList.selectedFields =
        [this.labelClass.getLabelExpressionSingleField()] || 0 ||
          0;
      this.arcgisFieldPickList.addEventListener("arcgisFieldPickListDismissed", this.fieldPickListChanges);
      document.body.appendChild(this.arcgisFieldPickList);
      this.disableLabelPanel.emit(true);
    }
    this.calciteFlowItem.loading = false;
  }
  // get fieldname from cluster expression
  getFieldNameFromAggregationExpression() {
    var _a, _b;
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster) {
      for (const [fieldName, expression] of this.aggregationExpressionMapping) {
        if (expression === ((_b = (_a = this.labelClass) === null || _a === void 0 ? void 0 : _a.labelExpressionInfo) === null || _b === void 0 ? void 0 : _b.expression)) {
          return fieldName;
        }
      }
    }
  }
  // open popover
  openLabelStyle() {
    // close first since we can have multiple attributes open
    this.closeLabelPopovers.emit();
    // lazy load attribute selection component
    if (!this.labelStyle) {
      this.labelStyle = document.createElement("arcgis-label-content-style");
      this.labelStyle.guid = this.guid;
      this.labelStyle.labelContentRefElement = this.calciteFlowItem;
      this.labelStyle.labelClass = this.labelClass;
      document.body.appendChild(this.labelStyle);
      this.disableLabelPanel.emit(true);
    }
  }
  async openArcadeEditor() {
    var _a, _b, _c;
    this.closeLabelPopovers.emit();
    if (!this.arcadeEditor) {
      this.calciteFlowItem.disabled = true;
      this.arcadeEditor = document.createElement("arcgis-modal-arcade");
      this.arcadeEditor.arcadeScript = ((_a = this.labelClass.labelExpressionInfo) === null || _a === void 0 ? void 0 : _a.expression) || "";
      this.arcadeEditor.arcadeProfile = this.getArcadeProfile();
      this.arcadeEditor.testData = await this.getArcadeTestData();
      this.arcadeEditor.addExistingExpressions = true;
      this.arcadeEditor.layer = this.layer;
      this.arcadeEditor.arcadeTitle =
        ((_b = this.labelClass.labelExpressionInfo) === null || _b === void 0 ? void 0 : _b.title) || this.strings.newExpression;
      this.arcadeEditor.arcadeTitleEditable = true;
      this.arcadeEditor.returnPredictOutputType = false;
      this.arcadeEditor.arcadeTitleEditingEnabled = !((_c = this.labelClass.labelExpressionInfo) === null || _c === void 0 ? void 0 : _c.title);
      document.body.appendChild(this.arcadeEditor);
      this.arcadeEditor.addEventListener("arcgisModalArcadeClose", (event) => this.arcadeSetup(event.detail));
    }
  }
  async arcadeSetup(arcadeObject) {
    var _a;
    if (arcadeObject) {
      if ((_a = this.labelClass.labelExpressionInfo) === null || _a === void 0 ? void 0 : _a.expression) {
        this.labelClass.labelExpressionInfo.expression = arcadeObject.script;
        this.labelClass.labelExpressionInfo.title = arcadeObject.title;
      }
      else {
        this.labelClass.labelExpressionInfo = {
          expression: arcadeObject.script,
          title: arcadeObject.title
        };
      }
      this.labelContentReRender.emit();
    }
    this.calciteFlowItem.disabled = false;
    document.body.removeChild(this.arcadeEditor);
    this.arcadeEditor = null;
    this.arcadeBtn.setFocus();
  }
  getArcadeProfile() {
    return {
      id: "labeling",
      definitions: {
        $feature: this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster
          ? { fields: (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.k)(this.popupTemplate, false) }
          : this.layer
      }
    };
  }
  async getArcadeTestData() {
    try {
      if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster) {
        return {
          profileVariableInstances: {
            $feature: await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.l)(this.mapView, this.layer, this.popupTemplate)
          },
          spatialReference: this.mapView.spatialReference,
          timeZone: this.mapView.timeZone
        };
      }
      let url;
      if (this.layer.type === "subtype-sublayer") {
        url = this.layer.parent.url;
      }
      else {
        url = this.layer.url;
      }
      return {
        profileVariableInstances: {
          $feature: (await (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.m)(this.layer, this.mapView)).features[0],
          $layer: this.layer,
          $map: this.mapView.map,
          $datastore: url
        },
        spatialReference: this.mapView.spatialReference,
        timeZone: this.mapView.timeZone
      };
    }
    catch (error) {
      console.log(error);
    }
  }
  getDisplayFieldName() {
    const labelFieldName = this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster
      ? this.getFieldNameFromAggregationExpression()
      : this.labelClass.getLabelExpressionSingleField();
    const tempField = this.labelFields.find((field) => {
      if (field.name === labelFieldName) {
        return field;
      }
    });
    return (tempField === null || tempField === void 0 ? void 0 : tempField.alias) || labelFieldName;
  }
  // rendor methods
  addScaleRangeSlider() {
    const { labelClass } = this;
    (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/widgets/ScaleRangeSlider"]).then(([ScaleRangeSlider]) => {
      var _a, _b;
      const sliderElement = this.hostElement.shadowRoot.getElementById("slider_Id");
      const scaleRangeSlider = new ScaleRangeSlider({
        view: this.mapView,
        region: ((_a = this.portal) === null || _a === void 0 ? void 0 : _a.region) || ((_b = this.portal) === null || _b === void 0 ? void 0 : _b.getRegion().toLowerCase()) || "wo",
        minScale: labelClass.minScale || 0,
        maxScale: labelClass.maxScale || 0
      }, sliderElement);
      sliderElement.insertAdjacentHTML("afterbegin", `<link rel="stylesheet" href="${this.config.jsapiUrl}/themes/light/main.css" />`);
      scaleRangeSlider.watch(["minScale", "maxScale"], (value, _oldValue, name) => {
        if (name === "minScale") {
          labelClass.minScale = value;
        }
        else if (name === "maxScale") {
          labelClass.maxScale = value;
        }
        this.closeLabelPopovers.emit();
        this.labelContentReRender.emit();
      });
    });
  }
  render() {
    var _a, _b, _c;
    const { blockOpen, guid, strings } = this;
    const allowExpressions = this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.feature ||
      (this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.mapImage &&
        ((_b = (_a = this.layer.layer.capabilities) === null || _a === void 0 ? void 0 : _a.exportMap) === null || _b === void 0 ? void 0 : _b.supportsArcadeExpressionForLabeling));
    const labelAttributeBlock = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.labelAttribute, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.fieldExpressionDiv }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: allowExpressions ? CSS.labelContentButtonExp : CSS.labelContentButtonSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { ref: (el) => (this.attributesBtn = el), class: CSS.labelContentButton, title: strings.field, onClick: (event) => {
        event.stopPropagation();
        this.openAttributesList();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.labelContentButtonText }, this.getDisplayFieldName() ||
      ((_c = this.labelClass.labelExpressionInfo) === null || _c === void 0 ? void 0 : _c.title) ||
      strings.newExpression), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.labelContentButtonIcon }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-down" })))), allowExpressions && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (el) => (this.arcadeBtn = el), scale: "s", text: strings.expression, onClick: (event) => {
        event.stopPropagation();
        this.openArcadeEditor();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "code" }))))));
    const labelFilterBlock = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.filter, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.labelContentButtonSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { ref: (el) => (this.filterBtn = el), class: CSS.labelContentButton, title: strings.editLabelFilter, onClick: (event) => {
        event.stopPropagation();
        this.closeLabelPopovers.emit();
        if (!this.labelFilter) {
          this.labelFilter = document.createElement("arcgis-label-content-filter");
          this.labelFilter.guid = this.guid;
          this.labelFilter.labelFilterRefElement = this.calciteFlowItem;
          this.labelFilter.labelClass = this.labelClass;
          document.body.appendChild(this.labelFilter);
          this.disableLabelPanel.emit(true);
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.labelContentButtonText }, strings.editLabelFilter), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.labelContentButtonIcon }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-down" }))))));
    const labelStyleBlock = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.labelStyle, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.labelContentButtonSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { ref: (el) => (this.styleBtn = el), class: CSS.labelContentButton, title: strings.editLabelStyle, onClick: (event) => {
        event.stopPropagation();
        this.openLabelStyle();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.labelContentButtonText }, strings.editLabelStyle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.labelContentButtonIcon }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-down" }))))));
    const sliderBlock = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.visibleRange, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "slider_Id" })));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.hostElement), heading: this.labelClass.name || this.getDisplayFieldName() || this.strings.label, collapsible: true, open: blockOpen }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "control" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-calcite-block-options", { ref: (el) => (this.blockOptions = el), guid: guid, intlOptions: strings.options, intlDelete: strings.delete, intlDuplicate: strings.duplicate, intlRename: strings.rename, calciteBlockOptions: { hasDelete: true, hasDuplicate: true, hasRename: true } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "m", icon: "label" })), labelAttributeBlock, this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.ogcFeature ||
      this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.wfs ||
      this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.subtype
      ? null
      : labelFilterBlock, labelStyleBlock, sliderBlock)));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLabelContent.style = arcgisLabelContentCss;

const arcgisLabelContentStyleCss = ".offset-div{align-items:center;display:flex;justify-content:space-between;gap:16px}";

const ArcgisLabelContentStyle = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.closeLabelPopovers = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeLabelPopovers", 7);
    this.notifySymbolChanges = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "notifySymbolChanges", 7);
    this.minMaxOffset = {
      minOffsetX: -20,
      minOffsetY: -20,
      maxOffsetX: 20,
      maxOffsetY: 20
    };
    // open font popover
    this.openFontPopover = () => {
      var _a, _b;
      if (!this.arcgisFontPicker) {
        this.panelElement.disabled = true;
        this.arcgisFontPicker = document.createElement("arcgis-font-picker");
        this.arcgisFontPicker.fontMap = this.fontMap;
        this.arcgisFontPicker.font = (_b = (_a = this.labelClass) === null || _a === void 0 ? void 0 : _a.symbol) === null || _b === void 0 ? void 0 : _b.font;
        this.arcgisFontPicker.popoverProps = {
          refElement: this.panelElement
        };
        this.arcgisFontPicker.addEventListener("arcgisFontPickerDismissed", this.closeFontPopver);
        this.arcgisFontPicker.addEventListener("arcgisFontPickerChange", this.changeFont);
        document.body.appendChild(this.arcgisFontPicker);
      }
    };
    this.closeFontPopver = () => {
      if (this.arcgisFontPicker) {
        this.panelElement.disabled = false;
        document.body.removeChild(this.arcgisFontPicker);
        this.arcgisFontPicker = null;
        setTimeout(() => {
          // doesn't work without timeout
          this.panelElement.setFocus();
        }, 100);
      }
    };
    this.changeFont = (event) => {
      var _a, _b;
      const font = event === null || event === void 0 ? void 0 : event.detail;
      const labelClassFont = (_b = (_a = this.labelClass) === null || _a === void 0 ? void 0 : _a.symbol) === null || _b === void 0 ? void 0 : _b.font;
      if (font && labelClassFont) {
        labelClassFont.family = font.family;
        labelClassFont.weight = font.weight;
        labelClassFont.style = font.style;
      }
      this.reRender = !this.reRender;
      this.notifySymbolChanges.emit(this.guid);
    };
    this.guid = undefined;
    this.labelContentRefElement = undefined;
    this.labelClass = undefined;
    this.isOpen = false;
    this.reRender = false;
  }
  // lifecycle methods
  componentWillLoad() {
    this.layer = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layer;
    this.portal = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.portal;
    this.strings = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.strings;
    this.layerGeometryType = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layerGeometryType;
    this.serviceType = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.serviceType;
    this.layerDisplayType = _labelStore_a0cf76c4_js__WEBPACK_IMPORTED_MODULE_7__.l.layerDisplayType;
    this.fontMap =
      this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.mapImage ? _fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.m : _fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.f;
  }
  componentDidLoad() {
    this.isOpen = true;
    // need timeout because of re-render
    setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 200);
  }
  // Public method
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  // Events
  async calciteBlockSectionToggleHandler(event) {
    event.stopPropagation();
    const composedPath = event.composedPath();
    // halo
    if ((composedPath === null || composedPath === void 0 ? void 0 : composedPath[0].id) === "haloBlock_Id") {
      if (this.labelClass.symbol.haloColor) {
        this.tempHaloColor = this.labelClass.symbol.haloColor;
        this.labelClass.symbol.haloColor = null;
      }
      else {
        await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/Color"]).then(async ([Color]) => {
          var _a;
          this.labelClass.symbol.haloColor = this.tempHaloColor || new Color("white");
          this.labelClass.symbol.haloSize = this.labelClass.symbol.haloSize || 1 * 0.75;
          const haloColorPickerComponent = this.hostElement.shadowRoot.getElementById("haloColorPicker_Id");
          haloColorPickerComponent.color = ((_a = this.labelClass.symbol.haloColor) === null || _a === void 0 ? void 0 : _a.toHex()) || "#ffffff";
        });
      }
    }
    this.notifySymbolChanges.emit(this.guid);
    this.hostElement.shadowRoot.getElementById("managePopover_Id")["reposition"]();
  }
  // private methods and properties
  getPlacementArray(layerGeometryType) {
    var _a;
    if (this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster &&
      ((_a = this.layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
      return [];
    }
    else if (layerGeometryType === "point" || layerGeometryType === "multipoint") {
      return _fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.p;
    }
    else if (layerGeometryType === "polyline") {
      return _fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.a;
    }
    else {
      return [];
    }
  }
  changeOffset(offset) {
    this.labelClass.symbol.xoffset = offset.x;
    this.offsetXElement.value = this.labelClass.symbol.xoffset;
    this.offsetXYSlider.x = offset.x;
    this.labelClass.symbol.yoffset = offset.y;
    this.offsetYElement.value = this.labelClass.symbol.yoffset;
    this.offsetXYSlider.y = -offset.y;
    this.notifySymbolChanges.emit(this.guid);
  }
  // rendor methods
  placementSelection() {
    var _a;
    if (!(this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster &&
      ((_a = this.layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") &&
      (([
        _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.feature,
        _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.csv,
        _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.geojson,
        _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.ogcFeature
      ].indexOf(this.serviceType) > -1 &&
        (this.layerGeometryType === "point" || this.layerGeometryType === "multipoint")) ||
        (this.serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.s.mapImage &&
          (this.layerGeometryType === "point" ||
            this.layerGeometryType === "multipoint" ||
            this.layerGeometryType === "polyline")))) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.placement, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: this.strings.placement, onCalciteSelectChange: (event) => {
          this.labelClass.labelPlacement = event.currentTarget.selectedOption.value;
          this.notifySymbolChanges.emit(this.guid);
        }, ref: (node) => (this.placementNode = node) }, this.getPlacementArray(this.layerGeometryType).map((placement) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: placement, selected: this.labelClass.labelPlacement === placement ? true : false }, this.strings[placement] || placement))))));
    }
    else {
      return null;
    }
  }
  render() {
    var _a, _b, _c, _d, _e, _f, _g;
    const isBinning = this.layerDisplayType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_4__.l.cluster &&
      ((_a = this.layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning";
    const fontFamilySelection = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.font, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", iconEnd: "chevron-down", label: (0,_fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.b)((_c = (_b = this.labelClass) === null || _b === void 0 ? void 0 : _b.symbol) === null || _c === void 0 ? void 0 : _c.font), width: "full", scale: "m", onClick: this.openFontPopover, ref: (node) => (this.fontNode = node) }, (0,_fontUtil_1aa3a32c_js__WEBPACK_IMPORTED_MODULE_8__.b)((_e = (_d = this.labelClass) === null || _d === void 0 ? void 0 : _d.symbol) === null || _e === void 0 ? void 0 : _e.font))));
    const fontSizeSelection = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.size, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", scale: "s", min: 5, max: 125, value: `${this.labelClass.symbol.font.size / 0.75 || 5}`, onCalciteInputInput: (event) => {
        this.waitOnUser(event, () => {
          const node = event.target;
          this.labelClass.symbol.font.size = Number(node.value) * 0.75;
          this.notifySymbolChanges.emit(this.guid);
        }, 5);
      } })));
    const offset = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "offset-div" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.offset, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-xy-slider", { ref: (el) => {
        this.offsetXYSlider = el;
      }, x: this.labelClass.symbol.xoffset || 0, y: -this.labelClass.symbol.yoffset || 0, minX: this.minMaxOffset.minOffsetX, minY: this.minMaxOffset.minOffsetY, maxX: this.minMaxOffset.maxOffsetX, maxY: this.minMaxOffset.maxOffsetY, step: 1, snappable: true, onArcgisXYSliderInput: (event) => {
        event.stopPropagation();
        const slider = event.currentTarget;
        this.changeOffset({
          x: slider.x || 0,
          y: -slider.y || 0
        });
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, this.strings.offsetX, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", scale: "s", placeholder: this.strings.offsetX, value: `${this.labelClass.symbol.xoffset || 0}`, min: this.minMaxOffset.minOffsetX, max: this.minMaxOffset.maxOffsetX, ref: (element) => {
        this.offsetXElement = element;
      }, onCalciteInputInput: (event) => {
        this.waitOnUser(event, () => {
          this.changeOffset({
            x: Number(this.offsetXElement.value) || 0,
            y: Number(this.offsetYElement.value) || 0
          });
        }, 0);
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, this.strings.offsetY, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", scale: "s", placeholder: this.strings.offsetY, value: `${this.labelClass.symbol.yoffset || 0}`, min: this.minMaxOffset.minOffsetY, max: this.minMaxOffset.maxOffsetY, ref: (element) => {
        this.offsetYElement = element;
      }, onCalciteInputInput: (event) => {
        this.waitOnUser(event, () => {
          this.changeOffset({
            x: Number(this.offsetXElement.value) || 0,
            y: Number(this.offsetYElement.value) || 0
          });
        }, 0);
      } })))));
    const allowOverrun = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", layout: "inline-space-between" }, this.strings.allowOverrun, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: this.labelClass.allowOverrun, onCalciteSwitchChange: (event) => {
        this.labelClass.allowOverrun = event.target.checked;
        this.notifySymbolChanges.emit(this.guid);
      } })));
    const repeatLabel = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", layout: "inline-space-between" }, this.strings.repeatLabel, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: this.labelClass.repeatLabel, onCalciteSwitchChange: (event) => {
        this.labelClass.repeatLabel = event.target.checked;
        this.reRender = !this.reRender;
        this.notifySymbolChanges.emit(this.guid);
      } })));
    const repeatLabelDistance = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.labelRepeat, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { disabled: !this.labelClass.repeatLabel, type: "number", scale: "s", min: 0, value: `${this.labelClass.repeatLabelDistance || 0}`, onCalciteInputInput: (event) => {
        this.waitOnUser(event, () => {
          const node = event.target;
          this.labelClass.repeatLabelDistance = Number(node.value);
          this.notifySymbolChanges.emit(this.guid);
        }, 0);
      } })));
    const haloBlock = this.panelElement && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { id: "haloBlock_Id", text: this.strings.halo, toggleDisplay: "switch", open: this.labelClass.symbol.haloColor ? true : false }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.color, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { id: "haloColorPicker_Id", color: ((_f = this.labelClass.symbol.haloColor) === null || _f === void 0 ? void 0 : _f.toHex()) || "#ffffff", popoverProps: {
        refElement: this.panelElement,
        placement: "leading-start",
        offsetDistance: -Math.round(this.panelElement.getBoundingClientRect().width),
        offsetSkidding: 50
      }, onArcgisColorInputChange: async (event) => {
        const currColor = event.target.color;
        await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/Color"]).then(([Color]) => {
          this.labelClass.symbol.haloColor = new Color(currColor);
          this.notifySymbolChanges.emit(this.guid);
        });
      }, onArcgisColorInputPopoverOpen: () => {
        // give it some time in case another arcgis-color-input has to close first
        setTimeout(() => {
          this.fontNode.disabled = true;
          this.placementNode.disabled = true;
        }, 200);
      }, onArcgisColorInputPopoverClose: () => {
        this.fontNode.disabled = false;
        this.placementNode.disabled = false;
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.size, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", scale: "s", min: 1, max: 10, value: `${Math.round(this.labelClass.symbol.haloSize / 0.75 || 1)}`, onCalciteInputInput: (event) => {
        this.waitOnUser(event, () => {
          const node = event.target;
          this.labelClass.symbol.haloSize = Number(node.value) * 0.75;
          this.notifySymbolChanges.emit(this.guid);
        }, 1);
      } }))));
    const panelRect = this.labelContentRefElement.getBoundingClientRect();
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.hostElement), id: "managePopover_Id", placement: "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: this.labelContentRefElement, offsetDistance: -Math.round(this.labelContentRefElement.getBoundingClientRect().width), offsetSkidding: 50, label: "", style: {
        zIndex: "100"
      }, triggerDisabled: true, ref: (node) => (this.popoverNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (el) => (this.panelElement = el), closable: true, class: "panel", style: {
        width: `${panelRect.width}px`,
        maxHeight: `${panelRect.height * 0.8}px`
      }, onCalcitePanelClose: () => this.closeLabelPopovers.emit() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, this.strings.labelStyle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: "", collapsible: false, open: true }, fontFamilySelection, " ", fontSizeSelection, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.color, this.panelElement && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-color-input", { color: ((_g = this.labelClass.symbol.color) === null || _g === void 0 ? void 0 : _g.toHex()) || "#ffffff", popoverProps: {
        refElement: this.panelElement,
        placement: "leading-start",
        offsetDistance: -Math.round(this.panelElement.getBoundingClientRect().width),
        offsetSkidding: 50,
        maxHeight: `${panelRect.height * 0.8 - 52}px` // minus panelheader height
      }, onArcgisColorInputChange: async (event) => {
        const currColor = event.target.color;
        await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/Color"]).then(([Color]) => {
          this.labelClass.symbol.color = new Color(currColor);
          this.notifySymbolChanges.emit(this.guid);
        });
      }, onArcgisColorInputPopoverOpen: () => {
        // give it some time in case another arcgis-color-input has to close first
        setTimeout(() => {
          this.fontNode.disabled = true;
          this.placementNode.disabled = true;
        }, 200);
      }, onArcgisColorInputPopoverClose: () => {
        this.fontNode.disabled = false;
        this.placementNode.disabled = false;
      } }))), this.placementSelection(), isBinning || this.layerGeometryType !== "polyline" ? offset : null, !isBinning && this.layerGeometryType === "polyline" ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, allowOverrun, " ", repeatLabel, " ", repeatLabelDistance)) : null, haloBlock)))));
  }
  waitOnUser(event, doChange, defaultValue) {
    // for number fields we don't want to allow an empty value
    // or value outside the range
    // but the user might shortly use an empty input box
    // while typing a new value
    const node = event.target;
    if (this.typingHndl) {
      clearTimeout(this.typingHndl);
      this.typingHndl = undefined;
    }
    const val = node.value;
    console.log(">", val, "<");
    const parsedVal = parseFloat(val);
    if (!val) {
      // undefined or empty string
      // user might be in the middle of typing
      // give the user 2 seconds to fill in empty entry
      // otherwise use default value
      this.typingHndl = setTimeout(() => {
        this.typingHndl = undefined;
        node.value = `${defaultValue}`;
        doChange(event);
      }, 2000);
    }
    else if ((0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.i)(node.min) &&
      (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_5__.i)(node.max) &&
      (node.min > parsedVal || node.max < parsedVal)) {
      // invalid value
      this.typingHndl = setTimeout(() => {
        this.typingHndl = undefined;
        // we waited a bit; no user change; set value to within range
        if (node.min > parsedVal) {
          node.value = `${node.min}`;
          doChange(event);
        }
        else if (node.max < parsedVal) {
          node.value = `${node.max}`;
          doChange(event);
        }
      }, 750);
    }
    else if (val[0] !== "-" || (parsedVal !== 0 && !isNaN(parsedVal))) {
      // not '-', '-0', '-0.', '-0.0', ...
      doChange(event);
    } // else don't update anything; it's still keeping last value
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLabelContentStyle.style = arcgisLabelContentStyleCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-4f4176ba.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ guid)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
function generateId(counts) {
  return counts
    .map((count) => {
    let out = "";
    for (let i = 0; i < count; i++) {
      out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return out;
  })
    .join("-");
}
const guid = () => generateId([2, 1, 1, 1, 3]);




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/labelStore-a0cf76c4.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/labelStore-a0cf76c4.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: () => (/* binding */ labelState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const labelStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  layer: null,
  mapView: null,
  portal: null,
  config: null,
  strings: null,
  currentLanguage: null,
  layerGeometryType: null,
  serviceType: null,
  layerDisplayType: null
});
const labelState = labelStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,