"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-9babcd"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-symbol-picker.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-symbol-picker.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_symbol_picker: () => (/* binding */ ArcgisSymbolPicker)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color-776689e9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-776689e9.js");
/* harmony import */ var _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localStorage-f63100ef.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js");
/* harmony import */ var _storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage-d7f5822e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */










function getInjectedRequestOptions(item) {
  // hack to inject authMode into request options
  return { authMode: item.access === "public" ? "anonymous" : "auto" };
}
const BASIC_SIMPLE_MARKER_SYMBOLS_JSON = [
  {
    name: "Circle",
    type: "esriSMS",
    style: "esriSMSCircle",
    color: [0, 0, 128, 128],
    size: 18,
    outline: {
      color: [0, 0, 128, 255],
      width: 1
    }
  },
  {
    name: "Square",
    type: "esriSMS",
    style: "esriSMSSquare",
    color: [0, 0, 128, 128],
    size: 18,
    outline: {
      color: [0, 0, 128, 255],
      width: 1
    }
  },
  {
    name: "Diamond",
    type: "esriSMS",
    style: "esriSMSDiamond",
    color: [0, 0, 128, 128],
    size: 18,
    outline: {
      color: [0, 0, 128, 255],
      width: 1
    }
  },
  {
    name: "Triangle",
    type: "esriSMS",
    style: "esriSMSTriangle",
    color: [0, 0, 128, 128],
    size: 18,
    outline: {
      color: [0, 0, 128, 255],
      width: 1
    }
  } /* ,
  {
    name: "Cross",
    type: "esriSMS",
    style: "esriSMSCross",
    color: [0, 0, 128, 128],
    size: 18,
    outline: {
      color: [0, 0, 128, 255],
      width: 1
    }
  },
  {
    name: "X",
    type: "esriSMS",
    style: "esriSMSX",
    color: [0, 0, 128, 128],
    size: 18,
    outline: {
      color: [0, 0, 128, 255],
      width: 1
    }
  } */
];
const BASIC_SIMPLE_LINE_SYMBOLS_JSON = [
  {
    type: "esriSLS",
    color: [0, 0, 0, 255],
    width: 0.75,
    style: "esriSLSSolid"
  }
];
const BASIC_SIMPLE_POLYGON_SYMBOLS_JSON = [
  {
    type: "esriSFS",
    color: [0, 0, 0, 64],
    outline: {
      type: "esriSLS",
      color: [0, 0, 0, 255],
      width: 0.75,
      style: "esriSLSSolid"
    },
    style: "esriSFSSolid"
  }
];
const symbolHeightAsMainAxis = 10;
const symbolRadiusFixed = 5;
function generateIconPrimitiveSymbolJson(strings) {
  const icons = [
    {
      title: strings.symbolSources.circle,
      name: "Circle",
      primitive: "circle"
    },
    {
      title: strings.symbolSources.square,
      name: "Square",
      primitive: "square"
    },
    {
      title: strings.symbolSources.cross,
      name: "Cross",
      primitive: "cross"
    },
    {
      title: strings.symbolSources.x,
      name: "X",
      primitive: "x"
    },
    {
      title: strings.symbolSources.kite,
      name: "Kite",
      primitive: "kite"
    },
    {
      title: strings.symbolSources.triangle,
      name: "Triangle",
      primitive: "triangle"
    }
  ];
  return icons.map((icon) => {
    var _a;
    return ({
      dimensionality: "flat",
      name: icon.name,
      title: icon.title,
      type: "PointSymbol3D",
      symbolLayers: [
        {
          type: "Icon",
          resource: {
            primitive: icon.primitive
          },
          material: {
            color: (_a = _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e === null || _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e === void 0 ? void 0 : _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.gfxUtils) === null || _a === void 0 ? void 0 : _a.defaultThematicColor
          },
          outline: {
            color: [0, 0, 0]
          }
        }
      ]
    });
  });
}
function generateObjectPrimitiveSymbolJson(strings) {
  const objects = [
    {
      title: strings.symbolSources.sphere,
      name: "Sphere",
      primitive: "sphere"
    },
    {
      title: strings.symbolSources.tallCylinder,
      name: "Tall_Cylinder",
      primitive: "cylinder",
      mixins: {
        width: symbolRadiusFixed,
        height: symbolHeightAsMainAxis,
        depth: symbolRadiusFixed
      }
    },
    {
      title: strings.symbolSources.cylinder,
      name: "Cylinder",
      primitive: "cylinder"
    },
    {
      title: strings.symbolSources.tallCube,
      name: "Tall_Cube",
      primitive: "cube",
      mixins: {
        width: symbolRadiusFixed,
        height: symbolHeightAsMainAxis,
        depth: symbolRadiusFixed,
        anchor: "bottom"
      }
    },
    {
      title: strings.symbolSources.cube,
      name: "Cube",
      primitive: "cube"
    },
    {
      title: strings.symbolSources.tallCone,
      name: "Tall_Cone",
      primitive: "cone",
      mixins: {
        width: symbolRadiusFixed,
        height: symbolHeightAsMainAxis,
        depth: symbolRadiusFixed
      }
    },
    {
      title: strings.symbolSources.cone,
      name: "Cone",
      primitive: "cone"
    },
    {
      title: strings.symbolSources.invertedCone,
      name: "Inverted_Cone",
      primitive: "invertedCone"
    },
    {
      title: strings.symbolSources.diamond,
      name: "Diamond",
      primitive: "diamond"
    },
    {
      title: strings.symbolSources.tetrahedron,
      name: "Tetrahedron",
      primitive: "tetrahedron"
    }
  ];
  return objects.map((object) => ({
    dimensionality: "volumetric",
    name: object.name,
    title: object.title,
    type: "PointSymbol3D",
    symbolLayers: [
      Object.assign({ type: "Object", resource: {
          primitive: object.primitive
        } }, object.mixins)
    ]
  }));
}
const symbolThumbnailSizeInPt = 24; // 24 pt => 32px
const symbolThumbnailSizeInPtFor3D = 42; // 42pt => 56px
function has3DFormat(itemData) {
  var _a, _b;
  const formatIncludes3D = (_a = itemData.formats) === null || _a === void 0 ? void 0 : _a.includes("web3d");
  const formatInfosIncludes3DHint = (_b = itemData.formatInfos) === null || _b === void 0 ? void 0 : _b.some((formatInfo) => formatInfo.type === "gltf" || formatInfo.type === "gltf_basisu");
  return formatIncludes3D || formatInfosIncludes3DHint;
}
async function getWebStyleSymbolThumbnailPreview(item) {
  var _a, _b;
  const itemData = item.data;
  let thumbnailUrl = (_a = itemData.thumbnail) === null || _a === void 0 ? void 0 : _a.href;
  const thumbnailData = (_b = itemData.thumbnail) === null || _b === void 0 ? void 0 : _b.imageData;
  const title = itemData.title || item.strings.symbolSources.noTitle;
  const wrapper = document.createElement("div");
  const isCIM = !!itemData.cimRef;
  const is3d = has3DFormat(itemData);
  const commonPreviewOptions = {
    size: is3d && itemData.dimensionality === "volumetric" ? symbolThumbnailSizeInPtFor3D : symbolThumbnailSizeInPt,
    disableUpsampling: false
  };
  if (
  /* symbol preview utils only support 2D CIM */
  isCIM &&
    !is3d) {
    const symbol = (await item.getSymbol());
    if (
    // lines/points use dynamically generated previews
    // polygons use thumbnail URLs since dynamically generated
    // previews may not display as nicely as authored ones
    !(0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.g)(symbol)) {
      if ((0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.j)(symbol)) {
        // we drop size for non-points to prevent a known rendering issue – https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/41790
        delete commonPreviewOptions.size;
      }
      return appendPreview(wrapper, symbol, commonPreviewOptions, title);
    }
  }
  // When loading Esri provided styles on dev environments we get incorrect
  // symbol URLs.
  // If necessary and allowed, adjust the URL to work on dev environments
  // see https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/16832
  if (_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.devEnvironmentUtils.isDevEnvironment()) {
    thumbnailUrl = _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.devEnvironmentUtils.adjustStaticAGOUrl(thumbnailUrl);
  }
  if (!thumbnailUrl && !thumbnailData) {
    wrapper.appendChild(createBlankThumbnail(title));
    return wrapper;
  }
  const symbol = new _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.WebStyleSymbol({
    name: itemData.name,
    styleUrl: `${item.portalItem.itemUrl}/data`,
    thumbnail: {
      url: thumbnailData
        ? `data:image/jpeg;base64, ${thumbnailData}`
        : _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.urlUtils.makeAbsolute(thumbnailUrl, item.portalItem.itemUrl)
    }
  });
  return appendPreview(wrapper, symbol, commonPreviewOptions, title);
}
async function appendPreview(node, symbol, options, title) {
  try {
    await _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.symbolUtils.renderPreviewHTML(symbol, Object.assign({ node }, options));
  }
  catch (e) {
    node.appendChild(createBlankThumbnail(title));
  }
  return node;
}
function createBlankThumbnail(title) {
  const element = document.createElement("span");
  // described by parent node
  element.setAttribute("alt", "");
  element.innerHTML = title;
  return element;
}
function webStyleSymbolStrategy(symbolType = "2d") {
  return {
    async getSymbol(item) {
      const { data, parentData, portalItem } = item;
      const symbol = await symbolFromWebStyleJSON(parentData, data.name, portalItem, parentData.cimVersion && symbolType === "2d" ? "cimRef" : "webRef");
      // Override color for 3d icon and object symbols to be thematic
      if (symbol.type === "point-3d") {
        symbol.symbolLayers.forEach((symbolLayer) => {
          if (symbolLayer.get("material.color")) {
            if (symbolLayer.type === "icon") {
              const material = symbolLayer.material != null
                ? symbolLayer.material
                : {
                /* autocasts as Symbol3DMaterial */
                };
              material.color = _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.gfxUtils.defaultThematicColor.clone();
              symbolLayer.material = material;
            }
            else if (symbolLayer.type === "object") {
              const material = symbolLayer.material != null
                ? symbolLayer.material
                : {
                /* autocasts as Symbol3DMaterial */
                };
              material.color = material.color || (0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.d)([255, 255, 255]);
              symbolLayer.material = material;
            }
          }
        });
      }
      return symbol;
    },
    async getThumbnail(item) {
      return getWebStyleSymbolThumbnailPreview(item);
    }
  };
}
function webStyleCustomSymbolStrategy() {
  return {
    async getSymbol(item) {
      return item.data.symbol;
    },
    async getThumbnail(item) {
      const wrapper = document.createElement("div");
      const html = appendPreview(wrapper, item.data.symbol, {
        size: 24,
        disableUpsampling: false
      }, item.data.title);
      return html;
    }
  };
}
const flatSymbolStrategy = {
  async getSymbol(item) {
    return _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.jsonUtils.fromJSON(item.data);
  },
  async getThumbnail(item) {
    const symbol = (await item.getSymbol());
    const previewOptions = {
      size: (0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.h)(symbol) === "line"
        ? {
          width: symbolThumbnailSizeInPt
        }
        : symbolThumbnailSizeInPt
    };
    return _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.symbolUtils.renderPreviewHTML(symbol, previewOptions);
  }
};
const volumetricSymbolStrategy = {
  async getSymbol(item) {
    return _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.jsonUtils.fromJSON(item.data);
  },
  async getThumbnail(item) {
    const symbol = await item.getSymbol();
    return _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.symbolUtils.renderPreviewHTML(symbol, { size: symbolThumbnailSizeInPtFor3D - 4 });
  }
};
const noop = Function.prototype;
class SymbolItem {
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  constructor({ data, parentData, portalItem, strategy, strings }) {
    this.data = data;
    this.parentData = parentData;
    this.portalItem = portalItem;
    this.strategy = strategy;
    this.strings = strings;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async getSymbol() {
    if (!this._symbol) {
      const inflightSymbol = this._symbolRequest || (this._symbolRequest = this.strategy.getSymbol(this));
      this._symbol = await inflightSymbol;
    }
    return this._symbol.clone();
  }
  async getThumbnail(node) {
    if (this._thumbnail) {
      node.appendChild(this._thumbnail);
      return noop;
    }
    const inflightThumbnail = this._thumbnailRequest || (this._thumbnailRequest = this.strategy.getThumbnail(this));
    this._thumbnail = await inflightThumbnail;
    return () => node.appendChild(this._thumbnail);
  }
}
class PortalItemSymbolSourceBase {
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  constructor({ portalItem, strings, symbolType }) {
    this.symbolType = "2d";
    this.portalItem = portalItem;
    this.strings = strings;
    if (symbolType) {
      this.symbolType = symbolType;
    }
  }
  get data() {
    return this._data;
  }
  get id() {
    var _a;
    return (_a = this.portalItem) === null || _a === void 0 ? void 0 : _a.id;
  }
  get keywords() {
    var _a;
    return ((_a = this.portalItem) === null || _a === void 0 ? void 0 : _a.typeKeywords) || [];
  }
  get name() {
    var _a;
    return (_a = this.portalItem) === null || _a === void 0 ? void 0 : _a.name;
  }
  get title() {
    var _a;
    return (_a = this.portalItem) === null || _a === void 0 ? void 0 : _a.title;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async fetchData(options) {
    if (_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.isAborted(options)) {
      throw _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.createAbortError();
    }
    if (!this._data) {
      this._data = await this.portalItem.fetchData("json", Object.assign(Object.assign({}, options), getInjectedRequestOptions(this.portalItem)));
    }
    return this._data;
  }
}
class SymbolSetSymbolSource extends PortalItemSymbolSourceBase {
  constructor() {
    //--------------------------------------------------------------------------
    //
    //  Private Properties
    //
    //--------------------------------------------------------------------------
    super(...arguments);
    //--------------------------------------------------------------------------
    //
    //  Properties
    //
    //--------------------------------------------------------------------------
    this.type = "symbol-set";
  }
  //--------------------------------------------------------------------------
  //
  //  Protected Methods
  //
  //--------------------------------------------------------------------------
  async getItems(options) {
    if (_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.isAborted(options)) {
      throw _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.createAbortError();
    }
    if (!this._items) {
      const data = await this.fetchData(options);
      this._items = data.map((item) => new SymbolItem({
        data: item,
        parentData: data,
        portalItem: this.portalItem,
        strategy: flatSymbolStrategy,
        strings: this.strings
      }));
    }
    return this._items;
  }
}
class WebStyleSymbolSource extends PortalItemSymbolSourceBase {
  constructor() {
    //--------------------------------------------------------------------------
    //
    //  Private Properties
    //
    //--------------------------------------------------------------------------
    super(...arguments);
    //--------------------------------------------------------------------------
    //
    //  Properties
    //
    //--------------------------------------------------------------------------
    this.type = "web-style";
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async getItems(options) {
    if (_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.isAborted(options)) {
      throw _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.createAbortError();
    }
    if (!this._items) {
      const data = await this.fetchData(options);
      this._items = data.items.map((item) => new SymbolItem({
        data: item,
        parentData: data,
        portalItem: this.portalItem,
        strategy: webStyleSymbolStrategy(this.symbolType),
        strings: this.strings
      }));
    }
    return this._items;
  }
}
class BasicSymbolSetSource {
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  constructor({ strings }) {
    this.keywords = [];
    this.name = "Basic";
    this.type = "symbol-set";
    this.title = strings.symbolSources.basic;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async getItems(options) {
    if (_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.isAborted(options)) {
      throw _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.createAbortError();
    }
    if (!this._items) {
      // no parent data since it's local
      this._items = this.data.map((data) => new SymbolItem({
        data,
        strategy: flatSymbolStrategy,
        strings: this.strings
      }));
    }
    return this._items;
  }
}
const basicPointSymbolSetSourceId = "basic-symbol-set:point";
const basicLineSymbolSetSourceId = "basic-symbol-set:line";
const basicPolygonSymbolSetSourceId = "basic-symbol-set:polygon";
class BasicPointSymbolSetSource extends BasicSymbolSetSource {
  constructor() {
    //--------------------------------------------------------------------------
    //
    //  Properties
    //
    //--------------------------------------------------------------------------
    super(...arguments);
    this.data = BASIC_SIMPLE_MARKER_SYMBOLS_JSON;
    this.id = basicPointSymbolSetSourceId;
    this.keywords = ["Point"];
  }
}
class BasicLineSymbolSetSource extends BasicSymbolSetSource {
  constructor() {
    //--------------------------------------------------------------------------
    //
    //  Properties
    //
    //--------------------------------------------------------------------------
    super(...arguments);
    this.data = BASIC_SIMPLE_LINE_SYMBOLS_JSON;
    this.id = basicLineSymbolSetSourceId;
    this.keywords = ["Line"];
  }
}
class BasicPolygonSymbolSetSource extends BasicSymbolSetSource {
  constructor() {
    //--------------------------------------------------------------------------
    //
    //  Properties
    //
    //--------------------------------------------------------------------------
    super(...arguments);
    this.data = BASIC_SIMPLE_POLYGON_SYMBOLS_JSON;
    this.id = basicPolygonSymbolSetSourceId;
    this.keywords = ["Polygon"];
  }
}
class IconPrimitiveWebStyleSource {
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  constructor({ strings }) {
    this.keywords = ["3d"];
    this.id = "basic-web-style:flat";
    this.name = "Basic";
    this.type = "web-style";
    this.data = { items: generateIconPrimitiveSymbolJson(strings) };
    this.title = strings.symbolSources.basic;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async getItems(options) {
    if (_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.isAborted(options)) {
      throw _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.createAbortError();
    }
    if (!this._items) {
      // no parent data since it's local
      this._items = this.data.items.map((data) => new SymbolItem({
        data,
        strategy: flatSymbolStrategy,
        strings: this.strings
      }));
    }
    return this._items;
  }
}
class ObjectPrimitiveWebStyleSource {
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  constructor({ strings }) {
    this.id = "basic-web-style:volumetric";
    this.keywords = ["3d", "volumetric"];
    this.name = "Basic";
    this.type = "web-style";
    this.data = { items: generateObjectPrimitiveSymbolJson(strings) };
    this.title = strings.symbolSources.basic;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async getItems(options) {
    if (_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.isAborted(options)) {
      throw _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.promiseUtils.createAbortError();
    }
    if (!this._items) {
      // no parent data since it's local
      this._items = this.data.items.map((data) => new SymbolItem({
        data,
        parentData: this.data,
        strategy: volumetricSymbolStrategy,
        strings: this.strings
      }));
    }
    return this._items;
  }
}
function styleNameFromItem(item) {
  // Find type keyword that looks like it's an esri style and hope it works
  for (const typeKeyword of item.typeKeywords) {
    if (/^Esri.*Style$/.test(typeKeyword) && typeKeyword !== "Esri Style") {
      return typeKeyword;
    }
  }
  return undefined;
}
async function symbolFromWebStyleJSON(style, name, item, type) {
  const styleName = styleNameFromItem(item);
  let styleUrl = null;
  if (!styleName) {
    styleUrl = `${item.itemUrl}/data`;
  }
  const styleResponse = {
    data: style,
    baseUrl: item.itemUrl,
    styleName,
    styleUrl
  };
  const { portal } = item;
  return _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.webStyleSymbolUtils.fetchSymbolFromStyle(styleResponse, name, { portal }, type, _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.styleUtils.symbolUrlFromStyleItem, getInjectedRequestOptions(item));
}

const CSS$1 = {
  markerItem: "marker-item",
  calciteDarkTheme: "calcite-mode-dark"
};
const MarkerItem = ({ item, index, observer }) => {
  const tooltip = item.data.title ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { "reference-element": item.data.name }, item.data.title)) : null;
  return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: `${CSS$1.markerItem} ${CSS$1.calciteDarkTheme}`, ref: (node) => {
      if (!node) {
        return;
      }
      const alreadyProcessed = node.item;
      if (alreadyProcessed) {
        return;
      }
      node.item = item;
      node.index = index;
      observer.observe(node);
    }, id: item.data.name, slot: "thumbnail" }, tooltip));
};

function fetchSymbolSetSymbolSources(portal, strings) {
  return fetchSymbolSets(portal).then((items) => items.map((item) => new SymbolSetSymbolSource({
    portalItem: item,
    strings
  })));
}
function fetchSymbolSets(portal) {
  return itemFetcher({
    portal,
    queries: {
      group: portal.symbolSetsGroupQuery,
      item: `type:"Symbol Set" AND (typekeywords:"by value" AND typekeywords:"marker")`
    }
  }).then(moveDefaultToFirst);
}
function fetchWebStyleSymbolSources(portal, type, strings) {
  return fetchWebStyles(portal, type).then((items) => items.map((item) => new WebStyleSymbolSource({
    portalItem: item,
    symbolType: type,
    strings
  })));
}
async function fetchWebStyles(portal, type) {
  const group = type === "2d" ? portal.stylesGroupQuery2d : portal.stylesGroupQuery3d;
  if (!group) {
    return [];
  }
  return itemFetcher({
    portal,
    queries: {
      group,
      item: `type:"Style"`
    }
  }).then(moveDefaultToFirst);
}
function getPrimitives(dimensionality, strings) {
  return dimensionality === "flat"
    ? new IconPrimitiveWebStyleSource({ strings })
    : new ObjectPrimitiveWebStyleSource({ strings });
}
function getBasic(strings, geometryType) {
  const props = { strings };
  return geometryType === "line"
    ? new BasicLineSymbolSetSource(props)
    : geometryType === "polygon"
      ? new BasicPolygonSymbolSetSource(props)
      : new BasicPointSymbolSetSource(props);
}
async function itemFetcher(options) {
  const portal = options.portal;
  const groupQuery = options.queries.group;
  const itemQuery = options.queries.item;
  const maxItems = 100;
  const { results } = await portal.queryGroups({ query: groupQuery, disableExtraQuery: true });
  if (results.length === 0) {
    return [];
  }
  const [group] = results;
  return (await group.queryItems({
    query: itemQuery,
    disableExtraQuery: true,
    num: maxItems,
    sortField: group.sortField
  })).results;
}
function hasKeyword(item, keyword) {
  return item.typeKeywords.indexOf(keyword) > -1;
}
function moveDefaultToFirst(results) {
  const sorted = [];
  results.forEach((set) => {
    if (hasKeyword(set, "default")) {
      sorted.unshift(set);
    }
    else {
      sorted.push(set);
    }
  });
  return sorted;
}

const cimGeometryItemType = {
  point: "pointSymbol",
  line: "lineSymbol",
  polygon: "polygonSymbol"
};
const isInterceptor = (portalOrPortalInterceptor) => !!portalOrPortalInterceptor.portal;
async function asyncFilter(items, predicate) {
  return Promise.all(items.map(predicate)).then((results) => items.filter((_item, index) => results[index]));
}
async function filterSymbolItems(source, symbolItems, markerType, geometryType, symbolType, filter) {
  const allowed = normalizeAllowedTypes(markerType);
  const defaultSourceFilter = symbolType === "2d"
    ? createDefaultSymbolItemFilter2d(geometryType, allowed)
    : createDefaultSymbolItemFilter3d(allowed);
  const effectiveFilter = async (symbolItem) => filter ? filter(symbolItem, source, defaultSourceFilter) : defaultSourceFilter(symbolItem, source);
  return asyncFilter(symbolItems, effectiveFilter);
}
function createDefaultSymbolItemFilter2d(geometryType, allowedTypes) {
  function symbolItemOnlyFilter(symbolItem) {
    if (allowedTypes.includes("all")) {
      return true;
    }
    const { data } = symbolItem;
    const { dimensionality, type: symbolType } = data;
    if (dimensionality === "volumetric") {
      return false;
    }
    if (geometryType === "point") {
      if (allowedTypes.includes("picture") && symbolType === "esriPMS") {
        return true;
      }
      if (allowedTypes.includes("simple") && symbolType === "esriSMS") {
        return true;
      }
    }
    if (geometryType === "line") {
      if (allowedTypes.includes("simple") && symbolType === "esriSLS") {
        return true;
      }
    }
    if (geometryType === "polygon") {
      if (allowedTypes.includes("simple") && symbolType === "esriSFS") {
        return true;
      }
    }
    const { formats } = data;
    if (hasCIMType(allowedTypes) && hasCIMType(formats)) {
      return true;
    }
    return false;
  }
  return async function defaultSymbolItemFilter2d(symbolItem, source) {
    const geometrySymbolFilter = geometryType === "point" ? _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.m : geometryType === "line" ? _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.j : _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.g;
    if (!symbolItemOnlyFilter(symbolItem)) {
      return false;
    }
    const hasPictureCIM = allowedTypes.includes("cim:picture");
    const hasVectorCIM = allowedTypes.includes("cim:vector");
    const hasAllOrNoCIMFilters = (hasPictureCIM && hasVectorCIM) || (!hasPictureCIM && !hasVectorCIM);
    // TODO: base on geomtype
    const isPointOnlyCimSource = hasCimPointKeyword(source) && !hasCimLineKeyword(source) && !hasCimPolygonKeyword(source);
    const isLineOnlyCimSource = hasCimLineKeyword(source) && !hasCimPointKeyword(source) && !hasCimPolygonKeyword(source);
    const isPolygonOnlyCimSource = hasCimPolygonKeyword(source) && !hasCimPointKeyword(source) && !hasCimLineKeyword(source);
    const requestedType = geometryType === "line"
      ? cimGeometryItemType.line
      : geometryType === "polygon"
        ? cimGeometryItemType.polygon
        : cimGeometryItemType.point;
    const isRequestedTypeCimSource = isPointOnlyCimSource || isLineOnlyCimSource || isPolygonOnlyCimSource;
    if ((isRequestedTypeCimSource && hasAllOrNoCIMFilters) ||
      source.type !== "web-style" ||
      symbolItem.data.itemType === requestedType) {
      return true;
    }
    const symbol = await symbolItem.getSymbol();
    // we only filter CIM symbols, the rest we let through
    return !(0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.i)(symbol) || geometrySymbolFilter(symbol);
  };
}
function createDefaultSymbolItemFilter3d(allowedTypes) {
  return async function defaultSymbolItemFilter3d(symbolItem) {
    if (allowedTypes.includes("all") || allowedTypes.includes("3d")) {
      return true;
    }
    const { data: { dimensionality } } = symbolItem;
    return ((allowedTypes.includes("3d:flat") && dimensionality === "flat") ||
      (allowedTypes.includes("3d:volumetric") && dimensionality === "volumetric"));
  };
}
const geometryTypeKeywords = {
  point: "Point",
  line: "Line",
  polygon: "Polygon"
};
function hasCimPointKeyword({ keywords }) {
  return keywords.includes(geometryTypeKeywords.point) || keywords.includes("pointSymbol");
}
function hasMarkerKeyword({ keywords }) {
  return keywords.includes("marker");
}
function hasCimLineKeyword({ keywords }) {
  return keywords.includes(geometryTypeKeywords.line) || keywords.includes("lineSymbol");
}
function hasCimPolygonKeyword({ keywords }) {
  return keywords.includes(geometryTypeKeywords.polygon) || keywords.includes("polygonSymbol");
}
async function filterSources(sources, type, geometryType, symbolType, filter) {
  const allowed = normalizeAllowedTypes(type);
  const defaultSourceFilter = symbolType === "2d"
    ? createDefaultSymbolSourceFilter2d(geometryType, allowed)
    : createDefaultSymbolSourceFilter3d(allowed);
  const effectiveFilter = async (symbolSource) => filter ? filter(symbolSource, defaultSourceFilter) : defaultSourceFilter(symbolSource);
  return asyncFilter(sources, effectiveFilter);
}
function createDefaultSymbolSourceFilter2d(geometryType, allowedTypes) {
  return async (source) => {
    const is3d = source.keywords.includes("3d");
    const isDictionary = source.keywords.includes("Dictionary");
    const matchesGeometryType = geometryType === "point"
      ? hasCimPointKeyword(source) || hasMarkerKeyword(source)
      : geometryType === "line"
        ? hasCimLineKeyword(source)
        : hasCimPolygonKeyword(source);
    const hasAtLeastOneGeomKeyword = hasCimPointKeyword(source) ||
      hasMarkerKeyword(source) ||
      hasCimLineKeyword(source) ||
      hasCimPolygonKeyword(source);
    if (is3d || isDictionary || (!matchesGeometryType && hasAtLeastOneGeomKeyword)) {
      return false;
    }
    if (allowedTypes.includes("all")) {
      return true;
    }
    function getBasicSourceId() {
      return geometryType === "point"
        ? basicPointSymbolSetSourceId
        : geometryType === "line"
          ? basicLineSymbolSetSourceId
          : basicPolygonSymbolSetSourceId;
    }
    const basicSymbolSetSourceId = getBasicSourceId();
    if (allowedTypes.includes("picture") && source.id != basicSymbolSetSourceId && source.type === "symbol-set") {
      return true;
    }
    if (allowedTypes.includes("simple") && source.id === basicSymbolSetSourceId) {
      return true;
    }
    if (hasCIMType(allowedTypes) && source.type === "web-style") {
      return true;
    }
    return false;
  };
}
function isPortalSource(source) {
  return "portalItem" in source;
}
function createDefaultSymbolSourceFilter3d(allowedTypes) {
  const webStyleItemKeywordBlocklist = {
    EsriThematicShapesStyle: true
  };
  return async (source) => {
    if (source.keywords.every((keyword) => !webStyleItemKeywordBlocklist[keyword]) &&
      source.type === "web-style" &&
      (allowedTypes.includes("all") || allowedTypes.includes("3d"))) {
      return true;
    }
    if (isPortalSource(source)) {
      const data = await source.fetchData();
      const [first] = data.items;
      const { dimensionality } = first;
      return ((allowedTypes.includes("3d:flat") && dimensionality === "flat") ||
        (allowedTypes.includes("3d:volumetric") && dimensionality === "volumetric"));
    }
    return ((allowedTypes.includes("3d:flat") && source.id == "basic-web-style:flat") ||
      (allowedTypes.includes("3d:volumetric") && source.id == "basic-web-style:volumetric"));
  };
}
function hasCIMType(types) {
  return Array.isArray(types) && types.some((type) => type.includes("cim"));
}
function normalizeAllowedTypes(type = "all") {
  const types = Array.isArray(type) ? type : [type];
  const hasRedundantCIMTypes = types.find((type) => type === "cim" && types.find((type) => type.includes("cim:")));
  if (hasRedundantCIMTypes) {
    return types.filter((type) => !type.includes("cim:"));
  }
  return types;
}
async function fetchSources(portal, before, after, strings, type) {
  const interceptorData = {};
  if (before) {
    await before(portal, interceptorData);
  }
  await portal.load();
  const processedSources = await (type === "2d" ? build2dSources(portal, strings) : build3dSources(portal, strings));
  if (after) {
    await after(portal, interceptorData);
  }
  return processedSources;
}
async function build2dSources(portal, strings) {
  const originalSymbolSetsGroupQuery = portal.symbolSetsGroupQuery;
  portal.symbolSetsGroupQuery = 'owner:esri AND title:"Map Viewer Beta Symbols"';
  const [classic, sources] = await Promise.all([
    fetchSymbolSetSymbolSources(portal, strings),
    fetchWebStyleSymbolSources(portal, "2d", strings)
  ]);
  const filterOutBasicTypes = (source) => source.keywords.every((type) => type !== "Basic");
  const processedSources = [
    getBasic(strings, "point"),
    getBasic(strings, "line"),
    getBasic(strings, "polygon"),
    ...classic.filter(filterOutBasicTypes),
    ...sources.filter(filterOutBasicTypes)
  ];
  portal.symbolSetsGroupQuery = originalSymbolSetsGroupQuery;
  return processedSources;
}
async function build3dSources(portal, strings) {
  const [sources] = await Promise.all([fetchWebStyleSymbolSources(portal, "3d", strings)]);
  const filterOutBasicTypes = (source) => source.keywords.every((type) => type !== "Basic");
  const processedSources = [
    getPrimitives("flat", strings),
    getPrimitives("volumetric", strings),
    ...sources.filter(filterOutBasicTypes)
  ];
  return processedSources;
}

const arcgisSymbolPickerCss = ".scroller.sc-arcgis-symbol-picker{max-height:var(--scroller-max-height, min(100vh - 400px, 300px));overflow-y:auto;min-width:200px;overflow-x:hidden;display:flex;justify-content:center}.sc-arcgis-symbol-picker-h,.arcgis-symbol-picker__container.sc-arcgis-symbol-picker{display:flex;flex:1 1 auto;flex-flow:column nowrap;align-items:stretch}.categories.sc-arcgis-symbol-picker{display:flex;align-content:normal}.categories-center-action.sc-arcgis-symbol-picker{padding:0 5px}.marker-selection.sc-arcgis-symbol-picker{padding:8px}.marker-source-select.sc-arcgis-symbol-picker{width:calc(100% - 74px);display:block}.marker-source-select[hidden].sc-arcgis-symbol-picker+.marker-selection.sc-arcgis-symbol-picker{border-top:1px solid lightgray;background-color:var(--arcgis-app-background)}.marker-selection--dark.sc-arcgis-symbol-picker{background-color:var(--arcgis-app-foreground);color:var(--arcgis-app-background)}.empty-category-content.sc-arcgis-symbol-picker{display:flex;align-items:center;padding:var(--arcgis-app-spacing-half) var(--arcgis-app-spacing-quarter)}.incompatible-symbols-notice.sc-arcgis-symbol-picker{margin:8px 0}.marker-item.sc-arcgis-symbol-picker{height:40px;width:38.5px;display:flex;justify-content:center;align-items:center;background-color:var(--arcgis-app-background)}.marker-item.sc-arcgis-symbol-picker [slot=thumbnail].sc-arcgis-symbol-picker>div.sc-arcgis-symbol-picker{margin:8px 10px;display:flex;justify-content:center;align-items:center}.item-palette.sc-arcgis-symbol-picker{width:100%;display:flex;flex-direction:column}.file-upload.sc-arcgis-symbol-picker{margin-top:20px;width:auto}";

const CSS = {
  container: "arcgis-symbol-picker__container",
  markerSymbolContent: "marker-symbol-content",
  incompatibleSymbolsNotice: "incompatible-symbols-notice",
  emptyCategoryContent: "empty-category-content",
  markerSelectionDropdown: "marker-source-select",
  markerSelection: "marker-selection",
  markerSelectionDark: "marker-selection--dark",
  scroller: "scroller",
  itemPalette: "item-palette",
  fileUpload: "file-upload",
  categories: "categories",
  categoriesCenterAction: "categories-center-action"
};
const ArcgisSymbolPicker = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisActiveSymbolChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisActiveSymbolChange", 7);
    this.arcgisActiveSymbolItemChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisActiveSymbolItemChange", 7);
    this.arcgisActiveSourceIdChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisActiveSourceIdChange", 7);
    this.arcgisSymbolSourcesChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSymbolSourcesChange", 7);
    this.arcgisActiveSourceItemsChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisActiveSourceItemsChange", 7);
    this.allCustomFileInfos = [];
    this.customSymbolsStorageId = "arcgis-symbol-picker-custom-symbols";
    this.actionEls = [];
    this._onSymbolSourceChange = (event) => {
      const dropdown = event.currentTarget;
      const { selectedItems } = dropdown;
      const mostRecentSelection = selectedItems.find((item) => item.getAttribute("data-value") !== this._activeSourceId);
      this._activeSourceId = (mostRecentSelection === null || mostRecentSelection === void 0 ? void 0 : mostRecentSelection.getAttribute("data-value")) || this._activeSourceId;
      dropdown
        .querySelectorAll("calcite-dropdown-item")
        .forEach((item) => {
        if (item !== mostRecentSelection) {
          item.selected = false;
        }
      });
      event.stopPropagation();
    };
    this.symbol = undefined;
    this.portal = undefined;
    this.symbolFilter = undefined;
    this.activeSourceId = undefined;
    this.activeSymbolItem = undefined;
    this.hideHeader = false;
    this.symbolType = "2d";
    this.customSymbolItemFilter = undefined;
    this.customSymbolSourceFilter = undefined;
    this.itemsPerRow = 4;
    this.symbolSources = undefined;
    this.activeSymbolItems = undefined;
    this.messages = undefined;
    this._activeSourceId = undefined;
    this._symbolSources = undefined;
    this._activeSymbolItems = undefined;
    this.customSymbolError = undefined;
    this.isGridView = true;
    this._activeSymbolFetch = undefined;
  }
  /**
   * Whenever the activeSource changes, we fetch
   * the new symbol items for that sources.
   */
  handleActiveSourceItemIdChanges() {
    if (this._activeSourceId) {
      this._activeSourceId === "custom-symbol-set"
        ? this._setupCustomSymbols()
        : this._fetchAndSetUpSymbolItems(this._symbolSources.find(({ id }) => id === this._activeSourceId));
    }
  }
  get editGeometry() {
    return (0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.h)(this.symbol);
  }
  handleFileUploadChange({ detail }) {
    const fileInfo = detail;
    const cimStr = fileInfo.cim && JSON.stringify(fileInfo.cim.toJSON());
    if (fileInfo.dataURL && fileInfo.dataURL.length > 200000) {
      this.customSymbolError = "too-large";
      return;
    }
    else if (fileInfo.cim && cimStr.length > 200000) {
      this.customSymbolError = "too-large";
      return;
    }
    else {
      this.customSymbolError = undefined;
    }
    const foundFileInfo = this.allCustomFileInfos.find((info) => (fileInfo.dataURL &&
      info.dataURL &&
      info.dataURL === fileInfo.dataURL &&
      info.fileName === fileInfo.fileName) ||
      (fileInfo.cim &&
        info.cim &&
        info.fileName === fileInfo.fileName &&
        cimStr === JSON.stringify(info.cim.toJSON())));
    try {
      let activeSymbolItem;
      if (!foundFileInfo) {
        const allCustomFileInfos = [...this.allCustomFileInfos, fileInfo];
        (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_3__.s)(this.customSymbolsStorageId, allCustomFileInfos.map((info) => info.dataURL ? info : Object.assign(Object.assign({}, info), { cim: JSON.stringify(info.cim.toJSON()) })), true);
        this.allCustomFileInfos = allCustomFileInfos;
        this._setupCustomSymbols();
        activeSymbolItem = this._activeSymbolItems[this._activeSymbolItems.length - 1];
      }
      else {
        activeSymbolItem = this._activeSymbolItems.find((symbolItem) => symbolItem.data.name === foundFileInfo.fileName);
      }
      // select active symbol
      this.activeSymbolItem = activeSymbolItem;
      this.arcgisActiveSymbolItemChange.emit(this.activeSymbolItem);
      this.activeSymbolItem
        .getSymbol()
        .then((symbol) => this.arcgisActiveSymbolChange.emit(symbol));
      setTimeout(() => requestAnimationFrame(() => {
        var _a;
        (_a = this.itemPaletteNode) === null || _a === void 0 ? void 0 : _a.setFocus();
        this.updateListSelection();
      }), 1);
    }
    catch (e) {
      // e.name === QuotaExceededError
      this.customSymbolError = "storage-full";
    }
  }
  handleInvalidFile() {
    this.customSymbolError = "invalid-file";
  }
  handleFileUploadError() {
    this.customSymbolError = "error";
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  _renderSymbolSourceOptions(sources, activeSourceId) {
    const { messages: mergedStrings } = this;
    const classic = sources.filter((source) => source.type === "symbol-set");
    const webStyles = sources.filter((source) => source.type === "web-style");
    const showCustomSymbols = !this.symbolFilter ||
      !!(Array.isArray(this.symbolFilter) ? this.symbolFilter : [this.symbolFilter]).find((type) => type === "custom" || type === "picture");
    const customGroup = this.symbolType !== "3d" &&
      this.editGeometry === "point" &&
      showCustomSymbols && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { groupTitle: mergedStrings.customSymbols, selectionMode: "multiple", key: "custom" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { key: "custom", "data-value": "custom-symbol-set", selected: "custom-symbol-set" === activeSourceId }, mergedStrings.symbols)));
    const classicGroup = classic.length > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { groupTitle: mergedStrings.classicSymbols, selectionMode: "multiple", key: "classic" }, this._renderSourceDropdownItem(classic, activeSourceId)));
    const webStyleGroup = webStyles.length > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { groupTitle: mergedStrings.newSymbols, selectionMode: "multiple", key: "webstyles" }, this._renderSourceDropdownItem(webStyles, activeSourceId)));
    if (customGroup) {
      if (classicGroup) {
        if (webStyleGroup) {
          return [customGroup, classicGroup, webStyleGroup];
        }
        else {
          return [customGroup, classicGroup];
        }
      }
      else {
        return [customGroup, webStyleGroup];
      }
    }
    else if (classicGroup && webStyleGroup) {
      return [classicGroup, webStyleGroup];
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { key: "one-group" }, this._renderSourceDropdownItem([...classic, ...webStyles], activeSourceId)));
  }
  _renderSourceDropdownItem(sources, activeSourceId) {
    return sources.map((source) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { key: source.id, "data-value": source.id, selected: source.id === activeSourceId }, source.title)));
  }
  _setupCustomSymbols() {
    const existingSymbolItems = this.allCustomFileInfos.map((info) => {
      let width = 24;
      let height = 24;
      if (info.width > info.height) {
        height = Math.round((width / info.width) * info.height);
      }
      else if (info.width < info.height) {
        width = Math.round((height / info.height) * info.width);
      }
      if (info.dataURL) {
        const type = info.fileName.split(".")[1].toLowerCase();
        const contentType = type === "png" ? "image/png" : type === "gif" ? "image/gif" : "image/jpeg";
        return new SymbolItem({
          data: {
            angle: 0,
            contentType,
            height,
            imageData: info.dataURL.split(",")[1],
            name: info.fileName,
            type: "esriPMS",
            url: info.fileName,
            width,
            xoffset: 0,
            yoffset: 0
          },
          parentData: null,
          portalItem: null,
          strategy: flatSymbolStrategy,
          strings: this.messages
        });
      }
      else {
        return new SymbolItem({
          data: {
            symbol: info.cim,
            name: info.fileName
          },
          parentData: { cimVersion: "2.6.0" },
          portalItem: null,
          strategy: webStyleCustomSymbolStrategy(),
          strings: this.messages
        });
      }
    });
    this.setUpSymbolIntersectionObserver();
    this.customSymbolError = undefined;
    this._activeSymbolFetch = null;
    this._activeSymbolItems = existingSymbolItems;
    //if (this._activeSourceId !== "custom-symbol-set") {
    this.arcgisActiveSourceIdChange.emit("custom-symbol-set");
    //}
    this.arcgisActiveSourceItemsChange.emit(existingSymbolItems.map((item) => new SymbolItem(Object.assign({}, item))));
  }
  async _fetchAndSetUpSymbolItems(source) {
    if (this._activeSymbolFetch) {
      this._activeSymbolFetch.controller.abort();
    }
    const controller = new AbortController();
    const signal = controller.signal;
    this._activeSymbolFetch = {
      controller,
      id: source.id
    };
    // When loading for the first time, we check if there are some symbolItems passed
    // to the props and we trust it's the correct one for the current activeSymbolSource
    const symbolItems = (!this._activeSymbolItems && this.activeSymbolItems) || (await source.getItems(controller));
    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
      return;
    }
    const filteredSymbolItems = await filterSymbolItems(source, symbolItems, this.symbolFilter, this.editGeometry, this.symbolType, this.customSymbolItemFilter);
    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
      return;
    }
    this.setUpSymbolIntersectionObserver();
    this.customSymbolError = undefined;
    this._activeSymbolFetch = null;
    this._activeSymbolItems = filteredSymbolItems;
    this.arcgisActiveSourceIdChange.emit(this._activeSourceId);
    this.arcgisActiveSourceItemsChange.emit(filteredSymbolItems.map((item) => new SymbolItem(Object.assign({}, item))));
  }
  onIncompatibleVectorSymbolsDismiss(event) {
    (0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_2__.s)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_2__.l.ARCGIS_COMPONENT_NOTIFICATIONS, {
      key: _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_2__.a.INCOMPATIBLE_VECTOR_SYMBOLS_DISMISSED,
      value: "true"
    });
    event.stopPropagation();
  }
  tearDownSymbolIntersectionObserver() {
    var _a;
    (_a = this._symbolIntersectionObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    this._symbolIntersectionObserver = null;
  }
  setUpSymbolIntersectionObserver() {
    this.tearDownSymbolIntersectionObserver();
    let nowServingIndex = 0;
    const pendingAppends = {};
    this._symbolIntersectionObserver = new IntersectionObserver((entries, observer) => {
      function next() {
        nowServingIndex++;
        if (pendingAppends[nowServingIndex]) {
          pendingAppends[nowServingIndex]();
          delete pendingAppends[nowServingIndex];
          next();
        }
      }
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          return;
        }
        const node = entry.target;
        node.item.getThumbnail(node).then((appendThumbnail) => {
          if (node.index === nowServingIndex) {
            appendThumbnail();
            next();
          }
          else {
            pendingAppends[node.index] = appendThumbnail;
          }
        });
        node.item.getSymbol();
        observer.unobserve(node);
      });
    });
  }
  async _fetchSources() {
    if (this._sourcesFetchController) {
      this._sourcesFetchController.abort();
    }
    this._sourcesFetchController = new AbortController();
    const signal = this._sourcesFetchController.signal;
    const portal = this.portal;
    const effectivePortal = isInterceptor(portal) ? portal.portal : portal;
    const beforeInterceptor = isInterceptor(portal) ? portal.before : null;
    const afterInterceptor = isInterceptor(portal) ? portal.after : null;
    const symbolSources = effectivePortal
      ? this.symbolSources ||
        (await fetchSources(effectivePortal, beforeInterceptor, afterInterceptor, this.messages, this.symbolType))
      : [];
    if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
      return;
    }
    this._symbolSources = await filterSources(symbolSources, this.symbolFilter, (0,_color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.h)(this.symbol), this.symbolType, this.customSymbolSourceFilter);
    this.arcgisSymbolSourcesChange.emit(this._symbolSources);
    if (!this._activeSourceId) {
      let activeSourceId = this.activeSourceId;
      if (activeSourceId) {
        const activeSource = this._symbolSources.find((source) => source.id === this.activeSourceId);
        if (!activeSource) {
          // maybe different symbol geometry type now; can't re-use last source
          activeSourceId = undefined;
        }
      }
      this._activeSourceId = activeSourceId || this._symbolSources[0].id;
    }
  }
  _getCustomSymbolsFromStorage() {
    if (this.symbolType === "3d" || this.editGeometry !== "point") {
      return;
    }
    const fileInfos = (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.customSymbolsStorageId, true);
    if (fileInfos) {
      this.allCustomFileInfos = fileInfos.map((info) => info.dataURL ? info : Object.assign(Object.assign({}, info), { cim: _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.CIMSymbol.fromJSON(JSON.parse(info.cim)) }));
    }
  }
  _renderSourceSelection() {
    const { messages: mergedStrings } = this;
    const sources = this._symbolSources;
    if (!sources) {
      return;
    }
    const activeSource = this._symbolSources.find((source) => source.id === this._activeSourceId);
    const activeSourceTitle = this._activeSourceId === "custom-symbol-set"
      ? mergedStrings.customSymbols
      : activeSource === null || activeSource === void 0 ? void 0 : activeSource.title;
    const hasSingleSource = sources.length === 1;
    const dropdown = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { class: {
        [CSS.markerSelectionDropdown]: true
      }, hidden: hasSingleSource, maxItems: 7, onCalciteDropdownSelect: this._onSymbolSourceChange, overlayPositioning: "absolute" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "space-between", appearance: "outline-fill", kind: "neutral", iconEnd: "chevron-down", scale: "m", slot: "trigger", width: "full" }, activeSourceTitle), this._renderSymbolSourceOptions(sources, this._activeSourceId)));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section", key: "header" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "section" }, !this.hideHeader ? this.messages.category : null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.categories }, dropdown, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { active: this.isGridView, appearance: "transparent", icon: "grid", scale: "s", class: CSS.categoriesCenterAction, text: this.messages.gridView, onClick: () => {
        this.isGridView = true;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.el);
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { active: !this.isGridView, appearance: "transparent", icon: "list", iconFlipRtl: true, scale: "s", text: this.messages.listView, onClick: () => {
        this.isGridView = false;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.el);
      } })))));
  }
  _renderItemSelection() {
    const { portal, messages: mergedStrings } = this;
    const fetchingSymbolItems = this._activeSymbolFetch;
    const effectivePortal = isInterceptor(portal) ? portal.portal : portal;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        [CSS.scroller]: true,
        [CSS.markerSelection]: true
      }, key: "gallery" }, fetchingSymbolItems ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: "" })) : this._activeSymbolItems.length === 0 && this._activeSourceId === "custom-symbol-set" ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-picker-file-upload", { portal: effectivePortal, strings: mergedStrings })) : this._activeSymbolItems.length > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.itemPalette, key: this._activeSymbolItems.length }, this.isGridView ? this._renderGridView() : this._renderListView(), this._activeSourceId === "custom-symbol-set" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-symbol-picker-file-upload", { class: CSS.fileUpload, portal: effectivePortal, strings: mergedStrings })))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.emptyCategoryContent }, this.messages.noSymbolsAvailable))));
  }
  _renderGridView() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-palette", { key: this._activeSourceId, items: this._activeSymbolItems.map((item, index) => ({
        item,
        index,
        observer: this._symbolIntersectionObserver
      })), ItemRenderer: MarkerItem, itemsPerRow: this.itemsPerRow, selected: ({ item }) => { var _a; return (item === null || item === void 0 ? void 0 : item.data) === ((_a = this.activeSymbolItem) === null || _a === void 0 ? void 0 : _a.data); }, onArcgisItemSelect: (event) => {
        const { detail: { item } } = event;
        this.customSymbolError = undefined;
        // This is just for the UI to remember which element is selected
        this.arcgisActiveSymbolItemChange.emit(item);
        this.activeSymbolItem = item;
        // Send back the actual symbol:
        item
          .getSymbol()
          .then((symbol) => this.arcgisActiveSymbolChange.emit(symbol));
        event.stopPropagation();
      }, ref: (node) => (this.itemPaletteNode = node) }));
  }
  _renderListView() {
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.el) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { key: this._activeSourceId }, this._activeSymbolItems.map((item, index) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: index, label: item.data.title || item.data.name, value: index, selected: ((_a = this.activeSymbolItem) === null || _a === void 0 ? void 0 : _a.data.name) === item.data.name, onCalciteListItemSelect: (event) => {
          const node = event.target;
          const selectedItem = this._activeSymbolItems[node.value];
          this.customSymbolError = undefined;
          // This is just for the UI to remember which element is selected
          this.arcgisActiveSymbolItemChange.emit(selectedItem);
          this.activeSymbolItem = selectedItem;
          // Send back the actual symbol:
          selectedItem
            .getSymbol()
            .then((symbol) => this.arcgisActiveSymbolChange.emit(symbol));
          event.stopPropagation();
        } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-start", key: item.data.name, ref: (divNode) => {
          if (divNode) {
            item.getThumbnail(divNode).then((appendThumbnail) => appendThumbnail());
            item.getSymbol();
          }
        } }), this._activeSourceId === "custom-symbol-set" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", appearance: "transparent", text: this.messages.removeSymbol, ref: (node) => {
          if (node) {
            this.actionEls[index] = node;
          }
        }, onClick: () => {
          this.removeCustomSymbol(index);
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.el);
        }, onMouseOver: () => this.addTooltip({
          referenceElement: this.actionEls[index],
          placement: isRtl ? "right-start" : "left-start",
          innerHTML: this.messages.removeSymbol
        }), onMouseOut: () => this.removeTooltip() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" })))));
    })));
  }
  updateListSelection() {
    console.log("updateListSelection");
    this.el
      .querySelectorAll("CALCITE-LIST-ITEM")
      .forEach((listItem) => {
      listItem.selected = listItem.value === this.activeSymbolItem.data.name;
      if (listItem.selected) {
        listItem.setFocus();
      }
    });
  }
  removeCustomSymbol(index) {
    this.allCustomFileInfos.splice(index, 1);
    (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_3__.s)(this.customSymbolsStorageId, this.allCustomFileInfos.map((info) => info.dataURL ? info : Object.assign(Object.assign({}, info), { cim: JSON.stringify(info.cim.toJSON()) })), true);
    this._setupCustomSymbols();
    this.activeSymbolItem = undefined;
  }
  addTooltip(props) {
    this.removeTooltip();
    this.tooltipEl = document.createElement("calcite-tooltip");
    this.tooltipEl.placement = props.placement || "auto";
    this.tooltipEl.referenceElement = props.referenceElement;
    this.tooltipEl.overlayPositioning = "fixed";
    this.tooltipEl.innerHTML = props.innerHTML;
    this.tooltipEl.open = true;
    // it won't show if just added to this.el
    this.el.parentElement.appendChild(this.tooltipEl);
  }
  removeTooltip() {
    var _a;
    if ((_a = this.tooltipEl) === null || _a === void 0 ? void 0 : _a.parentNode) {
      this.tooltipEl.parentNode.removeChild(this.tooltipEl);
      this.tooltipEl = undefined;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const [, [strings]] = await Promise.all([
      _color_776689e9_js__WEBPACK_IMPORTED_MODULE_1__.e.load(),
      (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.el)
    ]);
    this.messages = strings;
  }
  componentDidLoad() {
    if (!this._symbolSources) {
      this._fetchSources();
    }
    this._getCustomSymbolsFromStorage();
  }
  connectedCallback() {
    var _a, _b;
    this.setUpSymbolIntersectionObserver();
    (_a = this._activeSymbolFetch) === null || _a === void 0 ? void 0 : _a.controller.abort();
    (_b = this._sourcesFetchController) === null || _b === void 0 ? void 0 : _b.abort();
  }
  disconnectedCallback() {
    this.tearDownSymbolIntersectionObserver();
  }
  render() {
    const sources = this._symbolSources;
    const fetchingSymbolItems = this._activeSymbolFetch;
    if (!sources || fetchingSymbolItems) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.container }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: "" })));
    }
    const activeSourceIsSMS = this._activeSourceId === "basic-symbol-set" || this._activeSourceId === "custom-symbol-set";
    const activeSource = this._symbolSources.find((source) => source.id === this._activeSourceId);
    const modernSymbolCategorySelected = !activeSourceIsSMS && (activeSource === null || activeSource === void 0 ? void 0 : activeSource.type) !== "symbol-set";
    const adobeSymbolCategorySelected = activeSource === null || activeSource === void 0 ? void 0 : activeSource.keywords.includes("Adobe");
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.container }, this._renderSourceSelection(), this._renderItemSelection(), adobeSymbolCategorySelected ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { open: true, kind: "danger", key: "copyright", scale: "s" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message", innerHTML: this.messages.adobeCopyright.replace("${year}", "2022") }))) : null, modernSymbolCategorySelected &&
      this.symbolType !== "3d" &&
      !(0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_2__.g)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_2__.l.ARCGIS_COMPONENT_NOTIFICATIONS, _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_2__.a.INCOMPATIBLE_VECTOR_SYMBOLS_DISMISSED) ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { open: true, class: CSS.incompatibleSymbolsNotice, closable: true, icon: true, key: "incompatible-symbols", onCalciteNoticeClose: this.onIncompatibleVectorSymbolsDismiss, scale: "s" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.messages.incompatibleSymbolWarning))) : null, this.customSymbolError ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { open: true, class: CSS.incompatibleSymbolsNotice, closable: true, icon: "exclamation-mark-circle", kind: "danger", key: "large-symbol", onCalciteNoticeClose: () => (this.customSymbolError = undefined), scale: "s" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.customSymbolError === "too-large"
      ? this.messages.customSymbolErrors.tooLarge
      : this.customSymbolError === "invalid-file"
        ? this.messages.customSymbolErrors.invalidFile
        : this.customSymbolError === "storage-full"
          ? this.messages.customSymbolErrors.outOfSpace
          : this.customSymbolError === "error"
            ? this.messages.customSymbolErrors.error
            : undefined))) : null));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "_activeSourceId": ["handleActiveSourceItemIdChanges"]
  }; }
};
ArcgisSymbolPicker.style = arcgisSymbolPickerCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arcgisComponentNotificationsKeys),
/* harmony export */   g: () => (/* binding */ getSingleObjectLocalStorage),
/* harmony export */   l: () => (/* binding */ localStorageKeys),
/* harmony export */   s: () => (/* binding */ setSingleObjectLocalStorage)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
var localStorageKeys;
(function (localStorageKeys) {
  localStorageKeys["ARCGIS_COMPONENT_NOTIFICATIONS"] = "arcgisComponent_notifications";
})(localStorageKeys || (localStorageKeys = {}));
var arcgisComponentNotificationsKeys;
(function (arcgisComponentNotificationsKeys) {
  arcgisComponentNotificationsKeys["FEATURE_REDUCTION_WARNING_DISMISSED"] = "arcgis_feature_reduction_warning_dismissed";
  arcgisComponentNotificationsKeys["POPUP_WARNING_DISMISSED"] = "arcgis_popup_warning_dismissed";
  arcgisComponentNotificationsKeys["INCOMPATIBLE_VECTOR_SYMBOLS_DISMISSED"] = "arcgis_symbol_styler_incompatible_vector_symbols_dismissed";
  arcgisComponentNotificationsKeys["EFFECTS_TIP_DISMISSED"] = "arcgis_effects_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_DEFINITION_DISMISSED"] = "arcgis_layer_view_definition_dismissed";
  arcgisComponentNotificationsKeys["LAYER_OVERRIDE_STATUS_TIP_DISMISSED"] = "arcgis_layer_override_status_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_JOIN_TIP_DISMISSED"] = "arcgis_layer_view_join_tip_dismissed";
  arcgisComponentNotificationsKeys["MULTIDIMENSIONAL_INFO_TIP_DISMISSED"] = "arcgis_multidimensional_info_tip_dismissed";
})(arcgisComponentNotificationsKeys || (arcgisComponentNotificationsKeys = {}));
const getLocalStorage = (localStorageKey) => {
  return localStorage.getItem(localStorageKey);
};
const setLocalStorage = (localStorageKey, value) => {
  localStorage.setItem(localStorageKey, value);
};
const getObjectLocalStorage = (localStorageKey) => {
  return JSON.parse(getLocalStorage(localStorageKey)) || {};
};
const setSingleObjectLocalStorage = (localStorageKey, keyValueObject) => {
  const setLocalStorageVal = getObjectLocalStorage(localStorageKey);
  setLocalStorageVal[keyValueObject.key] = keyValueObject.value;
  setLocalStorage(localStorageKey, JSON.stringify(setLocalStorageVal));
};
const getSingleObjectLocalStorage = (localStorageKey, objectKey) => {
  const getLocalStorageVal = getObjectLocalStorage(localStorageKey);
  if (getLocalStorageVal === null || getLocalStorageVal === void 0 ? void 0 : getLocalStorageVal.hasOwnProperty(objectKey)) {
    return getLocalStorageVal[objectKey];
  }
  else {
    return null;
  }
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getCookie),
/* harmony export */   b: () => (/* binding */ setCookie),
/* harmony export */   c: () => (/* binding */ setSessionStorageItem),
/* harmony export */   d: () => (/* binding */ getSessionStorageItem),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
  writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
  const cookie = readCookie(name);
  return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
  window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
  const item = window.localStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
  window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
  const item = window.sessionStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
  const cookie = document.cookie;
  const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
  const matchedCookies = cookie.match(cookieNameRE);
  return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
  properties = properties || {};
  let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
  if (typeof expires === "number") {
    const expirationDate = new Date();
    const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
    expirationDate.setTime(Date.now() + daysFromTodayInMs);
    expires = properties.expires = expirationDate;
  }
  if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
    properties.expires = expires.toUTCString();
  }
  let cookie = `${name}=${encodeURIComponent(value)}`;
  let property;
  for (property in properties) {
    cookie += `; ${property}`;
    const propertyValue = properties[property];
    if (propertyValue !== true) {
      cookie += `=${propertyValue}`;
    }
  }
  document.cookie = cookie;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,