"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_url-f3-d47063"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ agsServerMap),
/* harmony export */   i: () => (/* binding */ isAGS)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
const agsServerMap = {
  FeatureServer: "Feature Service",
  GeocodeServer: "Geocoding Service",
  GeoDataServer: "Geodata Service",
  GeometryServer: "Geometry Service",
  GeoenrichmentServer: "Geoenrichment Service",
  GPServer: "Geoprocessing Service",
  GlobeServer: "Globe Service",
  ImageServer: "Image Service",
  MapServer: "Map Service",
  NAServer: "Network Analysis Service",
  ElevationServer: "Image Service",
  VectorTileServer: "Vector Tile Service",
  SceneServer: "Scene Service",
  StreamServer: "Stream Service",
  WMServer: "Workflow Manager Service",
  TiledImageServer: "Image Service",
  VideoServer: "Video Service"
};
const isAGS = (type) => !!Object.values(agsServerMap).includes(type);




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getCookie),
/* harmony export */   b: () => (/* binding */ setCookie),
/* harmony export */   c: () => (/* binding */ setSessionStorageItem),
/* harmony export */   d: () => (/* binding */ getSessionStorageItem),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
  writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
  const cookie = readCookie(name);
  return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
  window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
  const item = window.localStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
  window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
  const item = window.sessionStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
  const cookie = document.cookie;
  const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
  const matchedCookies = cookie.match(cookieNameRE);
  return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
  properties = properties || {};
  let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
  if (typeof expires === "number") {
    const expirationDate = new Date();
    const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
    expirationDate.setTime(Date.now() + daysFromTodayInMs);
    expires = properties.expires = expirationDate;
  }
  if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
    properties.expires = expires.toUTCString();
  }
  let cookie = `${name}=${encodeURIComponent(value)}`;
  let property;
  for (property in properties) {
    cookie += `; ${property}`;
    const propertyValue = properties[property];
    if (propertyValue !== true) {
      cookie += `=${propertyValue}`;
    }
  }
  document.cookie = cookie;
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-f3b82cc7.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-f3b82cc7.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isHostedService),
/* harmony export */   b: () => (/* binding */ supportsHttps),
/* harmony export */   c: () => (/* binding */ urlToObject),
/* harmony export */   d: () => (/* binding */ formatGISUrl),
/* harmony export */   e: () => (/* binding */ checkProtocol),
/* harmony export */   f: () => (/* binding */ formatUrl),
/* harmony export */   g: () => (/* binding */ getUrlType),
/* harmony export */   i: () => (/* binding */ isHttp),
/* harmony export */   r: () => (/* binding */ removeTrailingSlash),
/* harmony export */   s: () => (/* binding */ supportsDirect),
/* harmony export */   u: () => (/* binding */ urlToTitle)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage-d7f5822e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js");
/* harmony import */ var _ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ags-68d4ae20.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-68d4ae20.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */







function removeTrailingSlash(url) {
  if ((url === null || url === void 0 ? void 0 : url.slice(-1)) === "/") {
    // Remove the "/" from the end of the url
    return url.slice(0, url.length - 1);
  }
  return url;
}
// borrowed from arcgisonline.sharing.util
async function urlToObject(url) {
  var _a;
  const apiVersion = (_a = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.api) !== null && _a !== void 0 ? _a : 4;
  const [urlUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([apiVersion === 4 ? "esri/core/urlUtils" : "esri/urlUtils"]);
  let urlObj = urlUtils.urlToObject(url);
  urlObj.query = urlObj.query || {};
  for (let key in urlObj.query || {}) {
    if (urlObj.query.hasOwnProperty(key)) {
      // strip out some HTML (<,>,%3C,%3E,&lt;,&gt;)
      if (!Array.isArray(urlObj.query[key])) {
        urlObj.query[key] = urlObj.query[key].replace(/(&lt;|&gt;|<|>|%3C|%3E)/g, "");
      }
    }
  }
  return urlObj;
}
function urlToTitle(url) {
  return (url === null || url === void 0 ? void 0 : url.replace(/^.*\//, "").replace(/.[^.]*$/, "")) || "";
}
function supportsDirect(type) {
  // TODO: Set mapped AGSTypes to UrlType, then re-enable here
  const direct = ["WFS", "GeoJson", "CSV", "GeoRSS", "KML", "OGCFeatureServer", "WMS", "WMTS"];
  return direct.includes(type);
}
function supportsHttps(url) {
  const { config, portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
  let supportsHttps = false;
  if (!url) {
    return false;
  }
  (config.httpsDomains || []).forEach((domain) => {
    if (url.indexOf(`.${domain}/`) > -1 || url.indexOf(`/${domain}/`) > -1) {
      supportsHttps = true;
    }
  });
  if (!supportsHttps) {
    let portalHostname = portal.portalHostname;
    if (portalHostname.indexOf("/") > -1) {
      portalHostname = portalHostname.substring(0, portalHostname.indexOf("/"));
    }
    if (url.indexOf(portalHostname) > -1) {
      supportsHttps = true;
    }
  }
  return supportsHttps;
}
function isHostedService(url) {
  if (!url) {
    return false;
  }
  const { config, portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
  const restBaseUrl = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
  const hostname = new URL(restBaseUrl).hostname;
  const isSingleTenant = false === config.isMultiTenant;
  // only consider locally hosted if the restBaseUrl is on same domain as url
  // and esriGeowConfig.self.supportsHostedServices flag is enabled
  const isAGOL = url.indexOf(".arcgis.com/") !== -1;
  const isHostedServer = url.indexOf("//services") !== -1 ||
    url.indexOf("//tiles") !== -1 ||
    url.indexOf("//features") !== -1 ||
    url.indexOf("//locationservices") !== -1;
  const isLocallyHosted = portal.supportsHostedServices && url.indexOf(hostname) !== -1 && !isSingleTenant;
  return (isAGOL && isHostedServer) || (!isAGOL && isLocallyHosted);
}
function checkProtocol() {
  var _a;
  // For portal case, if adding a secure proxy, and page is http
  // we need to reload on https - IWS invalid case
  const protocol = window.location.protocol;
  if (protocol.toLowerCase().indexOf("https") === -1) {
    const cookie = (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_4__.a)("esri_auth", true);
    if (((_a = cookie === null || cookie === void 0 ? void 0 : cookie.auth_tier) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "web") {
      return false;
    }
    else {
      return true;
    }
  }
  else {
    return true;
  }
}
function formatGISUrl(url) {
  /*
     User  entered :
     http://sampleserver3.arcgisonline.com
     Software completes to :
     http://sampleserver3.arcgisonline.com/arcgis/rest/services

     User  entered :
     http://sampleserver3.arcgisonline.com/arcgis
     Software completes to:
     http://sampleserver3.arcgisonline.com/arcgis/rest/services

     User  entered :
     http://sampleserver3.arcgisonline.com/arcgis/rest/services
     Software completes to:
     http://sampleserver3.arcgisonline.com/arcgis/rest/services

     User entered a url to a folder in a server :
     http://sampleserver3.arcgisonline.com/arcgis/rest/services/petro
     Software completes to:
     http://sampleserver3.arcgisonline.com/arcgis/rest/services/petro

     User entered a url to a folder in a server :
     http://sampleserver3.arcgisonline.com/arcgis/rest/services/water/MapServer
     Software completes to:
     http://sampleserver3.arcgisonline.com/arcgis/rest/services/water/MapServer
     */
  let u = url.toLowerCase();
  // add http:// if it's missing
  if (u.indexOf("http://") == -1 && u.indexOf("https://") == -1) {
    url = "https://" + url;
    u = url.toLowerCase();
  }
  // find path part of URL
  let pathPos = u.indexOf("//");
  pathPos = u.indexOf("/", pathPos + 2);
  // just domain?
  if (pathPos == -1) {
    url += "/arcgis/rest/services";
    u = url.toLowerCase();
  }
  else if (pathPos == u.length - 1) {
    url += "arcgis/rest/services";
    u = url.toLowerCase();
  }
  // just arcgis path?
  let p0 = u.indexOf("/arcgis", pathPos);
  if (p0 == u.length - 7) {
    url += "/rest/services";
    u = url.toLowerCase();
  }
  else if (p0 == u.length - 8) {
    url += "rest/services";
    u = url.toLowerCase();
  }
  // just server path? (WebAdaptor)
  p0 = u.indexOf("/server", pathPos);
  if (u.endsWith("/server")) {
    url += "/rest/services";
    u = url.toLowerCase();
  }
  else if (u.endsWith("/server/")) {
    url += "rest/services";
    u = url.toLowerCase();
  }
  // replace SOAP end point or short REST end point with REST end point
  const p1 = u.indexOf("/rest/services", pathPos);
  const p2 = u.indexOf("/services", pathPos);
  const p3 = u.indexOf("/rest", pathPos);
  if (p1 == -1 && p2 > -1) {
    url = `${url.substring(0, p2)}/rest/services${url.substring(p2 + 9)}`;
    u = url.toLowerCase();
  }
  else if (p1 == -1 && p3 > -1) {
    url = `${url.substring(0, p3)}/rest/services${url.substring(p3 + 5)}`;
    u = url.toLowerCase();
  }
  // is it a REST end point?
  if (u.indexOf("/rest/services") == -1) ;
  return url;
}
const formatUrl = (url, allSSL = false) => {
  const protocolRegex = /(http|https|ftp):\/\/?/;
  url = removeTrailingSlash(url);
  if (!protocolRegex.exec(url)) {
    url = `https://${url}`;
  }
  if ((allSSL || location.protocol === "https:") && (isHostedService(url) || supportsHttps(url))) {
    url = url.replace("http:/", "https:/");
  }
  // Filter out dynamicLayer
  url = url.indexOf("/dynamicLayer?") > -1 ? url.substring(0, url.indexOf("/dynamicLayer?")) : url;
  return url;
};
/** Get type based on input url and also returns a fix if url is malformed
 */
const getUrlType = (url, isPortal = false) => {
  var _a, _b, _c;
  if (!url) {
    return { error: { code: "invalidUrl" } };
  }
  if (isHttp(url, isPortal)) {
    return { error: { code: "httpWarning" } };
  }
  const decodedUrl = decodeURIComponent(url);
  const kmlType = decodedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\.|\/)*(kml|kmz))/gi);
  const ogcType = decodedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\/|\=)(wmts|wms|wfs))/gi);
  const ogcFeatureType = decodedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\/|\=)(OGC|OGCFeatureServer))/gi);
  const rssType = decodedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\.|\/)*(rss))/gi);
  const serverType = (_a = decodedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.u)) === null || _a === void 0 ? void 0 : _a[1];
  const containsAGS = decodedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.r);
  const csvType = decodedUrl.replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\.|\/)*(csv))/gi);
  const tileLayerType = decodedUrl
    .replace(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.v, "")
    .match(/(\.|\/)((\$?{(z|level)})\/*(\$?{(x|col)})\/*(\$?{(y|row)}))/gi);
  let type = null;
  if (decodedUrl.match(_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_1__.q)) {
    type = "GeoJson";
  }
  else if (ogcFeatureType && !ogcType && !serverType) {
    type = "OGCFeatureServer";
  }
  else if (serverType && !ogcType) {
    type = _ags_68d4ae20_js__WEBPACK_IMPORTED_MODULE_5__.a[serverType];
  }
  else if (containsAGS) {
    // Assume URLS with /ags/ and no specified server are Map Services
    type = "Map Service";
  }
  else if (ogcType) {
    const symbol = (ogcType === null || ogcType === void 0 ? void 0 : ogcType[0].charAt(0)) === "/" ? "/" : "=";
    type = (_c = (_b = ogcType === null || ogcType === void 0 ? void 0 : ogcType[0]) === null || _b === void 0 ? void 0 : _b.split(symbol)[1]) === null || _c === void 0 ? void 0 : _c.toUpperCase();
  }
  else if (kmlType) {
    type = "KML";
  }
  else if (rssType) {
    type = "GeoRSS";
  }
  else if (csvType) {
    type = "CSV";
  }
  else if (tileLayerType) {
    type = "Tile Layer";
  }
  return { result: type };
};
/**
 * Checks if url includes http://
 * Not applicable to enterprise
 */
const isHttp = (url, isPortal) => {
  return !isPortal && url.includes("http://");
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fdXJsLWYzLWQ0NzA2My5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pCekM7QUFDQTtBQUNBO0FBQ0E7QUFDNkQ7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxHQUFHLDBEQUFZLE9BQU8sS0FBSztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsS0FBSyxHQUFHLDBCQUEwQjtBQUNwRDtBQUNBO0FBQ0EsaUJBQWlCLEVBQUUsU0FBUztBQUM1QjtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRXNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0R0SjtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUMwRTtBQUM3RTtBQUNLO0FBQ047QUFDRDs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0RBQVcsYUFBYSxrREFBVyx1QkFBdUIsa0RBQVc7QUFDaEcsMkJBQTJCLDJEQUFXO0FBQ3RDO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQSw4Q0FBOEMsS0FBSztBQUNuRDtBQUNBLDREQUE0RCxLQUFLO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlCQUFpQixFQUFFLGtEQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTyw0QkFBNEIsT0FBTztBQUNsRTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCLEVBQUUsa0RBQVc7QUFDeEMsc0JBQXNCLHNEQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1REFBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEscUJBQXFCLGdCQUFnQixzQkFBc0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsYUFBYSxxQkFBcUIsZ0JBQWdCLHNCQUFzQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLHFDQUFxQyxzREFBMEI7QUFDL0QscUNBQXFDLHNEQUEwQjtBQUMvRCw0Q0FBNEMsc0RBQTBCO0FBQ3RFLHFDQUFxQyxzREFBMEI7QUFDL0QsOENBQThDLHNEQUEwQixZQUFZLHNEQUFlO0FBQ25HLHlDQUF5QyxzREFBMEIsWUFBWSxzREFBUztBQUN4RixxQ0FBcUMsc0RBQTBCO0FBQy9EO0FBQ0EsYUFBYSxzREFBMEI7QUFDdkMseUJBQXlCLFVBQVUsU0FBUyxRQUFRLFNBQVMsUUFBUTtBQUNyRTtBQUNBLHVCQUF1QixzREFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLCtDQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUyTiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2Fncy02OGQ0YWUyMC5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9zdG9yYWdlLWQ3ZjU4MjJlLmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL3VybC1mM2I4MmNjNy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmNvbnN0IGFnc1NlcnZlck1hcCA9IHtcbiAgRmVhdHVyZVNlcnZlcjogXCJGZWF0dXJlIFNlcnZpY2VcIixcbiAgR2VvY29kZVNlcnZlcjogXCJHZW9jb2RpbmcgU2VydmljZVwiLFxuICBHZW9EYXRhU2VydmVyOiBcIkdlb2RhdGEgU2VydmljZVwiLFxuICBHZW9tZXRyeVNlcnZlcjogXCJHZW9tZXRyeSBTZXJ2aWNlXCIsXG4gIEdlb2VucmljaG1lbnRTZXJ2ZXI6IFwiR2VvZW5yaWNobWVudCBTZXJ2aWNlXCIsXG4gIEdQU2VydmVyOiBcIkdlb3Byb2Nlc3NpbmcgU2VydmljZVwiLFxuICBHbG9iZVNlcnZlcjogXCJHbG9iZSBTZXJ2aWNlXCIsXG4gIEltYWdlU2VydmVyOiBcIkltYWdlIFNlcnZpY2VcIixcbiAgTWFwU2VydmVyOiBcIk1hcCBTZXJ2aWNlXCIsXG4gIE5BU2VydmVyOiBcIk5ldHdvcmsgQW5hbHlzaXMgU2VydmljZVwiLFxuICBFbGV2YXRpb25TZXJ2ZXI6IFwiSW1hZ2UgU2VydmljZVwiLFxuICBWZWN0b3JUaWxlU2VydmVyOiBcIlZlY3RvciBUaWxlIFNlcnZpY2VcIixcbiAgU2NlbmVTZXJ2ZXI6IFwiU2NlbmUgU2VydmljZVwiLFxuICBTdHJlYW1TZXJ2ZXI6IFwiU3RyZWFtIFNlcnZpY2VcIixcbiAgV01TZXJ2ZXI6IFwiV29ya2Zsb3cgTWFuYWdlciBTZXJ2aWNlXCIsXG4gIFRpbGVkSW1hZ2VTZXJ2ZXI6IFwiSW1hZ2UgU2VydmljZVwiLFxuICBWaWRlb1NlcnZlcjogXCJWaWRlbyBTZXJ2aWNlXCJcbn07XG5jb25zdCBpc0FHUyA9ICh0eXBlKSA9PiAhIU9iamVjdC52YWx1ZXMoYWdzU2VydmVyTWFwKS5pbmNsdWRlcyh0eXBlKTtcblxuZXhwb3J0IHsgYWdzU2VydmVyTWFwIGFzIGEsIGlzQUdTIGFzIGkgfTtcbiIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHYzLjAuOTlcbiAqL1xuaW1wb3J0IHsgZSBhcyBlc2NhcGVSZWdFeHAgfSBmcm9tICcuL2Z1bmN0aW9uYWwtYzgyZjVhYjkuanMnO1xuXG4vLyBpbXBvcnQgc3RyaW5nVXRpbCBmcm9tIFwiLi9zdHJpbmdzXCI7XG4vKipcbiAqIFV0aWxpdHkgbWV0aG9kcyBmb3IgZGVhbGluZyB3aXRoIHN0b3JhZ2Ugb2YgdmFyaW91cyBmb3JtcyAoY29va2llcywgbG9jYWwgc3RvcmFnZSwgYW5kIHNlc3Npb24gc3RvcmFnZSkuXG4gKi9cbmZ1bmN0aW9uIHNldENvb2tpZShuYW1lLCBjb29raWUsIHByb3BlcnRpZXMsIHN0cmluZ2lmeSkge1xuICB3cml0ZUNvb2tpZShuYW1lLCBzdHJpbmdpZnkgPyBKU09OLnN0cmluZ2lmeShjb29raWUpIDogY29va2llLCBwcm9wZXJ0aWVzKTtcbn1cbmZ1bmN0aW9uIGdldENvb2tpZShuYW1lLCBwYXJzZSkge1xuICBjb25zdCBjb29raWUgPSByZWFkQ29va2llKG5hbWUpO1xuICByZXR1cm4gY29va2llICYmIHBhcnNlID8gSlNPTi5wYXJzZShjb29raWUpIDogY29va2llO1xufVxuZnVuY3Rpb24gc2V0TG9jYWxTdG9yYWdlSXRlbShuYW1lLCBpdGVtLCBzdHJpbmdpZnkpIHtcbiAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKG5hbWUsIHN0cmluZ2lmeSA/IEpTT04uc3RyaW5naWZ5KGl0ZW0pIDogaXRlbSk7XG59XG5mdW5jdGlvbiBnZXRMb2NhbFN0b3JhZ2VJdGVtKG5hbWUsIHBhcnNlKSB7XG4gIGNvbnN0IGl0ZW0gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG4gIHJldHVybiBpdGVtICYmIHBhcnNlID8gSlNPTi5wYXJzZShpdGVtKSA6IGl0ZW07XG59XG5mdW5jdGlvbiBzZXRTZXNzaW9uU3RvcmFnZUl0ZW0obmFtZSwgaXRlbSwgc3RyaW5naWZ5KSB7XG4gIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKG5hbWUsIHN0cmluZ2lmeSA/IEpTT04uc3RyaW5naWZ5KGl0ZW0pIDogaXRlbSk7XG59XG5mdW5jdGlvbiBnZXRTZXNzaW9uU3RvcmFnZUl0ZW0obmFtZSwgcGFyc2UpIHtcbiAgY29uc3QgaXRlbSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKG5hbWUpO1xuICByZXR1cm4gaXRlbSAmJiBwYXJzZSA/IEpTT04ucGFyc2UoaXRlbSkgOiBpdGVtO1xufVxuZnVuY3Rpb24gcmVhZENvb2tpZShuYW1lKSB7XG4gIGNvbnN0IGNvb2tpZSA9IGRvY3VtZW50LmNvb2tpZTtcbiAgY29uc3QgY29va2llTmFtZVJFID0gbmV3IFJlZ0V4cChgKD86Xnw7ICkke2VzY2FwZVJlZ0V4cChuYW1lKX09KFteO10qKWApO1xuICBjb25zdCBtYXRjaGVkQ29va2llcyA9IGNvb2tpZS5tYXRjaChjb29raWVOYW1lUkUpO1xuICByZXR1cm4gbWF0Y2hlZENvb2tpZXMgPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlZENvb2tpZXNbMV0pIDogdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gd3JpdGVDb29raWUobmFtZSwgdmFsdWUsIHByb3BlcnRpZXMpIHtcbiAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwge307XG4gIGxldCBleHBpcmVzID0gcHJvcGVydGllcyA9PT0gbnVsbCB8fCBwcm9wZXJ0aWVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9wZXJ0aWVzLmV4cGlyZXM7XG4gIGlmICh0eXBlb2YgZXhwaXJlcyA9PT0gXCJudW1iZXJcIikge1xuICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBkYXlzRnJvbVRvZGF5SW5NcyA9IGV4cGlyZXMgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuICAgIGV4cGlyYXRpb25EYXRlLnNldFRpbWUoRGF0ZS5ub3coKSArIGRheXNGcm9tVG9kYXlJbk1zKTtcbiAgICBleHBpcmVzID0gcHJvcGVydGllcy5leHBpcmVzID0gZXhwaXJhdGlvbkRhdGU7XG4gIH1cbiAgaWYgKHR5cGVvZiBleHBpcmVzICE9PSBcInN0cmluZ1wiICYmIChleHBpcmVzID09PSBudWxsIHx8IGV4cGlyZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4cGlyZXMudG9VVENTdHJpbmcpKSB7XG4gICAgcHJvcGVydGllcy5leHBpcmVzID0gZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuICB9XG4gIGxldCBjb29raWUgPSBgJHtuYW1lfT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YDtcbiAgbGV0IHByb3BlcnR5O1xuICBmb3IgKHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcbiAgICBjb29raWUgKz0gYDsgJHtwcm9wZXJ0eX1gO1xuICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSBwcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgICBpZiAocHJvcGVydHlWYWx1ZSAhPT0gdHJ1ZSkge1xuICAgICAgY29va2llICs9IGA9JHtwcm9wZXJ0eVZhbHVlfWA7XG4gICAgfVxuICB9XG4gIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZTtcbn1cblxuZXhwb3J0IHsgZ2V0Q29va2llIGFzIGEsIHNldENvb2tpZSBhcyBiLCBzZXRTZXNzaW9uU3RvcmFnZUl0ZW0gYXMgYywgZ2V0U2Vzc2lvblN0b3JhZ2VJdGVtIGFzIGQsIGdldExvY2FsU3RvcmFnZUl0ZW0gYXMgZywgc2V0TG9jYWxTdG9yYWdlSXRlbSBhcyBzIH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2My4wLjk5XG4gKi9cbmltcG9ydCB7IGcgYXMgZ2V0UmVzdEJhc2VVcmwgfSBmcm9tICcuL3BvcnRhbC03OWNhYWVmZi5qcyc7XG5pbXBvcnQgeyB2IGFzIHZhbGlkQXJjZ2lzUmVzdFNlcnZpY2VQYXRoLCB1IGFzIHJlZ2V4U2VydmVyVHlwZSwgciBhcyBhZ3NSZWdFeHAsIHEgYXMgZ2VvSnNvblJlZ0V4cCB9IGZyb20gJy4vcHJpdmlsZWdlcy1jY2Q1ZjM3ZC5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbmZpZ1N0YXRlIH0gZnJvbSAnLi9jb25maWctZWI1ZjdkYzIuanMnO1xuaW1wb3J0IHsgbCBhcyBsb2FkTW9kdWxlcyB9IGZyb20gJy4vbG9hZE1vZHVsZXMtYWFmMzBiZDYuanMnO1xuaW1wb3J0IHsgYSBhcyBnZXRDb29raWUgfSBmcm9tICcuL3N0b3JhZ2UtZDdmNTgyMmUuanMnO1xuaW1wb3J0IHsgYSBhcyBhZ3NTZXJ2ZXJNYXAgfSBmcm9tICcuL2Fncy02OGQ0YWUyMC5qcyc7XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYWlsaW5nU2xhc2godXJsKSB7XG4gIGlmICgodXJsID09PSBudWxsIHx8IHVybCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXJsLnNsaWNlKC0xKSkgPT09IFwiL1wiKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBcIi9cIiBmcm9tIHRoZSBlbmQgb2YgdGhlIHVybFxuICAgIHJldHVybiB1cmwuc2xpY2UoMCwgdXJsLmxlbmd0aCAtIDEpO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG4vLyBib3Jyb3dlZCBmcm9tIGFyY2dpc29ubGluZS5zaGFyaW5nLnV0aWxcbmFzeW5jIGZ1bmN0aW9uIHVybFRvT2JqZWN0KHVybCkge1xuICB2YXIgX2E7XG4gIGNvbnN0IGFwaVZlcnNpb24gPSAoX2EgPSBjb25maWdTdGF0ZSA9PT0gbnVsbCB8fCBjb25maWdTdGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnU3RhdGUuYXBpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiA0O1xuICBjb25zdCBbdXJsVXRpbHNdID0gYXdhaXQgbG9hZE1vZHVsZXMoW2FwaVZlcnNpb24gPT09IDQgPyBcImVzcmkvY29yZS91cmxVdGlsc1wiIDogXCJlc3JpL3VybFV0aWxzXCJdKTtcbiAgbGV0IHVybE9iaiA9IHVybFV0aWxzLnVybFRvT2JqZWN0KHVybCk7XG4gIHVybE9iai5xdWVyeSA9IHVybE9iai5xdWVyeSB8fCB7fTtcbiAgZm9yIChsZXQga2V5IGluIHVybE9iai5xdWVyeSB8fCB7fSkge1xuICAgIGlmICh1cmxPYmoucXVlcnkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgLy8gc3RyaXAgb3V0IHNvbWUgSFRNTCAoPCw+LCUzQywlM0UsJmx0OywmZ3Q7KVxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHVybE9iai5xdWVyeVtrZXldKSkge1xuICAgICAgICB1cmxPYmoucXVlcnlba2V5XSA9IHVybE9iai5xdWVyeVtrZXldLnJlcGxhY2UoLygmbHQ7fCZndDt8PHw+fCUzQ3wlM0UpL2csIFwiXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdXJsT2JqO1xufVxuZnVuY3Rpb24gdXJsVG9UaXRsZSh1cmwpIHtcbiAgcmV0dXJuICh1cmwgPT09IG51bGwgfHwgdXJsID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1cmwucmVwbGFjZSgvXi4qXFwvLywgXCJcIikucmVwbGFjZSgvLlteLl0qJC8sIFwiXCIpKSB8fCBcIlwiO1xufVxuZnVuY3Rpb24gc3VwcG9ydHNEaXJlY3QodHlwZSkge1xuICAvLyBUT0RPOiBTZXQgbWFwcGVkIEFHU1R5cGVzIHRvIFVybFR5cGUsIHRoZW4gcmUtZW5hYmxlIGhlcmVcbiAgY29uc3QgZGlyZWN0ID0gW1wiV0ZTXCIsIFwiR2VvSnNvblwiLCBcIkNTVlwiLCBcIkdlb1JTU1wiLCBcIktNTFwiLCBcIk9HQ0ZlYXR1cmVTZXJ2ZXJcIiwgXCJXTVNcIiwgXCJXTVRTXCJdO1xuICByZXR1cm4gZGlyZWN0LmluY2x1ZGVzKHR5cGUpO1xufVxuZnVuY3Rpb24gc3VwcG9ydHNIdHRwcyh1cmwpIHtcbiAgY29uc3QgeyBjb25maWcsIHBvcnRhbCB9ID0gY29uZmlnU3RhdGU7XG4gIGxldCBzdXBwb3J0c0h0dHBzID0gZmFsc2U7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIChjb25maWcuaHR0cHNEb21haW5zIHx8IFtdKS5mb3JFYWNoKChkb21haW4pID0+IHtcbiAgICBpZiAodXJsLmluZGV4T2YoYC4ke2RvbWFpbn0vYCkgPiAtMSB8fCB1cmwuaW5kZXhPZihgLyR7ZG9tYWlufS9gKSA+IC0xKSB7XG4gICAgICBzdXBwb3J0c0h0dHBzID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXN1cHBvcnRzSHR0cHMpIHtcbiAgICBsZXQgcG9ydGFsSG9zdG5hbWUgPSBwb3J0YWwucG9ydGFsSG9zdG5hbWU7XG4gICAgaWYgKHBvcnRhbEhvc3RuYW1lLmluZGV4T2YoXCIvXCIpID4gLTEpIHtcbiAgICAgIHBvcnRhbEhvc3RuYW1lID0gcG9ydGFsSG9zdG5hbWUuc3Vic3RyaW5nKDAsIHBvcnRhbEhvc3RuYW1lLmluZGV4T2YoXCIvXCIpKTtcbiAgICB9XG4gICAgaWYgKHVybC5pbmRleE9mKHBvcnRhbEhvc3RuYW1lKSA+IC0xKSB7XG4gICAgICBzdXBwb3J0c0h0dHBzID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnRzSHR0cHM7XG59XG5mdW5jdGlvbiBpc0hvc3RlZFNlcnZpY2UodXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHsgY29uZmlnLCBwb3J0YWwgfSA9IGNvbmZpZ1N0YXRlO1xuICBjb25zdCByZXN0QmFzZVVybCA9IGdldFJlc3RCYXNlVXJsKHBvcnRhbCk7XG4gIGNvbnN0IGhvc3RuYW1lID0gbmV3IFVSTChyZXN0QmFzZVVybCkuaG9zdG5hbWU7XG4gIGNvbnN0IGlzU2luZ2xlVGVuYW50ID0gZmFsc2UgPT09IGNvbmZpZy5pc011bHRpVGVuYW50O1xuICAvLyBvbmx5IGNvbnNpZGVyIGxvY2FsbHkgaG9zdGVkIGlmIHRoZSByZXN0QmFzZVVybCBpcyBvbiBzYW1lIGRvbWFpbiBhcyB1cmxcbiAgLy8gYW5kIGVzcmlHZW93Q29uZmlnLnNlbGYuc3VwcG9ydHNIb3N0ZWRTZXJ2aWNlcyBmbGFnIGlzIGVuYWJsZWRcbiAgY29uc3QgaXNBR09MID0gdXJsLmluZGV4T2YoXCIuYXJjZ2lzLmNvbS9cIikgIT09IC0xO1xuICBjb25zdCBpc0hvc3RlZFNlcnZlciA9IHVybC5pbmRleE9mKFwiLy9zZXJ2aWNlc1wiKSAhPT0gLTEgfHxcbiAgICB1cmwuaW5kZXhPZihcIi8vdGlsZXNcIikgIT09IC0xIHx8XG4gICAgdXJsLmluZGV4T2YoXCIvL2ZlYXR1cmVzXCIpICE9PSAtMSB8fFxuICAgIHVybC5pbmRleE9mKFwiLy9sb2NhdGlvbnNlcnZpY2VzXCIpICE9PSAtMTtcbiAgY29uc3QgaXNMb2NhbGx5SG9zdGVkID0gcG9ydGFsLnN1cHBvcnRzSG9zdGVkU2VydmljZXMgJiYgdXJsLmluZGV4T2YoaG9zdG5hbWUpICE9PSAtMSAmJiAhaXNTaW5nbGVUZW5hbnQ7XG4gIHJldHVybiAoaXNBR09MICYmIGlzSG9zdGVkU2VydmVyKSB8fCAoIWlzQUdPTCAmJiBpc0xvY2FsbHlIb3N0ZWQpO1xufVxuZnVuY3Rpb24gY2hlY2tQcm90b2NvbCgpIHtcbiAgdmFyIF9hO1xuICAvLyBGb3IgcG9ydGFsIGNhc2UsIGlmIGFkZGluZyBhIHNlY3VyZSBwcm94eSwgYW5kIHBhZ2UgaXMgaHR0cFxuICAvLyB3ZSBuZWVkIHRvIHJlbG9hZCBvbiBodHRwcyAtIElXUyBpbnZhbGlkIGNhc2VcbiAgY29uc3QgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG4gIGlmIChwcm90b2NvbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJodHRwc1wiKSA9PT0gLTEpIHtcbiAgICBjb25zdCBjb29raWUgPSBnZXRDb29raWUoXCJlc3JpX2F1dGhcIiwgdHJ1ZSk7XG4gICAgaWYgKCgoX2EgPSBjb29raWUgPT09IG51bGwgfHwgY29va2llID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb29raWUuYXV0aF90aWVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9Mb3dlckNhc2UoKSkgPT09IFwid2ViXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGZvcm1hdEdJU1VybCh1cmwpIHtcbiAgLypcbiAgICAgVXNlciAgZW50ZXJlZCA6XG4gICAgIGh0dHA6Ly9zYW1wbGVzZXJ2ZXIzLmFyY2dpc29ubGluZS5jb21cbiAgICAgU29mdHdhcmUgY29tcGxldGVzIHRvIDpcbiAgICAgaHR0cDovL3NhbXBsZXNlcnZlcjMuYXJjZ2lzb25saW5lLmNvbS9hcmNnaXMvcmVzdC9zZXJ2aWNlc1xuXG4gICAgIFVzZXIgIGVudGVyZWQgOlxuICAgICBodHRwOi8vc2FtcGxlc2VydmVyMy5hcmNnaXNvbmxpbmUuY29tL2FyY2dpc1xuICAgICBTb2Z0d2FyZSBjb21wbGV0ZXMgdG86XG4gICAgIGh0dHA6Ly9zYW1wbGVzZXJ2ZXIzLmFyY2dpc29ubGluZS5jb20vYXJjZ2lzL3Jlc3Qvc2VydmljZXNcblxuICAgICBVc2VyICBlbnRlcmVkIDpcbiAgICAgaHR0cDovL3NhbXBsZXNlcnZlcjMuYXJjZ2lzb25saW5lLmNvbS9hcmNnaXMvcmVzdC9zZXJ2aWNlc1xuICAgICBTb2Z0d2FyZSBjb21wbGV0ZXMgdG86XG4gICAgIGh0dHA6Ly9zYW1wbGVzZXJ2ZXIzLmFyY2dpc29ubGluZS5jb20vYXJjZ2lzL3Jlc3Qvc2VydmljZXNcblxuICAgICBVc2VyIGVudGVyZWQgYSB1cmwgdG8gYSBmb2xkZXIgaW4gYSBzZXJ2ZXIgOlxuICAgICBodHRwOi8vc2FtcGxlc2VydmVyMy5hcmNnaXNvbmxpbmUuY29tL2FyY2dpcy9yZXN0L3NlcnZpY2VzL3BldHJvXG4gICAgIFNvZnR3YXJlIGNvbXBsZXRlcyB0bzpcbiAgICAgaHR0cDovL3NhbXBsZXNlcnZlcjMuYXJjZ2lzb25saW5lLmNvbS9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9wZXRyb1xuXG4gICAgIFVzZXIgZW50ZXJlZCBhIHVybCB0byBhIGZvbGRlciBpbiBhIHNlcnZlciA6XG4gICAgIGh0dHA6Ly9zYW1wbGVzZXJ2ZXIzLmFyY2dpc29ubGluZS5jb20vYXJjZ2lzL3Jlc3Qvc2VydmljZXMvd2F0ZXIvTWFwU2VydmVyXG4gICAgIFNvZnR3YXJlIGNvbXBsZXRlcyB0bzpcbiAgICAgaHR0cDovL3NhbXBsZXNlcnZlcjMuYXJjZ2lzb25saW5lLmNvbS9hcmNnaXMvcmVzdC9zZXJ2aWNlcy93YXRlci9NYXBTZXJ2ZXJcbiAgICAgKi9cbiAgbGV0IHUgPSB1cmwudG9Mb3dlckNhc2UoKTtcbiAgLy8gYWRkIGh0dHA6Ly8gaWYgaXQncyBtaXNzaW5nXG4gIGlmICh1LmluZGV4T2YoXCJodHRwOi8vXCIpID09IC0xICYmIHUuaW5kZXhPZihcImh0dHBzOi8vXCIpID09IC0xKSB7XG4gICAgdXJsID0gXCJodHRwczovL1wiICsgdXJsO1xuICAgIHUgPSB1cmwudG9Mb3dlckNhc2UoKTtcbiAgfVxuICAvLyBmaW5kIHBhdGggcGFydCBvZiBVUkxcbiAgbGV0IHBhdGhQb3MgPSB1LmluZGV4T2YoXCIvL1wiKTtcbiAgcGF0aFBvcyA9IHUuaW5kZXhPZihcIi9cIiwgcGF0aFBvcyArIDIpO1xuICAvLyBqdXN0IGRvbWFpbj9cbiAgaWYgKHBhdGhQb3MgPT0gLTEpIHtcbiAgICB1cmwgKz0gXCIvYXJjZ2lzL3Jlc3Qvc2VydmljZXNcIjtcbiAgICB1ID0gdXJsLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgZWxzZSBpZiAocGF0aFBvcyA9PSB1Lmxlbmd0aCAtIDEpIHtcbiAgICB1cmwgKz0gXCJhcmNnaXMvcmVzdC9zZXJ2aWNlc1wiO1xuICAgIHUgPSB1cmwudG9Mb3dlckNhc2UoKTtcbiAgfVxuICAvLyBqdXN0IGFyY2dpcyBwYXRoP1xuICBsZXQgcDAgPSB1LmluZGV4T2YoXCIvYXJjZ2lzXCIsIHBhdGhQb3MpO1xuICBpZiAocDAgPT0gdS5sZW5ndGggLSA3KSB7XG4gICAgdXJsICs9IFwiL3Jlc3Qvc2VydmljZXNcIjtcbiAgICB1ID0gdXJsLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgZWxzZSBpZiAocDAgPT0gdS5sZW5ndGggLSA4KSB7XG4gICAgdXJsICs9IFwicmVzdC9zZXJ2aWNlc1wiO1xuICAgIHUgPSB1cmwudG9Mb3dlckNhc2UoKTtcbiAgfVxuICAvLyBqdXN0IHNlcnZlciBwYXRoPyAoV2ViQWRhcHRvcilcbiAgcDAgPSB1LmluZGV4T2YoXCIvc2VydmVyXCIsIHBhdGhQb3MpO1xuICBpZiAodS5lbmRzV2l0aChcIi9zZXJ2ZXJcIikpIHtcbiAgICB1cmwgKz0gXCIvcmVzdC9zZXJ2aWNlc1wiO1xuICAgIHUgPSB1cmwudG9Mb3dlckNhc2UoKTtcbiAgfVxuICBlbHNlIGlmICh1LmVuZHNXaXRoKFwiL3NlcnZlci9cIikpIHtcbiAgICB1cmwgKz0gXCJyZXN0L3NlcnZpY2VzXCI7XG4gICAgdSA9IHVybC50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIC8vIHJlcGxhY2UgU09BUCBlbmQgcG9pbnQgb3Igc2hvcnQgUkVTVCBlbmQgcG9pbnQgd2l0aCBSRVNUIGVuZCBwb2ludFxuICBjb25zdCBwMSA9IHUuaW5kZXhPZihcIi9yZXN0L3NlcnZpY2VzXCIsIHBhdGhQb3MpO1xuICBjb25zdCBwMiA9IHUuaW5kZXhPZihcIi9zZXJ2aWNlc1wiLCBwYXRoUG9zKTtcbiAgY29uc3QgcDMgPSB1LmluZGV4T2YoXCIvcmVzdFwiLCBwYXRoUG9zKTtcbiAgaWYgKHAxID09IC0xICYmIHAyID4gLTEpIHtcbiAgICB1cmwgPSBgJHt1cmwuc3Vic3RyaW5nKDAsIHAyKX0vcmVzdC9zZXJ2aWNlcyR7dXJsLnN1YnN0cmluZyhwMiArIDkpfWA7XG4gICAgdSA9IHVybC50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIGVsc2UgaWYgKHAxID09IC0xICYmIHAzID4gLTEpIHtcbiAgICB1cmwgPSBgJHt1cmwuc3Vic3RyaW5nKDAsIHAzKX0vcmVzdC9zZXJ2aWNlcyR7dXJsLnN1YnN0cmluZyhwMyArIDUpfWA7XG4gICAgdSA9IHVybC50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIC8vIGlzIGl0IGEgUkVTVCBlbmQgcG9pbnQ/XG4gIGlmICh1LmluZGV4T2YoXCIvcmVzdC9zZXJ2aWNlc1wiKSA9PSAtMSkgO1xuICByZXR1cm4gdXJsO1xufVxuY29uc3QgZm9ybWF0VXJsID0gKHVybCwgYWxsU1NMID0gZmFsc2UpID0+IHtcbiAgY29uc3QgcHJvdG9jb2xSZWdleCA9IC8oaHR0cHxodHRwc3xmdHApOlxcL1xcLz8vO1xuICB1cmwgPSByZW1vdmVUcmFpbGluZ1NsYXNoKHVybCk7XG4gIGlmICghcHJvdG9jb2xSZWdleC5leGVjKHVybCkpIHtcbiAgICB1cmwgPSBgaHR0cHM6Ly8ke3VybH1gO1xuICB9XG4gIGlmICgoYWxsU1NMIHx8IGxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiKSAmJiAoaXNIb3N0ZWRTZXJ2aWNlKHVybCkgfHwgc3VwcG9ydHNIdHRwcyh1cmwpKSkge1xuICAgIHVybCA9IHVybC5yZXBsYWNlKFwiaHR0cDovXCIsIFwiaHR0cHM6L1wiKTtcbiAgfVxuICAvLyBGaWx0ZXIgb3V0IGR5bmFtaWNMYXllclxuICB1cmwgPSB1cmwuaW5kZXhPZihcIi9keW5hbWljTGF5ZXI/XCIpID4gLTEgPyB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKFwiL2R5bmFtaWNMYXllcj9cIikpIDogdXJsO1xuICByZXR1cm4gdXJsO1xufTtcbi8qKiBHZXQgdHlwZSBiYXNlZCBvbiBpbnB1dCB1cmwgYW5kIGFsc28gcmV0dXJucyBhIGZpeCBpZiB1cmwgaXMgbWFsZm9ybWVkXG4gKi9cbmNvbnN0IGdldFVybFR5cGUgPSAodXJsLCBpc1BvcnRhbCA9IGZhbHNlKSA9PiB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB7IGVycm9yOiB7IGNvZGU6IFwiaW52YWxpZFVybFwiIH0gfTtcbiAgfVxuICBpZiAoaXNIdHRwKHVybCwgaXNQb3J0YWwpKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IHsgY29kZTogXCJodHRwV2FybmluZ1wiIH0gfTtcbiAgfVxuICBjb25zdCBkZWNvZGVkVXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybCk7XG4gIGNvbnN0IGttbFR5cGUgPSBkZWNvZGVkVXJsLnJlcGxhY2UodmFsaWRBcmNnaXNSZXN0U2VydmljZVBhdGgsIFwiXCIpLm1hdGNoKC8oKFxcLnxcXC8pKihrbWx8a216KSkvZ2kpO1xuICBjb25zdCBvZ2NUeXBlID0gZGVjb2RlZFVybC5yZXBsYWNlKHZhbGlkQXJjZ2lzUmVzdFNlcnZpY2VQYXRoLCBcIlwiKS5tYXRjaCgvKChcXC98XFw9KSh3bXRzfHdtc3x3ZnMpKS9naSk7XG4gIGNvbnN0IG9nY0ZlYXR1cmVUeXBlID0gZGVjb2RlZFVybC5yZXBsYWNlKHZhbGlkQXJjZ2lzUmVzdFNlcnZpY2VQYXRoLCBcIlwiKS5tYXRjaCgvKChcXC98XFw9KShPR0N8T0dDRmVhdHVyZVNlcnZlcikpL2dpKTtcbiAgY29uc3QgcnNzVHlwZSA9IGRlY29kZWRVcmwucmVwbGFjZSh2YWxpZEFyY2dpc1Jlc3RTZXJ2aWNlUGF0aCwgXCJcIikubWF0Y2goLygoXFwufFxcLykqKHJzcykpL2dpKTtcbiAgY29uc3Qgc2VydmVyVHlwZSA9IChfYSA9IGRlY29kZWRVcmwucmVwbGFjZSh2YWxpZEFyY2dpc1Jlc3RTZXJ2aWNlUGF0aCwgXCJcIikubWF0Y2gocmVnZXhTZXJ2ZXJUeXBlKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzFdO1xuICBjb25zdCBjb250YWluc0FHUyA9IGRlY29kZWRVcmwucmVwbGFjZSh2YWxpZEFyY2dpc1Jlc3RTZXJ2aWNlUGF0aCwgXCJcIikubWF0Y2goYWdzUmVnRXhwKTtcbiAgY29uc3QgY3N2VHlwZSA9IGRlY29kZWRVcmwucmVwbGFjZSh2YWxpZEFyY2dpc1Jlc3RTZXJ2aWNlUGF0aCwgXCJcIikubWF0Y2goLygoXFwufFxcLykqKGNzdikpL2dpKTtcbiAgY29uc3QgdGlsZUxheWVyVHlwZSA9IGRlY29kZWRVcmxcbiAgICAucmVwbGFjZSh2YWxpZEFyY2dpc1Jlc3RTZXJ2aWNlUGF0aCwgXCJcIilcbiAgICAubWF0Y2goLyhcXC58XFwvKSgoXFwkP3soenxsZXZlbCl9KVxcLyooXFwkP3soeHxjb2wpfSlcXC8qKFxcJD97KHl8cm93KX0pKS9naSk7XG4gIGxldCB0eXBlID0gbnVsbDtcbiAgaWYgKGRlY29kZWRVcmwubWF0Y2goZ2VvSnNvblJlZ0V4cCkpIHtcbiAgICB0eXBlID0gXCJHZW9Kc29uXCI7XG4gIH1cbiAgZWxzZSBpZiAob2djRmVhdHVyZVR5cGUgJiYgIW9nY1R5cGUgJiYgIXNlcnZlclR5cGUpIHtcbiAgICB0eXBlID0gXCJPR0NGZWF0dXJlU2VydmVyXCI7XG4gIH1cbiAgZWxzZSBpZiAoc2VydmVyVHlwZSAmJiAhb2djVHlwZSkge1xuICAgIHR5cGUgPSBhZ3NTZXJ2ZXJNYXBbc2VydmVyVHlwZV07XG4gIH1cbiAgZWxzZSBpZiAoY29udGFpbnNBR1MpIHtcbiAgICAvLyBBc3N1bWUgVVJMUyB3aXRoIC9hZ3MvIGFuZCBubyBzcGVjaWZpZWQgc2VydmVyIGFyZSBNYXAgU2VydmljZXNcbiAgICB0eXBlID0gXCJNYXAgU2VydmljZVwiO1xuICB9XG4gIGVsc2UgaWYgKG9nY1R5cGUpIHtcbiAgICBjb25zdCBzeW1ib2wgPSAob2djVHlwZSA9PT0gbnVsbCB8fCBvZ2NUeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvZ2NUeXBlWzBdLmNoYXJBdCgwKSkgPT09IFwiL1wiID8gXCIvXCIgOiBcIj1cIjtcbiAgICB0eXBlID0gKF9jID0gKF9iID0gb2djVHlwZSA9PT0gbnVsbCB8fCBvZ2NUeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvZ2NUeXBlWzBdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3BsaXQoc3ltYm9sKVsxXSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnRvVXBwZXJDYXNlKCk7XG4gIH1cbiAgZWxzZSBpZiAoa21sVHlwZSkge1xuICAgIHR5cGUgPSBcIktNTFwiO1xuICB9XG4gIGVsc2UgaWYgKHJzc1R5cGUpIHtcbiAgICB0eXBlID0gXCJHZW9SU1NcIjtcbiAgfVxuICBlbHNlIGlmIChjc3ZUeXBlKSB7XG4gICAgdHlwZSA9IFwiQ1NWXCI7XG4gIH1cbiAgZWxzZSBpZiAodGlsZUxheWVyVHlwZSkge1xuICAgIHR5cGUgPSBcIlRpbGUgTGF5ZXJcIjtcbiAgfVxuICByZXR1cm4geyByZXN1bHQ6IHR5cGUgfTtcbn07XG4vKipcbiAqIENoZWNrcyBpZiB1cmwgaW5jbHVkZXMgaHR0cDovL1xuICogTm90IGFwcGxpY2FibGUgdG8gZW50ZXJwcmlzZVxuICovXG5jb25zdCBpc0h0dHAgPSAodXJsLCBpc1BvcnRhbCkgPT4ge1xuICByZXR1cm4gIWlzUG9ydGFsICYmIHVybC5pbmNsdWRlcyhcImh0dHA6Ly9cIik7XG59O1xuXG5leHBvcnQgeyBpc0hvc3RlZFNlcnZpY2UgYXMgYSwgc3VwcG9ydHNIdHRwcyBhcyBiLCB1cmxUb09iamVjdCBhcyBjLCBmb3JtYXRHSVNVcmwgYXMgZCwgY2hlY2tQcm90b2NvbCBhcyBlLCBmb3JtYXRVcmwgYXMgZiwgZ2V0VXJsVHlwZSBhcyBnLCBpc0h0dHAgYXMgaSwgcmVtb3ZlVHJhaWxpbmdTbGFzaCBhcyByLCBzdXBwb3J0c0RpcmVjdCBhcyBzLCB1cmxUb1RpdGxlIGFzIHUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==