"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-47d5c2"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-f7934cd7.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-f7934cd7.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getAppSwitcherConfig),
/* harmony export */   b: () => (/* binding */ getMarketPlaceProvisionedListings),
/* harmony export */   c: () => (/* binding */ getUserProperties),
/* harmony export */   d: () => (/* binding */ getApprovedApps),
/* harmony export */   e: () => (/* binding */ getOrgCapabilities),
/* harmony export */   f: () => (/* binding */ getSigninSettings),
/* harmony export */   g: () => (/* binding */ getShowInAppLauncher),
/* harmony export */   h: () => (/* binding */ getBlockableApps),
/* harmony export */   i: () => (/* binding */ getServers),
/* harmony export */   j: () => (/* binding */ getPortalSettings),
/* harmony export */   k: () => (/* binding */ fetchAllResources),
/* harmony export */   q: () => (/* binding */ queryAppItemsForChanges),
/* harmony export */   u: () => (/* binding */ updateUserProperties)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const appSwitcherConfigItemQuery = `owner:"esri" AND title:"AppSwitcher Config" AND type: "Application Configuration"`;
async function getPortalSettings(portal) {
  const portalUrl = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
  if (!portalUrl) {
    return;
  }
  const url = `${portalUrl}portals/self/settings`;
  return (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => request(url), "portalSettings", portalUrl);
}
async function getShowInAppLauncher() {
  var _a;
  const settings = await getPortalSettings();
  return ((_a = settings === null || settings === void 0 ? void 0 : settings.portalConfigProperties) === null || _a === void 0 ? void 0 : _a.showInAppLauncher) || [];
}
async function getAppSwitcherConfigItem() {
  const portalUrl = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)();
  if (!portalUrl) {
    return;
  }
  const url = `${portalUrl}search`;
  return request(url, {
    num: 1,
    start: 0,
    sortField: "title",
    sortOrder: "asc",
    q: appSwitcherConfigItemQuery
  });
}
async function getConfigData(itemId) {
  const portalUrl = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)();
  if (!portalUrl || !itemId) {
    return;
  }
  const url = `${portalUrl}content/items/${itemId}/data`;
  return request(url);
}
async function getAppSwitcherConfig() {
  var _a;
  const { portal, user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  if (!(portal === null || portal === void 0 ? void 0 : portal.id) || !user) {
    return;
  }
  const result = await getAppSwitcherConfigItem();
  const item = (_a = result === null || result === void 0 ? void 0 : result.results) === null || _a === void 0 ? void 0 : _a[0];
  if (!item) {
    return;
  }
  const itemId = item.id;
  const data = await getConfigData(itemId);
  return data;
}
async function getUserProperties() {
  const { user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}community/users/${user.username}/properties`;
  return request(url);
}
async function getApprovedApps() {
  const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/${portal.id}/approvedApps`;
  return request(url, { returnAllApps: false });
}
async function fetchAllResources(url, content, resourceKey = "results") {
  const max = 100;
  let start = 1;
  let resources = [];
  let totalLeft;
  let numRequests;
  let promises;
  let i;
  content.start = start;
  if (!content.num) {
    content.num = max;
  }
  try {
    const result = await request(url, content);
    if (!(result === null || result === void 0 ? void 0 : result[resourceKey])) {
      return resources;
    }
    resources = [...resources, ...result[resourceKey]];
    // calculate whether further batches are needed
    start = result.nextStart;
    totalLeft = result.total - resources.length;
    numRequests = Math.ceil(totalLeft / max);
    promises = [];
    // request each necessary batch
    for (i = 0; i < numRequests; i++) {
      content.start = start + i * max;
      promises.push(request(url, content));
    }
    try {
      const results = await Promise.all(promises);
      results.forEach((r) => {
        resources = [...resources, ...r[resourceKey]];
      });
      return resources;
    }
    catch (_a) {
      return resources;
    }
  }
  catch (_b) {
    return resources;
  }
}
async function getMarketPlaceProvisionedListings() {
  const { user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}community/users/${user.username}/provisionedListings`;
  return fetchAllResources(url, { returnAppClientIds: true, returnAllProvisions: true }, "provisionedListings");
}
async function getOrgCapabilities() {
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/subscriptionInfo`;
  try {
    const response = await request(url);
    return (response === null || response === void 0 ? void 0 : response.orgCapabilities) || [];
  }
  catch (_a) {
    return [];
  }
}
async function queryAppItemsForChanges(approvedApps, runQuery) {
  if (!runQuery || !(approvedApps === null || approvedApps === void 0 ? void 0 : approvedApps.length)) {
    return;
  }
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}search`;
  return request(url, {
    num: 100,
    q: `id:(${approvedApps.map((a) => `"${a.itemId}"`).join(" OR ")})`
  });
}
const blockedAppsConfigItemQuery = `owner:"esri" AND title:"BlockedApps Config" AND type: "Application Configuration"`;
async function getBlockableApps() {
  var _a, _b;
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}search`;
  try {
    const response = await request(url, {
      num: 10,
      start: 0,
      sortField: "title",
      sortOrder: "asc",
      q: blockedAppsConfigItemQuery
    });
    if (!response) {
      return [];
    }
    const itemId = ((_b = (_a = response.results) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id) || "";
    const data = await getConfigData(itemId);
    return (data === null || data === void 0 ? void 0 : data.blockedApps) || [];
  }
  catch (_c) {
    return [];
  }
}
async function getServers() {
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/servers`;
  const response = await request(url);
  return (response === null || response === void 0 ? void 0 : response.servers) || [];
}
async function getSigninSettings() {
  const url = `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/signinSettings`;
  const response = await request(url);
  return response;
}
function getUrl(path) {
  let portalUrl = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.g)();
  if (portalUrl.slice(-1) !== "/") {
    portalUrl += "/";
  }
  return `${portalUrl}${path}`;
}
async function request(url, params) {
  if (!params) {
    params = {};
  }
  params.f = "json";
  const token = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.h)();
  if (token) {
    params.token = token;
  }
  const urlObj = new URL(url);
  Object.keys(params).forEach((key) => urlObj.searchParams.append(key, params[key]));
  const response = await fetch(urlObj);
  const responseData = await response.json();
  return responseData;
}
async function postRequest(url, data) {
  data.append("f", "json");
  const token = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.h)();
  if (token) {
    data.append("token", token);
  }
  fetch(url, { method: "POST", body: data });
}
async function updateUserProperties(properties) {
  const { user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c;
  const url = getUrl(`community/users/${user.username}/setProperties`);
  const data = new FormData();
  data.append("properties", JSON.stringify(properties));
  return postRequest(url, data);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-app-switcher_2.entry.js":
/*!************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-app-switcher_2.entry.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_app_switcher: () => (/* binding */ ArcgisAppSwitcher),
/* harmony export */   arcgis_app_switcher_link: () => (/* binding */ ArcgisAppLink)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-f7934cd7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-f7934cd7.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage-d7f5822e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */













/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var version = "1.15.0";

function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}

var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

var captureMode = {
  capture: false,
  passive: false
};

function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}

function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}

function matches(
/**HTMLElement*/
el,
/**String*/
selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));

  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }

  return false;
}

function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}

function closest(
/**HTMLElement*/
el,
/**String*/
selector,
/**HTMLElement*/
ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;

    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }

      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }

  return null;
}

var R_SPACE = /\s+/g;

function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}

function css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

function matrix(el, selfOnly) {
  var appliedTransforms = '';

  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');

      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */

    } while (!selfOnly && (el = el.parentNode));
  }

  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}

function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;

  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */


function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;

  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }

  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */

      } while (container = container.parentNode);
    }
  }

  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;

    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }

  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */


function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;

    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }

    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }

  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */


function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
      i = 0,
      children = el.children;

  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }

      currentChild++;
    }

    i++;
  }

  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */


function lastChild(el, selector) {
  var last = el.lastElementChild;

  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }

  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */


function index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */


  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }

  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */


function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();

  if (el) {
    do {
      var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }

  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */


function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }

  return -1;
}

function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;

  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);

      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */

  } while (elem = elem.parentNode);

  return getWindowScrollingElement();
}

function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}

var _throttleTimeout;

function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
          _this = this;

      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }

      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}

function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}

function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}

function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;

  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}

var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
      animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });

        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);

          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }

        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;

      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }

      var animating = false,
          animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);

        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }

        target.toRect = toRect;

        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        } // if fromRect != toRect: animate


        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;

          if (!time) {
            time = _this.options.animation;
          }

          _this.animate(target, animatingRect, toRect, time);
        }

        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);

      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }

      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        this.forRepaintDummy = repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}

function repaint(target) {
  return target.offsetWidth;
}

function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }

    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;

    this.eventCanceled = false;

    evt.cancel = function () {
      _this.eventCanceled = true;
    };

    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable: sortable
        }, evt));
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined


      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.defaults);
    });

    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);

      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;

      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }

  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));

  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }

  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var _excluded = ["evt"];

var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, _excluded);

  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};

function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}

var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)
_silent = false,
    savedInputChecked = [];
/** @const */

var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
  if (!documentExists) return; // false when <= IE11

  if (IE11OrLess) {
    return false;
  }

  var el = document.createElement('x');
  el.style.cssText = 'pointer-events:auto';
  return el.style.pointerEvents === 'auto';
}(),
    _detectDirection = function _detectDirection(el, options) {
  var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

  if (elCSS.display === 'flex') {
    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
  }

  if (elCSS.display === 'grid') {
    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
  }

  if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
    var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
  }

  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
},
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
},

/**
 * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
 * @param  {Number} x      X position
 * @param  {Number} y      Y position
 * @return {HTMLElement}   Element of the first found nearest Sortable
 */
_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
  var ret;
  sortables.some(function (sortable) {
    var threshold = sortable[expando].options.emptyInsertThreshold;
    if (!threshold || lastChild(sortable)) return;
    var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

    if (insideHorizontally && insideVertically) {
      return ret = sortable;
    }
  });
  return ret;
},
    _prepareGroup = function _prepareGroup(options) {
  function toFn(value, pull) {
    return function (to, from, dragEl, evt) {
      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

      if (value == null && (pull || sameGroup)) {
        // Default pull value
        // Default pull and put value if same group
        return true;
      } else if (value == null || value === false) {
        return false;
      } else if (pull && value === 'clone') {
        return value;
      } else if (typeof value === 'function') {
        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
      } else {
        var otherGroup = (pull ? to : from).options.group.name;
        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
      }
    };
  }

  var group = {};
  var originalGroup = options.group;

  if (!originalGroup || _typeof(originalGroup) != 'object') {
    originalGroup = {
      name: originalGroup
    };
  }

  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
},
    _hideGhostForTarget = function _hideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', 'none');
  }
},
    _unhideGhostForTarget = function _unhideGhostForTarget() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, 'display', '');
  }
}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


if (documentExists && !ChromeForAndroid) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}

var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;

    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

    if (nearest) {
      // Create imitation event
      var event = {};

      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }

      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;

      nearest[expando]._onDragOver(event);
    }
  }
};

var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */


function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }

  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options); // Bind all private methods


  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode


  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events


  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }

  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }

  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}

Sortable.prototype =
/** @lends Sortable.prototype */
{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(
  /** Event|TouchEvent */
  evt) {
    if (!evt.cancelable) return;

    var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;

    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


    if (dragEl) {
      return;
    }

    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    } // cancel dnd if original target is content editable


    if (originalTarget.isContentEditable) {
      return;
    } // Safari ignores further event handling after mousedown


    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
      return;
    }

    target = closest(target, options.draggable, el, false);

    if (target && target.animated) {
      return;
    }

    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    } // Get the index of the dragged element within its parent


    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable); // Check filter

    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });

        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);

        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });

      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    } // Prepare `dragstart`


    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(
  /** Event */
  evt,
  /** Touch */
  touch,
  /** HTMLElement */
  target) {
    var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';

      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });

        if (Sortable.eventCanceled) {
          _this._onDrop();

          return;
        } // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove


        _this._disableDelayedDragEvents();

        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        } // Bind the events: dragstart/dragend


        _this._triggerDragStart(evt, touch); // Drag start event


        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        }); // Chosen item


        toggleClass(dragEl, options.chosenClass, true);
      }; // Disable "draggable"


      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }

      pluginEvent('delayStart', this, {
        evt: evt
      }); // Delay is impossible for native DnD in Edge or IE

      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();

          return;
        } // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag


        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
  /** TouchEvent|PointerEvent **/
  e) {
    var touch = e.touches ? e.touches[0] : e;

    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);

    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(
  /** Event */
  evt,
  /** Touch */
  touch) {
    touch = touch || evt.pointerType == 'touch' && evt;

    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }

    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {

    awaitingDragStarted = false;

    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });

      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }

      var options = this.options; // Apply effect

      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost(); // Drag start event

      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;

      _hideGhostForTarget();

      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;

      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }

      dragEl.parentNode[expando]._isOutsideThisEl(target);

      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });

            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }

          target = parent; // store last element
        }
        /* jshint boss:true */
        while (parent = parent.parentNode);
      }

      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(
  /**TouchEvent*/
  evt) {
    if (tapEvt) {
      var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }

        this._onDragStart(evt, true);
      }

      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }

        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }

      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;

        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }

        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }

        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }

      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl); // Set transform-origin

      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart(
  /**Event*/
  evt,
  /**boolean*/
  fallback) {
    var _this = this;

    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });

    if (Sortable.eventCanceled) {
      this._onDrop();

      return;
    }

    pluginEvent('setupClone', this);

    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';

      this._hideClone();

      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    } // #1143: IFrame support workaround


    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;

      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }

      _this._hideClone();

      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);

      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }

      on(document, 'drop', _this); // #1276 fix:

      css(dragEl, 'transform', 'translateZ(0)');
    }

    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;

    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver(
  /**Event*/
  evt) {
    var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;

    if (_silent) return;

    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    } // Capture animation state


    function capture() {
      dragOverEvent('dragOverAnimationCapture');

      _this.captureAnimationState();

      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    } // Return invocation when dragEl is inserted (or completed)


    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });

      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }

        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }

        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        } // Animation


        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }

        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });

        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      } // Null lastTarget if it is not inside a previously swapped element


      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      } // no bubbling and not fallback


      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


        !insertion && nearestEmptyInsertDetectEvent(evt);
      }

      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    } // Call when dragEl has been inserted


    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }

    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }

    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;

    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }

    ignoreNextClick = false;

    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;

      if (revert) {
        parentEl = rootEl; // actualization

        capture();

        this._hideClone();

        dragOverEvent('revert');

        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }

        return completed(true);
      }

      var elLastChild = lastChild(el, options.draggable);

      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // Insert to end of list
        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        } // if there is a last element, it is the target


        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }

        if (target) {
          targetRect = getRect(target);
        }

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();

          if (elLastChild && elLastChild.nextSibling) {
            // the last draggable element is not the last node
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }

          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        // Insert to start of list
        var firstChild = getChild(el, 0, options, true);

        if (firstChild === dragEl) {
          return completed(false);
        }

        target = firstChild;
        targetRect = getRect(target);

        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }

        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;

        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);

          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        } // If dragEl is already beside target: Do not insert


        if (direction === 0 || sibling === target) {
          return completed(false);
        }

        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
            after = false;
        after = direction === 1;

        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }

          _silent = true;
          setTimeout(_unsilent, 30);
          capture();

          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          } // Undo chrome's scroll adjustment (has no effect on other browsers)


          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }

          parentEl = dragEl.parentNode; // actualization
          // must be done before animation

          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }

          changed();
          return completed(true);
        }
      }

      if (el.contains(dragEl)) {
        return completed(false);
      }
    }

    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop(
  /**Event*/
  evt) {
    var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);

    if (Sortable.eventCanceled) {
      this._nulling();

      return;
    }

    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);

    _cancelNextTick(this.cloneId);

    _cancelNextTick(this._dragStartId); // Unbind events


    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }

    this._offMoveEvents();

    this._offUpEvents();

    if (Safari) {
      css(document.body, 'user-select', '');
    }

    css(dragEl, 'transform', '');

    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }

      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }

      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }

        _disableDraggable(dragEl);

        dragEl.style['will-change'] = ''; // Remove classes
        // ghostClass is added in dragStarted

        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }

        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });

        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            }); // Remove event


            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            }); // drag from one list and drop into another


            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }

          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }

        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }

          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          }); // Save sorting


          this.save();
        }
      }
    }

    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent(
  /**Event*/
  evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);

        break;

      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);

          _globalDragOver(evt);
        }

        break;

      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },

  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

    for (; i < n; i++) {
      el = children[i];

      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }

    return order;
  },

  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order, useAnimation) {
    var items = {},
        rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];

      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },

  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },

  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },

  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;

    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);

      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }

      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },

  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    } // Remove draggable attributes


    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });

    this._onDrop();

    this._disableDelayedDragEvents();

    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');

      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }

      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();

      return;
    }

    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return; // show clone at dragEl or original position

      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }

      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }

      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};

function _globalDragOver(
/**Event*/
evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }

  evt.cancelable && evt.preventDefault();
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

function _ghostIsFirst(evt, vertical, sortable) {
  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var spacer = 10;
  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
}

function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}

function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;

  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }

      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }

  invert = invert || invertSwap;

  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }

  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */


function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */


function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;

  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}

function _nextTick(fn) {
  return setTimeout(fn, 0);
}

function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:


if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
} // Export utils


Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};
/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */

Sortable.get = function (element) {
  return element[expando];
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */


Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }

    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */


Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export


Sortable.version = version;

var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;

function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }

  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;

      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;

      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }

      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;

      var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);

        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }

            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }

        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}

function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}

function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}

var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
      scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;

    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }

  var layersOut = 0;
  var currentParent = scrollEl;

  do {
    var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;

    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }

    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }

    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);

      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

          }

          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }

          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }

    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();

  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};

function Revert() {}

Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();

    if (putSortable) {
      putSortable.captureAnimationState();
    }

    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }

    this.sortable.animateAll();

    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};

_extends(Revert, {
  pluginName: 'revertOnSpill'
});

function Remove() {}

Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};

_extends(Remove, {
  pluginName: 'removeOnSpill'
});

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

function cookieForQueryingItemsExists() {
  const cookie = (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_5__.a)("APSW-query", true);
  if ((cookie === null || cookie === void 0 ? void 0 : cookie.expires) > new Date().setHours(new Date().getHours())) {
    return true;
  }
  // Query for approved app items every 5 hours
  const payload = { expires: new Date().setHours(new Date().getHours() + 5) };
  (0,_storage_d7f5822e_js__WEBPACK_IMPORTED_MODULE_5__.b)("APSW-query", payload, {
    path: "/",
    domain: document.domain,
    sameSite: "Strict"
  }, true);
  return false;
}

const licenses = {};
function hasLicense(clientId) {
  var _a;
  return ((_a = licenses[clientId.toLowerCase()]) === null || _a === void 0 ? void 0 : _a.valid) || false;
}
function isInPortalConfig(title, portal, showInAppLauncher) {
  return !portal.isPortal || showInAppLauncher.indexOf(title) > -1;
}
function hasAccessToOpenData(portal) {
  if ((portal === null || portal === void 0 ? void 0 : portal.portalProperties) && (!portal.portalProperties.openData || !portal.portalProperties.openData.enabled)) {
    return false;
  }
  return hasLicense("HubforArcGIS");
}
function hasAccessToVelocity(user) {
  const requiresOneOf = [
    "portal:publisher:publishFeeds",
    "portal:publisher:publishRealTimeAnalytics",
    "portal:publisher:publishBigDataAnalytics"
  ];
  const privileges = (user === null || user === void 0 ? void 0 : user.privileges) || [];
  const hasPrivilege = privileges.some((privilege) => requiresOneOf.indexOf(privilege) > -1);
  const hasCapability = hasLicense("velocity");
  return hasPrivilege && hasCapability;
}
function hasAccessToSites(portal, title, showInAppLauncher) {
  return isInPortalConfig(title, portal, showInAppLauncher) && hasLicense("HubforArcGIS");
}
function hasAccessToMapViewer(portal, newMapViewerEnabled) {
  var _a;
  const disabledInApp = portal.isPortal && ((_a = portal.portalProperties) === null || _a === void 0 ? void 0 : _a.newMapViewerEnabled) === false;
  return newMapViewerEnabled && !disabledInApp && hasLicense("arcgisWebApps");
}
function hasAccessToOrthoMaker(portal, showInAppLauncher) {
  var _a;
  return (!!((_a = portal.helperServices) === null || _a === void 0 ? void 0 : _a.rasterAnalytics) &&
    !!portal.helperServices.orthoMapping &&
    isInPortalConfig("Ortho Maker", portal, showInAppLauncher));
}
function hasAccessToNotebooks(title, portal, user, showInAppLauncher, notebookServerEnabled) {
  var _a;
  const notebookServerConfigured = notebookServerEnabled && (!portal.isPortal || portal.supportsHostedNotebooks);
  const canCreateNotebooks = !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.length) &&
    user.privileges.some((privilege) => privilege === "premium:publisher:createNotebooks");
  return notebookServerConfigured && canCreateNotebooks && isInPortalConfig(title, portal, showInAppLauncher);
}
function hasAccessToTrackViewer(portal, showInAppLauncher, trackViewerEnabled) {
  var _a;
  return (!!((_a = portal.helperServices) === null || _a === void 0 ? void 0 : _a.locationTracking) &&
    trackViewerEnabled &&
    isInPortalConfig("Track Viewer", portal, showInAppLauncher));
}

const arcgisAppSwitcherCss = ".apps-content-container{position:relative}.toggle-button{display:block;cursor:pointer;padding:0;margin:0;overflow:visible;border-width:0;-webkit-appearance:button;background-color:transparent;height:3.5rem;width:3.5rem}.toggle-button:not(.toggle-button--expanded):hover{box-shadow:inset 0 -3px 0 0 rgba(0, 121, 193, 0.5)}.toggle-button--expanded{box-shadow:inset 0 -3px 0 0 var(--calcite-ui-brand)}.toggle-button__icon{display:block;width:1.5rem;height:1.5rem}:host{position:relative;color:var(--calcite-ui-text-2)}.apps-content{display:none;position:absolute;right:0}.apps-content--rtl{left:0;right:auto}.apps-content--expanded{display:block}.apps-content ::-webkit-scrollbar{width:0.5rem}.apps-content ::-webkit-scrollbar-thumb{border-radius:var(--calcite-border-radius);background-color:rgba(0, 0, 0, 0.5);box-shadow:0 0 1px rgba(255, 255, 255, 0.5)}.dropdown-menu{overflow-x:hidden;overflow-y:auto;top:0;cursor:default;background-color:var(--calcite-ui-background);border-top:1px solid var(--calcite-ui-border-1);max-height:85vh;max-width:480px;min-width:475px}.intro-container{text-align:center;background-color:var(--calcite-ui-background)}.intro-text{font-size:0.875rem;margin:0;background-color:var(--calcite-ui-background);color:var(--calcite-ui-text-3);padding-top:1rem;padding-bottom:0.75rem;padding-left:4rem;padding-right:4rem}.apps-list{flex-direction:row;flex-wrap:wrap;list-style-type:none;overflow:hidden;text-align:left;padding-top:0.5rem;padding-bottom:0.5rem;padding-left:0.5rem;padding-right:0.5rem;margin-top:0;margin-bottom:0;background-color:var(--calcite-ui-background)}.apps-list .secondary-drag-text{display:none}.app-item{cursor:pointer;margin:0;box-sizing:border-box;display:inline-block;float:none;position:relative;text-align:left;vertical-align:top;word-wrap:break-word;overflow-wrap:break-word;font-size:0.875rem;height:110px;width:150px}@-moz-document url-prefix(){.app-item{width:146px}}.apps-content:not(.apps-content--dragging) .app-item:not(.app-item--missing):hover{color:var(--calcite-ui-text-1);outline:1px solid var(--calcite-ui-brand)}.app-item--dragging{outline-offset:-1px}.app-item--missing{padding-top:0.5rem}.show-more{display:flex;align-items:center;justify-content:center;width:100%;border-style:none;cursor:pointer;padding:0.25rem;background-color:var(--calcite-ui-foreground-3);color:var(--calcite-ui-text-3);font-size:0.875rem}.secondary-container{background-color:var(--calcite-ui-foreground-2);padding-top:0.25rem;padding-bottom:0.25rem;border-top:1px solid var(--calcite-ui-border-3)}.secondary-container--hidden{display:none}.secondary-target{text-align:center;overflow:hidden;margin-top:0.75rem;margin-bottom:0.75rem;margin-left:1.5rem;margin-right:1.5rem;font-size:0.875rem;padding-left:2rem;padding-right:2rem;border:2px dashed var(--calcite-ui-border-2);letter-spacing:normal;height:100px}.secondary-target--hover{border-color:var(--calcite-ui-brand)}.secondary-list{text-align:left;margin:0;padding-top:0.75rem;padding-bottom:0.75rem;padding-left:0.5rem;padding-right:0.5rem}";

const ArcgisAppSwitcher = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAppSwitcherToggle = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherToggle", 7);
    this.willQueryForItems = true;
    this.blockedApps = [];
    this.showInAppLauncher = [];
    this.servers = [];
    this.orgCapabilities = [];
    this.updateAppsProperties = async () => {
      const primaryIds = this.getIdsFromDOM(this.primaryContainer);
      const primaryApps = this.getAppsByIds(primaryIds);
      const primary = this.convertToAppData(primaryApps);
      const secondaryIds = this.getIdsFromDOM(this.secondaryContainer);
      const secondaryApps = this.getAppsByIds(secondaryIds);
      const secondary = this.convertToAppData(secondaryApps);
      const updatedProperties = Object.assign({}, this.userProperties);
      updatedProperties.appLauncher = { primary, secondary };
      await (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.u)(updatedProperties);
      this.userProperties = updatedProperties;
      const previousSecondaryCount = this.secondaryApps.length;
      this.primaryApps = primaryApps;
      this.secondaryApps = secondaryApps;
      if (previousSecondaryCount > 0 && !this.secondaryApps.length) {
        // if all apps are removed from secondary, show the drag box and text
        this.hoveringOverSecondary = false;
      }
    };
    this.handleToggle = () => {
      this.isExpanded = !this.isExpanded;
      this.arcgisAppSwitcherToggle.emit(this.isExpanded);
    };
    this.handleShowMore = () => {
      this.secondaryExpanded = true;
    };
    this.handleDismissIntro = () => {
      this.updateAppsProperties();
      this.displayIntro = false;
    };
    this.keydownHandler = (event) => {
      var _a;
      if (event.key === "Escape" && this.isExpanded) {
        this.handleToggle();
        (_a = this.toggleButton) === null || _a === void 0 ? void 0 : _a.focus();
      }
    };
    this.api = undefined;
    this.portal = undefined;
    this.user = undefined;
    this.newMapViewerEnabled = true;
    this.notebookServerEnabled = true;
    this.trackViewerEnabled = true;
    this.shouldExpand = false;
    this.displayIntro = false;
    this.primaryApps = [];
    this.secondaryApps = [];
    this.isExpanded = false;
    this.hoveringOverSecondary = false;
    this.secondaryExpanded = false;
    this.sorting = false;
    this.focusItemId = undefined;
    this.dragging = false;
  }
  handleLinkClick() {
    this.isExpanded = false;
    this.arcgisAppSwitcherToggle.emit(this.isExpanded);
  }
  handleLinkActivated() {
    this.secondaryExpanded = true;
  }
  async handleLinkMove(evt) {
    const { uid, keyCode, index } = evt.detail;
    this.focusItemId = uid;
    const primaryTotal = this.primaryApps.length;
    const secondaryTotal = this.secondaryApps.length;
    const isInPrimary = index < primaryTotal;
    let targetPrimary;
    if (isInPrimary) {
      const rowCount = Math.ceil(primaryTotal / 3);
      const lastRowFirstIndex = rowCount * 3 - 3;
      if (index < lastRowFirstIndex) {
        targetPrimary = true;
      }
      else if (keyCode === "ArrowLeft" || keyCode === "ArrowUp") {
        targetPrimary = true;
      }
      else if (keyCode === "ArrowRight" && index < primaryTotal - 1) {
        targetPrimary = true;
      }
      else {
        targetPrimary = false;
      }
    }
    else {
      if (index >= primaryTotal + 3) {
        targetPrimary = false;
      }
      else if (keyCode === "ArrowRight" || keyCode === "ArrowDown") {
        targetPrimary = false;
      }
      else if (keyCode === "ArrowLeft" && index > primaryTotal) {
        targetPrimary = false;
      }
      else {
        targetPrimary = true;
      }
    }
    let targetIndex = -1;
    const sameList = (isInPrimary && targetPrimary) || (!isInPrimary && !targetPrimary);
    if (sameList) {
      if (keyCode === "ArrowUp") {
        targetIndex = index - 3;
      }
      else if (keyCode === "ArrowRight") {
        targetIndex = index + 1;
      }
      else if (keyCode === "ArrowDown") {
        targetIndex = index + 3;
      }
      else if (keyCode === "ArrowLeft") {
        targetIndex = index - 1;
      }
    }
    else {
      if (isInPrimary) {
        if (keyCode === "ArrowRight") {
          targetIndex = primaryTotal;
        }
        else if (keyCode === "ArrowDown") {
          targetIndex = (index % 3) + primaryTotal;
        }
      }
      else {
        targetIndex = primaryTotal;
      }
    }
    let app;
    if (isInPrimary) {
      app = this.primaryApps.splice(index, 1)[0];
    }
    else {
      app = this.secondaryApps.splice(index - primaryTotal, 1)[0];
    }
    if (targetPrimary) {
      this.primaryApps.splice(targetIndex, 0, app);
    }
    else {
      const secondaryIndex = targetIndex - primaryTotal;
      this.secondaryApps.splice(secondaryIndex, 0, app);
    }
    const primary = this.convertToAppData(this.primaryApps);
    const secondary = this.convertToAppData(this.secondaryApps);
    const updatedProperties = Object.assign({}, this.userProperties);
    updatedProperties.appLauncher = { primary, secondary };
    await (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.u)(updatedProperties);
    this.userProperties = updatedProperties;
    if (secondaryTotal > 0 && !this.secondaryApps.length) {
      this.hoveringOverSecondary = false;
    }
    window.setTimeout(() => {
      // reset after setting focus
      this.focusItemId = "";
    }, 100);
  }
  async handleLinkRemove(evt) {
    const id = evt.detail;
    const updatedProperties = Object.assign({}, this.userProperties);
    let { primary, secondary } = updatedProperties.appLauncher;
    primary = primary.filter((app) => app.uid !== id);
    secondary = secondary.filter((app) => app.uid !== id);
    updatedProperties.appLauncher = { primary, secondary };
    await (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.u)(updatedProperties);
    this.userProperties = updatedProperties;
    this.primaryApps = this.primaryApps.filter((app) => {
      const appId = app.itemId || app.title;
      return appId !== id;
    });
    this.secondaryApps = this.secondaryApps.filter((app) => {
      const appId = app.itemId || app.title;
      return appId !== id;
    });
  }
  handleShouldExpandChange(newValue) {
    this.isExpanded = newValue;
  }
  componentDidLoad() {
    const mobileDevices = [/Android/i, /webOS/i, /iPhone/i, /iPad/i];
    const isMobile = mobileDevices.some((device) => navigator.userAgent.match(device));
    if (isMobile) {
      // currently sortableJS inside Shadow DOM is not working correctly on mobile, so avoiding this
      // this should also allow scrolling the apps list on mobile
      return;
    }
    Sortable.create(this.primaryContainer, {
      animation: 150,
      group: "apps",
      filter: ".secondary-drag-text",
      dragClass: "app-item--dragging",
      onUpdate: this.updateAppsProperties,
      onAdd: this.updateAppsProperties,
      onMove: (params) => {
        this.hoveringOverSecondary = params.to.className === "secondary-target";
      },
      onStart: () => {
        this.dragging = true;
      },
      onEnd: () => {
        this.dragging = false;
      }
    });
    Sortable.create(this.secondaryContainer, {
      animation: 150,
      group: "apps",
      filter: ".secondary-drag-text",
      dragClass: "app-item--dragging",
      onUpdate: this.updateAppsProperties,
      onAdd: this.updateAppsProperties
    });
  }
  componentDidRender() {
    if (this.primaryContainer.contains(this.secondaryDragText)) {
      this.secondaryContainer.appendChild(this.secondaryDragText);
    }
  }
  async componentWillLoad() {
    var _a, _b;
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
    this.strings = locale[0];
    this.willQueryForItems = cookieForQueryingItemsExists();
    this.initializeConfig();
    if (!((_a = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) === null || _a === void 0 ? void 0 : _a.id) || !_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.user) {
      return;
    }
    if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal) {
      this.showInAppLauncher = await (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.g)();
    }
    const [config, marketplace, preferences, customOrgApps, orgCapabilities] = await Promise.all([
      (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.a)(),
      (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.b)(),
      (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.c)(),
      (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.d)(),
      (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.e)()
    ]);
    this.orgCapabilities = orgCapabilities;
    this.userProperties = (preferences === null || preferences === void 0 ? void 0 : preferences.properties) || {};
    this.userApps = config === null || config === void 0 ? void 0 : config.appSwitcher;
    if (!_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal) {
      this.userApps.apps.unshift(this.getAgoApp());
    }
    this.approvedApps =
      ((_b = customOrgApps.approvedApps) === null || _b === void 0 ? void 0 : _b.filter((app) => !app.hideForNonPrivilegedMember)) || [];
    if (!this.userProperties.appLauncher) {
      this.willQueryForItems = false;
      this.displayIntro = true;
    }
    this.provisionedListings = marketplace || [];
    this.provisionedListings.forEach((listing) => {
      var _a;
      const clientId = (_a = listing.clientId) === null || _a === void 0 ? void 0 : _a.toLowerCase();
      if (clientId) {
        licenses[clientId] = {
          valid: true,
          itemId: listing.itemId,
          clientId: listing.clientId
        };
      }
    });
    orgCapabilities === null || orgCapabilities === void 0 ? void 0 : orgCapabilities.forEach((capability) => {
      var _a;
      const capabilityId = (_a = capability.id) === null || _a === void 0 ? void 0 : _a.toLowerCase();
      if (capabilityId) {
        licenses[capabilityId] = {
          valid: true,
          clientId: capability.id
        };
      }
    });
    await this.init();
    this.primaryApps.forEach((app) => {
      app.fontSize = this.calcFontSize(app);
    });
  }
  convertToAppData(apps) {
    return apps.map((app) => ({ label: app.label, uid: app.itemId || app.title }));
  }
  getAppsByIds(ids) {
    const apps = [...this.primaryApps, ...this.secondaryApps];
    return ids.map((id) => apps.find((app) => app.itemId === id || app.title === id));
  }
  getIdsFromDOM(container) {
    const ids = [];
    container.querySelectorAll(".app-item").forEach((el) => {
      ids.push(el.dataset.id);
    });
    return ids;
  }
  getTextWidth(text) {
    const canvas = document.createElement("canvas"), context = canvas.getContext("2d");
    context.font = "avenir";
    const metrics = context.measureText(text);
    return metrics.width;
  }
  calcFontSize(app) {
    if (!app.abbr) {
      return;
    }
    const abbreviationSizes = [0, 32, 24, 20, 18, 16, 14, 12, 10, 8, 6];
    let strWidth = Math.ceil(this.getTextWidth(app.abbr) / 5);
    if (strWidth > abbreviationSizes.length - 1) {
      strWidth = abbreviationSizes.length - 1;
    }
    return `${abbreviationSizes[strWidth]}px`;
  }
  async getBlockedApps() {
    const [signinSettings, blockableApps] = await Promise.all([
      (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.f)(),
      (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.h)()
    ]);
    const clientIds = (signinSettings === null || signinSettings === void 0 ? void 0 : signinSettings.blockedApps) || [];
    if ((!clientIds.length && !signinSettings.blockBetaApps) || !(blockableApps === null || blockableApps === void 0 ? void 0 : blockableApps.length)) {
      return [];
    }
    if (signinSettings.blockBetaApps) {
      blockableApps.forEach((app) => {
        if (app.isBeta && !clientIds.includes(app.clientid)) {
          clientIds.push(app.clientid);
        }
      });
    }
    clientIds.forEach((id) => {
      const match = blockableApps.find((app) => app.clientid === id);
      if (match) {
        this.blockedApps.push(match);
      }
    });
    return this.blockedApps;
  }
  filterBlockedApps(apps) {
    return apps.filter((app) => {
      var _a;
      const inBlockedList = (_a = this.blockedApps) === null || _a === void 0 ? void 0 : _a.some((ba) => {
        return (app.itemId && app.itemId === ba.itemid) || (app.title && app.title === ba.title);
      });
      return !inBlockedList;
    });
  }
  populateAppIdentifiers(prev, app) {
    const list = Object.keys(this.appDictionary).map((key) => this.appDictionary[key]);
    let populatedApp = list.filter((a) => a.itemId === app.uid || a.title === app.uid).shift();
    if (populatedApp && !this.appDictionary[app.uid]) {
      app.uid = populatedApp.itemId || populatedApp.title;
    }
    if (populatedApp === null || populatedApp === void 0 ? void 0 : populatedApp.hasBeenPopulated) {
      return prev;
    }
    if (!populatedApp) {
      // App Can't be Found
      populatedApp = app;
      populatedApp.canAccess = false;
      populatedApp.itemId = app.uid;
      this.appDictionary[app.uid] = populatedApp;
    }
    else {
      // -- Insert into Dictionary --
      if ((app.hasChanged ||
        populatedApp.hasChanged ||
        (!populatedApp.canAccess && !populatedApp.ignoreNoAccess)) &&
        this.isAdmin()) {
        this.appDictionary[app.uid].hasChanged = true;
        this.appDictionary[app.uid].ignoreNoAccess = app.ignoreNoAccess;
      }
      if (app.isNew) {
        this.appDictionary[app.uid].isNew = true;
      }
      delete this.newAppDictionary[app.uid];
    }
    // -- Prevent duplicates from any possible error states
    this.appDictionary[app.uid].hasBeenPopulated = true;
    prev.push(populatedApp);
    return prev;
  }
  isInPortalConfig(title) {
    const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    return isInPortalConfig(title, portal, this.showInAppLauncher);
  }
  getAppExceptions() {
    const { portal, user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    return {
      "Open Data": {
        hasAccess: () => hasAccessToOpenData(portal)
      },
      AppStudio: {
        hasAccess: () => hasLicense("arcgisWebApps")
      },
      "ArcGIS Velocity": {
        hasAccess: () => hasAccessToVelocity(user)
      },
      "ArcGIS Hub": {
        hasAccess: () => hasLicense("HubforArcGIS")
      },
      "ArcGIS Enterprise Sites": {
        hasAccess: (title) => hasAccessToSites(portal, title, this.showInAppLauncher)
      },
      "ArcGIS Experience Builder": {
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "ArcGIS StoryMaps": {
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "ArcGIS QuickCapture Web Designer": {
        hasAccess: (title) => this.isInPortalConfig(title) && hasLicense("arcgisWebApps")
      },
      "ArcGIS Collector": {
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "ArcGIS Field Maps": {
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "ArcGIS Dashboards": {
        hasAccess: (title) => this.isInPortalConfig(title) && hasLicense("dashboards")
      },
      "ArcGIS Solutions": {
        // For Portal
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "ArcGIS Workforce": {
        // For Portal
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "Deep Learning Studio": {
        // For Portal
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "Map Viewer": {
        hasAccess: () => hasAccessToMapViewer(portal, this.newMapViewerEnabled) &&
          this.isInPortalConfig("ArcGIS Map Viewer")
      },
      "Map Viewer Classic": {
        hasAccess: () => hasLicense("arcgisWebApps") && this.isInPortalConfig("ArcGIS Map Viewer Classic")
      },
      "Operations Dashboard for ArcGIS": {
        hasAccess: () => hasLicense("opsdashboard") && this.isInPortalConfig("ArcGIS Dashboards Classic")
      },
      "ArcGIS Dashboards Classic": {
        hasAccess: (title) => hasLicense("opsdashboard") && this.isInPortalConfig(title)
      },
      "Ortho Maker": {
        hasAccess: () => hasAccessToOrthoMaker(portal, this.showInAppLauncher)
      },
      Notebook: {
        hasAccess: (title) => hasAccessToNotebooks(title, portal, user, this.showInAppLauncher, this.notebookServerEnabled)
      },
      "Scene Viewer": {
        hasAccess: (title) => hasLicense("arcgisWebApps") && this.isInPortalConfig(title)
      },
      "Story Maps": {
        hasAccess: () => hasLicense("arcgisWebApps")
      },
      Survey123: {
        hasAccess: () => hasLicense("survey123")
      },
      "Track Viewer": {
        hasAccess: () => hasAccessToTrackViewer(portal, this.showInAppLauncher, this.trackViewerEnabled)
      },
      "Instant Apps": {
        // For Portal
        hasAccess: (title) => hasLicense("arcgisWebApps") && this.isInPortalConfig(title)
      },
      "Vector Tile Style Editor": {
        // For Portal
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "ArcGIS GeoBIM": {
        // For Portal
        hasAccess: (title) => this.isInPortalConfig(title)
      },
      "ArcGIS Maps for Adobe Creative Cloud": {
        hasAccess: () => {
          return hasLicense("arcgisWebApps") && !_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal;
        }
      }
    };
  }
  getExcludedProvisionedListings() {
    let excluded = {
      opsdashboard: 1,
      arcgisWebApps: 1,
      Workforce: 1,
      geoplanner: 1,
      webappbuilder: 1,
      HubforArcGIS: 1,
      appstudio: 1,
      survey123: 1,
      storymaps: 1,
      mapsForOffice: 1,
      mapsForO365: 1,
      mapsForSharePoint: 1,
      mapsForCreativeCloud: 1
    };
    const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    if (portal.isPortal) {
      // exclude certain provisioned listings for Enterprise
      excluded = Object.assign(Object.assign({}, excluded), { arcgisonline: 1, arcgisUrban: 1, arcgisinstantapps: 1 });
    }
    return excluded;
  }
  getImagePath(app) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/${(app === null || app === void 0 ? void 0 : app.image) ? app.image : ""}`);
  }
  modifyWebAppForView(app) {
    var _a, _b;
    const img = ((_a = app.appSwitcher) === null || _a === void 0 ? void 0 : _a.image) || app.icon;
    if (img) {
      app.image = this.getWebMappingAppImgPath(app);
    }
    else {
      app.placeHolderIcon = `${this.getImagePath()}svg-app-circle.svg`;
    }
    app.abbr = ((_b = app.appSwitcher) === null || _b === void 0 ? void 0 : _b.abbr) || app.abbreviation;
    delete app.abbreviation;
    delete app.appSwitcher;
    delete app.approvedApp;
    delete app.webMappingApp;
    return app;
  }
  modifySystemAppForView(app, uniqueId) {
    var _a;
    const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    if (app.image) {
      app.image = this.getImagePath(app);
    }
    else {
      app.placeHolderIcon = `${this.getImagePath()}svg-app-icon.svg`;
    }
    // relative urls must be pointed at the org url (#25494)
    if (((_a = app.url) === null || _a === void 0 ? void 0 : _a.indexOf("../")) === 0) {
      const baseUrl = portal.urlKey
        ? `${portal.urlKey}.${portal.customBaseUrl}`
        : portal.portalHostname;
      app.url = `${location.protocol}//${baseUrl}${app.url.substring(2, app.url.length)}`;
    }
    delete app.isLicensed;
    delete app.privileges;
    app.itemId = uniqueId;
    return app;
  }
  getWebMappingAppImgPath(app) {
    const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    const token = (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_4__.h)(portal);
    if (!app.icon) {
      return `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_4__.g)()}content/items/${app.itemId}/resources/${app.appSwitcher.image}?token=${token}`;
    }
    return `${(0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_4__.g)()}portals/self/resources/${app.icon}?token=${token}`;
  }
  modifyPartnerAppForView(app) {
    var _a, _b, _c;
    app.appSwitcher = (_a = app.properties) === null || _a === void 0 ? void 0 : _a.appSwitcher;
    const customIcon = ((_b = app.appSwitcher) === null || _b === void 0 ? void 0 : _b.image) || app.icon;
    return {
      abbr: ((_c = app.appSwitcher) === null || _c === void 0 ? void 0 : _c.abbr) || app.abbreviation,
      itemId: app.itemId,
      canAccess: true,
      webMappingApp: true,
      image: customIcon ? this.getWebMappingAppImgPath(app) : null,
      label: app.title || app.label,
      url: app.url,
      placeHolderIcon: app.placeHolderIcon || `${this.getImagePath()}svg-app-circle.svg`
    };
  }
  async getLicensedApps() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { portal, user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    const allAppUids = {};
    const appDictionary = {};
    const exceptions = this.getAppExceptions();
    const excludedProvisionedListings = this.getExcludedProvisionedListings();
    const legalApps = [];
    const appCount = this.userApps.apps.length;
    for (let i = 0; i < appCount; i++) {
      const app = this.userApps.apps[i];
      const uid = app.itemId || app.title;
      let isPrivileged = true;
      const inBlockedList = (_a = this.blockedApps) === null || _a === void 0 ? void 0 : _a.some((ba) => (app.itemId && app.itemId === ba.itemid) || (app.title && app.title === ba.title));
      allAppUids[uid] = 1;
      appDictionary[uid] = app;
      if (inBlockedList) {
        continue;
      }
      const portalDeploymentType = portal.portalDeploymentType || ((_b = portal.sourceJSON) === null || _b === void 0 ? void 0 : _b.portalDeploymentType);
      if (portalDeploymentType === "ArcGISEnterpriseOnKubernetes" &&
        app.supportsKubernetes === false) {
        continue;
      }
      if (exceptions[app.title] && !exceptions[app.title].hasAccess(app.title)) {
        continue;
      }
      const subscriptionInfo = portal.subscriptionInfo || ((_c = portal.sourceJSON) === null || _c === void 0 ? void 0 : _c.subscriptionInfo);
      if (app.subscriptionType) {
        if ((subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type) === app.subscriptionType) {
          appDictionary[uid].canAccess = true;
          legalApps.push(this.modifySystemAppForView(app, uid));
        }
        continue;
      }
      if (app.orgCapabilities) {
        if ((_d = this.orgCapabilities) === null || _d === void 0 ? void 0 : _d.length) {
          const hasCapability = this.orgCapabilities.some((capability) => app.orgCapabilities.includes(capability.id));
          if (hasCapability) {
            appDictionary[uid].canAccess = true;
            legalApps.push(this.modifySystemAppForView(app, uid));
          }
        }
        continue;
      }
      if (!((_e = app.privileges) === null || _e === void 0 ? void 0 : _e.length) && !app.isLicensed && !app.serverFunction) {
        appDictionary[uid].canAccess = true;
        legalApps.push(this.modifySystemAppForView(app, uid));
        continue;
      }
      const skipPrivCheck = ((_f = user === null || user === void 0 ? void 0 : user.userLicenseTypeId) === null || _f === void 0 ? void 0 : _f.toLowerCase()) === "storytellerut" &&
        ((_g = app.label) === null || _g === void 0 ? void 0 : _g.toLowerCase()) === "storymaps";
      if (skipPrivCheck) {
        appDictionary[uid].canAccess = true;
        legalApps.push(this.modifySystemAppForView(app, uid));
        continue;
      }
      if (((_h = app.privileges) === null || _h === void 0 ? void 0 : _h.length) > 0 && (user === null || user === void 0 ? void 0 : user.privileges)) {
        for (let j = 0; j < app.privileges.length; j++) {
          if (user.privileges.indexOf(app.privileges[j]) < 0) {
            isPrivileged = false;
            break;
          }
        }
        if (!app.isLicensed && isPrivileged) {
          appDictionary[uid].canAccess = true;
          legalApps.push(this.modifySystemAppForView(app, uid));
          continue;
        }
      }
      if (app.isLicensed && isPrivileged) {
        for (let k = 0; k < this.provisionedListings.length; k++) {
          if (uid === this.provisionedListings[k].itemId ||
            uid === this.provisionedListings[k].title) {
            appDictionary[uid].canAccess = true;
            legalApps.push(this.modifySystemAppForView(app, uid));
            break;
          }
        }
      }
      if (app.serverFunction && isPrivileged) {
        if (this.servers.some((server) => {
          var _a;
          const functions = ((_a = server.serverFunction) === null || _a === void 0 ? void 0 : _a.split(",")) || [];
          return functions.includes(app.serverFunction);
        })) {
          appDictionary[uid].canAccess = true;
          legalApps.push(this.modifySystemAppForView(app, uid));
          continue;
        }
      }
    }
    // - Web mapping apps from Markeplace
    this.provisionedListings.forEach((app) => {
      if (app.type === "Web Mapping Application" &&
        !excludedProvisionedListings[app.clientId] &&
        !allAppUids[app.itemId] &&
        app.url &&
        app.title &&
        !allAppUids[app.title] &&
        app.typeKeywords.indexOf("hideFromAppSwitcher") < 0) {
        const modifiedApp = this.modifyPartnerAppForView(app);
        appDictionary[app.itemId] = modifiedApp;
        legalApps.push(modifiedApp);
      }
    });
    const apps = [
      ...this.approvedApps.map((app) => {
        const appProperties = Object.assign(Object.assign({}, app.appProperties), { itemId: app.itemId, webMappingApp: true, approvedApp: true, canAccess: !this.willQueryForItems });
        appDictionary[app.itemId] = appProperties;
        return this.modifyWebAppForView(appProperties);
      }),
      ...legalApps
    ];
    return {
      apps,
      appDictionary
    };
  }
  isAdmin() {
    const { user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    if (!user) {
      return false;
    }
    return user.role === "org_admin" || user.role === "account_admin";
  }
  // Map the uid of existing user properties to match the new title
  mapAppTitles(apps) {
    const { portal } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    apps.forEach((app) => {
      if (app.uid === "Map Viewer Beta") {
        app.uid = "Map Viewer";
      }
      if (portal.isPortal) {
        if (app.uid === "Operations Dashboard for ArcGIS") {
          app.uid = "ArcGIS Dashboards Classic";
        }
        else if (app.uid === "Workforce for ArcGIS") {
          app.uid = "ArcGIS Workforce";
        }
      }
    });
  }
  async init() {
    var _a;
    if (_config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal) {
      this.servers = await (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.i)();
    }
    await this.getBlockedApps();
    const { apps, appDictionary } = await this.getLicensedApps();
    this.appDictionary = appDictionary;
    if (this.userProperties.appLauncher) {
      if (this.userProperties.appLauncher.primary) {
        this.mapAppTitles(this.userProperties.appLauncher.primary);
      }
      if (this.userProperties.appLauncher.secondary) {
        this.mapAppTitles(this.userProperties.appLauncher.secondary);
      }
    }
    if (!this.userProperties.appLauncher ||
      !this.userProperties.appLauncher.primary ||
      !this.userProperties.appLauncher.secondary) {
      this.primaryApps = apps.slice().sort((a, b) => (a.label < b.label ? -1 : 1));
      this.primaryApps = this.filterBlockedApps(this.primaryApps);
      this.secondaryApps = [];
      return;
    }
    else {
      const response = await (0,_api_f7934cd7_js__WEBPACK_IMPORTED_MODULE_3__.q)(this.approvedApps, this.willQueryForItems);
      if (((_a = response === null || response === void 0 ? void 0 : response.results) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        response.results.forEach((item) => {
          const app = this.appDictionary[item.id];
          app.canAccess = true;
          app.hasChanged = app.url !== item.url ? !!item.url : false;
        });
      }
      this.newAppDictionary = Object.assign({}, this.appDictionary);
      this.userProperties.appLauncher.primary.forEach((p) => {
        if (p.label === "Map Viewer") {
          p.uid = "Map Viewer";
        }
      });
      this.primaryApps =
        this.userProperties.appLauncher.primary.reduce(this.populateAppIdentifiers.bind(this), []) || [];
      this.secondaryApps =
        this.userProperties.appLauncher.secondary.reduce(this.populateAppIdentifiers.bind(this), []) || [];
      this.primaryApps = this.filterBlockedApps(this.primaryApps);
      this.secondaryApps = this.filterBlockedApps(this.secondaryApps);
      // :: Check for New App Icons ::
      for (const app in this.newAppDictionary) {
        if (this.newAppDictionary[app].canAccess) {
          this.newAppDictionary[app].isNew = true;
          this.appDictionary[app] = this.newAppDictionary[app];
          this.primaryApps.push(this.newAppDictionary[app]);
        }
      }
      return;
    }
  }
  getAgoApp() {
    const { portal, user } = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c;
    const baseUrl = `${location.protocol}//${portal.urlKey ? `${portal.urlKey}.${portal.customBaseUrl}` : portal.portalHostname}/home/`;
    const { landingPage } = this.userProperties;
    const url = `${baseUrl}${(landingPage === null || landingPage === void 0 ? void 0 : landingPage.url) ? landingPage.url : (user === null || user === void 0 ? void 0 : user.isOrgAdmin) ? "organization.html" : "index.html"}`;
    return {
      image: "arcgis-online.png",
      label: "ArcGIS Online",
      title: "ArcGIS Online",
      url
    };
  }
  initializeConfig() {
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.api = this.api;
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.user = this.user;
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.portal = this.portal;
  }
  render() {
    const total = this.primaryApps.length + this.secondaryApps.length;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { onKeyDown: this.keydownHandler }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", kind: "neutral", class: { "toggle-button": true, "toggle-button--expanded": this.isExpanded }, "aria-label": this.strings.appLauncher, onClick: this.handleToggle, ref: (el) => (this.toggleButton = el), "aria-expanded": this.isExpanded }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: "toggle-button__icon", icon: "app-launcher", scale: "m" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "apps-content-container" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        "apps-content": true,
        "apps-content--rtl": rtl,
        "apps-content--expanded": this.isExpanded,
        "apps-content--dragging": this.dragging
      }, "aria-hidden": "false" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("nav", { class: "dropdown-menu dropdown-right", role: "menu" }, this.displayIntro && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "intro-container" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "drag-and-drop-intro intro-text" }, this.strings.dragDrop), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", onClick: this.handleDismissIntro }, this.strings.gotIt))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: "apps-list", ref: (el) => (this.primaryContainer = el) }, this.primaryApps.map((app, index) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { "data-id": app.itemId || app.title, key: app.itemId, class: { "app-item": true, "app-item--missing": !app.canAccess } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-app-switcher-link", { app: app, index: index, total: total, focusItemId: this.focusItemId, openText: this.strings.openWindow }))))), !this.secondaryExpanded && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "show-more", onClick: this.handleShowMore }, this.strings.showMore, " ", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "chevron-down", scale: "s" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        "secondary-container": true,
        "secondary-container--hidden": !this.secondaryExpanded
      }, "aria-expanded": "true" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: {
        "secondary-target": this.secondaryApps.length === 0,
        "secondary-list": this.secondaryApps.length !== 0,
        "secondary-target--hover": this.hoveringOverSecondary && this.secondaryApps.length === 0
      }, ref: (el) => (this.secondaryContainer = el) }, this.secondaryApps.length === 0 && !this.hoveringOverSecondary && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "secondary-drag-text", ref: (el) => (this.secondaryDragText = el) }, this.strings.dragSecondary)), this.secondaryApps.map((app, index) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { "data-id": app.itemId, key: app.itemId, class: { "app-item": true, "app-item--missing": !app.canAccess } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-app-switcher-link", { app: app, index: this.primaryApps.length + index, total: total, focusItemId: this.focusItemId, openText: this.strings.openWindow })))))))))));
  }
  static get assetsDirs() { return ["assets"]; }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "shouldExpand": ["handleShouldExpandChange"]
  }; }
};
ArcgisAppSwitcher.style = arcgisAppSwitcherCss;

const AppSwitcherLinkArrows = ({ index, total, active }) => {
  const isFirst = index === 0;
  const isFirstRow = index <= 2;
  const isLast = index === total - 1;
  const rowCount = Math.ceil(total / 3);
  const lastRowFirstIndex = rowCount * 3 - 3;
  const isLastRow = index >= lastRowFirstIndex;
  return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { "arrow--hidden": !active } },
    !isFirst && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--left" }),
    !isLast && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--right" }),
    !isFirstRow && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--top" }),
    !isLastRow && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--bottom" })));
};

const arcgisAppSwitcherLinkCss = ":host{display:block;height:93%}.app-link{display:block;padding-left:0.5rem;padding-right:0.5rem;padding-top:0.5rem;position:relative;height:100%;-webkit-user-select:text;-moz-user-select:text;user-select:text;text-decoration:none;color:inherit}.app-link:focus{outline:1px solid var(--calcite-ui-brand)}.arrow{position:absolute;height:0;width:0}.arrow--hidden{visibility:hidden}.arrow--left{border-right:5px solid var(--calcite-ui-brand);border-bottom:5px solid transparent;border-top:5px solid transparent;left:38px;top:27px}.arrow--right{border-left:5px solid var(--calcite-ui-brand);border-bottom:5px solid transparent;border-top:5px solid transparent;right:38px;top:27px}.arrow--top{border-bottom:5px solid var(--calcite-ui-brand);border-left:5px solid transparent;border-right:5px solid transparent;top:0;right:70px}.arrow--bottom{border-top:5px solid var(--calcite-ui-brand);border-left:5px solid transparent;border-right:5px solid transparent;top:59px;right:70px}.missing-icon .arrow--top{top:-4px}.icon-wrapper{display:block;text-align:center;background-repeat:no-repeat;background-size:contain;margin-top:0;margin-bottom:0;margin-left:auto;margin-right:auto;font-size:1.125rem;width:3rem;height:3rem;margin-bottom:0.5rem;color:var(--calcite-ui-text-2)}.icon-abbr{position:absolute;font-size:1.25rem;font-weight:700;width:3rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;color:var(--calcite-ui-foreground-1);line-height:3rem;text-shadow:0 1px 8px var(--calcite-ui-text-3);transform:translateZ(0)}.icon-img{pointer-events:none;width:3rem;height:3rem}.indicator{position:absolute;box-sizing:border-box;clear:both;width:1rem;height:1rem;border-radius:50%;border:2px solid var(--calcite-ui-foreground-1);z-index:50}.indicator--new{background-color:var(--calcite-ui-success);top:4px;right:46px}.indicator--new-rtl{right:auto;left:46px}.indicator--remove{display:flex;align-items:center;justify-content:center;cursor:pointer;background-color:var(--calcite-ui-foreground-1);line-height:2px;padding:1px;right:42px;top:2px}.indicator--remove-rtl{right:auto;left:42px}.indicator--remove:hover,.indicator--remove:focus{outline:2px solid transparent;outline-offset:2px;border-color:var(--calcite-ui-danger);color:var(--calcite-ui-danger)}.missing-icon{text-align:center;cursor:pointer;display:block;margin-top:0;margin-bottom:0;margin-left:auto;margin-right:auto;background-color:var(--calcite-ui-foreground-3);height:3rem;width:3rem;margin-bottom:0.5rem;box-sizing:border-box;border:1px dashed var(--calcite-ui-inverse);border-radius:6px;outline-color:var(--calcite-ui-brand)}.label-text{margin-top:0;margin-bottom:0;margin-left:auto;margin-right:auto;text-align:center;display:block;line-height:17px;width:128px}.screen-readers{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}";

const ArcgisAppLink = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisAppSwitcherLinkActivated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkActivated", 7);
    this.arcgisAppSwitcherLinkMove = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkMove", 7);
    this.arcgisAppSwitcherLinkRemove = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkRemove", 7);
    this.arcgisAppSwitcherLinkClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkClick", 7);
    this.isFirstRow = false;
    this.isLastRow = false;
    this.moveElement = (keyCode) => {
      this.arcgisAppSwitcherLinkMove.emit({
        uid: this.app.itemId || this.app.title,
        index: this.index,
        keyCode
      });
    };
    this.handleKey = (evt) => {
      let keyMatch = true;
      switch (evt.code) {
        case "Space":
          this.sortingActive = !this.sortingActive;
          this.arcgisAppSwitcherLinkActivated.emit();
          break;
        case "ArrowUp":
        case "ArrowRight":
        case "ArrowDown":
        case "ArrowLeft":
          if (this.sortingActive) {
            this.moveElement(evt.code);
          }
          break;
        default:
          keyMatch = false;
          break;
      }
      if (keyMatch) {
        evt.preventDefault();
        evt.stopPropagation();
      }
    };
    this.handleBlur = () => {
      this.sortingActive = false;
    };
    this.handleRemove = () => {
      this.arcgisAppSwitcherLinkRemove.emit(this.app.itemId || this.app.title);
    };
    this.handleRemoveKeydown = (evt) => {
      switch (evt.code) {
        case "Space":
        case "Enter":
          this.handleRemove();
          evt.preventDefault();
          break;
      }
    };
    this.handleClick = () => {
      this.arcgisAppSwitcherLinkClick.emit();
    };
    this.app = undefined;
    this.index = undefined;
    this.total = undefined;
    this.focusItemId = undefined;
    this.openText = undefined;
    this.sortingActive = false;
  }
  componentDidRender() {
    var _a, _b;
    if (this.focusItemId &&
      (this.focusItemId === this.app.itemId || this.focusItemId === this.app.title)) {
      this.sortingActive = true;
      if (this.app.canAccess) {
        (_a = this.linkElement) === null || _a === void 0 ? void 0 : _a.focus();
      }
      else if (!this.app.canAccess) {
        (_b = this.missingElement) === null || _b === void 0 ? void 0 : _b.focus();
      }
    }
  }
  render() {
    var _a;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_6__.g)(this.el) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, ((_a = this.app) === null || _a === void 0 ? void 0 : _a.canAccess) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", { ref: (el) => (this.linkElement = el), href: this.app.url, class: "app-link", onKeyDown: this.handleKey, onBlur: this.handleBlur, onClick: this.handleClick, draggable: false, target: "_blank", role: "menuitem" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "icon-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(AppSwitcherLinkArrows, { active: this.sortingActive, index: this.index, total: this.total }), !this.app.image && this.app.abbr && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { style: { fontSize: this.app.fontSize || "20px" }, class: "avenir icon-abbr" }, this.app.abbr)), !this.app.image && this.app.abbr && this.app.placeHolderIcon && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { src: this.app.placeHolderIcon, alt: "" })), this.app.image && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { src: this.app.image, class: "icon-img", alt: "" })), this.app.isNew && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { indicator: true, "indicator--new": true, "indicator--new-rtl": rtl } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "label-text" }, this.app.label), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers" }, this.openText))), this.app && !this.app.canAccess && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { indicator: true, "indicator--remove": true, "indicator--remove-rtl": rtl }, tabIndex: 0, onClick: this.handleRemove, onKeyDown: this.handleRemoveKeydown }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.missingElement = el), class: "missing-icon", tabIndex: 0, onKeyDown: this.handleKey, onBlur: this.handleBlur }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(AppSwitcherLinkArrows, { active: this.sortingActive, index: this.index, total: this.total })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "label-text" }, this.app.label)))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAppLink.style = arcgisAppSwitcherLinkCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-d7f5822e.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getCookie),
/* harmony export */   b: () => (/* binding */ setCookie),
/* harmony export */   c: () => (/* binding */ setSessionStorageItem),
/* harmony export */   d: () => (/* binding */ getSessionStorageItem),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
  writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
  const cookie = readCookie(name);
  return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
  window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
  const item = window.localStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
  window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
  const item = window.sessionStorage.getItem(name);
  return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
  const cookie = document.cookie;
  const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
  const matchedCookies = cookie.match(cookieNameRE);
  return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
  properties = properties || {};
  let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
  if (typeof expires === "number") {
    const expirationDate = new Date();
    const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
    expirationDate.setTime(Date.now() + daysFromTodayInMs);
    expires = properties.expires = expirationDate;
  }
  if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
    properties.expires = expires.toUTCString();
  }
  let cookie = `${name}=${encodeURIComponent(value)}`;
  let property;
  for (property in properties) {
    cookie += `; ${property}`;
    const propertyValue = properties[property];
    if (propertyValue !== true) {
      cookie += `=${propertyValue}`;
    }
  }
  document.cookie = cookie;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,