"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-98bdc7"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-share.entry.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-share.entry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_item_share: () => (/* binding */ ArcgisItemShare)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _services_adddeef9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services-adddeef9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-adddeef9.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./privileges-ccd5f37d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-ccd5f37d.js");
/* harmony import */ var _item_d9d70416_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./item-d9d70416.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-d9d70416.js");
/* harmony import */ var _utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-fba8960d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-fba8960d.js");
/* harmony import */ var _server_item_f12153e6_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./server-item-f12153e6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-f12153e6.js");
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./item-properties-e6412a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-e6412a9a.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/* harmony import */ var _add_item_97d577a9_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./add-item-97d577a9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-97d577a9.js");
/* harmony import */ var _ui_ecf86bba_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui-ecf86bba.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-ecf86bba.js");
/* harmony import */ var _functional_9f648bee_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./functional-9f648bee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-9f648bee.js");
/* harmony import */ var _item_types_b4fe86ad_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./item-types-b4fe86ad.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-b4fe86ad.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




















const arcgisItemShareCss = ".stage{height:100%}.group-browser-modal{--calcite-modal-width:1080px;--calcite-modal-content-padding:0}arcgis-group-browser{height:min(700px, 60vh)}.hidden{display:none}.section:not(:last-child){margin-bottom:2rem}calcite-flow{height:100%}.content-container{margin-top:0.5rem}.active-but-not-selected{position:relative;z-index:2}.tile-select-wrapper{position:relative}.share-hint{display:flex;align-items:center;position:absolute;font-size:0.875rem;inset-inline-end:0.5rem;top:0.5rem;z-index:3}.share-hint>p{margin-top:0;margin-bottom:0;-webkit-margin-start:0.5rem;margin-inline-start:0.5rem;margin-top:2px}.information-text{font-weight:500;margin-top:0;margin-bottom:0;margin-top:0.5rem;font-size:0.875rem}.group-item-counter{font-size:0.875rem;margin-top:0;margin-bottom:0}.revert-single-group-cta:first-child,.group-item-counter:first-child{-webkit-margin-start:0.5rem;margin-inline-start:0.5rem}";

const ArcgisItemShare = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.workflowCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowCancel", 7);
    this.workflowComplete = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowComplete", 7);
    this.initialShareLevels = [];
    this.initialSelectedGroupData = [];
    /**
     * Selected by all items, some items or no items
     *
     * Used to determine if we should show the revert button on each group card
     *  */
    this.initialSelectedGroupDataLookup = {};
    this.showOptions = false;
    this.shareLevelOptions = ["private", "org", "public"];
    this.possibleShareLevelOptions = [
      "private",
      "org",
      "public"
    ];
    this.shareLevelIcon = {
      private: "user",
      org: "organization",
      public: "globe"
    };
    this.isPublicUser = false;
    this.hasItemBlockedFromPublic = false;
    this.hasPrivateItem = false;
    this.shareMode = "default";
    this.hasIndoorsSpaces = false;
    this.sharingDetailToEmit = null;
    this.didUpdateSharingDetail = false;
    this.shareItemResult = null;
    this.handleNewShareResult = async () => {
      const { items, portal, shareItemResult: { newShareLevel, newGroupShared }, 
      // This should already have the latest update
      selectedGroupData } = this;
      // * Reset item to get ready for the review sharing state
      let newItems = [...items];
      if (newShareLevel != null) {
        newItems = items.map((item) => {
          if (newShareLevel !== "private") {
            return Object.assign(Object.assign({}, item), { access: newShareLevel });
          }
          // If the new level is private but the item is currently shared to a group,
          //  we need to make sure it's marked as "shared" instead of "private"
          const isItemCurrentlySharedToGroups = selectedGroupData === null || selectedGroupData === void 0 ? void 0 : selectedGroupData.some(({ selectedByItemIds }) => selectedByItemIds.includes(item.id));
          return Object.assign(Object.assign({}, item), { access: isItemCurrentlySharedToGroups ? "shared" : "private" });
        });
      }
      // If we're not sharing to any group, we need to make sure every "shared" item is marked as "private"
      if (!(selectedGroupData === null || selectedGroupData === void 0 ? void 0 : selectedGroupData.length)) {
        newItems = newItems.map((item) => item.access === "shared" ? Object.assign(Object.assign({}, item), { access: "private" }) : item);
      }
      // And vice versa if we're (fully) sharing to at least one new group
      if (newGroupShared.length) {
        newItems = newItems.map((item) => item.access === "private" ? Object.assign(Object.assign({}, item), { access: "shared" }) : item);
      }
      this.items = newItems;
      // * Analyze and decide whether we should show the dep check dialog
      const analyzeResults = await Promise.all(newItems.map((item) => (0,_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_1__.a)(item, portal)));
      const newShareDetail = analyzeResults.reduce((acc, { result }) => {
        if (result) {
          Object.keys(result).forEach((key) => {
            acc[key] = [...acc[key], ...result[key]];
          });
        }
        return acc;
      }, Object.assign({}, _utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.D));
      this.sharingDetail = newShareDetail;
      // The watch for `hasSharingIssue` will be automatically triggered next
    };
    // * Other utils and renders
    this.updateSharing = async () => {
      var _a;
      this.loadingText = this.i18n.updatingInfo;
      this.isLoading = true;
      const { items, selectedShareLevels, initialSelectedGroupData, selectedGroupData, portal, user, isShareLevelDirty, checkItemPDCIssue, confirmedPDC } = this;
      const { shareGroupIds, unshareGroupIds } = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.g)(initialSelectedGroupData, selectedGroupData);
      if (!confirmedPDC && !(await checkItemPDCIssue())) {
        return;
      }
      // ! This assume that all items have the same share level once the user choose something
      const newShareLevel = isShareLevelDirty || items.length === 1 ? selectedShareLevels[0] : null;
      // Need to unshare first in case the user is public
      // (public user can only share to group if the share level is public)
      const unsharePromise = unshareGroupIds.length
        ? (0,_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_1__.u)(items.map((item) => item.id), unshareGroupIds, { portal, user })
        : undefined;
      const sharePromise = shareGroupIds.length || isShareLevelDirty
        ? (0,_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_1__.b)(items, newShareLevel, shareGroupIds, { portal, user })
        : undefined;
      const [shareResult] = await Promise.all([sharePromise, unsharePromise]);
      // ! We don't set loading to false in case the consumers want to keep loading
      // They can remove the modal completely
      // * ---
      const shareItemResult = {
        // TODO: hair splitting this since different items can lead to different results
        newGroupShared: shareGroupIds.filter((id) => !(shareResult === null || shareResult === void 0 ? void 0 : shareResult.result.some(({ notSharedWith }) => notSharedWith.includes(id)))),
        newGroupUnshared: unshareGroupIds,
        newShareLevel,
        shareErrors: (_a = shareResult === null || shareResult === void 0 ? void 0 : shareResult.result.filter(({ error }) => error).map(({ itemId }) => {
          return { item: items.find((curItem) => curItem.id === itemId), code: "notSharedWith" };
        })) !== null && _a !== void 0 ? _a : []
      };
      this.shareItemResult = shareItemResult;
      this.handleNewShareResult();
    };
    this.checkItemPDCIssue = async () => {
      const { items, portal, isShareLevelDirty, selectedShareLevels } = this;
      const hostedItems = items.filter((item) => (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_6__.i)(item.typeKeywords, item.type));
      // ! If the share level is dirty, this means the share level is selected to something else
      //  meaning all the share level is converged to the same level since that's the only use case
      const publicOptionSelected = isShareLevelDirty && selectedShareLevels[0] === "public";
      /**
       * if we have hosted services and we're sharing publicly, check for editable layers and warn user
       * WebGIS/arcgis-portal-app#27002, WebGIS/arcgis-portal-app#26285
       */
      if (hostedItems.length > 0 && publicOptionSelected) {
        this.isLoading = true;
        const editableCheck = await Promise.all(hostedItems.map((item) => (0,_item_d9d70416_js__WEBPACK_IMPORTED_MODULE_6__.e)(item, portal)));
        this.isLoading = false;
        const editableItems = hostedItems.filter((_, index) => editableCheck[index]);
        if (editableItems.length) {
          const publicDataCollectionDisabled = !editableItems.every((item) => item.typeKeywords.includes("Public Data Collection"));
          this.confirmationDialogType = publicDataCollectionDisabled
            ? "publicDataCollectionDisabled"
            : "publicDataCollectionEnabled";
          return false;
        }
      }
      return true;
    };
    this.handleNewPendingSelectedGroups = (newGroups) => {
      const { items, pendingGroupBrowserData, selectedGroupData } = this;
      const curSelectedGroupLookup = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__.a)(pendingGroupBrowserData.groupData, (groupData) => ({
        key: groupData.group.id,
        data: groupData
      }));
      const allItemIds = items.map((item) => item.id);
      const newSelectedGroupData = newGroups.map((group) => {
        // If the group was previously selected, use the previous data
        //  else set selectedByItemIds to all items' ids
        const prevGroupData = curSelectedGroupLookup[group.id];
        if (prevGroupData) {
          return prevGroupData;
        }
        return { group, selectedByItemIds: allItemIds };
      });
      this.pendingGroupBrowserData = {
        groupData: newSelectedGroupData,
        groupDataLookup: (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__.a)(newSelectedGroupData, (groupData) => ({
          key: groupData.group.id,
          data: true
        })),
        groupCount: newSelectedGroupData.reduce((acc, cur) => {
          acc[cur.group.id] = cur.selectedByItemIds.length;
          return acc;
        }, {}),
        isDirty: (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.i)(newSelectedGroupData, selectedGroupData)
      };
    };
    this.revertShareLevel = () => {
      this.selectedShareLevels = [...this.initialShareLevels];
    };
    this.setShareLevel = (newShareLevel) => {
      this.selectedShareLevels = this.selectedShareLevels.map(() => newShareLevel);
    };
    this.revertGroupData = () => {
      this.selectedGroupData = [...this.initialSelectedGroupData];
    };
    this.revertPendingGroupData = (groupId) => {
      const { initialSelectedGroupData, pendingGroupBrowserData, handleNewPendingSelectedGroups } = this;
      const initialGroupData = initialSelectedGroupData.find(({ group }) => group.id === groupId);
      const curGroupData = pendingGroupBrowserData.groupData;
      const curSelectedGroupData = curGroupData.find(({ group }) => group.id === groupId);
      let newGroupData = [];
      if (!initialGroupData) {
        // This means initially we don't have this group
        newGroupData = curGroupData.filter(({ group }) => group.id !== groupId);
      }
      else if (!curSelectedGroupData) {
        // This means we removed the group
        newGroupData = [...curGroupData, initialGroupData];
      }
      else {
        newGroupData = curGroupData.map((groupData) => {
          if (groupData.group.id !== groupId) {
            return groupData;
          }
          return initialGroupData;
        });
      }
      handleNewPendingSelectedGroups(newGroupData.map(({ group }) => group));
    };
    this.applyPendingGroupData = () => {
      this.selectedGroupData = [...this.pendingGroupBrowserData.groupData];
      this.unBrowseGroups();
    };
    this.closeDialog = (event) => {
      var _a, _b;
      // Stop the close event from arcgis-dependency-check from propagating
      event === null || event === void 0 ? void 0 : event.stopPropagation();
      const { workflowCancel, currentStep } = this;
      if (currentStep !== "finish") {
        workflowCancel.emit({
          newShareLevel: (_b = (_a = this.shareItemResult) === null || _a === void 0 ? void 0 : _a.newShareLevel) !== null && _b !== void 0 ? _b : null,
          cancelAtStep: currentStep
        });
      }
    };
    this.unBrowseGroups = () => {
      this.isBrowsingGroups = false;
    };
    this.renderGroupBrowser = () => {
      const { api, i18n, user, portal, config, pendingGroupBrowserData, browserPagination, browserGroups, handleNewPendingSelectedGroups, isBrowsingGroups, isPublicUser, items, shareMode, groupBrowserQ, initialSelectedGroupDataLookup, revertPendingGroupData, hasIndoorsSpaces, groupBrowserAllUsers, groupBrowserSearchUsername, hasPrivateItem } = this;
      const totalItemCount = items.length;
      const showFilterByUsers = shareMode === "admin" && !hasPrivateItem && groupBrowserAllUsers.length > 1;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser", { view: "compact", class: { hidden: !isBrowsingGroups }, config: config, user: user, api: api, portal: portal, selection: "multiple", searchUser: groupBrowserSearchUsername, selectedGroups: pendingGroupBrowserData.groupData.map((data) => data.group), hasIndoorsSpaces: hasIndoorsSpaces, q: groupBrowserQ, onArcgisGroupBrowserUpdate: (e) => {
          const { results, num, start, total } = e.detail;
          // TODO: remove this assert
          this.browserGroups = results;
          this.browserPagination = { start, num, total };
        }, onArcgisGroupBrowserLoading: () => {
          this.browserGroups = [];
        }, onArcgisGroupBrowserSelect: (e) => handleNewPendingSelectedGroups(e.detail) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-top-bar", { slot: "top-bar", "filter-toggle": true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-search", { slot: "search", term: "" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-sort", { slot: "sort" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filters", { slot: "filters" }, showFilterByUsers && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filter-groups-by-user", { searchUsernames: groupBrowserAllUsers.map((user) => user.username), searchUsername: groupBrowserSearchUsername, onArcgisGroupBrowserUsernamesFilter: (event) => {
          this.groupBrowserSearchUsername = event.detail;
        } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filter-owner", { searchUsername: groupBrowserSearchUsername }), !isPublicUser && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filter-membership", null), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filter-member-org", null), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filter-special-groups", null))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filter-date", { property: "modified" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-filter-date", { property: "created" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-content", { slot: "content", class: "js-content" }, (browserGroups || []).map((group) => {
        const groupId = group.id;
        return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-share-group-card", { key: groupId, user: user, portal: portal, i18n: i18n, group: group, groupCount: pendingGroupBrowserData.groupCount, initialSelectedGroupDataLookup: initialSelectedGroupDataLookup, selectedGroupDataLookup: pendingGroupBrowserData.groupDataLookup, totalItemCount: totalItemCount, onRevertClick: () => {
            // By opening the group browser, the public user already have
            //  to switch the share to PUBLIC already so there is no need
            //  to spin up the confirmation modal
            revertPendingGroupData(groupId);
          } }));
      })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-pagination", { slot: "pagination", class: "js-pagination", total: browserPagination === null || browserPagination === void 0 ? void 0 : browserPagination.total, start: browserPagination === null || browserPagination === void 0 ? void 0 : browserPagination.start, num: browserPagination === null || browserPagination === void 0 ? void 0 : browserPagination.num })));
    };
    this.renderShareSelectGroup = () => {
      const { config, hasItemBlockedFromPublic, hasSingleShareLevel, i18n, initialSelectedGroupData, isBrowsingGroups, isLoading, isPublicUser, isShareLevelDirty, items, loadingText, portal, possibleShareLevelOptions, revertGroupData, revertShareLevel, selectedGroupData, selectedShareLevels, setShareLevel, shareLevelCount, shareLevelIcon, shareLevelOptions, shareMode, showOptions, user, hasPrivateItem } = this;
      const totalItemCount = items.length;
      const totalItemCountStr = totalItemCount.toString();
      const disabledText = hasItemBlockedFromPublic
        ? i18n.sharingLimitedItemDisclaimer
        : i18n.cannotShareToLevelDisclaimer;
      return (
      // ! Hidden instead of unmount to prevent data refetch
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { hidden: isBrowsingGroups } }, isLoading && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-loader", { active: isLoading, text: loadingText }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.shareLevel.title, headerSideContent: isShareLevelDirty && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", iconStart: "reset", disabled: isLoading, onClick: () => {
            // if a public user tries to revert item levels
            // and the initial share level includes at least one private item
            // and those items have also been shared to groups
            // display a warning modal
            if ((0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.c)(user, items, selectedGroupData)) {
              this.confirmationDialogType = "publicAccountRevertShareLevel";
              return;
            }
            revertShareLevel();
          } }, i18n.revert)) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content-container" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select-group", { layout: "vertical", class: "tile-select" }, showOptions &&
        _utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.d.map((option) => {
          const cannotSelect = !possibleShareLevelOptions.includes(option);
          if (cannotSelect && isPublicUser) {
            // We only want to hide the option for public user
            //  in other cases, we just want to disable them
            return null;
          }
          const itemCount = shareLevelCount[option] + (option === "private" ? shareLevelCount.shared : 0);
          const hasItemInCategory = itemCount > 0;
          const itemCountStr = itemCount.toString();
          const title = i18n.shareLevel.level[option].title;
          return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "tile-select-wrapper", key: option }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select", { checked: hasSingleShareLevel && hasItemInCategory, heading: title, "aria-label": cannotSelect ? disabledText : undefined, description: i18n.shareLevel.level[option][
            // public users have a different text description for the "everyone" share level (WebGIS/arcgis-portal-app#26405)
            isPublicUser && option === "public"
              ? "descriptionPublicUser"
              : "description"], name: "dev-cred-create-mode", inputEnabled: true, width: "full", type: "radio", value: option, icon: shareLevelIcon[option], disabled: isLoading || cannotSelect, class: {
              "active-but-not-selected": hasItemInCategory && !hasSingleShareLevel
            }, onCalciteTileSelectChange: (e) => {
              const newShareLevel = e.target.value;
              // if a public user tries to set item(s) to private
              // and the items are shared to groups
              // display a warning modal
              if ((0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.e)(user, newShareLevel, selectedGroupData)) {
                this.confirmationDialogType = "publicAccountSetShareToPrivate";
                return;
              }
              setShareLevel(newShareLevel);
            } }), !hasSingleShareLevel && hasItemInCategory && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "share-hint" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-information", { label: i18n.shareCountLabel, paddedContent: true, placement: "bottom-end", overlayPositioning: "fixed" }, i18n.shareCountTooltip
            .replace("${shareLevel}", title)
            .replace("${numItem}", itemCountStr)
            .replace("${totalItem}", totalItemCountStr)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", null, i18n.shareCountHint
            .replace("${numItem}", itemCountStr)
            .replace("${totalItem}", totalItemCountStr))))));
        })), showOptions && possibleShareLevelOptions.length < shareLevelOptions.length && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "information-text" }, i18n.sharingLimitedDisclaimer)), (!showOptions || !possibleShareLevelOptions.length) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "information-text" }, i18n.noShareDisclaimer)))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-share-group", { items: items, user: user, portal: portal, config: config, shareMode: shareMode, i18n: i18n.shareGroup, isLoading: isLoading, onEditGroupClick: () => {
          // Public account needs to share item to public before sharing to groups
          if ((0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.s)(user, selectedShareLevels)) {
            this.confirmationDialogType = "publicAccountOpenGroupBrowser";
            return;
          }
          this.isBrowsingGroups = true;
        }, onAnalyzeUserGroupComplete: (e) => {
          const { initialSelectedGroups: selectedGroupData, userGroupLookup, allUsers, searchUsername } = e.detail;
          this.initialSelectedGroupData = selectedGroupData;
          this.selectedGroupData = selectedGroupData;
          this.initialSelectedGroupDataLookup = (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_3__.a)(selectedGroupData, ({ group, selectedByItemIds }) => ({
            key: group.id,
            data: selectedByItemIds.length === 0
              ? "none"
              : selectedByItemIds.length === totalItemCount
                ? "all"
                : "indeterminate"
          }));
          this.groupBrowserSearchUsername = searchUsername;
          this.groupBrowserAllUsers = allUsers;
          this.groupBrowserQ = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.a)({
            shareMode,
            currentUsername: searchUsername,
            user,
            userGroupLookup,
            isPrivate: hasPrivateItem
          });
        }, onDirtyChange: (e) => (this.isSelectedGroupsDirty = e.detail), onRemoveClick: () => (this.selectedGroupData = []), onRevertClick: () => {
          if ((0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.b)(user, selectedShareLevels, initialSelectedGroupData)) {
            this.confirmationDialogType = "publicAccountRevertGroup";
            return;
          }
          revertGroupData();
        }, selectedGroupData: selectedGroupData }))));
    };
    this.renderShareModal = () => {
      const { closeDialog, i18n, isLoading, updateSharing, isShareLevelDirty, isSelectedGroupsDirty, isBrowsingGroups, applyPendingGroupData, unBrowseGroups, renderShareSelectGroup, renderGroupBrowser, currentStep, hasSharingIssue, pendingGroupBrowserData } = this;
      const hasChanges = isShareLevelDirty || isSelectedGroupsDirty;
      return ((currentStep === "share" || hasSharingIssue === null) && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { onCalciteModalClose: closeDialog,
        // ! Don't use the condition directly here or the `onCalciteModalClose` will be triggered
        open: true, width: isBrowsingGroups ? "m" : "s", outsideCloseDisabled: true, escapeDisabled: true, class: { "group-browser-modal": isBrowsingGroups } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header" }, i18n[isBrowsingGroups ? "titleGroup" : "title"]), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "stage" }, renderGroupBrowser(), renderShareSelectGroup()), !isBrowsingGroups ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "outline", kind: "brand", "data-id": "cancelButton", onClick: () => closeDialog(), width: "full" }, i18n.cancel), hasChanges && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "solid", kind: "brand", "data-id": "nextButton", onClick: updateSharing, width: "full", disabled: isLoading }, i18n.save)))) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "outline", kind: "brand", "data-id": "cancelButton", onClick: unBrowseGroups, width: "full" }, i18n.cancel), pendingGroupBrowserData.isDirty && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "solid", kind: "brand", onClick: applyPendingGroupData, width: "full" }, i18n.apply)))))));
    };
    this.renderDepCheckModal = () => {
      const { api, config, portal, user, items, closeDialog, hasSharingIssue, sharingDetail } = this;
      return (hasSharingIssue && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-dependency-check", { api: api, items: items.map((item) => ({ item })), portal: portal, user: user, config: config,
        // ! Don't use the condition directly here or the `onCalciteModalClose` will be triggered
        isActive: true, preProcessedSharingDetail: sharingDetail, onWorkflowCancel: closeDialog, onWorkflowComplete: (event) => {
          event.stopPropagation();
          this.didUpdateSharingDetail = true;
          // We don't call this since we just want to close the modal
          //  but if we want to show any underlying issue after recheck, we can enable it
          // checkSharingIssue(selectedItems);
          // Revert sharing detail to trigger the end state
          this.sharingDetailToEmit = Object.assign({}, sharingDetail);
          this.sharingDetail = Object.assign({}, _utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.D);
        } })));
    };
    this.renderConfirmationDialog = () => {
      const { confirmationDialogType } = this;
      if (!confirmationDialogType) {
        return null;
      }
      const { i18n, isLoading, revertShareLevel, setShareLevel, revertGroupData } = this;
      const { title, description } = i18n.shareWarning[confirmationDialogType];
      const isPDCDisabledError = confirmationDialogType === "publicDataCollectionDisabled";
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { onCalciteModalClose: (event) => {
          event.stopPropagation();
          this.confirmationDialogType = null;
        }, open: !!this.confirmationDialogType, width: "s", outsideCloseDisabled: true, escapeDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header", class: "header" }, title), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content" }, description), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: isPDCDisabledError ? "solid" : "outline", kind: "brand", "data-id": "cancelButton", onClick: () => (this.confirmationDialogType = null), width: "full" }, i18n[isPDCDisabledError ? "ok" : "cancel"]), !isPDCDisabledError && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "solid", kind: "brand", "data-id": "nextButton", onClick: () => {
          switch (confirmationDialogType) {
            case "publicAccountOpenGroupBrowser":
              setShareLevel("public");
              this.isBrowsingGroups = true;
              break;
            case "publicAccountSetShareToPrivate":
              setShareLevel("private");
              this.selectedGroupData = [];
              break;
            case "publicAccountRevertShareLevel":
              revertShareLevel();
              this.selectedGroupData = [];
              break;
            case "publicAccountRevertGroup":
              setShareLevel("public");
              revertGroupData();
              break;
            case "publicDataCollectionEnabled":
              this.confirmedPDC = true;
              this.updateSharing();
              break;
          }
          this.confirmationDialogType = null;
        }, width: "full", disabled: isLoading }, i18n.update))));
    };
    this.api = undefined;
    this.user = undefined;
    this.portal = undefined;
    this.config = undefined;
    this.items = undefined;
    this.hasTrustedOrgs = false;
    this.isLoading = undefined;
    this.selectedShareLevels = [];
    this.isShareLevelDirty = false;
    this.shareLevelCount = {
      private: 0,
      shared: 0,
      org: 0,
      public: 0
    };
    this.hasSingleShareLevel = false;
    this.selectedGroupData = [];
    this.isSelectedGroupsDirty = false;
    this.loadingText = null;
    this.isBrowsingGroups = false;
    this.confirmationDialogType = null;
    this.confirmedPDC = false;
    this.browserPagination = undefined;
    this.browserGroups = [];
    this.pendingGroupBrowserData = {
      groupData: [],
      groupDataLookup: {},
      groupCount: {},
      isDirty: false
    };
    this.groupBrowserQ = "";
    this.groupBrowserSearchUsername = "";
    this.groupBrowserAllUsers = [];
    this.currentStep = "share";
    this.sharingDetail = null;
    this.hasSharingIssue = null;
  }
  handleIsBrowsingGroupsChange() {
    if (this.isBrowsingGroups) {
      this.handleNewPendingSelectedGroups(this.selectedGroupData.map(({ group }) => group));
    }
  }
  handleShareLevelChange() {
    const { selectedShareLevels, initialShareLevels, selectedGroupData, items } = this;
    this.isShareLevelDirty = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.f)(selectedShareLevels, initialShareLevels, items, selectedGroupData);
    this.shareLevelCount = selectedShareLevels.reduce((acc, cur) => {
      acc[cur]++;
      return acc;
    }, { private: 0, shared: 0, org: 0, public: 0 });
    this.hasSingleShareLevel = selectedShareLevels.every((cur) => cur === selectedShareLevels[0]);
  }
  async componentWillLoad() {
    var _a;
    this.items = this.items.map((item) => { var _a; return (_a = item.sourceJSON) !== null && _a !== void 0 ? _a : item; });
    const { items, portal, user, el } = this;
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_4__.g)(el);
    this.i18n = locale[0];
    // This assume that once the loading text changes to updatingInfo,
    //  it will not change back to retrievingInfo
    this.loadingText = this.i18n.retrievingInfo;
    _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_2__.c.api = this.api;
    this.isPublicUser = (0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_5__.n)(user);
    this.initialShareLevels = items.map((item) => item.access);
    this.selectedShareLevels = [...this.initialShareLevels];
    this.possibleShareLevelOptions = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.h)(user, items, portal);
    const shareMode = (0,_utils_fba8960d_js__WEBPACK_IMPORTED_MODULE_7__.j)(items, user, portal);
    this.showOptions = shareMode !== "group";
    this.shareMode = shareMode;
    this.hasPrivateItem = items.some((item) => item.access === "private");
    const subscriptionInfo = (portal === null || portal === void 0 ? void 0 : portal.subscriptionInfo) || ((_a = portal === null || portal === void 0 ? void 0 : portal.sourceJSON) === null || _a === void 0 ? void 0 : _a.subscriptionInfo);
    this.hasItemBlockedFromPublic =
      items.some(_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_1__.c) ||
        ((0,_privileges_ccd5f37d_js__WEBPACK_IMPORTED_MODULE_5__.c)(subscriptionInfo) && items.some(_services_adddeef9_js__WEBPACK_IMPORTED_MODULE_1__.d));
    this.hasIndoorsSpaces = items.some((item) => { var _a; return (_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("EditExtensionIndoorsSpaces"); });
  }
  handleSharingDetailChange() {
    const { sharingDetail } = this;
    this.hasSharingIssue =
      sharingDetail !== null
        ? Object.keys(sharingDetail).some((detailType) => sharingDetail[detailType].length > 0)
        : null;
  }
  handleHasSharingIssueChange() {
    const { hasSharingIssue } = this;
    if (hasSharingIssue) {
      this.currentStep = "review-sharing";
    }
    else if (hasSharingIssue === false) {
      this.currentStep = "finish";
    }
  }
  handleCurrentStepChange() {
    var _a, _b;
    const { currentStep, didUpdateSharingDetail, workflowComplete, sharingDetailToEmit, shareItemResult } = this;
    if (currentStep !== "finish") {
      return;
    }
    const didUpdateDependentLayersSharing = didUpdateSharingDetail;
    workflowComplete.emit({
      // No point in updating dep layers if the users didn't go through review sharing flow
      dependentLayersWithSourceItems: didUpdateDependentLayersSharing && sharingDetailToEmit
        ? Object.values(sharingDetailToEmit).reduce((acc, itemSharingDetailResults) => {
          acc.push(...itemSharingDetailResults.map(({ layer, sourceItem }) => ({
            layer,
            sourceItem
          })));
          return acc;
        }, [])
        : [],
      newShareLevel: (_a = shareItemResult === null || shareItemResult === void 0 ? void 0 : shareItemResult.newShareLevel) !== null && _a !== void 0 ? _a : null,
      shareErrors: (_b = shareItemResult === null || shareItemResult === void 0 ? void 0 : shareItemResult.shareErrors) !== null && _b !== void 0 ? _b : [],
      didUpdateDependentLayersSharing
    });
  }
  render() {
    const { renderShareModal, renderDepCheckModal, renderConfirmationDialog } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, renderShareModal(), renderDepCheckModal(), renderConfirmationDialog()));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "isBrowsingGroups": ["handleIsBrowsingGroupsChange"],
    "selectedShareLevels": ["handleShareLevelChange"],
    "sharingDetail": ["handleSharingDetailChange"],
    "hasSharingIssue": ["handleHasSharingIssueChange"],
    "currentStep": ["handleCurrentStepChange"]
  }; }
};
ArcgisItemShare.style = arcgisItemShareCss;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,