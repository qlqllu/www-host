"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_common-85280d"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js":
/*!*****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: () => (/* binding */ LastSortyBy),
/* harmony export */   a: () => (/* binding */ fieldTypesEnum),
/* harmony export */   f: () => (/* binding */ fieldInfoPrefixEnum),
/* harmony export */   i: () => (/* binding */ imageComponentInputTypesEnum),
/* harmony export */   l: () => (/* binding */ layerDisplayTypeEnum),
/* harmony export */   s: () => (/* binding */ serviceTypeEnum)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
var imageComponentInputTypesEnum;
(function (imageComponentInputTypesEnum) {
  imageComponentInputTypesEnum["sourceUrl"] = "sourceUrl";
  imageComponentInputTypesEnum["title"] = "title";
  imageComponentInputTypesEnum["caption"] = "caption";
  imageComponentInputTypesEnum["linkUrl"] = "linkUrl";
  imageComponentInputTypesEnum["altText"] = "altText";
})(imageComponentInputTypesEnum || (imageComponentInputTypesEnum = {}));
var fieldInfoPrefixEnum;
(function (fieldInfoPrefixEnum) {
  fieldInfoPrefixEnum["expression"] = "expression/";
  fieldInfoPrefixEnum["relationship"] = "relationships/";
  fieldInfoPrefixEnum["raster"] = "Raster.";
})(fieldInfoPrefixEnum || (fieldInfoPrefixEnum = {}));
var layerDisplayTypeEnum;
(function (layerDisplayTypeEnum) {
  layerDisplayTypeEnum["feature"] = "feature";
  layerDisplayTypeEnum["cluster"] = "cluster";
  layerDisplayTypeEnum["mapNotes"] = "mapNotes";
})(layerDisplayTypeEnum || (layerDisplayTypeEnum = {}));
var serviceTypeEnum;
(function (serviceTypeEnum) {
  serviceTypeEnum["feature"] = "feature";
  serviceTypeEnum["mapImage"] = "map-image";
  serviceTypeEnum["scene"] = "scene";
  serviceTypeEnum["ogcFeature"] = "ogc-feature";
  serviceTypeEnum["imagery"] = "imagery";
  serviceTypeEnum["wfs"] = "wfs";
  serviceTypeEnum["wms"] = "wms";
  serviceTypeEnum["csv"] = "csv";
  serviceTypeEnum["geojson"] = "geojson";
  serviceTypeEnum["stream"] = "stream";
  serviceTypeEnum["imageryTile"] = "imagery-tile";
  serviceTypeEnum["tile"] = "tile";
  serviceTypeEnum["subtype"] = "subtype";
})(serviceTypeEnum || (serviceTypeEnum = {}));
// https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html#type
var fieldTypesEnum;
(function (fieldTypesEnum) {
  fieldTypesEnum["integer"] = "integer";
  fieldTypesEnum["smallInteger"] = "small-integer";
  fieldTypesEnum["bigInteger"] = "big-integer";
  fieldTypesEnum["single"] = "single";
  fieldTypesEnum["double"] = "double";
  fieldTypesEnum["long"] = "long";
  fieldTypesEnum["string"] = "string";
  fieldTypesEnum["date"] = "date";
  fieldTypesEnum["dateOnly"] = "date-only";
  fieldTypesEnum["timeOnly"] = "time-only";
  fieldTypesEnum["timestampOffset"] = "timestamp-offset";
  fieldTypesEnum["oid"] = "oid";
  fieldTypesEnum["guid"] = "guid";
  fieldTypesEnum["globalId"] = "global-id";
  fieldTypesEnum["number"] = "number"; // for arcade
})(fieldTypesEnum || (fieldTypesEnum = {}));
var LastSortyBy;
(function (LastSortyBy) {
  LastSortyBy["default"] = "default";
  LastSortyBy["display"] = "display";
  LastSortyBy["type"] = "type";
  LastSortyBy["field"] = "field";
})(LastSortyBy || (LastSortyBy = {}));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js":
/*!*********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getFieldType),
/* harmony export */   b: () => (/* binding */ getFieldDisplayName),
/* harmony export */   c: () => (/* binding */ getServiceType),
/* harmony export */   d: () => (/* binding */ generateLayerFieldsMap),
/* harmony export */   e: () => (/* binding */ generateArcadeExpressionMap),
/* harmony export */   f: () => (/* binding */ identifyOnMapImageLayer),
/* harmony export */   g: () => (/* binding */ getFeatureCount),
/* harmony export */   h: () => (/* binding */ getLayerGeometryType),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   j: () => (/* binding */ getFieldsFromLayer),
/* harmony export */   k: () => (/* binding */ getClusterFields),
/* harmony export */   l: () => (/* binding */ getSingleClusterFeature),
/* harmony export */   m: () => (/* binding */ getSingleFeature),
/* harmony export */   n: () => (/* binding */ getRasterCount),
/* harmony export */   o: () => (/* binding */ getPointFromGeometry),
/* harmony export */   p: () => (/* binding */ getServiceVersion),
/* harmony export */   q: () => (/* binding */ queryParentElement)
/* harmony export */ });
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



// display name from fields for arcade
function getFieldDisplayName(field, arcadeMap) {
  if (field.fieldName.indexOf(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.f.expression) !== -1) {
    const tempArcade = arcadeMap.get(field.fieldName);
    return (tempArcade === null || tempArcade === void 0 ? void 0 : tempArcade.title) ? tempArcade.title : field.fieldName;
  }
  else {
    return field.label ? field.label : field.fieldName;
  }
}
function generateArcadeExpressionMap(popupTemplate) {
  const arcadeExpMap = new Map();
  if (popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.expressionInfos) {
    popupTemplate.expressionInfos.forEach((expression) => {
      const expressionNameWithPrefix = `${_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.f.expression}${expression.name}`;
      arcadeExpMap.set(expressionNameWithPrefix, expression);
    });
  }
  return arcadeExpMap;
}
async function generateLayerFieldsMap(layer) {
  return new Map((await getFieldsFromLayer(layer))
    .filter((field) => field.visible)
    .map((field) => [field.name, field]));
}
async function getSingleFeature(layer, mapView) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
  try {
    const serviceType = getServiceType(layer);
    if (serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.mapImage &&
      layer.layer.version >= 10.5 &&
      !((_b = (_a = layer.layer.capabilities) === null || _a === void 0 ? void 0 : _a.operations) === null || _b === void 0 ? void 0 : _b.supportsQuery) &&
      ((_d = (_c = layer.layer.capabilities) === null || _c === void 0 ? void 0 : _c.operations) === null || _d === void 0 ? void 0 : _d.supportsIdentify)) {
      const currFeature = {
        features: [
          (await identifyOnMapImageLayer(layer, mapView)) ||
            (await generateSingleFeature(layer))
        ]
      };
      return currFeature;
    }
    if (serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.scene &&
      !((_f = (_e = layer.capabilities) === null || _e === void 0 ? void 0 : _e.operations) === null || _f === void 0 ? void 0 : _f.supportsQuery)) {
      const singleFeature = {
        features: [await generateSingleFeature(layer)]
      };
      return singleFeature;
    }
    const currentLayer = serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.ogcFeature
      ? (await mapView.whenLayerView(layer))
      : serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.stream
        ? (await mapView.whenLayerView(layer))
        : layer;
    const queryParams = currentLayer.createQuery();
    queryParams.where =
      currentLayer.definitionExpression || "1=1";
    queryParams.outFields = ["*"];
    queryParams.returnM = "hasM" in layer && layer.hasM;
    queryParams.returnZ = "hasZ" in layer && layer.hasZ;
    // pagination always supported for OGCFeatureLayerView
    if (((_h = (_g = currentLayer.sourceJSON) === null || _g === void 0 ? void 0 : _g.advancedQueryCapabilities) === null || _h === void 0 ? void 0 : _h.supportsPagination) ||
      serviceType === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.ogcFeature) {
      queryParams.start = 0;
      queryParams.num = 1;
    }
    queryParams.outSpatialReference = mapView.spatialReference;
    const singleFeatureResponse = await currentLayer.queryFeatures(queryParams);
    if (((_j = singleFeatureResponse === null || singleFeatureResponse === void 0 ? void 0 : singleFeatureResponse.features) === null || _j === void 0 ? void 0 : _j.length) === 0) {
      singleFeatureResponse.features[0] = await generateSingleFeature(layer);
    }
    return singleFeatureResponse;
  }
  catch (error) {
    console.error(error);
  }
}
async function generateSingleFeature(layer) {
  return new Promise((resolve, reject) => {
    (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/Graphic", "esri/geometry/Geometry"]).then(([Graphic, Geometry]) => {
      var _a;
      const tempGraphic = new Graphic();
      if ((_a = layer.fields) === null || _a === void 0 ? void 0 : _a.length) {
        const tempAttributes = {};
        layer.fields.forEach((feature) => {
          tempAttributes[feature.name] = feature.defaultValue;
        });
        tempGraphic.attributes = tempAttributes;
      }
      if (layer.geometryType) {
        const tempGeometry = new Geometry();
        tempGeometry.type = layer.geometryType;
        tempGraphic.geometry = tempGeometry;
      }
      resolve(tempGraphic);
    }, (error) => {
      reject(error);
    });
  });
}
function getServiceType(layer) {
  var _a, _b, _c;
  if (((_a = layer === null || layer === void 0 ? void 0 : layer.layer) === null || _a === void 0 ? void 0 : _a.type) === "map-image") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.mapImage;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "subtype-sublayer") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.subtype;
  }
  if (((_b = layer === null || layer === void 0 ? void 0 : layer.layer) === null || _b === void 0 ? void 0 : _b.type) === "tile") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.tile;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "scene") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.scene;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "ogc-feature") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.ogcFeature;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "imagery") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.imagery;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "imagery-tile") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.imageryTile;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "wfs") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.wfs;
  }
  if (((_c = layer === null || layer === void 0 ? void 0 : layer.layer) === null || _c === void 0 ? void 0 : _c.type) === "wms") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.wms;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "csv") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.csv;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "geojson") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.geojson;
  }
  if ((layer === null || layer === void 0 ? void 0 : layer.type) === "stream") {
    return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.stream;
  }
  return _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.feature;
}
function getServiceVersion(layer) {
  const type = getServiceType(layer);
  let version;
  if (type === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.wms || type === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.mapImage) {
    version = layer === null || layer === void 0 ? void 0 : layer.layer.version;
  }
  else if (type === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.imagery || type === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.feature || type === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.scene) {
    version = layer
      .version;
  }
  return Number.parseFloat(version);
}
// ThematicGroup fields are different than regular layer.fields
async function getFieldsFromLayer(layer) {
  return new Promise(async (resolve, reject) => {
    var _a, _b, _c, _d;
    const type = getServiceType(layer);
    switch (type) {
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.feature:
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.ogcFeature:
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.stream:
        resolve(layer.fields);
        break;
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.mapImage:
        if (((_a = layer === null || layer === void 0 ? void 0 : layer.layer) === null || _a === void 0 ? void 0 : _a.portalItem) &&
          ((_b = layer.layer) === null || _b === void 0 ? void 0 : _b.url.indexOf("https://demographics")) > -1 &&
          ((_c = layer.layer) === null || _c === void 0 ? void 0 : _c.url.indexOf(".arcgis.com")) > -1) {
          try {
            const response = await ((_d = layer.layer.portalItem) === null || _d === void 0 ? void 0 : _d.fetchData());
            if (response === null || response === void 0 ? void 0 : response.thematicGroup) {
              // create hash map for search optimization
              const layerFieldMap = new Map(layer.fields.map((field) => [field.name, field]));
              const fieldNames = response.thematicGroup.fieldNames;
              const returnFields = [];
              fieldNames.forEach((currentField) => {
                if (layerFieldMap.has(currentField)) {
                  returnFields.push(layerFieldMap.get(currentField));
                }
              });
              resolve(returnFields);
            }
            else {
              resolve(layer.fields);
            }
          }
          catch (error) {
            reject(error);
          }
        }
        else {
          resolve(layer.fields);
        }
        break;
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.imagery:
        const iLayer = layer;
        resolve((iLayer.fields || []).concat(iLayer.rasterFields || []));
        break;
      case _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.imageryTile:
        // not sure why it used to be popupTemplate.fieldInfos...
        resolve(/* layer.popupTemplate?.fieldInfos || */ layer.rasterFields);
        break;
      default:
        resolve("fields" in layer && layer.fields);
    }
  });
}
async function getLayerGeometryType(layer) {
  return new Promise(async (resolve) => {
    var _a, _b, _c, _d, _e;
    if (getServiceType(layer) === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.stream) {
      resolve("point");
    }
    else if (layer.geometryType) {
      resolve(layer.geometryType);
    }
    else {
      if (getServiceType(layer) === _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.s.mapImage && ((_b = (_a = layer === null || layer === void 0 ? void 0 : layer.layer) === null || _a === void 0 ? void 0 : _a.sourceJSON) === null || _b === void 0 ? void 0 : _b.layers)) {
        const tempGeometryType = (_d = (_c = layer.layer.sourceJSON.layers
          .find((sourceJSONLayer) => {
          if (sourceJSONLayer.id === layer.id) {
            return sourceJSONLayer;
          }
        })) === null || _c === void 0 ? void 0 : _c.geometryType) === null || _d === void 0 ? void 0 : _d.toLowerCase();
        if (tempGeometryType) {
          if (tempGeometryType.indexOf("point") > -1) {
            resolve("point");
          }
          else if (tempGeometryType.indexOf("line") > -1) {
            resolve("polyline");
          }
          else if (tempGeometryType.indexOf("polygon") > -1) {
            resolve("polygon");
          }
          else {
            resolve(tempGeometryType);
          }
        }
        else {
          // try to get it via sublayer.createFeatureLayer();
          const subLayer = (_e = layer === null || layer === void 0 ? void 0 : layer.layer) === null || _e === void 0 ? void 0 : _e.findSublayerById(layer.id);
          if (subLayer) {
            await (subLayer === null || subLayer === void 0 ? void 0 : subLayer.createFeatureLayer().then(async (featureLayer) => {
              const fLayer = await (featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.load());
              resolve(fLayer === null || fLayer === void 0 ? void 0 : fLayer.geometryType);
            }));
          }
          else {
            resolve(null);
          }
        }
      }
      else {
        resolve(null);
      }
    }
  });
}
function getFieldType(fieldName, layerFieldsMap, arcadeExpMap) {
  let type = "";
  if (/^raster.(item|service)pixelvalue/i.test(fieldName)) {
    // e.g. "Raster.ServicePixelValue" | "Raster.ItemPixelValue" | "Raster.ServicePixelValue.Raw"
    // layer.rasterFields reports them as type "string"
    type = "number";
  }
  else if (layerFieldsMap.has(fieldName)) {
    const fieldType = layerFieldsMap.get(fieldName);
    type = fieldType.type ? fieldType.type.toLowerCase() : "";
  }
  else if (arcadeExpMap.has(fieldName)) {
    const arcadeField = arcadeExpMap.get(fieldName);
    type = arcadeField.returnType ? arcadeField.returnType.toLowerCase() : "";
  }
  else {
    // default to number for cluster
    type = "number";
  }
  return type;
}
/**
 * Returns feature count of layer
 * @param layer - FeatureLayer | WFSLayer | OGCFeatureLayer | StreamLayer | CSVLayer
 * @param mapView - View
 */
async function getFeatureCount(layer, view) {
  if (layer.type === "feature" && !layer.url) {
    return getFeatureCountForCollection(layer);
  }
  else if (layer.type === "feature" ||
    layer.type === "csv" ||
    layer.type === "scene" ||
    layer.type === "wfs" ||
    layer.type === "geojson") {
    return await layer.queryFeatureCount();
  }
  else if (view && (layer.type === "stream" || layer.type === "ogc-feature")) {
    return getFeatureCountFromView(layer, view);
  }
}
/**
 * Returns feature count of feature collection layer
 * @param layer - FeatureLayer
 */
async function getFeatureCountForCollection(layer) {
  var _a;
  const query = layer.createQuery();
  query.outFields = ["*"];
  const result = await layer.queryFeatures(query);
  if ((_a = result.features) === null || _a === void 0 ? void 0 : _a.length) {
    return result.features.length;
  }
  else {
    throw new Error("could not get feature count");
  }
}
/**
 * Returns feature count of feature collection layer
 * @param layer - StreamLayer | OGCFeatureLayer
 */
async function getFeatureCountFromView(layer, view) {
  // we can only get the features from the map
  const layerView = (await view.whenLayerView(layer));
  return layerView.queryFeatureCount();
}
/**
 * Returns raster count of imagery layer
 * @param layer - Imagerylayer
 */
async function getRasterCount(layer) {
  if (!layer.url) {
    throw new Error("could not get layer.url");
  }
  const [execute] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/rest/query/executeForCount"]);
  const count = await execute.executeForCount(layer.url, {});
  if (count) {
    return count;
  }
  else {
    throw new Error("could not get raster count");
  }
}
const getClusterFields = (popupTemplate, getExpressionFields) => {
  let tempFields = [];
  popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos.forEach((fieldInfo) => {
    if (fieldInfo.fieldName.includes(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.f.expression)) {
      // from layer.renderer, to be used as a field for cluster labeling
      // also needed for the existing option in arcade
      getExpressionFields &&
        tempFields.push({
          name: fieldInfo.fieldName.slice(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.f.expression.length),
          alias: fieldInfo.fieldName.slice(_commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_0__.f.expression.length),
          type: "string"
        });
    }
    else {
      tempFields.push({ name: fieldInfo.fieldName, alias: fieldInfo.label, type: "string" });
    }
  });
  return tempFields;
};
/**
 * Find an element up the DOM tree.
 * @param el - HTMLElement
 * @param selector - Selector
 */
function queryParentElement(el, selector) {
  let isIDSelector = selector.indexOf("#") === 0;
  let isClassSelector = selector.indexOf(".") === 0;
  if (isClassSelector || isIDSelector) {
    selector = selector.slice(1);
  }
  while (el) {
    if (isIDSelector) {
      if (el.id === selector) {
        return el;
      }
    }
    else if (isClassSelector) {
      if (el.classList.contains(selector)) {
        return el;
      }
    }
    else if (el.tagName.toLowerCase() === selector.toLowerCase()) {
      return el;
    }
    el = el.parentElement;
  }
  return null;
}
/**
 * Returns true if the value is defined
 * @param value - value to check
 */
function isDefined(value) {
  return value !== undefined && value !== null;
}
const identifyOnMapImageLayer = async (layer, mapView) => {
  var _a, _b;
  const [identify, IdentifyParameters] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)([
    "esri/rest/identify",
    "esri/rest/support/IdentifyParameters"
  ]);
  const paramters = new IdentifyParameters();
  paramters.geometry = mapView.extent;
  paramters.mapExtent = mapView.extent;
  paramters.returnGeometry = true;
  paramters.tolerance = 6;
  paramters.layerOption = "popup";
  paramters.width = mapView.width;
  paramters.height = mapView.height;
  paramters.layerIds = [layer.id];
  const identifyResults = (_a = (await identify.identify(layer.layer.url, paramters))) === null || _a === void 0 ? void 0 : _a.results;
  const currFeature = (_b = identifyResults === null || identifyResults === void 0 ? void 0 : identifyResults[0]) === null || _b === void 0 ? void 0 : _b.feature;
  return currFeature;
};
const getSingleClusterFeature = async (mapView, layer, popupTemplate) => {
  var _a;
  const layerView = await mapView.whenLayerView(layer);
  const clusterFeatureSet = await layerView.queryAggregates();
  return await generateSingleClusterFeature(popupTemplate, (_a = clusterFeatureSet.features) === null || _a === void 0 ? void 0 : _a[0]);
};
const generateSingleClusterFeature = async (popupTemplate, currGraphic) => {
  const [Graphic, PointGeometry] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/Graphic", "esri/geometry/Point"]);
  let clusterGraphic;
  if (currGraphic) {
    clusterGraphic = currGraphic.clone();
  }
  else {
    clusterGraphic = new Graphic();
    const fields = getClusterFields(popupTemplate, false);
    if (fields === null || fields === void 0 ? void 0 : fields.length) {
      const tempAttributes = {};
      fields.forEach((feature) => {
        tempAttributes[feature.name] = "";
      });
      clusterGraphic.attributes = tempAttributes;
    }
    const tempGeometry = new PointGeometry();
    clusterGraphic.geometry = tempGeometry;
  }
  return clusterGraphic;
};
function getPointFromGeometry(geometry) {
  var _a;
  if (!geometry) {
    return null;
  }
  switch (geometry.type) {
    case "point":
      return geometry;
    case "extent":
      return geometry.center;
    case "polygon":
      return geometry.centroid;
    case "multipoint":
    case "polyline":
      return (_a = geometry.extent) === null || _a === void 0 ? void 0 : _a.center;
    default:
      return null;
  }
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,