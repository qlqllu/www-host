"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-b887ec"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-upload_3.entry.js":
/*!************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-upload_3.entry.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_image_upload: () => (/* binding */ ArcgisImageUpload),
/* harmony export */   arcgis_image_upload_edit_step: () => (/* binding */ ArcgisImageUploadEditStep),
/* harmony export */   arcgis_image_upload_file_step: () => (/* binding */ ArcgisImageUploadFileStep)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */






const arcgisImageUploadCss = ".image-upload__modal{--calcite-modal-width:650px}.image-upload__title{font-size:1.25rem;margin-bottom:0}.image-upload__content{padding-top:1rem;padding-bottom:1.5rem;padding-left:2rem;padding-right:2rem;box-sizing:border-box;background-color:var(--calcite-ui-background);border:1px solid var(--calcite-ui-border-3)}.image-upload__content--with-map{min-height:400px}.image-upload__content--no-padding{padding:0}.image-upload__canvas{visibility:hidden;position:fixed;left:-10000px}.or-container{margin-top:1rem;margin-bottom:1rem;text-align:center;font-weight:500}.or-container:before,.or-container:after{display:inline-block;vertical-align:middle;content:\"\";border-top:solid 1px var(--calcite-ui-border-input);width:15%;height:1px;z-index:1}.or-wrapper{padding-left:0.5rem;padding-right:0.5rem}.image-upload__from-map-button{background-color:var(--calcite-ui-foreground-1);text-align:center;padding:1rem;border:1px solid var(--calcite-ui-foreground-3)}.image-upload__from-map-button:hover{border:1px solid var(--calcite-ui-brand)}.image-upload__from-map-title{display:inline-block}.from-map-title-wrapper{display:flex;align-items:center}.from-map-icon{margin-right:0.5rem}.image-upload__from-map-desc{font-size:0.875rem;margin:0}";

const ArcgisImageUpload = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisImageUploadCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageUploadCancel", 7);
    this.arcgisImageUploadError = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageUploadError", 7);
    this.arcgisImageUploadSave = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageUploadSave", 7);
    this.imageFormat = "png";
    this.fileName = "";
    this.handleCancel = () => {
      this.showError = false;
      this.arcgisImageUploadCancel.emit();
    };
    this.handleChooseDiffClick = () => {
      this.activeStep = "file";
      this.previewSrc = "";
      this.editExisting = false;
    };
    this.handleSaveClick = async () => {
      if (this.activeStep === "file") {
        this.showError = true;
        return;
      }
      this.showError = false;
      this.saving = true;
      if (this.activeStep === "map") {
        this.takeMapScreenshot();
        return;
      }
      const data = await this.getCanvasImage();
      this.arcgisImageUploadSave.emit(data);
    };
    this.takeMapScreenshot = async () => {
      if (this.mapView["_stage"]) {
        this.mapView["_stage"]["_supersampleScreenshots"] = false;
      }
      const result = await this.mapView.takeScreenshot({
        format: "png"
      });
      const data = {
        blob: this.dataURIToBlob(result.dataUrl),
        base64: result.dataUrl,
        format: "png",
        fileName: ""
      };
      this.arcgisImageUploadSave.emit(data);
    };
    this.handleFromMapClick = () => {
      this.activeStep = "map";
    };
    this.handleMapViewLoaded = (evt) => {
      this.mapView = evt.detail;
    };
    this.modalTitle = undefined;
    this.sizeDescription = undefined;
    this.zoomToFit = true;
    this.maxWidth = undefined;
    this.maxHeight = undefined;
    this.fillBackground = false;
    this.active = undefined;
    this.height = window.innerWidth < 412 ? 200 : 300;
    this.aspectRatio = 1;
    this.portal = undefined;
    this.itemId = undefined;
    this.jsapiUrl = undefined;
    this.previewSrc = undefined;
    this.saving = false;
    this.editExisting = false;
    this.isModified = false;
    this.activeStep = "file";
    this.showError = false;
  }
  handleFileChange(evt) {
    const { fileName, dataURL } = evt.detail;
    this.fileName = fileName;
    this.previewSrc = dataURL;
    this.activeStep = "edit";
    this.showError = false;
  }
  handleInvalidFile() {
    this.showError = true;
    this.arcgisImageUploadError.emit("invalid file type.");
  }
  handleImageChange() {
    this.isModified = true;
  }
  handleActiveChange() {
    var _a;
    if (!this.active) {
      this.activeStep = "file";
      this.saving = false;
      this.isModified = false;
      this.previewSrc = "";
      this.editExisting = false;
      (_a = this.fileStep) === null || _a === void 0 ? void 0 : _a.resetFileInput();
    }
  }
  async componentWillLoad() {
    const locale = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
    this.strings = locale[0];
  }
  dataURIToBlob(dataURI) {
    const byteString = atob(dataURI.split(",")[1]);
    const mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
    const arrayBuffer = new ArrayBuffer(byteString.length);
    const uintArray = new Uint8Array(arrayBuffer);
    for (let i = 0; i < byteString.length; i++) {
      uintArray[i] = byteString.charCodeAt(i);
    }
    const blob = new Blob([arrayBuffer], {
      type: mimeString
    });
    return blob;
  }
  drawImage({ selectionX, selectionY, selectionWidth, selectionHeight, canvasWidth, canvasHeight, minWidth, minHeight, drawDimensions }, scaleFactor, img, context) {
    this.canvasEl.width = canvasWidth < minWidth ? minWidth : canvasWidth * scaleFactor;
    this.canvasEl.height = canvasHeight < minHeight ? minHeight : canvasHeight * scaleFactor;
    if (this.maxWidth) {
      if (this.canvasEl.width > this.maxWidth) {
        this.canvasEl.width = this.maxWidth;
      }
    }
    if (this.maxHeight) {
      if (this.canvasEl.height > this.maxHeight) {
        this.canvasEl.height = this.maxHeight;
      }
    }
    const left = drawDimensions.left * this.canvasEl.width;
    const top = drawDimensions.top * this.canvasEl.height;
    const width = drawDimensions.width * this.canvasEl.width;
    const height = drawDimensions.height * this.canvasEl.height;
    if (this.fillBackground) {
      context.fillStyle = "#efefef";
      context.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height);
    }
    context.drawImage(img, selectionX, selectionY, selectionWidth, selectionHeight, left, top, width, height);
    const base64 = this.canvasEl.toDataURL("image/png");
    const blob = this.dataURIToBlob(base64);
    return {
      base64,
      blob
    };
  }
  async getScaledImageData(img) {
    const context = this.canvasEl.getContext("2d");
    const drawParameters = await this.editStepEl.getDrawParameters();
    let results;
    function retry() {
      context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);
      return this.drawImage(drawParameters, 1600 / img.width, img, context);
    }
    try {
      results = this.drawImage(drawParameters, 1, img, context);
      if (results.blob.size > 10000000 || results.blob.size === 0) {
        results = retry();
      }
    }
    catch (e) {
      if (e.name !== "NS_ERROR_FAILURE") {
        this.arcgisImageUploadError.emit("unable to save the image provided.");
      }
      else {
        results = retry();
      }
    }
    return {
      blob: results === null || results === void 0 ? void 0 : results.blob,
      base64: results === null || results === void 0 ? void 0 : results.base64,
      format: this.imageFormat,
      fileName: this.fileName
    };
  }
  getCanvasImage() {
    return new Promise((resolve) => {
      const img = new Image();
      if (this.previewSrc.indexOf("arcgis.com") > -1) {
        img.crossOrigin = "Anonymous";
      }
      img.onload = () => {
        const properAspectRatio = Math.abs(this.aspectRatio - img.width / img.height) < 0.01;
        if (properAspectRatio && !this.isModified) {
          resolve({
            blob: this.dataURIToBlob(this.previewSrc),
            base64: this.previewSrc,
            format: this.imageFormat,
            fileName: this.fileName
          });
          return;
        }
        resolve(this.getScaledImageData(img));
      };
      img.src = this.previewSrc;
    });
  }
  render() {
    const hasMap = !!this.portal && !!this.itemId && !!this.jsapiUrl;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { class: "image-upload__modal", open: this.active, role: "dialog", "aria-modal": "true", "aria-labelledby": "image-upload-modal-title", outsideCloseDisabled: true, onCalciteModalClose: this.handleCancel }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { slot: "header", id: "image-upload-modal-title", class: "image-upload__title", "aria-label": this.modalTitle }, this.modalTitle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: {
        "image-upload__content": true,
        "image-upload__content--with-map": hasMap,
        "image-upload__content--no-padding": this.activeStep === "map"
      } }, this.activeStep === "file" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-upload-file-step", { ref: (el) => {
        this.fileStep = el;
      }, strings: this.strings, sizeDescription: this.sizeDescription }), hasMap && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "or-container" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "or-wrapper" }, this.strings.or)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-upload__from-map-button", tabIndex: 0, onClick: this.handleFromMapClick, onKeyDown: (evt) => {
        if (evt.code === "Space" || evt.code === "Enter") {
          this.handleFromMapClick();
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-upload__from-map-title" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "from-map-title-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "map", scale: "m", class: "from-map-icon" }), this.strings.fromMap)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "image-upload__from-map-desc" }, this.strings.fromMapDesc)))))), this.activeStep === "map" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-upload-from-map", { portal: this.portal, itemId: this.itemId, jsapiUrl: this.jsapiUrl, changeBasemapText: this.strings.changeBasemap, loadingText: this.strings.loading, onArcgisImageUploadFromMapReady: this.handleMapViewLoaded })), this.activeStep === "edit" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-upload-edit-step", { ref: (el) => {
        this.editStepEl = el;
      }, strings: this.strings, height: this.height, aspectRatio: this.aspectRatio, previewSrc: this.previewSrc, zoomToFit: this.zoomToFit })), this.activeStep === "edit" && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("canvas", { ref: (el) => {
        this.canvasEl = el;
      }, class: "image-upload__canvas" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { label: this.strings.imageRequired, open: this.showError, ref: (el) => {
        this.alertEl = el;
      }, icon: "exclamation-mark-circle", placement: "bottom", kind: "danger" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.strings.imageRequired))), (this.activeStep === "edit" || this.activeStep === "map") && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "back", appearance: "transparent", "icon-start": "chevron-left", width: "full", disabled: this.saving, onClick: this.handleChooseDiffClick, iconFlipRtl: "start" }, this.strings.chooseDiff)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "outline-fill", width: "full", disabled: this.saving, onClick: this.handleCancel }, this.strings.cancel), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "solid", width: "full", loading: this.saving, onClick: this.handleSaveClick }, this.strings.save)));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "active": ["handleActiveChange"]
  }; }
};
ArcgisImageUpload.style = arcgisImageUploadCss;

const arcgisImageUploadEditStepCss = ":host{overflow:hidden;display:block;position:relative;min-height:20.625rem}.edit-step__loader{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.edit-step__crop-thumb-container{position:relative;width:100%;overflow:hidden}.edit-step__crop-thumb-container--hidden{visibility:hidden}.edit-step__translucent-container{overflow:hidden;position:absolute;top:0;left:50%;cursor:all-scroll;transform:translate(-50%)}.edit-step__translucent-container:after{box-sizing:border-box;position:absolute;top:0;right:0;bottom:0;left:0;width:100%;height:100%;content:\"\";opacity:0.9;border:1.875rem solid white}.edit-step__transparent-container{position:absolute;overflow-x:visible;box-sizing:border-box;outline:2px solid transparent;outline-offset:2px;background-color:var(--calcite-ui-foreground-3);border:1px solid var(--calcite-ui-border-1);margin-right:-50%;top:50%;left:50%;transform:translate(-50%, -50%)}.edit-step__preview-image{margin:0;position:absolute;left:0;top:0;transform-origin:50% 50%}.edit-step__preview-image--loading{visibility:hidden}.edit-step__transparent-container:focus .edit-step__preview-image{box-shadow:0px 0px 6px 4px var(--calcite-ui-brand)}.edit-step__zoom-control{--calcite-label-margin-bottom:0}.edit-step__zoom-control--hidden{visibility:hidden}.edit-step__zoom-control-label{display:flex;height:2rem}.edit-step__zoom-control-label-spacer{flex:1 1 0%}";

const ArcgisImageUploadEditStep = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisImageUploadEditStepImageChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageUploadEditStepImageChanged", 7);
    this.handleWheel = (event) => {
      event.preventDefault();
      const imageScale = event.deltaY > 0 ? (this.imageProperties.scale * 1) / 1.1 : this.imageProperties.scale * 1.1;
      this.zoomValue = `${50 + Math.log(imageScale) / Math.log(1.1)}`;
      this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { scale: imageScale });
    };
    this.handleDragStart = () => {
      this.dragging = true;
    };
    this.handleDrag = (event) => {
      if (!this.dragging) {
        return;
      }
      const { touches } = event;
      let { clientX, clientY } = event;
      if (clientX === undefined || clientY === undefined) {
        // on touch devices, use the clientX and clientY properties inside touches array property
        if (!touches.length) {
          return;
        }
        clientX = touches[0].clientX;
        clientY = touches[0].clientY;
      }
      if (!this.previousPosition) {
        this.previousPosition = {
          top: clientY,
          left: clientX
        };
        return;
      }
      const { top, left } = this.previousPosition;
      const yDiff = clientY - top;
      const xDiff = clientX - left;
      this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { top: this.imageProperties.top + yDiff, left: this.imageProperties.left + xDiff });
      this.previousPosition = {
        top: top + yDiff,
        left: left + xDiff
      };
    };
    this.handleDragEnd = () => {
      this.dragging = false;
      this.previousPosition = undefined;
    };
    this.handleImageLoaded = () => {
      if (this.editingExisting) {
        this.loadingImage = false;
        this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { scale: this.height / this.imageEl.width, top: 0, left: 0, origin: { x: "0%", y: "0%" } });
        this.isLoading = false;
        return;
      }
      const width = this.height * this.aspectRatio;
      const { clientWidth, clientHeight } = this.imageEl;
      const heightScale = (this.height + 2) / clientHeight;
      const widthScale = (width + 2) / clientWidth;
      const imageScale = heightScale > widthScale ? heightScale : widthScale;
      let updates = Object.assign({}, this.imageProperties);
      updates = Object.assign(Object.assign({}, updates), { top: Math.floor(this.height / 2 - clientHeight / 2), left: Math.floor((this.height * this.aspectRatio) / 2 - clientWidth / 2), origin: { x: "50%", y: "50%" } });
      if (this.zoomToFit) {
        updates = Object.assign(Object.assign({}, updates), { top: updates.top - 1, left: updates.left - 1, scale: imageScale });
        this.initiallySettingZoom = true;
        this.zoomValue = `${50 + Math.log(imageScale) / Math.log(1.1)}`;
      }
      this.imageProperties = Object.assign({}, updates);
      this.isLoading = false;
    };
    this.handleZoomInput = (event) => {
      if (this.initiallySettingZoom) {
        this.initiallySettingZoom = false;
      }
      this.zoomValue = event.target.value;
      this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { scale: Math.pow(1.1, event.target.value - 50) });
    };
    this.handleImageKeydown = (event) => {
      const key = event.key;
      let modified = false;
      switch (key) {
        case "ArrowUp":
          this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { top: this.imageProperties.top - 1 });
          modified = true;
          break;
        case "ArrowDown":
          this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { top: this.imageProperties.top + 1 });
          modified = true;
          break;
        case "ArrowLeft":
          this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { left: this.imageProperties.left - 1 });
          modified = true;
          break;
        case "ArrowRight":
          this.imageProperties = Object.assign(Object.assign({}, this.imageProperties), { left: this.imageProperties.left + 1 });
          modified = true;
          break;
      }
      if (modified) {
        event.preventDefault();
      }
    };
    this.strings = undefined;
    this.aspectRatio = undefined;
    this.previewSrc = undefined;
    this.loadingImage = false;
    this.editingExisting = false;
    this.zoomToFit = false;
    this.height = undefined;
    this.imageProperties = {
      scale: 1,
      top: 0,
      left: 0,
      origin: {
        x: "50%",
        y: "50%"
      }
    };
    this.dragging = false;
    this.previousPosition = undefined;
    this.previewStyle = undefined;
    this.zoomValue = "50";
    this.initiallySettingZoom = false;
    this.firstImagePropertiesChange = true;
    this.isLoading = true;
  }
  componentWillLoad() {
    const padding = 60;
    const width = this.height * this.aspectRatio;
    const heightWithPaddingPx = `${this.height + padding}px`;
    this.thumbContainerStyle = {
      height: heightWithPaddingPx
    };
    this.translucentContainerStyle = {
      width: `${width + padding}px`,
      height: heightWithPaddingPx
    };
    this.transparentContainerStyle = {
      width: `${width}px`,
      height: `${this.height}px`
    };
    this.previewStyle = {
      transform: `scale(${this.imageProperties.scale})`,
      top: `${this.imageProperties.top}px`,
      left: `${this.imageProperties.left}px`,
      transformOrigin: `${this.imageProperties.origin.x} ${this.imageProperties.origin.y}`
    };
  }
  componentDidLoad() {
    this.imageContainerEl.focus();
  }
  getImageExtent() {
    const imageRect = this.imageEl.getBoundingClientRect();
    const containerRect = this.imageContainerEl.getBoundingClientRect();
    return {
      left: (containerRect.left - imageRect.left) / imageRect.width,
      right: (containerRect.right - imageRect.left) / imageRect.width,
      top: (containerRect.top - imageRect.top) / imageRect.height,
      bottom: (containerRect.bottom - imageRect.top) / imageRect.height
    };
  }
  getDrawDimensions() {
    const imageRect = this.imageEl.getBoundingClientRect();
    const selectedRect = this.imageContainerEl.getBoundingClientRect();
    const top = imageRect.top - selectedRect.top > 0 ? imageRect.top - selectedRect.top : 0;
    const left = imageRect.left - selectedRect.left > 0 ? imageRect.left - selectedRect.left : 0;
    const newImgLeft = imageRect.left < selectedRect.left ? selectedRect.left : imageRect.left;
    const newImgTop = imageRect.top < selectedRect.top ? selectedRect.top : imageRect.top;
    const newImgRight = imageRect.right > selectedRect.right ? selectedRect.right : imageRect.right;
    const newImgBottom = imageRect.bottom > selectedRect.bottom ? selectedRect.bottom : imageRect.bottom;
    return {
      left: left / selectedRect.width,
      top: top / selectedRect.height,
      width: (newImgRight - newImgLeft) / selectedRect.width,
      height: (newImgBottom - newImgTop) / selectedRect.height
    };
  }
  async getDrawParameters() {
    const minWidth = this.height * this.aspectRatio;
    const minHeight = this.height;
    const { left, right, top, bottom } = this.getImageExtent();
    const sourceExtent = {
      left: left < 0 ? 0 : left,
      top: top < 0 ? 0 : top,
      right: right > 1 ? 1 : right,
      bottom: bottom > 1 ? 1 : bottom
    };
    const drawDimensions = this.getDrawDimensions();
    const imageWidth = this.imageEl.clientWidth;
    const imageHeight = this.imageEl.clientHeight;
    const selectionX = sourceExtent.left * imageWidth;
    const selectionY = sourceExtent.top * imageHeight;
    const selectionWidth = sourceExtent.right * imageWidth - sourceExtent.left * imageWidth;
    const selectionHeight = sourceExtent.bottom * imageHeight - sourceExtent.top * imageHeight;
    const canvasWidth = right * imageWidth - left * imageWidth;
    const canvasHeight = bottom * imageHeight - top * imageHeight;
    return {
      selectionX,
      selectionY,
      selectionWidth,
      selectionHeight,
      canvasWidth,
      canvasHeight,
      minWidth,
      minHeight,
      drawDimensions
    };
  }
  handleImagePropertiesChange() {
    this.previewStyle = {
      transform: `scale(${this.imageProperties.scale})`,
      top: `${this.imageProperties.top}px`,
      left: `${this.imageProperties.left}px`,
      transformOrigin: `${this.imageProperties.origin.x} ${this.imageProperties.origin.y}`
    };
    if (this.firstImagePropertiesChange) {
      this.firstImagePropertiesChange = false;
      if (this.zoomToFit) {
        this.arcgisImageUploadEditStepImageChanged.emit();
      }
    }
    else {
      this.arcgisImageUploadEditStepImageChanged.emit();
    }
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { onWheel: this.handleWheel }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { class: "edit-step__loader", label: "", hidden: !this.isLoading }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `edit-step__crop-thumb-container ${this.isLoading ? "edit-step__crop-thumb-container--hidden" : ""}`, style: this.thumbContainerStyle }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "edit-step__translucent-container", style: this.translucentContainerStyle, onMouseDown: this.handleDragStart, onTouchStart: this.handleDragStart, onMouseMove: this.handleDrag, onTouchMove: this.handleDrag, onMouseUp: this.handleDragEnd, onTouchEnd: this.handleDragEnd, onMouseOut: this.handleDragEnd }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => {
        this.imageContainerEl = el;
      }, class: "edit-step__transparent-container", tabIndex: 0, style: this.transparentContainerStyle, onKeyDown: this.handleImageKeydown }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { ref: (el) => {
        this.imageEl = el;
      }, src: this.previewSrc, alt: "", class: `edit-step__preview-image ${this.loadingImage ? "edit-step__preview-image--loading" : ""}`, style: this.previewStyle, onLoad: this.handleImageLoaded })))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: {
        "edit-step__zoom-control": true,
        "edit-step__zoom-control--hidden": this.isLoading
      } }, this.strings.zoom, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { "aria-label": this.strings.zoom, scale: "l", min: 0, max: 100, value: +this.zoomValue, onCalciteSliderInput: this.handleZoomInput, mirrored: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el) === "rtl" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "edit-step__zoom-control-label" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "edit-step__zoom-control-icon-s" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "image", scale: "s" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "edit-step__zoom-control-label-spacer" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "edit-step__zoom-control-icon-l" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "image", scale: "l" }))))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
  static get watchers() { return {
    "imageProperties": ["handleImagePropertiesChange"]
  }; }
};
ArcgisImageUploadEditStep.style = arcgisImageUploadEditStepCss;

const arcgisImageUploadFileStepCss = ".file-step{text-align:center}.file-step__upload-icon{margin-bottom:0.5rem;margin-top:0.25rem;color:var(--calcite-ui-text-3)}.file-step__upload-icon calcite-icon{width:4rem;height:4rem}.file-step__drag-text{font-size:1.25rem;margin-bottom:0.25rem}.file-step__browse-button{margin-top:1rem}.file-step__file-input{display:none}";

const ArcgisImageUploadFileStep = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisImageUploadFileStepFileChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageUploadFileStepFileChange", 7);
    this.arcgisImageUploadFileStepInvalidFile = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageUploadFileStepInvalidFile", 7);
    this.handleDragOver = (event) => {
      event.preventDefault();
    };
    this.handleDrop = (event) => {
      event.preventDefault();
      this.processFile(event.dataTransfer.files[0]);
    };
    this.handleFileInputChange = (event) => {
      this.processFile(event.target.files[0]);
    };
    this.strings = undefined;
    this.sizeDescription = undefined;
  }
  async resetFileInput() {
    this.fileInput.value = "";
  }
  processFile(file) {
    if (!file) {
      return;
    }
    if (file) {
      if (!this.isValidFile(file)) {
        this.arcgisImageUploadFileStepInvalidFile.emit();
        return;
      }
      const reader = new FileReader();
      reader.onload = async (event) => {
        this.arcgisImageUploadFileStepFileChange.emit({
          dataURL: event.target.result,
          fileName: file.name || ""
        });
      };
      reader.readAsDataURL(file);
    }
  }
  isValidFile(file) {
    return (file === null || file === void 0 ? void 0 : file.name) && /\.(gif|jpg|jpeg|png)$/i.test(file.name);
  }
  render() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "file-step", "aria-label": this.strings.dragDrop, onDragOver: this.handleDragOver, onDragEnter: this.handleDragOver, onDrop: this.handleDrop }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "file-step__upload-icon" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "upload" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "file-step__drag-text", "aria-label": this.strings.dragDrop }, this.strings.dragDrop), this.sizeDescription && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-label": this.sizeDescription }, this.sizeDescription)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "file-step__browse-button", appearance: "transparent", iconStart: "image", scale: "l", onClick: () => {
        this.fileInput.click();
      } }, this.strings.browse), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { ref: (el) => {
        this.fileInput = el;
      }, onChange: this.handleFileInputChange, class: "file-step__file-input", type: "file", accept: ".jpg,.gif,.png,.jpeg" }))));
  }
  get el() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisImageUploadFileStep.style = arcgisImageUploadFileStepCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,