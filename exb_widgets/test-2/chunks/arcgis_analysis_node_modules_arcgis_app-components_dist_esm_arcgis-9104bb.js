"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-9104bb"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layer-view_14.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layer-view_14.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_layer_view: () => (/* binding */ ArcgisLayerView$1),
/* harmony export */   arcgis_layer_view_browse_layer: () => (/* binding */ ArcgisLayerViewBrowseLayer),
/* harmony export */   arcgis_layer_view_create: () => (/* binding */ ArcgisLayerViewCreate$1),
/* harmony export */   arcgis_layer_view_definition: () => (/* binding */ ArcgisLayerViewDefinition),
/* harmony export */   arcgis_layer_view_join: () => (/* binding */ ArcgisLayerView),
/* harmony export */   arcgis_layer_view_join_add_selection: () => (/* binding */ ArcgisLayerViewJoinAddSelection),
/* harmony export */   arcgis_layer_view_join_browse_layer: () => (/* binding */ ArcgisLayerViewJoinBrowseLayer),
/* harmony export */   arcgis_layer_view_join_config: () => (/* binding */ ArcgisLayerViewJoinConfig),
/* harmony export */   arcgis_layer_view_join_create: () => (/* binding */ ArcgisLayerViewJoinCreate),
/* harmony export */   arcgis_layer_view_join_target_selection: () => (/* binding */ ArcgisLayerViewJoinTargetSelection),
/* harmony export */   arcgis_layer_view_msg: () => (/* binding */ ArcgisLayerViewCreate),
/* harmony export */   arcgis_layer_view_overview: () => (/* binding */ ArcgisLayerViewOverview),
/* harmony export */   arcgis_layer_view_selection: () => (/* binding */ ArcgisLayerViewSelection),
/* harmony export */   arcgis_layer_view_swap_source: () => (/* binding */ ArcgisLayerViewSwapSource)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _portal_8714dc6c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./portal-8714dc6c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-8714dc6c.js");
/* harmony import */ var _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./item-properties-e6412a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-e6412a9a.js");
/* harmony import */ var _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./localStorage-f63100ef.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */













const CSS$9 = {
  panel: "panel",
  footer: "footer",
  errorContent: "error-content"
};

var flowStatus;
(function (flowStatus) {
  flowStatus[flowStatus["ERROR"] = 0] = "ERROR";
  flowStatus[flowStatus["LOADING"] = 1] = "LOADING";
  flowStatus[flowStatus["SELECTION"] = 2] = "SELECTION";
  flowStatus[flowStatus["OVERVIEW"] = 3] = "OVERVIEW";
  flowStatus[flowStatus["SWAP_SOURCE"] = 4] = "SWAP_SOURCE";
  flowStatus[flowStatus["BROWSE_LAYER"] = 5] = "BROWSE_LAYER";
  flowStatus[flowStatus["DEFINITION"] = 6] = "DEFINITION";
  flowStatus[flowStatus["FILTER"] = 7] = "FILTER";
  flowStatus[flowStatus["CREATE"] = 8] = "CREATE";
})(flowStatus || (flowStatus = {}));
var actions;
(function (actions) {
  actions[actions["CANCEL"] = 0] = "CANCEL";
  actions[actions["CREATE"] = 1] = "CREATE";
})(actions || (actions = {}));
/**
 * Checks if a featureEffect on a layer is empty
 * @param effect - layer.featureEffect
 */
function isEffectEmpty(effect) {
  if (!effect || !effect.filter) {
    return true;
  }
  const checkProps = ["geometry", "distance", "objectIds", "timeExtent", "where"];
  return !checkProps.some((prop) => effect.filter.hasOwnProperty(prop));
}
function createEffect(fl, FeatureEffect, props) {
  const { backgroundTheme } = props;
  let brightness = backgroundTheme === "light" ? 100 : 65;
  fl.featureEffect = new FeatureEffect({
    filter: {},
    excludedEffect: `grayscale(100%) opacity(30%) brightness(${brightness}%)`,
    excludedLabelsVisible: true
  });
}
function sameCoord(val1, val2) {
  return val1 === val2 || Math.round(val1 * 1000000) / 1000000 === Math.round(val2 * 1000000) / 1000000;
}
function sameSR(sp1, sp2) {
  // works for __esri.SpatialReference and JSON objects
  var mercator = [102113, 102100, 3857];
  if (sp1 &&
    sp2 &&
    (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp1.wkid) &&
    (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp2.wkid) &&
    mercator.indexOf(sp1.wkid) > -1 &&
    mercator.indexOf(sp2.wkid) > -1) {
    return true;
  }
  else if (sp1 &&
    sp2 &&
    (((0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp1.wkid) && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp2.wkid) && sp1.wkid == sp2.wkid) ||
      ((0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp1.latestWkid) && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp2.wkid) && sp1.latestWkid == sp2.wkid) ||
      ((0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp1.wkid) && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp2.latestWkid) && sp1.wkid == sp2.latestWkid) ||
      ((0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp1.latestWkid) && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp2.latestWkid) && sp1.latestWkid == sp2.latestWkid))) {
    return true;
  }
  else if (sp1 && sp2 && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp1.wkt) && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(sp2.wkt) && sp1.wkt === sp2.wkt) {
    return true;
  }
  return false;
}
/**
 *
 * @param props
 * @returns
 */
function getRequiredFieldNames(props, layer) {
  const requiredFieldTypes = [
    "oid",
    "esriFieldTypeOID",
    "global-id",
    "esriFieldTypeGlobalID",
    "geometry",
    "esriFieldTypeGeometry"
  ];
  let totalFields;
  if (layer) {
    totalFields = layer.fields;
  }
  else {
    const { definitionLayerId } = props;
    const adminLayerInfo = getAdminLayerInfo(definitionLayerId, props);
    totalFields = (adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.fields) || getFL(definitionLayerId, props).fields;
  }
  return totalFields
    .filter((field) => requiredFieldTypes.indexOf(field.type) > -1 || (!field.nullable && !(0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(field.defaultValue)))
    .map((field) => field.name);
}

/**
 * Initialize settings of current view
 */
async function initDefinitions(props) {
  var _a, _b, _c;
  const { viewItem, adminServiceInfo, layer } = props;
  const { modules } = props;
  if (!viewItem) {
    // use parent's definitionExpression as default filter
    if (layer.type === "group") {
      (_a = layer.layers) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
        if (lyr.definitionExpression) {
          addViewLayerProps(lyr.layerId, { filter: lyr.definitionExpression }, props);
          applyLayerFilter(lyr.definitionExpression, lyr.layerId, props);
          lyr.definitionExpression = null;
        }
      });
      (_b = layer.tables) === null || _b === void 0 ? void 0 : _b.forEach((table) => {
        if (table.definitionExpression) {
          addViewLayerProps(table.layerId, { filter: table.definitionExpression }, props);
          applyLayerFilter(table.definitionExpression, table.layerId, props);
          table.definitionExpression = null;
        }
      });
    }
    else {
      if (layer.definitionExpression) {
        addViewLayerProps(layer.layerId, { filter: layer.definitionExpression }, props);
        applyLayerFilter(layer.definitionExpression, layer.layerId, props);
        layer.definitionExpression = null;
      }
    }
  }
  else {
    if (!adminServiceInfo) {
      // probably not a view yet
      return;
    }
    props.layerIds = [];
    getLayersAndTables(adminServiceInfo).forEach(async (layerInfo) => {
      var _a, _b, _c, _d;
      props.layerIds.push(layerInfo.id);
      const fields = [];
      layerInfo.fields.forEach((field) => {
        if (field.visible !== false) {
          fields.push(field.name);
        }
      });
      if (fields.length !== layerInfo.fields.length) {
        addViewLayerProps(layerInfo.id, { fields }, props);
      }
      const whereClause = layerInfo.viewDefinitionQuery;
      if (whereClause) {
        addViewLayerProps(layerInfo.id, { filter: whereClause }, props);
        applyLayerFilter(whereClause, layerInfo.id, props);
      }
      const aoiValue = (_d = (_c = (_b = (_a = layerInfo.adminLayerInfo) === null || _a === void 0 ? void 0 : _a.viewLayerDefinition) === null || _b === void 0 ? void 0 : _b.table) === null || _c === void 0 ? void 0 : _c.filter) === null || _d === void 0 ? void 0 : _d.value;
      if (aoiValue) {
        // don't need to check SR of saved AOI, any SR work
        addViewLayerProps(layerInfo.id, {
          aoi: JSON.parse(JSON.stringify(aoiValue.geometry))
        }, props);
        const geometry = aoiValue.geometry.rings
          ? modules.Polygon.fromJSON(aoiValue.geometry)
          : modules.Extent.fromJSON(aoiValue.geometry);
        applyLayerAOI(geometry, layerInfo.id, props);
      }
    });
    // set layer visibility on map and remove definitionExpression
    if (layer.type === "group") {
      layer.layers.forEach((fLayer) => {
        fLayer.visible = props.layerIds.indexOf(fLayer.layerId) > -1;
        fLayer.definitionExpression = null;
      });
      (_c = layer.tables) === null || _c === void 0 ? void 0 : _c.forEach((table) => {
        table.definitionExpression = null;
      });
    }
    else {
      layer.visible = props.layerIds.indexOf(layer.layerId) > -1;
      layer.definitionExpression = null;
    }
  }
}
/**
 * Returns true if the value is defined
 * @param layerId - layer id
 */
function getViewLayerProps(layerId, props) {
  const { viewProps } = props;
  return viewProps === null || viewProps === void 0 ? void 0 : viewProps.find((viewLayerProps) => layerId === viewLayerProps.layerId);
}
/**
 * check if one ViewLayerProp is empty, then delete it
 */
function sanitizeViewProps(props) {
  const { viewProps } = props;
  if (!viewProps) {
    return;
  }
  props.viewProps = viewProps.filter((viewLayerProps) => viewLayerProps.filter || viewLayerProps.aoi || viewLayerProps.fields);
  if (!props.viewProps.length) {
    props.viewProps = undefined;
  }
}
/**
 * add props for one layer
 */
function addViewLayerProps(layerId, addProps, props) {
  var _a;
  let viewLayerProps = getViewLayerProps(layerId, props);
  if (!viewLayerProps) {
    viewLayerProps = { layerId };
  }
  const newProps = Object.assign(Object.assign({}, viewLayerProps), addProps);
  props.viewProps = (_a = props.viewProps) === null || _a === void 0 ? void 0 : _a.filter((viewLayerProp) => viewLayerProp.layerId !== layerId);
  props.viewProps = props.viewProps || [];
  props.viewProps.push(newProps);
}

/**
 * Returns non-view FL
 * @param layerId - layer id
 */
function getFL(layerId, props) {
  const { layer } = props;
  return layer.type === "group"
    ? getLayersAndTables(layer).find((lyr) => lyr.layerId === layerId)
    : layer;
}
/**
 * apply filter to layer as effect
 * @param where - where clause
 * @param layerId - layer id
 */
async function applyLayerFilter(where, layerId, props) {
  const fl = getFL(layerId, props);
  if (fl.isTable) {
    return new Promise((resolve) => {
      resolve();
    });
  }
  const [FeatureEffect] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/layers/support/FeatureEffect"]);
  if (where) {
    let count = 0;
    // wait until the filter component is done
    const intervalHandler = setInterval(() => {
      var _a;
      if (!((_a = fl.featureEffect) === null || _a === void 0 ? void 0 : _a.filter)) {
        createEffect(fl, FeatureEffect, props);
      }
      fl.featureEffect.filter.where = where;
      count++;
      if (count === 3) {
        clearInterval(intervalHandler);
      }
    }, 200);
  }
  else {
    fl.featureEffect.filter.where = null;
    if (isEffectEmpty(fl.featureEffect)) {
      fl.featureEffect = null;
    }
  }
}
/**
 * apply AOI to layer as effect
 * @param graphic - Graphic with geometry
 * @param layerId - layer id
 */
async function applyLayerAOI(geometry, layerId, props) {
  const fl = getFL(layerId, props);
  const [FeatureEffect, Polygon, Extent] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
    "esri/layers/support/FeatureEffect",
    "esri/geometry/Polygon",
    "esri/geometry/Extent"
  ]);
  if (geometry) {
    let count = 0;
    // wait until the filter component is done
    const intervalHandler = setInterval(() => {
      var _a;
      if (!((_a = fl.featureEffect) === null || _a === void 0 ? void 0 : _a.filter)) {
        createEffect(fl, FeatureEffect, props);
      }
      const geom = geometry.type === "polygon" ? Polygon.fromJSON(geometry.toJSON()) : Extent.fromJSON(geometry.toJSON());
      fl.featureEffect.filter.geometry = geom;
      count++;
      if (count === 3) {
        clearInterval(intervalHandler);
      }
    }, 200);
  }
  else {
    fl.featureEffect.filter.geometry = null;
    if (isEffectEmpty(fl.featureEffect)) {
      fl.featureEffect = null;
    }
  }
}
/**
 * get name of service from URL
 * @param portalItem - __esri.PortalItem
 * @return service name
 */
function getServiceName(portalItem) {
  var _a;
  const { url } = portalItem;
  if (!url) {
    return "";
  }
  const serverTypes = ["/FeatureServer", "/MapServer"];
  const serverType = (_a = serverTypes.filter((type) => url.toLowerCase().indexOf(type.toLowerCase()) > -1)) === null || _a === void 0 ? void 0 : _a[0];
  let title = "";
  if (serverType) {
    title = url.substring(0, url.indexOf(serverType));
    title = title.substring(title.lastIndexOf("/") + 1, title.length);
  }
  return title;
}
/**
 * get name of service from URL
 * @layer group layer or adminServiceInfo
 * @return Collecction of layers and tables
 */
function getLayersAndTables(layer) {
  var _a, _b, _c;
  if (((_a = layer.layers) === null || _a === void 0 ? void 0 : _a.length) && ((_b = layer.tables) === null || _b === void 0 ? void 0 : _b.length)) {
    return layer.layers.concat(layer.tables);
  }
  else if ((_c = layer.layers) === null || _c === void 0 ? void 0 : _c.length) {
    return layer.layers;
  }
  else {
    return layer.tables;
  }
}

async function canSwap(swapItem, props) {
  var _a, _b, _c, _d, _e;
  const { layerItem, layer, adminServiceInfo, modules, strings } = props;
  const { Layer, PortalItem } = modules;
  props.swapItem = props.swapLayer = undefined;
  if (layerItem.id === swapItem.id) {
    return Promise.resolve("");
  }
  const portalItem = PortalItem.fromJSON(swapItem);
  await portalItem.load();
  const swapLayer = await Layer.fromPortalItem({
    portalItem
  });
  if (layer.type !== swapLayer.type) {
    console.log("layer type does not match,", layer.type, "!=", swapLayer.type);
    return Promise.resolve(strings.msg.swapErrors.layerType);
  }
  if (layer.type === "group") {
    // group layer has no layers or tables at this point
    // loadAll() loads layers, tables (at v4.23) and capabilities
    await swapLayer.loadAll();
  }
  else {
    // "feature"
    await swapLayer.load();
  }
  // if view has editor tracking swap has to have it too (check service)
  // sync
  if (layer.type === "group") {
    // just need to check one sublayer/table
    const hasSync = adminServiceInfo.layers[0].capabilities.indexOf("Sync") > -1;
    const firstSwapLyr = (((_a = swapLayer.layers) === null || _a === void 0 ? void 0 : _a.length) ? swapLayer.layers : swapLayer.tables).getItemAt(0);
    const swapHasSync = firstSwapLyr.sourceJSON.capabilities.indexOf("Sync") > -1;
    if (hasSync !== swapHasSync) {
      console.log("new source layer Sync not matching");
      return Promise.resolve(strings.msg.swapErrors.sync);
    }
  }
  else {
    // "feature"
    const hasSync = adminServiceInfo.capabilities.indexOf("Sync") > -1;
    const swapHasSync = swapLayer.sourceJSON.capabilities.indexOf("Sync") > -1;
    if (hasSync !== swapHasSync) {
      console.log("new source layer Sync not matching");
      return Promise.resolve(strings.msg.swapErrors.sync);
    }
  }
  // same sublayers
  if (layer.type === "group") {
    // group layer has no layers or tables at this point
    // loadAll() loads layers and tables (at v4.23)
    if (((_b = layer.layers) === null || _b === void 0 ? void 0 : _b.length) !== ((_c = swapLayer.layers) === null || _c === void 0 ? void 0 : _c.length) || ((_d = layer.tables) === null || _d === void 0 ? void 0 : _d.length) !== ((_e = swapLayer.tables) === null || _e === void 0 ? void 0 : _e.length)) {
      console.log("layer sublayers count does not match");
      return Promise.resolve(strings.msg.swapErrors.layerCount);
    }
  }
  // Change in sublayers or fields
  if (layer.type === "group") {
    const layersAndTables = getLayersAndTables(layer);
    const swapLayersAndTables = getLayersAndTables(swapLayer);
    for (let i = 0; i < layersAndTables.length; i++) {
      const subLayer = layersAndTables.getItemAt(i);
      const swapSubLayer = swapLayersAndTables.getItemAt(i);
      //console.log("sublayer", i, subLayer, "==", swapSubLayer);
      let check = checkSubLayers(subLayer, swapSubLayer, props);
      if (check) {
        return Promise.resolve(check);
      }
      check = checkFields(subLayer, swapSubLayer, props);
      if (check) {
        return Promise.resolve(check);
      }
    }
  }
  else {
    // "feature"
    let check = checkSubLayers(layer, swapLayer, props);
    if (check) {
      return Promise.resolve(check);
    }
    check = checkFields(layer, swapLayer, props);
    if (check) {
      return Promise.resolve(check);
    }
  }
  props.swapItem = swapItem;
  props.swapLayer = swapLayer;
  return Promise.resolve(null);
}
async function swapSource(props) {
  var _a, _b;
  let { layer, layerIds, modules } = props;
  const { PortalItem } = modules;
  const { view, swapItem, swapLayer } = props;
  const [esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/request"]);
  try {
    await emptyView(props, esriRequest);
    const portalItem = PortalItem.fromJSON(swapItem);
    await portalItem.load();
    //const oldLayerItem = props.layerItem;
    //const oldLayer = layer;
    props.layerItem = portalItem;
    props.layer = swapLayer;
    props.swapItem = props.swapLayer = undefined;
    // we want to behave as if we're creating a new view
    // current settings are based off the source item
    const savedViewItem = props.viewItem;
    props.viewItem = undefined;
    props.adminServiceInfo = undefined;
    await getAdminServiceInfo$1(props);
    await initialAddToDefinition(props, { serviceurl: savedViewItem.url }, esriRequest);
    props.viewItem = savedViewItem;
    // now get view info
    props.adminServiceInfo = undefined;
    await getAdminServiceInfo$1(props);
    /* console.log(
      "view adminServiceInfo layers",
      props.adminServiceInfo?.layers?.map((lyr: any) => {
        return {
          id: lyr.id,
          name: lyr.name,
          adminLayerInfo_filter: lyr.adminLayerInfo?.viewLayerDefinition?.table?.filter?.value,
          viewDefinitionQuery: lyr.viewDefinitionQuery,
          fields: lyr.fields.map((field: any) => `${field.name} (${field.visible})`)
        };
      })
    ); */
    // update map
    view.map.remove(layer);
    layer = props.layer;
    if (layer.type === "group") {
      if ((_a = layer.layers) === null || _a === void 0 ? void 0 : _a.length) {
        // has at least one spatial layer
        if (layerIds) {
          // only make included sublayers visible
          layer.layers.forEach((subLayer) => {
            subLayer.visible = layerIds.indexOf(subLayer.layerId) > -1;
          });
        }
        view.map.add(layer);
      }
      // default popups
      (_b = layer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
        if (!lyr.popupTemplate && lyr.popupEnabled) {
          lyr.popupTemplate = lyr.createPopupTemplate();
        }
      });
    }
    else {
      if (!layer.isTable) {
        view.map.add(layer);
      }
      // default popup
      layer.popupTemplate = layer.createPopupTemplate();
    }
    // apply correct filter and AOI on map
    getLayersAndTables(props.adminServiceInfo).forEach(async (layerInfo) => {
      var _a, _b, _c, _d;
      const whereClause = layerInfo.viewDefinitionQuery;
      if (whereClause) {
        applyLayerFilter(whereClause, layerInfo.id, props);
      }
      const aoiValue = (_d = (_c = (_b = (_a = layerInfo.adminLayerInfo) === null || _a === void 0 ? void 0 : _a.viewLayerDefinition) === null || _b === void 0 ? void 0 : _b.table) === null || _c === void 0 ? void 0 : _c.filter) === null || _d === void 0 ? void 0 : _d.value;
      if (aoiValue) {
        const geometry = aoiValue.geometry.rings
          ? modules.Polygon.fromJSON(aoiValue.geometry)
          : modules.Extent.fromJSON(aoiValue.geometry);
        applyLayerAOI(geometry, layerInfo.id, props);
      }
    });
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("swap source failed"));
    });
  }
}
function checkSubLayers(layer, swapLayer, props) {
  const { strings } = props;
  if (layer.geometryType !== swapLayer.geometryType) {
    console.log("layer geometry type does not match");
    return strings.msg.swapErrors.geometryType;
  }
  if (JSON.stringify(layer.spatialReference.toJSON()) !== JSON.stringify(swapLayer.spatialReference.toJSON())) {
    console.log("layer spatial reference does not match");
    return strings.msg.swapErrors.spatialReference;
  }
  return null;
}
function checkFields(layer, swapLayer, props) {
  // all visible fields in current view must be contained in new source
  const { strings } = props;
  const requiredFieldNames = getRequiredFieldNames(props, layer);
  const viewLayerProps = getViewLayerProps(layer.layerId, props);
  let visFields;
  if (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.fields) {
    const allFields = viewLayerProps.fields.concat(requiredFieldNames);
    visFields = layer.fields.filter((field) => allFields.indexOf(field.name) > -1);
  }
  else {
    visFields = layer.fields;
  }
  //console.log("checkFields - visFields", visFields.map((f) =>f.name));
  //console.log("swapLayer - fields", swapLayer.fields.map((f) => f.name));
  for (let i = 0; i < visFields.length; i++) {
    const field = visFields[i];
    const swapField = swapLayer.fields.find((swapField) => field.name === swapField.name);
    if (!swapField) {
      //if (["global-id", "oid"].indexOf(field.type) === -1) {
      console.log("layer", layer.layerId, layer.title, ": field", field.name, "missing in new source layer");
      return strings.msg.swapErrors.missingField;
      //} else {
      //  console.log("field", field.name, "missing in new source layer, ignoring");
      //}
    }
    else if (field.type !== swapField.type) {
      console.log("layer", layer.layerId, layer.title, ": field type of", field.name, "different in layers");
      return strings.msg.swapErrors.fieldType;
    }
  }
  return null;
}

/**
 * get a suggested title for the view
 * @param props - LayerViewProps
 */
async function getSuggestedTitle(props) {
  var _a, _b;
  const { layerItem, layer, strings } = props;
  const [esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/request"]);
  const relatedUrl = `${layerItem.itemUrl}/relatedItems`;
  const relatedContent = {
    relationshipType: "Service2Service",
    direction: "forward"
  };
  const result = await esriRequest(relatedUrl, {
    query: Object.assign(Object.assign({}, relatedContent), { f: "json", token: layer.portalItem.portal.credential.token }),
    method: "post",
    responseType: "json"
  });
  // check with spaces and underscores
  const viewItems = ((_b = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.relatedItems) === null || _b === void 0 ? void 0 : _b.filter((item) => item.type === "Feature Service" &&
    (item.title.indexOf(layerItem.title) > -1 ||
      item.title.indexOf(layerItem.title.replace(/ /g, "_")) > -1 ||
      item.title.replace(/ /g, "_").indexOf(layerItem.title) > -1))) || [];
  return `${layerItem.title}${viewItems.length ? ` ${viewItems.length + 1}` : ``} ${strings.createView.view}`;
}
/**
 * Make admin service info request for view layer
 * @param props - LayerViewProps
 */
async function getAdminServiceInfo$1(props, noCache) {
  const { layer, viewItem, adminServiceInfo } = props;
  if (adminServiceInfo) {
    return;
  }
  const serviceUrl = (viewItem === null || viewItem === void 0 ? void 0 : viewItem.url) || layer.portalItem.url;
  let adminUrl = serviceUrl.replace("/rest/services", "/rest/admin/services");
  if (noCache) {
    adminUrl += `${adminUrl.indexOf("?") > -1 ? "&" : "?"}_ts=${new Date().getTime()}`;
  }
  try {
    const [IdentityManager, esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/identity/IdentityManager", "esri/request"]);
    await IdentityManager.getCredential(adminUrl);
    const response = await esriRequest(adminUrl, {
      query: { f: "json" }
    });
    props.adminServiceInfo = response.data;
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("could not get admin info"));
    });
  }
}
/**
 * Creates layer view
 * @param layerId - layer id
 * @param props - LayerViewProps
 */
function getAdminLayerInfo(layerId, props) {
  var _a, _b;
  const { adminServiceInfo } = props;
  const layer = (_a = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.layers) === null || _a === void 0 ? void 0 : _a.find((layer) => layer.id === layerId);
  if (!layer) {
    return (_b = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.tables) === null || _b === void 0 ? void 0 : _b.find((table) => table.id === layerId);
  }
  return layer;
}
/**
 * Returns true if the user made recent changes
 * @param props
 * @returns boolean
 */
function hasChanges(props) {
  const { layer, layerIds, adminServiceInfo } = props;
  if (layer.type === "group") {
    const layersAndTables = adminServiceInfo && getLayersAndTables(adminServiceInfo);
    const containsAllLayers = adminServiceInfo &&
      layersAndTables.length === layerIds.length &&
      layersAndTables.every((lyr) => layerIds.indexOf(lyr.id) > -1);
    return (!containsAllLayers ||
      getLayersAndTables(layer)
        .filter((fLayer) => layerIds.indexOf(fLayer.layerId) > -1)
        .some((fLayer) => hasLayerChanges(fLayer.layerId, props)));
  }
  else {
    return hasLayerChanges(layer.layerId, props);
  }
}
/**
 * Returns true if the user made recent changes to the feature layer
 * @param layerId
 * @param props
 * @returns
 */
function hasLayerChanges(layerId, props) {
  var _a, _b, _c, _d;
  const { viewItem } = props;
  const fLayer = getFL(layerId, props);
  const viewLayerProps = getViewLayerProps(layerId, props);
  const adminLayerInfo = getAdminLayerInfo(layerId, props);
  // ignore field.visible prop on parent layers
  const viewFields = viewItem && (adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.fields)
    ? adminLayerInfo.fields.filter((field) => field.visible)
    : (adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.fields) || fLayer.fields;
  if (viewLayerProps) {
    if (viewLayerProps.filter !== (adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.viewDefinitionQuery) ||
      !!(viewLayerProps.fields && viewLayerProps.fields.length !== viewFields.length) ||
      !!(!viewLayerProps.fields && viewFields.length !== fLayer.fields.length) ||
      (!fLayer.isTable && !isSameAOI(viewLayerProps, adminLayerInfo))) {
      /* console.log(
        "hasLayerChanges=true (props) id:",
        layerId,
        "filter:",
        viewLayerProps.filter !== adminLayerInfo?.viewDefinitionQuery,
        //`(${viewLayerProps.filter}|${adminLayerInfo?.viewDefinitionQuery})`,
        "fields-has-props:",
        !!(viewLayerProps.fields && viewLayerProps.fields.length !== viewFields.length),
        "fields-no-props:",
        !!(!viewLayerProps.fields && viewFields.length !== fLayer.fields.length),
        "!sameAOI:",
        !isSameAOI(viewLayerProps, adminLayerInfo)
      ); */
      return true;
    }
  }
  else {
    if ((adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.viewDefinitionQuery) ||
      viewFields.length < fLayer.fields.length ||
      (!fLayer.isTable && ((_d = (_c = (_b = (_a = adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.adminLayerInfo) === null || _a === void 0 ? void 0 : _a.viewLayerDefinition) === null || _b === void 0 ? void 0 : _b.table) === null || _c === void 0 ? void 0 : _c.filter) === null || _d === void 0 ? void 0 : _d.value))) {
      return true;
    }
  }
  return false;
}
/**
 * Creates layer view
 * @param props - LayerViewProps
 * @param newItemProps - user input (NewItemProps)
 */
async function createView(props, newItemProps) {
  const [esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/request"]);
  try {
    const createServiceResponse = await createService(props, newItemProps, esriRequest);
    //console.log("createServiceResponse", createServiceResponse);
    await initialAddToDefinition(props, createServiceResponse, esriRequest);
    await initialItemUpdate(props, createServiceResponse, newItemProps, esriRequest);
    await moveToFolder(props, createServiceResponse, newItemProps, esriRequest);
    return createServiceResponse.itemId;
  }
  catch (e) {
    return new Promise((_, reject) => {
      if (e.message === "service name already exists") {
        reject(e);
      }
      else {
        reject(new Error("createView failed"));
      }
    });
  }
}
/**
 * Creates layer view
 * @param props - LayerViewProps
 */
async function updateView(props) {
  const { viewItem } = props;
  const [esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/request"]);
  try {
    const { addLayerIds, deleteLayerIds } = await updateDefinition(props, viewItem, esriRequest);
    await itemUpdate(props, addLayerIds, deleteLayerIds, esriRequest);
    return new Promise((resolve) => {
      resolve();
    });
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("updateView failed"));
    });
  }
}
/**
 * Removes all layers from the view
 * @param props - LayerViewProps
 */
async function emptyView(props, esriRequest) {
  var _a, _b;
  const { layer, viewItem, adminServiceInfo } = props;
  const portalItem = layer.portalItem;
  // delete
  const deleteLayerIds = [];
  (_a = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.layers) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
    deleteLayerIds.push(lyr.id);
  });
  const deleteTableIds = [];
  (_b = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.tables) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
    deleteTableIds.push(lyr.id);
  });
  if (deleteLayerIds.length || deleteTableIds.length) {
    const adminUrl = viewItem.url.replace("rest/services", "rest/admin/services");
    const deleteFromDefUrl = `${adminUrl}/deleteFromDefinition`;
    await deleteFromDefinitionRequest(deleteFromDefUrl, {
      layers: deleteLayerIds === null || deleteLayerIds === void 0 ? void 0 : deleteLayerIds.map((id) => {
        return { id };
      }),
      tables: deleteTableIds === null || deleteTableIds === void 0 ? void 0 : deleteTableIds.map((id) => {
        return { id };
      })
    }, portalItem, esriRequest);
  }
  return new Promise((resolve) => {
    resolve();
  });
}
function isSameAOI(viewLayerProps, adminLayerInfo) {
  var _a, _b, _c, _d;
  const adminAOIValue = (_d = (_c = (_b = (_a = adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.adminLayerInfo) === null || _a === void 0 ? void 0 : _a.viewLayerDefinition) === null || _b === void 0 ? void 0 : _b.table) === null || _c === void 0 ? void 0 : _c.filter) === null || _d === void 0 ? void 0 : _d.value;
  //console.log("isSameAOI admin:", adminAOIValue?.geometry, "prop:", viewLayerProps?.aoi);
  if (!(viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi) && !adminAOIValue) {
    return true;
  }
  else if (((viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi) && !adminAOIValue) || (!(viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi) && adminAOIValue)) {
    return false;
  }
  if ((viewLayerProps.aoi.rings && adminAOIValue.geometryType !== "esriGeometryPolygon") ||
    (viewLayerProps.aoi.xmin && adminAOIValue.geometryType !== "esriGeometryEnvelope")) {
    return false;
  }
  if (viewLayerProps.aoi.xmin) {
    const propsExt = viewLayerProps.aoi;
    const adminExt = adminAOIValue.geometry;
    // compare coords with a margin; service rounds passed in coords
    if (sameCoord(propsExt.xmin, adminExt.xmin) &&
      sameCoord(propsExt.xmax, adminExt.xmax) &&
      sameCoord(propsExt.ymin, adminExt.ymin) &&
      sameCoord(propsExt.ymax, adminExt.ymax)) {
      return true;
    }
    else {
      return false;
    }
  }
  else if (viewLayerProps.aoi.rings) {
    if (viewLayerProps.aoi.rings[0].length !== adminAOIValue.geometry.rings[0].length) {
      return false;
    }
    else {
      const isSame = viewLayerProps.aoi.rings[0].every((pt1) => {
        return adminAOIValue.geometry.rings[0].some((pt2) => {
          // compare coords with a margin; service rounds passed in coords
          return sameCoord(pt1[0], pt2[0]) && sameCoord(pt1[1], pt2[1]);
        });
      });
      return isSame;
    }
  }
}
async function createService(props, newItemProps, esriRequest) {
  var _a, _b, _c;
  const { layer, layerIds } = props;
  const portalItem = layer.portalItem;
  const portal = portalItem.portal;
  let fl = getFL(layerIds[0], props);
  const createServiceUrl = `${portal.restUrl}/content/users/${portalItem.owner}/createService`;
  const createParams = {
    name: newItemProps.title.replace(/ /g, "_"),
    isView: true,
    sourceSchemaChangesAllowed: true,
    isUpdatableView: true,
    spatialReference: (_a = fl.sourceJSON.extent) === null || _a === void 0 ? void 0 : _a.spatialReference,
    initialExtent: fl.sourceJSON.extent,
    capabilities: "Query",
    preserveLayerIds: true
  };
  if (portal.isPortal) {
    const dataSourceType = getDataSourceType$1(props);
    if (dataSourceType) {
      createParams.options = { dataSourceType };
    }
  }
  let createServiceContent = {
    createParameters: JSON.stringify(createParams),
    outputType: "featureService",
    tags: ((_b = newItemProps.tags) === null || _b === void 0 ? void 0 : _b.length) ? newItemProps.tags.toString() : undefined,
    snippet: newItemProps.summary,
    categories: (_c = newItemProps.categories) === null || _c === void 0 ? void 0 : _c.join(","),
    isView: true
  };
  try {
    const response = await esriRequest(createServiceUrl, {
      query: Object.assign(Object.assign({}, createServiceContent), { f: "json", token: portal.credential.token }),
      method: "post",
      responseType: "json"
    });
    //console.log("newServiceResponse", response);
    return response.data;
  }
  catch (e) {
    return new Promise((_, reject) => {
      if (e.message.indexOf(" already exists ") > -1) {
        reject(new Error("service name already exists"));
      }
      else {
        reject(new Error("create service failed"));
      }
    });
  }
}
function getDataSourceType$1(props) {
  var _a, _b, _c, _d;
  const { adminServiceInfo } = props;
  const dataSource = ((_b = (_a = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.adminServiceInfo) === null || _a === void 0 ? void 0 : _a.database) === null || _b === void 0 ? void 0 : _b.datasource) || {};
  const dataSourceType = ((_c = dataSource === null || dataSource === void 0 ? void 0 : dataSource.name) === null || _c === void 0 ? void 0 : _c.indexOf("/nosqlDatabases")) > -1
    ? "spatiotemporal"
    : ((_d = dataSource === null || dataSource === void 0 ? void 0 : dataSource.name) === null || _d === void 0 ? void 0 : _d.indexOf("/enterpriseDatabases")) > -1
      ? "relational"
      : null;
  return dataSourceType;
}
async function initialAddToDefinition(props, createServiceResponse, esriRequest) {
  /* TODO??
  updatePopupAfterFieldDefinitionChange: function(mapLayer) {

    if (!mapLayer.popupInfo || !mapLayer.popupInfo.fieldInfos) {
      return;
    }

    var fieldInfos = mapLayer.popupInfo.fieldInfos;
    var newFieldInfos = [];
    var defaultPopupInfo = arcgisonline.map.popup.getDefaultPopupInfo(mapLayer.serviceInfo, mapLayer.layer.isEditable(), mapLayer.layer);

    // remove fields that are not available anymore and add new fields
    dojo.forEach(defaultPopupInfo.fieldInfos, function(defInfo) {
      var curFInfo;
      dojo.forEach(fieldInfos, function(fInfo) {
        if (fInfo.fieldName === defInfo.fieldName) {
          curFInfo = fInfo;
        }
      });
      if (!curFInfo) {
        // add new fields to the popup
        newFieldInfos.push(defInfo);
      } else {
        // keep the one we have
        newFieldInfos.push(curFInfo);
      }
    });
    // keep special fields
    var relatedFieldPrefix = "relationships/";
    var expressionPrefix = "expression/";
    var rasterPrefix = "Raster.";
    dojo.forEach(fieldInfos, function(fInfo) {
      if (fInfo.fieldName.startsWith(relatedFieldPrefix) ||
        fInfo.fieldName.startsWith(expressionPrefix) ||
        fInfo.fieldName.startsWith(rasterPrefix)) {
        newFieldInfos.push(fInfo);
      }
    });
    if (dojo.json.stringify(mapLayer.popupInfo.fieldInfos) !== dojo.json.stringify(newFieldInfos)) {
      mapLayer.popupInfo.fieldInfos = newFieldInfos;
      arcgisonline.map.mapUtil.setInfoTemplate(mapLayer.layer, mapLayer.popupInfo);
      mapLayer.popupChanged = true;

      if (mapLayer.origItemLayers) {
        // save new popup on layer item

        var getItemLayerInfosHandler = function(){
          // mapLayer.origItemLayers contains what's saved on the item currently

          var itemData = arcgisonline.map.itemData.itemDataContents[mapLayer.itemId] || {};

          var id = parseInt(mapLayer.layer.url.substring(mapLayer.layer.url.lastIndexOf("/") + 1));
          var layerInfo = null;
          for (var i = 0; i < mapLayer.origItemLayers.length; i++) {
            if (mapLayer.origItemLayers[i].id === id) {
              layerInfo = mapLayer.origItemLayers[i];
              break;
            }
          }

          if (!layerInfo) {
            //should not happen
            return;
          }

          // only update popupInfo
          layerInfo.popupInfo = mapLayer.popupInfo;

          var json = {
            layers: mapLayer.origItemLayers
          };

          delete itemData.layers;
          json = dojo.mixin(itemData, json);

          var request = {
            text: dojo.json.stringify(json)
          };

          var user = arcgisonline.sharing.util.getUser();
          var url = esriGeowConfig.restBaseUrl + 'content/users/' + mapLayer.itemCard.owner; // user might be admin and item owner is someone else
          url += (mapLayer.itemCard.ownerFolder) ? ('/' + mapLayer.itemCard.ownerFolder) : '';
          url += '/items/' + mapLayer.itemCard.id + '/update';
          arcgisonline.sharing.util.postJson(request, url, dojo.hitch(this,function() {
            delete mapLayer.popupChanged;
          }));
        };

        // get the latest layerInfos from the item in case they got changed by another layer in the map
        arcgisonline.map.itemData.getItemLayerInfos(mapLayer, dojo.hitch(this, getItemLayerInfosHandler), dojo.hitch(this, getItemLayerInfosHandler));
      }
    }
  },
  */
  var _a, _b;
  const { layer, layerIds } = props;
  let layers, tables;
  if (layer.type === "group") {
    layers = (_a = layer.layers) === null || _a === void 0 ? void 0 : _a.filter((lyr) => layerIds.indexOf(lyr.layerId) > -1).map((lyr) => getDefLayerJSON(lyr, props)).toArray().reverse();
    tables = (_b = layer.tables) === null || _b === void 0 ? void 0 : _b.filter((lyr) => layerIds.indexOf(lyr.layerId) > -1).map((lyr) => getDefLayerJSON(lyr, props)).toArray().reverse();
  }
  else {
    if (layer.isTable) {
      tables = [getDefLayerJSON(layer, props)];
    }
    else {
      layers = [getDefLayerJSON(layer, props)];
    }
  }
  try {
    // the response from a createService call returns 'serviceurl'
    const adminUrl = createServiceResponse.serviceurl.replace("rest/services", "rest/admin/services");
    await addToDefinitionRequest$1(`${adminUrl}/addToDefinition`, {
      layers: layers,
      tables: tables
    }, esriRequest, props);
    await updateDefinitions(props, createServiceResponse, esriRequest);
    return new Promise((resolve) => {
      resolve();
    });
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("initialAddToDefinition failed"));
    });
  }
}
async function updateDefinitions(props, createServiceResponse, esriRequest) {
  const { layer, layerIds } = props;
  const { portalItem } = layer;
  const { portal } = portalItem;
  const adminUrl = createServiceResponse.serviceurl.replace("rest/services", "rest/admin/services");
  try {
    // now update definitions like filter, fields, and AOI
    // changing fields and AOI not supported with addToDefinition
    if (layer.type === "group") {
      const callInfos = [];
      const lyrs = getLayersAndTables(layer).filter((fLayer) => layerIds.indexOf(fLayer.layerId) > -1);
      // use for loop so await works
      for (let i = 0; i < lyrs.length; i++) {
        const fLayer = lyrs.getItemAt(i);
        if (hasLayerChanges(fLayer.layerId, props)) {
          const json = await getUpdateLayerJSON(fLayer, props);
          const updateDefUrl = `${adminUrl}/${fLayer.layerId}/updateDefinition`;
          callInfos.push({ updateDefUrl, json });
        }
      }
      if (callInfos.length) {
        if (portal.isPortal) {
          // can't handle simultaneous requests
          for (const callInfo of callInfos) {
            await updateDefinitionRequest(callInfo.updateDefUrl, callInfo.json, esriRequest, props);
          }
        }
        else {
          const calls = [];
          callInfos.forEach((callInfo) => {
            calls.push(updateDefinitionRequest(callInfo.updateDefUrl, callInfo.json, esriRequest, props));
          });
          await Promise.all(calls);
        }
      }
    }
    else {
      // not a group layer
      if (hasLayerChanges(layer.layerId, props)) {
        const json = await getUpdateLayerJSON(layer, props);
        const updateDefUrl = `${adminUrl}/${layer.layerId}/updateDefinition`;
        await updateDefinitionRequest(updateDefUrl, json, esriRequest, props);
      }
    }
    return new Promise((resolve) => {
      resolve();
    });
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("updateDefinitions failed"));
    });
  }
}
async function updateDefinition(props, viewItem, esriRequest) {
  /*
  TODO??
  if (arcgisonline.sharing.util.isPortal()) {
    // can't send all of those requests out at the same time [#19301]
  */
  var _a, _b, _c, _d;
  const { layer, layerIds, adminServiceInfo } = props;
  const portalItem = layer.portalItem;
  const { portal } = portalItem;
  const deleteLayerIds = [];
  const addLayerIds = [];
  try {
    // the response from an item card call returns 'url'
    const adminUrl = viewItem.url.replace("rest/services", "rest/admin/services");
    if (layer.type === "group") {
      // delete
      (_a = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.layers) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
        if (layerIds.indexOf(lyr.id) === -1) {
          deleteLayerIds.push(lyr.id);
        }
      });
      const deleteTableIds = [];
      (_b = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.tables) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
        if (layerIds.indexOf(lyr.id) === -1) {
          deleteTableIds.push(lyr.id);
        }
      });
      if (deleteLayerIds.length || deleteTableIds.length) {
        const deleteFromDefUrl = `${adminUrl}/deleteFromDefinition`;
        await deleteFromDefinitionRequest(deleteFromDefUrl, {
          layers: deleteLayerIds === null || deleteLayerIds === void 0 ? void 0 : deleteLayerIds.map((id) => {
            return { id };
          }),
          tables: deleteTableIds === null || deleteTableIds === void 0 ? void 0 : deleteTableIds.map((id) => {
            return { id };
          })
        }, portalItem, esriRequest);
        // do we need to remove relationships from existing view layers
        // pointing to any removed layers?
        let callInfos = [];
        getLayersAndTables(layer)
          .filter((fLayer) => layerIds.indexOf(fLayer.layerId) > -1)
          .forEach(async (fLayer) => {
          var _a, _b;
          if ((_a = fLayer.relationships) === null || _a === void 0 ? void 0 : _a.length) {
            // the original layer has relationships
            const viewLayerInfo = getLayersAndTables(adminServiceInfo).find((layerInfo) => layerInfo.id === fLayer.layerId);
            if ((_b = viewLayerInfo === null || viewLayerInfo === void 0 ? void 0 : viewLayerInfo.relationships) === null || _b === void 0 ? void 0 : _b.length) {
              // remove relationships pointing to newly removed layers
              const relationships = viewLayerInfo.relationships.filter((relationship) => deleteLayerIds.indexOf(relationship.relatedTableId) > -1 ||
                deleteTableIds.indexOf(relationship.relatedTableId) > -1);
              if (relationships.length) {
                // at least one relationship needs to be removed
                const json = {};
                json.relationships = relationships;
                const delFromDefUrl = `${adminUrl}/${fLayer.layerId}/deleteFromDefinition`;
                callInfos.push({ delFromDefUrl, json });
              }
            } // else view layer not yet part of view or already has all relationships
          }
        });
        if (callInfos.length) {
          if (portal.isPortal) {
            // can't handle simultaneous requests
            for (const callInfo of callInfos) {
              await deleteFromDefinitionRequest(callInfo.delFromDefUrl, callInfo.json, portalItem, esriRequest);
            }
          }
          else {
            const calls = [];
            callInfos.forEach((callInfo) => {
              calls.push(deleteFromDefinitionRequest(callInfo.delFromDefUrl, callInfo.json, portalItem, esriRequest));
            });
            await Promise.all(calls);
          }
        }
      }
      // add
      layerIds.forEach((id) => {
        if (!getLayersAndTables(adminServiceInfo).some((lyr) => lyr.id === id)) {
          addLayerIds.push(id);
        }
      });
      if (addLayerIds.length) {
        const layers = (_c = layer.layers) === null || _c === void 0 ? void 0 : _c.filter((lyr) => addLayerIds.indexOf(lyr.layerId) > -1).map((lyr) => getDefLayerJSON(lyr, props)).toArray().reverse();
        const tables = (_d = layer.tables) === null || _d === void 0 ? void 0 : _d.filter((lyr) => addLayerIds.indexOf(lyr.layerId) > -1).map((lyr) => getDefLayerJSON(lyr, props)).toArray().reverse();
        await addToDefinitionRequest$1(`${adminUrl}/addToDefinition`, {
          layers: layers,
          tables: tables
        }, esriRequest, props);
        // do we need to add relationships for any newly added layers?
        const callInfos = [];
        getLayersAndTables(layer)
          .filter((fLayer) => layerIds.indexOf(fLayer.layerId) > -1)
          .forEach(async (fLayer) => {
          var _a, _b;
          if ((_a = fLayer.relationships) === null || _a === void 0 ? void 0 : _a.length) {
            // the original layer has relationships
            const viewLayerInfo = getLayersAndTables(adminServiceInfo).find((layerInfo) => layerInfo.id === fLayer.layerId);
            if (viewLayerInfo) {
              // this view layer was not just added to the view
              if (((_b = fLayer.relationships) === null || _b === void 0 ? void 0 : _b.length) !== viewLayerInfo.relationships.length) {
                const json = {};
                // only add relationships pointing to newly added layers
                const relationships = fLayer.relationships.filter((relationship) => addLayerIds.indexOf(relationship.relatedTableId) > -1);
                json.relationships = relationships;
                const addToDefUrl = `${adminUrl}/${fLayer.layerId}/addToDefinition`;
                callInfos.push({ addToDefUrl, json });
              } // else view layer already has all relationships
            } // else we sent all relationships when adding the layer to the view earlier
          }
        });
        if (callInfos.length) {
          if (portal.isPortal) {
            // can't handle simultaneous requests
            for (const callInfo of callInfos) {
              await addToDefinitionRequest$1(callInfo.addToDefUrl, callInfo.json, esriRequest, props);
            }
          }
          else {
            const calls = [];
            callInfos.forEach((callInfo) => {
              calls.push(addToDefinitionRequest$1(callInfo.addToDefUrl, callInfo.json, esriRequest, props));
            });
            await Promise.all(calls);
          }
        }
      }
      // update fields, filter, AOI
      // also update the new layers that were just added
      const callInfos = [];
      const calls = [];
      const makeGetUpdateLayerJSONCall = async (callInfos, fLayer) => {
        const updateDefUrl = `${adminUrl}/${fLayer.layerId}/updateDefinition`;
        const json = await getUpdateLayerJSON(fLayer, props);
        callInfos.push({ updateDefUrl, json });
        return Promise.resolve();
      };
      getLayersAndTables(layer)
        .filter((fLayer) => layerIds.indexOf(fLayer.layerId) > -1)
        .forEach((fLayer) => {
        if (hasLayerChanges(fLayer.layerId, props)) {
          calls.push(makeGetUpdateLayerJSONCall(callInfos, fLayer));
        }
      });
      await Promise.all(calls);
      if (callInfos.length) {
        if (portal.isPortal) {
          for (const callInfo of callInfos) {
            await updateDefinitionRequest(callInfo.updateDefUrl, callInfo.json, esriRequest, props);
          }
        }
        else {
          const calls = [];
          callInfos.forEach((callInfo) => {
            calls.push(updateDefinitionRequest(callInfo.updateDefUrl, callInfo.json, esriRequest, props));
          });
          await Promise.all(calls);
        }
      }
    }
    else {
      // not a group layer
      if (hasLayerChanges(layer.layerId, props)) {
        const json = await getUpdateLayerJSON(layer, props);
        const updateDefUrl = `${adminUrl}/${layer.layerId}/updateDefinition`;
        await updateDefinitionRequest(updateDefUrl, json, esriRequest, props);
      }
    }
    return new Promise((resolve) => {
      resolve({ addLayerIds, deleteLayerIds });
    });
  }
  catch (e) {
    console.error(e);
    return new Promise((_, reject) => {
      reject(new Error("updateDefinition failed"));
    });
  }
}
async function updateDefinitionRequest(updateDefUrl, json, esriRequest, props, retry = false) {
  var _a;
  const { layer, viewItem } = props;
  const updateDefContent = {
    updateDefinition: JSON.stringify(json)
  };
  try {
    const portalItem = layer.portalItem;
    const portal = portalItem.portal;
    const isVelocityView = (viewItem === null || viewItem === void 0 ? void 0 : viewItem.typeKeywords.indexOf("IoTFeatureLayer")) > -1;
    const result = await esriRequest(updateDefUrl, {
      query: Object.assign(Object.assign({}, updateDefContent), { f: "json", async: !portal.isPortal && !isVelocityView, token: portal.credential.token }),
      method: "post",
      responseType: "json"
    });
    if (portal.isPortal || isVelocityView) {
      return new Promise((resolve) => {
        resolve();
      });
    }
    else {
      try {
        await pollForStatus$1((_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.statusURL, {
          f: "json",
          token: portal.credential.token
        }, esriRequest);
        return new Promise((resolve) => {
          resolve();
        });
      }
      catch (e) {
        // update request worked; ignore the polling error
        //return new Promise((resolve) => {
        //  resolve();
        //});
        /* real error
        {
          "submissionTime": 1652480104360,
          "lastUpdatedTime": 1652480104360,
          "status": "Failed",
          "error": {
              "code": 500,
              "description": "Editing definition error - USA_West2_view"
          }
        }
        */
        return new Promise((_, reject) => {
          reject(new Error("updateDefinition request failed (poll)"));
        });
      }
    }
  }
  catch (e) {
    if (!retry) {
      // in case it's just a fluke
      return updateDefinitionRequest(updateDefUrl, json, esriRequest, props, true);
    }
    return new Promise((_, reject) => {
      reject(new Error("updateDefinition request failed"));
    });
  }
}
async function addToDefinitionRequest$1(addToDefUrl, json, esriRequest, props, retry = false) {
  var _a;
  const { layer, viewItem } = props;
  const addToDefContent = {
    addToDefinition: JSON.stringify(json)
  };
  try {
    const portalItem = layer.portalItem;
    const portal = portalItem.portal;
    const isVelocityView = (viewItem === null || viewItem === void 0 ? void 0 : viewItem.typeKeywords.indexOf("IoTFeatureLayer")) > -1;
    const result = await esriRequest(addToDefUrl, {
      query: Object.assign(Object.assign({}, addToDefContent), { f: "json", async: !portal.isPortal && !isVelocityView, token: portal.credential.token }),
      method: "post",
      responseType: "json"
    });
    if (portal.isPortal || isVelocityView) {
      return new Promise((resolve) => {
        resolve();
      });
    }
    else {
      try {
        await pollForStatus$1((_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.statusURL, {
          f: "json",
          token: portal.credential.token
        }, esriRequest);
        return new Promise((resolve) => {
          resolve();
        });
      }
      catch (e) {
        // add request worked; ignore the polling error
        //return new Promise((resolve) => {
        //  resolve();
        //});
        /* real error
        {
          "submissionTime": 1652480104360,
          "lastUpdatedTime": 1652480104360,
          "status": "Failed",
          "error": {
              "code": 500,
              "description": "Editing definition error - USA_West2_view"
          }
      }
        */
        return new Promise((_, reject) => {
          reject(new Error("addToDefinition request failed (poll)"));
        });
      }
    }
  }
  catch (e) {
    if (!retry) {
      // in case it's just a fluke
      return addToDefinitionRequest$1(addToDefUrl, json, esriRequest, props, true);
    }
    return new Promise((_, reject) => {
      reject(new Error("addToDefinition request failed"));
    });
  }
}
async function deleteFromDefinitionRequest(deleteFromDefUrl, json, portalItem, esriRequest, retry = false) {
  const deleteFromDefContent = {
    deleteFromDefinition: JSON.stringify(json)
  };
  try {
    await esriRequest(deleteFromDefUrl, {
      query: Object.assign(Object.assign({}, deleteFromDefContent), { f: "json", token: portalItem.portal.credential.token }),
      method: "post",
      responseType: "json"
    });
    return new Promise((resolve) => {
      resolve();
    });
  }
  catch (e) {
    if (!retry) {
      // in case it's just a fluke
      return deleteFromDefinitionRequest(deleteFromDefUrl, json, portalItem, esriRequest, true);
    }
    return new Promise((_, reject) => {
      reject(new Error("deleteFromDefinition request failed"));
    });
  }
}
function getDefLayerJSON(fLayer, props) {
  /*
  // compared to service info response (layers, tables)....
  - no indexes
  - no fields
  - no serviceItemId
  - no serverGens
  - no relationships
  - + url
  - + attributes
  - + layerMetadataUrl
  - + mapViewerUrl
  - + mapViewerUrlWithGeocode
  - + newMapViewerUrl
  - + sceneViewerUrl
  - + adminLayerInfo
  */
  const { layer, layerItem } = props;
  const json = fLayer.sourceJSON;
  delete json.indexes;
  delete json.fields;
  delete json.serviceItemId;
  delete json.serverGens;
  delete json.relationships;
  json.url = `${fLayer.url}/${fLayer.layerId}?token=${layer.portalItem.portal.credential.token}`;
  json.adminLayerInfo = {
    viewLayerDefinition: {
      sourceServiceName: getServiceName(layerItem),
      sourceLayerId: fLayer.layerId,
      sourceLayerFields: "*"
    }
  };
  // can't update fields or AOI when adding layer to definition
  //console.log("getDefLayerJSON - id:", fLayer.layerId, json);
  return json;
}
async function getUpdateLayerJSON(fLayer, props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
  const { modules } = props;
  const json = {};
  const viewLayerProps = getViewLayerProps(fLayer.layerId, props);
  if (viewLayerProps) {
    // filter
    json.viewDefinitionQuery = viewLayerProps.filter || "";
    // AOI
    if (viewLayerProps.aoi) {
      let aoi = viewLayerProps.aoi;
      // make sure SR fits to layer
      if (!sameSR(aoi.spatialReference, fLayer.spatialReference)) {
        await modules.projection.load();
        const geom = aoi.rings ? modules.Polygon.fromJSON(aoi) : modules.Extent.fromJSON(aoi);
        aoi = (_a = modules.projection.project(geom, fLayer.spatialReference)) === null || _a === void 0 ? void 0 : _a.toJSON();
      }
      const geometryType = aoi.rings ? "esriGeometryPolygon" : "esriGeometryEnvelope";
      json.viewLayerDefinition = {
        filter: {
          operator: "esriSpatialRelIntersects",
          value: {
            geometryType,
            geometry: aoi
          }
        }
      };
    }
    else {
      const adminLayerInfo = getAdminLayerInfo(fLayer.layerId, props);
      const aoiValue = (_e = (_d = (_c = (_b = adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.adminLayerInfo) === null || _b === void 0 ? void 0 : _b.viewLayerDefinition) === null || _c === void 0 ? void 0 : _c.table) === null || _d === void 0 ? void 0 : _d.filter) === null || _e === void 0 ? void 0 : _e.value;
      if (aoiValue) {
        // only update if there was one before
        json.viewLayerDefinition = {
          filter: null
        };
      }
    }
    // fields
    if (viewLayerProps.fields) {
      json.fields = fLayer.fields.map((field) => {
        return {
          name: field.name,
          visible: viewLayerProps.fields.indexOf(field.name) > -1
        };
      });
    }
    else {
      // all fields are visible
      json.fields = fLayer.fields.map((field) => {
        return {
          name: field.name,
          visible: true
        };
      });
    }
  }
  else {
    // filter
    json.viewDefinitionQuery = "";
    // fields
    json.fields = fLayer.fields.map((field) => {
      return {
        name: field.name,
        visible: true
      };
    });
    // AOI
    const adminLayerInfo = getAdminLayerInfo(fLayer.layerId, props);
    const aoiValue = (_j = (_h = (_g = (_f = adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.adminLayerInfo) === null || _f === void 0 ? void 0 : _f.viewLayerDefinition) === null || _g === void 0 ? void 0 : _g.table) === null || _h === void 0 ? void 0 : _h.filter) === null || _j === void 0 ? void 0 : _j.value;
    if (aoiValue) {
      // only update if there was one before
      json.viewLayerDefinition = {
        filter: null
      };
    }
  }
  //console.log("getUpdateLayerJSON - id:", fLayer.layerId, json);
  return json;
}
async function moveToFolder(props, createServiceResponse, newItemProps, esriRequest) {
  const { layer } = props;
  const portalItem = layer.portalItem;
  const { portal } = portalItem;
  if (!newItemProps.folder || !newItemProps.folder.id || newItemProps.folder.id === portalItem.owner) {
    // it's already in the home folder
    return;
  }
  let baseUrl = `${portal.restUrl}/content/users/${portalItem.owner}/items/`;
  const moveUrl = `${baseUrl}${createServiceResponse.itemId}/move`;
  const moveContent = {
    folder: newItemProps.folder.id
  };
  return await esriRequest(moveUrl, {
    query: Object.assign(Object.assign({}, moveContent), { f: "json", token: portal.credential.token }),
    method: "post",
    responseType: "json"
  });
}
async function initialItemUpdate(props, createServiceResponse, newItemProps, esriRequest) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
  const { layer, layerIds } = props;
  const portalItem = layer.portalItem;
  const portal = portalItem.portal;
  const itemData = await layer.portalItem.fetchData();
  const hasData = (itemData === null || itemData === void 0 ? void 0 : itemData.layers) || (itemData === null || itemData === void 0 ? void 0 : itemData.tables);
  if (hasData) {
    itemData.layers = (_a = itemData.layers) === null || _a === void 0 ? void 0 : _a.filter((lyr) => layerIds.indexOf(lyr.id) > -1);
    itemData.tables = (_b = itemData.tables) === null || _b === void 0 ? void 0 : _b.filter((lyr) => layerIds.indexOf(lyr.id) > -1);
    // if there are no existing overrides for layers or tables keep them undefined
    if (layer.type === "group" && ((_c = layer.layers) === null || _c === void 0 ? void 0 : _c.length)) {
      itemData.layers = itemData.layers || undefined;
    }
    if (layer.type === "group" && ((_d = layer.tables) === null || _d === void 0 ? void 0 : _d.length)) {
      itemData.tables = itemData.tables || undefined;
    }
    // remove parent item definitionExpression
    (_e = itemData.layers) === null || _e === void 0 ? void 0 : _e.forEach((lyr) => {
      if (lyr.layerDefinition) {
        lyr.layerDefinition.definitionExpression = undefined;
      }
    });
    (_f = itemData.tables) === null || _f === void 0 ? void 0 : _f.forEach((table) => {
      if (table.layerDefinition) {
        table.layerDefinition.definitionExpression = undefined;
      }
    });
  }
  const updateUrl = `${portal.restUrl}/content/users/${portalItem.owner}/items/${createServiceResponse.itemId}/update`;
  // need to send some info again
  const updateContent = {
    title: newItemProps.title,
    tags: ((_g = newItemProps.tags) === null || _g === void 0 ? void 0 : _g.length) ? newItemProps.tags.toString() : undefined,
    snippet: newItemProps.summary,
    categories: (_h = newItemProps.categories) === null || _h === void 0 ? void 0 : _h.join(",")
    //extent: `${portalItem.extent.xmin},${portalItem.extent.ymin},${portalItem.extent.xmax},${portalItem.extent.ymax}`,
  };
  if (hasData) {
    updateContent.text = JSON.stringify(itemData);
  }
  if ((layer.type === "group" && ((_m = (_l = (_k = (_j = layer.layers) === null || _j === void 0 ? void 0 : _j.getItemAt(0)) === null || _k === void 0 ? void 0 : _k.fullExtent) === null || _l === void 0 ? void 0 : _l.spatialReference) === null || _m === void 0 ? void 0 : _m.wkt)) ||
    (layer.type === "feature" && ((_p = (_o = layer.fullExtent) === null || _o === void 0 ? void 0 : _o.spatialReference) === null || _p === void 0 ? void 0 : _p.wkt))) {
    // fix bad item extent created by the /refresh call sent from addToDefinition
    setTimeout(() => {
      const updateContent2 = {
        extent: `${portalItem.extent.xmin},${portalItem.extent.ymin},${portalItem.extent.xmax},${portalItem.extent.ymax}`
      };
      esriRequest(updateUrl, {
        query: Object.assign(Object.assign({}, updateContent2), { f: "json", token: portal.credential.token }),
        method: "post",
        responseType: "json"
      });
    }, 7000);
  }
  return await esriRequest(updateUrl, {
    query: Object.assign(Object.assign({}, updateContent), { f: "json", token: portal.credential.token }),
    method: "post",
    responseType: "json"
  });
}
async function itemUpdate(props, addLayerIds, deleteLayerIds, esriRequest) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  if (!addLayerIds.length && !deleteLayerIds.length) {
    // nothing to do
    return new Promise((resolve) => {
      resolve();
    });
  }
  const { layer, viewItem } = props;
  const portalItem = layer.portalItem;
  const portal = portalItem.portal;
  const itemData = await layer.portalItem.fetchData();
  let viewItemData = await viewItem.fetchData();
  if ((!itemData || (!itemData.layers && !itemData.tables)) &&
    (!viewItemData || (!viewItemData.layers && !viewItemData.tables))) {
    return new Promise((resolve) => {
      resolve();
    });
  }
  if (deleteLayerIds.length) {
    if ((_a = viewItemData === null || viewItemData === void 0 ? void 0 : viewItemData.layers) === null || _a === void 0 ? void 0 : _a.length) {
      viewItemData.layers = viewItemData.layers.filter((lyr) => deleteLayerIds.indexOf(lyr.id) === -1);
    }
    if ((_b = viewItemData === null || viewItemData === void 0 ? void 0 : viewItemData.tables) === null || _b === void 0 ? void 0 : _b.length) {
      viewItemData.tables = viewItemData.tables.filter((lyr) => deleteLayerIds.indexOf(lyr.id) === -1);
    }
  }
  // Do we already have a layers/tables list in the item /data object?
  // If so, are we adding some new layers/tables?
  // Then we have to make sure that we add these new layers/tables to the list
  // even if there are no existing overrides for them
  const viewItemHasContent = !!((_c = viewItemData === null || viewItemData === void 0 ? void 0 : viewItemData.layers) === null || _c === void 0 ? void 0 : _c.length) || !!((_d = viewItemData === null || viewItemData === void 0 ? void 0 : viewItemData.tables) === null || _d === void 0 ? void 0 : _d.length);
  if (addLayerIds.length) {
    const newLayers = [];
    const newTables = [];
    addLayerIds.forEach((id) => {
      const fLayer = getFL(id, props);
      if (!fLayer.isTable) {
        let newLayer;
        if (itemData === null || itemData === void 0 ? void 0 : itemData.layers) {
          newLayer = itemData.layers.find((lyr) => lyr.id === id);
          // remove parent item definitionExpression
          if (newLayer === null || newLayer === void 0 ? void 0 : newLayer.layerDefinition) {
            newLayer.layerDefinition.definitionExpression = undefined;
          }
        }
        if (!newLayer && viewItemHasContent) {
          // we must add the newly added layer to the item /data layers list
          // no overrides, add just id, don't need popup
          newLayer = { id };
        }
        if (newLayer) {
          newLayers.push(newLayer);
        }
      }
      else {
        // table
        let newTable;
        if (itemData === null || itemData === void 0 ? void 0 : itemData.tables) {
          newTable = itemData.tables.find((lyr) => lyr.id === id);
          // remove parent item definitionExpression
          if (newTable === null || newTable === void 0 ? void 0 : newTable.layerDefinition) {
            newTable.layerDefinition.definitionExpression = undefined;
          }
        }
        if (!newTable && viewItemHasContent) {
          // we must add the newly added layer to the item /data layers list
          // no overrides, add just id, don't need popup
          newTable = { id };
        }
        if (newTable) {
          newTables.push(newTable);
        }
      }
    });
    if (newLayers === null || newLayers === void 0 ? void 0 : newLayers.length) {
      viewItemData = viewItemData || {};
      viewItemData.layers = (viewItemData.layers || []).concat(newLayers);
      // make sure it follows the parent layer's order
      // the view service might have it differently (service bug)
      const ids = [];
      (_e = layer.layers) === null || _e === void 0 ? void 0 : _e.forEach((lyr) => {
        ids.unshift(lyr.layerId);
      });
      viewItemData.layers.sort((lyrA, lyrB) => (ids.indexOf(lyrA.id) < ids.indexOf(lyrB.id) ? -1 : 1));
    }
    if (newTables === null || newTables === void 0 ? void 0 : newTables.length) {
      viewItemData = viewItemData || {};
      viewItemData.tables = (viewItemData.tables || []).concat(newTables);
      // make sure it follows the parent layer's order
      // the view service might have it differently (service bug)
      const ids = [];
      (_f = layer.tables) === null || _f === void 0 ? void 0 : _f.forEach((lyr) => {
        ids.unshift(lyr.layerId);
      });
      viewItemData.tables.sort((lyrA, lyrB) => (ids.indexOf(lyrA.id) < ids.indexOf(lyrB.id) ? -1 : 1));
    }
  }
  const updateUrl = `${portal.restUrl}/content/users/${portalItem.owner}/items/${viewItem.id}/update`;
  // need to send some info again
  const updateContent = {
    tags: ((_g = viewItem.tags) === null || _g === void 0 ? void 0 : _g.length) ? viewItem.tags.toString() : undefined,
    snippet: viewItem.snippet,
    categories: (_h = viewItem.categories) === null || _h === void 0 ? void 0 : _h.join(","),
    //extent: `${viewItem.extent.xmin},${viewItem.extent.ymin},${viewItem.extent.xmax},${viewItem.extent.ymax}`,
    text: JSON.stringify(viewItemData)
  };
  return await esriRequest(updateUrl, {
    query: Object.assign(Object.assign({}, updateContent), { f: "json", token: portal.credential.token }),
    method: "post",
    responseType: "json"
  });
}
const pollForStatus$1 = async (url, params, esriRequest) => {
  var _a;
  if (!url) {
    throw new Error("pollForStatus: no status URL");
  }
  const pendingStatuses = ["processing", "partial", "Pending", "InProgress"];
  const successStatuses = ["completed", "Completed"];
  // Keep polling status until either completed or failed
  try {
    // Do failures report as success (status 200)? May need to manually throw error on status check failure
    const statusResponse = await esriRequest(url, { query: params });
    const status = (_a = statusResponse === null || statusResponse === void 0 ? void 0 : statusResponse.data) === null || _a === void 0 ? void 0 : _a.status;
    if (pendingStatuses.includes(status)) {
      await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_4__.t)(500);
      return pollForStatus$1(url, params, esriRequest);
    }
    else if (successStatuses.includes(status)) {
      return new Promise((resolve) => {
        resolve();
      });
    }
    else {
      return new Promise((_, reject) => {
        reject();
      });
    }
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(e);
    });
  }
};

const arcgisLayerViewCss = ".sc-arcgis-layer-view-h{height:100%}.panel.sc-arcgis-layer-view{height:100%}.footer.sc-arcgis-layer-view{width:100%}.error-content.sc-arcgis-layer-view{margin:0.5rem}";

const ArcgisLayerView$1 = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewCancel", 7);
    this.arcgisLayerViewStepChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewStepChange", 7);
    this.arcgisLayerViewCreated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewCreated", 7);
    this.arcgisLayerViewChanged = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewChanged", 7);
    this.status = flowStatus.LOADING;
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goCancel = () => {
      this.arcgisLayerViewCancel.emit();
    };
    this.view = undefined;
    this.itemId = undefined;
    this.config = undefined;
    this.props = undefined;
    this.reRender = false;
  }
  arcgisLayerViewStatusHandler(event) {
    var _a;
    const { props } = this;
    const { detail } = event;
    this.status = detail.status;
    if ((_a = detail.layerIds) === null || _a === void 0 ? void 0 : _a.length) {
      props.layerIds = [...detail.layerIds];
    }
    if (this.status === flowStatus.SELECTION) {
      // we might change source item in this step...
      props.sourceItemId = props.layerItem.id;
      this.arcgisLayerViewStepChange.emit(1);
    }
    else if (this.status === flowStatus.OVERVIEW) {
      this.arcgisLayerViewStepChange.emit(2);
    }
    else if (this.status === flowStatus.CREATE) {
      this.arcgisLayerViewStepChange.emit(3);
    }
    this.reRender = !this.reRender;
  }
  async arcgisLayerViewCreateDoneHandler(event) {
    this.arcgisLayerViewCreated.emit(event.detail);
  }
  async arcgisLayerViewOverviewUpdatedHandler() {
    this.arcgisLayerViewChanged.emit(this.itemId);
  }
  arcgisLayerViewSelectionCancelHandler() {
    this.arcgisLayerViewCancel.emit();
  }
  arcgisLayerViewOverviewCancelHandler() {
    this.arcgisLayerViewCancel.emit();
  }
  arcgisLayerViewCreateCancelHandler() {
    this.arcgisLayerViewCancel.emit();
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  async setStep(step) {
    const { props } = this;
    const { viewItem } = props;
    // close popovers
    document.body.querySelectorAll(".js-app-flyout").forEach((node) => {
      document.body.removeChild(node);
    });
    switch (step) {
      case 1:
        this.status = flowStatus.SELECTION;
        this.reRender = !this.reRender;
        break;
      case 2:
        this.status = flowStatus.OVERVIEW;
        this.reRender = !this.reRender;
        break;
      case 3:
        if (!viewItem) {
          this.status = flowStatus.CREATE;
          this.reRender = !this.reRender;
        }
        break;
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { itemId, view, config } = this;
    const [strings] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = strings;
    this.props = { config, view, itemId, strings, layerIds: [], modules: {} };
  }
  async componentDidLoad() {
    var _a, _b, _c;
    let { props } = this;
    const { itemId, view } = props;
    if (!itemId) {
      console.error("itemId is a required property.");
      return;
    }
    try {
      const [PortalItem, Layer, Extent, projection, colorUtils, Polygon, esriRequest] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
        "esri/portal/PortalItem",
        "esri/layers/Layer",
        "esri/geometry/Extent",
        "esri/geometry/projection",
        "esri/views/support/colorUtils",
        "esri/geometry/Polygon",
        "esri/request"
      ]);
      props.modules.PortalItem = PortalItem;
      props.modules.projection = projection;
      props.modules.Polygon = Polygon;
      props.modules.Extent = Extent;
      props.modules.Layer = Layer;
      const item = new PortalItem({
        id: itemId
      });
      await item.load();
      if (item.type !== "Feature Service") {
        console.error("Only Feature Service items are allowed.");
        return;
      }
      let viewItem, layerItem;
      if (((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.indexOf("View Service")) > -1) {
        // need to look for original item
        viewItem = item;
        await item
          .fetchRelatedItems({
          relationshipType: "Service2Data",
          direction: "forward"
        })
          .then(async (results) => {
          if (results.length) {
            layerItem = results[0];
          }
        });
      }
      else {
        layerItem = item;
      }
      if (!layerItem) {
        console.error("Could not find related item for view.");
        this.panelNode.loading = false;
        this.status = flowStatus.ERROR;
        this.reRender = !this.reRender;
        return;
      }
      props.sourceItemId = layerItem.id;
      let layerItemOwner = layerItem.portal.user;
      if (layerItem.portal.user.username !== layerItem.owner) {
        // get user info of owner
        await esriRequest(`${layerItem.portal.restUrl}/community/users/${layerItem.owner}`, {
          query: { f: "json" }
        }).then((userResult) => {
          if (userResult === null || userResult === void 0 ? void 0 : userResult.data) {
            layerItemOwner = userResult.data;
          }
        });
      }
      let gcsExtent = (viewItem || layerItem).extent;
      if (!gcsExtent) {
        gcsExtent = new Extent({
          xmin: -180,
          ymin: -90,
          xmax: 180,
          ymax: 90,
          spatialReference: 4326
        });
      }
      if (view.spatialReference.wkid !== 4326) {
        await projection.load();
        const extent = projection.project(gcsExtent, view.spatialReference);
        view.goTo(extent.expand(1.1));
      }
      else {
        view.goTo(gcsExtent.expand(1.1));
      }
      const backgroundTheme = await colorUtils.getBackgroundColorTheme(view);
      // layerItem (from relatedItems call) does not contain itemControl
      // need to get the item card again to get itemControl too
      // need itemControl to create indexes
      layerItem = new PortalItem({
        id: layerItem.id
      });
      await layerItem.load();
      const layer = await Layer.fromPortalItem({
        portalItem: layerItem
      });
      this.props = Object.assign(Object.assign({}, props), { layerItem, viewItem, layer, layerItemOwner, backgroundTheme });
      props = this.props;
      //console.log("**layerItem**", layerItem);
      //console.log("**viewItem**", viewItem);
      //console.log("**layer**", layer);
      if (layer.type === "group") {
        // group layer has no layers or tables at this point
        // loadAll() loads layers and tables (at v4.23)
        await layer.loadAll();
        if ((_b = layer.layers) === null || _b === void 0 ? void 0 : _b.length) {
          // has at least one spatial layer
          view.map.add(layer);
        }
        props.layerIds = getLayersAndTables(layer)
          .map((subLayer) => subLayer.layerId)
          .toArray();
        // default popups
        (_c = layer.layers) === null || _c === void 0 ? void 0 : _c.forEach((lyr) => {
          if (!lyr.popupTemplate && lyr.popupEnabled) {
            lyr.popupTemplate = lyr.createPopupTemplate();
          }
        });
      }
      else {
        await layer.load();
        if (!layer.isTable) {
          view.map.add(layer);
        }
        props.layerIds = [layer.layerId];
        // default popup
        layer.popupTemplate = layer.createPopupTemplate();
      }
      await getAdminServiceInfo$1(props);
      /* console.log(
        "view adminServiceInfo layers",
        props.adminServiceInfo?.layers?.map((lyr: any) => {
          return {
            id: lyr.id,
            name: lyr.name,
            adminLayerInfo_filter: lyr.adminLayerInfo?.viewLayerDefinition?.table?.filter?.value,
            viewDefinitionQuery: lyr.viewDefinitionQuery,
            fields: lyr.fields.map((field: any) => `${field.name} (${field.visible})`)
          };
        })
      ); */
      await initDefinitions(props);
      //console.log("initDefinitions", propsToString(props));
      // derivative layers
      props.derivativeLayers = { hasAny: false };
      if (viewItem) {
        const results = await item.fetchRelatedItems({
          relationshipType: "Service2Service",
          direction: "forward"
        });
        if (results.length) {
          props.derivativeLayers = {
            hasMS: results.find((item) => item.type === "Map Service"),
            hasVTL: results.find((item) => item.type === "Vector Tile Service"),
            hasWFS: results.find((item) => item.type === "WFS"),
            hasScene: results.find((item) => item.type === "Scene Service"),
            hasOGCFL: results.find((item) => item.type === "OGCFeatureServer")
          };
          if (props.derivativeLayers.hasMS ||
            props.derivativeLayers.hasVTL ||
            props.derivativeLayers.hasWFS ||
            props.derivativeLayers.hasScene ||
            props.derivativeLayers.hasOGCFL) {
            props.derivativeLayers.hasAny = true;
          }
        }
      }
      // sync and replicas
      if (viewItem && props.adminServiceInfo.capabilities.indexOf("Sync") > -1) {
        // check for replicas
        const replicaUrl = `${viewItem.url}/replicas`;
        await esriRequest(replicaUrl, {
          query: { f: "json" }
        }).then((replicaResult) => {
          var _a;
          props.hasReplicas = ((_a = replicaResult.data) === null || _a === void 0 ? void 0 : _a.length) > 0;
        });
      }
      this.status = flowStatus.SELECTION;
      this.reRender = !this.reRender;
      this.arcgisLayerViewStepChange.emit(1);
    }
    catch (e) {
      console.error(e);
      this.status = flowStatus.ERROR;
      this.reRender = !this.reRender;
    }
  }
  disconnectedCallback() {
    const { props } = this;
    const { view, layer } = props;
    view.map.remove(layer);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render", propsToString(this.props), "status:", this.status);
    const { status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, status === flowStatus.ERROR ? this.renderError() : null, status === flowStatus.LOADING ? this.renderLoading() : null, [flowStatus.SELECTION, flowStatus.SWAP_SOURCE, flowStatus.BROWSE_LAYER].includes(status)
      ? this.renderLayerSelection()
      : null, [flowStatus.OVERVIEW, flowStatus.DEFINITION, flowStatus.FILTER].includes(status)
      ? this.renderLayerOverview()
      : null, status === flowStatus.CREATE ? this.renderCreateView() : null));
  }
  renderError() {
    const { props } = this;
    const { viewItem, layerItem, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { loading: false, heading: (viewItem === null || viewItem === void 0 ? void 0 : viewItem.title) || (layerItem === null || layerItem === void 0 ? void 0 : layerItem.title) || strings.msg.error, description: (viewItem === null || viewItem === void 0 ? void 0 : viewItem.title) || (layerItem === null || layerItem === void 0 ? void 0 : layerItem.title) ? strings.general.sourceLayer : undefined, class: CSS$9.panel, ref: (node) => (this.panelNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$9.errorContent }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "s", width: "full", open: true, icon: "exclamation-mark-triangle", kind: "danger" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, strings.msg.error), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.msg.initFailed))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$9.footer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.goCancel, appearance: "transparent", width: "full" }, strings.general.cancel))));
  }
  renderLoading() {
    const { props } = this;
    const { viewItem, layerItem, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { loading: true, heading: (viewItem === null || viewItem === void 0 ? void 0 : viewItem.title) || (layerItem === null || layerItem === void 0 ? void 0 : layerItem.title), description: strings.general.sourceLayer, class: CSS$9.panel, ref: (node) => (this.panelNode = node) }));
  }
  renderLayerSelection() {
    const { props, status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-selection", { key: `selection-${status}`, props: props, status: status }));
  }
  renderLayerOverview() {
    const { props, status } = this;
    const { definitionLayerId } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-overview", { key: `overview-${status}-${definitionLayerId}`, props: props, status: status }));
  }
  renderCreateView() {
    const { props, status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-create", { key: `create-${status}`, props: props }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerView$1.style = arcgisLayerViewCss;

const arcgisLayerViewBrowseLayerCss = ".panel.sc-arcgis-layer-view-browse-layer{height:100%}";

const ArcgisLayerViewBrowseLayer = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewStatusChange", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onBack = () => {
      this.arcgisLayerViewStatusChange.emit({ status: flowStatus.SWAP_SOURCE });
    };
    this.goSwapLayer = async (itemId) => {
      const { props, flowItemNode, hostElement } = this;
      const { strings } = props;
      const swapItem = this.items.find((item) => item.id === itemId);
      this.loading = true;
      const canSwapLayerErrorString = await canSwap(swapItem, this.props);
      if (canSwapLayerErrorString) {
        this.loading = false;
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = flowItemNode;
        this.msgNode.isError = true;
        this.msgNode.message = `${strings.msg.cannotSwap} ${canSwapLayerErrorString}`;
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
          }
        }, 7000);
      }
      else {
        try {
          await swapSource(this.props);
          this.loading = false;
          this.msgNode = document.createElement("arcgis-layer-view-msg");
          this.msgNode.props = props;
          this.msgNode.flowItemElement = flowItemNode;
          this.msgNode.message = strings.msg.successSwap.replace("${source}", swapItem.title);
          this.msgNode.closeWithOK = true;
          this.msgNode.addEventListener("arcgisLayerViewMsgClosed", () => {
            this.msgNode = undefined;
            this.arcgisLayerViewStatusChange.emit({ status: flowStatus.SELECTION });
          });
          hostElement.appendChild(this.msgNode);
        }
        catch (e) {
          this.loading = false;
          this.msgNode = document.createElement("arcgis-layer-view-msg");
          this.msgNode.props = props;
          this.msgNode.flowItemElement = flowItemNode;
          this.msgNode.isError = true;
          this.msgNode.message = strings.msg.swapFailed;
          hostElement.appendChild(this.msgNode);
          clearTimeout(this.timeoutHndl);
          this.timeoutHndl = setTimeout(() => {
            this.timeoutHndl = undefined;
            if (this.msgNode) {
              hostElement.removeChild(this.msgNode);
              this.msgNode = undefined;
            }
          }, 7000);
        }
      }
    };
    this.props = undefined;
    this.reRender = false;
    this.loading = false;
    this.items = undefined;
    this.pagination = undefined;
    this.error = undefined;
  }
  arcgisLayerViewMsgClosedHandler() {
    if (this.msgNode) {
      this.hostElement.removeChild(this.msgNode);
      this.msgNode = undefined;
    }
    clearTimeout(this.timeoutHndl);
    this.timeoutHndl = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 200);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, loading, hostElement } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.swapSource.browseForLayerTitle, description: strings.swapSource.subTitle, loading: loading, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, onCalciteFlowItemBack: this.onBack, ref: (node) => (this.flowItemNode = node) }, this.renderItemBrowser())));
  }
  renderItemBrowser() {
    const { props, pagination } = this;
    const { layer, sourceItemId, strings } = props;
    const { portalItem } = layer;
    const { portal } = portalItem;
    const user = portal.user;
    const query = `type:"Feature Service" typekeywords:"Hosted Service" -typekeywords:"View Service" owner:"${user.username}" -id:${sourceItemId}`;
    const baseUrl = `${(0,_portal_8714dc6c_js__WEBPACK_IMPORTED_MODULE_6__.g)(portal)}/home/`;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser", { onArcgisItemBrowserUpdate: (e) => {
        const { results, num, start, total } = e.detail;
        this.items = results;
        this.pagination = { start, num, total };
      }, filter: query, portal: portal, user: user, api: 4, config: { baseUrl }, selection: "none" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-top-bar", { slot: "top-bar" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-search", { slot: "search", term: "" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-sort", { options: ["modified", "title", "relevance"], slot: "sort" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-content", { slot: "content" }, (this.items || []).map((item) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card", { item: item, portal: portal, baseUrl: baseUrl, key: item.id }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: `swap-action-${item.id}`, icon: "arrow-right-left", text: "", scale: "s", slot: "actions-end", onClick: this.goSwapLayer.bind(this, item.id) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { slot: "tooltip", label: strings.general.swapSource, overlayPositioning: "fixed" }, strings.general.swapSource)))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-pagination", { total: pagination === null || pagination === void 0 ? void 0 : pagination.total, start: pagination === null || pagination === void 0 ? void 0 : pagination.start, num: pagination === null || pagination === void 0 ? void 0 : pagination.num, slot: "pagination" })));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewBrowseLayer.style = arcgisLayerViewBrowseLayerCss;

const CSS$8 = {
  panel: "panel",
  info: "info",
  footer: "footer"
};

const arcgisLayerViewCreateCss = ".panel.sc-arcgis-layer-view-create{height:100%}.info.sc-arcgis-layer-view-create{display:grid;grid-template-columns:repeat(1, minmax(0px, 1fr));gap:0.5rem;padding:1rem 0.75rem}.footer.sc-arcgis-layer-view-create{width:100%}";

const ArcgisLayerViewCreate$1 = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewStatusChange", 7);
    this.arcgisLayerViewCreateDone = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewCreateDone", 7);
    this.arcgisLayerViewCreateCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewCreateCancel", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goBack = () => {
      // save last settings
      const { props } = this;
      props.savedItemProps = {
        title: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title,
        tags: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags,
        summary: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet,
        categories: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories,
        folder: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder
      };
      this.arcgisLayerViewStatusChange.emit({ status: flowStatus.OVERVIEW });
    };
    this.goCreate = async () => {
      const { props, flowItemNode, hostElement } = this;
      const { strings } = props;
      // in case the create call fails
      props.savedItemProps = {
        title: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title,
        tags: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags,
        summary: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet,
        categories: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories,
        folder: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder
      };
      const newItemProps = {
        title: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title,
        tags: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags,
        summary: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet,
        categories: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories,
        folder: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder
      };
      this.loading = true;
      try {
        this.viewItemId = await createView(props, newItemProps);
        this.loading = false;
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = flowItemNode;
        this.msgNode.message = strings.msg.created;
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
            this.arcgisLayerViewCreateDone.emit(this.viewItemId);
          }
        }, 7000);
      }
      catch (e) {
        const { props, flowItemNode } = this;
        const { strings } = props;
        this.loading = false;
        console.error("could not create view", e);
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = flowItemNode;
        this.msgNode.isError = true;
        if (e.message === "service name already exists") {
          // going to have another string...
          this.msgNode.message = strings.msg.createFailed;
        }
        else {
          this.msgNode.message = strings.msg.createFailed;
        }
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
          }
        }, 7000);
      }
    };
    this.goCancel = () => {
      this.arcgisLayerViewCreateCancel.emit();
    };
    this.props = undefined;
    this.reRender = false;
    this.loading = false;
    this.title = undefined;
  }
  arcgisLayerViewMsgClosedHandler() {
    if (this.msgNode) {
      this.hostElement.removeChild(this.msgNode);
      this.msgNode = undefined;
    }
    clearTimeout(this.timeoutHndl);
    this.timeoutHndl = undefined;
    if (this.viewItemId) {
      this.arcgisLayerViewCreateDone.emit(this.viewItemId);
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { props } = this;
    this.title = await getSuggestedTitle(props);
  }
  async componentDidLoad() {
    requestAnimationFrame(() => { var _a; return (_a = this.backButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render view-create", propsToString(this.props));
    const { props, loading } = this;
    const { viewItem, layerItem, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.createView.create, description: (viewItem === null || viewItem === void 0 ? void 0 : viewItem.title) || (layerItem === null || layerItem === void 0 ? void 0 : layerItem.title), loading: loading, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, ref: (node) => (this.flowItemNode = node) }, this.renderFooterButtons(), this.renderInfo())));
  }
  renderFooterButtons() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$8.footer }, this.renderBack(), this.renderCreate(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("br", null), this.renderCancel()));
  }
  renderBack() {
    const { props } = this;
    const { strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: this.goBack, appearance: "outline-fill", width: "half", "icon-start": isRtl ? "arrow-right" : "arrow-left", ref: (node) => (this.backButtonNode = node) }, strings.general.back));
  }
  renderCreate() {
    const { props, title, titleError, summaryError } = this;
    const { layer, layerIds, strings } = props;
    const enabled = (layer === null || layer === void 0 ? void 0 : layer.loaded) && layerIds.length && title && !titleError && !summaryError;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !enabled, onClick: enabled && this.goCreate, appearance: "solid", width: "half", "icon-start": "plus-square", ref: (node) => (this.createButtonNode = node) }, strings.createView.create));
  }
  renderCancel() {
    const { props } = this;
    const { layer, layerIds, strings } = props;
    const enabled = (layer === null || layer === void 0 ? void 0 : layer.loaded) && layerIds.length;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !enabled, onClick: enabled && this.goCancel, appearance: "transparent", width: "full" }, strings.general.cancel));
  }
  renderInfo() {
    const { props, title } = this;
    const { layer, layerItemOwner, savedItemProps } = props;
    const { portalItem } = layer;
    const { portal } = portalItem;
    const user = portal.user;
    const config = { portal, user, api: 4 };
    if (savedItemProps) {
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title = savedItemProps.title;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder = savedItemProps.folder;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet = savedItemProps.summary || "";
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories = savedItemProps.categories;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags = savedItemProps.tags;
    }
    else {
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title = title;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder =
        portalItem.ownerFolder &&
          {
            id: portalItem.ownerFolder,
            username: portalItem.owner
          };
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet = portalItem.snippet || "";
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories = portalItem.categories;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags = portalItem.tags;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$8.info }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-properties", { portal: portal, user: user, api: 4, config: config, type: "Feature Service", scale: "s" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-title-input", { enablePublishing: true, onArcgisTitleInputChange: async (event) => {
        const node = event.target;
        const titleError = await node.validateTitle();
        if ((!this.titleError && titleError) || (this.titleError && !titleError)) {
          this.reRender = !this.reRender;
        }
        this.titleError = titleError;
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-folder-picker", { user: layerItemOwner }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-categories-picker", null), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-tags-picker", null), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-summary-input", { onArcgisSummaryInputChange: async (event) => {
        const node = event.target;
        const summaryError = (await node.getErrorMessage());
        if ((!this.summaryError && summaryError) || (this.summaryError && !summaryError)) {
          this.reRender = !this.reRender;
        }
        this.summaryError = summaryError;
      } }))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewCreate$1.style = arcgisLayerViewCreateCss;

const CSS$7 = {
  panel: "panel",
  hook: "hook",
  notice: "notice",
  filterBlock: "filter-block",
  filterChevron: "filter-chevron",
  aoiGroup: "aoi-group",
  aoiButton: "aoi-button",
  textCenter: "text-center",
  selectFields: "select-fields"
};

const arcgisLayerViewDefinitionCss = ".panel.sc-arcgis-layer-view-definition{height:100%}.hook.sc-arcgis-layer-view-definition{height:1px}.notice.sc-arcgis-layer-view-definition{margin:8px}.filter-block.sc-arcgis-layer-view-definition{cursor:pointer}.filter-block.sc-arcgis-layer-view-definition:hover{background-color:var(--calcite-ui-foreground-2)}.filter-chevron.sc-arcgis-layer-view-definition{margin-right:0.5rem}.arcgis--rtl.sc-arcgis-layer-view-definition .filter-chevron.sc-arcgis-layer-view-definition{margin-left:0.5rem;margin-right:auto}.aoi-group.sc-arcgis-layer-view-definition{width:100%;margin-bottom:0.75rem}.aoi-button.sc-arcgis-layer-view-definition{margin-top:0.75rem;border-top-width:1px;border-top-style:solid;border-top-color:var(--calcite-ui-border-3)}.text-center.sc-arcgis-layer-view-definition{text-align:center}.select-fields.sc-arcgis-layer-view-definition{margin:0 0 5px 0}";

const ArcgisLayerViewDefinition = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewOverViewRefresh = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewOverViewRefresh", 7);
    this.aoiSymbol = {
      type: "simple-fill",
      style: "solid",
      color: [0, 0, 0, 0],
      outline: {
        type: "simple-line",
        style: "solid",
        color: [255, 0, 0, 255],
        width: 2
      }
    };
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onBack = () => {
      this.arcgisLayerViewOverViewRefresh.emit();
    };
    // ---------  Filter  -------------------------------------------------------
    this.goFilter = () => {
      var _a;
      if ((_a = this.aoiBlockNode) === null || _a === void 0 ? void 0 : _a.open) {
        this.aoiBlockNode.open = false;
        this.onAOIToggle();
      }
      this.status = flowStatus.FILTER;
      this.reRender = !this.reRender;
    };
    this.onBackFilter = () => {
      this.status = flowStatus.DEFINITION;
      this.reRender = !this.reRender;
      setTimeout(() => { var _a; return (_a = this.filterActionNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 200);
    };
    // ---------  AOI     -------------------------------------------------------
    this.onPolygonClick = (event) => {
      const { props } = this;
      const { strings } = props;
      const node = event.target;
      if (!node.active) {
        this.sketchViewModel.cancel();
        this.sketchViewModel.create("polygon");
        node.active = true;
        this.rectangleAction.active = false;
        this.drawLabel.innerHTML = strings.defineView.aoiPolygonDraw;
      }
    };
    this.onRectangleClick = (event) => {
      const { props } = this;
      const { strings } = props;
      const node = event.target;
      if (!node.active) {
        this.sketchViewModel.cancel();
        this.sketchViewModel.create("rectangle");
        node.active = true;
        this.polygonAction.active = false;
        this.drawLabel.innerHTML = strings.defineView.aoiRectangleDraw;
      }
    };
    this.onDeleteAOIClick = () => {
      const { props } = this;
      const { definitionLayerId, strings } = props;
      this.sketchViewModel.cancel();
      this.graphicsLayer.removeAll();
      const viewLayerProps = getViewLayerProps(definitionLayerId, props);
      if (viewLayerProps) {
        viewLayerProps.aoi = undefined;
      }
      sanitizeViewProps(props);
      applyLayerAOI(undefined, definitionLayerId, props);
      this.drawLabel.innerHTML = strings.defineView.aoiSelect;
      this.polygonAction.disabled = false;
      this.rectangleAction.disabled = false;
      this.aoiBlockNode.description = strings.defineView.aoiSubtext;
      this.reRender = !this.reRender;
    };
    this.onGraphicUpdate = (event) => {
      const { props } = this;
      const { view, definitionLayerId } = props;
      view.closePopup();
      if (event.state === "complete") {
        const sketchGraphic = event.graphics[0];
        const extent = sketchGraphic.geometry.extent;
        const pts = sketchGraphic.geometry.rings[0];
        let isRectangle = false;
        if (pts.length === 5 &&
          pts.indexOf([extent.xmin, extent.ymin]) > -1 &&
          pts.indexOf([extent.xmax, extent.ymax]) > -1) {
          isRectangle = true;
        }
        addViewLayerProps(definitionLayerId, {
          aoi: this.rectangleAction.active && isRectangle
            ? extent.toJSON()
            : sketchGraphic.geometry.toJSON()
        }, props);
        applyLayerAOI(sketchGraphic.geometry, definitionLayerId, props);
        if (this.rectangleAction.active && !isRectangle) {
          // user updated a rectangle to a polygon
          this.reRender = !this.reRender;
        }
      }
    };
    // ---------  Fields  -------------------------------------------------------
    this.selectFields = (fl) => {
      const { props, totalFields, requiredFieldNames } = this;
      const { view, definitionLayerId } = props;
      const viewLayerProps = getViewLayerProps(definitionLayerId, props);
      let fieldNames = [];
      if (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.fields) {
        fieldNames = viewLayerProps.fields;
      }
      else {
        fieldNames = totalFields
          .filter((field) => requiredFieldNames.indexOf(field.name) === -1)
          .map((field) => field.name);
      }
      this.closeLayerViewDefinitionPopoversHandler();
      const nodeWidth = this.flowItemNode.getBoundingClientRect().width;
      this.arcgisFieldPickList = document.createElement("arcgis-field-pick-list");
      this.arcgisFieldPickList.popoverProps = {
        placement: "auto",
        offsetDistance: -1 * (nodeWidth ? nodeWidth - 5 : 215),
        offsetSkidding: 0,
        pointerDisabled: true,
        popoverWidth: nodeWidth ? nodeWidth + 30 : 280,
        refElement: this.flowItemNode
      };
      this.arcgisFieldPickList.fields = this.createPickListFields(fl);
      this.arcgisFieldPickList.layer = fl;
      this.arcgisFieldPickList.mapView = view;
      this.arcgisFieldPickList.showFieldInfo = true;
      this.arcgisFieldPickList.showFieldName = false;
      this.arcgisFieldPickList.selectedFields = fieldNames;
      this.arcgisFieldPickList.multiple = true;
      this.arcgisFieldPickList.addEventListener("arcgisFieldPickListDismissed", this.fieldPickListChanges);
      document.body.appendChild(this.arcgisFieldPickList);
      this.flowItemNode.disabled = true;
    };
    this.fieldPickListChanges = (event) => {
      var _a;
      event.stopPropagation();
      const { props, requiredFieldNames } = this;
      const { definitionLayerId } = props;
      const selectedFields = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields;
      this.removeFieldsPickList();
      if (selectedFields) {
        const adminLayerInfo = getAdminLayerInfo(definitionLayerId, props);
        const totalFields = (adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.fields) || getFL(definitionLayerId, props).fields;
        // keep order like in service
        const selectedAndRequiredFields = totalFields
          .filter((field) => requiredFieldNames.indexOf(field.name) > -1 || selectedFields.indexOf(field.name) > -1)
          .map((field) => field.name);
        if (selectedAndRequiredFields.length < totalFields.length) {
          // subset of fields
          addViewLayerProps(definitionLayerId, {
            fields: selectedAndRequiredFields
          }, props);
        }
        else {
          // default; all fields
          let viewLayerProps = getViewLayerProps(definitionLayerId, props);
          if (viewLayerProps) {
            viewLayerProps.fields = undefined;
          }
          sanitizeViewProps(props);
        }
        this.reRender = !this.reRender;
      } // else user hit cancel or close
    };
    this.removeField = (fieldName) => {
      const { props, totalFields } = this;
      const { definitionLayerId } = props;
      let viewLayerProps = getViewLayerProps(definitionLayerId, props);
      if (!viewLayerProps) {
        viewLayerProps = {
          layerId: definitionLayerId
        };
        props.viewProps = props.viewProps || [];
        props.viewProps.push(viewLayerProps);
      }
      if (!viewLayerProps.fields) {
        viewLayerProps.fields = totalFields.map((field) => field.name);
      }
      viewLayerProps.fields.splice(viewLayerProps.fields.indexOf(fieldName), 1);
      this.reRender = !this.reRender;
    };
    this.props = undefined;
    this.status = undefined;
    this.reRender = false;
    this.loading = false;
  }
  closeLayerViewDefinitionPopoversHandler() {
    this.removeFieldsPickList();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    var _a;
    const { props } = this;
    const { definitionLayerId } = props;
    this.fl = getFL(definitionLayerId, props);
    this.adminLayerInfo = getAdminLayerInfo(definitionLayerId, props);
    this.totalFields = ((_a = this.adminLayerInfo) === null || _a === void 0 ? void 0 : _a.fields) || getFL(definitionLayerId, props).fields;
    this.requiredFieldNames = getRequiredFieldNames(props);
  }
  async componentDidLoad() {
    setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 200);
  }
  disconnectedCallback() {
    this.removeSketchViewModel();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render view-definition", propsToString(this.props));
    const { props, status } = this;
    const { definitionLayerId, strings } = props;
    const fl = getFL(definitionLayerId, props);
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.defineView.definitions, description: fl.title, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, onCalciteFlowItemBack: this.onBack, ref: (node) => (this.flowItemNode = node) }, this.renderInfo(), this.renderFilter(), this.renderAOI(), this.renderFields()), status === flowStatus.FILTER ? this.renderLayerFilter() : null));
  }
  renderInfo() {
    const { props } = this;
    const { config, strings } = props;
    const { helpBase, helpMap } = config;
    if ((0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_8__.g)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_8__.l.ARCGIS_COMPONENT_NOTIFICATIONS, _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_8__.a.LAYER_VIEW_DEFINITION_DISMISSED)) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { class: CSS$7.notice, open: true, closable: true, scale: "s", width: "auto", onCalciteNoticeClose: () => {
        (0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_8__.s)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_8__.l.ARCGIS_COMPONENT_NOTIFICATIONS, {
          key: _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_8__.a.LAYER_VIEW_DEFINITION_DISMISSED,
          value: "true"
        });
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, strings.defineView.addDefinitions), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.defineView.addDefinitionsMsg), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", title: strings.defineView.moreAboutViews, target: "_blank", href: `${helpBase}${helpMap["120002839"]}` }, strings.defineView.moreAboutViews)));
  }
  renderFilter() {
    const { props } = this;
    const { definitionLayerId, strings } = props;
    const viewLayerProps = getViewLayerProps(definitionLayerId, props);
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.filter) ? strings.defineView.editFilter : strings.defineView.addFilter, collapsible: false, class: CSS$7.filterBlock, tabIndex: 0, onClick: this.goFilter }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { slot: "icon", icon: "filter", scale: "s" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "control", icon: rtl ? "chevron-left" : "chevron-right", class: CSS$7.filterChevron, scale: "s", text: (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.filter) ? strings.defineView.editFilter : strings.defineView.addFilter, ref: (node) => (this.filterActionNode = node) })));
  }
  renderAOI() {
    const { props, fl } = this;
    const { definitionLayerId, strings } = props;
    if (fl.isTable) {
      return null;
    }
    const viewLayerProps = getViewLayerProps(definitionLayerId, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: strings.defineView.areaOfInterest, description: !(viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi) ? strings.defineView.aoiSubtext : undefined, collapsible: true, onCalciteBlockToggle: () => this.onAOIToggle(), ref: (node) => (this.aoiBlockNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { slot: "icon", icon: "polygon", scale: "s" }), this.renderAOIContent()));
  }
  renderAOIContent() {
    const { props } = this;
    const { definitionLayerId, layerIds, strings } = props;
    const viewLayerProps = getViewLayerProps(definitionLayerId, props);
    const hasAOI = !!(viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", { layout: "grid", class: CSS$7.aoiGroup }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "polygon", appearance: "solid", alignment: "center", active: false, disabled: hasAOI, scale: "s", text: strings.defineView.aoiSketchPolygonLabel, title: strings.defineView.aoiSketchPolygonLabel, onClick: !hasAOI ? this.onPolygonClick : undefined, ref: (node) => (this.polygonAction = node) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "rectangle", appearance: "solid", alignment: "center", active: false, disabled: hasAOI, scale: "s", text: strings.defineView.aoiSketchRectangleLabel, title: strings.defineView.aoiSketchRectangleLabel, onClick: !hasAOI ? this.onRectangleClick : undefined, ref: (node) => (this.rectangleAction = node) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "trash", appearance: "solid", alignment: "center", scale: "s", disabled: !hasAOI, text: strings.defineView.aoiDeleteLabel, title: strings.defineView.aoiDeleteLabel, onClick: hasAOI ? this.onDeleteAOIClick : undefined })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$7.textCenter, ref: (node) => (this.drawLabel = node) }, !hasAOI ? strings.defineView.aoiSelect : strings.defineView.aoiRestart), layerIds.length > 1 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", width: "full", class: CSS$7.aoiButton, onClick: () => this.applyAOIToAll() }, strings.defineView.aoiApplyAll)) : null));
  }
  renderFields() {
    var _a;
    const { props, totalFields } = this;
    const { definitionLayerId, strings } = props;
    const viewLayerProps = getViewLayerProps(definitionLayerId, props);
    const totalFieldCount = totalFields.length;
    const fieldCountView = ((_a = viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.fields) === null || _a === void 0 ? void 0 : _a.length) || totalFieldCount;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: strings.defineView.fields, description: `${fieldCountView}/${totalFieldCount}`, collapsible: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { slot: "icon", icon: "feature-details", scale: "s" }), this.renderFieldsContent()));
  }
  renderFieldsContent() {
    const { props, fl, requiredFieldNames, totalFields } = this;
    const { definitionLayerId, strings } = props;
    const viewLayerProps = getViewLayerProps(definitionLayerId, props);
    let fieldsList;
    if (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.fields) {
      fieldsList = totalFields.filter((field) => viewLayerProps.fields.indexOf(field.name) > -1 ||
        requiredFieldNames.indexOf(field.name) > -1);
    }
    else {
      fieldsList = totalFields;
    }
    const hasFieldsToSelect = requiredFieldNames.length !== totalFields.length;
    const listItems = fieldsList.map((field) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: field.alias || field.name }, requiredFieldNames.indexOf(field.name) === -1 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "x", scale: "s", text: strings.general.remove, slot: "actions-end", onClick: () => this.removeField(field.name) })) : null));
    });
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, hasFieldsToSelect && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: CSS$7.selectFields, appearance: "outline-fill", round: true, label: strings.defineView.selectFields, scale: "s", width: "full", onClick: () => this.selectFields(fl), ref: (node) => (this.buttonNode = node) }, strings.defineView.selectFields)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, listItems)));
  }
  renderLayerFilter() {
    const { props, fl } = this;
    const { view, definitionLayerId } = props;
    const viewLayerProps = getViewLayerProps(definitionLayerId, this.props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-filter", { key: `filter-${definitionLayerId}`, view: view, layer: fl, mode: "layer-view", viewFilter: viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.filter, dismissible: false, hideLayerTitle: false, onArcgisFilterPanelBackClick: this.onBackFilter, onArcgisFilterWhereChange: (event) => this.applyFilter(event.detail) }));
  }
  async applyFilter(where) {
    // apply filter after arcgis-filter component closed
    const { props } = this;
    const { definitionLayerId } = props;
    if (where) {
      addViewLayerProps(definitionLayerId, {
        filter: where
      }, props);
    }
    else {
      // default; no filter
      const viewLayerProps = getViewLayerProps(definitionLayerId, props);
      if (viewLayerProps) {
        viewLayerProps.filter = undefined;
      }
      sanitizeViewProps(props);
    }
    // filter component doesn't remove effect on layerView
    //await applyLayerFilter(where, definitionLayerId, props);
  }
  async onAOIToggle() {
    if (this.aoiBlockNode.open) {
      if (!this.SketchViewModel) {
        this.aoiBlockNode.loading = true;
        const [SketchViewModel, GraphicsLayer, Graphic, Polygon, Extent] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
          "esri/widgets/Sketch/SketchViewModel",
          "esri/layers/GraphicsLayer",
          "esri/Graphic",
          "esri/geometry/Polygon",
          "esri/geometry/Extent"
        ]);
        this.SketchViewModel = SketchViewModel;
        this.GraphicsLayer = GraphicsLayer;
        this.Graphic = Graphic;
        this.Polygon = Polygon;
        this.Extent = Extent;
        this.aoiBlockNode.loading = false;
      }
      this.setupSketchViewModel();
    }
    else {
      this.removeSketchViewModel();
    }
  }
  setupSketchViewModel() {
    const { props, aoiSymbol } = this;
    const { layer, view, definitionLayerId } = props;
    this.defaultAutoOpenEnabled = view.popupEnabled;
    view.popupEnabled = false;
    if (this.graphicsLayer) {
      // done that already
      return;
    }
    this.graphicsLayer = new this.GraphicsLayer();
    view.map.add(this.graphicsLayer);
    const viewLayerProps = getViewLayerProps(definitionLayerId, props);
    if (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi) {
      // sketch only wants polygons
      const geom = viewLayerProps.aoi;
      const geometry = geom.rings
        ? this.Polygon.fromJSON(geom)
        : new this.Polygon({
          rings: [
            [geom.xmin, geom.ymin],
            [geom.xmin, geom.ymax],
            [geom.xmax, geom.ymax],
            [geom.xmax, geom.ymin],
            [geom.xmin, geom.ymin]
          ],
          spatialReference: viewLayerProps.aoi.spatialReference
        });
      const graphic = new this.Graphic({
        geometry,
        symbol: aoiSymbol
      });
      this.graphicsLayer.add(graphic);
    }
    this.sketchViewModel = new this.SketchViewModel({
      layer: this.graphicsLayer,
      view,
      polygonSymbol: aoiSymbol,
      updateOnGraphicClick: true
    });
    this.sketchViewModel.on("create", (event) => this.onGraphicCreate(event));
    this.sketchViewModel.on("update", this.onGraphicUpdate);
    const snapping = layer.type === "group"
      ? layer.layers.map((fLayer) => {
        return { layer: fLayer };
      })
      : [{ layer }];
    this.sketchViewModel.snappingOptions.featureSources = snapping;
    this.sketchViewModel.snappingOptions.enabled = true;
  }
  removeSketchViewModel() {
    var _a, _b;
    const { props, defaultAutoOpenEnabled } = this;
    const { view } = props;
    this.graphicsLayer && view.map.remove(this.graphicsLayer);
    (_a = this.graphicsLayer) === null || _a === void 0 ? void 0 : _a.destroy();
    this.graphicsLayer = undefined;
    (_b = this.sketchViewModel) === null || _b === void 0 ? void 0 : _b.destroy();
    this.sketchViewModel = undefined;
    view.popupEnabled = defaultAutoOpenEnabled;
  }
  onGraphicCreate(event) {
    const { props } = this;
    const { definitionLayerId, strings } = props;
    if (event.state === "start" && this.polygonAction.active) {
      this.drawLabel.innerHTML = strings.defineView.aoiPolygonEnd;
    }
    if (event.state === "complete") {
      const sketchGraphic = event.graphic;
      const extent = sketchGraphic.geometry.extent;
      addViewLayerProps(definitionLayerId, {
        aoi: !this.polygonAction.active ? extent.toJSON() : sketchGraphic.geometry.toJSON()
      }, props);
      applyLayerAOI(sketchGraphic.geometry, definitionLayerId, props);
      //console.log("create complete", propsToString(props));
      this.drawLabel.innerHTML = strings.defineView.aoiRestart;
      this.polygonAction.active = false;
      this.rectangleAction.active = false;
      this.polygonAction.disabled = true;
      this.rectangleAction.disabled = true;
      this.aoiBlockNode.description = undefined;
      this.reRender = !this.reRender;
    }
  }
  applyAOIToAll() {
    const { props } = this;
    const { definitionLayerId, layer } = props;
    if (layer.type !== "group") {
      return;
    }
    const viewLayerProps = getViewLayerProps(definitionLayerId, props);
    layer.layers.map((flayer) => {
      if (flayer.layerId !== definitionLayerId) {
        if (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi) {
          addViewLayerProps(flayer.layerId, {
            aoi: JSON.parse(JSON.stringify(viewLayerProps.aoi))
          }, props);
        }
        else {
          const viewLayerProps2 = getViewLayerProps(flayer.layerId, props);
          if (viewLayerProps2) {
            viewLayerProps2.aoi = undefined;
          }
          sanitizeViewProps(props);
        }
        if (viewLayerProps === null || viewLayerProps === void 0 ? void 0 : viewLayerProps.aoi) {
          const geometry = viewLayerProps.aoi.rings
            ? this.Polygon.fromJSON(viewLayerProps.aoi)
            : this.Extent.fromJSON(viewLayerProps.aoi);
          applyLayerAOI(geometry, flayer.layerId, props);
        }
        else {
          applyLayerAOI(undefined, flayer.layerId, props);
        }
      }
    });
  }
  createPickListFields(fl) {
    const { requiredFieldNames, props } = this;
    const adminLayerInfo = getAdminLayerInfo(fl.layerId, props);
    const totalFields = (adminLayerInfo === null || adminLayerInfo === void 0 ? void 0 : adminLayerInfo.fields) || getFL(fl.layerId, props).fields;
    return totalFields
      .filter((field) => requiredFieldNames.indexOf(field.name) === -1)
      .map((field) => {
      return {
        name: field.name,
        alias: field.alias || field.name,
        type: field.type
      };
    });
  }
  removeFieldsPickList() {
    this.flowItemNode.disabled = false;
    if (this.arcgisFieldPickList) {
      document.body.removeChild(this.arcgisFieldPickList);
      this.arcgisFieldPickList = null;
      setTimeout(() => {
        this.buttonNode.setFocus();
      }, 1);
    }
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewDefinition.style = arcgisLayerViewDefinitionCss;

var joinFlowStatus;
(function (joinFlowStatus) {
  joinFlowStatus[joinFlowStatus["ERROR"] = 0] = "ERROR";
  joinFlowStatus[joinFlowStatus["LOADING"] = 1] = "LOADING";
  joinFlowStatus[joinFlowStatus["TARGET_SELECTION"] = 2] = "TARGET_SELECTION";
  joinFlowStatus[joinFlowStatus["ADD_SELECTION"] = 3] = "ADD_SELECTION";
  joinFlowStatus[joinFlowStatus["BROWSE_LAYER"] = 4] = "BROWSE_LAYER";
  joinFlowStatus[joinFlowStatus["CONFIG"] = 5] = "CONFIG";
  joinFlowStatus[joinFlowStatus["CREATE"] = 6] = "CREATE";
})(joinFlowStatus || (joinFlowStatus = {}));
function getFieldAlias(layer, fieldName) {
  var _a;
  const { fields, popupTemplate } = layer;
  const fieldInfos = popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos;
  const field = fields.find((field) => fieldName === field.name);
  return ((field && ((_a = fieldInfos === null || fieldInfos === void 0 ? void 0 : fieldInfos.find((fieldInfo) => fieldInfo.fieldName === field.name)) === null || _a === void 0 ? void 0 : _a.label)) ||
    (field === null || field === void 0 ? void 0 : field.alias) ||
    fieldName);
}
function getFieldType(layer, fieldName) {
  const { fields } = layer;
  const field = fields.find((field) => fieldName === field.name);
  return field === null || field === void 0 ? void 0 : field.type;
}
function getLayerType(layer, props) {
  const { strings } = props;
  return layer.isTable
    ? strings.general.table
    : layer.geometryType === "point" || layer.geometryType === "multipoint"
      ? strings.join.pointLayer
      : layer.geometryType === "polyline"
        ? strings.join.polylineLayer
        : layer.geometryType === "polygon"
          ? strings.join.polygonLayer
          : "";
}
function hasOBAC(layer) {
  var _a, _b;
  // Only if one of allowOthersToQuery/allowAnonymousToQuery is explicitly set to false do we block join.
  // If it's true or not there we don't block join
  return (layer.sourceJSON.ownershipBasedAccessControlForFeatures &&
    (((_a = layer.sourceJSON.ownershipBasedAccessControlForFeatures) === null || _a === void 0 ? void 0 : _a.allowAnonymousToQuery) === false ||
      ((_b = layer.sourceJSON.ownershipBasedAccessControlForFeatures) === null || _b === void 0 ? void 0 : _b.allowOthersToQuery) === false));
}

/**
 * get a suggested title for the joined view
 * @param props - LayerViewJoinProps
 */
async function getSuggestedTitleForJoin(props) {
  var _a, _b;
  const { targetItem, targetLayer, strings, modules } = props;
  const { esriRequest } = modules;
  const relatedUrl = `${targetItem.itemUrl}/relatedItems`;
  const relatedContent = {
    relationshipType: "Service2Service",
    direction: "forward"
  };
  const result = await esriRequest(relatedUrl, {
    query: Object.assign(Object.assign({}, relatedContent), { f: "json", token: targetLayer.portalItem.portal.credential.token }),
    method: "post",
    responseType: "json"
  });
  // check with spaces and underscores
  const viewItems = ((_b = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.relatedItems) === null || _b === void 0 ? void 0 : _b.filter((item) => item.type === "Feature Service" &&
    (item.title.indexOf(targetItem.title) > -1 ||
      item.title.indexOf(targetItem.title.replace(/ /g, "_")) > -1 ||
      item.title.replace(/ /g, "_").indexOf(targetItem.title) > -1))) || [];
  return (strings.join.joinFeaturesTo.replace("${name}", targetItem.title) +
    `${viewItems.length ? ` ${viewItems.length + 1}` : ``} ${strings.createView.view}`);
}
/**
 * Creates join layer view
 * @param props - LayerViewJoinProps
 * @param newItemProps - user input (NewItemProps)
 */
async function createJoinView(props, newItemProps) {
  const { targetItem, targetLayer, targetLayerId, addLayer, addLayerId } = props;
  const isPortal = targetItem.portal.isPortal;
  const timeStamp = Date.now();
  const targetFL = (targetLayer.type === "group"
    ? getLayersAndTables(targetLayer).find((lyr) => lyr.layerId === targetLayerId)
    : targetLayer);
  const addFL = (addLayer.type === "group"
    ? getLayersAndTables(addLayer).find((lyr) => lyr.layerId === addLayerId)
    : addLayer);
  try {
    await getAdminServiceInfo(props);
    if (!isPortal) {
      await createIndexes(props);
    }
    const createServiceResponse = await createJoinService(props, newItemProps);
    const processProps = { newItemProps, createServiceResponse, timeStamp, targetFL, addFL };
    await addToDefinitionStatsTable(props, processProps);
    await addToDefinitionAttributeJoin(props, processProps);
    await joinItemUpdate(props, processProps);
    return createServiceResponse.itemId;
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("createJoinView failed"));
    });
  }
}
async function createJoinService(props, newItemProps) {
  const { targetItem, modules } = props;
  const { esriRequest } = modules;
  const { folder } = newItemProps;
  const isOwnerFolder = !folder || !folder.id || folder.id === targetItem.owner;
  const portal = targetItem.portal;
  const createServiceUrl = `${portal.restUrl}/content/users/${targetItem.owner}${!isOwnerFolder ? `/${folder.id}` : ""}/createService`;
  // not sure why we need to send all this in...
  const createParams = {
    serviceDescription: "",
    hasVersionedData: false,
    supportsDisconnectedEditing: false,
    hasStaticData: true,
    maxRecordCount: 2000,
    supportedQueryFormats: "JSON",
    capabilities: "Query",
    description: "",
    copyrightText: "",
    allowGeometryUpdates: false,
    // this causes issues in result layer when used in network tools "units":"esriMeters",
    syncEnabled: false,
    editorTrackingInfo: {
      enableEditorTracking: false,
      enableOwnershipAccessControl: false,
      allowOthersToUpdate: true,
      allowOthersToDelete: true
    },
    xssPreventionInfo: {
      xssPreventionEnabled: true,
      xssPreventionRule: "InputOnly",
      xssInputRule: "rejectInvalid"
    },
    tables: [],
    name: newItemProps.title.replace(/ /g, "_")
  };
  if (portal.isPortal) {
    const dataSourceType = await getDataSourceType(props);
    if (dataSourceType) {
      createParams.options = { dataSourceType };
    }
  }
  let createServiceContent = {
    createParameters: JSON.stringify(createParams),
    outputType: "featureService"
  };
  try {
    const response = await esriRequest(createServiceUrl, {
      query: Object.assign(Object.assign({}, createServiceContent), { f: "json", isView: true, token: portal.credential.token }),
      method: "post",
      responseType: "json"
    });
    return response.data;
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("create service failed"));
    });
  }
}
async function addToDefinitionStatsTable(props, processProps) {
  const { createServiceResponse, addFL, timeStamp } = processProps;
  const { addLayerId, joinOperation, attributeRelationships } = props;
  if (joinOperation.type !== "one-to-one" || joinOperation.matchType !== "summarize") {
    return;
  }
  try {
    const adminUrl = createServiceResponse.serviceurl.replace("rest/services", "rest/admin/services");
    const attributeFields = attributeRelationships.map((rel) => {
      var _a;
      return {
        name: rel.addFieldName,
        alias: ((_a = addFL.fields.find((field) => field.name === rel.addFieldName)) === null || _a === void 0 ? void 0 : _a.alias) || rel.addFieldName,
        source: rel.addFieldName
      };
    });
    const summarizeFields = [];
    joinOperation.statisticsFields.forEach((statsField) => {
      statsField.types.forEach((statsType) => {
        const type = statsType.toLowerCase();
        summarizeFields.push({
          name: `${statsField.fieldName}_${type}`,
          alias: `${statsField.fieldName}_${type}`,
          source: statsField.fieldName,
          statisticType: type === "mean" ? "avg" : type
        });
      });
    });
    const json = {
      layers: [
        {
          name: `${getSourceServiceName(addFL.url, props)}_StatsTable`,
          description: "tablestatsjoin",
          adminLayerInfo: {
            viewLayerDefinition: {
              table: {
                materialized: false,
                name: `${getSourceServiceName(addFL.url, props)}_${timeStamp}_StatsTable`,
                sourceServiceName: getSourceServiceName(addFL.url, props),
                sourceLayerId: addLayerId,
                sourceLayerFields: [
                  ...attributeFields,
                  {
                    name: "join_count",
                    alias: "join_count",
                    source: joinOperation.statisticsFields[0].fieldName,
                    statisticType: "count"
                  },
                  ...summarizeFields
                ],
                groupBy: attributeRelationships.map((rel) => rel.addFieldName).join(",")
              }
            }
          }
        }
      ]
    };
    await addToDefinitionRequest(`${adminUrl}/addToDefinition`, json, props);
    return new Promise((resolve) => {
      resolve();
    });
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("addToDefinition StatsTable failed"));
    });
  }
}
async function addToDefinitionAttributeJoin(props, processProps) {
  const { createServiceResponse, newItemProps, targetFL, addFL, timeStamp } = processProps;
  try {
    const adminUrl = createServiceResponse.serviceurl.replace("rest/services", "rest/admin/services");
    const json = getAttributeJoinJSON(props, newItemProps, targetFL, addFL, timeStamp);
    await addToDefinitionRequest(`${adminUrl}/addToDefinition`, json, props);
    return new Promise((resolve) => {
      resolve();
    });
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("addToDefinition AttributeJoin failed"));
    });
  }
}
function getAttributeJoinJSON(props, newItemProps, targetFL, addFL, timeStamp) {
  const { targetLayerId, addLayerId, joinOperation, attributeRelationships, adminServiceInfo } = props;
  const attributeFields = attributeRelationships.map((rel) => {
    var _a;
    return {
      name: rel.addFieldName,
      alias: ((_a = addFL.fields.find((field) => field.name === rel.addFieldName)) === null || _a === void 0 ? void 0 : _a.alias) || rel.addFieldName,
      source: rel.addFieldName
    };
  });
  let summarizeFields;
  if (joinOperation.type === "one-to-one" && joinOperation.matchType === "summarize") {
    summarizeFields = [];
    joinOperation.statisticsFields.forEach((statsField) => {
      statsField.types.forEach((statsType) => {
        const type = statsType.toLowerCase();
        summarizeFields.push({
          name: `${statsField.fieldName}_${type}`,
          alias: `${statsField.fieldName}_${type}`,
          source: `${statsField.fieldName}_${type}`
        });
      });
    });
  }
  const json = {};
  json.name = newItemProps.title.replace(/ /g, "_");
  json.displayField = "";
  json.description = "AttributeJoin";
  json.adminLayerInfo = {
    viewLayerDefinition: {
      table: {
        name: `${getSourceServiceName(targetFL.url, props)}_${timeStamp}_target`,
        sourceServiceName: getSourceServiceName(targetFL.url, props),
        sourceLayerId: targetLayerId,
        sourceLayerFields: targetFL.fields
          .filter((field) => field.type !== "oid")
          .map((field) => {
          return {
            name: field.name,
            alias: field.alias,
            source: field.name
          };
        }),
        relatedTables: [
          joinOperation.type === "one-to-one" && joinOperation.matchType === "summarize"
            ? {
              name: `${getSourceServiceName(addFL.url, props)}_StatsTable`,
              sourceServiceName: newItemProps.title.replace(/ /g, "_"),
              sourceLayerId: 0,
              sourceLayerFields: [
                ...attributeFields.filter((attrField) => !attributeRelationships.some((rel) => attrField.name === rel.addFieldName)),
                {
                  name: "join_count",
                  alias: "join_count",
                  source: "join_count"
                },
                ...summarizeFields
              ],
              type: joinOperation.joinType,
              parentKeyFields: attributeRelationships.map((rel) => rel.targetFieldName),
              keyFields: attributeRelationships.map((rel) => rel.addFieldName)
            }
            : {
              name: `${getSourceServiceName(addFL.url, props)}_${timeStamp}_join`,
              sourceServiceName: getSourceServiceName(addFL.url, props),
              sourceLayerId: addLayerId,
              sourceLayerFields: addFL.fields
                .filter((addField) => addField.type !== "oid")
                .map((addField) => {
                const isTaken = targetFL.fields.find((targetField) => targetField.name === addField.name);
                return {
                  name: isTaken ? `${addField.name}_${timeStamp}` : addField.name,
                  alias: addField.alias,
                  source: addField.name
                };
              }),
              type: joinOperation.joinType,
              parentKeyFields: attributeRelationships.map((rel) => rel.targetFieldName),
              keyFields: attributeRelationships.map((rel) => rel.addFieldName),
              topFilter: joinOperation.type === "one-to-one" && joinOperation.matchType === "first"
                ? {
                  groupByFields: attributeRelationships
                    .map((rel) => rel.addFieldName)
                    .join(","),
                  orderByFields: `${joinOperation.sortByFieldName} ${joinOperation.sortOrder}`,
                  topCount: 1
                }
                : undefined
            }
        ],
        materialized: false
      }
    },
    geometryField: targetFL.isTable
      ? null
      : {
        name: `${getSourceServiceName(targetFL.url, props)}_${timeStamp}_target.${adminServiceInfo.layers.find((lyr) => lyr.id === targetLayerId).adminLayerInfo.geometryField.name}`
      }
  };
  /* not sure why we send all via layers...
  let layers, tables;
  if (targetFL.isTable) {
    tables = [json];
  } else {
    layers = [json];
  }

  return {
    layers: layers,
    tables: tables
  }; */
  return {
    layers: [json]
  };
}
async function addToDefinitionRequest(addToDefUrl, json, props, retry = false) {
  const { modules } = props;
  const { esriRequest, IdentityManager } = modules;
  // addToDefUrl same server as targetLayer
  const credential = IdentityManager.findCredential(addToDefUrl);
  const addToDefContent = {
    addToDefinition: JSON.stringify(json)
  };
  try {
    await esriRequest(addToDefUrl, {
      query: Object.assign(Object.assign({}, addToDefContent), { f: "json", token: credential.token }),
      method: "post",
      responseType: "json"
    });
    return new Promise((resolve) => {
      resolve();
    });
  }
  catch (e) {
    if (!retry) {
      // in case it's just a fluke
      return addToDefinitionRequest(addToDefUrl, json, props, true);
    }
    return new Promise((_, reject) => {
      reject(new Error("addToDefinition request failed"));
    });
  }
}
function getSourceServiceName(url, props) {
  const { targetItem } = props;
  const { portal } = targetItem;
  const pos = url.indexOf("/services/") + "/services/".length;
  var serviceName = url.substring(pos, url.indexOf("/FeatureServer", pos));
  if (portal.isPortal) {
    serviceName = serviceName.replace("Hosted/", "");
  }
  return serviceName;
}
async function joinItemUpdate(props, processProps) {
  var _a, _b;
  const { createServiceResponse, newItemProps } = processProps;
  const { targetItem, modules } = props;
  const { esriRequest } = modules;
  const portal = targetItem.portal;
  const updateUrl = `${portal.restUrl}/content/users/${targetItem.owner}/items/${createServiceResponse.itemId}/update`;
  // need to send some info again
  const updateContent = {
    title: newItemProps.title,
    tags: ((_a = newItemProps.tags) === null || _a === void 0 ? void 0 : _a.length) ? newItemProps.tags.toString() : undefined,
    snippet: newItemProps.summary,
    categories: (_b = newItemProps.categories) === null || _b === void 0 ? void 0 : _b.join(",")
  };
  if (portal.isPortal) {
    updateContent.typeKeywords = "Multi Services View";
  }
  try {
    return await esriRequest(updateUrl, {
      query: Object.assign(Object.assign({}, updateContent), { f: "json", token: portal.credential.token }),
      method: "post",
      responseType: "json"
    });
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("item update request failed"));
    });
  }
}
async function getDataSourceType(props) {
  var _a, _b, _c, _d;
  await getAdminServiceInfo(props);
  const { adminServiceInfo } = props;
  const dataSource = ((_b = (_a = adminServiceInfo === null || adminServiceInfo === void 0 ? void 0 : adminServiceInfo.adminServiceInfo) === null || _a === void 0 ? void 0 : _a.database) === null || _b === void 0 ? void 0 : _b.datasource) || {};
  const dataSourceType = ((_c = dataSource === null || dataSource === void 0 ? void 0 : dataSource.name) === null || _c === void 0 ? void 0 : _c.indexOf("/nosqlDatabases")) > -1
    ? "spatiotemporal"
    : ((_d = dataSource === null || dataSource === void 0 ? void 0 : dataSource.name) === null || _d === void 0 ? void 0 : _d.indexOf("/enterpriseDatabases")) > -1
      ? "relational"
      : null;
  return dataSourceType;
}
async function getAdminServiceInfo(props, noCache) {
  const { targetLayer, adminServiceInfo, modules } = props;
  const { IdentityManager, esriRequest } = modules;
  if (adminServiceInfo) {
    return;
  }
  const serviceUrl = targetLayer.portalItem.url;
  let adminUrl = serviceUrl.replace("/rest/services", "/rest/admin/services");
  if (noCache) {
    adminUrl += `${adminUrl.indexOf("?") > -1 ? "&" : "?"}_ts=${new Date().getTime()}`;
  }
  try {
    await IdentityManager.getCredential(adminUrl);
    const response = await esriRequest(adminUrl, {
      query: { f: "json" }
    });
    props.adminServiceInfo = response.data;
  }
  catch (e) {
    return new Promise((_, reject) => {
      reject(new Error("could not get admin info"));
    });
  }
}
async function createIndexes(props) {
  const { targetLayer, targetLayerId, addLayer, addLayerId, attributeRelationships } = props;
  let fl = targetLayer.type === "group"
    ? getLayersAndTables(targetLayer).find((lyr) => lyr.layerId === targetLayerId)
    : targetLayer;
  let fieldNames = attributeRelationships.map((rel) => rel.targetFieldName);
  await createIndexesForLayer(fl, fieldNames, props);
  fl =
    addLayer.type === "group"
      ? getLayersAndTables(addLayer).find((lyr) => lyr.layerId === addLayerId)
      : addLayer;
  fieldNames = attributeRelationships.map((rel) => rel.addFieldName);
  await createIndexesForLayer(fl, fieldNames, props);
}
async function createIndexesForLayer(fl, fieldNames, props) {
  const json = {
    indexes: []
  };
  fl.sourceJSON.indexes = fl.sourceJSON.indexes || [];
  fieldNames.forEach((fieldName) => {
    if (!fl.sourceJSON.indexes.some((index) => index.fields === fieldName)) {
      // index doesn't exist yet
      json.indexes.push({
        name: `${fieldName}_Index`,
        fields: fieldName,
        isUnique: false,
        isAscending: true,
        description: `${fieldName}_Index`
      });
    }
  });
  if (json.indexes.length) {
    await executeCreateIndexes(json, fl, props);
  }
}
async function executeCreateIndexes(json, fl, props) {
  var _a;
  const { targetItem, modules } = props;
  const { IdentityManager } = modules;
  const adminUrl = fl.url.replace("/rest/services", "/rest/admin/services");
  const url = `${adminUrl}/${fl.layerId}/addToDefinition`;
  const credential = IdentityManager.findCredential(url);
  const isPortal = targetItem.portal.isPortal;
  const content = {
    f: "json",
    addToDefinition: JSON.stringify(json),
    async: !isPortal,
    token: credential.token
  };
  const result = await modules.esriRequest(url, {
    query: content,
    method: "post"
  });
  if (isPortal) {
    fl.sourceJSON.indexes = fl.sourceJSON.indexes || [];
    fl.sourceJSON.indexes = fl.sourceJSON.indexes.concat(json.indexes);
  }
  else {
    try {
      await pollForStatus((_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.statusURL, {
        f: "json",
        token: credential.token
      }, props);
      fl.sourceJSON.indexes = fl.sourceJSON.indexes || [];
      fl.sourceJSON.indexes = fl.sourceJSON.indexes.concat(json.indexes);
    }
    catch (e) {
      // not a big problem if it didn't work
    }
  }
}
const pollForStatus = async (url, params, props) => {
  var _a;
  const { modules } = props;
  if (!url) {
    throw new Error("pollForStatus: no status URL");
  }
  const pendingStatuses = ["processing", "partial", "Pending", "InProgress"];
  const successStatuses = ["completed", "Completed"];
  // Keep polling status until either completed or failed
  try {
    // Do failures report as success (status 200)? May need to manually throw error on status check failure
    const statusResponse = await modules.esriRequest(url, { query: params });
    const status = (_a = statusResponse === null || statusResponse === void 0 ? void 0 : statusResponse.data) === null || _a === void 0 ? void 0 : _a.status;
    if (pendingStatuses.includes(status)) {
      await (0,_functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_4__.t)(500);
      return pollForStatus(url, params, props);
    }
    else if (successStatuses.includes(status)) {
      return statusResponse;
    }
    else {
      throw statusResponse;
    }
  }
  catch (e) {
    console.error(e);
    throw e;
  }
};

const arcgisLayerViewJoinCss = ":host{height:100%}.panel{height:100%}.footer{width:100%}.error-content{margin:0.5rem}";

const ArcgisLayerView = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewJoinCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinCancel", 7);
    this.arcgisLayerViewJoinTableClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinTableClick", 7);
    this.arcgisLayerViewJoinStepChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinStepChange", 7);
    this.arcgisLayerViewJoinCreated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinCreated", 7);
    this.status = joinFlowStatus.LOADING;
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goCancel = () => {
      this.arcgisLayerViewJoinCancel.emit();
    };
    this.view = undefined;
    this.itemId = undefined;
    this.config = undefined;
    this.showTableOption = false;
  }
  arcgisLayerViewStatusHandler(event) {
    const { detail } = event;
    this.status = detail.status;
    /* if (detail.layerIds?.length) {
      props.layerIds = [...detail.layerIds];
    } */
    if (this.status === joinFlowStatus.TARGET_SELECTION) {
      //props.sourceItemId = props.layerItem.id;
      this.arcgisLayerViewJoinStepChange.emit(1);
    }
    else if (this.status === joinFlowStatus.ADD_SELECTION) {
      this.arcgisLayerViewJoinStepChange.emit(2);
    }
    else if (this.status === joinFlowStatus.CONFIG) {
      this.arcgisLayerViewJoinStepChange.emit(3);
    }
    else if (this.status === joinFlowStatus.CREATE) {
      this.arcgisLayerViewJoinStepChange.emit(4);
    }
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
  }
  async arcgisLayerViewJoinCreateDoneHandler(event) {
    this.arcgisLayerViewJoinCreated.emit(event.detail);
  }
  arcgisLayerViewJoinCreateCancelHandler() {
    this.arcgisLayerViewJoinCancel.emit();
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /*
   * Got to a certain step. If successful it will return true.
   * If it's not possible, because some user input is missing, then it will return false.
   */
  async setStep(step) {
    var _a, _b;
    const { props } = this;
    const { targetLayerId, addLayerId, attributeRelationships, joinOperation } = props;
    const addSelectionPossible = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(targetLayerId);
    const configPossible = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(addLayerId);
    const createPossible = (attributeRelationships === null || attributeRelationships === void 0 ? void 0 : attributeRelationships.find((rel) => rel.targetFieldName && rel.addFieldName)) &&
      joinOperation &&
      ((joinOperation.matchType === "first" &&
        joinOperation.sortByFieldName &&
        joinOperation.sortOrder) ||
        (joinOperation.matchType === "summarize" &&
          ((_a = joinOperation.statisticsFields) === null || _a === void 0 ? void 0 : _a.length) &&
          ((_b = joinOperation.statisticsFields) === null || _b === void 0 ? void 0 : _b[0].fieldName)));
    // close popovers
    document.body.querySelectorAll(".js-app-flyout").forEach((node) => {
      document.body.removeChild(node);
    });
    switch (step) {
      case 1:
        this.status = joinFlowStatus.TARGET_SELECTION;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        return new Promise((resolve) => resolve(true));
      case 2:
        if (addSelectionPossible) {
          this.status = joinFlowStatus.ADD_SELECTION;
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
          return new Promise((resolve) => resolve(true));
        }
        break;
      case 3:
        if (configPossible) {
          this.status = joinFlowStatus.CONFIG;
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
          return new Promise((resolve) => resolve(true));
        }
        break;
      case 4:
        if (createPossible) {
          this.status = joinFlowStatus.CREATE;
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
          return new Promise((resolve) => resolve(true));
        }
        break;
    }
    return new Promise((resolve) => resolve(false));
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    var _a, _b, _c, _d;
    const { itemId, view, showTableOption, config } = this;
    const [strings] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement, "arcgis-layer-view");
    this.strings = strings;
    this.props = { config, view, itemId, showTableOption, strings, modules: {} };
    let { props } = this;
    if (!itemId) {
      console.error("itemId is a required property.");
      return;
    }
    try {
      const [PortalItem, Layer, Extent, projection, Polygon, esriRequest, IdentityManager] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_2__.l)([
        "esri/portal/PortalItem",
        "esri/layers/Layer",
        "esri/geometry/Extent",
        "esri/geometry/projection",
        "esri/geometry/Polygon",
        "esri/request",
        "esri/identity/IdentityManager"
      ]);
      props.modules = {
        PortalItem,
        projection,
        Polygon,
        Extent,
        Layer,
        esriRequest,
        IdentityManager
      };
      const targetItem = new PortalItem({
        id: itemId
      });
      await targetItem.load();
      props.targetItemOwner = targetItem.portal.user;
      if (targetItem.portal.user.username !== targetItem.owner) {
        // get user info of owner
        await esriRequest(`${targetItem.portal.restUrl}/community/users/${targetItem.owner}`, {
          query: { f: "json" }
        }).then((userResult) => {
          if (userResult === null || userResult === void 0 ? void 0 : userResult.data) {
            props.targetItemOwner = userResult.data;
          }
        });
      }
      if (targetItem.type !== "Feature Service") {
        console.error("Only Feature Service items are allowed.");
        this.status = joinFlowStatus.ERROR;
        return;
      }
      if (((_a = targetItem.typeKeywords) === null || _a === void 0 ? void 0 : _a.indexOf("Hosted Service")) === -1) {
        console.error("Only hosted Feature Service items are allowed.");
        this.status = joinFlowStatus.ERROR;
        return;
      }
      if (targetItem.portal.user.username !== targetItem.owner &&
        targetItem.itemControl !== "admin") {
        console.error("Only owners and admins are allowed.");
        this.status = joinFlowStatus.ERROR;
        return;
      }
      if (((_b = targetItem.typeKeywords) === null || _b === void 0 ? void 0 : _b.indexOf("View Service")) > -1) {
        console.error("View items are not allowed.");
        this.status = joinFlowStatus.ERROR;
        return;
      }
      if ((targetItem === null || targetItem === void 0 ? void 0 : targetItem.typeKeywords.indexOf("IoTFeatureLayer")) > -1) {
        console.error("Velocity items are not allowed.");
        this.status = joinFlowStatus.ERROR;
        return;
      }
      let gcsExtent = targetItem.extent;
      if (!gcsExtent) {
        gcsExtent = new Extent({
          xmin: -180,
          ymin: -90,
          xmax: 180,
          ymax: 90,
          spatialReference: 4326
        });
      }
      if (view.spatialReference.wkid !== 4326) {
        await projection.load();
        const extent = projection.project(gcsExtent, view.spatialReference);
        view.goTo(extent.expand(1.1));
      }
      else {
        view.goTo(gcsExtent.expand(1.1));
      }
      const targetLayer = await Layer.fromPortalItem({
        portalItem: targetItem
      });
      //console.log("**targetLayer**", targetLayer);
      //console.log("**targetItem**", targetItem);
      if (targetLayer.type === "group") {
        // group layer has no layers or tables at this point
        // loadAll() loads layers and tables (at v4.23)
        await targetLayer.loadAll();
        if ((_c = targetLayer.layers) === null || _c === void 0 ? void 0 : _c.length) {
          // has at least one spatial layer
          view.map.add(targetLayer);
        }
        // default popups
        (_d = targetLayer.layers) === null || _d === void 0 ? void 0 : _d.forEach((lyr) => {
          if (!lyr.popupTemplate && lyr.popupEnabled) {
            lyr.popupTemplate = lyr.createPopupTemplate();
          }
        });
      }
      else {
        await targetLayer.load();
        if (!targetLayer.isTable) {
          view.map.add(targetLayer);
        }
        // default popup
        targetLayer.popupTemplate = targetLayer.createPopupTemplate();
      }
      if (targetItem.portal.isPortal) {
        // OBAC not supported in Enterprise
        if (targetLayer.type === "group") {
          if (!getLayersAndTables(targetLayer).find((fl) => !hasOBAC(fl))) {
            console.error("Layers with Ownership-Based Access Control are not allowed.");
          }
        }
        else if (hasOBAC(targetLayer)) {
          console.error("Layers with Ownership-Based Access Control are not allowed.");
        }
      }
      props.targetItem = targetItem;
      props.targetLayer = targetLayer;
      this.status = joinFlowStatus.TARGET_SELECTION;
    }
    catch (e) {
      console.error(e);
      this.status = joinFlowStatus.ERROR;
    }
  }
  async componentDidLoad() {
    this.arcgisLayerViewJoinStepChange.emit(1);
  }
  disconnectedCallback() {
    const { props } = this;
    const { view, targetLayer, addLayer } = props;
    view.map.remove(targetLayer);
    view.map.remove(addLayer);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render", "status:", this.status);
    const { status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, null, status === joinFlowStatus.ERROR ? this.renderError() : null, status === joinFlowStatus.LOADING ? this.renderLoading() : null, [joinFlowStatus.TARGET_SELECTION].includes(status)
      ? this.renderTargetLayerSelection()
      : null, [joinFlowStatus.ADD_SELECTION, joinFlowStatus.BROWSE_LAYER].includes(status)
      ? this.renderAddLayerSelection()
      : null, [joinFlowStatus.CONFIG].includes(status) ? this.renderConfig() : null, status === joinFlowStatus.CREATE ? this.renderCreateJoin() : null));
  }
  renderError() {
    const { props } = this;
    const { targetItem, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { loading: false, heading: (targetItem === null || targetItem === void 0 ? void 0 : targetItem.title) || strings.msg.error, description: (targetItem === null || targetItem === void 0 ? void 0 : targetItem.title) ? strings.join.targetLayer : undefined, class: CSS$9.panel, ref: (node) => (this.flowItemNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$9.errorContent }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "s", width: "full", open: true, icon: "exclamation-mark-triangle", kind: "danger" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, strings.msg.error), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.msg.initFailed))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$9.footer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.goCancel, appearance: "transparent", width: "full" }, strings.general.cancel))));
  }
  renderLoading() {
    const { props } = this;
    const { targetItem, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { loading: true, heading: targetItem === null || targetItem === void 0 ? void 0 : targetItem.title, description: strings.join.targetLayer, class: CSS$9.panel, ref: (node) => (this.flowItemNode = node) }));
  }
  renderTargetLayerSelection() {
    const { props, status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-join-target-selection", { key: `target-selection-${status}`, props: props, status: status }));
  }
  renderAddLayerSelection() {
    const { props, status } = this;
    const { addItem } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-join-add-selection", { key: `add-${status}-${addItem === null || addItem === void 0 ? void 0 : addItem.id}`, props: props, status: status }));
  }
  renderConfig() {
    const { props, status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-join-config", { key: `create-${status}`, props: props, onArcgisLayerViewJoinConfigTableClick: (event) => this.arcgisLayerViewJoinTableClick.emit(event.detail) }));
  }
  renderCreateJoin() {
    const { props, status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-join-create", { key: `create-${status}`, props: props }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerView.style = arcgisLayerViewJoinCss;

const CSS$6 = {
  flow: "flow",
  panel: "panel",
  footer: "footer",
  info: "info",
  listHeader: "list-header",
  text: "text",
  footerButton: "footer-button",
  browse: "browse"
};

const arcgisLayerViewJoinAddSelectionCss = ".flow{height:100%}.panel{height:100%}.footer{width:100%}.info{pointer-events:none;padding:1rem 0.75rem}.list-header{pointer-events:none;padding:1rem 0.75rem 0.3rem}.text{font-size:var(--calcite-font-size--2);line-height:1.375;color:var(--calcite-ui-text-3);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);pointer-events:none;word-wrap:break-word;word-break:break-word}.footer-button{margin:0 10px 5px 10px}.notice{margin:8px}.browse{width:100%}";

const ArcgisLayerViewJoinAddSelection = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewJoinStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinStatusChange", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goBrowse = () => {
      this.arcgisLayerViewJoinStatusChange.emit({ status: joinFlowStatus.BROWSE_LAYER });
    };
    this.goBack = () => {
      this.arcgisLayerViewJoinStatusChange.emit({
        status: joinFlowStatus.TARGET_SELECTION
      });
    };
    this.goNext = () => {
      this.arcgisLayerViewJoinStatusChange.emit({
        status: joinFlowStatus.CONFIG
      });
    };
    this.onSelectionChange = () => {
      const { props } = this;
      this.listNode
        .querySelectorAll("calcite-pick-list-item")
        .forEach((item) => {
        if (item.selected) {
          props.addLayerId = item.value;
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      });
      props.attributeRelationships = undefined;
      props.joinOperation = undefined;
    };
    this.props = undefined;
    this.status = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    const { props } = this;
    const { addItem, targetItem, targetLayer } = props;
    if (!addItem && targetLayer.type === "group") {
      props.addItem = targetItem;
      props.addLayer = targetLayer;
    }
    if (props.addLayer && props.addLayer.type !== "group" && !(0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(props.addLayerId)) {
      props.addLayerId = props.addLayer.layerId;
    }
  }
  componentDidLoad() {
    requestAnimationFrame(() => { var _a; return (_a = this.backButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  componentDidRender() {
    const { props } = this;
    const { targetLayer, targetLayerId, addLayer, addLayerId } = props;
    if (targetLayer.type === "group") {
      getLayersAndTables(targetLayer).forEach((lyr) => {
        if (lyr.layerId !== targetLayerId) {
          lyr.visible = false;
        }
      });
    }
    if (addLayer && addLayer.type === "group" && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(addLayerId)) {
      getLayersAndTables(addLayer).forEach((lyr) => {
        if (targetLayer.id !== addLayer.id || targetLayerId !== lyr.layerId) {
          lyr.visible = lyr.layerId === addLayerId;
        }
      });
    }
    else if (addLayer && addLayer.type !== "group") {
      addLayer.visible = true;
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, status } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS$6.flow, dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { description: strings.join.joinLayer, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, ref: (node) => (this.flowItemNode = node) }, this.renderFooterButtons(), this.renderOBACMsg(), this.renderBrowse(), this.renderSublayers()), status === joinFlowStatus.BROWSE_LAYER && this.renderBrowseLayer())));
  }
  renderFooterButtons() {
    const { props } = this;
    const { addItem, addLayerId, addLayer, strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    let addFL;
    if (addLayer && addLayer.type === "group" && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(addLayerId)) {
      getLayersAndTables(addLayer).forEach((lyr) => {
        if (addLayerId === lyr.layerId) {
          addFL = lyr;
        }
      });
    }
    else if (addLayer && addLayer.type !== "group") {
      addFL = addLayer;
    }
    const nextDisabled = !addLayer || !(0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(addLayerId) || (addItem.portal.isPortal && hasOBAC(addFL));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$6.footer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: this.goBack, appearance: "outline-fill", width: "half", "icon-start": isRtl ? "arrow-right" : "arrow-left", ref: (node) => (this.backButtonNode = node) }, strings.general.back), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: nextDisabled, onClick: !nextDisabled && this.goNext, appearance: "solid", width: "half", iconEnd: isRtl ? "arrow-left" : "arrow-right", ref: (node) => (this.nextButtonNode = node) }, strings.general.next)));
  }
  renderOBACMsg() {
    const { props } = this;
    const { config, addItem, addLayerId, addLayer, strings } = props;
    const { helpBase, helpMap } = config;
    if (!addLayer) {
      return;
    }
    if (!addItem.portal.isPortal) {
      // message only for Enterprise
      return;
    }
    let addFL;
    if (addLayer.type === "group" && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(addLayerId)) {
      addFL = getLayersAndTables(addLayer).find((lyr) => addLayerId === lyr.layerId);
    }
    else if (addLayer.type !== "group") {
      addFL = addLayer;
    }
    else {
      return;
    }
    if (!hasOBAC(addFL)) {
      return;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { key: `${hasOBAC(addFL)}`, class: "notice", open: true, closable: false, scale: "s", width: "auto", kind: "warning", icon: "exclamation-mark-triangle" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.join.obacNotSupportedMsg), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", title: strings.join.learnMore, target: "_blank", href: `${helpBase}${helpMap["120004184"]}` }, strings.join.learnMore)));
  }
  renderBrowse() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.info }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.text }, strings.join.selectAddLayerPanelDescription)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.footerButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "arcgis-layer-view-join-browse", onClick: this.goBrowse, appearance: "outline-fill", width: "full", ref: (node) => (this.browseButtonNode = node) }, strings.join.browseForLayer))));
  }
  renderBrowseLayer() {
    const { props } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-join-browse-layer", { props: props, class: CSS$6.browse, onArcgisLayerViewJoinStatusChange: (event) => {
        if (event.detail.status === joinFlowStatus.ADD_SELECTION) {
          // can't make it work without using an id
          // it seems the whole component reloads from scratch after this step here
          setTimeout(() => {
            var _a;
            return (_a = document.getElementById("arcgis-layer-view-join-browse")) === null || _a === void 0 ? void 0 : _a.setFocus();
          }, 400);
        }
      } }));
  }
  renderSublayers() {
    const { props } = this;
    const { targetLayer, addItem, addLayer, targetLayerId, strings } = props;
    if (!addLayer) {
      return null;
    }
    const listItems = [];
    if (addLayer.type === "group") {
      getLayersAndTables(addLayer).forEach((lyr) => {
        if (targetLayer.id !== addLayer.id || targetLayerId !== lyr.layerId) {
          listItems.unshift(this.renderSublayer(lyr));
        }
      });
    }
    else {
      listItems.push(this.renderSublayer(addLayer));
    }
    const str = strings.join.selectFromItem;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.listHeader }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$6.text }, str.substring(0, str.indexOf("${")), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("b", null, addItem.title), str.substring(str.indexOf("}") + 1))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { multiple: false, onCalciteListChange: this.onSelectionChange, ref: (node) => (this.listNode = node) }, listItems)));
  }
  renderSublayer(lyr) {
    const { props } = this;
    const { addLayerId } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: lyr.layerId, label: lyr.title, value: lyr.layerId, description: getLayerType(lyr, props), selected: addLayerId === lyr.layerId }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewJoinAddSelection.style = arcgisLayerViewJoinAddSelectionCss;

const arcgisLayerViewJoinBrowseLayerCss = ".panel.sc-arcgis-layer-view-join-browse-layer{height:100%}";

const ArcgisLayerViewJoinBrowseLayer = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewJoinStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinStatusChange", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onBack = () => {
      this.arcgisLayerViewJoinStatusChange.emit({ status: joinFlowStatus.ADD_SELECTION });
    };
    this.goUseLayer = async (itemId) => {
      var _a, _b;
      const { props } = this;
      const { addLayer, targetLayer, view, modules } = props;
      this.loading = true;
      if (addLayer && addLayer.id !== targetLayer.id) {
        view.map.remove(addLayer);
      }
      const addItem = new modules.PortalItem({
        id: itemId
      });
      await addItem.load();
      const newAddLayer = await modules.Layer.fromPortalItem({
        portalItem: addItem
      });
      if (newAddLayer.type === "group") {
        // group layer has no layers or tables at this point
        // loadAll() loads layers and tables (at v4.23)
        await newAddLayer.loadAll();
        if ((_a = newAddLayer.layers) === null || _a === void 0 ? void 0 : _a.length) {
          // has at least one spatial layer
          view.map.add(newAddLayer);
        }
        // default popups
        (_b = newAddLayer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
          if (!lyr.popupTemplate && lyr.popupEnabled) {
            lyr.popupTemplate = lyr.createPopupTemplate();
          }
        });
      }
      else {
        await newAddLayer.load();
        if (!newAddLayer.isTable) {
          view.map.add(newAddLayer);
        }
        // default popup
        newAddLayer.popupTemplate = newAddLayer.createPopupTemplate();
      }
      props.addItem = addItem;
      props.addLayer = newAddLayer;
      props.addLayerId = undefined;
      props.joinOperation = undefined;
      this.arcgisLayerViewJoinStatusChange.emit({ status: joinFlowStatus.ADD_SELECTION });
    };
    this.props = undefined;
    this.loading = false;
    this.items = undefined;
    this.pagination = undefined;
    this.error = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 200);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, loading, hostElement } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.join.browseForLayerTitle, description: strings.join.browseForLayerSubTitle, loading: loading, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, onCalciteFlowItemBack: this.onBack, ref: (node) => (this.flowItemNode = node) }, this.renderItemBrowser())));
  }
  renderItemBrowser() {
    const { props, pagination } = this;
    const { targetItem, targetLayer, itemId, strings } = props;
    const { portalItem } = targetLayer;
    const { portal } = portalItem;
    const user = portal.user;
    const query = `type:"Feature Service" typekeywords:"Hosted Service" -typekeywords:"View Service" -typekeywords:"Spatiotemporal" owner:"${targetItem.owner}" -id:${itemId}`;
    const baseUrl = `${(0,_portal_8714dc6c_js__WEBPACK_IMPORTED_MODULE_6__.g)(portal)}/home/`;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser", { onArcgisItemBrowserUpdate: (e) => {
        const { results, num, start, total } = e.detail;
        this.items = results;
        this.pagination = { start, num, total };
      }, filter: query, portal: portal, user: user, api: 4, config: { baseUrl }, selection: "none" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-top-bar", { slot: "top-bar" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-search", { slot: "search", term: "" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-sort", { options: ["modified", "title", "relevance"], slot: "sort" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-content", { slot: "content" }, (this.items || []).map((item) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card", { item: item, portal: portal, baseUrl: baseUrl, key: item.id }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { id: `join-action-${item.id}`, icon: "plus-circle", text: "", scale: "s", slot: "actions-end", onClick: this.goUseLayer.bind(this, item.id) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { slot: "tooltip", label: strings.join.select, overlayPositioning: "fixed" }, strings.join.select)))))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-pagination", { total: pagination === null || pagination === void 0 ? void 0 : pagination.total, start: pagination === null || pagination === void 0 ? void 0 : pagination.start, num: pagination === null || pagination === void 0 ? void 0 : pagination.num, slot: "pagination" })));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewJoinBrowseLayer.style = arcgisLayerViewJoinBrowseLayerCss;

const CSS$5 = {
  flow: "flow",
  panel: "panel",
  footer: "footer",
  layerSection: "layer-section",
  targetLayer: "target-layer",
  addLayer: "add-layer",
  layerHeader: "layer-header",
  layerTitle: "layer-title",
  layerIcon: "layer-icon",
  attributeRelationship: "attribute-relationship",
  removeAttributeRelationship: "remove-attribute-relationship",
  sortBySection: "sort-by-section",
  joinMatchTypeSection: "join-match-type-section",
  chip: "chip",
  separator: "separator",
  statsSection: "stats-section",
  statsFieldHeader: "stats-field-header",
  statsButton: "stats-button",
  selectAll: "select-all",
  select: "select"
};

const arcgisLayerViewJoinConfigCss = ".flow{height:100%}.panel{height:100%}.footer{width:100%}.layer-section{border:1px solid var(--calcite-ui-border-3);background-color:white;margin:10px}.target-layer{padding:10px;border-bottom:1px solid var(--calcite-ui-border-3);display:flex;justify-content:space-between}.add-layer{padding:10px;display:flex;justify-content:space-between}.layer-header{padding-bottom:3px;overflow-wrap:anywhere}.layer-title{font-weight:bold;overflow-wrap:anywhere}.layer-icon{align-self:center;cursor:pointer}.attribute-relationship{border:1px solid var(--calcite-ui-border-3);padding:10px 10px 0 10px;margin-bottom:10px}.remove-attribute-relationship{display:flex;justify-content:flex-end}.join-match-type-section{padding:10px 0}.info{display:flex;justify-content:space-between}.info-label{display:flex;align-items:center}.chip{margin-bottom:5px}.sort-by-section{border:1px solid var(--calcite-ui-border-3);padding:10px 10px 0 10px;margin:10px 0}.separator{border-bottom:1px solid var(--calcite-ui-border-3);margin:10px 0 15px 0}.stats-section{border:1px solid var(--calcite-ui-border-3);padding:10px 10px 0 10px;margin-bottom:10px}.stats-field-header{overflow-wrap:anywhere;width:100%}.stats-button{margin-bottom:10px}.select{cursor:pointer}";

const ArcgisLayerViewJoinConfig = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewJoinStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinStatusChange", 7);
    this.arcgisLayerViewJoinConfigTableClick = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinConfigTableClick", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goBack = () => {
      this.arcgisLayerViewJoinStatusChange.emit({
        status: joinFlowStatus.ADD_SELECTION
      });
    };
    this.goNext = () => {
      const { props } = this;
      const { attributeRelationships } = props;
      // clean up
      props.attributeRelationships = attributeRelationships.filter((rel) => rel.targetFieldName && rel.addFieldName);
      this.arcgisLayerViewJoinStatusChange.emit({
        status: joinFlowStatus.CREATE
      });
    };
    this.onTargetFieldSelect = (rel) => {
      const { props, targetFL } = this;
      const { strings } = props;
      const { targetFieldName } = rel;
      const shapeFields = targetFL.fields.filter((field) => field.name.toLowerCase().startsWith("shape__"));
      this.openFieldPickList({
        layer: targetFL,
        fieldName: targetFieldName,
        multiple: false,
        heading: strings.join.targetFields,
        fieldTypes: [
          "small-integer",
          "big-integer",
          "integer",
          "single",
          "double",
          "long",
          "number",
          "date",
          "date-only",
          "time-only",
          "timestamp-offset",
          "string",
          "guid",
          "global-id"
        ],
        excludedFields: shapeFields.map((field) => field.name),
        buttonNode: this.targetFieldNode,
        onChange: (selectedFields) => {
          rel.targetFieldName = selectedFields[0];
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      });
    };
    this.onJoinFieldSelect = (rel) => {
      const { props, addFL } = this;
      const { strings } = props;
      const { addFieldName } = rel;
      const shapeFields = addFL.fields.filter((field) => field.name.toLowerCase().startsWith("shape__"));
      this.openFieldPickList({
        layer: addFL,
        fieldName: addFieldName,
        multiple: false,
        heading: strings.join.joinFields,
        fieldTypes: [
          "small-integer",
          "big-integer",
          "integer",
          "single",
          "double",
          "long",
          "number",
          "date",
          "date-only",
          "time-only",
          "timestamp-offset",
          "string",
          "guid",
          "global-id"
        ],
        excludedFields: shapeFields.map((field) => field.name),
        buttonNode: this.addFieldNode,
        onChange: (selectedFields) => {
          rel.addFieldName = selectedFields[0];
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      });
    };
    this.onSortByFieldSelect = () => {
      const { props, addFL } = this;
      const { joinOperation, strings } = props;
      const { sortByFieldName } = joinOperation;
      const shapeFields = addFL.fields.filter((field) => field.name.toLowerCase().startsWith("shape__"));
      this.openFieldPickList({
        layer: addFL,
        fieldName: sortByFieldName,
        multiple: false,
        heading: strings.join.joinFields,
        fieldTypes: [
          "small-integer",
          "big-integer",
          "integer",
          "single",
          "double",
          "long",
          "number",
          "date",
          "date-only",
          "time-only",
          "timestamp-offset",
          "oid"
        ],
        excludedFields: shapeFields.map((field) => field.name),
        buttonNode: this.sortByFieldNode,
        onChange: (selectedFields) => {
          joinOperation.sortByFieldName = selectedFields[0];
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      });
    };
    this.onStatsFieldSelect = () => {
      const { props, addFL } = this;
      const { joinOperation, strings } = props;
      const { statisticsFields } = joinOperation;
      const shapeFields = addFL.fields.filter((field) => field.name.toLowerCase().startsWith("shape__"));
      this.openFieldPickList({
        layer: addFL,
        fieldName: "",
        multiple: true,
        heading: strings.join.selectFields,
        fieldTypes: [
          "small-integer",
          "big-integer",
          "integer",
          "single",
          "double",
          "long",
          "number",
          "date",
          "date-only",
          "time-only",
          "timestamp-offset"
        ],
        excludedFields: statisticsFields
          .map((field) => field.fieldName)
          .concat(shapeFields.map((field) => field.name)),
        buttonNode: this.statsButtonNode,
        onChange: (selectedFields) => {
          selectedFields.forEach((fieldName) => {
            const isDate = ["date", "date-only", "time-only", "timestamp-offset"].indexOf(getFieldType(addFL, fieldName)) > -1;
            statisticsFields.push({ fieldName, types: [isDate ? "MIN" : "SUM"] });
          });
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
      });
    };
    this.props = undefined;
    this.status = undefined;
    this.showTableOption = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    var _a;
    const { props } = this;
    const { targetLayer, targetLayerId, addLayer, addLayerId, attributeRelationships, joinOperation } = props;
    this.targetFL = (targetLayer.type === "group"
      ? getLayersAndTables(targetLayer).find((lyr) => lyr.layerId === targetLayerId)
      : targetLayer);
    this.addFL = (addLayer.type === "group"
      ? getLayersAndTables(addLayer).find((lyr) => lyr.layerId === addLayerId)
      : addLayer);
    if (!(attributeRelationships === null || attributeRelationships === void 0 ? void 0 : attributeRelationships.length)) {
      props.attributeRelationships = [];
      // look for relationship fields
      const { targetFL, addFL } = this;
      if (targetFL.relationships && addFL.relationships) {
        const targetRels = targetFL.relationships.filter((rel) => rel.relatedTableId === addLayerId);
        const addRels = addFL.relationships.filter((rel) => rel.relatedTableId === targetLayerId);
        if (targetRels.length && addRels.length) {
          targetRels.forEach((targetRel) => {
            const addRel = addRels.find((addRel) => targetRel.id === addRel.id);
            if (addRel) {
              props.attributeRelationships.push({
                targetFieldName: targetRel.keyField,
                addFieldName: addRel.keyField
              });
            }
          });
        }
      }
      if (!((_a = props.attributeRelationships) === null || _a === void 0 ? void 0 : _a.length)) {
        props.attributeRelationships.push({});
      }
    }
    if (!joinOperation) {
      props.joinOperation = {
        type: "one-to-one",
        matchType: "first",
        sortByFieldName: this.addFL.objectIdField,
        sortOrder: "ASC",
        joinType: "INNER",
        statisticsFields: []
      };
    }
  }
  async componentDidLoad() {
    requestAnimationFrame(() => { var _a; return (_a = this.backButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  disconnectedCallback() {
    this.removeInfoPopover();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS$5.flow, dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.join.configureJoin, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, ref: (node) => (this.flowItemNode = node) }, this.renderFooterButtons(), this.renderContent()))));
  }
  renderFooterButtons() {
    var _a, _b;
    const { props } = this;
    const { attributeRelationships, joinOperation, strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    const nextEnabled = !!attributeRelationships.find((rel) => rel.targetFieldName && rel.addFieldName) &&
      (joinOperation.type === "one-to-many" ||
        (joinOperation.matchType === "first" &&
          joinOperation.sortByFieldName &&
          joinOperation.sortOrder) ||
        (joinOperation.matchType === "summarize" &&
          ((_a = joinOperation.statisticsFields) === null || _a === void 0 ? void 0 : _a.length) &&
          ((_b = joinOperation.statisticsFields) === null || _b === void 0 ? void 0 : _b[0].fieldName)));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$5.footer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: this.goBack, appearance: "outline-fill", width: "half", "icon-start": isRtl ? "arrow-right" : "arrow-left", ref: (node) => (this.backButtonNode = node) }, strings.general.back), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !nextEnabled, onClick: nextEnabled && this.goNext, appearance: "solid", width: "half", iconEnd: isRtl ? "arrow-left" : "arrow-right", ref: (node) => (this.nextButtonNode = node) }, strings.general.next)));
  }
  renderContent() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderLayers(), this.renderAttributeRelationships(), this.renderJoinOperation()));
  }
  renderLayers() {
    const { props, targetFL, addFL } = this;
    const { targetItem, targetLayer, targetLayerId, addItem, addLayer, addLayerId, showTableOption, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    const targetTitle = targetLayer.type === "group"
      ? rtl
        ? `${targetFL.title} / ${targetItem.title}`
        : `${targetItem.title} / ${targetFL.title}`
      : targetLayer.title;
    const addTitle = addLayer.type === "group"
      ? rtl
        ? `${addFL.title} / ${addItem.title}`
        : `${addItem.title} / ${addFL.title}`
      : addLayer.title;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.layerSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.targetLayer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.layerHeader }, strings.join.targetLayer), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.layerTitle }, targetTitle)), showTableOption && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", icon: "table", class: CSS$5.layerIcon, text: strings.join.showTable, textEnabled: false, onClick: () => {
        var _a, _b;
        if (targetLayer.type === "group") {
          (_a = targetLayer.tables) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
            if (lyr.layerId === targetLayerId) {
              this.arcgisLayerViewJoinConfigTableClick.emit(lyr);
            }
          });
          (_b = targetLayer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
            if (lyr.layerId === targetLayerId) {
              this.arcgisLayerViewJoinConfigTableClick.emit(lyr);
            }
          });
        }
        else {
          this.arcgisLayerViewJoinConfigTableClick.emit(targetLayer);
        }
      } }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.addLayer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.layerHeader }, strings.join.joinLayer), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.layerTitle }, addTitle)), showTableOption && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", icon: "table", class: CSS$5.layerIcon, text: strings.join.showTable, textEnabled: false, onClick: () => {
        var _a, _b;
        if (addLayer.type === "group") {
          (_a = addLayer.tables) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
            if (lyr.layerId === addLayerId) {
              this.arcgisLayerViewJoinConfigTableClick.emit(lyr);
            }
          });
          (_b = addLayer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
            if (lyr.layerId === addLayerId) {
              this.arcgisLayerViewJoinConfigTableClick.emit(lyr);
            }
          });
        }
        else {
          this.arcgisLayerViewJoinConfigTableClick.emit(addLayer);
        }
      } })))));
  }
  renderAttributeRelationships() {
    const { props } = this;
    const { attributeRelationships, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: strings.join.attributeJoin, description: strings.join.attributeJoinMsg, open: true, collapsible: true, ref: (node) => (this.attrBlockNode = node) }, attributeRelationships.map((rel, idx) => this.renderAttributeRelationship(rel, idx)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: () => {
        attributeRelationships.push({});
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      }, appearance: "outline-fill", width: "full", ref: (node) => (this.fieldButtonNode = node) }, strings.join.fields)));
  }
  renderAttributeRelationship(rel, idx) {
    const { targetFL, addFL, props } = this;
    const { attributeRelationships, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.attributeRelationship }, attributeRelationships.length > 1 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.removeAttributeRelationship }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", icon: "trash", text: strings.general.remove, onClick: () => {
        attributeRelationships.splice(idx, 1);
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.join.targetField, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", alignment: "icon-end-space-between", iconEnd: "chevron-down", onClick: () => this.onTargetFieldSelect(rel), ref: (node) => (this.targetFieldNode = node) }, rel.targetFieldName
      ? getFieldAlias(targetFL, rel.targetFieldName)
      : strings.join.selectField)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.join.joinField, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", alignment: "icon-end-space-between", iconEnd: "chevron-down", onClick: () => this.onJoinFieldSelect(rel), ref: (node) => (this.addFieldNode = node) }, rel.addFieldName ? getFieldAlias(addFL, rel.addFieldName) : strings.join.selectField))));
  }
  renderJoinOperation() {
    const { props } = this;
    const { joinOperation, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: strings.join.joinSettings, description: strings.join.joinSettingsMsg, open: true, collapsible: true, ref: (node) => (this.operationBlockNode = node) }, this.renderJoinOperationType(), joinOperation.type === "one-to-one" && this.renderMatchType(), joinOperation.type === "one-to-one" &&
      joinOperation.matchType === "first" &&
      this.renderJoinOperationSortBy(), joinOperation.type === "one-to-one" &&
      joinOperation.matchType === "summarize" &&
      this.renderJoinOperationStatistics(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.separator }), this.renderJoinType()));
  }
  renderJoinOperationType() {
    const { props } = this;
    const { joinOperation, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-label" }, strings.join.joinOperation), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: "link-info", tabindex: "0", scale: "s", icon: "information", onClick: (event) => this.handleInfoClick(event, "join-operation"), text: strings.join.moreInfo, ref: (element) => {
        this.joinOperationInfoIconNode = element;
        element.addEventListener("keyup", (event) => {
          event.stopPropagation();
          if (event.key === " " || (!this.infoPopoverNode && event.key === "Enter")) {
            this.handleInfoClick(event, "join-operation");
          }
        });
        element.addEventListener("keydown", (event) => {
          if (event.key === " ") {
            // prevent panel from scrolling
            event.stopPropagation();
            event.preventDefault();
          }
        });
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "one-to-one", appearance: joinOperation.type === "one-to-one" ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${joinOperation.type === "one-to-many" ? CSS$5.select : ""}`, onClick: joinOperation.type === "one-to-many"
        ? () => {
          joinOperation.type = "one-to-one";
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        : undefined }, strings.join.oneToOne), "\u00A0", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "one-to-many", appearance: joinOperation.type === "one-to-many" ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${joinOperation.type === "one-to-one" ? CSS$5.select : ""}`, onClick: joinOperation.type === "one-to-one"
        ? () => {
          joinOperation.type = "one-to-many";
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        : undefined }, strings.join.oneToMany))));
  }
  renderMatchType() {
    const { props } = this;
    const { joinOperation, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { name: "matchType", layout: "vertical", class: CSS$5.joinMatchTypeSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", class: CSS$5.select, onClick: () => {
        joinOperation.matchType = "first";
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: joinOperation.matchType === "first", value: "first", onClick: () => {
        joinOperation.matchType = "first";
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }), strings.join.onlyFirst), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", class: CSS$5.select, onClick: () => {
        joinOperation.matchType = "summarize";
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: joinOperation.matchType === "summarize", value: "summarize", onClick: () => {
        joinOperation.matchType = "summarize";
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }), strings.join.summarizeMatching)));
  }
  renderJoinOperationSortBy() {
    const { addFL, props } = this;
    const { joinOperation, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.sortBySection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.join.sortBy, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", alignment: "icon-end-space-between", iconEnd: "chevron-down", onClick: () => this.onSortByFieldSelect(), ref: (node) => (this.sortByFieldNode = node) }, getFieldAlias(addFL, joinOperation.sortByFieldName))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.join.sortOrder, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", onCalciteSelectChange: (event) => {
        const selectNode = event.target;
        joinOperation.sortOrder = selectNode.value;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      }, label: strings.join.sortOrder }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { label: strings.join.asc, selected: joinOperation.sortOrder === "ASC", value: "ASC" }, strings.join.asc), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { label: strings.join.desc, selected: joinOperation.sortOrder === "DESC", value: "DESC" }, strings.join.desc)))));
  }
  renderJoinOperationStatistics() {
    var _a;
    const { props, addFL } = this;
    const { joinOperation, strings } = props;
    const { statisticsFields } = joinOperation;
    const excludedFields = statisticsFields.map((field) => field.fieldName);
    const fieldTypes = [
      "small-integer",
      "big-integer",
      "integer",
      "single",
      "double",
      "long",
      "number",
      "date",
      "date-only",
      "time-only",
      "timestamp-offset"
    ];
    const layerFields = addFL.fields
      .filter((field) => excludedFields.indexOf(field.name) === -1)
      .filter((field) => fieldTypes.indexOf(field.type) > -1);
    const noMoreFields = !layerFields.length;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "l" }, strings.join.fieldStats), (_a = joinOperation.statisticsFields) === null || _a === void 0 ? void 0 :
      _a.map((statsField, idx) => this.renderJoinOperationStatistic(statsField, idx)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: !noMoreFields && this.onStatsFieldSelect, appearance: "outline-fill", "icon-start": "plus", width: "full", disabled: noMoreFields, class: CSS$5.statsButton, ref: (node) => (this.statsButtonNode = node) }, strings.join.addStats)));
  }
  renderJoinOperationStatistic(statsField, idx) {
    const { props, addFL } = this;
    const { joinOperation, strings } = props;
    const isDate = ["date", "date-only", "time-only", "timestamp-offset"].indexOf(getFieldType(addFL, statsField.fieldName)) > -1;
    const hasAllTypes = isDate
      ? statsField.types.indexOf("MIN") > -1 && statsField.types.indexOf("MAX") > -1
      : statsField.types.indexOf("SUM") > -1 &&
        statsField.types.indexOf("MIN") > -1 &&
        statsField.types.indexOf("MAX") > -1 &&
        statsField.types.indexOf("MEAN") > -1 &&
        statsField.types.indexOf("STDDEV") > -1;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$5.statsSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: CSS$5.statsFieldHeader, layout: "inline-space-between" }, getFieldAlias(addFL, statsField.fieldName), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", icon: "trash", text: strings.general.remove, onClick: () => {
        joinOperation.statisticsFields.splice(idx, 1);
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, !isDate && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "SUM", appearance: statsField.types.indexOf("SUM") > -1 ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${statsField.types.length > 1 || statsField.types.indexOf("SUM") === -1
        ? CSS$5.select
        : ""}`, onClick: () => {
        statsField.types.indexOf("SUM") === -1
          ? statsField.types.push("SUM")
          : statsField.types.length > 1
            ? statsField.types.splice(statsField.types.indexOf("SUM"), 1)
            : undefined;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, strings.join.sum), "\u00A0")), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "MIN", appearance: statsField.types.indexOf("MIN") > -1 ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${statsField.types.length > 1 || statsField.types.indexOf("MIN") === -1
        ? CSS$5.select
        : ""}`, onClick: () => {
        statsField.types.indexOf("MIN") === -1
          ? statsField.types.push("MIN")
          : statsField.types.length > 1
            ? statsField.types.splice(statsField.types.indexOf("MIN"), 1)
            : undefined;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, strings.join.min), "\u00A0", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "MAX", appearance: statsField.types.indexOf("MAX") > -1 ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${statsField.types.length > 1 || statsField.types.indexOf("MAX") === -1
        ? CSS$5.select
        : ""}`, onClick: () => {
        statsField.types.indexOf("MAX") === -1
          ? statsField.types.push("MAX")
          : statsField.types.length > 1
            ? statsField.types.splice(statsField.types.indexOf("MAX"), 1)
            : undefined;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, strings.join.max), !isDate && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, "\u00A0", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "MEAN", appearance: statsField.types.indexOf("MEAN") > -1 ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${statsField.types.length > 1 || statsField.types.indexOf("MEAN") === -1
        ? CSS$5.select
        : ""}`, onClick: () => {
        statsField.types.indexOf("MEAN") === -1
          ? statsField.types.push("MEAN")
          : statsField.types.length > 1
            ? statsField.types.splice(statsField.types.indexOf("MEAN"), 1)
            : undefined;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, strings.join.mean), "\u00A0", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "STDDEV", appearance: statsField.types.indexOf("STDDEV") > -1 ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${statsField.types.length > 1 || statsField.types.indexOf("STDDEV") === -1
        ? CSS$5.select
        : ""}`, onClick: () => {
        statsField.types.indexOf("STDDEV") === -1
          ? statsField.types.push("STDDEV")
          : statsField.types.length > 1
            ? statsField.types.splice(statsField.types.indexOf("STDDEV"), 1)
            : undefined;
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, strings.join.stdDev))), !hasAllTypes && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.F, null, "\u00A0", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", label: strings.join.selectAll, onClick: () => {
        !isDate && statsField.types.indexOf("SUM") === -1 && statsField.types.push("SUM");
        statsField.types.indexOf("MIN") === -1 && statsField.types.push("MIN");
        statsField.types.indexOf("MAX") === -1 && statsField.types.push("MAX");
        !isDate &&
          statsField.types.indexOf("MEAN") === -1 &&
          statsField.types.push("MEAN");
        !isDate &&
          statsField.types.indexOf("STDDEV") === -1 &&
          statsField.types.push("STDDEV");
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
      } }, strings.join.selectAll))))));
  }
  renderJoinType() {
    const { props } = this;
    const { joinOperation, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-label" }, strings.join.joinType), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: "link-info", tabindex: "0", scale: "s", icon: "information", onClick: (event) => this.handleInfoClick(event, "join-type"), text: strings.join.moreInfo, ref: (element) => {
        this.joinTypeInfoIconNode = element;
        element.addEventListener("keyup", (event) => {
          event.stopPropagation();
          if (event.key === " " || (!this.infoPopoverNode && event.key === "Enter")) {
            this.handleInfoClick(event, "join-type");
          }
        });
        element.addEventListener("keydown", (event) => {
          if (event.key === " ") {
            // prevent panel from scrolling
            event.stopPropagation();
            event.preventDefault();
          }
        });
      } })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "inner-join", appearance: joinOperation.joinType === "INNER" ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${joinOperation.joinType === "LEFT" ? CSS$5.select : ""}`, onClick: joinOperation.joinType === "LEFT"
        ? () => {
          joinOperation.joinType = "INNER";
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        : undefined }, strings.join.innerJoin), "\u00A0", (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "left-join", appearance: joinOperation.joinType === "LEFT" ? "solid" : "outline-fill", kind: "brand", class: `${CSS$5.chip} ${joinOperation.joinType === "INNER" ? CSS$5.select : ""}`, onClick: joinOperation.joinType === "INNER"
        ? () => {
          joinOperation.joinType = "LEFT";
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        : undefined }, strings.join.leftJoin))));
  }
  openFieldPickList({ layer, fieldName, multiple, heading, fieldTypes, excludedFields, buttonNode, onChange }) {
    const { props, fieldPickListSortBy, flowItemNode } = this;
    const { view } = props;
    const nodeWidth = flowItemNode.getBoundingClientRect().width || 215;
    this.arcgisFieldPickList = document.createElement("arcgis-field-pick-list");
    this.arcgisFieldPickList.popoverProps = {
      placement: "auto",
      offsetDistance: -1 * (nodeWidth - 2),
      offsetSkidding: 0,
      pointerDisabled: true,
      popoverWidth: nodeWidth + 7,
      refElement: flowItemNode
    };
    this.arcgisFieldPickList.fields = this.createPickListFields(layer, fieldTypes, excludedFields);
    this.arcgisFieldPickList.layer = layer;
    this.arcgisFieldPickList.mapView = view;
    this.arcgisFieldPickList.showFieldInfo = true;
    this.arcgisFieldPickList.showFieldName = false;
    this.arcgisFieldPickList.selectedFields = fieldName ? [fieldName] : [];
    this.arcgisFieldPickList.sortBy = fieldPickListSortBy;
    this.arcgisFieldPickList.multiple = multiple;
    this.arcgisFieldPickList.heading = heading;
    this.arcgisFieldPickList.addEventListener("arcgisFieldPickListDismissed", (event) => {
      var _a;
      event.stopPropagation();
      const selectedFields = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields;
      flowItemNode.disabled = false;
      if (this.arcgisFieldPickList) {
        document.body.removeChild(this.arcgisFieldPickList);
        this.arcgisFieldPickList = null;
        setTimeout(() => {
          buttonNode.setFocus();
        }, 1);
      }
      if (selectedFields === null || selectedFields === void 0 ? void 0 : selectedFields.length) {
        onChange(selectedFields);
      } // else user hit cancel or close
    });
    this.arcgisFieldPickList.addEventListener("arcgisFieldPickListSortByChange", (event) => (this.fieldPickListSortBy = event.detail));
    document.body.appendChild(this.arcgisFieldPickList);
    flowItemNode.disabled = true;
  }
  createPickListFields(layer, fieldTypes, excludedFields) {
    const { fields, popupTemplate } = layer;
    const layerFields = fields
      .filter((field) => excludedFields.indexOf(field.name) === -1)
      .filter((field) => fieldTypes.indexOf(field.type) > -1);
    return layerFields.map((field) => {
      var _a, _b;
      return {
        name: field.name,
        alias: ((_b = (_a = popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.find((fieldInfo) => fieldInfo.fieldName === field.name)) === null || _b === void 0 ? void 0 : _b.label) || field.alias,
        type: field.type
      };
    });
  }
  handleInfoClick(event, type) {
    // don't execute the event on the entire tile
    event.stopPropagation();
    this.removeInfoPopover();
    const { props } = this;
    const refElement = type === "join-operation" ? this.joinOperationInfoIconNode : this.joinTypeInfoIconNode;
    this.infoPopoverNode = document.createElement("arcgis-layer-view-join-info-popover");
    this.infoPopoverNode.props = props;
    this.infoPopoverNode.type = type;
    this.infoPopoverNode.referenceElement = refElement;
    this.infoPopoverNode.addEventListener("arcgisLayerViewJoinInfoPopoverClose", (event) => {
      event.stopPropagation();
      this.removeInfoPopover();
      setTimeout(() => refElement.setFocus(), 200);
    });
    this.infoPopoverNode.addEventListener("arcgisLayerViewJoinInfoPopoverDisconnected", (event) => {
      event.stopPropagation();
      this.removeInfoPopover();
    });
    document.body.appendChild(this.infoPopoverNode);
    this.infoPopoverNode.setOpen(true);
    // need to wait until it's all visible
    setTimeout(() => this.infoPopoverNode.setFocus(), 100);
  }
  removeInfoPopover() {
    var _a;
    if (this.infoPopoverNode) {
      (_a = this.infoPopoverNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.infoPopoverNode);
      this.infoPopoverNode = null;
    }
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewJoinConfig.style = arcgisLayerViewJoinConfigCss;

const CSS$4 = {
  panel: "panel",
  info: "info",
  footer: "footer",
  layerSection: "layer-section",
  targetLayer: "target-layer",
  addLayer: "add-layer",
  layerHeader: "layer-header",
  layerTitle: "layer-title"
};

const arcgisLayerViewJoinCreateCss = ".panel.sc-arcgis-layer-view-join-create{height:100%}.info.sc-arcgis-layer-view-join-create{display:grid;grid-template-columns:repeat(1, minmax(0px, 1fr));gap:0.5rem;padding:0 0.75rem}.footer.sc-arcgis-layer-view-join-create{width:100%}.layer-section.sc-arcgis-layer-view-join-create{border:1px solid var(--calcite-ui-border-3);background-color:white;margin:10px}.target-layer.sc-arcgis-layer-view-join-create{padding:10px;border-bottom:1px solid var(--calcite-ui-border-3)}.add-layer.sc-arcgis-layer-view-join-create{padding:10px}.layer-header.sc-arcgis-layer-view-join-create{padding-bottom:3px}.layer-title.sc-arcgis-layer-view-join-create{font-weight:bold}.notice.sc-arcgis-layer-view-join-create{margin:8px}";

const ArcgisLayerViewJoinCreate = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewJoinStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinStatusChange", 7);
    this.arcgisLayerViewJoinCreateDone = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinCreateDone", 7);
    this.arcgisLayerViewJoinCreateCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinCreateCancel", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goBack = () => {
      // save last settings
      const { props } = this;
      props.savedItemProps = {
        title: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title,
        tags: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags,
        summary: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet,
        categories: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories,
        folder: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder
      };
      this.arcgisLayerViewJoinStatusChange.emit({
        status: joinFlowStatus.CONFIG
      });
    };
    this.goCreate = async () => {
      const { props, flowItemNode, hostElement } = this;
      const { strings } = props;
      // in case the create call fails
      props.savedItemProps = {
        title: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title,
        tags: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags,
        summary: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet,
        categories: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories,
        folder: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder
      };
      const newItemProps = {
        title: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title,
        tags: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags,
        summary: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet,
        categories: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories,
        folder: _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder
      };
      this.loading = true;
      try {
        this.viewItemId = await createJoinView(props, newItemProps);
        this.loading = false;
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = flowItemNode;
        this.msgNode.message = strings.msg.created;
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
            this.arcgisLayerViewJoinCreateDone.emit(this.viewItemId);
          }
        }, 7000);
      }
      catch (e) {
        const { props, flowItemNode } = this;
        const { strings } = props;
        this.loading = false;
        console.error("could not create join view", e);
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = flowItemNode;
        this.msgNode.isError = true;
        this.msgNode.message = strings.msg.createFailed;
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
          }
        }, 7000);
      }
    };
    this.goCancel = () => {
      this.arcgisLayerViewJoinCreateCancel.emit();
    };
    this.props = undefined;
    this.loading = false;
    this.title = undefined;
  }
  arcgisLayerViewMsgClosedHandler() {
    if (this.msgNode) {
      this.hostElement.removeChild(this.msgNode);
      this.msgNode = undefined;
    }
    clearTimeout(this.timeoutHndl);
    this.timeoutHndl = undefined;
    if (this.viewItemId) {
      this.arcgisLayerViewJoinCreateDone.emit(this.viewItemId);
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { props } = this;
    const { targetLayer, targetLayerId, addLayer, addLayerId } = props;
    this.targetFL = (targetLayer.type === "group"
      ? getLayersAndTables(targetLayer).find((lyr) => lyr.layerId === targetLayerId)
      : targetLayer);
    this.addFL = (addLayer.type === "group"
      ? getLayersAndTables(addLayer).find((lyr) => lyr.layerId === addLayerId)
      : addLayer);
    this.title = await getSuggestedTitleForJoin(props);
  }
  async componentDidLoad() {
    requestAnimationFrame(() => { var _a; return (_a = this.backButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, loading } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.join.create, loading: loading, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, ref: (node) => (this.flowItemNode = node) }, this.renderFooterButtons(), this.renderNotice(), this.renderLayers(), this.renderInfo())));
  }
  renderFooterButtons() {
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$4.footer }, this.renderBack(), this.renderCreate(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("br", null), this.renderCancel()));
  }
  renderBack() {
    const { props } = this;
    const { strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: this.goBack, appearance: "outline-fill", width: "half", "icon-start": isRtl ? "arrow-right" : "arrow-left", ref: (node) => (this.backButtonNode = node) }, strings.general.back));
  }
  renderCreate() {
    const { props, title, titleError, summaryError } = this;
    const { strings } = props;
    const enabled = title && !titleError && !summaryError;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !enabled, onClick: enabled && this.goCreate, appearance: "solid", width: "half", "icon-start": "plus-square", ref: (node) => (this.createButtonNode = node) }, strings.createView.create));
  }
  renderCancel() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: this.goCancel, appearance: "transparent", width: "full" }, strings.general.cancel));
  }
  renderNotice() {
    {
      return;
    }
  }
  renderLayers() {
    const { props, targetFL, addFL } = this;
    const { targetItem, targetLayer, addItem, addLayer, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    const targetTitle = targetLayer.type === "group"
      ? rtl
        ? `${targetFL.title} / ${targetItem.title}`
        : `${targetItem.title} / ${targetFL.title}`
      : targetLayer.title;
    const addTitle = addLayer.type === "group"
      ? rtl
        ? `${addFL.title} / ${addItem.title}`
        : `${addItem.title} / ${addFL.title}`
      : addLayer.title;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.layerSection }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.targetLayer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.layerHeader }, strings.join.targetLayer), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.layerTitle }, targetTitle)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.addLayer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.layerHeader }, strings.join.joinLayer), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.layerTitle }, addTitle))));
  }
  renderInfo() {
    const { props, title } = this;
    const { targetItem, targetItemOwner, savedItemProps } = props;
    const { portal } = targetItem;
    const user = portal.user;
    const config = { portal, user, api: 4 };
    if (savedItemProps) {
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title = savedItemProps.title;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder = savedItemProps.folder;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet = savedItemProps.summary || "";
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories = savedItemProps.categories;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags = savedItemProps.tags;
    }
    else {
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.title = title;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.folder =
        targetItem.ownerFolder &&
          {
            id: targetItem.ownerFolder,
            username: targetItem.owner
          };
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.snippet = targetItem.snippet || "";
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.categories = targetItem.categories;
      _item_properties_e6412a9a_js__WEBPACK_IMPORTED_MODULE_7__.i.tags = targetItem.tags;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$4.info }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-properties", { portal: portal, user: user, api: 4, config: config, type: "Feature Service", scale: "s" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-title-input", { enablePublishing: true, onArcgisTitleInputChange: async (event) => {
        const node = event.target;
        const titleError = await node.validateTitle();
        if ((!this.titleError && titleError) || (this.titleError && !titleError)) {
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        this.titleError = titleError;
      } }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-folder-picker", { user: targetItemOwner }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-categories-picker", null), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-tags-picker", null), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-summary-input", { onArcgisSummaryInputChange: async (event) => {
        const node = event.target;
        const summaryError = (await node.getErrorMessage());
        if ((!this.summaryError && summaryError) || (this.summaryError && !summaryError)) {
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        this.summaryError = summaryError;
      } }))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewJoinCreate.style = arcgisLayerViewJoinCreateCss;

const CSS$3 = {
  flow: "flow",
  panel: "panel",
  footer: "footer",
  info: "info",
  text: "text"
};

const arcgisLayerViewJoinTargetSelectionCss = ".flow{height:100%}.panel{height:100%}.footer{width:100%}.info{pointer-events:none;padding:1rem 0.75rem}.text{font-size:var(--calcite-font-size--2);line-height:1.375;color:var(--calcite-ui-text-3);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);pointer-events:none}.notice{margin:8px}";

const ArcgisLayerViewJoinTargetSelection = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewJoinStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewJoinStatusChange", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goNext = () => {
      this.arcgisLayerViewJoinStatusChange.emit({
        status: joinFlowStatus.ADD_SELECTION
      });
    };
    this.onSelectionChange = () => {
      const { props } = this;
      const { targetLayer } = props;
      this.listNode
        .querySelectorAll("calcite-pick-list-item")
        .forEach((item) => {
        if (item.selected) {
          props.targetLayerId = item.value;
          (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }
        if (targetLayer.type === "group") {
          getLayersAndTables(targetLayer).find((subLayer) => subLayer.layerId === item.value).visible = item.selected;
        }
        else {
          targetLayer.visible = item.selected;
        }
      });
      props.attributeRelationships = undefined;
      props.joinOperation = undefined;
    };
    this.props = undefined;
    this.status = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { props } = this;
    const { targetLayer } = props;
    if (targetLayer.type !== "group") {
      props.targetLayerId = targetLayer.layerId;
    }
  }
  async componentDidLoad() {
    requestAnimationFrame(() => { var _a; return (_a = this.listNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render target-selection", this.props, "status:", this.status);
    const { props } = this;
    const { targetItem, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS$3.flow, dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: targetItem === null || targetItem === void 0 ? void 0 : targetItem.title, description: strings.join.targetLayer, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, ref: (node) => (this.flowItemNode = node) }, this.renderFooterButtons(), this.renderOBACMsg(), this.renderInfo(), this.renderSublayers()))));
  }
  renderFooterButtons() {
    const { props } = this;
    const { targetItem, targetLayer, targetLayerId, strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    let targetFL;
    if (targetLayer.type === "group" && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(targetLayerId)) {
      targetFL = getLayersAndTables(targetLayer).find((lyr) => targetLayerId === lyr.layerId);
    }
    else if (targetLayer.type !== "group") {
      targetFL = targetLayer;
    }
    const nextDisabled = !(0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(targetLayerId) || (targetItem.portal.isPortal && hasOBAC(targetFL));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$3.footer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: nextDisabled, onClick: !nextDisabled && this.goNext, appearance: "solid", width: "full", iconEnd: isRtl ? "arrow-left" : "arrow-right", ref: (node) => (this.nextButtonNode = node) }, strings.general.next)));
  }
  renderOBACMsg() {
    const { props } = this;
    const { config, targetItem, targetLayerId, targetLayer, strings } = props;
    const { helpBase, helpMap } = config;
    if (!targetItem.portal.isPortal) {
      // message only for Enterprise
      return;
    }
    let targetFL;
    if (targetLayer.type === "group" && (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.i)(targetLayerId)) {
      targetFL = getLayersAndTables(targetLayer).find((lyr) => targetLayerId === lyr.layerId);
    }
    else if (targetLayer.type !== "group") {
      targetFL = targetLayer;
    }
    else {
      // no group sublayer selected yet
      return;
    }
    if (!hasOBAC(targetFL)) {
      return;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { key: `${hasOBAC(targetFL)}`, class: "notice", open: true, closable: false, scale: "s", width: "auto", kind: "warning", icon: "exclamation-mark-triangle" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.join.obacNotSupportedMsg), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", title: strings.join.learnMore, target: "_blank", href: `${helpBase}${helpMap["120004184"]}` }, strings.join.learnMore)));
  }
  renderInfo() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.info }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$3.text }, strings.join.selectTargetLayerPanelDescription)));
  }
  renderSublayers() {
    var _a, _b;
    const { props } = this;
    const { targetLayer } = props;
    const listItems = [];
    if (targetLayer.type === "group") {
      (_a = targetLayer.tables) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
        listItems.unshift(this.renderSublayer(lyr));
      });
      (_b = targetLayer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
        listItems.unshift(this.renderSublayer(lyr));
      });
    }
    else {
      listItems.push(this.renderSublayer(targetLayer));
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { multiple: false, onCalciteListChange: this.onSelectionChange, ref: (node) => (this.listNode = node) }, listItems));
  }
  renderSublayer(lyr) {
    const { props } = this;
    const { targetLayerId } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: lyr.layerId, label: lyr.title, value: lyr.layerId, description: getLayerType(lyr, props), selected: targetLayerId === lyr.layerId }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewJoinTargetSelection.style = arcgisLayerViewJoinTargetSelectionCss;

const ArcgisLayerViewCreate = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewMsgClosed = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewMsgClosed", 7);
    this.props = undefined;
    this.flowItemElement = undefined;
    this.isError = false;
    this.isWarning = false;
    this.message = undefined;
    this.closeWithOK = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    if (this.flowItemElement) {
      this.flowItemElement.disabled = true;
    }
    requestAnimationFrame(() => { var _a; return (_a = this.okNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  disconnectedCallback() {
    if (this.flowItemElement) {
      this.flowItemElement.disabled = false;
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, hostElement, flowItemElement, isError, isWarning, message, closeWithOK } = this;
    const { strings } = props;
    const dir = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(hostElement);
    const panelWidth = Math.round(flowItemElement.getBoundingClientRect().width);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: dir, placement: "trailing-start", open: true, pointerDisabled: true, referenceElement: flowItemElement, offsetDistance: -1 * (panelWidth - 10), offsetSkidding: 200, label: message, style: {
        zIndex: "100",
        width: `${panelWidth - 20}px`
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "s", width: "full", open: true, closable: !closeWithOK, icon: isError || isWarning ? "exclamation-mark-triangle" : "check-circle", kind: isError ? "danger" : isWarning ? "warning" : "success", onCalciteNoticeClose: () => {
        this.arcgisLayerViewMsgClosed.emit();
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, isError ? strings.msg.error : isWarning ? strings.msg.warning : strings.msg.success), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message", ref: (node) => {
        // must use div and ref, otherwise <b> inside the string doesn't work
        node.innerHTML = message;
      } }), closeWithOK && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", slot: "actions-end", onClick: () => {
        this.arcgisLayerViewMsgClosed.emit();
      }, ref: (node) => (this.okNode = node) }, strings.msg.ok))))));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const CSS$2 = {
  flow: "flow",
  panel: "panel",
  info: "info",
  infoDescription: "info-description",
  hasDefinitionIcon: "has-definition-icon",
  definitionIcon: "definition-icon",
  footer: "footer",
  footerTop: "footer-top"
};

const arcgisLayerViewOverviewCss = ".flow.sc-arcgis-layer-view-overview{height:100%}.panel.sc-arcgis-layer-view-overview{height:100%}.info.sc-arcgis-layer-view-overview{display:grid;grid-template-columns:repeat(1, minmax(0px, 1fr));gap:0.5rem;pointer-events:none;padding:1rem 0.75rem}.info-description.sc-arcgis-layer-view-overview{font-size:var(--calcite-font-size--2);line-height:1.375;color:var(--calcite-ui-text-3);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);pointer-events:none}.has-definition-icon.sc-arcgis-layer-view-overview{color:var(--calcite-ui-border-1);cursor:pointer}.definition-icon.sc-arcgis-layer-view-overview{color:var(--calcite-ui-text-2);cursor:pointer}.footer.sc-arcgis-layer-view-overview{width:100%}.footer-top.sc-arcgis-layer-view-overview{display:flex}";

const ArcgisLayerViewOverview = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewStatusChange", 7);
    this.arcgisLayerViewOverviewUpdated = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewOverviewUpdated", 7);
    this.arcgisLayerViewOverviewCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewOverviewCancel", 7);
    this.listItemNodes = [];
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goBack = () => {
      this.arcgisLayerViewStatusChange.emit({ status: flowStatus.SELECTION });
    };
    this.goNext = () => {
      this.arcgisLayerViewStatusChange.emit({ status: flowStatus.CREATE });
    };
    this.goUpdate = async () => {
      const { props, hostElement } = this;
      const { strings } = props;
      const showSuccessMsg = () => {
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = this.flowItemNode;
        this.msgNode.message = strings.msg.updated;
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
            this.arcgisLayerViewOverviewUpdated.emit();
          }
        }, 7000);
      };
      const hasAnyChanges = hasChanges(props);
      if (!hasAnyChanges) {
        showSuccessMsg();
        return;
      }
      this.loading = true;
      try {
        // update view
        await updateView(this.props);
        // max-age cache is 30 sec; might not get the latest
        await this.getLatestAdminServiceInfo();
        if (hasChanges(this.props)) {
          // wait up to 30 sec with increasing interval
          // and make other adminServiceInfo requests
          // until we really have the latest
          let waitTime = 1000;
          const tryAgain = async () => {
            var _a, _b;
            await this.getLatestAdminServiceInfo();
            if (!hasChanges(this.props) || waitTime > 30000) {
              // need to get latest saved AOI because it rounds coordinates when saving
              (_b = (_a = this.props.adminServiceInfo) === null || _a === void 0 ? void 0 : _a.layers) === null || _b === void 0 ? void 0 : _b.forEach(async (layerInfo) => {
                var _a, _b, _c, _d;
                const aoiValue = (_d = (_c = (_b = (_a = layerInfo.adminLayerInfo) === null || _a === void 0 ? void 0 : _a.viewLayerDefinition) === null || _b === void 0 ? void 0 : _b.table) === null || _c === void 0 ? void 0 : _c.filter) === null || _d === void 0 ? void 0 : _d.value;
                if (aoiValue) {
                  addViewLayerProps(layerInfo.id, {
                    aoi: JSON.parse(JSON.stringify(aoiValue.geometry))
                  }, this.props);
                }
              });
            }
            else {
              waitTime *= 2;
              setTimeout(tryAgain, waitTime);
            }
          };
          setTimeout(tryAgain, waitTime);
        }
        this.loading = false;
        showSuccessMsg();
      }
      catch (e) {
        const { strings } = props;
        this.loading = false;
        console.error("could not create view", e);
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = this.flowItemNode;
        this.msgNode.isError = true;
        this.msgNode.message = strings.msg.updateFailed;
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
          }
        }, 7000);
      }
    };
    this.goCancel = () => {
      this.arcgisLayerViewOverviewCancel.emit();
    };
    this.props = undefined;
    this.status = undefined;
    this.reRender = false;
    this.loading = false;
  }
  arcgisLayerViewOverviewRefreshHandler() {
    this.status = flowStatus.OVERVIEW;
    this.reRender = !this.reRender;
  }
  arcgisLayerViewMsgClosedHandler() {
    const { props } = this;
    const { strings } = props;
    if (this.msgNode) {
      if (this.msgNode.message === strings.msg.updated) {
        this.arcgisLayerViewOverviewUpdated.emit();
      }
      this.hostElement.removeChild(this.msgNode);
      this.msgNode = undefined;
    }
    clearTimeout(this.timeoutHndl);
    this.timeoutHndl = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() { }
  async componentDidLoad() {
    requestAnimationFrame(() => { var _a; return (_a = this.backButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render view-overview", propsToString(this.props));
    const { props, status, loading } = this;
    const { viewItem, layerItem, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS$2.flow, dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { key: status, heading: strings.general.includedLayerPanelTitle, description: (viewItem === null || viewItem === void 0 ? void 0 : viewItem.title) || (layerItem === null || layerItem === void 0 ? void 0 : layerItem.title), loading: loading, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, ref: (node) => (this.flowItemNode = node) }, this.renderFooterButtons(), this.renderInfo(), this.renderSublayers()), [flowStatus.DEFINITION, flowStatus.FILTER].includes(status)
      ? this.renderLayerDefinition()
      : null)));
  }
  renderFooterButtons() {
    const { props } = this;
    const { viewItem } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: CSS$2.footer }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.footerTop }, this.renderBack(), viewItem ? this.renderUpdate() : this.renderNext()), viewItem ? this.renderCancel() : null));
  }
  renderBack() {
    const { props } = this;
    const { strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.goBack, appearance: "outline-fill", width: "half", "icon-start": isRtl ? "arrow-right" : "arrow-left", ref: (node) => (this.backButtonNode = node) }, strings.general.back));
  }
  renderNext() {
    const { props } = this;
    const { strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.goNext, appearance: "solid", width: "half", iconEnd: isRtl ? "arrow-left" : "arrow-right", ref: (node) => (this.nextButtonNode = node) }, strings.general.next));
  }
  renderUpdate() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", onClick: this.goUpdate, appearance: "solid", width: "half", "icon-start": "plus-square", ref: (node) => (this.nextButtonNode = node) }, strings.general.update));
  }
  renderCancel() {
    const { props } = this;
    const { layer, layerIds, strings } = props;
    const enabled = (layer === null || layer === void 0 ? void 0 : layer.loaded) && layerIds.length;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !enabled, onClick: enabled && this.goCancel, appearance: "transparent", width: "full" }, strings.general.close));
  }
  renderInfo() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.infoDescription }, strings.general.includedLayerPanelDescription)));
  }
  renderSublayers() {
    var _a, _b;
    const { props } = this;
    const { layer, layerIds } = props;
    const listItems = [];
    if (layer.type === "group") {
      (_a = layer.tables) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
        if (layerIds.includes(lyr.layerId)) {
          listItems.unshift(this.renderSublayer(lyr));
        }
      });
      (_b = layer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
        if (layerIds.includes(lyr.layerId)) {
          listItems.unshift(this.renderSublayer(lyr));
        }
      });
    }
    else {
      listItems.push(this.renderSublayer(layer));
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { ref: (node) => (this.listNode = node) }, listItems));
  }
  renderSublayer(fl) {
    const { props } = this;
    const { strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    const viewLayerProps = getViewLayerProps(fl.layerId, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: fl.layerId, label: fl.title, description: fl.isTable ? strings.general.table : strings.general.layer, onClick: this.goDefinition.bind(this, fl.layerId), ref: (node) => {
        if (node) {
          this.listItemNodes[fl.layerId] = node;
        } // not sure why it's null sometimes
      } }, !!viewLayerProps ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: CSS$2.hasDefinitionIcon, slot: "content-end", icon: "sliders", scale: "s" })) : null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: CSS$2.definitionIcon, slot: "content-end", icon: isRtl ? "chevron-left" : "chevron-right", scale: "s" })));
  }
  renderLayerDefinition() {
    const { props, status } = this;
    const { definitionLayerId } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-definition", { key: `definition-${definitionLayerId}`, props: props, status: status, class: "calcite-match-height", onArcgisLayerViewOverViewRefresh: () => setTimeout(() => { var _a; return (_a = this.listItemNodes[definitionLayerId]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 200) }));
  }
  goDefinition(layerId) {
    const { props } = this;
    this.status = flowStatus.DEFINITION;
    props.definitionLayerId = layerId;
    this.reRender = !this.reRender;
  }
  async getLatestAdminServiceInfo() {
    this.props.adminServiceInfo = undefined;
    await getAdminServiceInfo$1(this.props, true);
    /* console.log(
      "updated view adminServiceInfo",
      this.props.adminServiceInfo?.layers?.map((lyr: any) => {
        return {
          id: lyr.id,
          name: lyr.name,
          adminLayerInfo_filter: lyr.adminLayerInfo?.viewLayerDefinition?.table?.filter?.value,
          viewDefinitionQuery: lyr.viewDefinitionQuery,
          fields: lyr.fields.map((field: any) => `${field.name} (${field.visible})`)
        };
      }),
      this.props.adminServiceInfo?.tables?.map((lyr: any) => {
        return {
          id: lyr.id,
          name: lyr.name,
          viewDefinitionQuery: lyr.viewDefinitionQuery,
          fields: lyr.fields.map((field: any) => `${field.name} (${field.visible})`)
        };
      })
    ); */
    this.reRender = !this.reRender;
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewOverview.style = arcgisLayerViewOverviewCss;

const CSS$1 = {
  flow: "flow",
  panel: "panel",
  footer: "footer",
  info: "info",
  infoHeading: "info-heading",
  infoDescription: "info-description",
  fixedListItem: "fixed-list-item"
};

const arcgisLayerViewSelectionCss = ".flow.sc-arcgis-layer-view-selection{height:100%}.panel.sc-arcgis-layer-view-selection{height:100%}.footer.sc-arcgis-layer-view-selection{width:100%}.info.sc-arcgis-layer-view-selection{display:grid;grid-template-columns:repeat(1, minmax(0px, 1fr));gap:0.5rem;pointer-events:none;padding:1rem 0.75rem}.info-heading.sc-arcgis-layer-view-selection{font-size:var(--calcite-font-size--1);line-height:1.375;color:var(--calcite-ui-text-2);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);font-weight:var(--calcite-font-weight-medium);pointer-events:none}.info-description.sc-arcgis-layer-view-selection{font-size:var(--calcite-font-size--2);line-height:1.375;color:var(--calcite-ui-text-3);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);pointer-events:none}.fixed-list-item.sc-arcgis-layer-view-selection{margin-bottom:10px}";

const ArcgisLayerViewSelection = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewStatusChange", 7);
    this.arcgisLayerViewSelectionCancel = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewSelectionCancel", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.goNext = () => {
      const { props } = this;
      const { layerIds } = props;
      this.arcgisLayerViewStatusChange.emit({
        status: flowStatus.OVERVIEW,
        layerIds
      });
    };
    this.goSwapSource = () => {
      const { props } = this;
      const { layerIds } = props;
      this.arcgisLayerViewStatusChange.emit({
        status: flowStatus.SWAP_SOURCE,
        layerIds
      });
    };
    this.onSelectionChange = () => {
      const { props, hostElement } = this;
      const { layer, strings } = props;
      const layerIds = [];
      this.listNode
        .querySelectorAll("calcite-pick-list-item")
        .forEach((item) => {
        if (item.selected) {
          layerIds.push(item.value);
        }
        if (layer.type === "group") {
          getLayersAndTables(layer).find((subLayer) => subLayer.layerId === item.value).visible = item.selected;
        }
        else {
          layer.visible = item.selected;
        }
      });
      if (layerIds.length) {
        this.props.layerIds = layerIds;
      }
      else {
        // must have at least one layer selected
        this.msgNode = document.createElement("arcgis-layer-view-msg");
        this.msgNode.props = props;
        this.msgNode.flowItemElement = this.flowItemNode;
        this.msgNode.message = strings.msg.atLeastOne;
        this.msgNode.isWarning = true;
        hostElement.appendChild(this.msgNode);
        clearTimeout(this.timeoutHndl);
        this.timeoutHndl = setTimeout(() => {
          this.timeoutHndl = undefined;
          if (this.msgNode) {
            hostElement.removeChild(this.msgNode);
            this.msgNode = undefined;
            this.reRender = !this.reRender;
          }
        }, 7000);
        // check that last list item again
        this.listNode
          .querySelectorAll("calcite-pick-list-item")
          .forEach((item) => {
          if (props.layerIds.indexOf(item.value) > -1) {
            item.selected = true;
          }
        });
      }
      this.reRender = !this.reRender;
    };
    this.props = undefined;
    this.status = undefined;
    this.reRender = false;
  }
  arcgisLayerViewMsgClosedHandler() {
    if (this.msgNode) {
      this.hostElement.removeChild(this.msgNode);
      this.msgNode = undefined;
    }
    clearTimeout(this.timeoutHndl);
    this.timeoutHndl = undefined;
    this.reRender = !this.reRender;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() { }
  async componentDidLoad() {
    const { props } = this;
    const { derivativeLayers } = props;
    if (derivativeLayers.hasAny) {
      requestAnimationFrame(() => { var _a; return (_a = this.swapButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    else {
      requestAnimationFrame(() => { var _a; return (_a = this.listNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render view-selection", propsToString(this.props), "status:", this.status);
    const { props, status } = this;
    const { viewItem, layerItem, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS$1.flow, dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: (viewItem === null || viewItem === void 0 ? void 0 : viewItem.title) || (layerItem === null || layerItem === void 0 ? void 0 : layerItem.title), description: strings.general.sourceLayer, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, ref: (node) => (this.flowItemNode = node) }, this.renderFooterButtons(), this.renderInfo(), this.renderSublayers()), [flowStatus.SWAP_SOURCE, flowStatus.BROWSE_LAYER].includes(status)
      ? this.renderSwapSource()
      : null)));
  }
  renderFooterButtons() {
    const { props } = this;
    const { layer, layerIds, viewItem, derivativeLayers, hasReplicas, strings } = props;
    const isRtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    const isVelocityView = (viewItem === null || viewItem === void 0 ? void 0 : viewItem.typeKeywords.indexOf("IoTFeatureLayer")) > -1;
    const hasSwapRights = !isVelocityView && ["admin", "update"].indexOf(viewItem === null || viewItem === void 0 ? void 0 : viewItem.itemControl) > -1;
    const nextEnabled = (layer === null || layer === void 0 ? void 0 : layer.loaded) && layerIds.length && !derivativeLayers.hasAny;
    if (hasSwapRights && derivativeLayers.hasAny) {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: "footer" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: !hasReplicas && this.goSwapSource, disabled: hasReplicas, appearance: "solid", width: "full", iconStart: "arrow-right-left", ref: (node) => (this.swapButtonNode = node) }, strings.general.swapSource), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: () => this.arcgisLayerViewSelectionCancel.emit(), appearance: "transparent", width: "full" }, strings.general.close)));
    }
    else {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: "footer" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !nextEnabled, onClick: nextEnabled && this.goNext, appearance: "solid", width: "full", iconEnd: isRtl ? "arrow-left" : "arrow-right", ref: (node) => (this.nextButtonNode = node) }, strings.general.next), hasSwapRights && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { disabled: !nextEnabled || hasReplicas, onClick: nextEnabled && !hasReplicas && this.goSwapSource, appearance: "transparent", width: "full", iconStart: "arrow-right-left", ref: (node) => (this.swapButtonNode = node) }, strings.general.swapSource)))));
    }
  }
  renderInfo() {
    const { props } = this;
    const { viewItem, derivativeLayers, hasReplicas, strings } = props;
    const hasSwapRights = ["admin", "update"].indexOf(viewItem === null || viewItem === void 0 ? void 0 : viewItem.itemControl) > -1;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info" }, derivativeLayers.hasAny ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "s", width: "full", open: true, icon: "information" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.general.derivativeLayerNotice))) : null, hasReplicas && hasSwapRights ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "s", width: "full", open: true, icon: "information" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.general.selectLayerPanelReplicaNotice))) : null, !derivativeLayers.hasAny ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.infoHeading }, strings.general.selectLayerPanelTitle), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.infoDescription }, strings.general.selectLayerPanelDescription))) : null));
  }
  renderSublayers() {
    const { props } = this;
    const { derivativeLayers } = props;
    if (derivativeLayers.hasAny) {
      return this.renderNonEditableSublayers();
    }
    else {
      return this.renderEditableSublayers();
    }
  }
  renderNonEditableSublayers() {
    var _a, _b;
    const { props } = this;
    const { layer, layerIds, strings } = props;
    const layerListItems = [];
    const tableListItems = [];
    if (layer.type === "group") {
      (_a = layer.tables) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
        if (layerIds.indexOf(lyr.layerId) > -1) {
          tableListItems.unshift(this.renderNonEditableSublayer(lyr));
        }
      });
      (_b = layer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
        if (layerIds.indexOf(lyr.layerId) > -1) {
          layerListItems.unshift(this.renderNonEditableSublayer(lyr));
        }
      });
    }
    else {
      (layer.isTable ? tableListItems : layerListItems).push(this.renderNonEditableSublayer(layer));
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.info }, layerListItems.length > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.infoHeading }, strings.general.layers)) : null, layerListItems.length > 0 ? (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", null, layerListItems) : null, tableListItems.length > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.infoHeading }, strings.general.tables)) : null, tableListItems.length > 0 ? (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", null, tableListItems) : null));
  }
  renderNonEditableSublayer(lyr) {
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { class: CSS$1.fixedListItem }, lyr.title);
  }
  renderEditableSublayers() {
    var _a, _b;
    const { props } = this;
    const { layer } = props;
    const listItems = [];
    if (layer.type === "group") {
      (_a = layer.tables) === null || _a === void 0 ? void 0 : _a.forEach((lyr) => {
        listItems.unshift(this.renderEditableSublayer(lyr));
      });
      (_b = layer.layers) === null || _b === void 0 ? void 0 : _b.forEach((lyr) => {
        listItems.unshift(this.renderEditableSublayer(lyr));
      });
    }
    else {
      listItems.push(this.renderEditableSublayer(layer));
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { multiple: true, onCalciteListChange: this.onSelectionChange, ref: (node) => (this.listNode = node) }, listItems));
  }
  renderEditableSublayer(lyr) {
    const { props } = this;
    const { layerIds, strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: lyr.layerId, label: lyr.title, value: lyr.layerId, description: lyr.isTable ? strings.general.table : strings.general.layer, selected: layerIds.indexOf(lyr.layerId) > -1 }));
  }
  renderSwapSource() {
    const { props, status } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-swap-source", {
      //key={`selection-${status}`}
      props: props, status: status, onArcgisLayerViewStatusChange: () => setTimeout(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 200)
    }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewSelection.style = arcgisLayerViewSelectionCss;

const CSS = {
  panel: "panel",
  browse: "browse",
  info: "info",
  text: "text",
  check: "check",
  checkText: "check-text",
  footerButton: "footer-button"
};

const arcgisLayerViewSwapSourceCss = ".panel.sc-arcgis-layer-view-swap-source{height:100%}.browse.sc-arcgis-layer-view-swap-source{width:100%}.info.sc-arcgis-layer-view-swap-source{margin:10px}.text.sc-arcgis-layer-view-swap-source{margin-bottom:8px}.check.sc-arcgis-layer-view-swap-source{color:green}.check-text.sc-arcgis-layer-view-swap-source{font-weight:bold}.footer-button.sc-arcgis-layer-view-swap-source{margin:0 10px 5px 10px}";

const ArcgisLayerViewSwapSource = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisLayerViewStatusChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerViewStatusChange", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onBack = () => {
      this.arcgisLayerViewStatusChange.emit({ status: flowStatus.SELECTION });
    };
    this.goBrowse = () => {
      this.arcgisLayerViewStatusChange.emit({ status: flowStatus.BROWSE_LAYER });
    };
    this.props = undefined;
    this.status = undefined;
    this.reRender = false;
    this.loading = false;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentDidLoad() {
    // requestAnimationFrame nor working the second time...
    setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 200);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    //console.log("render swap-source", propsToString(this.props), "status", this.status);
    const { props, status, loading } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { key: status, heading: strings.swapSource.title, description: strings.swapSource.subTitle, loading: loading, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_5__.C.rtl]: rtl
      }, onCalciteFlowItemBack: this.onBack, ref: (node) => (this.flowItemNode = node) }, this.renderInfo(), this.renderDerivativeInfo(), this.renderBrowse()), status === flowStatus.BROWSE_LAYER && this.renderBrowseLayer()));
  }
  renderInfo() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.info }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.text }, strings.swapSource.msg1), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.text }, strings.swapSource.msg2), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "check", class: CSS.check }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.checkText }, strings.swapSource.requirement1)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "check", class: CSS.check }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.checkText }, strings.swapSource.requirement2)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "check", class: CSS.check }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: CSS.checkText }, strings.swapSource.requirement3)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.text }, strings.swapSource.msg3)));
  }
  renderDerivativeInfo() {
    const { props } = this;
    const { derivativeLayers, strings } = props;
    if (!derivativeLayers.hasMS && !derivativeLayers.hasVTL && !derivativeLayers.hasScene) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.info }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.text }, strings.swapSource.derivativeMsg)));
  }
  renderBrowse() {
    const { props } = this;
    const { strings } = props;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.footerButton }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "arcgis-layer-view-swap-source-browse", onClick: this.goBrowse, appearance: "outline-fill", width: "full", ref: (node) => (this.browseButtonNode = node) }, strings.swapSource.browseForLayer)));
  }
  renderBrowseLayer() {
    const { props } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-layer-view-browse-layer", { props: props, class: CSS.browse, onArcgisLayerViewStatusChange: (event) => {
        if (event.detail.status === flowStatus.SWAP_SOURCE) {
          // can't make it work without using an id
          // it seems the whole component reloads from scratch after this step here
          setTimeout(() => {
            var _a;
            return (_a = document.getElementById("arcgis-layer-view-swap-source-browse")) === null || _a === void 0 ? void 0 : _a.setFocus();
          }, 400);
        }
      } }));
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerViewSwapSource.style = arcgisLayerViewSwapSourceCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
  let timeout;
  let status = "idle";
  function flush(...args) {
    status = "flushed";
    return debounced(...args);
  }
  function invoke(...args) {
    status = "invoked";
    return debounced(...args);
  }
  function cancel(...args) {
    status = "cancelled";
    return debounced(...args);
  }
  function getStatus() {
    return status;
  }
  const debounced = (...args) => new Promise((resolve) => {
    switch (status) {
      case "flushed":
        status = "idle";
        if (timeout) {
          clearTimeout(timeout);
          resolve(fn(...args));
        }
        else {
          resolve(null);
        }
        break;
      case "invoked":
        clearTimeout(timeout);
        status = "idle";
        resolve(fn(...args));
        break;
      case "cancelled":
        clearTimeout(timeout);
        status = "idle";
        resolve(null);
        break;
      default:
        if (timeout) {
          clearTimeout(timeout);
        }
        status = "pending";
        timeout = setTimeout(() => {
          status = "idle";
          return resolve(fn(...args));
        }, delay);
        break;
    }
  });
  debounced.flush = flush;
  debounced.invoke = invoke;
  debounced.cancel = cancel;
  debounced.getStatus = getStatus;
  return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
  let timeout;
  return (...args) => new Promise((resolve) => {
    if (timeout) {
      return;
    }
    timeout = setTimeout(() => {
      clearTimeout(timeout);
      timeout = undefined;
      resolve(fn(...args));
    }, delay);
  });
};
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
  return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
  await Promise.all([promise, timeout(minDelay)]);
  return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
  const { key, data } = getKeyAndItem(item);
  return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
  const resultArr = [];
  const lookupMap = {};
  myArr.forEach((item) => {
    const id = getItemId(item);
    if (lookupMap[id] == null) {
      lookupMap[id] = item;
      resultArr.push(item);
    }
  });
  return resultArr;
}
function unique(myArr) {
  const primitives = { boolean: {}, number: {}, string: {} };
  const objs = [];
  return myArr.filter((item) => {
    let type = typeof item;
    if (type in primitives) {
      return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
    }
    else {
      return objs.indexOf(item) >= 0 ? false : objs.push(item);
    }
  });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-e6412a9a.js":
/*!*********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-e6412a9a.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ itemPropertiesStore),
/* harmony export */   i: () => (/* binding */ itemPropertiesState)
/* harmony export */ });
/* harmony import */ var _index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-81d548b7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-81d548b7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */


const itemPropertiesStore = (0,_index_81d548b7_js__WEBPACK_IMPORTED_MODULE_0__.c)({
  title: "",
  snippet: "",
  tags: [],
  categories: []
});
const itemPropertiesState = itemPropertiesStore.state;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arcgisComponentNotificationsKeys),
/* harmony export */   g: () => (/* binding */ getSingleObjectLocalStorage),
/* harmony export */   l: () => (/* binding */ localStorageKeys),
/* harmony export */   s: () => (/* binding */ setSingleObjectLocalStorage)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
var localStorageKeys;
(function (localStorageKeys) {
  localStorageKeys["ARCGIS_COMPONENT_NOTIFICATIONS"] = "arcgisComponent_notifications";
})(localStorageKeys || (localStorageKeys = {}));
var arcgisComponentNotificationsKeys;
(function (arcgisComponentNotificationsKeys) {
  arcgisComponentNotificationsKeys["FEATURE_REDUCTION_WARNING_DISMISSED"] = "arcgis_feature_reduction_warning_dismissed";
  arcgisComponentNotificationsKeys["POPUP_WARNING_DISMISSED"] = "arcgis_popup_warning_dismissed";
  arcgisComponentNotificationsKeys["INCOMPATIBLE_VECTOR_SYMBOLS_DISMISSED"] = "arcgis_symbol_styler_incompatible_vector_symbols_dismissed";
  arcgisComponentNotificationsKeys["EFFECTS_TIP_DISMISSED"] = "arcgis_effects_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_DEFINITION_DISMISSED"] = "arcgis_layer_view_definition_dismissed";
  arcgisComponentNotificationsKeys["LAYER_OVERRIDE_STATUS_TIP_DISMISSED"] = "arcgis_layer_override_status_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_JOIN_TIP_DISMISSED"] = "arcgis_layer_view_join_tip_dismissed";
  arcgisComponentNotificationsKeys["MULTIDIMENSIONAL_INFO_TIP_DISMISSED"] = "arcgis_multidimensional_info_tip_dismissed";
})(arcgisComponentNotificationsKeys || (arcgisComponentNotificationsKeys = {}));
const getLocalStorage = (localStorageKey) => {
  return localStorage.getItem(localStorageKey);
};
const setLocalStorage = (localStorageKey, value) => {
  localStorage.setItem(localStorageKey, value);
};
const getObjectLocalStorage = (localStorageKey) => {
  return JSON.parse(getLocalStorage(localStorageKey)) || {};
};
const setSingleObjectLocalStorage = (localStorageKey, keyValueObject) => {
  const setLocalStorageVal = getObjectLocalStorage(localStorageKey);
  setLocalStorageVal[keyValueObject.key] = keyValueObject.value;
  setLocalStorage(localStorageKey, JSON.stringify(setLocalStorageVal));
};
const getSingleObjectLocalStorage = (localStorageKey, objectKey) => {
  const getLocalStorageVal = getObjectLocalStorage(localStorageKey);
  if (getLocalStorageVal === null || getLocalStorageVal === void 0 ? void 0 : getLocalStorageVal.hasOwnProperty(objectKey)) {
    return getLocalStorageVal[objectKey];
  }
  else {
    return null;
  }
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-8714dc6c.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-8714dc6c.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getPortalBaseUrl)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
function getPortalBaseUrl(portal) {
  const { customBaseUrl, portalHostname, urlKey } = portal;
  const { protocol } = window.location;
  const url = urlKey ? `${urlKey}.${customBaseUrl}` : portalHostname;
  return `${protocol}//${url}`;
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,