"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-787744"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-collection-explorer.entry.js":
/*!***********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-collection-explorer.entry.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_image_collection_explorer: () => (/* binding */ ArcgisImageCollectionExplorer)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./layer-ee0d645e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/layer-ee0d645e.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _functional_c82f5ab9_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-c82f5ab9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-c82f5ab9.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */








const arcgisImageCollectionExplorerCss = ":host{display:flex;flex:1 1 auto;overflow:hidden}.switch-button-wrapper{padding:0.5rem 0}.apply-button-wrapper{display:flex;justify-content:center}.image-item-preview-wrapper{width:100%;height:300px}.image-item-card-list{width:100%;padding:0;overflow-y:auto;list-style:none}.image-item-card-content-wrapper{display:flex;gap:1rem}.image-item-card-content-wrapper>img{height:70px;width:70px}.image-collection-item-card-list-header{display:flex;justify-content:space-between;align-items:center}.image-item-count-chip{display:inline-block;padding:0.375rem;border-radius:9999px;background-color:var(--calcite-ui-foreground-3)}.image-item-count-chip.selected{background-color:var(--calcite-ui-brand);color:var(--calcite-ui-text-inverse)}.image-item-card:hover{border:1px solid var(--calcite-ui-info)}.image-item-inspect-button-group{text-align:start}.image-item-select-wrapper{display:flex;align-items:center;padding:0 2rem}.image-item-select-block{padding:10px;padding-bottom:0}.image-item-card-displayed-field-list{list-style-type:none;padding:0;margin:0;word-break:break-word}.aoi-select-button{border:1px solid var(--calcite-ui-border-input)}.aoi-select-opt-wrapper{display:flex;flex-direction:column}.image-item-info-table-wrapper{display:block;overflow-x:auto}.dropdown-container{display:flex;justify-content:space-between;gap:1rem}";

const ArcgisImageCollectionExplorer = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisImageItemExplorerDismissedChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageItemExplorerDismissedChange", 7);
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.handleCloseClick = () => {
      this.arcgisImageItemExplorerDismissedChange.emit();
    };
    this.handleActiveTabChange = (activeTab) => {
      this.activeTab = activeTab;
    };
    this.handleImageItemQueryApplied = async () => {
      var _a, _b, _c, _d;
      this.isShowingFilteredImageItemResultsPane = true;
      const { view, layer, selectedAOI, activeQueryField, isOverviewsIncluded, selectedQueryFieldValues } = this;
      this.isQueryingImageItems = true;
      this.clearImageItemSelection();
      this.imageItemCardDisplayedFieldNames = [];
      const layerQuery = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.b)(layer, activeQueryField, selectedQueryFieldValues, selectedAOI, isOverviewsIncluded, view.extent);
      let imageItemCount;
      let imageItems;
      try {
        if (selectedAOI === _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.A.Visible) {
          imageItems = await (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.g)(layer, view, layerQuery);
          imageItemCount = (_b = (_a = imageItems === null || imageItems === void 0 ? void 0 : imageItems.features) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
        }
        else {
          imageItemCount = await (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.a)(layer, layerQuery);
          imageItems = await (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.c)(layer, layerQuery);
        }
        this.totalImageItemCount = imageItemCount;
      }
      catch (_e) {
        this.totalImageItemCount = 0;
        this.imageItems = null;
        // throw out error
      }
      finally {
        this.isQueryingImageItems = false;
      }
      if (!Array.isArray(imageItems === null || imageItems === void 0 ? void 0 : imageItems.features)) {
        this.imageItems = null;
        this.inspectImageItemObjectId = null;
        return;
      }
      const objectIdFieldName = layer.objectIdField;
      const firstImageItemObjectId = ((_c = this.selectedImageItemObjectIds) === null || _c === void 0 ? void 0 : _c.length) > 0
        ? this.selectedImageItemObjectIds[0]
        : (_d = imageItems.features[0]) === null || _d === void 0 ? void 0 : _d.attributes[objectIdFieldName];
      this.imageItems = imageItems;
      this.inspectImageItemObjectId = firstImageItemObjectId;
      this.handleDisplayedFieldsInImageItemCardChange(activeQueryField.name);
      this.refreshImageItemInfo(firstImageItemObjectId);
    };
    this.handleSelectedImageItemChange = (selectedImageItemObjectId) => {
      this.inspectImageItemObjectId = selectedImageItemObjectId;
      this.refreshImageItemInfo(selectedImageItemObjectId);
    };
    this.handleSelectNextImageItem = () => {
      const { selectedImageItemObjectIds, inspectImageItemObjectId, imageItems, layer } = this;
      const objectIdFieldName = layer.objectIdField;
      const inspectImageItemObjectIds = selectedImageItemObjectIds.length > 0
        ? selectedImageItemObjectIds
        : imageItems.features.map((f) => f.attributes[objectIdFieldName]);
      const currentObjectIdIndex = inspectImageItemObjectIds.findIndex((oid) => oid === inspectImageItemObjectId);
      const newObjectIdIndex = currentObjectIdIndex + 1 === inspectImageItemObjectIds.length ? 0 : currentObjectIdIndex + 1;
      const newImageItemObjectId = inspectImageItemObjectIds[newObjectIdIndex];
      this.inspectImageItemObjectId = newImageItemObjectId;
      this.refreshImageItemInfo(newImageItemObjectId);
    };
    this.handleSelectPrevImageItem = () => {
      const { selectedImageItemObjectIds, inspectImageItemObjectId, imageItems, layer } = this;
      const objectIdFieldName = layer.objectIdField;
      const inspectRasterItemObjectIds = selectedImageItemObjectIds.length > 0
        ? selectedImageItemObjectIds
        : imageItems.features.map((f) => f.attributes[objectIdFieldName]);
      const currentObjectIdIndex = inspectRasterItemObjectIds.findIndex((oid) => oid === inspectImageItemObjectId);
      const newObjectIdIndex = currentObjectIdIndex - 1 < 0
        ? inspectRasterItemObjectIds.length - 1
        : currentObjectIdIndex - 1;
      const newRasterItemObjectId = inspectRasterItemObjectIds[newObjectIdIndex];
      this.inspectImageItemObjectId = newRasterItemObjectId;
      this.refreshImageItemInfo(newRasterItemObjectId);
    };
    this.refreshImageItemInfo = async (imageItemObjectId) => {
      const { layer } = this;
      const imageItemInfo = await layer.getCatalogItemRasterInfo(imageItemObjectId);
      this.imageItemInfo = imageItemInfo;
    };
    this.handleDisplayedFieldsInImageItemCardChange = (fieldName) => {
      const { imageItemCardDisplayedFieldNames, layer, activeQueryField } = this;
      let newDisplayFieldNames = [];
      if (!imageItemCardDisplayedFieldNames.includes(fieldName)) {
        newDisplayFieldNames = [...imageItemCardDisplayedFieldNames, fieldName];
      }
      const defaultDisplayFields = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.d)(layer, activeQueryField);
      defaultDisplayFields.forEach((field) => {
        if (!newDisplayFieldNames.includes(field.name)) {
          newDisplayFieldNames.push(field.name);
        }
      });
      this.imageItemCardDisplayedFieldNames = newDisplayFieldNames;
    };
    this.handleOpenConfigResultsModal = () => {
      const { isShowingConfigResultsModal } = this;
      this.isShowingConfigResultsModal = !isShowingConfigResultsModal;
    };
    this.handleImageItemCardMouseOver = async (imageItemGeometry) => {
      const { view, imageItemExtentGraphic, imageItemExtentGraphicLayer, modules } = this;
      const { Color, Graphic, GraphicsLayer, SimpleFillSymbol } = modules;
      if (!imageItemExtentGraphicLayer) {
        const graphicsLayer = new GraphicsLayer();
        view.map.add(graphicsLayer);
        this.imageItemExtentGraphicLayer = graphicsLayer;
      }
      if (this.imageItemExtentGraphic) {
        this.imageItemExtentGraphicLayer.removeAll();
        imageItemExtentGraphic.geometry = imageItemGeometry;
        this.imageItemExtentGraphicLayer.add(imageItemExtentGraphic);
      }
      else {
        const symbol = new SimpleFillSymbol({
          outline: {
            color: new Color([214, 137, 16]),
            width: 2
          },
          color: new Color([249, 231, 159, 0.5])
        });
        const imageItemExtGraphic = new Graphic({ geometry: imageItemGeometry, symbol });
        this.imageItemExtentGraphic = imageItemExtGraphic;
        this.imageItemExtentGraphicLayer.add(imageItemExtGraphic);
      }
    };
    this.handleImageItemCardMouseOut = () => {
      var _a;
      this.imageItemExtentGraphic = null;
      (_a = this.imageItemExtentGraphicLayer) === null || _a === void 0 ? void 0 : _a.removeAll();
    };
    this.getLayerAttributeValues = async (fieldName) => {
      var _a, _b;
      const { layer, view, selectedAOI, fetchAbortController } = this;
      if (fetchAbortController) {
        fetchAbortController.abort();
      }
      let uniqueVals = [];
      try {
        this.fetchAbortController = new AbortController();
        this.isQueryingFieldValues = true;
        this.fieldValuesForInput = [];
        this.selectedQueryFieldValues = [];
        const [minValue, maxValue] = await (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.e)(layer, fieldName, selectedAOI, view.extent, (_a = this.fetchAbortController) === null || _a === void 0 ? void 0 : _a.signal);
        this.fieldMinMaxValuesForInput = [minValue, maxValue];
        uniqueVals = await (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.f)(layer, fieldName, selectedAOI, view.extent, (_b = this.fetchAbortController) === null || _b === void 0 ? void 0 : _b.signal);
        this.isQueryingFieldValues = false;
      }
      catch (err) {
        // `abort error` indicates there is another ongoing request
        this.isQueryingFieldValues = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.i)(err) ? true : false;
      }
      this.fieldValuesForInput = uniqueVals;
    };
    this.clearImageItemSelection = () => {
      this.selectedImageItemObjectIds = [];
    };
    this.showTooltip = (props) => {
      this.dismissTooltip();
      this.tooltipEl = document.createElement("calcite-tooltip");
      this.tooltipEl.placement = "auto";
      this.tooltipEl.referenceElement = props.referenceElement;
      this.tooltipEl.overlayPositioning = "fixed";
      this.tooltipEl.innerHTML = props.innerHTML;
      this.tooltipEl.open = true;
      this.hostElement.parentElement.appendChild(this.tooltipEl);
    };
    this.dismissTooltip = () => {
      var _a;
      if ((_a = this.tooltipEl) === null || _a === void 0 ? void 0 : _a.parentNode) {
        this.tooltipEl.parentNode.removeChild(this.tooltipEl);
        this.tooltipEl = undefined;
      }
    };
    this.jsapiUrl = undefined;
    this.portal = undefined;
    this.layer = undefined;
    this.view = undefined;
    this.activeTab = _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Select;
    this.activeQueryField = undefined;
    this.selectedAOI = _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.A.Visible;
    this.totalImageItemCount = 0;
    this.imageItems = undefined;
    this.selectedImageItemObjectIds = [];
    this.inspectImageItemObjectId = undefined;
    this.imageItemInfo = undefined;
    this.imageItemCardDisplayedFieldNames = [];
    this.isShowingFilteredImageItemResultsPane = false;
    this.isShowingConfigResultsModal = false;
    this.isShowingThumbnails = false;
    this.isOverviewsIncluded = false;
    this.isQueryingImageItems = false;
    this.isQueryingFieldValues = false;
    this.selectedQueryFieldValues = [];
    this.fieldValuesForInput = [];
    this.fieldMinMaxValuesForInput = [];
    this.isRangeValueModeSelected = true;
  }
  handleConfigCardResultsModalClosed() {
    this.isShowingConfigResultsModal = false;
  }
  handleConfigCardResultsModalSaved(e) {
    const { selectedFieldNames, isShowingThumbnails } = e.detail;
    this.isShowingThumbnails = isShowingThumbnails;
    this.imageItemCardDisplayedFieldNames = selectedFieldNames;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async setFocus() {
    var _a;
    (_a = this.refCloseButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    var _a;
    [this.strings] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    const [Color, IdentityManager, Graphic, GraphicsLayer, SimpleFillSymbol] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_3__.l)([
      "esri/Color",
      "esri/identity/IdentityManager",
      "esri/Graphic",
      "esri/layers/GraphicsLayer",
      "esri/symbols/SimpleFillSymbol"
    ]);
    this.modules = {
      Color,
      IdentityManager,
      Graphic,
      GraphicsLayer,
      SimpleFillSymbol
    };
    const supportedLayerFields = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.h)((_a = this.layer) === null || _a === void 0 ? void 0 : _a.fields);
    const defaultField = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.j)(supportedLayerFields);
    const selectedField = this.activeQueryField || defaultField;
    this.activeQueryField = selectedField;
    this.getLayerAttributeValues(selectedField.name);
  }
  // --------------------------------------------------------------------------
  //
  //  Render methods
  //
  // --------------------------------------------------------------------------
  render() {
    const { activeTab, strings, inspectImageItemObjectId, imageItemInfo, imageItemCardDisplayedFieldNames, isShowingFilteredImageItemResultsPane, isShowingThumbnails, layer } = this;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
    const loading = !(layer === null || layer === void 0 ? void 0 : layer.loaded);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { loading: loading, heading: strings.imageCollectionExplorer, class: {
        panel: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl]: rtl
      } }, this.renderClose(), this.renderActionGroup(), activeTab === _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Select && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderSelectInput(), isShowingFilteredImageItemResultsPane && this.renderSelectResults(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-config-image-item-card-results-modal", { open: this.isShowingConfigResultsModal, fields: layer.fields, preSelectedFieldNames: imageItemCardDisplayedFieldNames, isShowingThumbnails: isShowingThumbnails }))), activeTab === _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect &&
      (inspectImageItemObjectId && inspectImageItemObjectId > 0 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderImageItemSelectDropdown(), this.renderImageItemPreviewView(), imageItemInfo && this.renderImageItemInfoTables())) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.noSelectedItemToInspectCoachMessage))))));
  }
  renderClose() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.close, icon: "x", slot: "header-actions-end", onClick: this.handleCloseClick, ref: (node) => (this.refCloseButtonNode = node) }));
  }
  renderActionGroup() {
    const { strings, activeTab } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", { layout: "grid", scale: "l", columns: 2 }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { "data-label": _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Select, active: activeTab === _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Select, text: strings.select, textEnabled: true, alignment: "center", onClick: () => this.handleActiveTabChange(_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Select) }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { "data-label": _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect, active: activeTab === _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect, text: strings.inspect, textEnabled: true, alignment: "center", onClick: () => this.handleActiveTabChange(_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect) })));
  }
  renderSelectInput() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, heading: strings.filters, open: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderAOISelectDropdown(), this.renderAttributeSelectDropdown(), this.renderAttributeInputField(), this.renderIncludeOverviewSwitchButton(), this.renderApplyButton())));
  }
  renderAOISelectDropdown() {
    const { strings, selectedAOI } = this;
    const aoiOptions = [
      { name: _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.A.Visible, label: strings.visible, description: strings.visibleDesc },
      {
        name: _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.A.DisplayExtent,
        label: strings.displayExtent,
        description: strings.displayExtentDesc
      },
      { name: _layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.A.All, label: strings.all, description: strings.allDesc }
    ];
    const selectedAOIOpt = aoiOptions.find((opt) => opt.name === selectedAOI);
    const aoiDropdownItems = aoiOptions.map((opt) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "data-value": opt.name, selected: opt.name === selectedAOIOpt.name }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("strong", null, opt.label), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, opt.description)));
    });
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.areaOfInterest, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { width: "m", placement: "bottom", onCalciteDropdownSelect: (event) => {
        var _a, _b;
        const dropdown = event.currentTarget;
        const selectedAOIOpt = (_b = (_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getAttribute("data-value");
        this.selectedAOI = selectedAOIOpt;
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "aoi-select-button", slot: "trigger", alignment: "space-between", "icon-end": "chevron-down", appearance: "transparent", kind: "neutral", width: "full" }, selectedAOIOpt.label), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, aoiDropdownItems))));
  }
  renderAttributeSelectDropdown() {
    const { strings, activeQueryField, layer } = this;
    const supportedLayerFields = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.h)(layer === null || layer === void 0 ? void 0 : layer.fields);
    const layerAttributeOptions = supportedLayerFields.map((field) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: field.name, label: field.alias, selected: field.name === activeQueryField.name })));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.attribute, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.attribute, onCalciteSelectChange: (event) => {
        const selectedFieldName = event.currentTarget
          .selectedOption.value;
        this.activeQueryField = supportedLayerFields.find((f) => f.name === selectedFieldName);
        this.getLayerAttributeValues(selectedFieldName);
      } }, layerAttributeOptions)));
  }
  renderAttributeInputField() {
    const { activeQueryField } = this;
    const fieldType = activeQueryField.type;
    if ((0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.k)(fieldType) || fieldType === "date") {
      return this.renderAttributeSliderInput();
    }
    return this.renderAttributeDropdownInput();
  }
  renderSliderSelectedVals() {
    const { selectedQueryFieldValues, fieldMinMaxValuesForInput, activeQueryField } = this;
    const rangeVals = selectedQueryFieldValues.length > 0 ? selectedQueryFieldValues : fieldMinMaxValuesForInput;
    let startVal;
    let endVal;
    if (rangeVals.length === 2) {
      [startVal, endVal] = rangeVals;
      if (activeQueryField.type === "date") {
        startVal = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.l)(startVal);
        endVal = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.l)(endVal);
      }
      return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, `${startVal} - ${endVal}`);
    }
    if (rangeVals.length === 1) {
      [startVal] = rangeVals;
      if (activeQueryField.type === "date") {
        startVal = (0,_layer_ee0d645e_js__WEBPACK_IMPORTED_MODULE_4__.l)(startVal);
      }
      return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, `${startVal}`);
    }
    return null;
  }
  renderAttributeSliderInput() {
    var _a;
    const { strings, fieldMinMaxValuesForInput, isRangeValueModeSelected } = this;
    const validMinMaxVals = fieldMinMaxValuesForInput.filter((val) => typeof val === "number");
    const isShowingSlider = validMinMaxVals.length === 2 && validMinMaxVals[0] !== validMinMaxVals[1];
    const isShowingDropdown = validMinMaxVals.length === 2 && validMinMaxVals[0] === validMinMaxVals[1];
    if (isShowingDropdown) {
      const [value] = validMinMaxVals;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.select, onCalciteSelectChange: (event) => {
          const selectedOptValue = event.currentTarget
            .selectedOption.value;
          this.selectedQueryFieldValues = [selectedOptValue];
        } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: value.toString(), label: value.toString(), selected: ((_a = this.selectedQueryFieldValues) === null || _a === void 0 ? void 0 : _a.length) > 0 &&
          value.toString() === this.selectedQueryFieldValues[0].toString() })));
    }
    if (isShowingSlider) {
      const minVal = validMinMaxVals[0];
      const maxVal = validMinMaxVals[1];
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderRangeModeSwitchButton(), this.renderSliderSelectedVals(), isRangeValueModeSelected ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { minValue: minVal, maxValue: maxVal, min: minVal, max: maxVal, snap: true, precise: true, onCalciteSliderChange: (event) => {
          const slider = event.target;
          if (Array.isArray(slider.value)) {
            this.selectedQueryFieldValues = [slider.value[0], slider.value[1]];
          }
          else {
            this.selectedQueryFieldValues = [slider.value];
          }
        } })) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { value: validMinMaxVals[1], min: validMinMaxVals[0], max: validMinMaxVals[1], snap: true, precise: true, onCalciteSliderChange: (event) => {
          const slider = event.target;
          if (Array.isArray(slider.value)) {
            this.selectedQueryFieldValues = [slider.value[0], slider.value[1]];
          }
          else {
            this.selectedQueryFieldValues = [slider.value];
          }
        } }))));
    }
  }
  renderAttributeDropdownInput() {
    const { strings, fieldValuesForInput, isQueryingFieldValues } = this;
    const fieldValueOptions = fieldValuesForInput.map((val) => {
      var _a;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: val.toString(), label: val.toString(), selected: ((_a = this.selectedQueryFieldValues) === null || _a === void 0 ? void 0 : _a.length) > 0 &&
          val.toString() === this.selectedQueryFieldValues[0].toString() }));
    });
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.select, disabled: isQueryingFieldValues, width: "full", onCalciteSelectChange: (event) => {
        let selectedVal = event.currentTarget.selectedOption.value;
        this.selectedQueryFieldValues = [selectedVal];
      } }, fieldValueOptions));
  }
  renderRangeModeSwitchButton() {
    const { strings, isRangeValueModeSelected, fieldMinMaxValuesForInput } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "switch-button-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", scale: "m", style: { width: "100%" } }, strings.rangeMode, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "information", scale: "s", text: strings.rangeMode, ref: (node) => (this.rangeModeHelpIconActionEl = node), onMouseOver: () => this.showTooltip({
        referenceElement: this.rangeModeHelpIconActionEl,
        innerHTML: strings.rangeModelHelpMessage
      }), onMouseOut: () => this.dismissTooltip(), onClick: (event) => {
        event.stopPropagation();
      }, id: "rangeMode" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { marginInlineStart: "auto" } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: isRangeValueModeSelected, scale: "m", onCalciteSwitchChange: (event) => {
        const checked = event.target.checked;
        this.isRangeValueModeSelected = checked;
        const validMinMaxVals = fieldMinMaxValuesForInput.filter((val) => typeof val === "number");
        this.selectedQueryFieldValues = checked
          ? [validMinMaxVals[0], validMinMaxVals[1]]
          : [validMinMaxVals[0]];
      } })))));
  }
  renderIncludeOverviewSwitchButton() {
    const { strings, isOverviewsIncluded } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "include-overviews-switch-button-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", scale: "m", style: { width: "100%" } }, strings.includeOverviews, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "information", scale: "s", text: strings.includeOverviewsHelpMessage, ref: (node) => (this.isIncludeOverviewsHelpIconActionEl = node), onMouseOver: () => this.showTooltip({
        referenceElement: this.isIncludeOverviewsHelpIconActionEl,
        innerHTML: strings.includeOverviewsHelpMessage
      }), onMouseOut: () => this.dismissTooltip(), onClick: (event) => {
        event.stopPropagation();
      }, id: "includeOverviews" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { marginInlineStart: "auto" } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: isOverviewsIncluded, scale: "m", onCalciteSwitchChange: (event) => {
        const checked = event.target.checked;
        this.isOverviewsIncluded = checked;
      } })))));
  }
  renderApplyButton() {
    const { strings, isQueryingFieldValues, isQueryingImageItems } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "apply-button-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { label: strings.apply, onClick: this.handleImageItemQueryApplied, appearance: "solid", width: "half", disabled: isQueryingFieldValues || isQueryingImageItems }, strings.apply)));
  }
  renderSelectResults() {
    const { strings, isQueryingImageItems, totalImageItemCount, imageItems } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.results }, isQueryingImageItems ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading, scale: "m" })) : ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, !(totalImageItemCount > 0) && (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.emptyList), totalImageItemCount > 0 ? this.renderImageItemListButtonGroup() : null, imageItems ? this.renderImageItemCardList() : null))));
  }
  renderSelectedImageItemCount() {
    const { strings, totalImageItemCount, selectedImageItemObjectIds } = this;
    const selectedImageItemCount = selectedImageItemObjectIds.length;
    const selectedAndTotalImageCountStr = strings.selectedAndTotalImageItemCountInfo
      .replace("${totalCount}", totalImageItemCount.toString())
      .replace("${selectedCount}", selectedImageItemCount.toString());
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `image-item-count-chip ${selectedImageItemCount > 0 ? "selected" : ""}` }, selectedAndTotalImageCountStr, selectedImageItemCount > 0 && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", kind: "brand", "icon-start": "x", scale: "s", onClick: () => this.clearImageItemSelection() }))));
  }
  renderImageItemListButtonGroup() {
    const { strings, selectedImageItemObjectIds } = this;
    const hasImageSelected = selectedImageItemObjectIds.length > 0;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-collection-item-card-list-header" }, this.renderSelectedImageItemCount(), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { display: "flex" } }, hasImageSelected && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.lockItems, appearance: "transparent", "icon-start": "lock", kind: "neutral", scale: "s" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.unlockItems, appearance: "transparent", "icon-start": "unlock", kind: "neutral", scale: "s" }))), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.configureResults, appearance: "transparent", "icon-start": "sliders-horizontal", kind: "neutral", scale: "s", onClick: this.handleOpenConfigResultsModal }))));
  }
  renderImageItemCardList() {
    const { imageItems, selectedImageItemObjectIds, layer, isShowingThumbnails } = this;
    if (!(imageItems === null || imageItems === void 0 ? void 0 : imageItems.features)) {
      return null;
    }
    const objectIdFieldName = layer.objectIdField;
    const imageItemCards = imageItems.features.map((feature) => {
      const itemObjectId = feature.attributes[objectIdFieldName];
      const isItemSelected = this.selectedImageItemObjectIds.includes(itemObjectId);
      const imageItemGeometry = feature.geometry;
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { onMouseOver: () => this.handleImageItemCardMouseOver(imageItemGeometry), onMouseOut: () => this.handleImageItemCardMouseOut() }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-card", { class: "image-item-card", selectable: true, selected: isItemSelected, onCalciteCardSelect: () => {
          const newSelectedItemOIds = isItemSelected
            ? selectedImageItemObjectIds.filter((oid) => oid !== itemObjectId)
            : [...selectedImageItemObjectIds, itemObjectId];
          this.selectedImageItemObjectIds = newSelectedItemOIds.sort();
        } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-card-content-wrapper" }, isShowingThumbnails ? this.renderPreviewThumbnail(itemObjectId) : null, this.renderFeatureAttributesInImageItemCard(feature)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer-start" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer-end" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { kind: "neutral", "icon-start": "add-layer", appearance: "transparent" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { kind: "neutral", "icon-start": "lock", appearance: "transparent" })))));
    });
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: "image-item-card-list" }, imageItemCards);
  }
  renderImageItemSelectDropdown() {
    var _a;
    const { strings, layer, imageItems, inspectImageItemObjectId, selectedImageItemObjectIds } = this;
    const objectIdFieldName = layer.objectIdField;
    const imageItemFeatures = selectedImageItemObjectIds.length > 0
      ? imageItems === null || imageItems === void 0 ? void 0 : imageItems.features.filter((f) => selectedImageItemObjectIds.includes(f.attributes[objectIdFieldName])).map((f) => f.attributes)
      : (_a = imageItems === null || imageItems === void 0 ? void 0 : imageItems.features.map((f) => f.attributes)) !== null && _a !== void 0 ? _a : [];
    const imageItemOptions = imageItemFeatures.map((f) => ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: f[objectIdFieldName].toString(), label: `${f[objectIdFieldName]}: ${f.Name}`, selected: f[objectIdFieldName] === inspectImageItemObjectId })));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-select-block" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.selectedImages, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-select-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-left", onClick: this.handleSelectPrevImageItem }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", label: strings.selectedImages, onCalciteSelectChange: (event) => {
        const selectedImageItemObjectId = event.currentTarget
          .selectedOption.value;
        this.handleSelectedImageItemChange(Number(selectedImageItemObjectId));
      } }, imageItemOptions), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-right", onClick: this.handleSelectNextImageItem })))));
  }
  renderImageItemPreviewView() {
    const { strings, layer, jsapiUrl, inspectImageItemObjectId } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.preview }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-preview-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-preview", { jsapiUrl: jsapiUrl, previewLayerUrl: layer.url, previewImageItemObjectId: inspectImageItemObjectId }))));
  }
  renderImageItemInfoTables() {
    const { imageItemInfo } = this;
    const { extent, statistics } = imageItemInfo || {};
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, imageItemInfo ? this.renderImageItemInspectButtonGroup() : null, imageItemInfo ? this.renderImageItemRasterInformationTable() : null, imageItemInfo ? this.renderImageItemRasterMetadataTable() : null, extent ? this.renderImageItemExtentInfoTable() : null, imageItemInfo ? this.renderImageItemSpatialReferenceTable() : null, statistics ? this.renderImageItemStatisticsInfoTable() : null));
  }
  renderImageItemRasterInformationTable() {
    const { strings, imageItemInfo } = this;
    const tableColumns = [
      { accessor: "property", header: strings.property },
      { accessor: "value", header: strings.value }
    ];
    const { bandCount, height, width, pixelType, pixelSize, dataType, colormap } = imageItemInfo;
    const rasterInfoData = [
      { property: strings.columns, value: width },
      { property: strings.rows, value: height },
      { property: strings.bandNumber, value: bandCount },
      { property: strings.cellSizeX, value: pixelSize === null || pixelSize === void 0 ? void 0 : pixelSize.x },
      { property: strings.cellSizeY, value: pixelSize === null || pixelSize === void 0 ? void 0 : pixelSize.y },
      { property: strings.sourceType, value: dataType },
      { property: strings.pixelType, value: pixelType },
      { property: strings.pixelDepth, value: bandCount },
      { property: strings.colormap, value: colormap }
    ].filter((info) => !!info.value);
    const hasRasterInfoData = rasterInfoData.length > 0;
    return (hasRasterInfoData && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.rasterInformation }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: rasterInfoData })))));
  }
  renderImageItemRasterMetadataTable() {
    const { strings, imageItemInfo } = this;
    const tableColumns = [
      { accessor: "property", header: strings.property },
      { accessor: "value", header: strings.value }
    ];
    const { SensorName, ProductName, CloudCover, AcquisitionDate, SunAzimuth, SunElevation, ELLIPSOID } = imageItemInfo.keyProperties || {};
    const formattedDate = AcquisitionDate
      ? `${new Date(AcquisitionDate).toLocaleDateString()} ${new Date(AcquisitionDate).toLocaleTimeString()}`
      : null;
    const rasterMetaData = [
      { property: strings.sensorName, value: SensorName },
      { property: strings.productName, value: ProductName },
      { property: strings.acquisitionDate, value: formattedDate },
      { property: strings.cloudCover, value: CloudCover },
      { property: strings.sunAzimuth, value: SunAzimuth },
      { property: strings.sunElevation, value: SunElevation },
      { property: strings.spheroid, value: ELLIPSOID }
    ].filter((info) => !!info.value);
    const hasRasterMetaData = rasterMetaData.length > 0;
    return (hasRasterMetaData && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.rasterMetadata }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: rasterMetaData })))));
  }
  renderImageItemExtentInfoTable() {
    const { strings, imageItemInfo } = this;
    const tableColumns = [
      { accessor: "property", header: strings.property },
      { accessor: "value", header: strings.value }
    ];
    const { extent } = imageItemInfo;
    const { xmin, xmax, ymin, ymax } = extent;
    const rasterExtentData = [
      { property: strings.top, value: ymax },
      { property: strings.bottom, value: ymin },
      { property: strings.left, value: xmin },
      { property: strings.right, value: xmax }
    ].filter((info) => !!info.value);
    const hasRasterExtentData = rasterExtentData.length > 0;
    return (hasRasterExtentData && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.extent }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: rasterExtentData }))));
  }
  renderImageItemStatisticsInfoTable() {
    const { strings, imageItemInfo } = this;
    const tableColumns = [
      { accessor: "bandName", header: strings.bandName },
      { accessor: "min", header: strings.min },
      { accessor: "max", header: strings.max },
      { accessor: "avg", header: strings.mean },
      { accessor: "stddev", header: strings.std }
    ];
    const { bandInfos, statistics } = imageItemInfo;
    const bandStatsData = bandInfos.map((bandInfo, index) => {
      const bandStats = statistics[index];
      return Object.assign({ bandName: bandInfo.name }, bandStats);
    });
    const hasBandStatsData = bandStatsData.length > 0;
    return (hasBandStatsData && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.statistics }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: bandStatsData })))));
  }
  renderImageItemSpatialReferenceTable() {
    const { strings, imageItemInfo } = this;
    const tableColumns = [
      { accessor: "property", header: strings.property },
      { accessor: "value", header: strings.value }
    ];
    const { keyProperties, spatialReference } = imageItemInfo;
    const spatialReferenceData = [
      { property: strings.projectedCoordinateSystem, value: "" },
      { property: strings.projection, value: "" },
      { property: strings.wkid, value: spatialReference === null || spatialReference === void 0 ? void 0 : spatialReference.wkid },
      { property: strings.datum, value: keyProperties === null || keyProperties === void 0 ? void 0 : keyProperties.DATUM },
      { property: strings.spheroid, value: keyProperties === null || keyProperties === void 0 ? void 0 : keyProperties.ELLIPSOID }
    ].filter((info) => !!info.value);
    const hasValidSpatialReferenceData = spatialReferenceData.length > 0;
    return (hasValidSpatialReferenceData && ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.spatialReference }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: spatialReferenceData })))));
  }
  renderImageItemInspectButtonGroup() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-inspect-button-group" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.addLayer, appearance: "transparent", "icon-start": "add-layer", kind: "neutral", scale: "s" }), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.zoomToItem, appearance: "transparent", "icon-start": "layer-zoom-to", kind: "neutral", scale: "s" })));
  }
  renderPreviewThumbnail(imageItemObjectId) {
    const { layer, modules } = this;
    const { IdentityManager } = modules;
    const layerCredential = IdentityManager.findCredential(layer.url);
    const { token } = layerCredential || {};
    const thumbnailImgSrcStr = `${layer.url}/${imageItemObjectId}/thumbnail${token ? `?token=${token}` : ""}`;
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { slot: "thumbnail", src: thumbnailImgSrcStr });
  }
  renderFeatureAttributesInImageItemCard(feature) {
    const { imageItemCardDisplayedFieldNames } = this;
    const displayedAttributesList = imageItemCardDisplayedFieldNames.map((field) => {
      return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("strong", null, field), `: ${feature.attributes[field]}`));
    });
    return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: "image-item-card-displayed-field-list" }, displayedAttributesList);
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisImageCollectionExplorer.style = arcgisImageCollectionExplorerCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



const languageMap = new Map([
  ["ar", "ar"],
  ["bg", "bg"],
  ["bs", "bs"],
  ["ca", "ca"],
  ["cs", "cs"],
  ["da", "da"],
  ["de", "de"],
  ["el", "el"],
  ["en", "en"],
  ["es", "es"],
  ["et", "et"],
  ["fi", "fi"],
  ["fr", "fr"],
  ["he", "he"],
  ["hr", "hr"],
  ["hu", "hu"],
  ["id", "id"],
  ["it", "it"],
  ["ja", "ja"],
  ["ko", "ko"],
  ["lt", "lt"],
  ["lv", "lv"],
  ["nb", "nb"],
  ["nl", "nl"],
  ["pl", "pl"],
  ["pt-br", "pt-BR"],
  ["pt-pt", "pt-PT"],
  ["ro", "ro"],
  ["ru", "ru"],
  ["sk", "sk"],
  ["sl", "sl"],
  ["sr", "sr"],
  ["sv", "sv"],
  ["th", "th"],
  ["tr", "tr"],
  ["uk", "uk"],
  ["vi", "vi"],
  ["zh-cn", "zh-CN"],
  ["zh-hk", "zh-HK"],
  ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
  return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
  const closestWithProp = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
  return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
  rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
  const { api, type, places } = options || {};
  if (api === 4) {
    const [intl] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
    const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
      places,
      style: type,
      digitSeparator: true
    });
    return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
  }
  const [dojoNumber] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
  return dojoNumber.format(number, {
    type,
    places,
    pattern: options === null || options === void 0 ? void 0 : options.pattern
  });
}
const cache = {};
function formatDate(date) {
  const lang = document.documentElement.lang;
  const dayShortMonthYear = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  if (!cache[lang]) {
    cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
  }
  return cache[lang].format(date);
}




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,