"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_data-s-fd83b7"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/data-store-e8b5ce2f.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/data-store-e8b5ce2f.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createHdfsProviderDataObject),
/* harmony export */   b: () => (/* binding */ createHiveProviderDataObject),
/* harmony export */   c: () => (/* binding */ createFileShareProviderDataObject),
/* harmony export */   d: () => (/* binding */ createCloudProviderDataObject),
/* harmony export */   e: () => (/* binding */ createFolderDataObject),
/* harmony export */   f: () => (/* binding */ createDatabaseDataObject),
/* harmony export */   g: () => (/* binding */ getConnectionString),
/* harmony export */   h: () => (/* binding */ createNoSqlDataObject),
/* harmony export */   i: () => (/* binding */ isArcGISEnterpriseOnKubernetes),
/* harmony export */   j: () => (/* binding */ getBdfsParameterItem),
/* harmony export */   k: () => (/* binding */ getPublishingToolsUrl),
/* harmony export */   l: () => (/* binding */ createBigQueryDataObject),
/* harmony export */   m: () => (/* binding */ createSnowflakeDataObject)
/* harmony export */ });
/* harmony import */ var _portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-79caaeff.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-79caaeff.js");
/* harmony import */ var _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-eb5f7dc2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-eb5f7dc2.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */



function createFolderDataObject(item, title) {
  const datastorePayload = {
    type: "folder",
    path: `/fileShares/${title}`,
    info: {
      datastoreConnectionType: "shared",
      path: item.publisherFolderPath,
      hostName: item.publisherFolderPathHostname
    }
  };
  if (item.allowServicesRestart) {
    datastorePayload.allowServicesRestart = true;
    datastorePayload.options = JSON.stringify({ allowServicesRestart: true });
  }
  if (item.serverFolderPath === "newPath") {
    datastorePayload.clientPath = item.publisherFolderPath;
    datastorePayload.info.path = item.newServerFolderPath;
    datastorePayload.info.datastoreConnectionType = "replicated";
  }
  else if (item.serverFolderPath === "nfsHostAndPath") {
    datastorePayload.clientPath = item.publisherFolderPath;
    datastorePayload.provider = "UserManaged";
    datastorePayload.info.datastoreConnectionType = "replicated";
    datastorePayload.info.fileServerPath = item.nfsSharePath;
    datastorePayload.info.fileServerHost = item.nfsHostName;
    datastorePayload.info.fileServerType = "nfs";
  }
  return datastorePayload;
}
function createDatabaseDataObject(item, title) {
  const datastorePayload = {
    type: "egdb",
    path: "/enterpriseDatabases/" + title,
    info: {
      dataStoreConnectionType: "shared"
    }
  };
  if (item.serverDatabaseOption === "newConnection") {
    datastorePayload.info.connectionString = item.serverConnectionString;
    datastorePayload.info.clientConnectionString = item.publisherConnectionString;
    datastorePayload.info.dataStoreConnectionType = "replicated";
  }
  else if (item.databaseProvider === "bigQuery" || item.databaseProvider === "snowflake") {
    datastorePayload.info.JDBCConnection = item.jdbcConnection;
  }
  else {
    datastorePayload.info.connectionString = item.publisherConnectionString;
  }
  return datastorePayload;
}
const createBigQueryDataObject = async (projectId, defaultDataset, keyFileContents, refreshToken) => {
  let jdbcConnection, keyFileFormatted;
  if ((keyFileContents === null || keyFileContents === void 0 ? void 0 : keyFileContents.length) > 0) {
    try {
      keyFileFormatted = JSON.parse(keyFileContents);
    }
    catch (_a) {
      return { error: { code: "invalidJSON" } };
    }
    jdbcConnection = createBigQueryDataObjectForServiceAuthentication(projectId, keyFileFormatted);
  }
  else if ((refreshToken === null || refreshToken === void 0 ? void 0 : refreshToken.length) > 0) {
    jdbcConnection = createBigQueryDataObjectForUserAuthentication(projectId, defaultDataset, refreshToken);
  }
  const dataStorePayload = {
    type: "egdb",
    path: "/enterpriseDatabases/bigQuerySvrDevDataJdbc",
    id: null,
    clientPath: null,
    info: {
      JDBCConnection: jdbcConnection
    }
  };
  return { result: dataStorePayload };
};
function createBigQueryDataObjectForUserAuthentication(projectId, defaultDataset, refreshToken) {
  const JDBCConnectionObject = {
    name: "BigqueryArcgisPlatform_RefreshToken",
    className: "com.esri.sds.bigquery.jdbc.GBQDataSource",
    oAuthType: 2,
    projectId,
    defaultDataset,
    url: "jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443",
    oAuthRefreshToken: refreshToken
  };
  return JDBCConnectionObject;
}
function createBigQueryDataObjectForServiceAuthentication(projectId, keyFileContents) {
  const { type, project_id, private_key_id, private_key, client_email, client_id, auth_uri, token_uri, auth_provider_x509_cert_url, client_x509_cert_url } = keyFileContents;
  const JDBCConnectionObject = {
    oAuthType: 0,
    projectId,
    url: "jdbc:bigquery://https://www.googleapis.com/bigquery/v2:443",
    oAuthPvtKeyFile: {
      type,
      project_id,
      private_key_id,
      private_key,
      client_email,
      client_id,
      auth_uri,
      token_uri,
      auth_provider_x509_cert_url,
      client_x509_cert_url
    }
  };
  return JDBCConnectionObject;
}
function createSnowflakeDataObject(args) {
  const { user, password, database, role, server, warehouse, schema } = args;
  const dataStorePayload = {
    path: "/enterpriseDatabases/snowflakeJdbc",
    type: "egdb",
    info: {
      JDBCConnection: {
        user,
        password,
        database,
        role,
        connectionUrl: `jdbc:snowflake://${server}`,
        warehouse,
        schema
      }
    }
  };
  return dataStorePayload;
}
function createNoSqlDataObject(item, title) {
  if (item.noSqlProvider === "Arango") {
    const data = {
      type: "nosql",
      path: "/nosqlDatabases/Arango_enterprise",
      info: {
        systemManaged: false,
        dsFeature: "graphStore",
        isManagedData: false,
        category: "database",
        factory: "nosql",
        provider: "ArangoDB",
        implementation: "ArangoDB",
        purposes: ["knowledge-graph"],
        connectionProperties: {
          hosts: [],
          useSsl: item.useSsl,
          username: item.username,
          password: item.password,
          database: item.database
        }
      }
    };
    if (item.hosts !== "") {
      data.info.connectionProperties.hosts = item.hosts.split(",");
    }
    else {
      delete data.info.connectionProperties.hosts;
    }
    return data;
  }
  const data = {
    type: "nosql",
    path: `/nosqlDatabases/${title}`,
    info: {
      provider: "Neo4J",
      isManaged: false,
      dsFeature: "graphStore",
      factory: "nosql",
      implementation: "Neo4j",
      category: "database",
      systemManaged: false,
      isManagedData: false,
      purposes: ["knowledge-graph"],
      connectionProperties: {
        connectionUri: item.connectionUri,
        username: item.username,
        password: item.password,
        database: item.database,
        fallbackServerAddresses: []
      }
    }
  };
  if (item.fallBackServers !== "") {
    data.info.connectionProperties.fallbackServerAddresses.push(item.fallBackServers.split(","));
  }
  else {
    delete data.info.connectionProperties.fallbackServerAddresses;
  }
  return data;
}
function createCloudProviderDataObject(item, title) {
  const provider = item.addDataStoreType === "bdfs" ? item.bdfsCloudProvider : item.provider;
  const datastorePayload = {
    info: {}
  };
  const datastoreConnection = {};
  datastoreConnection.credentialType = "accesskey";
  if (provider === "amazon") {
    if (item.credentialType === "accessKey") {
      datastoreConnection.accessKeyId = item.accessKey;
      datastoreConnection.secretAccessKey = item.secretKey;
    }
    else {
      datastoreConnection.credentialType = item.credentialType;
    }
    if (item.selectedRegion.id === "custom") {
      datastoreConnection.regionEndpointUrl = item.storageURL;
    }
    else {
      datastoreConnection.regionEndpointUrl = getRegionEndpointURL(item.regions, item.selectedRegion);
      datastoreConnection.region = item.selectedRegion.id;
    }
    datastorePayload.info.objectStore = item.bucketName;
    datastorePayload.provider = "amazon";
  }
  if (provider === "google") {
    datastoreConnection.accessKeyId = item.accessKey;
    datastoreConnection.secretAccessKey = item.secretKey;
    datastoreConnection.regionEndpointUrl = "https://storage.googleapis.com";
    datastorePayload.info.objectStore = item.bucketName;
    datastorePayload.provider = "Google";
  }
  if (provider === "azure") {
    if (item.azureAuthenticationType === "sharedKey") {
      datastoreConnection.credentialType = "accessKey";
      datastoreConnection.accountKey = item.accountKey;
    }
    else if (item.azureAuthenticationType === "activeDirectory") {
      datastoreConnection.credentialType = item.azureIdentityType;
      if (item.azureIdentityType === "servicePrincipal") {
        datastoreConnection.tenantId = item.tenantId;
        datastoreConnection.clientId = item.clientId;
        datastoreConnection.clientSecret = item.clientSecret;
      }
      else if (item.azureIdentityType === "userAssignedIdentity") {
        datastoreConnection.managedIdentityClientId = item.clientId;
      }
    }
    else if (item.azureAuthenticationType === "sasToken") {
      datastoreConnection.credentialType = item.azureAuthenticationType;
      datastoreConnection.sasToken = item.token;
    }
    else if (item.azureAuthenticationType === "anonymous") {
      datastoreConnection.credentialType = item.azureAuthenticationType;
    }
    if (item.environment.id === "other" || item.azureAuthenticationType === "anonymous") {
      datastoreConnection.regionEndpointURL = item.endpoint;
    }
    else {
      datastoreConnection.accountEndpoint = getRegionEndpointURL(item.regions, item.environment);
    }
    datastoreConnection.accountName = item.accountName;
    datastorePayload.info.objectStore = item.containerName;
    datastorePayload.provider = "azure";
  }
  if (provider === "azuredatalakegen2store") {
    if (item.environment.id === "other") {
      datastoreConnection.regionEndpointURL = item.endpoint;
    }
    else {
      datastoreConnection.accountEndpoint = getRegionEndpointURL(item.regions, item.environment);
    }
    datastoreConnection.credentialType = "accessKey";
    datastoreConnection.accountKey = item.accountKey;
    datastorePayload.info.folder = item.cloudFolder ? `${item.containerName}/${item.cloudFolder}` : item.containerName;
    datastoreConnection.accountName = item.accountName;
    datastorePayload.provider = "azureDataLakeStore";
  }
  if (provider === "alibaba") {
    datastoreConnection.accessKeyId = item.accessKey;
    datastoreConnection.secretAccessKey = item.secretKey;
    datastorePayload.info.objectStore = item.bucketName;
    datastorePayload.provider = "Alibaba";
    datastoreConnection.regionEndpointUrl =
      item.selectedRegion.id === "custom" ? item.storageURL : getRegionEndpointURL(item.regions, item.selectedRegion);
  }
  datastoreConnection.defaultEndpointsProtocol = "https";
  if (item.cloudFolder && provider !== "azuredatalakegen2store") {
    datastorePayload.info.objectStore = datastorePayload.info.objectStore + "/" + item.cloudFolder;
  }
  datastorePayload.type = "cloudStore";
  datastorePayload.path = "/cloudStores/" + title;
  datastorePayload.info.connectionString = JSON.stringify(datastoreConnection);
  return datastorePayload;
}
function createFileShareProviderDataObject(item, title) {
  return {
    type: "bigDataFileShare",
    path: `/bigDataFileShares/${title}`,
    info: {
      connectionString: JSON.stringify({ path: item.bdfsFilesharePath }),
      connectionType: "fileShare"
    }
  };
}
function createHdfsProviderDataObject(item, title) {
  return {
    type: "bigDataFileShare",
    path: `/bigDataFileShares/${title}`,
    info: {
      connectionString: JSON.stringify({ path: item.bdfsHdfsPath, username: item.bdfsHdfsUsername }),
      connectionType: "hdfs"
    }
  };
}
function createHiveProviderDataObject(item, title) {
  const datastorePayload = {
    type: "bigDataFileShare",
    path: "/bigDataFileShares/" + title,
    info: {
      connectionString: "",
      connectionType: "hive"
    }
  };
  const useNonDefaultDatabase = item.useNonDefaultDatabase;
  datastorePayload.info.connectionString = JSON.stringify({
    metaStoreUris: item.metastoreUris,
    database: useNonDefaultDatabase ? item.nonDefaultDatabaseName || "default" : "default"
  });
  return datastorePayload;
}
function getBdfsParameterItem(title, path) {
  return JSON.stringify({
    info: {
      connectionString: JSON.stringify({ path: path }),
      connectionType: "dataStore"
    },
    path: `/bigDataFileShares/${title}`,
    type: "bigDataFileShare"
  });
}
function getRegionEndpointURL(regionOptions, regionValue) {
  let resultRegionURL;
  regionOptions.forEach(function (regionItem) {
    if (regionItem.id === regionValue.id) {
      resultRegionURL = regionItem.blobStoreEndpoint || regionItem.storageEndpointSuffix;
    }
  });
  return resultRegionURL;
}
const getConnectionString = async (jobResults, publishingToolsUrl) => {
  const paramUrl = jobResults.results.out_connectionString.paramUrl;
  const jobId = jobResults.jobId;
  const url = `${publishingToolsUrl}/Get%20Database%20Connection%20String/jobs/${jobId}/${paramUrl}`;
  const response = await (0,_portal_79caaeff_js__WEBPACK_IMPORTED_MODULE_0__.r)(url);
  return processConnectionString(response);
};
const processConnectionString = (result) => {
  const string = result.value;
  const connectionStringProps = parseConnectionString(string);
  return { connectionStringProps: connectionStringProps, connectionString: string };
};
const parseConnectionString = (connectionString) => {
  let connectionStringArray = [];
  if (connectionString) {
    connectionString.split(";").forEach((propString) => {
      const pair = propString.split("=");
      if (pair.length === 2 && !doesKeyExist(connectionStringArray, pair[0])) {
        connectionStringArray.push({ key: pair[0], value: pair[1] });
      }
    });
  }
  return connectionStringArray;
};
const doesKeyExist = (connectionStringArray, key) => {
  return connectionStringArray.some((prop) => {
    return prop.key === key;
  });
};
const isArcGISEnterpriseOnKubernetes = () => {
  const portal = _config_eb5f7dc2_js__WEBPACK_IMPORTED_MODULE_1__.c.portal;
  return portal.isPortal && portal.portalDeploymentType === "ArcGISEnterpriseOnKubernetes";
};
const getPublishingToolsUrl = (hostingServerUrl) => {
  if (!hostingServerUrl) {
    return "";
  }
  const publishingToolsEndpoint = "PublishingTools";
  return `${hostingServerUrl}/rest/services/System/${publishingToolsEndpoint}/GPServer`;
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,