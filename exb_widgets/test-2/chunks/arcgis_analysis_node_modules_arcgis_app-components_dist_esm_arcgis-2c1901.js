"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-2c1901"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-effects_2.entry.js":
/*!*******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-effects_2.entry.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_effects: () => (/* binding */ ArcgisEffects),
/* harmony export */   arcgis_effects_popovers: () => (/* binding */ ArcgisEffectsPopovers)
/* harmony export */ });
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/* harmony import */ var _locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-13e00a75.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonFunctions-5262b094.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-5262b094.js");
/* harmony import */ var _loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-aaf30bd6.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-aaf30bd6.js");
/* harmony import */ var _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./localStorage-f63100ef.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js");
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _commonEnums_f98a323c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commonEnums-f98a323c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-f98a323c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */









const CSS$1 = {
  flow: "flow",
  panel: "panel",
  notice: "notice",
  hint: "hint",
  basemapType: "basemap-type",
  radioButtons: "radio-buttons",
  switch: "switch",
  list: "list",
  effectThumb: "effect-thumb",
  effectThumbImg: "effect-thumb-img",
  effectCount: "effect-count"
};

/**
 * Returns true if the value is defined
 * @param value - value to check
 */
function isDefined(value) {
  return value !== undefined && value !== null;
}

let allLayerEffectTypes = [
  "bloom",
  "dropShadow",
  "blur",
  "brightnessContrast",
  "grayscale",
  "hueRotate",
  "saturate",
  "invert",
  "sepia"
];
let allLightFeatureEffectTypes = [
  "dropShadow_gray",
  "strongDropShadow",
  "dropShadow_transparency",
  "dropShadow_blur",
  "mutedBlur",
  "mutedGray"
];
let allDarkFeatureEffectTypes = ["bloom_gray", "bloom_blur", "bloom_transparency", "mutedBlur", "mutedGray"];
/* Neutral values :
bloom - (0,0,0)
blur - 0
brightness - 100%
contrast - 100%
dropshadow - 0,0,0,black
grayscale - 0%
hue-rotate - 0
invert - 0%
opacity - 100%
saturate - 100%
sepia - 0%
*/
// all applicable values stored as pt (not px)
const layerEffectDefaults = {
  bloom: { strength: 2, radius: 0.75, threshold: 0.1 },
  dropShadow: {
    line: { color: [0, 0, 0, 255], xoffset: 0.75, yoffset: 0.75, blurRadius: 1.125 },
    point: { color: [0, 0, 0, 255], xoffset: 1.125, yoffset: 1.125, blurRadius: 1.875 },
    polygon: { color: [0, 0, 0, 255], xoffset: 1.125, yoffset: 1.125, blurRadius: 2.25 }
  },
  blur: { radius: 1.5 },
  brightness: { amount: 1.5 },
  contrast: { amount: 2 },
  grayscale: { amount: 1 },
  hueRotate: { angle: 100 },
  saturate: { amount: 1 },
  invert: { amount: 1 },
  sepia: { amount: 0.7 }
};
const lastLayerEffectValues = JSON.parse(JSON.stringify(layerEffectDefaults));
// all applicable values stored as pt (not px)
// Drop Shadow + Gray: dropshadow (2/2/3px RGB 50,50,50) for active, 100% greyscale + 50% transparency for mute
// Strong Drop Shadow: dropshadow (4/4/4px, Hex#000000) for active, nothing on mute
// Drop Shadow + Transparency: dropshadow (2/2/6px, RGB 50,50,50) for active, 65% transparency for mute
// Drop Shadow + Blur: dropshadow (2/2/3px RGB 50,50,50) for active, 3px blur + 50% transparency for mute
// Bloom + Gray: Bloom (1.3/0.75/0) for active, Greyscale 100% + 50% opacity for mute
// Bloom + Blur:: Bloom (1.3/0.75/0) for active, 3px blur + 50% transparency for mute
// Bloom + Transparency: Bloom (1.3/0.75/0) for active, 65% opacity for mute
// Muted Blur: nothing for active, 3px blur + 50% transparency for mute
// Muted Grayscale: nothing for active, 100% greyscale + 50% transparency for mute-
const featureEffectDefaults = {
  dropShadow_gray: {
    included: [{ type: "drop-shadow", color: [50, 50, 50, 255], xoffset: 1.5, yoffset: 1.5, blurRadius: 2.25 }],
    excluded: [
      { type: "grayscale", amount: 1 },
      { type: "opacity", amount: 0.5 }
    ]
  },
  strongDropShadow: {
    included: [{ type: "drop-shadow", color: [0, 0, 0, 255], xoffset: 3, yoffset: 3, blurRadius: 3 }],
    excluded: []
  },
  dropShadow_transparency: {
    included: [{ type: "drop-shadow", color: [50, 50, 50, 255], xoffset: 1.5, yoffset: 1.5, blurRadius: 4.5 }],
    excluded: [{ type: "opacity", amount: 0.35 }]
  },
  dropShadow_blur: {
    included: [{ type: "drop-shadow", color: [50, 50, 50, 255], xoffset: 1.5, yoffset: 1.5, blurRadius: 2.25 }],
    excluded: [
      { type: "blur", radius: 2.25 },
      { type: "opacity", amount: 0.5 }
    ]
  },
  bloom_gray: {
    included: [{ type: "bloom", strength: 1.3, radius: 0.6, threshold: 0 }],
    excluded: [
      { type: "grayscale", amount: 1 },
      { type: "opacity", amount: 0.5 }
    ]
  },
  bloom_blur: {
    included: [{ type: "bloom", strength: 1.3, radius: 0.6, threshold: 0 }],
    excluded: [
      { type: "blur", radius: 2.25 },
      { type: "opacity", amount: 0.5 }
    ]
  },
  bloom_transparency: {
    included: [{ type: "bloom", strength: 1.3, radius: 0.6, threshold: 0 }],
    excluded: [{ type: "opacity", amount: 0.35 }]
  },
  mutedBlur: {
    included: [],
    excluded: [
      { type: "blur", radius: 2.25 },
      { type: "opacity", amount: 0.5 }
    ]
  },
  mutedGray: {
    included: [],
    excluded: [
      { type: "grayscale", amount: 1 },
      { type: "opacity", amount: 0.5 }
    ]
  }
};
function buildEffectsInfo(node, popovers /* HTMLArcgisEffectsPopoversElement[] */, props) {
  const parts = Array.from(node.children)
    .filter((child) => {
    if (child.tagName.toLowerCase() === "calcite-value-list-item") {
      const itemNode = child;
      const switchNode = itemNode.querySelector("calcite-switch");
      return switchNode.checked;
    }
    return false;
  })
    .map((child) => buildEffectInfo(child, popovers, props));
  let effectsString = "";
  let effects;
  let connector = "";
  parts.forEach((part) => {
    if (part && typeof part === "string") {
      if (!effects) {
        effectsString += connector + part;
      }
      else {
        effects.forEach((item) => {
          item.value += connector + part;
        });
      }
    }
    else if (part && typeof part === "object") {
      if (!effects) {
        effects = part;
        effects.forEach((item) => {
          item.value = effectsString + connector + item.value;
        });
      }
      else {
        effects.forEach((item) => {
          Array.from(part)
            .filter((newItem) => item.scale === newItem.scale)
            .forEach((newItem) => (item.value += connector + newItem.value));
        });
      }
    }
    connector = " ";
  });
  if (effects) {
    return effects;
  }
  return effectsString;
}
function parseEffects(props) {
  const { layer, modules, supportsFeatureEffects } = props;
  const anyLayer = layer;
  if (anyLayer.effect && anyLayer.featureEffect) {
    throw new Error("unsupported effect");
  }
  else if (anyLayer.featureEffect && !supportsFeatureEffects) {
    throw new Error("unsupported effect");
  }
  else if (anyLayer.effect) {
    // layer effect
    const effect = anyLayer.effect;
    if (typeof effect === "string") {
      //console.log("EffectJSON", modules.effectsUtils.toJSON(effect));
      return modules.effectsUtils.toJSON(effect);
    }
    else if (effect.length === 3) {
      if (minimalAutoCheckOK(effect)) {
        //console.log("EffectJSON", modules.effectsUtils.toJSON(effect[1].value));
        //console.log("EffectPropertyAPI", modules.effectsUtils.fromJSON(modules.effectsUtils.toJSON(effect[1].value)));
        return modules.effectsUtils.toJSON(effect[1].value);
      }
      else {
        throw new Error("unsupported effect");
      }
    }
    else {
      throw new Error("unsupported effect");
    }
  }
  else if (anyLayer.featureEffect) {
    // feature effect
    const effect = anyLayer.featureEffect;
    if (effect.excludedLabelsVisible &&
      (!effect.includedEffect || typeof effect.includedEffect === "string") &&
      (!effect.excludedEffect || typeof effect.excludedEffect === "string") &&
      (!effect.filter || !effect.filter.geometry)) {
      const included = effect.includedEffect ? modules.effectsUtils.toJSON(effect.includedEffect) : [];
      const excluded = effect.excludedEffect ? modules.effectsUtils.toJSON(effect.excludedEffect) : [];
      //console.log("parsed feature effect - included:", included, "excluded:", excluded, "where:", effect.filter.where);
      let key;
      let effectType;
      for (key in featureEffectDefaults) {
        const defaultJSON = featureEffectDefaults[key];
        if (isSameEffect(defaultJSON.included, included) && isSameEffect(defaultJSON.excluded, excluded)) {
          effectType = key;
          break;
        }
      }
      return effectType;
    }
    else {
      throw new Error("unsupported effect");
    }
  }
  return null;
}
function sortEffects(props) {
  const { effectsJSON } = props;
  if (!effectsJSON) {
    return;
  }
  const usedEffectTypes = effectsJSON.map((effect) => effect.type);
  allLayerEffectTypes.sort((typeA, typeB) => {
    const indexA = usedEffectTypes.indexOf(convertToAPIType(typeA));
    const indexB = usedEffectTypes.indexOf(convertToAPIType(typeB));
    const value = indexA > -1 && indexB > -1 && indexA < indexB
      ? -1
      : indexA > -1 && indexB > -1 && indexA > indexB
        ? 1
        : indexA > -1
          ? -1
          : indexB > -1
            ? 1
            : 0;
    return value;
  });
}
function getEffectProps(type, props) {
  var _a, _b;
  const { effectsJSON } = props;
  const layerEffect = effectsJSON && ((_b = (_a = Array.from(effectsJSON)) === null || _a === void 0 ? void 0 : _a.filter((effect) => effect.type === convertToAPIType(type))) === null || _b === void 0 ? void 0 : _b[0]);
  if (!layerEffect) {
    if (type === "dropShadow") {
      let geometryType = getSimpleGeometryType(props);
      return lastLayerEffectValues[type][geometryType];
    }
    else {
      return lastLayerEffectValues[type];
    }
  }
  return layerEffect;
}
function getSimpleGeometryType(props) {
  const { layer } = props;
  let simpleType = "point";
  const anyLayer = layer;
  if (layer.type === "csv") {
    simpleType = "point";
  }
  else if (anyLayer.geometryType) {
    simpleType =
      anyLayer.geometryType === "polyline"
        ? "line"
        : ["point", "multipoint"].includes(anyLayer.geometryType)
          ? "point"
          : "polygon";
  }
  return simpleType;
}
function convertToAPIType(type) {
  switch (type) {
    case "dropShadow":
      return "drop-shadow";
    case "hueRotate":
      return "hue-rotate";
    case "brightnessContrast":
      return "brightness";
    default:
      return type;
  }
}
function buildFeatureEffect(effectType, where, props) {
  const { modules } = props;
  const { FeatureEffect } = modules;
  const json = featureEffectDefaults[effectType];
  const featureEffect = new FeatureEffect({
    filter: {
      where
    },
    includedEffect: modules.effectsUtils.fromJSON(json.included),
    excludedEffect: modules.effectsUtils.fromJSON(json.excluded),
    excludedLabelsVisible: true
  });
  //console.log("buildFeatureEffect", effectType, featureEffect, json);
  return featureEffect;
}
function minimalAutoCheckOK(effect) {
  // make sure each effect type is mentioned in all 3 or none of the strings
  const strings = [effect[0].value, effect[1].value, effect[2].value];
  return !allLayerEffectTypes.some((type) => {
    if (type === "brightnessContrast") {
      const apiType1 = "brightness";
      const apiType2 = "contrast";
      if (strings[0].indexOf(apiType1) > -1 && strings[0].indexOf(apiType2) > -1) {
        return (strings[1].indexOf(apiType1) === -1 ||
          strings[2].indexOf(apiType1) === -1 ||
          strings[1].indexOf(apiType2) === -1 ||
          strings[2].indexOf(apiType2) === -1);
      }
      else if (strings[0].indexOf(apiType1) === -1 && strings[0].indexOf(apiType2) === -1) {
        return (strings[1].indexOf(apiType1) > -1 ||
          strings[2].indexOf(apiType1) > -1 ||
          strings[1].indexOf(apiType2) > -1 ||
          strings[2].indexOf(apiType2) > -1);
      }
      else {
        return true;
      }
    }
    else {
      const apiType = convertToAPIType(type);
      if (strings[0].indexOf(apiType) > -1) {
        return strings[1].indexOf(apiType) === -1 || strings[2].indexOf(apiType) === -1;
      }
      else {
        return strings[1].indexOf(apiType) > -1 || strings[2].indexOf(apiType) > -1;
      }
    }
  });
}
function isSameEffect(effectA_ /* __esri.EffectJSON[] */, effectB_ /* __esri.EffectJSON[] */) {
  // different order is OK
  // make copies so ordering won't affect the original
  const effectA = JSON.parse(JSON.stringify(effectA_));
  const effectB = JSON.parse(JSON.stringify(effectB_));
  // check length
  if (effectA.length !== effectB.length) {
    return false;
  }
  // sort by type name
  effectA.sort((a, b) => a.type.localeCompare(b.type));
  effectB.sort((a, b) => a.type.localeCompare(b.type));
  // loop through array
  let same = true;
  for (let i = 0; i < effectA.length; i++) {
    const a = effectA[i];
    const b = effectB[i];
    // same number of props?
    if (Object.keys(a).length !== Object.keys(b).length) {
      same = false;
      break;
    }
    // look at each prop
    for (let key in a) {
      if (typeof a[key] === "string" && typeof b[key] === "string" && a[key] === b[key]) {
        continue;
      }
      else if (typeof a[key] === "number" && typeof b[key] === "number" && a[key] === b[key]) {
        continue;
      }
      else if (a[key].length &&
        a[key].length === b[key].length &&
        a[key].every((val, idx) => val === b[key][idx])) {
        continue;
      }
      else {
        same = false;
        break;
      }
    }
    if (!same) {
      break;
    }
  }
  return same;
}
function buildEffectInfo(node, popovers /* HTMLArcgisEffectsPopoversElement[] */, props) {
  const type = node.value;
  switch (type) {
    case "bloom":
      return buildEffectInfoBloom(popovers[type], props);
    case "dropShadow":
      return buildEffectInfoDropShadow(popovers[type], props);
    case "blur":
      return buildEffectInfoBlur(popovers[type], props);
    case "brightnessContrast":
      return buildEffectInfoBrightnessContrast(popovers[type]);
    case "grayscale":
      return buildEffectInfoGrayscale(popovers[type]);
    case "hueRotate":
      return buildEffectInfoHueRotate(popovers[type]);
    case "saturate":
      return buildEffectInfoSaturate(popovers[type]);
    case "invert":
      return buildEffectInfoInvert(popovers[type]);
    case "sepia":
      return buildEffectInfoSepia(popovers[type]);
  }
}
function buildEffectInfoBloom(node /* HTMLArcgisEffectsPopoversElement */, props) {
  // strength, radius, threshold
  // bloom(200%, 1px, 0.2)";
  // bloom(2, 1px, 20%)";
  // bloom(2, 1px, 0.1)
  const numberNodes = node.querySelectorAll("calcite-input");
  let strength = getValue(numberNodes[0]);
  let radius = getValue(numberNodes[1]);
  let threshold = getValue(numberNodes[2]);
  if (!isDefined(strength) || !isDefined(radius) || !isDefined(threshold)) {
    return null;
  }
  strength = Math.round(strength * 10) / 10;
  radius = px2ptRoundTo3(Math.round(radius * 10) / 10, props);
  threshold = Math.round(threshold);
  threshold /= 100;
  lastLayerEffectValues.bloom = { strength, radius, threshold };
  const autoNode = node.querySelector(".auto");
  if (!autoNode.checked) {
    return `bloom(${strength}, ${radius}pt, ${threshold})`;
  }
  else {
    const { view } = props;
    const currentScale = view.scale;
    const factor = 2;
    const invFactor = 1 / factor;
    return [
      {
        // the original values have been doubled after two zoom level in
        scale: currentScale * 0.25,
        value: `bloom(${strength * factor}, ${radius * factor}pt, ${threshold})`
      },
      {
        scale: currentScale,
        value: `bloom(${strength}, ${radius}pt, ${threshold})`
      },
      {
        // the original values have been halved after two zooms level out
        scale: currentScale * 4,
        value: `bloom(${strength * invFactor}, ${radius * invFactor}pt, ${threshold})`
      }
    ];
  }
}
function buildEffectInfoDropShadow(node /* HTMLArcgisEffectsPopoversElement */, props) {
  // x offset, y offset, blur radius (=width) hsl(hue, saturation, lightness, alpha)
  // "drop-shadow(3px, 3px, 4px)"
  const color = node.querySelector("calcite-color-picker");
  const rgb = hexToRgb(color.value);
  const numberNodes = node.querySelectorAll("calcite-input");
  let blurRadius = getValue(numberNodes[0]);
  let xoffset = getValue(numberNodes[1]);
  let yoffset = getValue(numberNodes[2]);
  let opacity = getValue(numberNodes[3]);
  if (!isDefined(color.value) ||
    !isDefined(blurRadius) ||
    !isDefined(xoffset) ||
    !isDefined(yoffset) ||
    !isDefined(opacity)) {
    return null;
  }
  blurRadius = px2ptRoundTo3(Math.round(blurRadius), props);
  xoffset = px2ptRoundTo3(Math.round(xoffset), props);
  yoffset = px2ptRoundTo3(Math.round(yoffset), props);
  opacity = Math.round(opacity);
  opacity /= 100;
  lastLayerEffectValues.dropShadow[getSimpleGeometryType(props)] = {
    color: [rgb.r, rgb.g, rgb.b, opacity * 255],
    xoffset,
    yoffset,
    blurRadius
  };
  //const hsl = hexToHSL(color.value as any);
  //const colorStr = `hsla(${Math.round(hsl.h * 360)}, ${hsl.s * 100}%, ${hsl.l * 100}%, ${opacity})`;
  const colorStr = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;
  const autoNode = node.querySelector(".auto");
  if (!autoNode.checked) {
    return `drop-shadow(${xoffset}pt ${yoffset}pt ${blurRadius}pt ${colorStr})`;
  }
  else {
    const { view } = props;
    const currentScale = view.scale;
    const factor = 2;
    const invFactor = 1 / factor;
    return [
      {
        // the original values have been doubled after two zoom level in
        scale: currentScale * 0.25,
        value: `drop-shadow(${xoffset * factor}pt ${yoffset * factor}pt ${blurRadius * factor}pt ${colorStr})`
      },
      {
        scale: currentScale,
        value: `drop-shadow(${xoffset}pt ${yoffset}pt ${blurRadius}pt ${colorStr})`
      },
      {
        // the original values have been halved after two zooms level out
        scale: currentScale * 4,
        value: `drop-shadow(${xoffset * invFactor}pt ${yoffset * invFactor}pt ${blurRadius * invFactor}pt ${colorStr})`
      }
    ];
  }
}
function buildEffectInfoBlur(node /* HTMLArcgisEffectsPopoversElement */, props) {
  // blur(10px)
  const numberNode = node.querySelector("calcite-input");
  let radius = getValue(numberNode);
  if (!isDefined(radius)) {
    return null;
  }
  radius = px2ptRoundTo3(Math.round(radius * 10) / 10, props);
  lastLayerEffectValues.blur = { radius };
  return `blur(${radius}pt)`;
}
function buildEffectInfoBrightnessContrast(node /* HTMLArcgisEffectsPopoversElement */) {
  // brightness(100%) contrast(100%)
  const numberNodes = node.querySelectorAll("calcite-input");
  let brightness = getValue(numberNodes[0]);
  let contrast = getValue(numberNodes[1]);
  if (!isDefined(brightness) || !isDefined(contrast)) {
    return null;
  }
  brightness = Math.round(brightness) / 100;
  contrast = Math.round(contrast) / 100;
  lastLayerEffectValues.brightness = { amount: brightness };
  lastLayerEffectValues.contrast = { amount: contrast };
  return `brightness(${brightness}) contrast(${contrast})`;
}
function buildEffectInfoGrayscale(node /* HTMLArcgisEffectsPopoversElement */) {
  // grayscale(25%)
  const numberNode = node.querySelector("calcite-input");
  let amount = getValue(numberNode);
  if (!isDefined(amount)) {
    return null;
  }
  amount = Math.round(amount) / 100;
  lastLayerEffectValues.grayscale = { amount };
  return `grayscale(${amount})`;
}
function buildEffectInfoHueRotate(node /* HTMLArcgisEffectsPopoversElement */) {
  // hue-rotate(270deg)
  const numberNode = node.querySelector("calcite-input");
  let angle = getValue(numberNode);
  if (!isDefined(angle)) {
    return null;
  }
  angle = Math.round(angle);
  lastLayerEffectValues.hueRotate = { angle };
  return `hue-rotate(${angle}deg)`;
}
function buildEffectInfoSaturate(node /* HTMLArcgisEffectsPopoversElement */) {
  // saturate(100%)
  const numberNode = node.querySelector("calcite-input");
  let amount = getValue(numberNode);
  if (!isDefined(amount)) {
    return null;
  }
  amount = Math.round(amount) / 100;
  lastLayerEffectValues.saturate = { amount };
  return `saturate(${amount})`;
}
function buildEffectInfoInvert(node /* HTMLArcgisEffectsPopoversElement */) {
  // invert(100%)
  const numberNode = node.querySelector("calcite-input");
  let amount = getValue(numberNode);
  if (!isDefined(amount)) {
    return null;
  }
  amount = Math.round(amount) / 100;
  lastLayerEffectValues.invert = { amount };
  return `invert(${amount})`;
}
function buildEffectInfoSepia(node /* HTMLArcgisEffectsPopoversElement */) {
  // sepia(50%)
  const numberNode = node.querySelector("calcite-input");
  let amount = getValue(numberNode);
  if (!isDefined(amount)) {
    return null;
  }
  amount = Math.round(amount) / 100;
  lastLayerEffectValues.sepia = { amount };
  return `sepia(${amount})`;
}
/* function hexToHSL(hex: string): any {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  let r = parseInt(result[1], 16);
  let g = parseInt(result[2], 16);
  let b = parseInt(result[3], 16);
  (r /= 255), (g /= 255), (b /= 255);
  const max = Math.max(r, g, b),
    min = Math.min(r, g, b);
  let h,
    s,
    l = (max + min) / 2;
  if (max == min) {
    h = s = 0; // achromatic
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  const HSL = new Object();
  HSL["h"] = h;
  HSL["s"] = s;
  HSL["l"] = l;
  return HSL;
} */
function hexToRgb(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    }
    : null;
}
function getValue(node) {
  const value = Number(node.value);
  if (!isDefined(value)) {
    return null;
  }
  const clamped = Math.min(node.max, Math.max(node.min, value));
  // ensure value is within allowed range
  node.value = `${clamped}`;
  return clamped;
}
function px2ptRoundTo3(value, props) {
  const { modules } = props;
  const { screenUtils } = modules;
  return Math.round(screenUtils.px2pt(value) * 1000) / 1000;
}

function getDefaultField(props) {
  var _a, _b, _c, _d, _e;
  const { layer } = props;
  const { renderer } = layer;
  if (!renderer) {
    return null;
  }
  // not looking at Arcade expressions
  switch (renderer.type) {
    case "unique-value": {
      // types, predominance, relationship
      if (((_a = renderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.type) === "predominance") {
        return renderer.uniqueValueInfos[0].value;
      }
      else if (((_b = renderer.authoringInfo) === null || _b === void 0 ? void 0 : _b.type) === "relationship") {
        return renderer.authoringInfo.field1.field;
      }
      else {
        return renderer.field;
      }
    }
    case "class-breaks": {
      // color, size
      if (renderer.visualVariables) {
        let fieldName = (_c = renderer.visualVariables.find((visVar) => visVar.type === "color")) === null || _c === void 0 ? void 0 : _c.field;
        if (fieldName) {
          return fieldName;
        }
        fieldName = (_d = renderer.visualVariables.find((visVar) => visVar.type === "size" && !visVar.target && visVar.valueExpression !== "$view.scale")) === null || _d === void 0 ? void 0 : _d.field;
        if (fieldName) {
          return fieldName;
        }
      }
      else {
        return renderer.field;
      }
      break;
    }
    case "dot-density":
      return (_e = renderer.attributes) === null || _e === void 0 ? void 0 : _e[0].field;
  }
  return null;
}

const arcgisEffectsCss = ":host{height:100%}.flow{height:100%}.panel{height:100%}.notice{margin:0.5rem}.radio-buttons{padding:0.5rem;background-color:white}.hint{padding:0.25rem 0.5rem;background-color:white}.basemap-type{padding:0.75rem 0.5rem 0.25rem 0.5rem}.switch{margin-right:0.75rem;margin-left:0;align-self:center}.list{flex-flow:column nowrap;margin:1px}.effect-thumb{display:flex;align-items:center;padding-left:0.5rem;cursor:pointer}.effect-thumb-img{margin-top:0.25rem;margin-bottom:0.25rem;height:48px;width:48px}.arcgis--rtl .switch{margin-left:0.75rem;margin-right:0}.arcgis--rtl .effect-thumb{padding-left:0;padding-right:0.5rem}";

const ArcgisEffects = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisEffectsClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisEffectsClose", 7);
    this.arcgisEffectsChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisEffectsChange", 7);
    this.arcgisEffectsApplyLayerEffect = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisEffectsApplyLayerEffect", 7);
    this.popovers = [];
    this.imagesPath = "../arcgis-app-assets/images/effects/test.jpg";
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.afterCreatePanel = (node) => {
      this.panelNode = node;
      const { props } = this;
      const { featureEffectType, supportsFeatureEffects } = props;
      // open all popovers so we have access to all current props
      // feature effects all share one popover
      const { popovers, panelNode } = this;
      if (popovers) {
        // remove them
        this.done();
      }
      // wait until panelNode has dimensions
      setTimeout(() => {
        let allTypes = supportsFeatureEffects
          ? allLayerEffectTypes.concat(["featureEffect"])
          : allLayerEffectTypes;
        allTypes.forEach((type) => {
          popovers[type] = document.createElement(`arcgis-effects-popovers`);
          popovers[type].props = props;
          popovers[type].type = type;
          popovers[type].referenceElement = panelNode;
          popovers[type].popovers = popovers;
          document.body.appendChild(popovers[type]);
        });
        if (featureEffectType) {
          // we're starting with a set feature effect
          const popover = popovers["featureEffect"];
          popover.open = true;
          popover.updateHeader(featureEffectType);
        }
      }, 1000);
    };
    this.onSwitchEffectType = (event) => {
      const { props, popovers } = this;
      const layer = props.layer;
      const node = event.target;
      // close all popovers
      let key;
      for (key in popovers) {
        popovers[key].open = false;
      }
      if (node.selectedItem.value === "layer") {
        this.lastFeatureEffect = layer.featureEffect || this.lastFeatureEffect;
        layer.featureEffect = null;
        layer.effect = this.lastLayerEffect;
        this.showFeatureEffects = false;
      }
      else {
        // "feature"
        this.lastLayerEffect = layer.effect;
        layer.effect = null;
        if (this.lastFeatureEffect) {
          layer.featureEffect = this.lastFeatureEffect;
          props.featureEffectType = parseEffects(props);
        }
        else {
          const { backgroundTheme } = props;
          this.selectFeatureEffectType(backgroundTheme === "light" ? allLightFeatureEffectTypes[0] : allDarkFeatureEffectTypes[0]);
        }
        this.showFeatureEffects = true;
        const popover = popovers["featureEffect"];
        popover.open = true;
        popover.updateHeader(props.featureEffectType);
      }
      this.reRender = !this.reRender;
    };
    this.onRemoveEffect = () => {
      const { props } = this;
      const { layer } = props;
      layer.effect = null;
      layer.featureEffect = null;
      this.isUnsupported = false;
    };
    this.onSwitchChange = (event) => {
      const { popovers } = this;
      const switchNode = event.target;
      const itemNode = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.q)(switchNode, "calcite-value-list-item");
      const type = itemNode.value;
      if (!switchNode.checked) {
        popovers[type].open = false;
        itemNode.selected = false;
      }
      this.arcgisEffectsApplyLayerEffect.emit({ type, keepSwitch: true });
    };
    this.onFeatureEffectEnabledSwitchChange = (event) => {
      const { popovers, props, lightListNode, darkListNode } = this;
      const layer = props.layer;
      const switchNode = event.target;
      if (!switchNode.checked) {
        popovers["featureEffect"].open = false;
        lightListNode === null || lightListNode === void 0 ? void 0 : lightListNode.querySelectorAll("calcite-value-list-item").forEach((item) => (item.selected = false));
        darkListNode === null || darkListNode === void 0 ? void 0 : darkListNode.querySelectorAll("calcite-value-list-item").forEach((item) => (item.selected = false));
        this.lastFeatureEffect = layer.featureEffect;
        layer.featureEffect = null;
        this.arcgisEffectsChange.emit();
      }
      else {
        if (this.lastFeatureEffect) {
          layer.featureEffect = this.lastFeatureEffect;
          props.featureEffectType = parseEffects(props);
        }
        else {
          const { backgroundTheme } = props;
          props.featureEffectType =
            backgroundTheme === "light"
              ? allLightFeatureEffectTypes[0]
              : allDarkFeatureEffectTypes[0];
        }
        lightListNode === null || lightListNode === void 0 ? void 0 : lightListNode.querySelectorAll("calcite-value-list-item").forEach((item) => {
          if (item.value === props.featureEffectType) {
            item.selected = true;
          }
        });
        darkListNode === null || darkListNode === void 0 ? void 0 : darkListNode.querySelectorAll("calcite-value-list-item").forEach((item) => {
          if (item.value === props.featureEffectType) {
            item.selected = true;
          }
        });
        this.selectFeatureEffectType(props.featureEffectType);
      }
    };
    this.openPopover = (event) => {
      const { popovers } = this;
      const target = event.target;
      const tagName = target.tagName.toLowerCase();
      let itemNode;
      if (tagName === "img") {
        itemNode = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.q)(target, "calcite-value-list-item");
      }
      else if (tagName === "calcite-switch") {
        if (target.checked) {
          itemNode = (0,_commonFunctions_5262b094_js__WEBPACK_IMPORTED_MODULE_3__.q)(target, "calcite-value-list-item");
        }
        else {
          return;
        }
      }
      else if (tagName === "calcite-value-list-item") {
        itemNode = target;
      }
      else {
        return;
      }
      itemNode.selected = true;
      const type = itemNode.value;
      const isFeatureEffectType = allLightFeatureEffectTypes.concat(allDarkFeatureEffectTypes).indexOf(type) > -1;
      if (isFeatureEffectType) {
        this.selectFeatureEffectType(type);
      }
      else {
        // layer effects
        const switchNode = itemNode.querySelector("calcite-switch");
        if (popovers[type].open) {
          // if already open then close popover and toggle off
          popovers[type].open = false;
          switchNode.checked = false;
          itemNode.selected = false;
          this.arcgisEffectsApplyLayerEffect.emit();
        }
        else {
          // switch effect on
          if (!switchNode.checked) {
            switchNode.checked = true;
            this.arcgisEffectsApplyLayerEffect.emit();
          }
          // close other popovers
          let key;
          for (key in popovers) {
            popovers[key].open = false;
          }
          popovers[type].open = true;
        }
      }
    };
    this.view = undefined;
    this.layer = undefined;
    this.hideLayerTitle = false;
    this.props = undefined;
    this.reRender = false;
    this.isUnsupported = false;
    this.showFeatureEffects = false;
  }
  arcgisEffectsApplyLayerEffectHandler(event) {
    var _a, _b;
    const { props, listNode } = this;
    const { layer } = props;
    const type = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.type;
    if (type && !((_b = event.detail) === null || _b === void 0 ? void 0 : _b.keepSwitch)) {
      // toggle effect on if it's not already
      const itemNode = Array.from(listNode.querySelectorAll("calcite-value-list-item")).filter((item) => item.value === type)[0];
      itemNode.querySelector("calcite-switch").checked = true;
    }
    const effects = buildEffectsInfo(this.listNode, this.popovers, props);
    layer.effect = effects;
    this.arcgisEffectsChange.emit();
    props.effectsJSON = parseEffects(props);
    // refresh to get the numbers
    //this.reRender = !this.reRender;
  }
  arcgisEffectsPopoverFilterChangeHandler(event) {
    const { props, hostElement } = this;
    const { layer } = props;
    const where = event.detail;
    const itemNode = Array.from(hostElement.shadowRoot.querySelectorAll("calcite-value-list-item")).find((node) => node.selected);
    const type = itemNode === null || itemNode === void 0 ? void 0 : itemNode.value;
    if (!type) {
      // we're too early, but need to apply the filter later once a type gets selected
      this.defaultWhere = where;
    }
    else {
      // a feature effect type is selected
      layer.featureEffect = buildFeatureEffect(type, where, props);
      this.arcgisEffectsChange.emit();
    }
  }
  arcgisEffectsPopoverCloseHandler() {
    const { listNode, lightListNode, darkListNode } = this;
    listNode === null || listNode === void 0 ? void 0 : listNode.querySelectorAll("calcite-value-list-item").forEach((item) => {
      if (item.selected) {
        item.selected = false;
        item.setFocus();
      }
    });
    lightListNode === null || lightListNode === void 0 ? void 0 : lightListNode.querySelectorAll("calcite-value-list-item").forEach((item) => {
      if (item.selected) {
        item.setFocus();
      }
    });
    darkListNode === null || darkListNode === void 0 ? void 0 : darkListNode.querySelectorAll("calcite-value-list-item").forEach((item) => {
      if (item.selected) {
        item.setFocus();
      }
    });
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Set focus on component
   */
  async setFocus(focusId) {
    var _a, _b;
    if (!focusId || focusId === "dismiss-button") {
      (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
      return;
    }
    (_b = this.listNode) === null || _b === void 0 ? void 0 : _b.setFocus();
  }
  /**
   * Cleans up component, closes popovers
   */
  async done() {
    const { popovers } = this;
    // close  popovers
    let key;
    for (key in popovers) {
      popovers[key].open = false;
    }
    document.body
      .querySelectorAll("arcgis-effects-popovers")
      .forEach((node) => node.parentNode.removeChild(node));
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { view, layer } = this;
    const [strings, currentLanguage] = await (0,_locale_13e00a75_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
    this.strings = strings;
    const supportsFeatureEffects = !layer.featureReduction &&
      ["feature", "geojson", "ogc-feature", "wfs", "csv", "stream"].indexOf(layer.type) > -1;
    this.props = { view, layer, strings, supportsFeatureEffects };
    const { props } = this;
    props.locale = currentLanguage;
    const [FeatureEffect, effectsUtils, screenUtils, colorUtils] = await (0,_loadModules_aaf30bd6_js__WEBPACK_IMPORTED_MODULE_4__.l)([
      "esri/layers/support/FeatureEffect",
      "esri/layers/effects/jsonUtils",
      "esri/core/screenUtils",
      "esri/views/support/colorUtils"
    ]);
    props.modules = { FeatureEffect, effectsUtils, screenUtils };
    props.backgroundTheme = view && (await colorUtils.getBackgroundColorTheme(view));
    try {
      const anyLayer = layer;
      if (anyLayer.effect && anyLayer.featureEffect) {
        this.isUnsupported = true;
      }
      else if (anyLayer.effect) {
        props.effectsJSON = parseEffects(props);
        //console.log("layer.effect", (layer as any).effect, props.effectsJSON);
        sortEffects(props);
      }
      else if (anyLayer.featureEffect) {
        props.featureEffectType = parseEffects(props);
      }
    }
    catch (e) {
      this.isUnsupported = true;
    }
  }
  componentDidLoad() {
    requestAnimationFrame(() => this.setFocus());
  }
  disconnectedCallback() {
    this.done();
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    // filter (9.4) only for these layer types (not heatmap): __esri.FeatureLayer | __esri.CSVLayer | __esri.WFSLayer | __esri.StreamLayer
    const { isUnsupported } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: CSS$1.flow, dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), ref: (node) => (this.flowNode = node) }, isUnsupported ? this.renderUnsupported() : this.renderContent())));
  }
  renderUnsupported() {
    const { props, hideLayerTitle } = this;
    const { layer, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: strings.general.effects, description: !hideLayerTitle ? layer.title : undefined, class: {
        [CSS$1.panel]: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl]: rtl
      }, closable: true, onCalcitePanelClose: () => {
        this.arcgisEffectsClose.emit();
      }, ref: (node) => (this.panelNode = node) }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { heading: strings.error.title, closeDisabled: true }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.error.text1), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.error.text2)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { class: "autofocus", slot: "fab", appearance: "outline-fill", kind: "neutral", scale: "s", textEnabled: true, icon: null, label: strings.error.button, text: strings.error.button, onClick: this.onRemoveEffect })));
  }
  renderContent() {
    const { props, hideLayerTitle, showFeatureEffects } = this;
    const { layer, supportsFeatureEffects, strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
    const hasFeatureEffect = supportsFeatureEffects && !!layer.featureEffect;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: strings.general.effects, description: !hideLayerTitle ? layer.title : undefined, class: {
        [CSS$1.panel]: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl]: rtl
      }, closable: true, onCalcitePanelClose: () => {
        // close all popovers
        const { popovers } = this;
        let key;
        for (key in popovers) {
          popovers[key].open = false;
        }
        this.arcgisEffectsClose.emit();
      }, ref: this.afterCreatePanel }, this.renderTip(), supportsFeatureEffects ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.radioButtons }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { layout: "horizontal", appearance: "solid", scale: "s", width: "full", onCalciteSegmentedControlChange: this.onSwitchEffectType }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "layer", checked: !(hasFeatureEffect || showFeatureEffects) }, strings.general.wholeLayer), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { value: "feature", checked: hasFeatureEffect || showFeatureEffects }, strings.general.featureSpecific)))) : null, hasFeatureEffect || showFeatureEffects
      ? this.renderFeatureEffectsContent()
      : this.renderLayerEffectsContent()));
  }
  renderTip() {
    const { props } = this;
    const { strings } = props;
    if ((0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_5__.g)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_5__.l.ARCGIS_COMPONENT_NOTIFICATIONS, _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_5__.a.EFFECTS_TIP_DISMISSED)) {
      return null;
    }
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.notice }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "s", width: "full", open: true, closable: true, onCalciteNoticeClose: () => {
        (0,_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_5__.s)(_localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_5__.l.ARCGIS_COMPONENT_NOTIFICATIONS, {
          key: _localStorage_f63100ef_js__WEBPACK_IMPORTED_MODULE_5__.a.EFFECTS_TIP_DISMISSED,
          value: "true"
        });
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.general.notice))));
  }
  renderLayerEffectsContent() {
    const { strings } = this;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.hint }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.general.dragToReorder)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { class: CSS$1.list, dragEnabled: true, onCalciteListOrderChange: () => this.arcgisEffectsApplyLayerEffect.emit(), ref: (node) => (this.listNode = node) }, allLayerEffectTypes.map((type) => this.renderLayerEffectItem(type)))));
  }
  renderLayerEffectItem(type) {
    var _a;
    const { props } = this;
    const { effectsJSON, strings } = props;
    let effectPos = -1;
    effectsJSON &&
      ((_a = Array.from(effectsJSON)) === null || _a === void 0 ? void 0 : _a.forEach((effect, idx) => {
        if (effect.type === convertToAPIType(type)) {
          effectPos = idx + 1;
        }
      }));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { label: strings.effectsTitle[type], description: strings.effectsSummary[type], value: type, onClick: this.openPopover, onKeyDown: (event) => {
        if (event.key === "Enter") {
          this.openPopover(event);
        }
        // space key is reserved for drag-n-drop
        if (event.key === " ") {
          const composedPath = event.composedPath();
          const firstElement = composedPath[0];
          if (firstElement.tagName !== "SPAN" || !firstElement.classList.contains("handle")) {
            this.openPopover(event);
          }
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-start", class: CSS$1.effectThumb }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { class: CSS$1.effectThumbImg,
      //class={`${CSS.effectThumbImg} ${effectPos > 0 ? `blur` : ``}`}
      src: (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/effect-thumbs/${type}.png`), alt: "" })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: effectPos > 0, slot: "actions-end", class: CSS$1.switch, onCalciteSwitchChange: this.onSwitchChange })));
  }
  renderFeatureEffectsContent() {
    const { props, lastFeatureEffect, strings } = this;
    const { layer, backgroundTheme } = props;
    const isLightBackground = backgroundTheme === "light";
    const lightContent = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.basemapType }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.general.lightBasemaps)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { class: CSS$1.list, "data-value": "light", ref: (node) => (this.lightListNode = node) }, allLightFeatureEffectTypes.map((type) => this.renderFeatureEffectItem(type, "light")))));
    const darkContent = ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.basemapType }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.general.darkBasemaps)), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list", { class: CSS$1.list, "data-value": "dark", ref: (node) => (this.darkListNode = node) }, allDarkFeatureEffectTypes.map((type) => this.renderFeatureEffectItem(type, "dark")))));
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.hint }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.general.emphasize), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", layout: "inline-space-between" }, strings.general.enabled, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: !!(layer.featureEffect || lastFeatureEffect), onCalciteSwitchChange: this.onFeatureEffectEnabledSwitchChange, ref: (node) => (this.enabledSwitchNode = node) }))), isLightBackground ? lightContent : darkContent, isLightBackground ? darkContent : lightContent));
  }
  renderFeatureEffectItem(type, theme) {
    const { props } = this;
    const { featureEffectType, strings } = props;
    const inLight = allLightFeatureEffectTypes.find((feType) => type === feType);
    const inDark = allDarkFeatureEffectTypes.find((feType) => type === feType);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-value-list-item", { label: strings.featureEffectsTitle[type], description: strings.featureEffectsSummary[type], value: type, selected: featureEffectType === type, onClick: this.openPopover, onKeyDown: (event) => {
        if (event.key === "Enter") {
          this.openPopover(event);
        }
        // space key is reserved for drag-n-drop
        if (event.key === " ") {
          const composedPath = event.composedPath();
          const firstElement = composedPath[0];
          if (firstElement.tagName !== "SPAN" || !firstElement.classList.contains("handle")) {
            this.openPopover(event);
          }
        }
      } }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-start", class: CSS$1.effectThumb }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { class: `${CSS$1.effectThumbImg} feature`, src: (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/effect-thumbs/${type}${inLight && inDark ? `_${theme}` : ``}.png`), alt: "" }))));
  }
  selectFeatureEffectType(type) {
    var _a, _b;
    const { popovers, props, lightListNode, darkListNode, defaultWhere, enabledSwitchNode } = this;
    const { layer } = props;
    props.featureEffectType = type;
    // unselect item from second list
    lightListNode === null || lightListNode === void 0 ? void 0 : lightListNode.querySelectorAll("calcite-value-list-item").forEach((item) => {
      if (item.selected && item.value !== type) {
        item.selected = false;
      }
    });
    darkListNode === null || darkListNode === void 0 ? void 0 : darkListNode.querySelectorAll("calcite-value-list-item").forEach((item) => {
      if (item.selected && item.value !== type) {
        item.selected = false;
      }
    });
    // feature effects
    layer.featureEffect = buildFeatureEffect(type, ((_b = (_a = layer.featureEffect) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.where) || defaultWhere, props);
    this.defaultWhere = undefined;
    this.arcgisEffectsChange.emit();
    const popover = popovers["featureEffect"];
    if (popover.open) {
      // if already open then just rename title
      popover.updateHeader(type);
    }
    else {
      // close other popovers
      let key;
      for (key in popovers) {
        popovers[key].open = false;
      }
      popover.open = true;
      popover.updateHeader(type);
    }
    if (enabledSwitchNode) {
      // after a list click
      enabledSwitchNode.checked = true;
    }
    else {
      // after a layer effect -> feature effect switch
      this.reRender = !this.reRender;
    }
  }
  static get assetsDirs() { return ["assets"]; }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisEffects.style = arcgisEffectsCss;

const CSS = {
  popover: "popover",
  panel: "panel",
  auto: "auto",
  content: "effects-content",
  bottomSpace: "bottom-space",
  bottomSpaceLittle: "bottom-space-little",
  switch: "switch",
  reset: "reset",
  subHeader: "sub-header"
};

const SelectCSS$1 = {
  base: "select-number",
  input: "select-number__input"
};
const stepperClickHandlerForProperFocus$1 = (event) => {
  // workaround for calcite-label wrapped SelectNumber focus bug
  event.stopPropagation();
};
const calciteLabelClickHandlerForProperFocus = (event) => {
  var _a, _b;
  // workaround for calcite-label wrapped SelectNumber focus bug
  (_b = (_a = event.target).setFocus) === null || _b === void 0 ? void 0 : _b.call(_a);
  event.preventDefault();
};
const SelectNumber = (props) => {
  const { disabled, min, max, step, value, units, classNames, label } = props;
  return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${SelectCSS$1.base} ${classNames}` },
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { disabled: disabled, min: min, max: max, value: value, step: step, snap: true, labelTicks: true, ticks: max - min, minLabel: label, onCalciteSliderInput: (event) => applyValueOnChange$1(event, props) }),
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", onClick: stepperClickHandlerForProperFocus$1, disabled: disabled, min: min, max: max, value: `${value}`, scale: "s", step: step, suffixText: units, onCalciteInputInput: (event) => applyValueOnChange$1(event, props), class: SelectCSS$1.input, label: label })));
};
function applyValueOnChange$1(event, props) {
  const { locale } = props;
  const node = event.currentTarget;
  const sliderNode = node.parentElement.querySelector("calcite-slider");
  const inputNode = node.parentElement.querySelector("calcite-input");
  const value = Number(node.value);
  const clamped = Math.min(props.max, Math.max(props.min, value));
  if (clamped === sliderNode.value && `${clamped}` === inputNode.value) {
    // no changes
    return;
  }
  // ensure value we show is within allowed range
  sliderNode.value = clamped;
  inputNode.value = `${clamped}`;
  // TODO workaround for https://github.com/Esri/calcite-components/issues/3003
  const clampedString = clamped.toLocaleString(locale);
  inputNode
    .querySelectorAll("input")
    .forEach((input) => (input.value = clampedString));
  props.onValueChange(clamped, node);
}

const SelectCSS = {
  base: "select-xy",
  input: "select-xy__input"
};
const stepperClickHandlerForProperFocus = (event) => {
  // workaround for calcite-label wrapped SelectXy focus bug
  event.stopPropagation();
};
const SelectXy = (props) => {
  const { min, max, step, x, y, classNames, strings, locale } = props;
  let hostNode;
  return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${SelectCSS.base} ${classNames}`, ref: (node) => (hostNode = node) },
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-xy-slider", { "data-value": "slider", minX: min, maxX: max, minY: min, maxY: max, x: x, y: y, step: step, snappable: true, onArcgisXYSliderInput: (event) => {
        const slider = event.currentTarget;
        const emittingActiveFlagAttribute = "data-active";
        // we ignore the first event since it's caused by the
        // value snapping to a step interval during initialization
        if (!slider.hasAttribute(emittingActiveFlagAttribute)) {
          slider.setAttribute(emittingActiveFlagAttribute, "");
          return;
        }
        applyValueOnChange(event, props, hostNode);
      } }),
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null,
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" },
        strings.effectsProps.xOffset,
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { "data-value": "x", type: "number", min: min, max: max, step: step, lang: locale, value: `${x}`, class: SelectCSS.input, scale: "s", onClick: stepperClickHandlerForProperFocus, onCalciteInputInput: (event) => applyValueOnChange(event, props, hostNode) })),
      (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" },
        strings.effectsProps.yOffset,
        (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { "data-value": "y", type: "number", min: min, max: max, step: step, lang: locale, value: `${y}`, class: SelectCSS.input, scale: "s", onClick: stepperClickHandlerForProperFocus, onCalciteInputInput: (event) => applyValueOnChange(event, props, hostNode) })))));
};
function applyValueOnChange(event, props, hostNode) {
  const { step, locale } = props;
  const node = event.currentTarget;
  const dataValue = node.getAttribute("data-value");
  const sliderNode = hostNode.querySelector("arcgis-xy-slider");
  const inputNodes = hostNode.querySelectorAll("calcite-input");
  const origValueX = Number(dataValue === "slider"
    ? node.x
    : dataValue === "x"
      ? node.value
      : inputNodes[0].value);
  const origValueY = Number(dataValue === "slider"
    ? node.y
    : dataValue === "y"
      ? node.value
      : inputNodes[1].value);
  // make sure we don't get more precision than step
  // slider returns values like 1.9000000000000001 (#2928)
  const decimalsCount = countDecimalDigits(step);
  const factor = Math.pow(10, decimalsCount);
  const x = Math.round(origValueX * factor) / factor;
  const y = Math.round(origValueY * factor) / factor;
  const xClamped = Math.min(props.max, Math.max(props.min, x));
  const yClamped = Math.min(props.max, Math.max(props.min, y));
  if (xClamped === sliderNode.x &&
    `${xClamped}` === inputNodes[0].value &&
    yClamped === sliderNode.y &&
    `${yClamped}` === inputNodes[1].value) {
    // no changes
    return;
  }
  // ensure value we show is within allowed range
  sliderNode.x = xClamped;
  sliderNode.y = yClamped;
  inputNodes[0].value = `${xClamped}`;
  inputNodes[1].value = `${yClamped}`;
  // TODO workaround for https://github.com/Esri/calcite-components/issues/3003
  const xClampedString = xClamped.toLocaleString(locale);
  const yClampedString = yClamped.toLocaleString(locale);
  inputNodes[0]
    .querySelectorAll("input")
    .forEach((input) => (input.value = xClampedString));
  inputNodes[1]
    .querySelectorAll("input")
    .forEach((input) => (input.value = yClampedString));
  props.onValueChange(xClamped, yClamped, node);
}
function countDecimalDigits(number) {
  if (number === null || number === undefined) {
    return 0;
  }
  const char_array = number.toString().split(""); // split every single char
  const not_decimal = char_array.lastIndexOf(".");
  return not_decimal < 0 ? 0 : char_array.length - not_decimal;
}

const arcgisEffectsPopoversCss = ".select-number.sc-arcgis-effects-popovers{display:flex;align-items:center;justify-content:space-between;position:relative}.select-number.sc-arcgis-effects-popovers calcite-slider.sc-arcgis-effects-popovers{width:58%;height:30px;margin:0 4px;overflow-wrap:normal;word-break:normal}.select-number__input.sc-arcgis-effects-popovers{width:35%;font-size:var(--arcgis-app-font-size-0);font-family:var(--arcgis-app-font-family)}.select-xy.sc-arcgis-effects-popovers{display:flex;align-items:center}.select-xy.sc-arcgis-effects-popovers arcgis-xy-slider.sc-arcgis-effects-popovers{width:120px;min-width:120px;margin:0 10px}.select-xy__input.sc-arcgis-effects-popovers{width:100%;font-size:var(--arcgis-app-font-size-0);font-family:var(--arcgis-app-font-family)}.popover.sc-arcgis-effects-popovers{z-index:99}.panel.sc-arcgis-effects-popovers{width:325px}.panel.filter.sc-arcgis-effects-popovers{min-height:500px;background-color:var(--calcite-ui-background)}.effects-content.sc-arcgis-effects-popovers{padding:1rem;background-color:white;max-height:80vh}.bottom-space.sc-arcgis-effects-popovers{margin-bottom:1.5rem}.bottom-space-little.sc-arcgis-effects-popovers{margin-bottom:0.5rem}.switch.sc-arcgis-effects-popovers{width:100%;display:flex;justify-content:space-between}.reset.sc-arcgis-effects-popovers{display:flex;align-items:center}.sub-header.sc-arcgis-effects-popovers{margin-left:0.75rem;margin-right:0}.arcgis--rtl.sc-arcgis-effects-popovers .sub-header.sc-arcgis-effects-popovers{margin-right:0.75rem;margin-left:0}";

const ArcgisEffectsPopovers = class {
  constructor(hostRef) {
    (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.arcgisEffectsApplyLayerEffect = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisEffectsApplyLayerEffect", 7);
    this.arcgisEffectsPopoverFilterChange = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisEffectsPopoverFilterChange", 7);
    this.arcgisEffectsPopoverClose = (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisEffectsPopoverClose", 7);
    //--------------------------------------------------------------------------
    //
    //  Private Properties
    //
    //--------------------------------------------------------------------------
    this.defaultExpression = false;
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    this.onOpen = () => {
      setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.closeNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 1);
    };
    this.onClose = () => {
      var _a;
      (_a = this.filterNode) === null || _a === void 0 ? void 0 : _a.closePopovers();
    };
    this.onPropChange = () => {
      const { type } = this;
      this.arcgisEffectsApplyLayerEffect.emit({ type });
    };
    this.onReset = () => {
      const { type, props, popoverNode } = this;
      const { modules } = props;
      const { screenUtils } = modules;
      const defaults = layerEffectDefaults[type];
      switch (type) {
        case "bloom": {
          const inputs = popoverNode.querySelectorAll("calcite-input");
          inputs[0].value = `${defaults.strength}`;
          inputs[1].value = `${screenUtils.pt2px(defaults.radius)}`;
          inputs[2].value = `${Math.round(defaults.threshold * 100)}`;
          const sliders = popoverNode.querySelectorAll("calcite-slider");
          sliders[0].value = defaults.strength;
          sliders[1].value = screenUtils.pt2px(defaults.radius);
          sliders[2].value = Math.round(defaults.threshold * 100);
          break;
        }
        case "dropShadow": {
          let geometryType = getSimpleGeometryType(props);
          const colorPicker = popoverNode.querySelector("calcite-color-picker");
          colorPicker.value = `${this.rgb2Hex(defaults[geometryType].color)}`;
          const inputs = popoverNode.querySelectorAll("calcite-input");
          inputs[0].value = `${Math.round(screenUtils.pt2px(defaults[geometryType].blurRadius))}`;
          inputs[1].value = `${Math.round(screenUtils.pt2px(defaults[geometryType].xoffset))}`;
          inputs[2].value = `${Math.round(screenUtils.pt2px(defaults[geometryType].yoffset))}`;
          inputs[3].value = `${(defaults[geometryType].color[3] / 255) * 100}`;
          const sliders = popoverNode.querySelectorAll("calcite-slider");
          sliders[0].value = Math.round(screenUtils.pt2px(defaults[geometryType].blurRadius));
          sliders[1].value = (defaults[geometryType].color[3] / 255) * 100;
          const xySliders = popoverNode.querySelectorAll("arcgis-xy-slider");
          xySliders[0].x = Math.round(screenUtils.pt2px(defaults[geometryType].xoffset));
          xySliders[0].y = Math.round(screenUtils.pt2px(defaults[geometryType].yoffset));
          break;
        }
        case "blur": {
          popoverNode.querySelector("calcite-input").value = `${screenUtils.pt2px(defaults.radius)}`;
          popoverNode.querySelector("calcite-slider").value = screenUtils.pt2px(defaults.radius);
          break;
        }
        case "brightnessContrast": {
          const defaultsBrightness = layerEffectDefaults["brightness"];
          const defaultsContrast = layerEffectDefaults["contrast"];
          const inputs = popoverNode.querySelectorAll("calcite-input");
          inputs[0].value = `${Math.round(defaultsBrightness.amount * 100)}`;
          inputs[1].value = `${Math.round(defaultsContrast.amount * 100)}`;
          const sliders = popoverNode.querySelectorAll("calcite-slider");
          sliders[0].value = Math.round(defaultsBrightness.amount * 100);
          sliders[1].value = Math.round(defaultsContrast.amount * 100);
          break;
        }
        case "grayscale": {
          popoverNode.querySelector("calcite-input").value = `${defaults.amount * 100}`;
          popoverNode.querySelector("calcite-slider").value = defaults.amount * 100;
          break;
        }
        case "hueRotate": {
          popoverNode.querySelector("calcite-input").value = `${defaults.angle}`;
          popoverNode.querySelector("calcite-slider").value = defaults.angle;
          break;
        }
        case "saturate": {
          popoverNode.querySelector("calcite-input").value = `${defaults.amount * 100}`;
          popoverNode.querySelector("calcite-slider").value = defaults.amount * 100;
          break;
        }
        case "invert": {
          popoverNode.querySelector("calcite-input").value = `${defaults.amount * 100}`;
          popoverNode.querySelector("calcite-slider").value = defaults.amount * 100;
          break;
        }
        case "sepia": {
          popoverNode.querySelector("calcite-input").value = `${defaults.amount * 100}`;
          popoverNode.querySelector("calcite-slider").value = defaults.amount * 100;
          break;
        }
      }
      this.arcgisEffectsApplyLayerEffect.emit({ type });
    };
    this.props = undefined;
    this.type = undefined;
    this.open = false;
    this.referenceElement = undefined;
    this.popovers = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  public calls
  //
  //--------------------------------------------------------------------------
  async reposition() {
    var _a;
    (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
  }
  async updateHeader(type) {
    const { props, filterNode } = this;
    const { strings } = props;
    if (filterNode) {
      // close field-pick-list
      filterNode.closePopovers();
      filterNode.panelHeading = strings.featureEffectsTitle[type] || strings.effectsTitle[type];
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  async componentWillLoad() {
    const { props } = this;
    const { layer } = props;
    if (!layer.featureEffect) {
      // don't start with empty filter, if possible
      this.defaultExpression = true;
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const { props, referenceElement, type, open } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
    const isLongPopover = ["featureEffect", "dropShadow"].indexOf(type) > -1;
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement), pointerDisabled: true, label: strings.effectsTitle[type], offsetDistance: 10, offsetSkidding: isLongPopover ? 10 : 100, open: open, placement: "leading-start", triggerDisabled: true, class: {
        "arcgis-effects-popover": true,
        popover: true,
        [_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl]: rtl
      }, referenceElement: referenceElement, onCalcitePopoverOpen: this.onOpen, onCalcitePopoverClose: this.onClose, ref: (node) => {
        this.popoverNode = node;
        //", popovers[type], node);
        //popovers[type] = node;
      } }, type === "featureEffect"
      ? this.renderFeatureEffectProps()
      : this.renderLayerEffectProps())));
  }
  renderLayerEffectProps() {
    const { props, referenceElement, type } = this;
    const { strings } = props;
    const rtl = (0,_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
    const panelRect = referenceElement.getBoundingClientRect();
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { closable: false, heading: strings.effectsTitle[type], class: CSS.panel, style: {
        maxHeight: `${panelRect.height * 0.9}px`
      }, ref: (node) => (this.panelNode = node) }, [
      "bloom",
      "dropShadow",
      "blur",
      "brightnessContrast",
      "grayscale",
      "hueRotate",
      "saturate",
      "invert",
      "sepia"
    ].indexOf(type) > -1 ? ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.effectsProps.reset, scale: "s", slot: "header-actions-end", title: strings.effectsProps.reset, onClick: this.onReset }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "redo" : "undo" }))) : null, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.general.close, icon: "x", slot: "header-actions-end", title: strings.general.close, ref: (node) => (this.closeNode = node), onClick: () => {
        this.arcgisEffectsPopoverClose.emit();
        this.open = false;
        this.popoverNode.open = false;
        this.panelNode.closed = false;
      } }), type === "bloom" ? this.renderBloom() : null, type === "dropShadow" ? this.renderDropShadow() : null, type === "blur" ? this.renderBlur() : null, type === "brightnessContrast" ? this.renderBrightnessContrast() : null, type === "grayscale" ? this.renderGrayscale() : null, type === "hueRotate" ? this.renderHueRotate() : null, type === "saturate" ? this.renderSaturate() : null, type === "invert" ? this.renderInvert() : null, type === "sepia" ? this.renderSepia() : null));
  }
  renderBloom() {
    // "Bloom": `bloom(2,1px,0.1)`,
    // Strength (0-5) - step 0.1
    // Radius (0-5) - step 0.1
    // Threshold (0-1) - step 0.1
    const { props, type } = this;
    const { layer, strings, locale, modules } = props;
    const { screenUtils } = modules;
    const anyLayer = layer;
    const effectProps = getEffectProps(type, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.strength, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 5, step: 0.1, locale: locale, value: Math.round(effectProps.strength * 10) / 10, classNames: CSS.bottomSpace, label: strings.effectsProps.strength, onValueChange: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.radius, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 5, step: 0.1, locale: locale, value: Math.round(screenUtils.pt2px(effectProps.radius) * 10) / 10, classNames: CSS.bottomSpace, label: strings.effectsProps.radius, onValueChange: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.threshold, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 100, step: 1, locale: locale, value: Math.round(effectProps.threshold * 100), classNames: CSS.bottomSpace, label: strings.effectsProps.threshold, onValueChange: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", scale: "s", class: CSS.switch }, strings.effectsProps.autoAdjust, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: !!(!anyLayer.effect || typeof anyLayer.effect !== "string"), scale: "s", class: CSS.auto, onCalciteSwitchChange: this.onPropChange }))));
  }
  renderDropShadow() {
    // "Drop shadow": `drop-shadow(1px,1px,2px,#000000)`,
    // X offset (-20-20) - step 1
    // Y offset (-20-20) - step 1
    // Blur radius (0-20) - step 1
    const { props, type } = this;
    const { layer, strings, locale, modules } = props;
    const { screenUtils } = modules;
    const anyLayer = layer;
    const effectProps = getEffectProps(type, props);
    const hexValue = this.rgb2Hex(effectProps.color);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.effectsProps.color, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker", { scale: "m", value: hexValue, hideSaved: true, onCalciteColorPickerInput: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.effectsProps.width, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 20, step: 1, locale: locale, value: Math.round(screenUtils.pt2px(effectProps.blurRadius)), classNames: CSS.bottomSpace, label: strings.effectsProps.width, onValueChange: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.effectsProps.offset, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectXy, { min: -20, max: 20, step: 1, locale: locale, x: Math.round(screenUtils.pt2px(effectProps.xoffset)), y: Math.round(screenUtils.pt2px(effectProps.yoffset)), classNames: CSS.bottomSpaceLittle, strings: strings, onValueChange: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.opacity, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 100, step: 1, locale: locale, value: (effectProps.color[3] / 255) * 100, classNames: CSS.bottomSpace, label: strings.effectsProps.opacity, onValueChange: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", scale: "s", class: CSS.switch }, strings.effectsProps.autoAdjust, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: !!(!anyLayer.effect || typeof anyLayer.effect !== "string"), scale: "s", class: CSS.auto, onCalciteSwitchChange: this.onPropChange }))));
  }
  renderBlur() {
    // "Blur": `blur(2px)`,
    // Blur (0-30) - step 0.1
    const { props, type } = this;
    const { strings, locale, modules } = props;
    const { screenUtils } = modules;
    const effectProps = getEffectProps(type, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.strength, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 30, step: 0.1, locale: locale, value: Math.round(screenUtils.pt2px(effectProps.radius) * 10) / 10, classNames: CSS.bottomSpace, label: strings.effectsProps.strength, onValueChange: this.onPropChange }))));
  }
  renderBrightnessContrast() {
    // brightness(100%) contrast(100%)
    // Brightness (0-300) - step 1 + Contrast (0-300) - step 1
    const { props } = this;
    const { strings, locale } = props;
    const effectPropsBrightness = getEffectProps("brightness", props);
    const effectPropsContrast = getEffectProps("contrast", props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.brightness, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 300, step: 1, locale: locale, value: Math.round(effectPropsBrightness.amount * 100), classNames: CSS.bottomSpace, label: strings.effectsProps.brightness, onValueChange: this.onPropChange })), (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.contrast, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 300, step: 1, locale: locale, value: Math.round(effectPropsContrast.amount * 100), classNames: CSS.bottomSpace, label: strings.effectsProps.contrast, onValueChange: this.onPropChange }))));
  }
  renderGrayscale() {
    // grayscale(25%)
    // Grayscale (0-100) - step 1
    const { props, type } = this;
    const { strings, locale } = props;
    const effectProps = getEffectProps(type, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.strength, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 100, step: 1, locale: locale, value: effectProps.amount * 100, classNames: CSS.bottomSpace, label: strings.effectsProps.strength, onValueChange: this.onPropChange }))));
  }
  renderHueRotate() {
    // hue-rotate(270deg),
    // Hue rotate (0-360) - step 1
    const { props, type } = this;
    const { strings, locale } = props;
    const effectProps = getEffectProps(type, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.degrees, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 360, step: 1, locale: locale, value: effectProps.angle, classNames: CSS.bottomSpace, label: strings.effectsProps.degrees, onValueChange: this.onPropChange }))));
  }
  renderSaturate() {
    // saturate(100%)
    // Saturate (0-200) - step 1
    const { props, type } = this;
    const { strings, locale } = props;
    const effectProps = getEffectProps(type, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.strength, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 200, step: 1, locale: locale, value: effectProps.amount * 100, classNames: CSS.bottomSpace, label: strings.effectsProps.strength, onValueChange: this.onPropChange }))));
  }
  renderInvert() {
    // invert(100%)
    // Invert (0-100) or (0-1) - step 1 or 0.01
    const { props, type } = this;
    const { strings, locale } = props;
    const effectProps = getEffectProps(type, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.strength, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 100, step: 1, locale: locale, value: effectProps.amount * 100, classNames: CSS.bottomSpace, label: strings.effectsProps.strength, onValueChange: this.onPropChange }))));
  }
  renderSepia() {
    // sepia(50%)
    // Sepia (0-100) - step 1
    const { props, type } = this;
    const { strings, locale } = props;
    const effectProps = getEffectProps(type, props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s", onClick: calciteLabelClickHandlerForProperFocus }, strings.effectsProps.strength, (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)(SelectNumber, { min: 0, max: 100, step: 1, locale: locale, value: effectProps.amount * 100, classNames: CSS.bottomSpace, label: strings.effectsProps.strength, onValueChange: this.onPropChange }))));
  }
  renderFeatureEffectProps() {
    const { props, type, defaultExpression } = this;
    const { view, layer, strings } = props;
    const defaultField = getDefaultField(props);
    return ((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-filter", { class: `${CSS.panel} filter`, view: view, layer: layer, hideLayerTitle: true, panelHeading: strings.featureEffectsTitle[type], tipHeading: strings.filter.tipHeading, tipMsg: strings.filter.tipMsg, invalidHeading: strings.filter.invalidHeading, invalidMsg: strings.filter.invalidMsg, mode: "effects", defaultFieldName: defaultField, defaultOperator: ">", defaultExpression: !!defaultField && defaultExpression, hideButtons: true, dismissible: true, panelMaxHeight: "80vh", onArcgisFilterDismissedChange: () => {
        this.arcgisEffectsPopoverClose.emit();
        this.popoverNode.open = false;
        this.open = false;
      }, onArcgisFilterWhereChange: ({ detail: where }) => {
        this.arcgisEffectsPopoverFilterChange.emit(where);
      }, ref: (node) => (this.filterNode = node) }));
  }
  rgb2Hex(color) {
    return ("#" +
      this.componentToHex(Math.max(0, Math.min(255, color[0]))) +
      this.componentToHex(Math.max(0, Math.min(255, color[1]))) +
      this.componentToHex(Math.max(0, Math.min(255, color[2]))));
  }
  componentToHex(c) {
    const hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
  }
  get hostElement() { return (0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisEffectsPopovers.style = arcgisEffectsPopoversCss;




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-f63100ef.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arcgisComponentNotificationsKeys),
/* harmony export */   g: () => (/* binding */ getSingleObjectLocalStorage),
/* harmony export */   l: () => (/* binding */ localStorageKeys),
/* harmony export */   s: () => (/* binding */ setSingleObjectLocalStorage)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */
var localStorageKeys;
(function (localStorageKeys) {
  localStorageKeys["ARCGIS_COMPONENT_NOTIFICATIONS"] = "arcgisComponent_notifications";
})(localStorageKeys || (localStorageKeys = {}));
var arcgisComponentNotificationsKeys;
(function (arcgisComponentNotificationsKeys) {
  arcgisComponentNotificationsKeys["FEATURE_REDUCTION_WARNING_DISMISSED"] = "arcgis_feature_reduction_warning_dismissed";
  arcgisComponentNotificationsKeys["POPUP_WARNING_DISMISSED"] = "arcgis_popup_warning_dismissed";
  arcgisComponentNotificationsKeys["INCOMPATIBLE_VECTOR_SYMBOLS_DISMISSED"] = "arcgis_symbol_styler_incompatible_vector_symbols_dismissed";
  arcgisComponentNotificationsKeys["EFFECTS_TIP_DISMISSED"] = "arcgis_effects_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_DEFINITION_DISMISSED"] = "arcgis_layer_view_definition_dismissed";
  arcgisComponentNotificationsKeys["LAYER_OVERRIDE_STATUS_TIP_DISMISSED"] = "arcgis_layer_override_status_tip_dismissed";
  arcgisComponentNotificationsKeys["LAYER_VIEW_JOIN_TIP_DISMISSED"] = "arcgis_layer_view_join_tip_dismissed";
  arcgisComponentNotificationsKeys["MULTIDIMENSIONAL_INFO_TIP_DISMISSED"] = "arcgis_multidimensional_info_tip_dismissed";
})(arcgisComponentNotificationsKeys || (arcgisComponentNotificationsKeys = {}));
const getLocalStorage = (localStorageKey) => {
  return localStorage.getItem(localStorageKey);
};
const setLocalStorage = (localStorageKey, value) => {
  localStorage.setItem(localStorageKey, value);
};
const getObjectLocalStorage = (localStorageKey) => {
  return JSON.parse(getLocalStorage(localStorageKey)) || {};
};
const setSingleObjectLocalStorage = (localStorageKey, keyValueObject) => {
  const setLocalStorageVal = getObjectLocalStorage(localStorageKey);
  setLocalStorageVal[keyValueObject.key] = keyValueObject.value;
  setLocalStorage(localStorageKey, JSON.stringify(setLocalStorageVal));
};
const getSingleObjectLocalStorage = (localStorageKey, objectKey) => {
  const getLocalStorageVal = getObjectLocalStorage(localStorageKey);
  if (getLocalStorageVal === null || getLocalStorageVal === void 0 ? void 0 : getLocalStorageVal.hasOwnProperty(objectKey)) {
    return getLocalStorageVal[objectKey];
  }
  else {
    return null;
  }
};




/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-13e00a75.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-13f5b00c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-13f5b00c.js");
/* harmony import */ var _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-22258c90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-22258c90.js");
/* harmony import */ var _index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-92ebb396.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-92ebb396.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v3.0.99
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
  var _a, _b, _c;
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    // "ru-RU" maps to "ru" use case
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
    }
    else {
      return "en";
    }
  }
}
function getComponentClosestLanguageIntl(element) {
  var _a, _b, _c;
  // it's OK if we don't have the 4 letter language file for it
  // 4 letter language code needed for formatting numbers
  const closestElement = (_a = (0,_dom_13f5b00c_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
  // language set by the calling application or browser. defaults to english.
  const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
  if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
    return _languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
  }
  else {
    if (_languageUtil_22258c90_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
      // we support the 2 letter coded language
      // e.g. it-CH vs it
      return lang;
    }
    else {
      return "en";
    }
  }
}
function fetchLocaleStringsForComponent(componentName, locale) {
  return new Promise((resolve, reject) => {
    fetch((0,_index_92ebb396_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
      if (result.ok)
        resolve(result.json());
      else
        reject();
    }, () => reject());
  });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
  const id = `${componentName}${locale}`;
  if (!stringCache[id]) {
    stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
  }
  return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
  const componentName = tagName || element.tagName.toLowerCase();
  const componentLanguage = getComponentClosestLanguage(element);
  const componentLanguageIntl = getComponentClosestLanguageIntl(element);
  let strings;
  try {
    strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
  }
  catch (e) {
    console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
    strings = await fetchLocaleStringsFromCache(componentName, "en");
  }
  return [strings, componentLanguage, componentLanguageIntl];
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,